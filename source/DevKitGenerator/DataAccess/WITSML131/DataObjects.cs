// 
// License notice 
// Standards DevKit, version 1.0 
// Copyright 2011 ExxonMobil Upstream Research Company
//  
// The following Energistics (c) products were used in the creation of this work: 
// 
// •	WITSML Data Schema Specifications, Version 1.4.1 
// •	WITSML API Specifications, version 1.4.1 
// •	WITSML Data Schema Specifications, Version 1.3.1.1 
// •	WITSML API Specifications, version 1.3.1 
// •	PRODML Data Schema Specifications, Version 1.2 
// •	PRODML Web Service Specifications, Version 2.0
// 
// All rights in the WITSML™ Standard and the PRODML™ Standard, or any portion thereof, which remain in the 
// Standards DevKitshall remain with Energistics or its suppliers and shall remain subject to the terms of 
// the Product License Agreement available at http://www.energistics.org/product-license-agreement. 
// 
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
// compliance with the License. 
// 
// You may obtain a copy of the License at 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software distributed under the License is 
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
// 
// See the License for the specific language governing permissions and limitations under the License. 
// 

//This code was generated using the Energistics Generator tool.  Direct changes to this code will be lost
//during regeneration.

using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

using Energistics.DataAccess.WITSML131.ComponentSchemas;
using Energistics.DataAccess.WITSML131.ReferenceData;

namespace Energistics.DataAccess.WITSML131
{
    #region Classes
    /// <summary>
    /// This class represents the obj_bhaRuns xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("bhaRuns", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_bhaRuns xsd type.")]
    public partial class BhaRunList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single bottom hole assembly run. 
        /// </summary>
        [XmlElement("bhaRun")]
        public List<BhaRun> BhaRun { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return BhaRun;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentInfo", Namespace="http://www.witsml.org/schemas/131")]
    [Description("A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.")]
    public partial class DocumentInfo : Object 
    {

        /// <summary>
        /// An identifier for the document. This is intended to be unique within the context of the NamingSystem.
        /// </summary>
        [XmlElement("DocumentName")]
        public NameStruct DocumentName { get; set; }
		/// <summary>
        /// Zero or more alternate names for the document. These names do not need to be unique within the naming system.
        /// </summary>
        [XmlElement("DocumentAlias")]
        public List<NameStruct> DocumentAlias { get; set; }
        /// <summary>
        /// The date of the creation of the document. This is not the same as the date that the file was created. For this date, the document is considered to be the set of information associated with this document information. For example, the document may be a seismic binset. This represents the date that the binset was created. The FileCreation information would capture the date that the XML file was created to send or exchange the binset.
        /// </summary>
        [XmlElement("DocumentDate")]
        public DateTime? DocumentDate {
            get {
                return DocumentDateField;
            } 
            set { 
                DocumentDateField = value;
                this.DocumentDateSpecified = true;
            }
        }

        private DateTime? DocumentDateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DocumentDateSpecified { get; set; }
		/// <summary>
        /// A document class. Examples of classes would be a metadata classification or a set of keywords. 
        /// </summary>
        [XmlElement("documentClass")]
        public List<NameStruct> DocumentClass { get; set; }
        /// <summary>
        /// The information about the creation of the exchange file. This is not about the creation of the data within the file, but the creation of the file itself.
        /// </summary>
        [XmlElement("FileCreationInformation")]
        public FileCreationType FileCreationInformation { get; set; }
		/// <summary>
        /// Information about the security to be applied to this file. More than one classification can be given.
        /// </summary>
        [XmlElement("SecurityInformation")]
        public List<SecurityInfoType> SecurityInformation { get; set; }
        /// <summary>
        /// A free-form string that allows a disclaimer to accompany the information.
        /// </summary>
        [XmlElement("Disclaimer")]
        public String Disclaimer { get; set; }
        /// <summary>
        /// A collection of events that can document the history of the data.
        /// </summary>
        [XmlElement("AuditTrail")]
        public List<EventType> AuditTrail { get; set; }
        /// <summary>
        /// The owner of the data.
        /// </summary>
        [XmlElement("Owner")]
        public String Owner { get; set; }
        /// <summary>
        /// An optional comment about the document.
        /// </summary>
        [XmlElement("Comment")]
        public String Comment { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the nameStruct xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="nameStruct", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the nameStruct xsd type.")]
    public partial class NameStruct : Object 
    {
        public NameStruct() {}
        public NameStruct(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The naming system within the name is (hopefully) unique.
        /// </summary>
        [XmlAttribute("namingSystem")]
        public String NamingSystem { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_customData xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_customData", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the cs_customData xsd type.")]
    public partial class CustomData : Object 
    {

        
        [XmlElement("Any")]
        public List<XmlElement> Any { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Common Data Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_commonData", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Common Data Component Schema ")]
    public partial class CommonData : Object 
    {

        /// <summary>
        /// An identifier to indicate the data originator. This identifies the server that originally created the object and thus most of the uids in the object (but not necessarily the uids of the parents). This is typically a url. 
        /// </summary>
        [XmlElement("sourceName")]
        public String SourceName { get; set; }
        /// <summary>
        /// When the data was created at the persistent data store. 
        /// </summary>
        [XmlElement("dTimCreation")]
        public DateTime? DateTimeCreation {
            get {
                return dTimCreationField;
            } 
            set { 
                dTimCreationField = value;
                this.DateTimeCreationSpecified = true;
            }
        }

        private DateTime? dTimCreationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCreationSpecified { get; set; }
        /// <summary>
        /// Last change of any element of the data at the persistent data store. The change time is not updated for a growing object while it is growing. 
        /// </summary>
        [XmlElement("dTimLastChange")]
        public DateTime? DateTimeLastChange {
            get {
                return dTimLastChangeField;
            } 
            set { 
                dTimLastChangeField = value;
                this.DateTimeLastChangeSpecified = true;
            }
        }

        private DateTime? dTimLastChangeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeLastChangeSpecified { get; set; }
        /// <summary>
        /// The item state for the data object. 
        /// </summary>
        [XmlElement("itemState")]
        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set { 
                itemStateField = value;
                this.ItemStateSpecified = true;
            }
        }

        private ItemState? itemStateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ItemStateSpecified { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Bottom hole assembly drilling parameters component schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillingParams", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Bottom hole assembly drilling parameters component schema ")]
    public partial class DrillingParams : Object 
    {

        /// <summary>
        /// Operating time spent by bit for run. 
        /// </summary>
        [XmlElement("eTimOpBit")]
        public TimeMeasure ETimeOperatingBit { get; set; }
        /// <summary>
        /// Measured depth at start. 
        /// </summary>
        [XmlElement("mdHoleStart")]
        public MeasuredDepthCoord MDHoleStart { get; set; }
        /// <summary>
        /// Measured depth at stop. 
        /// </summary>
        [XmlElement("mdHoleStop")]
        public MeasuredDepthCoord MDHoleStop { get; set; }
        /// <summary>
        /// A pointer to the tubular assembly. 
        /// </summary>
        [XmlElement("tubular")]
        public RefNameString Tubular { get; set; }
        /// <summary>
        /// Hookload - rotating. 
        /// </summary>
        [XmlElement("hkldRot")]
        public ForceMeasure HookloadRot { get; set; }
        /// <summary>
        /// hkldUp-hkldRot. 
        /// </summary>
        [XmlElement("overPull")]
        public ForceMeasure OverPull { get; set; }
        /// <summary>
        /// hkldRot-hkldDown. 
        /// </summary>
        [XmlElement("slackOff")]
        public ForceMeasure SlackOff { get; set; }
        /// <summary>
        /// Hookload - string moving up. 
        /// </summary>
        [XmlElement("hkldUp")]
        public ForceMeasure HookloadUp { get; set; }
        /// <summary>
        /// Hookload - string moving down. 
        /// </summary>
        [XmlElement("hkldDn")]
        public ForceMeasure HookloadDown { get; set; }
        /// <summary>
        /// Average Torque - on bottom. 
        /// </summary>
        [XmlElement("tqOnBotAv")]
        public MomentOfForceMeasure TorqueOnBotAverage { get; set; }
        /// <summary>
        /// Maximum torque - on bottom. 
        /// </summary>
        [XmlElement("tqOnBotMx")]
        public MomentOfForceMeasure TorqueOnBotMax { get; set; }
        /// <summary>
        /// Minimum torque - on bottom. 
        /// </summary>
        [XmlElement("tqOnBotMn")]
        public MomentOfForceMeasure TorqueOnBotMin { get; set; }
        /// <summary>
        /// Average torque - off bottom. 
        /// </summary>
        [XmlElement("tqOffBotAv")]
        public MomentOfForceMeasure TorqueOffBotAverage { get; set; }
        /// <summary>
        /// Average torque - downhole. 
        /// </summary>
        [XmlElement("tqDhAv")]
        public MomentOfForceMeasure TorqueDownholeAverage { get; set; }
        /// <summary>
        /// Weight above jars. 
        /// </summary>
        [XmlElement("wtAboveJar")]
        public ForceMeasure WeightAboveJar { get; set; }
        /// <summary>
        /// Weight below jars. 
        /// </summary>
        [XmlElement("wtBelowJar")]
        public ForceMeasure WeightBelowJar { get; set; }
        /// <summary>
        /// Mud density. 
        /// </summary>
        [XmlElement("wtMud")]
        public DensityMeasure WeightMud { get; set; }
        /// <summary>
        /// Pump flow rate. 
        /// </summary>
        [XmlElement("flowratePump")]
        public VolumeFlowRateMeasure FlowratePump { get; set; }
        /// <summary>
        /// Bit hydraulic. 
        /// </summary>
        [XmlElement("powBit")]
        public PowerMeasure PowBit { get; set; }
        /// <summary>
        /// Bit nozzle average velocity. 
        /// </summary>
        [XmlElement("velNozzleAv")]
        public VelocityMeasure VelNozzleAverage { get; set; }
        /// <summary>
        /// Pressure drop in bit. 
        /// </summary>
        [XmlElement("presDropBit")]
        public PressureMeasure PresDropBit { get; set; }
        /// <summary>
        /// Time spent on hold from start of bit run. 
        /// </summary>
        [XmlElement("cTimHold")]
        public TimeMeasure CTimHold { get; set; }
        /// <summary>
        /// Time spent steering from start of bit run. 
        /// </summary>
        [XmlElement("cTimSteering")]
        public TimeMeasure CTimSteering { get; set; }
        /// <summary>
        /// Time spent rotary drilling from start of bit run. 
        /// </summary>
        [XmlElement("cTimDrillRot")]
        public TimeMeasure CTimDrillRot { get; set; }
        /// <summary>
        /// Time spent slide drilling from start of bit run. 
        /// </summary>
        [XmlElement("cTimDrillSlid")]
        public TimeMeasure CTimDrillSlid { get; set; }
        /// <summary>
        /// Time spent circulating from start of bit run. 
        /// </summary>
        [XmlElement("cTimCirc")]
        public TimeMeasure CTimCirc { get; set; }
        /// <summary>
        /// Time spent reaming from start of bit run. 
        /// </summary>
        [XmlElement("cTimReam")]
        public TimeMeasure CTimReam { get; set; }
        /// <summary>
        /// Distance drilled - rotating. 
        /// </summary>
        [XmlElement("distDrillRot")]
        public LengthMeasure DistDrillRot { get; set; }
        /// <summary>
        /// Distance drilled - sliding 
        /// </summary>
        [XmlElement("distDrillSlid")]
        public LengthMeasure DistDrillSlid { get; set; }
        /// <summary>
        /// Distance reamed. 
        /// </summary>
        [XmlElement("distReam")]
        public LengthMeasure DistReam { get; set; }
        /// <summary>
        /// Distance covered while holding angle with a steerable drilling assembly. 
        /// </summary>
        [XmlElement("distHold")]
        public LengthMeasure DistHold { get; set; }
        /// <summary>
        /// Distance covered while actively steering with a steerable drilling assembly. 
        /// </summary>
        [XmlElement("distSteering")]
        public LengthMeasure DistSteering { get; set; }
        /// <summary>
        /// Average turn rate (commonly in rpm) through Interval. 
        /// </summary>
        [XmlElement("rpmAv")]
        public AnglePerTimeMeasure RpmAverage { get; set; }
        /// <summary>
        /// Maximum turn rate (commonly in rpm). 
        /// </summary>
        [XmlElement("rpmMx")]
        public AnglePerTimeMeasure RpmMax { get; set; }
        /// <summary>
        /// Minimum turn rate (commonly in rpm). 
        /// </summary>
        [XmlElement("rpmMn")]
        public AnglePerTimeMeasure RpmMin { get; set; }
        /// <summary>
        /// Average turn rate (commonly in rpm) downhole. 
        /// </summary>
        [XmlElement("rpmAvDh")]
        public AnglePerTimeMeasure RpmAverageDownhole { get; set; }
        /// <summary>
        /// Average rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropAv")]
        public VelocityMeasure RopAverage { get; set; }
        /// <summary>
        /// Maximum rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropMx")]
        public VelocityMeasure RopMax { get; set; }
        /// <summary>
        /// Minimum rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropMn")]
        public VelocityMeasure RopMin { get; set; }
        /// <summary>
        /// Surface weight on bit - average through interval. 
        /// </summary>
        [XmlElement("wobAv")]
        public ForceMeasure WobAverage { get; set; }
        /// <summary>
        /// Weight on bit - maximum. 
        /// </summary>
        [XmlElement("wobMx")]
        public ForceMeasure WobMax { get; set; }
        /// <summary>
        /// Weight on bit - minimum. 
        /// </summary>
        [XmlElement("wobMn")]
        public ForceMeasure WobMin { get; set; }
        /// <summary>
        /// Weight on bit - average downhole. 
        /// </summary>
        [XmlElement("wobAvDh")]
        public ForceMeasure WobAverageDownhole { get; set; }
        /// <summary>
        /// Reason for trip. 
        /// </summary>
        [XmlElement("reasonTrip")]
        public String ReasonTrip { get; set; }
        /// <summary>
        /// Objective of bottom hole assembly. 
        /// </summary>
        [XmlElement("objectiveBha")]
        public String ObjectiveBha { get; set; }
        /// <summary>
        /// Azimuth at start measured depth. 
        /// </summary>
        [XmlElement("aziTop")]
        public PlaneAngleMeasure AziTop { get; set; }
        /// <summary>
        /// Azimuth at stop measured depth. 
        /// </summary>
        [XmlElement("aziBottom")]
        public PlaneAngleMeasure AziBottom { get; set; }
        /// <summary>
        /// Inclination at start measured depth. 
        /// </summary>
        [XmlElement("inclStart")]
        public PlaneAngleMeasure InclStart { get; set; }
        /// <summary>
        /// Maximum inclination. 
        /// </summary>
        [XmlElement("inclMx")]
        public PlaneAngleMeasure InclMax { get; set; }
        /// <summary>
        /// Minimum inclination. 
        /// </summary>
        [XmlElement("inclMn")]
        public PlaneAngleMeasure InclMin { get; set; }
        /// <summary>
        /// Inclination at stop measured depth. 
        /// </summary>
        [XmlElement("inclStop")]
        public PlaneAngleMeasure InclStop { get; set; }
        /// <summary>
        /// Maximum mud temperature downhole during run. 
        /// </summary>
        [XmlElement("tempMudDhMx")]
        public ThermodynamicTemperatureMeasure TempMudDownholeMax { get; set; }
        /// <summary>
        /// Average pump pressure. 
        /// </summary>
        [XmlElement("presPumpAv")]
        public PressureMeasure PresPumpAverage { get; set; }
        /// <summary>
        /// Flow rate at bit. 
        /// </summary>
        [XmlElement("flowrateBit")]
        public VolumeFlowRateMeasure FlowrateBit { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the abstractMeasure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectricPotentialMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectricCurrentMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentPerMassMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EnergyPerAreaMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrequencyMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MagneticInductionMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MagneticFieldStrengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellElevationCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellVerticalDepthCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasuredDepthCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RatioGenericMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GenericMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasurePercent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(YAxisAzimuth))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TemperatureSlopeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneralMeasureType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeFlowRateMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VelocityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermodynamicTemperatureMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecificVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelativePowerMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PressureMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PowerMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MomentOfForceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassPerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassConcentrationMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthPerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IlluminanceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForcePerVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForcePerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaneAngleMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DynamicViscosityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DimensionlessMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DensityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaPerAreaMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnglePerTimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnglePerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AccelerationLinearMeasure))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="abstractMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the abstractMeasure xsd type.")]
    public abstract partial class AbstractMeasure : Object 
    {

		
        [XmlText]
        public Double Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timeMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the timeMeasure xsd type.")]
    public partial class TimeMeasure : AbstractMeasure 
    {
        public TimeMeasure() {}
        public TimeMeasure(Double value, TimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public TimeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellElevationCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellElevationCoord", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the wellElevationCoord xsd type.")]
    public partial class WellElevationCoord : AbstractMeasure 
    {
        public WellElevationCoord() {}
        public WellElevationCoord(Double value, WellVerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value. If not given then the default unit of measure of the explicitly or implicitly given datum must be assumed.
        /// </summary>
        [XmlAttribute("uom")]
        public WellVerticalCoordinateUom Uom { get; set; }
		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
        [XmlAttribute("datum")]
        public String Datum { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellVerticalDepthCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellVerticalDepthCoord", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the wellVerticalDepthCoord xsd type.")]
    public partial class WellVerticalDepthCoord : AbstractMeasure 
    {
        public WellVerticalDepthCoord() {}
        public WellVerticalDepthCoord(Double value, WellVerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value.
        /// </summary>
        [XmlAttribute("uom")]
        public WellVerticalCoordinateUom Uom { get; set; }
		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
        [XmlAttribute("datum")]
        public String Datum { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the measuredDepthCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="measuredDepthCoord", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the measuredDepthCoord xsd type.")]
    public partial class MeasuredDepthCoord : AbstractMeasure 
    {
        public MeasuredDepthCoord() {}
        public MeasuredDepthCoord(Double value, MeasuredDepthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value.
        /// </summary>
        [XmlAttribute("uom")]
        public MeasuredDepthUom Uom { get; set; }
		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. This value is assumed to match the uid value in a WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
        [XmlAttribute("datum")]
        public String Datum { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ratioGenericMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ratioGenericMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the ratioGenericMeasure xsd type.")]
    public partial class RatioGenericMeasure : AbstractMeasure 
    {
        public RatioGenericMeasure() {}
        public RatioGenericMeasure(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public String Uom { get; set; }
		
        [XmlAttribute("numerator")]
        public Double Numerator {
            get {
                return numeratorField;
            } 
            set { 
                numeratorField = value;
                this.NumeratorSpecified = true;
            }
        }

        private Double numeratorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumeratorSpecified { get; set; }
		
        [XmlAttribute("denominator")]
        public Double Denominator {
            get {
                return denominatorField;
            } 
            set { 
                denominatorField = value;
                this.DenominatorSpecified = true;
            }
        }

        private Double denominatorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DenominatorSpecified { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the genericMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="genericMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the genericMeasure xsd type.")]
    public partial class GenericMeasure : AbstractMeasure 
    {
        public GenericMeasure() {}
        public GenericMeasure(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the quantity. The uom is mandatory unless the value represents a unitless quantity.
        /// </summary>
        [XmlAttribute("uom")]
        public String Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerVolumeMeasurePercent xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasurePercent", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the volumePerVolumeMeasurePercent xsd type.")]
    public partial class VolumePerVolumeMeasurePercent : AbstractMeasure 
    {
        public VolumePerVolumeMeasurePercent() {}
        public VolumePerVolumeMeasurePercent(Double value, PercentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public PercentUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the yAxisAzimuth xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="yAxisAzimuth", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the yAxisAzimuth xsd type.")]
    public partial class YAxisAzimuth : AbstractMeasure 
    {
        public YAxisAzimuth() {}
        public YAxisAzimuth(Double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the azimuth value.
        /// </summary>
        [XmlAttribute("uom")]
        public PlaneAngleUom Uom { get; set; }
		/// <summary>
        /// Specifies the direction to be considered North for the y axis.
        /// </summary>
        [XmlAttribute("northDirection")]
        public AziRef NorthDirection {
            get {
                return northDirectionField;
            } 
            set { 
                northDirectionField = value;
                this.NorthDirectionSpecified = true;
            }
        }

        private AziRef northDirectionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NorthDirectionSpecified { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the temperatureSlopeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="temperatureSlopeMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the temperatureSlopeMeasure xsd type.")]
    public partial class TemperatureSlopeMeasure : AbstractMeasure 
    {
        public TemperatureSlopeMeasure() {}
        public TemperatureSlopeMeasure(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public String Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the generalMeasureType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="generalMeasureType", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the generalMeasureType xsd type.")]
    public partial class GeneralMeasureType : AbstractMeasure 
    {
        public GeneralMeasureType() {}
        public GeneralMeasureType(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public String Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the volumePerVolumeMeasure xsd type.")]
    public partial class VolumePerVolumeMeasure : AbstractMeasure 
    {
        public VolumePerVolumeMeasure() {}
        public VolumePerVolumeMeasure(Double value, VolumePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public VolumePerVolumeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeFlowRateMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeFlowRateMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the volumeFlowRateMeasure xsd type.")]
    public partial class VolumeFlowRateMeasure : AbstractMeasure 
    {
        public VolumeFlowRateMeasure() {}
        public VolumeFlowRateMeasure(Double value, VolumeFlowRateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public VolumeFlowRateUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the volumeMeasure xsd type.")]
    public partial class VolumeMeasure : AbstractMeasure 
    {
        public VolumeMeasure() {}
        public VolumeMeasure(Double value, VolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public VolumeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the velocityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="velocityMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the velocityMeasure xsd type.")]
    public partial class VelocityMeasure : AbstractMeasure 
    {
        public VelocityMeasure() {}
        public VelocityMeasure(Double value, VelocityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public VelocityUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermodynamicTemperatureMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermodynamicTemperatureMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the thermodynamicTemperatureMeasure xsd type.")]
    public partial class ThermodynamicTemperatureMeasure : AbstractMeasure 
    {
        public ThermodynamicTemperatureMeasure() {}
        public ThermodynamicTemperatureMeasure(Double value, ThermodynamicTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ThermodynamicTemperatureUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the specificVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="specificVolumeMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the specificVolumeMeasure xsd type.")]
    public partial class SpecificVolumeMeasure : AbstractMeasure 
    {
        public SpecificVolumeMeasure() {}
        public SpecificVolumeMeasure(Double value, SpecificVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public SpecificVolumeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the relativePowerMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="relativePowerMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the relativePowerMeasure xsd type.")]
    public partial class RelativePowerMeasure : AbstractMeasure 
    {
        public RelativePowerMeasure() {}
        public RelativePowerMeasure(Double value, RelativePowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public RelativePowerUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the pressureMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="pressureMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the pressureMeasure xsd type.")]
    public partial class PressureMeasure : AbstractMeasure 
    {
        public PressureMeasure() {}
        public PressureMeasure(Double value, PressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public PressureUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the powerMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="powerMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the powerMeasure xsd type.")]
    public partial class PowerMeasure : AbstractMeasure 
    {
        public PowerMeasure() {}
        public PowerMeasure(Double value, PowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public PowerUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the planeAngleMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="planeAngleMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the planeAngleMeasure xsd type.")]
    public partial class PlaneAngleMeasure : AbstractMeasure 
    {
        public PlaneAngleMeasure() {}
        public PlaneAngleMeasure(Double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public PlaneAngleUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the perLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="perLengthMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the perLengthMeasure xsd type.")]
    public partial class PerLengthMeasure : AbstractMeasure 
    {
        public PerLengthMeasure() {}
        public PerLengthMeasure(Double value, PerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public PerLengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the momentOfForceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="momentOfForceMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the momentOfForceMeasure xsd type.")]
    public partial class MomentOfForceMeasure : AbstractMeasure 
    {
        public MomentOfForceMeasure() {}
        public MomentOfForceMeasure(Double value, MomentOfForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public MomentOfForceUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massPerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massPerLengthMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the massPerLengthMeasure xsd type.")]
    public partial class MassPerLengthMeasure : AbstractMeasure 
    {
        public MassPerLengthMeasure() {}
        public MassPerLengthMeasure(Double value, MassPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public MassPerLengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the massMeasure xsd type.")]
    public partial class MassMeasure : AbstractMeasure 
    {
        public MassMeasure() {}
        public MassMeasure(Double value, MassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public MassUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massConcentrationMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massConcentrationMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the massConcentrationMeasure xsd type.")]
    public partial class MassConcentrationMeasure : AbstractMeasure 
    {
        public MassConcentrationMeasure() {}
        public MassConcentrationMeasure(Double value, MassConcentrationUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public MassConcentrationUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the magneticInductionMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="magneticInductionMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the magneticInductionMeasure xsd type.")]
    public partial class MagneticInductionMeasure : AbstractMeasure 
    {
        public MagneticInductionMeasure() {}
        public MagneticInductionMeasure(Double value, MagneticInductionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public MagneticInductionUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the magneticFieldStrengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="magneticFieldStrengthMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the magneticFieldStrengthMeasure xsd type.")]
    public partial class MagneticFieldStrengthMeasure : AbstractMeasure 
    {
        public MagneticFieldStrengthMeasure() {}
        public MagneticFieldStrengthMeasure(Double value, MagneticFieldStrengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public MagneticFieldStrengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lengthPerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthPerLengthMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the lengthPerLengthMeasure xsd type.")]
    public partial class LengthPerLengthMeasure : AbstractMeasure 
    {
        public LengthPerLengthMeasure() {}
        public LengthPerLengthMeasure(Double value, LengthPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public LengthPerLengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the lengthMeasure xsd type.")]
    public partial class LengthMeasure : AbstractMeasure 
    {
        public LengthMeasure() {}
        public LengthMeasure(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public LengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the illuminanceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="illuminanceMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the illuminanceMeasure xsd type.")]
    public partial class IlluminanceMeasure : AbstractMeasure 
    {
        public IlluminanceMeasure() {}
        public IlluminanceMeasure(Double value, IlluminanceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public IlluminanceUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the frequencyMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="frequencyMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the frequencyMeasure xsd type.")]
    public partial class FrequencyMeasure : AbstractMeasure 
    {
        public FrequencyMeasure() {}
        public FrequencyMeasure(Double value, FrequencyUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public FrequencyUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forcePerVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forcePerVolumeMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the forcePerVolumeMeasure xsd type.")]
    public partial class ForcePerVolumeMeasure : AbstractMeasure 
    {
        public ForcePerVolumeMeasure() {}
        public ForcePerVolumeMeasure(Double value, ForcePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ForcePerVolumeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forcePerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forcePerLengthMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the forcePerLengthMeasure xsd type.")]
    public partial class ForcePerLengthMeasure : AbstractMeasure 
    {
        public ForcePerLengthMeasure() {}
        public ForcePerLengthMeasure(Double value, ForcePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ForcePerLengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forceMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the forceMeasure xsd type.")]
    public partial class ForceMeasure : AbstractMeasure 
    {
        public ForceMeasure() {}
        public ForceMeasure(Double value, ForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ForceUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the equivalentPerMassMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="equivalentPerMassMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the equivalentPerMassMeasure xsd type.")]
    public partial class EquivalentPerMassMeasure : AbstractMeasure 
    {
        public EquivalentPerMassMeasure() {}
        public EquivalentPerMassMeasure(Double value, EquivalentPerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public EquivalentPerMassUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the energyPerAreaMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="energyPerAreaMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the energyPerAreaMeasure xsd type.")]
    public partial class EnergyPerAreaMeasure : AbstractMeasure 
    {
        public EnergyPerAreaMeasure() {}
        public EnergyPerAreaMeasure(Double value, EnergyPerAreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public EnergyPerAreaUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the electricPotentialMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="electricPotentialMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the electricPotentialMeasure xsd type.")]
    public partial class ElectricPotentialMeasure : AbstractMeasure 
    {
        public ElectricPotentialMeasure() {}
        public ElectricPotentialMeasure(Double value, ElectricPotentialUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ElectricPotentialUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the electricCurrentMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="electricCurrentMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the electricCurrentMeasure xsd type.")]
    public partial class ElectricCurrentMeasure : AbstractMeasure 
    {
        public ElectricCurrentMeasure() {}
        public ElectricCurrentMeasure(Double value, ElectricCurrentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ElectricCurrentUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the dynamicViscosityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dynamicViscosityMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the dynamicViscosityMeasure xsd type.")]
    public partial class DynamicViscosityMeasure : AbstractMeasure 
    {
        public DynamicViscosityMeasure() {}
        public DynamicViscosityMeasure(Double value, DynamicViscosityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public DynamicViscosityUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the dimensionlessMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dimensionlessMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the dimensionlessMeasure xsd type.")]
    public partial class DimensionlessMeasure : AbstractMeasure 
    {
        public DimensionlessMeasure() {}
        public DimensionlessMeasure(Double value, DimensionlessUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public DimensionlessUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the densityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="densityMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the densityMeasure xsd type.")]
    public partial class DensityMeasure : AbstractMeasure 
    {
        public DensityMeasure() {}
        public DensityMeasure(Double value, DensityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public DensityUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the areaPerAreaMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="areaPerAreaMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the areaPerAreaMeasure xsd type.")]
    public partial class AreaPerAreaMeasure : AbstractMeasure 
    {
        public AreaPerAreaMeasure() {}
        public AreaPerAreaMeasure(Double value, AreaPerAreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public AreaPerAreaUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the areaMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="areaMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the areaMeasure xsd type.")]
    public partial class AreaMeasure : AbstractMeasure 
    {
        public AreaMeasure() {}
        public AreaMeasure(Double value, AreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public AreaUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the anglePerTimeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="anglePerTimeMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the anglePerTimeMeasure xsd type.")]
    public partial class AnglePerTimeMeasure : AbstractMeasure 
    {
        public AnglePerTimeMeasure() {}
        public AnglePerTimeMeasure(Double value, AnglePerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public AnglePerTimeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the anglePerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="anglePerLengthMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the anglePerLengthMeasure xsd type.")]
    public partial class AnglePerLengthMeasure : AbstractMeasure 
    {
        public AnglePerLengthMeasure() {}
        public AnglePerLengthMeasure(Double value, AnglePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public AnglePerLengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the accelerationLinearMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="accelerationLinearMeasure", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the accelerationLinearMeasure xsd type.")]
    public partial class AccelerationLinearMeasure : AbstractMeasure 
    {
        public AccelerationLinearMeasure() {}
        public AccelerationLinearMeasure(Double value, AccelerationLinearUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public AccelerationLinearUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refNameString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refNameString", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the refNameString xsd type.")]
    public partial class RefNameString : Object 
    {
        public RefNameString() {}
        public RefNameString(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the node referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
        [XmlAttribute("uidRef")]
        public String UidRef { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML bottom hole assembly run object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_bhaRun", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML bottom hole assembly run object.")]
    public partial class BhaRun : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the bottom hole assembly. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the run. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// This represents a foreign key to the tubular (assembly) that was utilized in this run.
        /// </summary>
        [XmlElement("tubular")]
        public RefNameString Tubular { get; set; }
        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// Date and time that activities stopped. 
        /// </summary>
        [XmlElement("dTimStop")]
        public DateTime? DateTimeStop {
            get {
                return dTimStopField;
            } 
            set { 
                dTimStopField = value;
                this.DateTimeStopSpecified = true;
            }
        }

        private DateTime? dTimStopField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStopSpecified { get; set; }
        /// <summary>
        /// Start on bottom - date and time. 
        /// </summary>
        [XmlElement("dTimStartDrilling")]
        public DateTime? DateTimeStartDrilling {
            get {
                return dTimStartDrillingField;
            } 
            set { 
                dTimStartDrillingField = value;
                this.DateTimeStartDrillingSpecified = true;
            }
        }

        private DateTime? dTimStartDrillingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartDrillingSpecified { get; set; }
        /// <summary>
        /// Start off bottom - date and time. 
        /// </summary>
        [XmlElement("dTimStopDrilling")]
        public DateTime? DateTimeStopDrilling {
            get {
                return dTimStopDrillingField;
            } 
            set { 
                dTimStopDrillingField = value;
                this.DateTimeStopDrillingSpecified = true;
            }
        }

        private DateTime? dTimStopDrillingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStopDrillingSpecified { get; set; }
        /// <summary>
        /// Planned dogleg severity. 
        /// </summary>
        [XmlElement("planDogleg")]
        public AnglePerLengthMeasure PlanDogleg { get; set; }
        /// <summary>
        /// Actual dogleg severity. 
        /// </summary>
        [XmlElement("actDogleg")]
        public AnglePerLengthMeasure ActDogleg { get; set; }
        /// <summary>
        /// Actual dogleg severity - Maximum. 
        /// </summary>
        [XmlElement("actDoglegMx")]
        public AnglePerLengthMeasure ActDoglegMax { get; set; }
        /// <summary>
        /// Bottom hole assembly status.
        /// </summary>
        [XmlElement("statusBha")]
        public BhaStatus? StatusBha {
            get {
                return statusBhaField;
            } 
            set { 
                statusBhaField = value;
                this.StatusBhaSpecified = true;
            }
        }

        private BhaStatus? statusBhaField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StatusBhaSpecified { get; set; }
        /// <summary>
        /// Bit run number. 
        /// </summary>
        [XmlElement("numBitRun")]
        public String NumBitRun { get; set; }
        /// <summary>
        /// The BHA (drilling string) run number. 
        /// </summary>
        [XmlElement("numStringRun")]
        public Int16? NumStringRun {
            get {
                return numStringRunField;
            } 
            set { 
                numStringRunField = value;
                this.NumStringRunSpecified = true;
            }
        }

        private Int16? numStringRunField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumStringRunSpecified { get; set; }
        /// <summary>
        /// Reason for trip. 
        /// </summary>
        [XmlElement("reasonTrip")]
        public String ReasonTrip { get; set; }
        /// <summary>
        /// Objective of bottom hole assembly. 
        /// </summary>
        [XmlElement("objectiveBha")]
        public String ObjectiveBha { get; set; }
        /// <summary>
        /// Drilling parameters. 
        /// </summary>
        [XmlElement("drillingParams")]
        public DrillingParams DrillingPluggedAndAbandonedrams { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the eventType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="eventType", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the eventType xsd type.")]
    public partial class EventType : Object 
    {

        /// <summary>
        /// The date on which the event took place.
        /// </summary>
        [XmlElement("EventDate")]
        public DateTime? EventDate { get; set; }
        /// <summary>
        /// The party responsible for the event.
        /// </summary>
        [XmlElement("ResponsibleParty")]
        public String ResponsiblePluggedAndAbandonedrty { get; set; }
        /// <summary>
        /// A free form comment that can further define the event that occurred.
        /// </summary>
        [XmlElement("Comment")]
        public String Comment { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the securityInfoType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="securityInfoType", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the securityInfoType xsd type.")]
    public partial class SecurityInfoType : Object 
    {

        /// <summary>
        /// The security class in which this document is classified. Examples would be confidential, partner confidential, tight. The meaning of the class is determined by the System in which it is defined.
        /// </summary>
        [XmlElement("Class")]
        public String Class { get; set; }
        /// <summary>
        /// The security classification system. This gives context to the meaning of the Class value.
        /// </summary>
        [XmlElement("System")]
        public String System { get; set; }
        /// <summary>
        /// The date on which this security class is no longer applicable.
        /// </summary>
        [XmlElement("EndDate")]
        public DateTime? EndDate {
            get {
                return EndDateField;
            } 
            set { 
                EndDateField = value;
                this.EndDateSpecified = true;
            }
        }

        private DateTime? EndDateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EndDateSpecified { get; set; }
        /// <summary>
        /// A general comment to further define the security class.
        /// </summary>
        [XmlElement("Comment")]
        public String Comment { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the fileCreationType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="fileCreationType", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the fileCreationType xsd type.")]
    public partial class FileCreationType : Object 
    {

        /// <summary>
        /// The date and time that the file was created.
        /// </summary>
        [XmlElement("FileCreationDate")]
        public DateTime? FileCreationDate { get; set; }
        /// <summary>
        /// If appropriate, the software that created the file. This is a free form string, and may include whatever information is deemed relevant.
        /// </summary>
        [XmlElement("SoftwareName")]
        public String SoftwareName { get; set; }
        /// <summary>
        /// The person or business associate that created the file.
        /// </summary>
        [XmlElement("FileCreator")]
        public String FileCreator { get; set; }
        /// <summary>
        /// Any comment that would be useful to further explain the creation of this instance document.
        /// </summary>
        [XmlElement("Comment")]
        public String Comment { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_cementJobs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("cementJobs", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_cementJobs xsd type.")]
    public partial class CementJobList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single cement job. 
        /// </summary>
        [XmlElement("cementJob")]
        public List<CementJob> CementJob { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return CementJob;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Cement Job.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_cementJob", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Cement Job.")]
    public partial class CementJob : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the cement job. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the cement job. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Type of cement job. 
        /// </summary>
        [XmlElement("jobType")]
        public CementJobType? JobType {
            get {
                return jobTypeField;
            } 
            set { 
                jobTypeField = value;
                this.JobTypeSpecified = true;
            }
        }

        private CementJobType? jobTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean JobTypeSpecified { get; set; }
        /// <summary>
        /// Job configuration. 
        /// </summary>
        [XmlElement("jobConfig")]
        public String JobConfig { get; set; }
        /// <summary>
        /// Date and time of Cement Job. 
        /// </summary>
        [XmlElement("dTimJob")]
        public DateTime? DateTimeJob {
            get {
                return dTimJobField;
            } 
            set { 
                dTimJobField = value;
                this.DateTimeJobSpecified = true;
            }
        }

        private DateTime? dTimJobField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeJobSpecified { get; set; }
        /// <summary>
        /// Name for the cemented string 
        /// </summary>
        [XmlElement("nameCementedString")]
        public String NameCementedString { get; set; }
        /// <summary>
        /// Wellbore Geometry of annulus. 
        /// </summary>
        [XmlElement("holeConfig")]
        public WellboreGeometry HoleConfig { get; set; }
        /// <summary>
        /// Name for the cement work string 
        /// </summary>
        [XmlElement("nameWorkString")]
        public String NameWorkString { get; set; }
        /// <summary>
        /// Name of cementing contractor. 
        /// </summary>
        [XmlElement("contractor")]
        public String Contractor { get; set; }
        /// <summary>
        /// Cementing engineer. 
        /// </summary>
        [XmlElement("cementEngr")]
        public String CementEngr { get; set; }
        /// <summary>
        /// Offshore job? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("offshoreJob")]
        public Boolean? OffshoreJob {
            get {
                return offshoreJobField;
            } 
            set { 
                offshoreJobField = value;
                this.OffshoreJobSpecified = true;
            }
        }

        private Boolean? offshoreJobField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean OffshoreJobSpecified { get; set; }
        /// <summary>
        /// Water depth if offshore. 
        /// </summary>
        [XmlElement("mdWater")]
        public MeasuredDepthCoord MDWater { get; set; }
        /// <summary>
        /// Returns to seabed? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("returnsToSeabed")]
        public Boolean? ReturnsToSeabed {
            get {
                return returnsToSeabedField;
            } 
            set { 
                returnsToSeabedField = value;
                this.ReturnsToSeabedSpecified = true;
            }
        }

        private Boolean? returnsToSeabedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ReturnsToSeabedSpecified { get; set; }
        /// <summary>
        /// Pipe being reciprocated. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("reciprocating")]
        public Boolean? Reciprocating {
            get {
                return reciprocatingField;
            } 
            set { 
                reciprocatingField = value;
                this.ReciprocatingSpecified = true;
            }
        }

        private Boolean? reciprocatingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ReciprocatingSpecified { get; set; }
        /// <summary>
        /// Duration for waiting on cement to set. 
        /// </summary>
        [XmlElement("woc")]
        public TimeMeasure Woc { get; set; }
        /// <summary>
        /// If Plug, measured depth of top of plug. 
        /// </summary>
        [XmlElement("mdPlugTop")]
        public MeasuredDepthCoord MDPlugTop { get; set; }
        /// <summary>
        /// If Plug, measured depth of bottom of plug. 
        /// </summary>
        [XmlElement("mdPlugBot")]
        public MeasuredDepthCoord MDPlugBot { get; set; }
        /// <summary>
        /// Measured depth at bottom of hole. 
        /// </summary>
        [XmlElement("mdHole")]
        public MeasuredDepthCoord MDHole { get; set; }
        /// <summary>
        /// Measured depth of previous shoe. 
        /// </summary>
        [XmlElement("mdShoe")]
        public MeasuredDepthCoord MDShoe { get; set; }
        /// <summary>
        /// True Vertical Depth of previous shoe. 
        /// </summary>
        [XmlElement("tvdShoe")]
        public WellVerticalDepthCoord TvdShoe { get; set; }
        /// <summary>
        /// Measured depth of cement string shoe. 
        /// </summary>
        [XmlElement("mdStringSet")]
        public MeasuredDepthCoord MDStringSet { get; set; }
        /// <summary>
        /// True vertical depth of cement string shoe. 
        /// </summary>
        [XmlElement("tvdStringSet")]
        public WellVerticalDepthCoord TvdStringSet { get; set; }
		/// <summary>
        /// Set of stages for the job (usually 1 or 2). 
        /// </summary>
        [XmlElement("cementStage")]
        public List<CementStage> CementStage { get; set; }
        /// <summary>
        /// Test results post-job. 
        /// </summary>
        [XmlElement("cementTest")]
        public CementTest CementTest { get; set; }
        /// <summary>
        /// Plug type. 
        /// </summary>
        [XmlElement("typePlug")]
        public String TypePlug { get; set; }
        /// <summary>
        /// Name for the cementing string 
        /// </summary>
        [XmlElement("nameCementString")]
        public String NameCementString { get; set; }
        /// <summary>
        /// Date and time that cement plug was set. 
        /// </summary>
        [XmlElement("dTimPlugSet")]
        public DateTime? DateTimePlugSet {
            get {
                return dTimPlugSetField;
            } 
            set { 
                dTimPlugSetField = value;
                this.DateTimePlugSetSpecified = true;
            }
        }

        private DateTime? dTimPlugSetField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePlugSetSpecified { get; set; }
        /// <summary>
        /// Cement drilled out flag. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cementDrillOut")]
        public Boolean? CementDrillOut {
            get {
                return cementDrillOutField;
            } 
            set { 
                cementDrillOutField = value;
                this.CementDrillOutSpecified = true;
            }
        }

        private Boolean? cementDrillOutField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CementDrillOutSpecified { get; set; }
        /// <summary>
        /// Date and time that cement was drilled out. 
        /// </summary>
        [XmlElement("dTimCementDrillOut")]
        public DateTime? DateTimeCementDrillOut {
            get {
                return dTimCementDrillOutField;
            } 
            set { 
                dTimCementDrillOutField = value;
                this.DateTimeCementDrillOutSpecified = true;
            }
        }

        private DateTime? dTimCementDrillOutField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCementDrillOutSpecified { get; set; }
        /// <summary>
        /// Type of squeeze. 
        /// </summary>
        [XmlElement("typeSqueeze")]
        public String TypeSqueeze { get; set; }
        /// <summary>
        /// Measured depth of squeeze. 
        /// </summary>
        [XmlElement("mdSqueeze")]
        public MeasuredDepthCoord MDSqueeze { get; set; }
        /// <summary>
        /// Date and time of squeeze. 
        /// </summary>
        [XmlElement("dTimSqueeze")]
        public DateTime? DateTimeSqueeze {
            get {
                return dTimSqueezeField;
            } 
            set { 
                dTimSqueezeField = value;
                this.DateTimeSqueezeSpecified = true;
            }
        }

        private DateTime? dTimSqueezeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSqueezeSpecified { get; set; }
        /// <summary>
        /// Tool Company. 
        /// </summary>
        [XmlElement("toolCompany")]
        public String ToolCompany { get; set; }
        /// <summary>
        /// Cement tool type. 
        /// </summary>
        [XmlElement("typeTool")]
        public String TypeTool { get; set; }
        /// <summary>
        /// Pipe rotation start time. 
        /// </summary>
        [XmlElement("dTimPipeRotStart")]
        public DateTime? DateTimePipeRotStart {
            get {
                return dTimPipeRotStartField;
            } 
            set { 
                dTimPipeRotStartField = value;
                this.DateTimePipeRotStartSpecified = true;
            }
        }

        private DateTime? dTimPipeRotStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePipeRotStartSpecified { get; set; }
        /// <summary>
        /// Pipe rotation end time. 
        /// </summary>
        [XmlElement("dTimPipeRotEnd")]
        public DateTime? DateTimePipeRotEnd {
            get {
                return dTimPipeRotEndField;
            } 
            set { 
                dTimPipeRotEndField = value;
                this.DateTimePipeRotEndSpecified = true;
            }
        }

        private DateTime? dTimPipeRotEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePipeRotEndSpecified { get; set; }
        /// <summary>
        /// Pipe rotation rate (commonly in rpm). 
        /// </summary>
        [XmlElement("rpmPipe")]
        public AnglePerTimeMeasure RpmPipe { get; set; }
        /// <summary>
        /// Pipe rotation initial torque. 
        /// </summary>
        [XmlElement("tqInitPipeRot")]
        public MomentOfForceMeasure TorqueInitPipeRot { get; set; }
        /// <summary>
        /// Pipe rotation average torque. 
        /// </summary>
        [XmlElement("tqPipeAv")]
        public MomentOfForceMeasure TorquePipeAverage { get; set; }
        /// <summary>
        /// Pipe rotation maximum torque. 
        /// </summary>
        [XmlElement("tqPipeMx")]
        public MomentOfForceMeasure TorquePipeMax { get; set; }
        /// <summary>
        /// Date and time at start of pipe reciprocation. 
        /// </summary>
        [XmlElement("dTimRecipStart")]
        public DateTime? DateTimeRecipStart {
            get {
                return dTimRecipStartField;
            } 
            set { 
                dTimRecipStartField = value;
                this.DateTimeRecipStartSpecified = true;
            }
        }

        private DateTime? dTimRecipStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRecipStartSpecified { get; set; }
        /// <summary>
        /// Date and time at end of pipe reciprocation. 
        /// </summary>
        [XmlElement("dTimRecipEnd")]
        public DateTime? DateTimeRecipEnd {
            get {
                return dTimRecipEndField;
            } 
            set { 
                dTimRecipEndField = value;
                this.DateTimeRecipEndSpecified = true;
            }
        }

        private DateTime? dTimRecipEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRecipEndSpecified { get; set; }
        /// <summary>
        /// String up weight during reciprocation. 
        /// </summary>
        [XmlElement("overPull")]
        public ForceMeasure OverPull { get; set; }
        /// <summary>
        /// String down weight during reciprocation. 
        /// </summary>
        [XmlElement("slackOff")]
        public ForceMeasure SlackOff { get; set; }
        /// <summary>
        /// Pipe reciprocation RPM. 
        /// </summary>
        [XmlElement("rpmPipeRecip")]
        public AnglePerTimeMeasure RpmPipeRecip { get; set; }
        /// <summary>
        /// Pipe reciprocation stroke length. 
        /// </summary>
        [XmlElement("lenPipeRecipStroke")]
        public LengthMeasure LenPipeRecipStroke { get; set; }
        /// <summary>
        /// Coiled Tubing Used (true=CTU used). Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("coilTubing")]
        public Boolean? CoilTubing {
            get {
                return coilTubingField;
            } 
            set { 
                coilTubingField = value;
                this.CoilTubingSpecified = true;
            }
        }

        private Boolean? coilTubingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CoilTubingSpecified { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Wellbore Geometry Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wbGeometry", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Wellbore Geometry Component Schema ")]
    public partial class WellboreGeometry : Object 
    {

        /// <summary>
        /// Time report generated. 
        /// </summary>
        [XmlElement("dTimReport")]
        public DateTime? DateTimeReport { get; set; }
        /// <summary>
        /// Measured depth at bottom. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// Air gap. 
        /// </summary>
        [XmlElement("gapAir")]
        public LengthMeasure GapAir { get; set; }
        /// <summary>
        /// Water depth. 
        /// </summary>
        [XmlElement("depthWaterMean")]
        public LengthMeasure DepthWaterMean { get; set; }
		/// <summary>
        /// Wellbore geometry section object. 
        /// </summary>
        [XmlElement("wbGeometrySection")]
        public List<WellboreGeometrySection> WellboreGeometrySection { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Wellbore Geometry Component Schema. This defines the "fixed" components in a wellbore. It does not define the "transient" drilling strings or the "hanging" production components. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wbGeometrySection", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Wellbore Geometry Component Schema. This defines the fixed components in a wellbore. It does not define the transient drilling strings or the hanging production components. ")]
    public partial class WellboreGeometrySection : Object 
    {

        /// <summary>
        /// Type of fixed component. 
        /// </summary>
        [XmlElement("typeHoleCasing")]
        public HoleCasingType? TypeHoleCAsing {
            get {
                return typeHoleCasingField;
            } 
            set { 
                typeHoleCasingField = value;
                this.TypeHoleCAsingSpecified = true;
            }
        }

        private HoleCasingType? typeHoleCasingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeHoleCAsingSpecified { get; set; }
        /// <summary>
        /// Measured depth at Top of Interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at bottom of the section. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// True vertical depth at top of the section. 
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// True vertical depth at bottom of the section. 
        /// </summary>
        [XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom { get; set; }
        /// <summary>
        /// Inner diameter. 
        /// </summary>
        [XmlElement("idSection")]
        public LengthMeasure InnerDiameterSection { get; set; }
        /// <summary>
        /// Outer diameter - Only for casings and risers. 
        /// </summary>
        [XmlElement("odSection")]
        public LengthMeasure OuterDiameterSection { get; set; }
        /// <summary>
        /// Weight per unit length for casing sections. 
        /// </summary>
        [XmlElement("wtPerLen")]
        public MassPerLengthMeasure WeightPerLen { get; set; }
        /// <summary>
        /// Material grade for the tubular section. 
        /// </summary>
        [XmlElement("grade")]
        public String Grade { get; set; }
        /// <summary>
        /// Curved conductor? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("curveConductor")]
        public Boolean? CurveConductor {
            get {
                return curveConductorField;
            } 
            set { 
                curveConductorField = value;
                this.CurveConductorSpecified = true;
            }
        }

        private Boolean? curveConductorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CurveConductorSpecified { get; set; }
        /// <summary>
        /// Maximum diameter that can pass through. 
        /// </summary>
        [XmlElement("diaDrift")]
        public LengthMeasure DiaDrift { get; set; }
        /// <summary>
        /// Friction factor. 
        /// </summary>
        [XmlElement("factFric")]
        public Double? FactFric {
            get {
                return factFricField;
            } 
            set { 
                factFricField = value;
                this.FactFricSpecified = true;
            }
        }

        private Double? factFricField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FactFricSpecified { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cement Stage Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementStage", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Cement Stage Component Schema ")]
    public partial class CementStage : Object 
    {

        /// <summary>
        /// Stage number. 
        /// </summary>
        [XmlElement("numStage")]
        public Int16? NumStage { get; set; }
        /// <summary>
        /// Stage type. 
        /// </summary>
        [XmlElement("typeStage")]
        public String TypeStage { get; set; }
        /// <summary>
        /// Date and time when mixing started. 
        /// </summary>
        [XmlElement("dTimMixStart")]
        public DateTime? DateTimeMixStart {
            get {
                return dTimMixStartField;
            } 
            set { 
                dTimMixStartField = value;
                this.DateTimeMixStartSpecified = true;
            }
        }

        private DateTime? dTimMixStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeMixStartSpecified { get; set; }
        /// <summary>
        /// Datetime at start of pumping cement. 
        /// </summary>
        [XmlElement("dTimPumpStart")]
        public DateTime? DateTimePumpStart {
            get {
                return dTimPumpStartField;
            } 
            set { 
                dTimPumpStartField = value;
                this.DateTimePumpStartSpecified = true;
            }
        }

        private DateTime? dTimPumpStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePumpStartSpecified { get; set; }
        /// <summary>
        /// Datetime at end of pumping cement. 
        /// </summary>
        [XmlElement("dTimPumpEnd")]
        public DateTime? DateTimePumpEnd {
            get {
                return dTimPumpEndField;
            } 
            set { 
                dTimPumpEndField = value;
                this.DateTimePumpEndSpecified = true;
            }
        }

        private DateTime? dTimPumpEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePumpEndSpecified { get; set; }
        /// <summary>
        /// Date and time when displacing cement started. 
        /// </summary>
        [XmlElement("dTimDisplaceStart")]
        public DateTime? DateTimeDisplaceStart {
            get {
                return dTimDisplaceStartField;
            } 
            set { 
                dTimDisplaceStartField = value;
                this.DateTimeDisplaceStartSpecified = true;
            }
        }

        private DateTime? dTimDisplaceStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeDisplaceStartSpecified { get; set; }
        /// <summary>
        /// Measured depth at top of interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth of base of cement. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// Excess volume. 
        /// </summary>
        [XmlElement("volExcess")]
        public VolumeMeasure VolExcess { get; set; }
        /// <summary>
        /// Average displacement rate. 
        /// </summary>
        [XmlElement("flowrateDisplaceAv")]
        public VolumeFlowRateMeasure FlowrateDisplaceAverage { get; set; }
        /// <summary>
        /// Maximum displacement rate. 
        /// </summary>
        [XmlElement("flowrateDisplaceMx")]
        public VolumeFlowRateMeasure FlowrateDisplaceMax { get; set; }
        /// <summary>
        /// Final displacement pressure. 
        /// </summary>
        [XmlElement("presDisplace")]
        public PressureMeasure PresDisplace { get; set; }
        /// <summary>
        /// Volume of returns. 
        /// </summary>
        [XmlElement("volReturns")]
        public VolumeMeasure VolReturns { get; set; }
        /// <summary>
        /// Mud circulation elapsed time before the job. 
        /// </summary>
        [XmlElement("eTimMudCirculation")]
        public TimeMeasure ETimeMudCirculation { get; set; }
        /// <summary>
        /// Rate mud circulated during stage. 
        /// </summary>
        [XmlElement("flowrateMudCirc")]
        public VolumeFlowRateMeasure FlowrateMudCirc { get; set; }
        /// <summary>
        /// Mud circulation pressure. 
        /// </summary>
        [XmlElement("presMudCirc")]
        public PressureMeasure PresMudCirc { get; set; }
        /// <summary>
        /// Final displacement pump rate. 
        /// </summary>
        [XmlElement("flowrateEnd")]
        public VolumeFlowRateMeasure FlowrateEnd { get; set; }
        /// <summary>
        /// Displaced Mud, washes and spacers, cements, displacement mud. 
        /// </summary>
        [XmlElement("cementingFluid")]
        public CementingFluid CementingFluid { get; set; }
        /// <summary>
        /// Annular flow at the end of displacement. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("afterFlowAnn")]
        public Boolean? AfterFlowAnn {
            get {
                return afterFlowAnnField;
            } 
            set { 
                afterFlowAnnField = value;
                this.AfterFlowAnnSpecified = true;
            }
        }

        private Boolean? afterFlowAnnField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AfterFlowAnnSpecified { get; set; }
        /// <summary>
        /// Squeeze objective. 
        /// </summary>
        [XmlElement("squeezeObj")]
        public String SqueezeObj { get; set; }
        /// <summary>
        /// Squeeze obtained. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("squeezeObtained")]
        public Boolean? SqueezeObtained {
            get {
                return squeezeObtainedField;
            } 
            set { 
                squeezeObtainedField = value;
                this.SqueezeObtainedSpecified = true;
            }
        }

        private Boolean? squeezeObtainedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SqueezeObtainedSpecified { get; set; }
        /// <summary>
        /// Measured depth of string (multi-stage cement job). 
        /// </summary>
        [XmlElement("mdString")]
        public MeasuredDepthCoord MDString { get; set; }
        /// <summary>
        /// Measured depth of tool (multi-stage cement job. 
        /// </summary>
        [XmlElement("mdTool")]
        public MeasuredDepthCoord MDTool { get; set; }
        /// <summary>
        /// Measured depth of CoilTubing (multi-stage cement job. 
        /// </summary>
        [XmlElement("mdCoilTbg")]
        public MeasuredDepthCoord MDCoilTbg { get; set; }
        /// <summary>
        /// Total volume inside casing. 
        /// </summary>
        [XmlElement("volCsgIn")]
        public VolumeMeasure VolCsgIn { get; set; }
        /// <summary>
        /// Total volume outside casing for this stage placement. 
        /// </summary>
        [XmlElement("volCsgOut")]
        public VolumeMeasure VolCsgOut { get; set; }
        /// <summary>
        /// Tail pipe used? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("tailPipeUsed")]
        public Boolean? TailPipeUsed {
            get {
                return tailPipeUsedField;
            } 
            set { 
                tailPipeUsedField = value;
                this.TailPipeUsedSpecified = true;
            }
        }

        private Boolean? tailPipeUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TailPipeUsedSpecified { get; set; }
        /// <summary>
        /// Tail pipe size (diameter). 
        /// </summary>
        [XmlElement("diaTailPipe")]
        public LengthMeasure DiaTailPipe { get; set; }
        /// <summary>
        /// Tail pipe perforated? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("tailPipePerf")]
        public Boolean? TailPipePerf {
            get {
                return tailPipePerfField;
            } 
            set { 
                tailPipePerfField = value;
                this.TailPipePerfSpecified = true;
            }
        }

        private Boolean? tailPipePerfField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TailPipePerfSpecified { get; set; }
        /// <summary>
        /// Tubing pressure at start of job (not coiled tubing). 
        /// </summary>
        [XmlElement("presTbgStart")]
        public PressureMeasure PresTbgStart { get; set; }
        /// <summary>
        /// Tubing pressure at end of job. 
        /// </summary>
        [XmlElement("presTbgEnd")]
        public PressureMeasure PresTbgEnd { get; set; }
        /// <summary>
        /// Casing pressure at start of job. 
        /// </summary>
        [XmlElement("presCsgStart")]
        public PressureMeasure PresCsgStart { get; set; }
        /// <summary>
        /// Casing pressure at end of job. 
        /// </summary>
        [XmlElement("presCsgEnd")]
        public PressureMeasure PresCsgEnd { get; set; }
        /// <summary>
        /// Constant back pressure applied while pumping the job (can be supersede by a back pressure per pumping stage) 
        /// </summary>
        [XmlElement("presBackPressure")]
        public PressureMeasure PresBackPressure { get; set; }
        /// <summary>
        /// Pressure CTU start. 
        /// </summary>
        [XmlElement("presCoilTbgStart")]
        public PressureMeasure PresCoilTbgStart { get; set; }
        /// <summary>
        /// Pressure CTU end 
        /// </summary>
        [XmlElement("presCoilTbgEnd")]
        public PressureMeasure PresCoilTbgEnd { get; set; }
        /// <summary>
        /// Breakdown pressure. 
        /// </summary>
        [XmlElement("presBreakDown")]
        public PressureMeasure PresBreakDown { get; set; }
        /// <summary>
        /// Breakdown rate. 
        /// </summary>
        [XmlElement("flowrateBreakDown")]
        public VolumeFlowRateMeasure FlowrateBreakDown { get; set; }
        /// <summary>
        /// Squeeze pressure average. 
        /// </summary>
        [XmlElement("presSqueezeAv")]
        public PressureMeasure PresSqueezeAverage { get; set; }
        /// <summary>
        /// Squeeze pressure final. 
        /// </summary>
        [XmlElement("presSqueezeEnd")]
        public PressureMeasure PresSqueezeEnd { get; set; }
        /// <summary>
        /// Squeeze pressure held. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("presSqueezeHeld")]
        public Boolean? PresSqueezeHeld {
            get {
                return presSqueezeHeldField;
            } 
            set { 
                presSqueezeHeldField = value;
                this.PresSqueezeHeldSpecified = true;
            }
        }

        private Boolean? presSqueezeHeldField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PresSqueezeHeldSpecified { get; set; }
        /// <summary>
        /// Squeeze pressure left on pipe. 
        /// </summary>
        [XmlElement("presSqueeze")]
        public PressureMeasure PresSqueeze { get; set; }
        /// <summary>
        /// Time pressure held. 
        /// </summary>
        [XmlElement("eTimPresHeld")]
        public TimeMeasure ETimePresHeld { get; set; }
        /// <summary>
        /// Squeeze job average rate. 
        /// </summary>
        [XmlElement("flowrateSqueezeAv")]
        public VolumeFlowRateMeasure FlowrateSqueezeAverage { get; set; }
        /// <summary>
        /// Squeeze job maximum rate. 
        /// </summary>
        [XmlElement("flowrateSqueezeMx")]
        public VolumeFlowRateMeasure FlowrateSqueezeMax { get; set; }
        /// <summary>
        /// Pump rate at start of job. 
        /// </summary>
        [XmlElement("flowratePumpStart")]
        public VolumeFlowRateMeasure FlowratePumpStart { get; set; }
        /// <summary>
        /// Pump rate at end of job. 
        /// </summary>
        [XmlElement("flowratePumpEnd")]
        public VolumeFlowRateMeasure FlowratePumpEnd { get; set; }
        /// <summary>
        /// Pill below plug. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("pillBelowPlug")]
        public Boolean? PillBelowPlug {
            get {
                return pillBelowPlugField;
            } 
            set { 
                pillBelowPlugField = value;
                this.PillBelowPlugSpecified = true;
            }
        }

        private Boolean? pillBelowPlugField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PillBelowPlugSpecified { get; set; }
        /// <summary>
        /// Plug catcher. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("plugCatcher")]
        public Boolean? PlugCatcher {
            get {
                return plugCatcherField;
            } 
            set { 
                plugCatcherField = value;
                this.PlugCatcherSpecified = true;
            }
        }

        private Boolean? plugCatcherField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PlugCatcherSpecified { get; set; }
        /// <summary>
        /// Circulate out measured depth. 
        /// </summary>
        [XmlElement("mdCircOut")]
        public MeasuredDepthCoord MDCircOut { get; set; }
        /// <summary>
        /// Circulate prior to start of job. 
        /// </summary>
        [XmlElement("volCircPrior")]
        public VolumeMeasure VolCircPrior { get; set; }
        /// <summary>
        /// Type of mud in hole. 
        /// </summary>
        [XmlElement("typeOriginalMud")]
        public String TypeOriginalMud { get; set; }
        /// <summary>
        /// Mud density. 
        /// </summary>
        [XmlElement("wtMud")]
        public DensityMeasure WeightMud { get; set; }
        /// <summary>
        /// Funnel viscosity in seconds (in hole at start of job). 
        /// </summary>
        [XmlElement("visFunnelMud")]
        public TimeMeasure VisFunnelMud { get; set; }
        /// <summary>
        /// Plastic viscosity (in hole at start of job). 
        /// </summary>
        [XmlElement("pvMud")]
        public DynamicViscosityMeasure PVMud { get; set; }
        /// <summary>
        /// Yield point (in hole at start of job). 
        /// </summary>
        [XmlElement("ypMud")]
        public PressureMeasure YPMud { get; set; }
        /// <summary>
        /// Gels-10Sec (in hole at start of job). 
        /// </summary>
        [XmlElement("gel10Sec")]
        public PressureMeasure Gel10Sec { get; set; }
        /// <summary>
        /// Gels-10Min (in hole at start of job). 
        /// </summary>
        [XmlElement("gel10Min")]
        public PressureMeasure Gel10Min { get; set; }
        /// <summary>
        /// Bottom hole circulating temperature. 
        /// </summary>
        [XmlElement("tempBHCT")]
        public ThermodynamicTemperatureMeasure TempBHCT { get; set; }
        /// <summary>
        /// Bottom hole temperature static. 
        /// </summary>
        [XmlElement("tempBHST")]
        public ThermodynamicTemperatureMeasure TempBHST { get; set; }
        /// <summary>
        /// Method to estimate excess volume. 
        /// </summary>
        [XmlElement("volExcessMethod")]
        public String VolExcessMethod { get; set; }
        /// <summary>
        /// Mix method. 
        /// </summary>
        [XmlElement("mixMethod")]
        public String MixMethod { get; set; }
        /// <summary>
        /// Method by which density is measured. 
        /// </summary>
        [XmlElement("densMeasBy")]
        public String DensMeasBy { get; set; }
        /// <summary>
        /// Fluid returns. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("annFlowAfter")]
        public Boolean? AnnFlowAfter {
            get {
                return annFlowAfterField;
            } 
            set { 
                annFlowAfterField = value;
                this.AnnFlowAfterSpecified = true;
            }
        }

        private Boolean? annFlowAfterField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AnnFlowAfterSpecified { get; set; }
        /// <summary>
        /// Top plug used? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("topPlug")]
        public Boolean? TopPlug {
            get {
                return topPlugField;
            } 
            set { 
                topPlugField = value;
                this.TopPlugSpecified = true;
            }
        }

        private Boolean? topPlugField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TopPlugSpecified { get; set; }
        /// <summary>
        /// Bottom plug used. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("botPlug")]
        public Boolean? BotPlug {
            get {
                return botPlugField;
            } 
            set { 
                botPlugField = value;
                this.BotPlugSpecified = true;
            }
        }

        private Boolean? botPlugField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BotPlugSpecified { get; set; }
        /// <summary>
        /// Amount of bottom plug used. 
        /// </summary>
        [XmlElement("botPlugNumber")]
        public Int16? BotPlugNumber {
            get {
                return botPlugNumberField;
            } 
            set { 
                botPlugNumberField = value;
                this.BotPlugNumberSpecified = true;
            }
        }

        private Int16? botPlugNumberField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BotPlugNumberSpecified { get; set; }
        /// <summary>
        /// Plug bumped? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("plugBumped")]
        public Boolean? PlugBumped {
            get {
                return plugBumpedField;
            } 
            set { 
                plugBumpedField = value;
                this.PlugBumpedSpecified = true;
            }
        }

        private Boolean? plugBumpedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PlugBumpedSpecified { get; set; }
        /// <summary>
        /// Pressure prior to bumping plug / pressure at end of displacement 
        /// </summary>
        [XmlElement("presPriorBump")]
        public PressureMeasure PresPriorBump { get; set; }
        /// <summary>
        /// Pressure plug bumped. 
        /// </summary>
        [XmlElement("presBump")]
        public PressureMeasure PresBump { get; set; }
        /// <summary>
        /// Pressure held to. 
        /// </summary>
        [XmlElement("presHeld")]
        public PressureMeasure PresHeld { get; set; }
        /// <summary>
        /// Float held? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("floatHeld")]
        public Boolean? FloatHeld {
            get {
                return floatHeldField;
            } 
            set { 
                floatHeldField = value;
                this.FloatHeldSpecified = true;
            }
        }

        private Boolean? floatHeldField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FloatHeldSpecified { get; set; }
        /// <summary>
        /// Total mud lost. 
        /// </summary>
        [XmlElement("volMudLost")]
        public VolumeMeasure VolMudLost { get; set; }
        /// <summary>
        /// Displacement fluid name. 
        /// </summary>
        [XmlElement("fluidDisplace")]
        public String FluidDisplace { get; set; }
        /// <summary>
        /// Density of displacement fluid. 
        /// </summary>
        [XmlElement("densDisplaceFluid")]
        public DensityMeasure DensDisplaceFluid { get; set; }
        /// <summary>
        /// Volume of displacement fluid. 
        /// </summary>
        [XmlElement("volDisplaceFluid")]
        public VolumeMeasure VolDisplaceFluid { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cementing Fluid Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementingFluid", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Cementing Fluid Component Schema ")]
    public partial class CementingFluid : Object 
    {

        /// <summary>
        /// Fluid type: Mud, Wash, Spacer, Slurry. 
        /// </summary>
        [XmlElement("typeFluid")]
        public String TypeFluid { get; set; }
        /// <summary>
        /// Fluid Index: 1: first fluid pumped (=original mud), (last-1)=Tail cement, last= displacement mud 
        /// </summary>
        [XmlElement("fluidIndex")]
        public Int16? FluidIndex {
            get {
                return fluidIndexField;
            } 
            set { 
                fluidIndexField = value;
                this.FluidIndexSpecified = true;
            }
        }

        private Int16? fluidIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FluidIndexSpecified { get; set; }
        /// <summary>
        /// Fluid description. 
        /// </summary>
        [XmlElement("descFluid")]
        public String DescFluid { get; set; }
        /// <summary>
        /// Purpose description. 
        /// </summary>
        [XmlElement("purpose")]
        public String Purpose { get; set; }
        /// <summary>
        /// Slurry class. 
        /// </summary>
        [XmlElement("classSlurryDryBlend")]
        public String ClassSlurryDryBlend { get; set; }
        /// <summary>
        /// Measured depth at top of slurry placement. 
        /// </summary>
        [XmlElement("mdFluidTop")]
        public MeasuredDepthCoord MDFluidTop { get; set; }
        /// <summary>
        /// Measured depth at bottom of slurry placement. 
        /// </summary>
        [XmlElement("mdFluidBottom")]
        public MeasuredDepthCoord MDFluidBottom { get; set; }
        /// <summary>
        /// Water Source Description. 
        /// </summary>
        [XmlElement("sourceWater")]
        public String SourceWater { get; set; }
        /// <summary>
        /// Water volume. 
        /// </summary>
        [XmlElement("volWater")]
        public VolumeMeasure VolWater { get; set; }
        /// <summary>
        /// Volume of cement. 
        /// </summary>
        [XmlElement("volCement")]
        public VolumeMeasure VolCement { get; set; }
        /// <summary>
        /// Mix Water Ratio. 
        /// </summary>
        [XmlElement("ratioMixWater")]
        public SpecificVolumeMeasure RatioMixWater { get; set; }
        /// <summary>
        /// Fluid/Slurry Volume. 
        /// </summary>
        [XmlElement("volFluid")]
        public VolumeMeasure VolFluid { get; set; }
        /// <summary>
        /// Set of (Time / Rate / Back Pressure). 
        /// </summary>
        [XmlElement("cementPumpSchedule")]
        public CementPumpSchedule CementPumpSchedule { get; set; }
        /// <summary>
        /// Excess Percent. 
        /// </summary>
        [XmlElement("excessPc")]
        public VolumePerVolumeMeasure ExcessPercent { get; set; }
        /// <summary>
        /// Slurry Yield. 
        /// </summary>
        [XmlElement("volYield")]
        public SpecificVolumeMeasure VolYield { get; set; }
        /// <summary>
        /// Fluid density. 
        /// </summary>
        [XmlElement("density")]
        public DensityMeasure Density { get; set; }
        /// <summary>
        /// Equals 1 - Porosity. 
        /// </summary>
        [XmlElement("solidVolumeFraction")]
        public VolumePerVolumeMeasure SolidVolumeFraction { get; set; }
        /// <summary>
        /// Volume Pumped. 
        /// </summary>
        [XmlElement("volPumped")]
        public VolumeMeasure VolPumped { get; set; }
        /// <summary>
        /// Other Volume. 
        /// </summary>
        [XmlElement("volOther")]
        public VolumeMeasure VolOther { get; set; }
        /// <summary>
        /// Newtonian/Bingham/Power Law/Herschel Bulkley. 
        /// </summary>
        [XmlElement("fluidRheologicalModel")]
        public String FluidRheologicalModel { get; set; }
        /// <summary>
        /// Viscosity (Newtonian) or Plastic Viscosity if Bingham. 
        /// </summary>
        [XmlElement("vis")]
        public DynamicViscosityMeasure Vis { get; set; }
        /// <summary>
        /// Yield point (Bingham and Herschel Bulkley models). 
        /// </summary>
        [XmlElement("yp")]
        public PressureMeasure YP { get; set; }
        /// <summary>
        /// Power Law index (Power Law and HB). 
        /// </summary>
        [XmlElement("n")]
        public DimensionlessMeasure N { get; set; }
        /// <summary>
        /// Consistency index (Power Law and HB). 
        /// </summary>
        [XmlElement("k")]
        public DimensionlessMeasure K { get; set; }
        /// <summary>
        /// Gel reading after 10 seconds. 
        /// </summary>
        [XmlElement("gel10SecReading")]
        public PlaneAngleMeasure Gel10SecReading { get; set; }
        /// <summary>
        /// Gel strength after 10 seconds. 
        /// </summary>
        [XmlElement("gel10SecStrength")]
        public PressureMeasure Gel10SecStrength { get; set; }
        /// <summary>
        /// Gel reading after 1 minute. 
        /// </summary>
        [XmlElement("gel1MinReading")]
        public PlaneAngleMeasure Gel1MinReading { get; set; }
        /// <summary>
        /// Gel strength after 1 minute. 
        /// </summary>
        [XmlElement("gel1MinStrength")]
        public PressureMeasure Gel1MinStrength { get; set; }
        /// <summary>
        /// Gel reading after 10 minutes. 
        /// </summary>
        [XmlElement("gel10MinReading")]
        public PlaneAngleMeasure Gel10MinReading { get; set; }
        /// <summary>
        /// Gel strength after 10 minutes. 
        /// </summary>
        [XmlElement("gel10MinStrength")]
        public PressureMeasure Gel10MinStrength { get; set; }
        /// <summary>
        /// Type of base fluid: Fresh water, Sea water, Brine, Brackish water. 
        /// </summary>
        [XmlElement("typeBaseFluid")]
        public String TypeBaseFluid { get; set; }
        /// <summary>
        /// Density of base fluid. 
        /// </summary>
        [XmlElement("densBaseFluid")]
        public DensityMeasure DensBaseFluid { get; set; }
        /// <summary>
        /// Name of dry blend. 
        /// </summary>
        [XmlElement("dryBlendName")]
        public String DryBlendName { get; set; }
        /// <summary>
        /// Description of dry blend. 
        /// </summary>
        [XmlElement("dryBlendDescription")]
        public String DryBlendDescription { get; set; }
        /// <summary>
        /// Mass of dry blend: the blend is made of different solid additives: the volume is not constant. 
        /// </summary>
        [XmlElement("massDryBlend")]
        public MassMeasure MassDryBlend { get; set; }
        /// <summary>
        /// Density of Dry blend. 
        /// </summary>
        [XmlElement("densDryBlend")]
        public DensityMeasure DensDryBlend { get; set; }
        /// <summary>
        /// Weight of a sack of dry blend. 
        /// </summary>
        [XmlElement("massSackDryBlend")]
        public MassMeasure MassSackDryBlend { get; set; }
		/// <summary>
        /// Additives can be added in slurry but also in spacers, washes, mud. 
        /// </summary>
        [XmlElement("cementAdditive")]
        public List<CementAdditive> CementAdditive { get; set; }
        /// <summary>
        /// Foam used indicator. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("foamUsed")]
        public Boolean? FoamUsed {
            get {
                return foamUsedField;
            } 
            set { 
                foamUsedField = value;
                this.FoamUsedSpecified = true;
            }
        }

        private Boolean? foamUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FoamUsedSpecified { get; set; }
        /// <summary>
        /// Gas type used for foam job. 
        /// </summary>
        [XmlElement("typeGasFoam")]
        public String TypeGasFoam { get; set; }
        /// <summary>
        /// Volume of gas used for foam job. 
        /// </summary>
        [XmlElement("volGasFoam")]
        public VolumeMeasure VolGasFoam { get; set; }
        /// <summary>
        /// Constant gas ratio method ratio 
        /// </summary>
        [XmlElement("ratioConstGasMethodAv")]
        public VolumePerVolumeMeasure RatioConstGasMethodAverage { get; set; }
        /// <summary>
        /// Constant gas ratio method average density. 
        /// </summary>
        [XmlElement("densConstGasMethod")]
        public DensityMeasure DensConstGasMethod { get; set; }
        /// <summary>
        /// Constant gas ratio method initial method ratio. 
        /// </summary>
        [XmlElement("ratioConstGasMethodStart")]
        public VolumePerVolumeMeasure RatioConstGasMethodStart { get; set; }
        /// <summary>
        /// Constant gas ratio method final method ratio. 
        /// </summary>
        [XmlElement("ratioConstGasMethodEnd")]
        public VolumePerVolumeMeasure RatioConstGasMethodEnd { get; set; }
        /// <summary>
        /// Constant gas ratio method average density. 
        /// </summary>
        [XmlElement("densConstGasFoam")]
        public DensityMeasure DensConstGasFoam { get; set; }
        /// <summary>
        /// Test thickening time. 
        /// </summary>
        [XmlElement("eTimThickening")]
        public TimeMeasure ETimeThickening { get; set; }
        /// <summary>
        /// Test thickening temperature. 
        /// </summary>
        [XmlElement("tempThickening")]
        public ThermodynamicTemperatureMeasure TempThickening { get; set; }
        /// <summary>
        /// Test thickening pressure. 
        /// </summary>
        [XmlElement("presTestThickening")]
        public PressureMeasure PresTestThickening { get; set; }
        /// <summary>
        /// Test thickening consistency/slurry viscosity - Bearden Consistency (Bc) 0 to 100. 
        /// </summary>
        [XmlElement("consTestThickening")]
        public DimensionlessMeasure ConsTestThickening { get; set; }
        /// <summary>
        /// Test free water na: = mL/250ML. 
        /// </summary>
        [XmlElement("pcFreeWater")]
        public VolumePerVolumeMeasure PercentFreeWater { get; set; }
        /// <summary>
        /// Test free water temperature. 
        /// </summary>
        [XmlElement("tempFreeWater")]
        public ThermodynamicTemperatureMeasure TempFreeWater { get; set; }
        /// <summary>
        /// Test fluid loss. 
        /// </summary>
        [XmlElement("volTestFluidLoss")]
        public VolumeMeasure VolTestFluidLoss { get; set; }
        /// <summary>
        /// Test fluid loss temperature. 
        /// </summary>
        [XmlElement("tempFluidLoss")]
        public ThermodynamicTemperatureMeasure TempFluidLoss { get; set; }
        /// <summary>
        /// Test Fluid loss pressure. 
        /// </summary>
        [XmlElement("presTestFluidLoss")]
        public PressureMeasure PresTestFluidLoss { get; set; }
        /// <summary>
        /// Test Fluid loss: dehydrating test period, used to compute the API Fluid Loss. 
        /// </summary>
        [XmlElement("timeFluidLoss")]
        public TimeMeasure TimeFluidLoss { get; set; }
        /// <summary>
        /// API Fluid Loss = 2 * volTestFluidLoss * SQRT(30/timefluidloss). 
        /// </summary>
        [XmlElement("volAPIFluidLoss")]
        public VolumeMeasure VolAPIFluidLoss { get; set; }
        /// <summary>
        /// Compressive strength time 1. 
        /// </summary>
        [XmlElement("eTimComprStren1")]
        public TimeMeasure ETimeComprStren1 { get; set; }
        /// <summary>
        /// Compressive strength time 2. 
        /// </summary>
        [XmlElement("eTimComprStren2")]
        public TimeMeasure ETimeComprStren2 { get; set; }
        /// <summary>
        /// Compressive strength pressure 1. 
        /// </summary>
        [XmlElement("presComprStren1")]
        public PressureMeasure PresComprStren1 { get; set; }
        /// <summary>
        /// Compressive strength pressure 2. 
        /// </summary>
        [XmlElement("presComprStren2")]
        public PressureMeasure PresComprStren2 { get; set; }
        /// <summary>
        /// Compressive strength temperature 1. 
        /// </summary>
        [XmlElement("tempComprStren1")]
        public ThermodynamicTemperatureMeasure TempComprStren1 { get; set; }
        /// <summary>
        /// Compressive strength temperature 2. 
        /// </summary>
        [XmlElement("tempComprStren2")]
        public ThermodynamicTemperatureMeasure TempComprStren2 { get; set; }
        /// <summary>
        /// Slurry density at pressure. 
        /// </summary>
        [XmlElement("densAtPres")]
        public DensityMeasure DensAtPres { get; set; }
        /// <summary>
        /// Volume reserved. 
        /// </summary>
        [XmlElement("volReserved")]
        public VolumeMeasure VolReserved { get; set; }
        /// <summary>
        /// Total Slurry Volume. 
        /// </summary>
        [XmlElement("volTotSlurry")]
        public VolumeMeasure VolTotSlurry { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cement Pump Schedule Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementPumpSchedule", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Cement Pump Schedule Component Schema ")]
    public partial class CementPumpSchedule : Object 
    {

        /// <summary>
        /// (Elapsed time period during the fluid is pumped. 
        /// </summary>
        [XmlElement("eTimPump")]
        public TimeMeasure ETimePump { get; set; }
        /// <summary>
        /// Rate fluid is pumped. 0 means it is a pause. 
        /// </summary>
        [XmlElement("ratePump")]
        public VolumeFlowRateMeasure RatePump { get; set; }
        /// <summary>
        /// Volume pumped = eTimPump * ratePump. 
        /// </summary>
        [XmlElement("volPump")]
        public VolumeMeasure VolPump { get; set; }
        /// <summary>
        /// Number of pump strokes for the fluid to be pumped (assumes pump output known). 
        /// </summary>
        [XmlElement("strokePump")]
        public Int16? StrokePump {
            get {
                return strokePumpField;
            } 
            set { 
                strokePumpField = value;
                this.StrokePumpSpecified = true;
            }
        }

        private Int16? strokePumpField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StrokePumpSpecified { get; set; }
        /// <summary>
        /// Back pressure applied during pumping stage. 
        /// </summary>
        [XmlElement("presBack")]
        public PressureMeasure PresBack { get; set; }
        /// <summary>
        /// If shutdown event, the elapsed time duration. 
        /// </summary>
        [XmlElement("eTimShutdown")]
        public TimeMeasure ETimeShutdown { get; set; }
        /// <summary>
        /// Comments and Remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cement Additive Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementAdditive", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Cement Additive Component Schema ")]
    public partial class CementAdditive : Object 
    {

        /// <summary>
        /// Additive name. 
        /// </summary>
        [XmlElement("nameAdd")]
        public String NameAdd { get; set; }
        /// <summary>
        /// Additive type or Function (Retarder, Visosifier, Weighting agent). 
        /// </summary>
        [XmlElement("typeAdd")]
        public String TypeAdd { get; set; }
        /// <summary>
        /// Wet or Dry. 
        /// </summary>
        [XmlElement("formAdd")]
        public String FormAdd { get; set; }
        /// <summary>
        /// Additive density. 
        /// </summary>
        [XmlElement("densAdd")]
        public DensityMeasure DensAdd { get; set; }
        /// <summary>
        /// ConcentrationType: %BWOC (%By weight of Cement), %BWOB (%By weight of blend), %BWOW (%By weight of water), %BWOBF (%By weight of base fluid) . If you set this property, you must also set Concentration.
        /// </summary>
        [XmlElement("typeConc")]
        public String TypeConc {
            get {
                return typeConcField;
            } 
            set { 
                if (volSackFieldSpecified) throw new Exception("Cannot set property TypeConc when property VolSack is already set");
                if (wtSackFieldSpecified) throw new Exception("Cannot set property TypeConc when property WeightSack is already set");
                typeConcField = value;
                typeConcFieldSpecified = true;
            }
        }

        private String typeConcField; 
        private bool typeConcFieldSpecified = false; 

        /// <summary>
        /// Concentration Amount: unit type depends of typeConc. . If you set this property, you must also set TypeConc.
        /// </summary>
        [XmlElement("concentration")]
        public MassConcentrationMeasure Concentration {
            get {
                return concentrationField;
            } 
            set { 
                if (volSackFieldSpecified) throw new Exception("Cannot set property Concentration when property VolSack is already set");
                if (wtSackFieldSpecified) throw new Exception("Cannot set property Concentration when property WeightSack is already set");
                concentrationField = value;
                concentrationFieldSpecified = true;
            }
        }

        private MassConcentrationMeasure concentrationField; 
        private bool concentrationFieldSpecified = false; 

        /// <summary>
        /// Concentration in terms of volume per sack.
        /// </summary>
        [XmlElement("volSack")]
        public VolumeMeasure VolSack {
            get {
                return volSackField;
            } 
            set { 
                if (concentrationFieldSpecified) throw new Exception("Cannot set property VolSack when property Concentration is already set");
                if (typeConcFieldSpecified) throw new Exception("Cannot set property VolSack when property TypeConc is already set");
                if (wtSackFieldSpecified) throw new Exception("Cannot set property VolSack when property WeightSack is already set");
                volSackField = value;
                volSackFieldSpecified = true;
            }
        }

        private VolumeMeasure volSackField; 
        private bool volSackFieldSpecified = false; 

        /// <summary>
        /// Concentration in terms of weight per sack.
        /// </summary>
        [XmlElement("wtSack")]
        public MassMeasure WeightSack {
            get {
                return wtSackField;
            } 
            set { 
                if (concentrationFieldSpecified) throw new Exception("Cannot set property WeightSack when property Concentration is already set");
                if (typeConcFieldSpecified) throw new Exception("Cannot set property WeightSack when property TypeConc is already set");
                if (volSackFieldSpecified) throw new Exception("Cannot set property WeightSack when property VolSack is already set");
                wtSackField = value;
                wtSackFieldSpecified = true;
            }
        }

        private MassMeasure wtSackField; 
        private bool wtSackFieldSpecified = false; 


        /// <summary>
        /// Additive Amount. 
        /// </summary>
        [XmlElement("additive")]
        public MassMeasure Additive { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Cement Test Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementTest", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Cement Test Component Schema ")]
    public partial class CementTest : Object 
    {

        /// <summary>
        /// Test pressure. 
        /// </summary>
        [XmlElement("presTest")]
        public PressureMeasure PresTest { get; set; }
        /// <summary>
        /// Elapsed tome to perform the test. 
        /// </summary>
        [XmlElement("eTimTest")]
        public TimeMeasure ETimeTest { get; set; }
        /// <summary>
        /// Cement found between shoe and collar? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cementShoeCollar")]
        public Boolean? CementShoeCollar {
            get {
                return cementShoeCollarField;
            } 
            set { 
                cementShoeCollarField = value;
                this.CementShoeCollarSpecified = true;
            }
        }

        private Boolean? cementShoeCollarField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CementShoeCollarSpecified { get; set; }
        /// <summary>
        /// Cement evaluation tool run. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cetRun")]
        public Boolean? CetRun {
            get {
                return cetRunField;
            } 
            set { 
                cetRunField = value;
                this.CetRunSpecified = true;
            }
        }

        private Boolean? cetRunField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CetRunSpecified { get; set; }
        /// <summary>
        /// Cement evaluation tool bond quality. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cetBondQual")]
        public Boolean? CetBondQual {
            get {
                return cetBondQualField;
            } 
            set { 
                cetBondQualField = value;
                this.CetBondQualSpecified = true;
            }
        }

        private Boolean? cetBondQualField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CetBondQualSpecified { get; set; }
        /// <summary>
        /// Cement bond log run? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cblRun")]
        public Boolean? CblRun {
            get {
                return cblRunField;
            } 
            set { 
                cblRunField = value;
                this.CblRunSpecified = true;
            }
        }

        private Boolean? cblRunField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CblRunSpecified { get; set; }
        /// <summary>
        /// Cement bond log quality indication. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cblBondQual")]
        public Boolean? CblBondQual {
            get {
                return cblBondQualField;
            } 
            set { 
                cblBondQualField = value;
                this.CblBondQualSpecified = true;
            }
        }

        private Boolean? cblBondQualField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CblBondQualSpecified { get; set; }
        /// <summary>
        /// Cement bond Log under pressure. 
        /// </summary>
        [XmlElement("cblPres")]
        public PressureMeasure CblPres { get; set; }
        /// <summary>
        /// Temperature survey run. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("tempSurvey")]
        public Boolean? TempSurvey {
            get {
                return tempSurveyField;
            } 
            set { 
                tempSurveyField = value;
                this.TempSurveySpecified = true;
            }
        }

        private Boolean? tempSurveyField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TempSurveySpecified { get; set; }
        /// <summary>
        /// Hours before logging run after cement run. 
        /// </summary>
        [XmlElement("eTimCementLog")]
        public TimeMeasure ETimeCementLog { get; set; }
        /// <summary>
        /// PIT/LOT formation breakdown gradient or absolute pressure. 
        /// </summary>
        [XmlElement("formPit")]
        public ForcePerVolumeMeasure FormPit { get; set; }
        /// <summary>
        /// Tool name for PIT. 
        /// </summary>
        [XmlElement("toolCompanyPit")]
        public String ToolCompanyPit { get; set; }
        /// <summary>
        /// Hours between end of cement job-start of PIT. 
        /// </summary>
        [XmlElement("eTimPitStart")]
        public TimeMeasure ETimePitStart { get; set; }
        /// <summary>
        /// Measured depth at top of cement. 
        /// </summary>
        [XmlElement("mdCementTop")]
        public MeasuredDepthCoord MDCementTop { get; set; }
        /// <summary>
        /// Method to determine cement top. 
        /// </summary>
        [XmlElement("topCementMethod")]
        public String TopCementMethod { get; set; }
        /// <summary>
        /// Is the top of cement sufficient? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("tocOK")]
        public Boolean? TocOK {
            get {
                return tocOKField;
            } 
            set { 
                tocOKField = value;
                this.TocOKSpecified = true;
            }
        }

        private Boolean? tocOKField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TocOKSpecified { get; set; }
        /// <summary>
        /// Job rating. 
        /// </summary>
        [XmlElement("jobRating")]
        public String JobRating { get; set; }
        /// <summary>
        /// Remedial cement required. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("remedialCement")]
        public Boolean? RemedialCement {
            get {
                return remedialCementField;
            } 
            set { 
                remedialCementField = value;
                this.RemedialCementSpecified = true;
            }
        }

        private Boolean? remedialCementField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RemedialCementSpecified { get; set; }
        /// <summary>
        /// Number of remedials. 
        /// </summary>
        [XmlElement("numRemedial")]
        public Int16? NumRemedial {
            get {
                return numRemedialField;
            } 
            set { 
                numRemedialField = value;
                this.NumRemedialSpecified = true;
            }
        }

        private Int16? numRemedialField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumRemedialSpecified { get; set; }
        /// <summary>
        /// Method used to determine if cement job unsuccessful. 
        /// </summary>
        [XmlElement("failureMethod")]
        public String FailureMethod { get; set; }
        /// <summary>
        /// The distance to the top of the liner. 
        /// </summary>
        [XmlElement("linerTop")]
        public LengthMeasure LinerTop { get; set; }
        /// <summary>
        /// Liner overlap length. 
        /// </summary>
        [XmlElement("linerLap")]
        public LengthMeasure LinerLap { get; set; }
        /// <summary>
        /// Hours before liner top test. 
        /// </summary>
        [XmlElement("eTimBeforeTest")]
        public TimeMeasure ETimeBeforeTest { get; set; }
        /// <summary>
        /// Test negative tool for Liner top seal. 
        /// </summary>
        [XmlElement("testNegativeTool")]
        public String TestNegativeTool { get; set; }
        /// <summary>
        /// Equivalent mud weight. Negative Test? 
        /// </summary>
        [XmlElement("testNegativeEmw")]
        public DensityMeasure TestNegativeEmw { get; set; }
        /// <summary>
        /// Test Positive Tool for liner top seal. 
        /// </summary>
        [XmlElement("testPositiveTool")]
        public String TestPositiveTool { get; set; }
        /// <summary>
        /// Equivalent mud weight. Positive Test or absolute pressure . 
        /// </summary>
        [XmlElement("testPositiveEmw")]
        public DensityMeasure TestPositiveEmw { get; set; }
        /// <summary>
        /// Cement found on tool? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cementFoundOnTool")]
        public Boolean? CementFoundOnTool {
            get {
                return cementFoundOnToolField;
            } 
            set { 
                cementFoundOnToolField = value;
                this.CementFoundOnToolSpecified = true;
            }
        }

        private Boolean? cementFoundOnToolField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CementFoundOnToolSpecified { get; set; }
        /// <summary>
        /// Measured depth to diverter tool. 
        /// </summary>
        [XmlElement("mdDVTool")]
        public MeasuredDepthCoord MDDVTool { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_convCores xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("convCores", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_convCores xsd type.")]
    public partial class ConvCoreList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single conventional core. 
        /// </summary>
        [XmlElement("convCore")]
        public List<ConvCore> ConvCore { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ConvCore;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Conventional Core.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_convCore", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Conventional Core.")]
    public partial class ConvCore : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the conventional core. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the conventional core. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Top depth of core interval. 
        /// </summary>
        [XmlElement("mdCoreTop")]
        public MeasuredDepthCoord MDCoreTop { get; set; }
        /// <summary>
        /// Bottom depth of core interval. 
        /// </summary>
        [XmlElement("mdCoreBottom")]
        public MeasuredDepthCoord MDCoreBottom { get; set; }
        /// <summary>
        /// Date and time when coring commenced (cutting new core). 
        /// </summary>
        [XmlElement("dTimCoreStart")]
        public DateTime? DateTimeCoreStart {
            get {
                return dTimCoreStartField;
            } 
            set { 
                dTimCoreStartField = value;
                this.DateTimeCoreStartSpecified = true;
            }
        }

        private DateTime? dTimCoreStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCoreStartSpecified { get; set; }
        /// <summary>
        /// Date and time when coring complete (end of cutting new core). 
        /// </summary>
        [XmlElement("dTimCoreEnd")]
        public DateTime? DateTimeCoreEnd {
            get {
                return dTimCoreEndField;
            } 
            set { 
                dTimCoreEndField = value;
                this.DateTimeCoreEndSpecified = true;
            }
        }

        private DateTime? dTimCoreEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCoreEndSpecified { get; set; }
        /// <summary>
        /// Manufacturer core reference. 
        /// </summary>
        [XmlElement("coreReference")]
        public String CoreReference { get; set; }
        /// <summary>
        /// Name of coring contractor. 
        /// </summary>
        [XmlElement("coringContractor")]
        public String CoringContractor { get; set; }
        /// <summary>
        /// Name of analysis company. 
        /// </summary>
        [XmlElement("analysisContractor")]
        public String AnalysisContractor { get; set; }
        /// <summary>
        /// Core barrel type. 
        /// </summary>
        [XmlElement("coreBarrel")]
        public String CoreBarrel { get; set; }
        /// <summary>
        /// Inner barrel used? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("innerBarrelUsed")]
        public Boolean? InnerBarrelUsed {
            get {
                return innerBarrelUsedField;
            } 
            set { 
                innerBarrelUsedField = value;
                this.InnerBarrelUsedSpecified = true;
            }
        }

        private Boolean? innerBarrelUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean InnerBarrelUsedSpecified { get; set; }
        /// <summary>
        /// Core inner barrel type. 
        /// </summary>
        [XmlElement("innerBarrelType")]
        public String InnerBarrelType { get; set; }
        /// <summary>
        /// Length of core barrel. 
        /// </summary>
        [XmlElement("lenBarrel")]
        public LengthMeasure LenBarrel { get; set; }
        /// <summary>
        /// Core bit type. 
        /// </summary>
        [XmlElement("coreBitType")]
        public String CoreBitType { get; set; }
        /// <summary>
        /// Core bit outer diameter. 
        /// </summary>
        [XmlElement("diaBit")]
        public LengthMeasure DiaBit { get; set; }
        /// <summary>
        /// Core cut diameter. 
        /// </summary>
        [XmlElement("diaCore")]
        public LengthMeasure DiaCore { get; set; }
        /// <summary>
        /// Cored interval length. 
        /// </summary>
        [XmlElement("lenCored")]
        public LengthMeasure LenCored { get; set; }
        /// <summary>
        /// Length of core recovered. 
        /// </summary>
        [XmlElement("lenRecovered")]
        public LengthMeasure LenRecovered { get; set; }
        /// <summary>
        /// Calculate recovery (commonly in percent). 
        /// </summary>
        [XmlElement("recoverPc")]
        public VolumePerVolumeMeasure RecoverPercent { get; set; }
        /// <summary>
        /// Wellbore inclination over cored interval. 
        /// </summary>
        [XmlElement("inclHole")]
        public PlaneAngleMeasure InclHole { get; set; }
        /// <summary>
        /// True if the core can be re-oriented in space after extraction when a tool-face has been used. Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("coreOrientation")]
        public Boolean? CoreOrientation {
            get {
                return coreOrientationField;
            } 
            set { 
                coreOrientationField = value;
                this.CoreOrientationSpecified = true;
            }
        }

        private Boolean? coreOrientationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CoreOrientationSpecified { get; set; }
        /// <summary>
        /// Method to catch core - fiberglass barrel, conventional, etc. 
        /// </summary>
        [XmlElement("coreMethod")]
        public String CoreMethod { get; set; }
        /// <summary>
        /// Preservation method description. 
        /// </summary>
        [XmlElement("coreTreatmentMethod")]
        public String CoreTreatmentMethod { get; set; }
        /// <summary>
        /// Mud type in use when cutting core. 
        /// </summary>
        [XmlElement("coreFluidUsed")]
        public String CoreFluidUsed { get; set; }
        /// <summary>
        /// Name of formation penetrated. 
        /// </summary>
        [XmlElement("nameFormation")]
        public String NameFormation { get; set; }
        /// <summary>
        /// Set of Geological intervals, descriptions, gas readings for the cored interval. 
        /// </summary>
        [XmlElement("geologyInterval")]
        public GeologyInterval GeologyInterval { get; set; }
        /// <summary>
        /// General core description. 
        /// </summary>
        [XmlElement("coreDescription")]
        public String CoreDescription { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Geology Interval Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_geologyInterval", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Geology Interval Component Schema")]
    public partial class GeologyInterval : Object 
    {

        /// <summary>
        /// The type of lithology declaration. An interpreted type will specify one lithology for the whole interval (i.e., the percentage is 100%). A cuttings or core type may specify one or more lithologies for the interval based on a visual inspection of the cuttings or core and a relative percentage will be assigned to each lithology.
        /// </summary>
        [XmlElement("typeLithology")]
        public LithologySource? TypeLithology { get; set; }
        /// <summary>
        /// Measured depth at top of interval.
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at base of interval. A point interval should be indicated by setting mdTop=mdBottom.
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// Date and time the information is related to. The time refers to the top of the interval. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// True vertical depth at top of the section. 
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// True vertical depth at base of interval. 
        /// </summary>
        [XmlElement("tvdBase")]
        public WellVerticalDepthCoord TvdBase { get; set; }
        /// <summary>
        /// Average rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropAv")]
        public VelocityMeasure RopAverage { get; set; }
        /// <summary>
        /// Minimum rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropMn")]
        public VelocityMeasure RopMin { get; set; }
        /// <summary>
        /// Maximum rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropMx")]
        public VelocityMeasure RopMax { get; set; }
        /// <summary>
        /// Surface weight on bit - average through interval. 
        /// </summary>
        [XmlElement("wobAv")]
        public ForceMeasure WobAverage { get; set; }
        /// <summary>
        /// Average torque through interval. 
        /// </summary>
        [XmlElement("tqAv")]
        public MomentOfForceMeasure TorqueAverage { get; set; }
        /// <summary>
        /// Average current through interval. This is the raw measurement from which the average torque could be calculated.
        /// </summary>
        [XmlElement("currentAv")]
        public ElectricCurrentMeasure CurrentAverage { get; set; }
        /// <summary>
        /// Average turn rate through interval (commonly in rpm). 
        /// </summary>
        [XmlElement("rpmAv")]
        public AnglePerTimeMeasure RpmAverage { get; set; }
        /// <summary>
        /// Average mud density in through interval. 
        /// </summary>
        [XmlElement("wtMudAv")]
        public DensityMeasure WeightMudAverage { get; set; }
        /// <summary>
        /// Average effective circulating density at TD through Interval. 
        /// </summary>
        [XmlElement("ecdTdAv")]
        public DensityMeasure EcdTdAverage { get; set; }
        /// <summary>
        /// Average drilling exponent through Interval. 
        /// </summary>
        [XmlElement("dxcAv")]
        public Double? DxcAverage {
            get {
                return dxcAvField;
            } 
            set { 
                dxcAvField = value;
                this.DxcAverageSpecified = true;
            }
        }

        private Double? dxcAvField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DxcAverageSpecified { get; set; }
		/// <summary>
        /// Set of lithology records for the Interval. 
        /// </summary>
        [XmlElement("lithology")]
        public List<Lithology> Lithology { get; set; }
        /// <summary>
        /// Show record through the Interval. 
        /// </summary>
        [XmlElement("show")]
        public Show Show { get; set; }
        /// <summary>
        /// Chromatographic break down for the interval. 
        /// </summary>
        [XmlElement("chromatograph")]
        public Chromatograph Chromatograph { get; set; }
        /// <summary>
        /// Total gas readings associated with this interval. 
        /// </summary>
        [XmlElement("mudGas")]
        public MudGas MudGas { get; set; }
        /// <summary>
        /// Sample bulk density for the interval. 
        /// </summary>
        [XmlElement("densBulk")]
        public DensityMeasure DensBulk { get; set; }
        /// <summary>
        /// Shale density for the interval. 
        /// </summary>
        [XmlElement("densShale")]
        public DensityMeasure DensShale { get; set; }
        /// <summary>
        /// Calcimetry calcite percentage. 
        /// </summary>
        [XmlElement("calcite")]
        public VolumePerVolumeMeasure CAlcite { get; set; }
        /// <summary>
        /// Calcimetry dolomite percentage. 
        /// </summary>
        [XmlElement("dolomite")]
        public VolumePerVolumeMeasure Dolomite { get; set; }
        /// <summary>
        /// Cuttings cationic exchange capacity. 
        /// </summary>
        [XmlElement("cec")]
        public EquivalentPerMassMeasure Cec { get; set; }
        /// <summary>
        /// Fluorescence as measured using a device licensed for the Quantitative Fluorescence Technique.
        /// </summary>
        [XmlElement("qft")]
        public IlluminanceMeasure Qft { get; set; }
        /// <summary>
        /// Calcimetry stabilized percentage. 
        /// </summary>
        [XmlElement("calcStab")]
        public VolumePerVolumeMeasure CAlcStab { get; set; }
		/// <summary>
        /// Name of formation penetrated. 
        /// </summary>
        [XmlElement("nameFormation")]
        public List<String> NameFormation { get; set; }
		/// <summary>
        /// Name of formation, regionally dependent. 
        /// </summary>
        [XmlElement("lithostratigraphic")]
        public List<String> Lithostratigraphic { get; set; }
		/// <summary>
        /// Chronostratigraphic classification. 
        /// </summary>
        [XmlElement("chronostratigraphic")]
        public List<String> Chronostratigraphic { get; set; }
        /// <summary>
        /// Minimum size. 
        /// </summary>
        [XmlElement("sizeMn")]
        public LengthMeasure SizeMin { get; set; }
        /// <summary>
        /// Maximum size. 
        /// </summary>
        [XmlElement("sizeMx")]
        public LengthMeasure SizeMax { get; set; }
        /// <summary>
        /// Plug length. 
        /// </summary>
        [XmlElement("lenPlug")]
        public LengthMeasure LenPlug { get; set; }
        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Sample treatment : cutting fluid. 
        /// </summary>
        [XmlElement("cuttingFluid")]
        public String CuttingFluid { get; set; }
        /// <summary>
        /// Sample treatment : cleaning method. 
        /// </summary>
        [XmlElement("cleaningMethod")]
        public String CleaningMethod { get; set; }
        /// <summary>
        /// Sample treatment : drying method. 
        /// </summary>
        [XmlElement("dryingMethod")]
        public String DryingMethod { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Lithology Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_lithology", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Lithology Component Schema")]
    public partial class Lithology : Object 
    {

        /// <summary>
        /// The type of lithology. 
        /// </summary>
        [XmlElement("type")]
        public LithologyType Type {
            get {
                return typeField;
            } 
            set { 
                typeField = value;
                this.TypeSpecified = true;
            }
        }

        private LithologyType typeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeSpecified { get; set; }
        /// <summary>
        /// Lithology official codes if desired. Operator typically to define what the codes are. 
        /// </summary>
        [XmlElement("codeLith")]
        public String CodeLith { get; set; }
        /// <summary>
        /// The lithology represents what portion of the sampled interval. The total of the lithologies within an interval should add up to 100 percent. The "undifferentiated" code should be used to fill out to 100.
        /// </summary>
        [XmlElement("lithPc")]
        public VolumePerVolumeMeasurePercent LithPercent { get; set; }
        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Lithology classification description. 
        /// </summary>
        [XmlElement("lithClass")]
        public String LithClass { get; set; }
        /// <summary>
        /// Granulometry. 
        /// </summary>
        [XmlElement("grainType")]
        public String GrainType { get; set; }
        /// <summary>
        /// Dunham limestone classification. 
        /// </summary>
        [XmlElement("dunhamClass")]
        public String DunhamClass { get; set; }
        /// <summary>
        /// Lithology color description. 
        /// </summary>
        [XmlElement("color")]
        public String Color { get; set; }
        /// <summary>
        /// Lithology texture description. 
        /// </summary>
        [XmlElement("texture")]
        public String Texture { get; set; }
        /// <summary>
        /// Lithology hardness description. 
        /// </summary>
        [XmlElement("hardness")]
        public String Hardness { get; set; }
        /// <summary>
        /// Lithology grain size description. 
        /// </summary>
        [XmlElement("sizeGrain")]
        public String SizeGrain { get; set; }
        /// <summary>
        /// Lithology roundness description. 
        /// </summary>
        [XmlElement("roundness")]
        public String Roundness { get; set; }
        /// <summary>
        /// Lithology sorting description. 
        /// </summary>
        [XmlElement("sorting")]
        public String Sorting { get; set; }
        /// <summary>
        /// Lithology matrix/cement description. 
        /// </summary>
        [XmlElement("matrixCement")]
        public String MatrixCement { get; set; }
        /// <summary>
        /// Lithology visible porosity description. 
        /// </summary>
        [XmlElement("porosityVisible")]
        public String PorosityVisible { get; set; }
        /// <summary>
        /// Lithology permeability description. 
        /// </summary>
        [XmlElement("permeability")]
        public String Permeability { get; set; }
        /// <summary>
        /// Shale density for the interval. 
        /// </summary>
        [XmlElement("densShale")]
        public DensityMeasure DensShale { get; set; }
		/// <summary>
        /// A single qualifier. In mudlogging terms, a qualifier is a graphical symbol in the Interpreted Lithology column of the Formation Evaluation Log (aka "the mudlog"). In addition to the major lithologies (e.g., sand, shale, etc) existing in the sample, other minerals (present as accessories or inclusions e.g. chert, pyrite, glauconite) and fossils (forams, oyster shells, bryozoans, etc) may exist and their abundance is generally categorized using ranges such as Trace (less than 10%), Common (10-25%) and Abundant (greater than 25%). These additional minerals and fossils can be of disproportionately great diagnostic and descriptive value. For example, qualifiers can be used to indicate facies changes, marker beds or something that impacted drilling conditions. These qualifiers (representing accessories, inclusions and/or fossils) are used to rapidly and graphically indicate to the recipient of the mudlog that a significant lithological event was encountered while drilling the well. 
        /// </summary>
        [XmlElement("qualifier")]
        public List<Qualifier> Qualifier { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - lithology qualifier Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_qualifier", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - lithology qualifier Component Schema")]
    public partial class Qualifier : Object 
    {

        /// <summary>
        /// The type of qualifier.
        /// </summary>
        [XmlElement("type")]
        public QualifierType Type { get; set; }
        /// <summary>
        /// The measured depth at the top of the interval represented by the qualifier. This must be within the range of the parent geologic interval.
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// The measured depth at the bottom of the interval represented by the qualifier. A point can be indicated by specifying bottom=top. This must be within the range of the parent geologic interval.
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// The relative abundance of the qualifier. This is usually estimated based on a "visual area" basis by inspecting the cuttings spread out on the shaker table. This either represents a point value or the upperbound of a range (e.g., 0% to 10%).
        /// </summary>
        [XmlElement("abundance")]
        public VolumePerVolumeMeasurePercent Abundance { get; set; }
        /// <summary>
        /// A code associated with the relative abundance of the qualifier. For example, "trace", "common" or "abundant". This is generally a proprietary code. The interoperable semantics are provided by the above abundance value. The presumption is that the value range associated with a code is mapped to a single value. On the other end of an exchange, the single value is mapped to the range associated with the local codes on that end.
        /// </summary>
        [XmlElement("abundanceCode")]
        public String AbundanceCode { get; set; }
        /// <summary>
        /// A textual description of the qualifier.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Geology Show Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_show", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML Geology Show Component Schema")]
    public partial class Show : Object 
    {

        /// <summary>
        /// Show Rating. 
        /// </summary>
        [XmlElement("showRat")]
        public ShowRating? ShowRat {
            get {
                return showRatField;
            } 
            set { 
                showRatField = value;
                this.ShowRatSpecified = true;
            }
        }

        private ShowRating? showRatField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ShowRatSpecified { get; set; }
        /// <summary>
        /// Visible Stain Color. 
        /// </summary>
        [XmlElement("stainColor")]
        public String StainColor { get; set; }
        /// <summary>
        /// Visible Stain Distribution. 
        /// </summary>
        [XmlElement("stainDistr")]
        public String StainDistr { get; set; }
        /// <summary>
        /// Visible Stain (commonly in percent). 
        /// </summary>
        [XmlElement("stainPc")]
        public AreaPerAreaMeasure StainPercent { get; set; }
        /// <summary>
        /// Natural Fluorescence Color. 
        /// </summary>
        [XmlElement("natFlorColor")]
        public String NatFlorColor { get; set; }
        /// <summary>
        /// Natural fluorescence (commonly in percent). 
        /// </summary>
        [XmlElement("natFlorPc")]
        public AreaPerAreaMeasure NatFlorPercent { get; set; }
        /// <summary>
        /// Natural fluorescence level. 
        /// </summary>
        [XmlElement("natFlorLevel")]
        public ShowFluorescence? NatFlorLevel {
            get {
                return natFlorLevelField;
            } 
            set { 
                natFlorLevelField = value;
                this.NatFlorLevelSpecified = true;
            }
        }

        private ShowFluorescence? natFlorLevelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NatFlorLevelSpecified { get; set; }
        /// <summary>
        /// Natural fluorescence description. 
        /// </summary>
        [XmlElement("natFlorDesc")]
        public String NatFlorDesc { get; set; }
        /// <summary>
        /// Cut color. 
        /// </summary>
        [XmlElement("cutColor")]
        public String CutColor { get; set; }
        /// <summary>
        /// Cut speed. 
        /// </summary>
        [XmlElement("cutSpeed")]
        public ShowSpeed? CutSpeed {
            get {
                return cutSpeedField;
            } 
            set { 
                cutSpeedField = value;
                this.CutSpeedSpecified = true;
            }
        }

        private ShowSpeed? cutSpeedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CutSpeedSpecified { get; set; }
        /// <summary>
        /// Cut strength. 
        /// </summary>
        [XmlElement("cutStrength")]
        public String CutStrength { get; set; }
        /// <summary>
        /// Cut formulation. 
        /// </summary>
        [XmlElement("cutForm")]
        public ShowLevel? CutForm {
            get {
                return cutFormField;
            } 
            set { 
                cutFormField = value;
                this.CutFormSpecified = true;
            }
        }

        private ShowLevel? cutFormField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CutFormSpecified { get; set; }
        /// <summary>
        /// Cut level (Faint, Bright, etc.). 
        /// </summary>
        [XmlElement("cutLevel")]
        public String CutLevel { get; set; }
        /// <summary>
        /// Cut fluorescence color. 
        /// </summary>
        [XmlElement("cutFlorColor")]
        public String CutFlorColor { get; set; }
        /// <summary>
        /// Cut fluorescence speed. 
        /// </summary>
        [XmlElement("cutFlorSpeed")]
        public ShowSpeed? CutFlorSpeed {
            get {
                return cutFlorSpeedField;
            } 
            set { 
                cutFlorSpeedField = value;
                this.CutFlorSpeedSpecified = true;
            }
        }

        private ShowSpeed? cutFlorSpeedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CutFlorSpeedSpecified { get; set; }
        /// <summary>
        /// Cut fluorescence strength. 
        /// </summary>
        [XmlElement("cutFlorStrength")]
        public String CutFlorStrength { get; set; }
        /// <summary>
        /// Cut fluorescence form. 
        /// </summary>
        [XmlElement("cutFlorForm")]
        public ShowLevel? CutFlorForm {
            get {
                return cutFlorFormField;
            } 
            set { 
                cutFlorFormField = value;
                this.CutFlorFormSpecified = true;
            }
        }

        private ShowLevel? cutFlorFormField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CutFlorFormSpecified { get; set; }
        /// <summary>
        /// Cut fluorescence level. 
        /// </summary>
        [XmlElement("cutFlorLevel")]
        public ShowFluorescence? CutFlorLevel {
            get {
                return cutFlorLevelField;
            } 
            set { 
                cutFlorLevelField = value;
                this.CutFlorLevelSpecified = true;
            }
        }

        private ShowFluorescence? cutFlorLevelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CutFlorLevelSpecified { get; set; }
        /// <summary>
        /// Residue color. 
        /// </summary>
        [XmlElement("residueColor")]
        public String ResidueColor { get; set; }
        /// <summary>
        /// Free format show description. 
        /// </summary>
        [XmlElement("showDesc")]
        public String ShowDesc { get; set; }
        /// <summary>
        /// Impregnated lithology. 
        /// </summary>
        [XmlElement("impregnatedLitho")]
        public String ImpregnatedLitho { get; set; }
        /// <summary>
        /// Description of any hydrocarbon type odors smelled. 
        /// </summary>
        [XmlElement("odor")]
        public String OuterDiameteror { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Chromatographic Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_chromatograph", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Chromatographic Component Schema ")]
    public partial class Chromatograph : Object 
    {

        /// <summary>
        /// The date and time at which the gas sample was processed. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Measured depth at top of Interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at base of interval. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// Mud density in (active pits). 
        /// </summary>
        [XmlElement("wtMudIn")]
        public DensityMeasure WeightMudIn { get; set; }
        /// <summary>
        /// Mud density out (flowline). 
        /// </summary>
        [XmlElement("wtMudOut")]
        public DensityMeasure WeightMudOut { get; set; }
        /// <summary>
        /// Chromatograph type. 
        /// </summary>
        [XmlElement("chromType")]
        public String ChromType { get; set; }
        /// <summary>
        /// Chromatograph cycle time. Commonly in seconds. 
        /// </summary>
        [XmlElement("eTimChromCycle")]
        public TimeMeasure ETimeChromCycle { get; set; }
        /// <summary>
        /// Chromatograph integrator report time, format may be variable due to recording equipment 
        /// </summary>
        [XmlElement("chromIntRpt")]
        public DateTime? ChromIntRpt {
            get {
                return chromIntRptField;
            } 
            set { 
                chromIntRptField = value;
                this.ChromIntRptSpecified = true;
            }
        }

        private DateTime? chromIntRptField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ChromIntRptSpecified { get; set; }
        /// <summary>
        /// Methane (C1) ppm (average). 
        /// </summary>
        [XmlElement("methAv")]
        public VolumePerVolumeMeasure MethAverage { get; set; }
        /// <summary>
        /// Methane (C1) ppm (minimum). 
        /// </summary>
        [XmlElement("methMn")]
        public VolumePerVolumeMeasure MethMin { get; set; }
        /// <summary>
        /// Methane (C1) ppm (maximum). 
        /// </summary>
        [XmlElement("methMx")]
        public VolumePerVolumeMeasure MethMax { get; set; }
        /// <summary>
        /// Ethane (C2) ppm (average). 
        /// </summary>
        [XmlElement("ethAv")]
        public VolumePerVolumeMeasure EthAverage { get; set; }
        /// <summary>
        /// Ethane (C2) ppm (minimum). 
        /// </summary>
        [XmlElement("ethMn")]
        public VolumePerVolumeMeasure EthMin { get; set; }
        /// <summary>
        /// Ethane (C2) ppm (maximum). 
        /// </summary>
        [XmlElement("ethMx")]
        public VolumePerVolumeMeasure EthMax { get; set; }
        /// <summary>
        /// Propane (C3) ppm (average). 
        /// </summary>
        [XmlElement("propAv")]
        public VolumePerVolumeMeasure PropAverage { get; set; }
        /// <summary>
        /// Propane (C3) ppm (minimum). 
        /// </summary>
        [XmlElement("propMn")]
        public VolumePerVolumeMeasure PropMin { get; set; }
        /// <summary>
        /// Propane (C3) ppm (maximum). 
        /// </summary>
        [XmlElement("propMx")]
        public VolumePerVolumeMeasure PropMax { get; set; }
        /// <summary>
        /// iso-Butane (iC4) ppm (average). 
        /// </summary>
        [XmlElement("ibutAv")]
        public VolumePerVolumeMeasure IbutAverage { get; set; }
        /// <summary>
        /// iso-Butane (iC4) ppm (minimum). 
        /// </summary>
        [XmlElement("ibutMn")]
        public VolumePerVolumeMeasure IbutMin { get; set; }
        /// <summary>
        /// iso-Butane (iC4) ppm (maximum). 
        /// </summary>
        [XmlElement("ibutMx")]
        public VolumePerVolumeMeasure IbutMax { get; set; }
        /// <summary>
        /// nor-Butane (nC4) ppm (average). 
        /// </summary>
        [XmlElement("nbutAv")]
        public VolumePerVolumeMeasure NbutAverage { get; set; }
        /// <summary>
        /// nor-Butane (nC4) ppm (minimum). 
        /// </summary>
        [XmlElement("nbutMn")]
        public VolumePerVolumeMeasure NbutMin { get; set; }
        /// <summary>
        /// nor-Butane (nC4) ppm (maximum). 
        /// </summary>
        [XmlElement("nbutMx")]
        public VolumePerVolumeMeasure NbutMax { get; set; }
        /// <summary>
        /// iso-Pentane (iC5) ppm (average). 
        /// </summary>
        [XmlElement("ipentAv")]
        public VolumePerVolumeMeasure IpentAverage { get; set; }
        /// <summary>
        /// iso-Pentane (iC5) ppm (minimum). 
        /// </summary>
        [XmlElement("ipentMn")]
        public VolumePerVolumeMeasure IpentMin { get; set; }
        /// <summary>
        /// iso-Pentane (iC5) ppm (maximum). 
        /// </summary>
        [XmlElement("ipentMx")]
        public VolumePerVolumeMeasure IpentMax { get; set; }
        /// <summary>
        /// nor-Pentane (nC5) ppm (average). 
        /// </summary>
        [XmlElement("npentAv")]
        public VolumePerVolumeMeasure NpentAverage { get; set; }
        /// <summary>
        /// nor-Pentane (nC5) ppm (minimum). 
        /// </summary>
        [XmlElement("npentMn")]
        public VolumePerVolumeMeasure NpentMin { get; set; }
        /// <summary>
        /// nor-Pentane (nC5) ppm (maximum). 
        /// </summary>
        [XmlElement("npentMx")]
        public VolumePerVolumeMeasure NpentMax { get; set; }
        /// <summary>
        /// neo-Pentane (eC5) ppm (average). 
        /// </summary>
        [XmlElement("epentAv")]
        public VolumePerVolumeMeasure EpentAverage { get; set; }
        /// <summary>
        /// neo-Pentane (eC5) ppm (minimum). 
        /// </summary>
        [XmlElement("epentMn")]
        public VolumePerVolumeMeasure EpentMin { get; set; }
        /// <summary>
        /// neo-Pentane (eC5) ppm (maximum). 
        /// </summary>
        [XmlElement("epentMx")]
        public VolumePerVolumeMeasure EpentMax { get; set; }
        /// <summary>
        /// iso-Hexane (iC6) ppm (average). 
        /// </summary>
        [XmlElement("ihexAv")]
        public VolumePerVolumeMeasure IhexAverage { get; set; }
        /// <summary>
        /// iso-Hexane (iC6) ppm (minimum). 
        /// </summary>
        [XmlElement("ihexMn")]
        public VolumePerVolumeMeasure IhexMin { get; set; }
        /// <summary>
        /// iso-Hexane (iC6) ppm (maximum). 
        /// </summary>
        [XmlElement("ihexMx")]
        public VolumePerVolumeMeasure IhexMax { get; set; }
        /// <summary>
        /// nor-Hexane (nC6) ppm (average). 
        /// </summary>
        [XmlElement("nhexAv")]
        public VolumePerVolumeMeasure NhexAverage { get; set; }
        /// <summary>
        /// nor-Hexane (nC6) ppm (minimum). 
        /// </summary>
        [XmlElement("nhexMn")]
        public VolumePerVolumeMeasure NhexMin { get; set; }
        /// <summary>
        /// nor-Hexane (nC6) ppm (maximum). 
        /// </summary>
        [XmlElement("nhexMx")]
        public VolumePerVolumeMeasure NhexMax { get; set; }
        /// <summary>
        /// Carbon Dioxide ppm (average). 
        /// </summary>
        [XmlElement("co2Av")]
        public VolumePerVolumeMeasure Co2Average { get; set; }
        /// <summary>
        /// Carbon Dioxide ppm (minimum). 
        /// </summary>
        [XmlElement("co2Mn")]
        public VolumePerVolumeMeasure Co2Min { get; set; }
        /// <summary>
        /// Carbon Dioxide ppm (maximum). 
        /// </summary>
        [XmlElement("co2Mx")]
        public VolumePerVolumeMeasure Co2Max { get; set; }
        /// <summary>
        /// Hydrogen Sulfide (average) ppm. 
        /// </summary>
        [XmlElement("h2sAv")]
        public VolumePerVolumeMeasure H2sAverage { get; set; }
        /// <summary>
        /// Hydrogen Sulfide (minimum) ppm. 
        /// </summary>
        [XmlElement("h2sMn")]
        public VolumePerVolumeMeasure H2sMin { get; set; }
        /// <summary>
        /// Hydrogen Sulfide (maximum) ppm. 
        /// </summary>
        [XmlElement("h2sMx")]
        public VolumePerVolumeMeasure H2sMax { get; set; }
        /// <summary>
        /// Acetylene. 
        /// </summary>
        [XmlElement("acetylene")]
        public VolumePerVolumeMeasure Acetylene { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Mud Gas Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudGas", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML Mud Gas Component Schema")]
    public partial class MudGas : Object 
    {

        /// <summary>
        /// Average total gas. 
        /// </summary>
        [XmlElement("gasAv")]
        public VolumePerVolumeMeasure GasAverage { get; set; }
        /// <summary>
        /// Peak gas reading. 
        /// </summary>
        [XmlElement("gasPeak")]
        public VolumePerVolumeMeasure GasPeak { get; set; }
        /// <summary>
        /// Type of gas peak. 
        /// </summary>
        [XmlElement("gasPeakType")]
        public GasPeakType? GasPeakType {
            get {
                return gasPeakTypeField;
            } 
            set { 
                gasPeakTypeField = value;
                this.GasPeakTypeSpecified = true;
            }
        }

        private GasPeakType? gasPeakTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean GasPeakTypeSpecified { get; set; }
        /// <summary>
        /// Background gas reading. 
        /// </summary>
        [XmlElement("gasBackgnd")]
        public VolumePerVolumeMeasure GasBackgnd { get; set; }
        /// <summary>
        /// Connection gas (average). 
        /// </summary>
        [XmlElement("gasConAv")]
        public VolumePerVolumeMeasure GasConAverage { get; set; }
        /// <summary>
        /// Connection gas (maximum). 
        /// </summary>
        [XmlElement("gasConMx")]
        public VolumePerVolumeMeasure GasConMax { get; set; }
        /// <summary>
        /// Trip gas last reading. 
        /// </summary>
        [XmlElement("gasTrip")]
        public VolumePerVolumeMeasure GasTrip { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_dtsInstalledSystems xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("dtsInstalledSystems", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_dtsInstalledSystems xsd type.")]
    public partial class DtsInstalledSystemList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// Main wrapper for all the distributed temperature survey information about the installed system. Note that this can serve as a standalone object for messages that are not part of the WITSML server architecture.
        /// </summary>
        [XmlElement("dtsInstalledSystem")]
        public List<DtsInstalledSystem> DtsInstalledSystem { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return DtsInstalledSystem;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The optical fiber is installed in a wellbore and attached to an instrument box. Calibrations are performed. In general, this should be a subelement of a DTS object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_dtsInstalledSystem", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The optical fiber is installed in a wellbore and attached to an instrument box. Calibrations are performed. In general, this should be a subelement of a DTS object.")]
    public partial class DtsInstalledSystem : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the installed system.
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the dts.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Is this a planned installation in a well, or has the installation already occurred. Note that the default value is 'false', which states that this is an actual installation.
        /// </summary>
        [XmlElement("isPlanned")]
        public Boolean? IsPlanned {
            get {
                return isPlannedField;
            } 
            set { 
                isPlannedField = value;
                this.IsPlannedSpecified = true;
            }
        }

        private Boolean? isPlannedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsPlannedSpecified { get; set; }
        /// <summary>
        /// Information about the fiber used, and its installation.
        /// </summary>
        [XmlElement("fiberInformation")]
        public FiberInformation FiberInformation { get; set; }
        /// <summary>
        /// Information about the instrument box used, and its installation.
        /// </summary>
        [XmlElement("instrumentBoxInformation")]
        public BoxInformation InstrumentBoxInformation { get; set; }
        /// <summary>
        /// The configuration of the fiber installation. Example values would be linear, linear with gauge, J, U.
        /// </summary>
        [XmlElement("fiberConfiguration")]
        public String FiberConfiguration { get; set; }
		/// <summary>
        /// A fiber installed with a "U" configuration will have two ends available for hookup to an instrument box. In order to record which end is cabled to the instrument box on a particular measurement run, it is necessary to identify the two ends. This complex type allows a name and description for each end, so that it may be identified in a later use. This may also be useful when multiple fibers in multiple wellbores converge at the same wellhead.
        /// </summary>
        [XmlElement("fiberEndPoint")]
        public List<FiberEndPoint> FiberEndPoint { get; set; }
        /// <summary>
        /// The length of the fiber installed in the wellbore.
        /// </summary>
        [XmlElement("fiberLength")]
        public LengthMeasure FiberLength { get; set; }
        /// <summary>
        /// A table of values along the length along the fiber.
        /// </summary>
        [XmlElement("wellboreFiberSchematic")]
        public List<SingleInstalledPoint> WellboreFiberSchematic { get; set; }
        /// <summary>
        /// Total light budget available for the installation. This is generally measured in decibels, and indicates the total power loss for two-way travel of the light in the installed fiber.
        /// </summary>
        [XmlElement("opticalBudget")]
        public GeneralMeasureType OperatingticalBudget { get; set; }
        /// <summary>
        /// The activity of pumping the fiber downhole
        /// </summary>
        [XmlElement("pumpActivity")]
        public PumpActivity PumpActivity { get; set; }
		/// <summary>
        /// This captures the data from the pre-installation and post-installation OTDR tests run on the fiber. A standard quality control program would include these two, but the schema allows for more than two if additional runs associated with the installation of the fiber are performed. OTDR runs associated with a measurement are given as a child of the measurementInformation element.
        /// </summary>
        [XmlElement("otdrInstallationTest")]
        public List<Otdr> OtdrInstallationTest { get; set; }
		/// <summary>
        /// Any calibration other than the ones explicitly given may be recorded here. This is a general calibration type, which is populated with name/value pairs.
        /// </summary>
        [XmlElement("installationCalibration")]
        public List<Calibration> InstallationCAlibration { get; set; }
        /// <summary>
        /// If an instrument box is changed, for example, but the fiber remains the same, this instance of installed fiber is given to record that change. This element refers to a previous installed fiber, on which this one is based. For example, the wellboreFiberSchematic is unchanged, and may be obtained from the previous instance of installed fiber that is referenced here.
        /// </summary>
        [XmlElement("basedOnInstalledFiber")]
        public RefNameString BasedOnInstalledFiber { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The optical fiber used for distributed temperature surveys
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberInformation", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The optical fiber used for distributed temperature surveys")]
    public partial class FiberInformation : Object 
    {

        /// <summary>
        /// The date the fiber is installed.
        /// </summary>
        [XmlElement("installationDate")]
        public String InstallationDate { get; set; }
        /// <summary>
        /// The company that installed the fiber in the wellbore.
        /// </summary>
        [XmlElement("installationCompany")]
        public String InstallationCompany { get; set; }
        /// <summary>
        /// The date the fiber was de-installed from the wellbore.
        /// </summary>
        [XmlElement("deInstallationDate")]
        public String DeInstallationDate { get; set; }
        /// <summary>
        /// The diameter of the capillary tube into which one or more fibers will be installed. If the installation has fibers that go to different wellbores, only those fibers installed in the parent wellbore should be included in this instance.
        /// </summary>
        [XmlElement("capillaryTubeDiameter")]
        public LengthMeasure CapillaryTubeDiameter { get; set; }
		/// <summary>
        /// The properties of the fiber or fibers installed in the wellbore.
        /// </summary>
        [XmlElement("fiber")]
        public List<Fiber> Fiber { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The optical fiber used for distributed temperature surveys
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiber", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The optical fiber used for distributed temperature surveys")]
    public partial class Fiber : Object 
    {

        /// <summary>
        /// A human understandable name for the fiber. This is used for identification of the instance.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The mode of fiber.
        /// </summary>
        [XmlElement("mode")]
        public FiberMode? Mode { get; set; }
		/// <summary>
        /// Zero or more instances that allow other classifications to be assigned to the fiber.
        /// </summary>
        [XmlElement("type")]
        public List<TypeOptionalClassString> Type { get; set; }
        /// <summary>
        /// The type of coating on the fiber.
        /// </summary>
        [XmlElement("coating")]
        public String Coating { get; set; }
        /// <summary>
        /// The type of jacket covering the fiber.
        /// </summary>
        [XmlElement("jacket")]
        public String Jacket { get; set; }
        /// <summary>
        /// The inner diameter of the core, generally measured in microns (um).
        /// </summary>
        [XmlElement("coreDiameter")]
        public LengthMeasure CoreDiameter { get; set; }
        /// <summary>
        /// The diameter of the core plus the cladding, generally measured in microns (um).
        /// </summary>
        [XmlElement("claddedDiameter")]
        public LengthMeasure CladdedDiameter { get; set; }
        /// <summary>
        /// The diameter of the cable and all its sheathing, generally measured in microns (um). This is intended to be the diameter of the cable on the spool.
        /// </summary>
        [XmlElement("outsideDiameter")]
        public LengthMeasure OutsideDiameter { get; set; }
		/// <summary>
        /// The refractive index of the fiber. Also included is the frequency in Hz for which this refractive index is valid. There may be multiple instances of this element.
        /// </summary>
        [XmlElement("refractiveIndex")]
        public List<RefractiveIndex> RefractiveIndex { get; set; }
		/// <summary>
        /// The power loss (usually in decibels) per unit of length of the fiber. Also included is the frequency for which this loss is measured. There ay be multiple instances of this element.
        /// </summary>
        [XmlElement("oneWayLoss")]
        public List<OneWayLoss> OneWayLoss { get; set; }
		/// <summary>
        /// Additional parameters to define the fiber as a material. These should not be parameters to define the installation of the fiber in a well, or other system. This element should be used only if an appropriate parameter is not available as an element, or in the calibration operation.
        /// </summary>
        [XmlElement("parameter")]
        public List<IndexedObject> PluggedAndAbandonedrameter { get; set; }
        /// <summary>
        /// The spool number located on the particular spool. The spool number may contain alphanumeric characters.
        /// </summary>
        [XmlElement("spoolNumberTag")]
        public String SpoolNumberTag { get; set; }
        /// <summary>
        /// The length of the fiber on the spool when purchased.
        /// </summary>
        [XmlElement("spoolLength")]
        public LengthMeasure SpoolLength { get; set; }
        /// <summary>
        /// A fiber may go through several manufacturers for its various parts. The supplier is the final company in the chain that supplies the fiber to the end user.
        /// </summary>
        [XmlElement("supplyDate")]
        public String SupplyDate { get; set; }
        /// <summary>
        /// A fiber may go through several manufacturers for its various parts. The supplier is the final company in the chain that supplies the fiber to the end user.
        /// </summary>
        [XmlElement("supplier")]
        public String Supplier { get; set; }
        /// <summary>
        /// The model number (alphanumeric) that is used by the supplier to reference the type of fiber that is supplied to the user.
        /// </summary>
        [XmlElement("supplierModelNumber")]
        public String SupplierModelNumber { get; set; }
		/// <summary>
        /// Information about calibrations and quality checks that were performed on the cable at the factory. This is not to include calibrations that are run at installation time and at measurement time.
        /// </summary>
        [XmlElement("factoryCalibration")]
        public List<Calibration> FactoryCAlibration { get; set; }
		/// <summary>
        /// A reference to a dtsInstalledSytem object that previously used the fiber.
        /// </summary>
        [XmlElement("installationHistory")]
        public List<RefNameString> InstallationHistory { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the typeOptionalClassString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="typeOptionalClassString", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the typeOptionalClassString xsd type.")]
    public partial class TypeOptionalClassString : Object 
    {
        public TypeOptionalClassString() {}
        public TypeOptionalClassString(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// This identifies the classification system to which the class belongs. 
        /// </summary>
        [XmlAttribute("classType")]
        public String ClassType { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The refractive index of a material depends on the frequency or wavelength of the light. Hence it is necessary to include both the value (a unitless number) and the frequency or wavelength. The frequency will be a quantity type with a frequency unit, such as Hz, kHz, or MHz. The wavelength will be a quantity type with a length unit, such as m, cm, um, in, or ft.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refractiveIndex", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The refractive index of a material depends on the frequency or wavelength of the light. Hence it is necessary to include both the value (a unitless number) and the frequency or wavelength. The frequency will be a quantity type with a frequency unit, such as Hz, kHz, or MHz. The wavelength will be a quantity type with a length unit, such as m, cm, um, in, or ft.")]
    public partial class RefractiveIndex : Object 
    {

        /// <summary>
        /// The value of the refractive index.
        /// </summary>
        [XmlElement("value")]
        public Double? Value { get; set; }
        /// <summary>
        /// The frequency (and uom) for which the refractive index is measured.
        /// </summary>
        [XmlElement("frequency")]
        public FrequencyMeasure Frequency { get; set; }
        /// <summary>
        /// The wavelength (and uom) for which the refractive index is measured. The reported wavelength should be the wavelength of the light in a vacuum.
        /// </summary>
        [XmlElement("wavelength")]
        public LengthMeasure Wavelength { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength. The wavelength varies with the refractive index, while the frequency remains constant. The wavelength given to specify this type is the wavelength in a vacuum (refractive index = 1).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_oneWayLoss", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength. The wavelength varies with the refractive index, while the frequency remains constant. The wavelength given to specify this type is the wavelength in a vacuum (refractive index = 1).")]
    public partial class OneWayLoss : Object 
    {

        /// <summary>
        /// The value of the one way loss per unit of length. The usual uom is decibels per kilometre (dB/km), although this might vary depending on the calibration method used.
        /// </summary>
        [XmlElement("value")]
        public GeneralMeasureType Value { get; set; }
        /// <summary>
        /// The frequency (and uom) for which the one-way loss is measured.
        /// </summary>
        [XmlElement("frequency")]
        public FrequencyMeasure Frequency { get; set; }
        /// <summary>
        /// The wavelength (and uom) for which the one-way loss is measured. The reported wavelength should be the wavelength of the light in a vacuum.
        /// </summary>
        [XmlElement("wavelength")]
        public LengthMeasure Wavelength { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the indexedObject xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="indexedObject", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the indexedObject xsd type.")]
    public partial class IndexedObject : Object 
    {
        public IndexedObject() {}
        public IndexedObject(String value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("index")]
        public Int16 Index { get; set; }
		
        [XmlAttribute("name")]
        public String Name { get; set; }
		
        [XmlAttribute("uom")]
        public String Uom { get; set; }
		
        [XmlAttribute("description")]
        public String Description { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Calibration parameters vary from vendor to vendor, depending on the calibration method being used. This is a general type that allows a calibration date, business associate, and many name/value pairs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_calibration", Namespace="http://www.witsml.org/schemas/131")]
    [Description("Calibration parameters vary from vendor to vendor, depending on the calibration method being used. This is a general type that allows a calibration date, business associate, and many name/value pairs.")]
    public partial class Calibration : Object 
    {

		/// <summary>
        /// The date of the calibration
        /// </summary>
        [XmlElement("")]
        public DateTime? DateTimeCAlibration {
            get {
                return dTimCalibrationField;
            } 
            set { 
                dTimCalibrationField = value;
                this.DateTimeCAlibrationSpecified = true;
            }
        }

        private DateTime? dTimCalibrationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCAlibrationSpecified { get; set; }
        /// <summary>
        /// The business associate that performed the calibration.
        /// </summary>
        [XmlElement("calibratedBy")]
        public String CalibratedBy { get; set; }
        /// <summary>
        /// This may be a standard protocol, or a software application.
        /// </summary>
        [XmlElement("calibrationProtocol")]
        public String CAlibrationProtocol { get; set; }
		/// <summary>
        /// Attribute name is the name of the parameter. Optional attribute uom is the unit of measure of the parameter. The value of the element is the value of the parameter. Note that a string value may appear as a parameter.
        /// </summary>
        [XmlElement("parameter")]
        public List<CalibrationParameter> PluggedAndAbandonedrameter { get; set; }
        /// <summary>
        /// Any remarks that may be useful, regarding the calibration information.
        /// </summary>
        [XmlElement("remarks")]
        public String Remarks { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Parameters are given by name/ value pairs, with optional uom. The parameter name and uom are attributes, and the value is the value of the element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_calibrationParameter", Namespace="http://www.witsml.org/schemas/131")]
    [Description("Parameters are given by name/ value pairs, with optional uom. The parameter name and uom are attributes, and the value is the value of the element.")]
    public partial class CalibrationParameter : Object 
    {
        public CalibrationParameter() {}
        public CalibrationParameter(String value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the parameter value.
        /// </summary>
        [XmlAttribute("uom")]
        public String Uom { get; set; }
		/// <summary>
        /// The name of the parameter.
        /// </summary>
        [XmlAttribute("name")]
        public String Name { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The instrument box used for distributed temperature surveys
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_boxInformation", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The instrument box used for distributed temperature surveys")]
    public partial class BoxInformation : Object 
    {

        /// <summary>
        /// The date the instrument box was installed.
        /// </summary>
        [XmlElement("installationDate")]
        public String InstallationDate { get; set; }
        /// <summary>
        /// The company that installed the instrument box in the wellbore measurement system.
        /// </summary>
        [XmlElement("installationCompany")]
        public String InstallationCompany { get; set; }
        /// <summary>
        /// The date the instrument box was de-installed from the wellbore.
        /// </summary>
        [XmlElement("deInstallationDate")]
        public String DeInstallationDate { get; set; }
        /// <summary>
        /// The properties of the instrument box.
        /// </summary>
        [XmlElement("instrumentBox")]
        public InstrumentBox InstrumentBox { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The instrument box used for distributed temperature surveys
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_instrumentBox", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The instrument box used for distributed temperature surveys")]
    public partial class InstrumentBox : Object 
    {

        /// <summary>
        /// A name for the instrument box. This can be used to access the instrument box.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The ultimate manufacturer of the instrument box.
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// The date the manufacturing of the instrument box was completed.
        /// </summary>
        [XmlElement("manufacturingDate")]
        public String ManufacturingDate { get; set; }
        /// <summary>
        /// The type of instrument box used.
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
		/// <summary>
        /// An identification tag for the instrument box. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
        /// <summary>
        /// The version of the software installed in the instrument box.
        /// </summary>
        [XmlElement("softwareVersion")]
        public String SoftwareVersion { get; set; }
		/// <summary>
        /// Information about the calibration of the instrument box that was performed. This includes factory calibrations before shipping, and bench calibrations. This does not include calibrations made in preparation for taking measurements.
        /// </summary>
        [XmlElement("factoryCalibration")]
        public List<InstrumentBoxCalibration> FactoryCAlibration { get; set; }
        /// <summary>
        /// Near distance of the oven from the beginning of the fiber.
        /// </summary>
        [XmlElement("internalOvenLocationNear")]
        public LengthMeasure InternalOvenLocationNear { get; set; }
        /// <summary>
        /// Far distance of the oven from the beginning of the fiber.
        /// </summary>
        [XmlElement("internalOvenLocationFar")]
        public LengthMeasure InternalOvenLocationFar { get; set; }
        /// <summary>
        /// The temperature of the oven.
        /// </summary>
        [XmlElement("ovenSetPoint")]
        public ThermodynamicTemperatureMeasure OvenSetPoint { get; set; }
        /// <summary>
        /// The cable used to test the instrument box.
        /// </summary>
        [XmlElement("testCable")]
        public String TestCAble { get; set; }
        /// <summary>
        /// The offset setting applied to the instrument box based on the factory or bench calibration.
        /// </summary>
        [XmlElement("offset")]
        public String Offset { get; set; }
        /// <summary>
        /// The power loss over the length of the cable.
        /// </summary>
        [XmlElement("differentialLossSetting")]
        public GeneralMeasureType DifferentialLossSetting { get; set; }
		/// <summary>
        /// Additional parameters to define the instrument box as a piece of equipment. These should not be parameters to define the installation or use of the box in the wellbore, or other system. This element should be used only if an appropriate parameter is not available as an element, or in the calibration operation.
        /// </summary>
        [XmlElement("parameter")]
        public List<IndexedObject> PluggedAndAbandonedrameter { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Equipment NameTag Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_nameTag", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Equipment NameTag Schema")]
    public partial class NameTag : Object 
    {

        /// <summary>
        /// The physical identification string of the equipment tag.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The format or encoding specification of the equipment tag. The tag may contain may different pieces of information and knowledge of that information is inherent in the specification. The "identification string" is a mandatory part of the information in a tag.
        /// </summary>
        [XmlElement("numberingScheme")]
        public NameTagNumberingScheme NumberingScheme { get; set; }
        /// <summary>
        /// Identifies the general type of identifier on an item. If multiple identifiers exist on an item, a separate description set for each identifier should be created. For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling. The barcode label may in turn be an RFID equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label' - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label' - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.
        /// </summary>
        [XmlElement("technology")]
        public NameTagTechnology Technology {
            get {
                return technologyField;
            } 
            set { 
                technologyField = value;
                this.TechnologySpecified = true;
            }
        }

        private NameTagTechnology technologyField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TechnologySpecified { get; set; }
        /// <summary>
        /// An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item. This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener. 'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item. Most non-downhole tools will use either 'body', 'other' or not specified as the location tends to lose value with smaller or non threaded items.
        /// </summary>
        [XmlElement("location")]
        public NameTagLocation Location {
            get {
                return locationField;
            } 
            set { 
                locationField = value;
                this.LocationSpecified = true;
            }
        }

        private NameTagLocation locationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LocationSpecified { get; set; }
        /// <summary>
        /// When the tag was installed in or on the item. 
        /// </summary>
        [XmlElement("installationDate")]
        public DateTime? InstallationDate {
            get {
                return installationDateField;
            } 
            set { 
                installationDateField = value;
                this.InstallationDateSpecified = true;
            }
        }

        private DateTime? installationDateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean InstallationDateSpecified { get; set; }
        /// <summary>
        /// The name of the company that installed the tag. 
        /// </summary>
        [XmlElement("installationCompany")]
        public String InstallationCompany { get; set; }
        /// <summary>
        /// Reference to a manufacturers or installers installation description, code, or method. 
        /// </summary>
        [XmlElement("mountingCode")]
        public String MountingCode { get; set; }
        /// <summary>
        /// A comment or remark about the tag.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Calibration parameters vary from vendor to vendor, depending on the calibration method being used. This is an extension of the general cs_calibration, and allows for specific parameters associated with an instrument box. The two additional parameters are the offset temperature calibration, and the slope calibration. These allow for a linear shift in temperature vs measurements. Additional offset and slope calibrations may be performed at measurement time.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_instrumentBoxCalibration", Namespace="http://www.witsml.org/schemas/131")]
    [Description("Calibration parameters vary from vendor to vendor, depending on the calibration method being used. This is an extension of the general cs_calibration, and allows for specific parameters associated with an instrument box. The two additional parameters are the offset temperature calibration, and the slope calibration. These allow for a linear shift in temperature vs measurements. Additional offset and slope calibrations may be performed at measurement time.")]
    public partial class InstrumentBoxCalibration : Object 
    {

		/// <summary>
        /// The date of the calibration
        /// </summary>
        [XmlElement("")]
        public DateTime? DateTimeCAlibration {
            get {
                return dTimCalibrationField;
            } 
            set { 
                dTimCalibrationField = value;
                this.DateTimeCAlibrationSpecified = true;
            }
        }

        private DateTime? dTimCalibrationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCAlibrationSpecified { get; set; }
        /// <summary>
        /// The business associate that performed the calibration.
        /// </summary>
        [XmlElement("calibratedBy")]
        public String CalibratedBy { get; set; }
        /// <summary>
        /// This may be a standard protocol, or a software application.
        /// </summary>
        [XmlElement("calibrationProtocol")]
        public String CAlibrationProtocol { get; set; }
		/// <summary>
        /// Attribute name is the name of the parameter. Optional attribute uom is the unit of measure of the parameter. The value of the element is the value of the parameter. Note that a string value may appear as a parameter.
        /// </summary>
        [XmlElement("parameter")]
        public List<CalibrationParameter> PluggedAndAbandonedrameter { get; set; }
        /// <summary>
        /// Any remarks that may be useful, regarding the calibration information.
        /// </summary>
        [XmlElement("remarks")]
        public String Remarks { get; set; }
        /// <summary>
        /// The temperature offset correction that is applied to the dts instrument box.
        /// </summary>
        [XmlElement("offsetTemperatureCalibration")]
        public ThermodynamicTemperatureMeasure OffsetTemperatureCAlibration { get; set; }
        /// <summary>
        /// The temperature slope correction that is applied to the dts instrument box.
        /// </summary>
        [XmlElement("slopeCalibration")]
        public TemperatureSlopeMeasure SlopeCAlibration { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A fiber installed in a "U" configuration has two end points that a cable may hook to. When making a measurement, it is useful to be able to say which end was hooked to the input from the instrument box. In order to do this, the fiber ends must be identified. The identifier is a name, along with a description to further aid the interpreter in determining which end was used as the input
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberEndPoint", Namespace="http://www.witsml.org/schemas/131")]
    [Description("A fiber installed in a U configuration has two end points that a cable may hook to. When making a measurement, it is useful to be able to say which end was hooked to the input from the instrument box. In order to do this, the fiber ends must be identified. The identifier is a name, along with a description to further aid the interpreter in determining which end was used as the input")]
    public partial class FiberEndPoint : Object 
    {

        /// <summary>
        /// A name, unique within the context of the well, for an instrument box cable to hook to.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Any description of the node that may be useful in identifying the hookup.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A set of points recorded during the installation process. The information can include the length along the fiber, the measured depth, and a type of point.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_singleInstalledPoint", Namespace="http://www.witsml.org/schemas/131")]
    [Description("A set of points recorded during the installation process. The information can include the length along the fiber, the measured depth, and a type of point.")]
    public partial class SingleInstalledPoint : Object 
    {

        /// <summary>
        /// The measured depth of the installed point of the fiber. This is optional, because the sender may want to record points that are outside the well.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// The length along the fiber, from the zero point, for this particular point.
        /// </summary>
        [XmlElement("lengthAlongFiber")]
        public LengthMeasure LengthAlongFiber { get; set; }
        /// <summary>
        /// The type of point that is being recorded.
        /// </summary>
        [XmlElement("type")]
        public InstalledFiberPoint? Type {
            get {
                return typeField;
            } 
            set { 
                typeField = value;
                this.TypeSpecified = true;
            }
        }

        private InstalledFiberPoint? typeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeSpecified { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The activity of pumping the fiber downhole.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pumpActivity", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The activity of pumping the fiber downhole.")]
    public partial class PumpActivity : Object 
    {

        /// <summary>
        /// A name which can be used to reference the pumping activity. In general, a pumping activity does not have a natural name, so that this element will not be often used.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The name of the InstalledFiberInstance that this activity relates to.
        /// </summary>
        [XmlElement("installedFiber")]
        public RefNameString InstalledFiber { get; set; }
        /// <summary>
        /// The date, or dateTime of the pumping activity.
        /// </summary>
        [XmlElement("pumpingDate")]
        public String PumpingDate { get; set; }
        /// <summary>
        /// The person in charge of the pumping activity.
        /// </summary>
        [XmlElement("engineerName")]
        public String EngineerName { get; set; }
        /// <summary>
        /// The company that performed the pumping activity.
        /// </summary>
        [XmlElement("serviceCompany")]
        public String ServiceCompany { get; set; }
        /// <summary>
        /// The type of fluid used in the pump.
        /// </summary>
        [XmlElement("pumpFluidType")]
        public String PumpFluidType { get; set; }
        /// <summary>
        /// The type of fluid used in the control line.
        /// </summary>
        [XmlElement("controlLineFluid")]
        public String ControlLineFluid { get; set; }
        /// <summary>
        /// The direction of the pumping.
        /// </summary>
        [XmlElement("pumpDirection")]
        public String PumpDirection { get; set; }
        /// <summary>
        /// The type of end seal on the fiber.
        /// </summary>
        [XmlElement("fiberEndSeal")]
        public String FiberEndSeal { get; set; }
        /// <summary>
        /// The type of cable meter.
        /// </summary>
        [XmlElement("cableMeterType")]
        public String CAbleMeterType { get; set; }
        /// <summary>
        /// The serial number of the cable meter.
        /// </summary>
        [XmlElement("cableMeterSerialNumber")]
        public String CAbleMeterSerialNumber { get; set; }
        /// <summary>
        /// The date the cable meter was calibrated.
        /// </summary>
        [XmlElement("cableMeterCalibrationDate")]
        public String CAbleMeterCAlibrationDate { get; set; }
        /// <summary>
        /// True or False. Was a drift run performed? This element should be used to indicate if a drift run was performed or not, where the instance of the drift run (OTDR) is not available. If the OTDR is available, use the OTDRPerformed element to specify the OTDR instance.
        /// </summary>
        [XmlElement("wasDriftRunPerformed")]
        public Boolean WasDriftRunPerformed {
            get {
                return wasDriftRunPerformedField;
            } 
            set { 
                if (OTDRPerformedFieldSpecified) throw new Exception("Cannot set property WasDriftRunPerformed when property OTDRPerformed is already set");
                wasDriftRunPerformedField = value;
                wasDriftRunPerformedFieldSpecified = true;
            }
        }

        private Boolean wasDriftRunPerformedField; 
        private bool wasDriftRunPerformedFieldSpecified = false; 

        /// <summary>
        /// A reference to the OTDR that was run. If an OTDR was run, but there is not instance of the OTDR to reference, choose the wasDriftRunPerformed element, and set it to True.
        /// </summary>
        [XmlElement("OTDRPerformed")]
        public RefNameString OTDRPerformed {
            get {
                return OTDRPerformedField;
            } 
            set { 
                if (wasDriftRunPerformedFieldSpecified) throw new Exception("Cannot set property OTDRPerformed when property WasDriftRunPerformed is already set");
                OTDRPerformedField = value;
                OTDRPerformedFieldSpecified = true;
            }
        }

        private RefNameString OTDRPerformedField; 
        private bool OTDRPerformedFieldSpecified = false; 


        /// <summary>
        /// The length of the excess fiber that was removed.
        /// </summary>
        [XmlElement("excessFiberRecovered")]
        public LengthMeasure ExcessFiberRecovered { get; set; }
        /// <summary>
        /// Information about the pumping activity, that is captured in the pump log.
        /// </summary>
        [XmlElement("pumpLog")]
        public List<PumpLogRow> PumpLog { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The pump log row are elements defined in the sequence below.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pumpLogRow", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The pump log row are elements defined in the sequence below.")]
    public partial class PumpLogRow : Object 
    {

        /// <summary>
        /// The speed of the cable.
        /// </summary>
        [XmlElement("cableSpeed")]
        public VelocityMeasure CAbleSpeed { get; set; }
        /// <summary>
        /// The length of fiber pumped into the wellbore.
        /// </summary>
        [XmlElement("fiberPumpedLength")]
        public LengthMeasure FiberPumpedLength { get; set; }
        /// <summary>
        /// The operating pressure of the pump.
        /// </summary>
        [XmlElement("pumpPressure")]
        public PressureMeasure PumpPressure { get; set; }
        /// <summary>
        /// The fluid used in the pumping operation.
        /// </summary>
        [XmlElement("pumpFluid")]
        public String PumpFluid { get; set; }
        /// <summary>
        /// The temperature going into the wellbore.
        /// </summary>
        [XmlElement("temperatureIn")]
        public ThermodynamicTemperatureMeasure TemperatureIn { get; set; }
        /// <summary>
        /// The temperature at the end of the operation
        /// </summary>
        [XmlElement("temperatureOut")]
        public ThermodynamicTemperatureMeasure TemperatureOut { get; set; }
        /// <summary>
        /// Any general remarks about the pumping operation.
        /// </summary>
        [XmlElement("remarks")]
        public String Remarks { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This records the result arrays, along with context information, from an Optical Time Domain Reflectometry (OTDR) run. The arrays will define the relative scattered power from the Rayleigh scattering vs distance along the fiber. The actual data values are recorded in a wellLog object, which is referenced in a subelement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_otdr", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This records the result arrays, along with context information, from an Optical Time Domain Reflectometry (OTDR) run. The arrays will define the relative scattered power from the Rayleigh scattering vs distance along the fiber. The actual data values are recorded in a wellLog object, which is referenced in a subelement.")]
    public partial class Otdr : Object 
    {

        /// <summary>
        /// The reason the OTDR test was run. The three main reasons are 'pre-installation', which is before the installation of the fiber; 'post-installation', which is used to validate a successful fiber installation; and 'DTS run', which is a quality check of the fiber prior to a DTS run. A fourth permitted value is 'other'.
        /// </summary>
        [XmlElement("reasonForRun")]
        public OTDRReason? ReasonForRun { get; set; }
        /// <summary>
        /// The dateTime of the run.
        /// </summary>
        [XmlElement("dTimRun")]
        public DateTime? DateTimeRun {
            get {
                return dTimRunField;
            } 
            set { 
                dTimRunField = value;
                this.DateTimeRunSpecified = true;
            }
        }

        private DateTime? dTimRunField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRunSpecified { get; set; }
        /// <summary>
        /// A reference to the well log used to record the table of data.
        /// </summary>
        [XmlElement("dataInWellLog")]
        public RefNameString DataInWellLog { get; set; }
        /// <summary>
        /// A pointer to the fiber connection node. If more than one node is available for a well/wellbore, this element is used to specify which node is connected to the instrument box. This name should correspond to the fiberEndPoint/name that is recorded in the installed system object.
        /// </summary>
        [XmlElement("fiberEndConncected")]
        public RefNameString FiberEndConncected { get; set; }
        /// <summary>
        /// A general comment about the OTDR run.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_dtsMeasurements xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("dtsMeasurements", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_dtsMeasurements xsd type.")]
    public partial class DtsMeasurementList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// Main wrapper for all the distributed temperature survey information about the measurement. Note that this object must be accompanied by a wellLog object in order to be complete.
        /// </summary>
        [XmlElement("dtsMeasurement")]
        public List<DtsMeasurement> DtsMeasurement { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return DtsMeasurement;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The information content of a DTS temperature run is captured in the following elements, and in the referenced dtsInstalledFiber (for context) and the reference well log (captures the table of data).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_dtsMeasurement", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The information content of a DTS temperature run is captured in the following elements, and in the referenced dtsInstalledFiber (for context) and the reference well log (captures the table of data).")]
    public partial class DtsMeasurement : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the dts. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the dts.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The length of time that the instrument box was operating while collecting DTS data.
        /// </summary>
        [XmlElement("runDuration")]
        public TimeMeasure RunDuration { get; set; }
        /// <summary>
        /// A reference to the installed system that was used to make the measurements.
        /// </summary>
        [XmlElement("installedSystemUsed")]
        public RefNameString InstalledSystemUsed { get; set; }
        /// <summary>
        /// A reference to the well log used to record the table of data.
        /// </summary>
        [XmlElement("dataInWellLog")]
        public RefNameString DataInWellLog { get; set; }
        /// <summary>
        /// A reference to the fiber used to record the table of data. This is necessary only in the cases in which a dtsInstalledSystem has a multi-fiber installation. If there is only a single installed fiber, this element is unnecessary.
        /// </summary>
        [XmlElement("connectedToFiber")]
        public RefNameString ConnectedToFiber { get; set; }
        /// <summary>
        /// A pointer to the fiber connection node. If more than one node is available for a well/wellbore, this element is used to specify which node is connected to the instrument box. This name should correspond to the fiberEndPoint/name that is recorded in the installed system object.
        /// </summary>
        [XmlElement("fiberEndConnected")]
        public RefNameString FiberEndConnected { get; set; }
        /// <summary>
        /// A known point of the fiber. This point should correspond to one that is given in the wellboreFiberSchematic, so that the relationship between the length of fiber values in the wellboreFiberSchematic can be related to the values in the measurement table.
        /// </summary>
        [XmlElement("fiberDefinedPoint")]
        public SingleInstalledPoint FiberDefinedPoint { get; set; }
		/// <summary>
        /// An error that occurred during the measurement.
        /// </summary>
        [XmlElement("errorReport")]
        public List<ErrorReport> ErrorReport { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A simple structure that allows an error report to be exchanged. The strucutre will allow for an error name, error id (generally a numerical code), and a description.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_errorReport", Namespace="http://www.witsml.org/schemas/131")]
    [Description("A simple structure that allows an error report to be exchanged. The strucutre will allow for an error name, error id (generally a numerical code), and a description.")]
    public partial class ErrorReport : Object 
    {

        /// <summary>
        /// A name of the error.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A code, or other id, for the error.
        /// </summary>
        [XmlElement("id")]
        public String Id { get; set; }
        /// <summary>
        /// A description of the error.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_fluidsReports xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("fluidsReports", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_fluidsReports xsd type.")]
    public partial class FluidsReportList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single fluids report. 
        /// </summary>
        [XmlElement("fluidsReport")]
        public List<FluidsReport> FluidsReport { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FluidsReport;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Fluids Report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_fluidsReport", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Fluids Report.")]
    public partial class FluidsReport : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the fluids report. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the fluids report. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// Fluids report number. 
        /// </summary>
        [XmlElement("numReport")]
        public Int16? NumReport {
            get {
                return numReportField;
            } 
            set { 
                numReportField = value;
                this.NumReportSpecified = true;
            }
        }

        private Int16? numReportField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumReportSpecified { get; set; }
		/// <summary>
        /// A Fluid record. 
        /// </summary>
        [XmlElement("fluid")]
        public List<Fluid> Fluid { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - fluids component schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluid", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - fluids component schema ")]
    public partial class Fluid : Object 
    {

        /// <summary>
        /// Description for the type of object. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// Sample location. 
        /// </summary>
        [XmlElement("locationSample")]
        public String LocationSample { get; set; }
        /// <summary>
        /// The time when fluid readings were recorded. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// The measured depth when fluid readings were recorded. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Fluid density. 
        /// </summary>
        [XmlElement("density")]
        public DensityMeasure Density { get; set; }
        /// <summary>
        /// Funnel viscosity in seconds. 
        /// </summary>
        [XmlElement("visFunnel")]
        public TimeMeasure VisFunnel { get; set; }
        /// <summary>
        /// Funnel viscosity temperature. 
        /// </summary>
        [XmlElement("tempVis")]
        public ThermodynamicTemperatureMeasure TempVis { get; set; }
        /// <summary>
        /// Plastic viscosity. 
        /// </summary>
        [XmlElement("pv")]
        public DynamicViscosityMeasure PV { get; set; }
        /// <summary>
        /// Yield point (Bingham and Herschel Bulkley models). 
        /// </summary>
        [XmlElement("yp")]
        public PressureMeasure YP { get; set; }
        /// <summary>
        /// 10 second gels. 
        /// </summary>
        [XmlElement("gel10Sec")]
        public PressureMeasure Gel10Sec { get; set; }
        /// <summary>
        /// 10 minute gels. 
        /// </summary>
        [XmlElement("gel10Min")]
        public PressureMeasure Gel10Min { get; set; }
        /// <summary>
        /// 30 minute gels. 
        /// </summary>
        [XmlElement("gel30Min")]
        public PressureMeasure Gel30Min { get; set; }
        /// <summary>
        /// Filter cake thickness at low (normal) temperature and pressure. 
        /// </summary>
        [XmlElement("filterCakeLtlp")]
        public LengthMeasure FilterCAkeLtlp { get; set; }
        /// <summary>
        /// API water loss (low temperature and pressure mud filtrate measurement) (ml/30min) 
        /// </summary>
        [XmlElement("filtrateLtlp")]
        public VolumeMeasure FiltrateLtlp { get; set; }
        /// <summary>
        /// High temperature high pressure (HTHP) temperature. 
        /// </summary>
        [XmlElement("tempHthp")]
        public ThermodynamicTemperatureMeasure TempHeighthp { get; set; }
        /// <summary>
        /// High temperature high pressure (HTHP) pressure. 
        /// </summary>
        [XmlElement("presHthp")]
        public PressureMeasure PresHeighthp { get; set; }
        /// <summary>
        /// High temperature high pressure (HTHP) filtrate (volume per 30min). 
        /// </summary>
        [XmlElement("filtrateHthp")]
        public VolumeMeasure FiltrateHeighthp { get; set; }
        /// <summary>
        /// High temperature high pressure (HTHP) Filter cake thickness. 
        /// </summary>
        [XmlElement("filterCakeHthp")]
        public LengthMeasure FilterCAkeHeighthp { get; set; }
        /// <summary>
        /// Solids percentage from retort (commonly in percent). 
        /// </summary>
        [XmlElement("solidsPc")]
        public VolumePerVolumeMeasure SolidsPercent { get; set; }
        /// <summary>
        /// Water content (commonly in percent). 
        /// </summary>
        [XmlElement("waterPc")]
        public VolumePerVolumeMeasure WaterPercent { get; set; }
        /// <summary>
        /// Oil content from retort (commonly in percent). 
        /// </summary>
        [XmlElement("oilPc")]
        public VolumePerVolumeMeasure OilPercent { get; set; }
        /// <summary>
        /// Sand content (commonly in percent). 
        /// </summary>
        [XmlElement("sandPc")]
        public VolumePerVolumeMeasure SandPercent { get; set; }
        /// <summary>
        /// Low gravity solids (%). 
        /// </summary>
        [XmlElement("solidsLowGravPc")]
        public VolumePerVolumeMeasure SolidsLowGravPercent { get; set; }
        /// <summary>
        /// Solids content (calculated) (commonly in percent). 
        /// </summary>
        [XmlElement("solidsCalcPc")]
        public VolumePerVolumeMeasure SolidsCAlcPercent { get; set; }
        /// <summary>
        /// Barite content (commonly in percent). 
        /// </summary>
        [XmlElement("baritePc")]
        public VolumePerVolumeMeasure BaritePercent { get; set; }
        /// <summary>
        /// Lost circulation material. 
        /// </summary>
        [XmlElement("lcm")]
        public DensityMeasure Lcm { get; set; }
        /// <summary>
        /// Cation exchange capacity (CEC) of the mud sample as measured by methylene blue titration (MBT). 
        /// </summary>
        [XmlElement("mbt")]
        public EquivalentPerMassMeasure Mbt { get; set; }
        /// <summary>
        /// Mud pH. 
        /// </summary>
        [XmlElement("ph")]
        public Double? PH {
            get {
                return phField;
            } 
            set { 
                phField = value;
                this.PHSpecified = true;
            }
        }

        private Double? phField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PHSpecified { get; set; }
        /// <summary>
        /// Mud pH measurement temperature. 
        /// </summary>
        [XmlElement("tempPh")]
        public ThermodynamicTemperatureMeasure TempPH { get; set; }
        /// <summary>
        /// Phenolphthalein alkalinity of whole mud. 
        /// </summary>
        [XmlElement("pm")]
        public VolumeMeasure Pm { get; set; }
        /// <summary>
        /// Phenolphthalein alkalinity of mud filtrate. 
        /// </summary>
        [XmlElement("pmFiltrate")]
        public VolumeMeasure PmFiltrate { get; set; }
        /// <summary>
        /// Methyl orange alkalinity of filtrate. 
        /// </summary>
        [XmlElement("mf")]
        public VolumeMeasure Mf { get; set; }
        /// <summary>
        /// Mud alkalinity P1 from alternate alkalinity method (volume in ml of 0.02N acid to reach the phenolphthalein endpoint). 
        /// </summary>
        [XmlElement("alkalinityP1")]
        public VolumeMeasure AlkalinityP1 { get; set; }
        /// <summary>
        /// Mud alkalinity P2 from alternate alkalinity method (volume in ml of 0.02N acid to titrate the reagent mixture to the phenolphthalein endpoint). 
        /// </summary>
        [XmlElement("alkalinityP2")]
        public VolumeMeasure AlkalinityP2 { get; set; }
        /// <summary>
        /// Chloride content. 
        /// </summary>
        [XmlElement("chloride")]
        public DensityMeasure Chloride { get; set; }
        /// <summary>
        /// Calcium content. 
        /// </summary>
        [XmlElement("calcium")]
        public DensityMeasure CAlcium { get; set; }
        /// <summary>
        /// Magnesium content. 
        /// </summary>
        [XmlElement("magnesium")]
        public DensityMeasure Magnesium { get; set; }
        /// <summary>
        /// Potassium content. 
        /// </summary>
        [XmlElement("potassium")]
        public DensityMeasure Potassium { get; set; }
		/// <summary>
        /// One or more sets of rheometer readings at given temperature and pressure. 
        /// </summary>
        [XmlElement("rheometer")]
        public List<Rheometer> Rheometer { get; set; }
        /// <summary>
        /// Brine content (commonly in percent). 
        /// </summary>
        [XmlElement("brinePc")]
        public VolumePerVolumeMeasure BrinePercent { get; set; }
        /// <summary>
        /// Lime content. 
        /// </summary>
        [XmlElement("lime")]
        public DensityMeasure Lime { get; set; }
        /// <summary>
        /// Measurement of the emulsion stability and oil-wetting capability in oil-based muds. 
        /// </summary>
        [XmlElement("electStab")]
        public ElectricPotentialMeasure ElectStab { get; set; }
        /// <summary>
        /// Calcium chloride content. 
        /// </summary>
        [XmlElement("calciumChloride")]
        public DensityMeasure CAlciumChloride { get; set; }
        /// <summary>
        /// Name of company. 
        /// </summary>
        [XmlElement("company")]
        public String Company { get; set; }
        /// <summary>
        /// Engineer name 
        /// </summary>
        [XmlElement("engineer")]
        public String Engineer { get; set; }
        /// <summary>
        /// Average specific gravity of solids. 
        /// </summary>
        [XmlElement("asg")]
        public Double? Asg {
            get {
                return asgField;
            } 
            set { 
                asgField = value;
                this.AsgSpecified = true;
            }
        }

        private Double? asgField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AsgSpecified { get; set; }
        /// <summary>
        /// Solids high gravity (commonly in percent). 
        /// </summary>
        [XmlElement("solidsHiGravPc")]
        public VolumePerVolumeMeasure SolidsHiGravPercent { get; set; }
        /// <summary>
        /// Polymers present in mud system. 
        /// </summary>
        [XmlElement("polymer")]
        public VolumePerVolumeMeasure Polymer { get; set; }
        /// <summary>
        /// Type of polymers present in mud system. 
        /// </summary>
        [XmlElement("polyType")]
        public String PolyType { get; set; }
        /// <summary>
        /// Solids corrected for Chloride content (commonly in percent). 
        /// </summary>
        [XmlElement("solCorPc")]
        public VolumePerVolumeMeasure SolCorPercent { get; set; }
        /// <summary>
        /// Oil on Cuttings. 
        /// </summary>
        [XmlElement("oilCtg")]
        public MassConcentrationMeasure OilCTg { get; set; }
        /// <summary>
        /// Total calcium hardness. 
        /// </summary>
        [XmlElement("hardnessCa")]
        public MassConcentrationMeasure HardnessCA { get; set; }
        /// <summary>
        /// Sulfide content. 
        /// </summary>
        [XmlElement("sulfide")]
        public DensityMeasure Sulfide { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rheometer Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rheometer", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Rheometer Component Schema ")]
    public partial class Rheometer : Object 
    {

        /// <summary>
        /// Rheometer temperature. 
        /// </summary>
        [XmlElement("tempRheom")]
        public ThermodynamicTemperatureMeasure TempRheom { get; set; }
        /// <summary>
        /// Rheometer pressure. 
        /// </summary>
        [XmlElement("presRheom")]
        public PressureMeasure PresRheom { get; set; }
        /// <summary>
        /// 3 RPM viscometer reading 
        /// </summary>
        [XmlElement("vis3Rpm")]
        public Double? Vis3Rpm {
            get {
                return vis3RpmField;
            } 
            set { 
                vis3RpmField = value;
                this.Vis3RpmSpecified = true;
            }
        }

        private Double? vis3RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis3RpmSpecified { get; set; }
        /// <summary>
        /// 6 RPM viscometer reading. 
        /// </summary>
        [XmlElement("vis6Rpm")]
        public Double? Vis6Rpm {
            get {
                return vis6RpmField;
            } 
            set { 
                vis6RpmField = value;
                this.Vis6RpmSpecified = true;
            }
        }

        private Double? vis6RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis6RpmSpecified { get; set; }
        /// <summary>
        /// 100 RPM viscometer reading. 
        /// </summary>
        [XmlElement("vis100Rpm")]
        public Double? Vis100Rpm {
            get {
                return vis100RpmField;
            } 
            set { 
                vis100RpmField = value;
                this.Vis100RpmSpecified = true;
            }
        }

        private Double? vis100RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis100RpmSpecified { get; set; }
        /// <summary>
        /// 200 RPM viscometer reading. 
        /// </summary>
        [XmlElement("vis200Rpm")]
        public Double? Vis200Rpm {
            get {
                return vis200RpmField;
            } 
            set { 
                vis200RpmField = value;
                this.Vis200RpmSpecified = true;
            }
        }

        private Double? vis200RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis200RpmSpecified { get; set; }
        /// <summary>
        /// 300 RPM viscometer reading. 
        /// </summary>
        [XmlElement("vis300Rpm")]
        public Double? Vis300Rpm {
            get {
                return vis300RpmField;
            } 
            set { 
                vis300RpmField = value;
                this.Vis300RpmSpecified = true;
            }
        }

        private Double? vis300RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis300RpmSpecified { get; set; }
        /// <summary>
        /// 600 RPM viscometer reading. 
        /// </summary>
        [XmlElement("vis600Rpm")]
        public Double? Vis600Rpm {
            get {
                return vis600RpmField;
            } 
            set { 
                vis600RpmField = value;
                this.Vis600RpmSpecified = true;
            }
        }

        private Double? vis600RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis600RpmSpecified { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_formationMarkers xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("formationMarkers", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_formationMarkers xsd type.")]
    public partial class FormationMarkerList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single formation marker. 
        /// </summary>
        [XmlElement("formationMarker")]
        public List<FormationMarker> FormationMarker { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FormationMarker;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Formation Marker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_formationMarker", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Formation Marker.")]
    public partial class FormationMarker : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the formation marker. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the formation marker. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Prognosed measured depth. 
        /// </summary>
        [XmlElement("mdPrognosed")]
        public MeasuredDepthCoord MDPrognosed { get; set; }
        /// <summary>
        /// Prognosed true vertical depth. 
        /// </summary>
        [XmlElement("tvdPrognosed")]
        public WellVerticalDepthCoord TvdPrognosed { get; set; }
        /// <summary>
        /// Sampled measured depth at top of marker. 
        /// </summary>
        [XmlElement("mdTopSample")]
        public MeasuredDepthCoord MDTopSample { get; set; }
        /// <summary>
        /// Sampled true vertical depth at top of marker. 
        /// </summary>
        [XmlElement("tvdTopSample")]
        public WellVerticalDepthCoord TvdTopSample { get; set; }
        /// <summary>
        /// Bed Thickness. 
        /// </summary>
        [XmlElement("thicknessBed")]
        public LengthMeasure ThicknessBed { get; set; }
        /// <summary>
        /// Formation exposed along the wellbore. 
        /// </summary>
        [XmlElement("thicknessApparent")]
        public LengthMeasure ThicknessApparent { get; set; }
        /// <summary>
        /// Perpendicular thickness. 
        /// </summary>
        [XmlElement("thicknessPerpen")]
        public LengthMeasure ThicknessPerpen { get; set; }
        /// <summary>
        /// Logged measured depth at top of marker. 
        /// </summary>
        [XmlElement("mdLogSample")]
        public MeasuredDepthCoord MDLogSample { get; set; }
        /// <summary>
        /// Logged true vertical depth at top of marker. 
        /// </summary>
        [XmlElement("tvdLogSample")]
        public WellVerticalDepthCoord TvdLogSample { get; set; }
        /// <summary>
        /// Angle of dip with respect to horizontal. 
        /// </summary>
        [XmlElement("dip")]
        public PlaneAngleMeasure Dip { get; set; }
        /// <summary>
        /// Interpreted downdip direction. 
        /// </summary>
        [XmlElement("dipDirection")]
        public PlaneAngleMeasure DipDirection { get; set; }
        /// <summary>
        /// Chronostratigraphic classification. 
        /// </summary>
        [XmlElement("chronostratigraphic")]
        public String Chronostratigraphic { get; set; }
        /// <summary>
        /// Formation name. 
        /// </summary>
        [XmlElement("nameFormation")]
        public String NameFormation { get; set; }
        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    /// <summary>
    /// This class represents the obj_logs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("logs", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_logs xsd type.")]
    public partial class LogList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single log. 
        /// </summary>
        [XmlElement("log")]
        public List<Log> Log { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Log;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Log.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_log", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Log.")]
    public partial class Log : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the log. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the log. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Whether or not the log is growing. True ("true" or "1") indicates the that the log is still growing in size (that is, logData values are still being added). For example, it may be connected to a realtime stream. False ("false" or "0") indicates that the log is closed (that is, no further logData values will be added). Not given indicates that the status of the log is not known. This value is only relevant within the context of a server.
        /// </summary>
        [XmlElement("objectGrowing")]
        public Boolean? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set { 
                objectGrowingField = value;
                this.ObjectGrowingSpecified = true;
            }
        }

        private Boolean? objectGrowingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ObjectGrowingSpecified { get; set; }
        /// <summary>
        /// The number of data rows in the persistent log. If a value is specified for this element in a query then the server will limit the number of data rows in the result but the return value will still be the number of data rows in the persistent log.
        /// </summary>
        [XmlElement("dataRowCount")]
        public Int32? DataRowCount {
            get {
                return dataRowCountField;
            } 
            set { 
                dataRowCountField = value;
                this.DataRowCountSpecified = true;
            }
        }

        private Int32? dataRowCountField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DataRowCountSpecified { get; set; }
        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
        [XmlElement("serviceCompany")]
        public String ServiceCompany { get; set; }
        /// <summary>
        /// Log run number. This should normally be a number; however some legacy systems encode other information in this value.
        /// </summary>
        [XmlElement("runNumber")]
        public String RunNumber { get; set; }
        /// <summary>
        /// The bottom hole assembly run number associated with this log.
        /// </summary>
        [XmlElement("bhaRunNumber")]
        public Int16? BhaRunNumber {
            get {
                return bhaRunNumberField;
            } 
            set { 
                bhaRunNumberField = value;
                this.BhaRunNumberSpecified = true;
            }
        }

        private Int16? bhaRunNumberField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BhaRunNumberSpecified { get; set; }
        /// <summary>
        /// Identifies the pass within the run.
        /// </summary>
        [XmlElement("pass")]
        public String PluggedAndAbandonedss { get; set; }
        /// <summary>
        /// Date and time that the log was created. 
        /// </summary>
        [XmlElement("creationDate")]
        public DateTime? CreationDate {
            get {
                return creationDateField;
            } 
            set { 
                creationDateField = value;
                this.CreationDateSpecified = true;
            }
        }

        private DateTime? creationDateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CreationDateSpecified { get; set; }
        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Primary index type. 
        /// </summary>
        [XmlElement("indexType")]
        public LogIndexType? IndexType { get; set; }
        /// <summary>
        /// When the log header defines the direction as "Increasing", the startIndex is the starting (minimum) index value at which the first valid data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first valid data point is located.
        /// </summary>
        [XmlElement("startIndex")]
        public GenericMeasure StartIndex { get; set; }
        /// <summary>
        /// When the log header defines the direction as "Increasing", the endIndex is the ending (maximum) index value at which the last valid data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last valid data point is located.
        /// </summary>
        [XmlElement("endIndex")]
        public GenericMeasure EndIndex { get; set; }
        /// <summary>
        /// The sampling increment. Set to zero for unequal sampling. This would only apply if the curve was sorted on its own values. For curves that are originally sampled at a constant increment, this value should be retained because the calculated values may have cumulative errors.
        /// </summary>
        [XmlElement("stepIncrement")]
        public RatioGenericMeasure StepIncrement { get; set; }
        /// <summary>
        /// When the log header defines the direction as "Increasing", the startIndex is the starting (minimum) index value at which the first valid data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first valid data point is located. 
        /// </summary>
        [XmlElement("startDateTimeIndex")]
        public DateTime? StartDateTimeIndex {
            get {
                return startDateTimeIndexField;
            } 
            set { 
                startDateTimeIndexField = value;
                this.StartDateTimeIndexSpecified = true;
            }
        }

        private DateTime? startDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StartDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// When the log header defines the direction as "Increasing", the endIndex is the ending (maximum) index value at which the last valid data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last valid data point is located. 
        /// </summary>
        [XmlElement("endDateTimeIndex")]
        public DateTime? EndDateTimeIndex {
            get {
                return endDateTimeIndexField;
            } 
            set { 
                endDateTimeIndexField = value;
                this.EndDateTimeIndexSpecified = true;
            }
        }

        private DateTime? endDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EndDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// The sort order of the data row index values in the XML instance. For an "Increasing" direction the index value of consecutive data nodes are ascending. For a "Decreasing" direction the index value of consecutive data nodes are descending. The default direction is "Increasing". The direction of a log cannot be changed once it has been created. That is, this value cannot be updated in a server.
        /// </summary>
        [XmlElement("direction")]
        public LogIndexDirection? Direction {
            get {
                return directionField;
            } 
            set { 
                directionField = value;
                this.DirectionSpecified = true;
            }
        }

        private LogIndexDirection? directionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DirectionSpecified { get; set; }
        /// <summary>
        /// The mnemonic of the index curve plus the column index. A column index of zero indicates an implied trace whose values start at startIndex and increment by stepIncrement for each row.
        /// </summary>
        [XmlElement("indexCurve")]
        public IndexCurve IndexCurve { get; set; }
        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e. when the null value representation is not explicitly defined). If a null value representation is defined for a log, this becomes the default for all curves in that log (but can be overridden at the curve level). An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
        [XmlElement("nullValue")]
        public String NullValue { get; set; }
		/// <summary>
        /// Log parameters. 
        /// </summary>
        [XmlElement("logParam")]
        public List<IndexedObject> LogPluggedAndAbandonedram { get; set; }
		/// <summary>
        /// Container element for the log curve information. 
        /// </summary>
        [XmlElement("logCurveInfo")]
        public List<LogCurveInfo> LogCurveInfo { get; set; }
        /// <summary>
        /// Container for one or more "rows" of log data. 
        /// </summary>
        [XmlElement("logData")]
        public List<String> LogData { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the indexCurve xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="indexCurve", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the indexCurve xsd type.")]
    public partial class IndexCurve : Object 
    {
        public IndexCurve() {}
        public IndexCurve(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The column index of the curve.
        /// </summary>
        [XmlAttribute("columnIndex")]
        public Int16 ColumnIndex { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Log - Curve Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_logCurveInfo", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML Log - Curve Information")]
    public partial class LogCurveInfo : Object 
    {

        /// <summary>
        /// The curve name. This must be unique for all curves in a log.
        /// </summary>
        [XmlElement("mnemonic")]
        public String Minemonic { get; set; }
        /// <summary>
        /// The curve classification obtained from a lookup in the vendors mnemonic catalog. 
        /// </summary>
        [XmlElement("classWitsml")]
        public RealtimeData ClassWitsml {
            get {
                return classWitsmlField;
            } 
            set { 
                classWitsmlField = value;
                this.ClassWitsmlSpecified = true;
            }
        }

        private RealtimeData classWitsmlField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ClassWitsmlSpecified { get; set; }
        /// <summary>
        /// Unit of measurement of the data values. 
        /// </summary>
        [XmlElement("unit")]
        public String Unit { get; set; }
        /// <summary>
        /// Name alias for this trace. 
        /// </summary>
        [XmlElement("mnemAlias")]
        public String MinemAlias { get; set; }
        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e. when the null value representation is not explicitly defined). If a null value is defined in the logCurveInfo, it overrides any null value specified at the logHeader level. An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
        [XmlElement("nullValue")]
        public String NullValue { get; set; }
        /// <summary>
        /// True (true or 1) if this curve is a candidate to be a primary index. False (false or 0) or not given, indicates otherwise. An index curve should monotonically change when sorted on its own values (i.e., no duplicates). 
        /// </summary>
        [XmlElement("alternateIndex")]
        public Boolean? AlternateIndex {
            get {
                return alternateIndexField;
            } 
            set { 
                alternateIndexField = value;
                this.AlternateIndexSpecified = true;
            }
        }

        private Boolean? alternateIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AlternateIndexSpecified { get; set; }
        /// <summary>
        /// A pointer to the wellDatum that represents the values of this trace. This is only relevant for measured depths, vertical depths or elevations.
        /// </summary>
        [XmlElement("wellDatum")]
        public RefNameString WellDatum { get; set; }
        /// <summary>
        /// The minimum index value at which the first valid data point is located. This value will be properly set by the server to reflect data in the returned document.
        /// </summary>
        [XmlElement("minIndex")]
        public GenericMeasure MinIndex { get; set; }
        /// <summary>
        /// The maximum index value at which the last valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
        [XmlElement("maxIndex")]
        public GenericMeasure MaxIndex { get; set; }
        /// <summary>
        /// The minimum index value at which the first valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
        [XmlElement("minDateTimeIndex")]
        public DateTime? MinDateTimeIndex {
            get {
                return minDateTimeIndexField;
            } 
            set { 
                minDateTimeIndexField = value;
                this.MinDateTimeIndexSpecified = true;
            }
        }

        private DateTime? minDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MinDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// The maximum index value at which the last valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
        [XmlElement("maxDateTimeIndex")]
        public DateTime? MaxDateTimeIndex {
            get {
                return maxDateTimeIndexField;
            } 
            set { 
                maxDateTimeIndexField = value;
                this.MaxDateTimeIndexSpecified = true;
            }
        }

        private DateTime? maxDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MaxDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// A 1-based index of data in the LOGDATA.DATA section. A value of zero indicates an implied curve with no values in the data record.
        /// </summary>
        [XmlElement("columnIndex")]
        public Int16? ColumnIndex { get; set; }
        /// <summary>
        /// Description of the curve. 
        /// </summary>
        [XmlElement("curveDescription")]
        public String CurveDescription { get; set; }
        /// <summary>
        /// Offset of sensor from drill bit. This element is only informative. The measured depth values are at the actual depth (not bit depth from which you must subtract the offset).
        /// </summary>
        [XmlElement("sensorOffset")]
        public LengthMeasure SensorOffset { get; set; }
        /// <summary>
        /// Data source, could be tool name/id. 
        /// </summary>
        [XmlElement("dataSource")]
        public String DataSource { get; set; }
        /// <summary>
        /// Data density of sample in samples per length unit. 
        /// </summary>
        [XmlElement("densData")]
        public PerLengthMeasure DensData { get; set; }
        /// <summary>
        /// State of trace data. 
        /// </summary>
        [XmlElement("traceState")]
        public LogTraceState? TraceState {
            get {
                return traceStateField;
            } 
            set { 
                traceStateField = value;
                this.TraceStateSpecified = true;
            }
        }

        private LogTraceState? traceStateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TraceStateSpecified { get; set; }
        /// <summary>
        /// Origin of trace data. 
        /// </summary>
        [XmlElement("traceOrigin")]
        public LogTraceOrigin? TraceOrigin {
            get {
                return traceOriginField;
            } 
            set { 
                traceOriginField = value;
                this.TraceOriginSpecified = true;
            }
        }

        private LogTraceOrigin? traceOriginField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TraceOriginSpecified { get; set; }
        /// <summary>
        /// Log data type. 
        /// </summary>
        [XmlElement("typeLogData")]
        public LogDataType? TypeLogData {
            get {
                return typeLogDataField;
            } 
            set { 
                typeLogDataField = value;
                this.TypeLogDataSpecified = true;
            }
        }

        private LogDataType? typeLogDataField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeLogDataSpecified { get; set; }
		/// <summary>
        /// Indicates that the curve is an array curve (i.e., multi-valued samples), and provides meta data by which an axis of the array can be understood.
        /// </summary>
        [XmlElement("axisDefinition")]
        public List<AxisDefinition> AxisDefinition { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Metadata by which the array structure of a compound value is defined. This defines one axis of an array. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_axisDefinition", Namespace="http://www.witsml.org/schemas/131")]
    [Description("Metadata by which the array structure of a compound value is defined. This defines one axis of an array. ")]
    public partial class AxisDefinition : Object 
    {

        /// <summary>
        /// The order of this axis. The order should begin with one and increment by one for each additional axis. The order indicates how fast the index of the axis varies in the serialized list of values. The index of an axis with an order of one varies the slowest. The index of an axis with an order of two varies the next slowest. And so on. This is the same ordering that is used in the C programming language. For example, the following array: [ x axis ] | z11 z12 z13 y axis: z21 z22 z23 | z31 z32 z33 | z41 z42 z43 may be encoded as follows: axisDefinition[order=1].name='x' axisDefinition[order=1].count='3' axisDefinition[order=2].name='y' axisDefinition[order=2].count='4' { z11 z21 z31 z41 z12 z22 z32 z42 z13 z23 z33 z43 } or alternatively: axisDefinition[order=1].name='y' axisDefinition[order=1].count='4' axisDefinition[order=2].name='x' axisDefinition[order=2].count='3' { z11 z12 z13 z21 z22 z23 z31 z32 z33 z41 z42 z43 } 
        /// </summary>
        [XmlElement("order")]
        public Int16? Order { get; set; }
        /// <summary>
        /// The count of elements along this axis of the array.
        /// </summary>
        [XmlElement("count")]
        public Int16? Count { get; set; }
        /// <summary>
        /// The name of the array axis.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The property type by which the array axis is classified.
        /// </summary>
        [XmlElement("propertyType")]
        public String PropertyType { get; set; }
        /// <summary>
        /// A string representing the units of measure of the axis values.
        /// </summary>
        [XmlElement("uom")]
        public String Uom { get; set; }
        /// <summary>
        /// The serialziation of the axis positions of an array as a whitespace-delimited list values of type xsd:double. If the length of this list is less than 'count' then the difference in the last two values represents the increment to be used to fill out the list. For example, the list '2 4' with count=4 represents the list '2 4 6 8'.
        /// </summary>
        [XmlElement("doubleValues")]
        public Double DoubleValues {
            get {
                return doubleValuesField;
            } 
            set { 
                if (stringValuesFieldSpecified) throw new Exception("Cannot set property DoubleValues when property StringValues is already set");
                doubleValuesField = value;
                doubleValuesFieldSpecified = true;
            }
        }

        private Double doubleValuesField; 
        private bool doubleValuesFieldSpecified = false; 

        /// <summary>
        /// The serialziation of the axis positions of an array as a whitespace-delimited list values of type xsd:String. Note: the serialization of string elements with embedded whitespace cannot be properly decoded.
        /// </summary>
        [XmlElement("stringValues")]
        public String StringValues {
            get {
                return stringValuesField;
            } 
            set { 
                if (doubleValuesFieldSpecified) throw new Exception("Cannot set property StringValues when property DoubleValues is already set");
                stringValuesField = value;
                stringValuesFieldSpecified = true;
            }
        }

        private String stringValuesField; 
        private bool stringValuesFieldSpecified = false; 


		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_messages xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("messages", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_messages xsd type.")]
    public partial class MessageList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single message. 
        /// </summary>
        [XmlElement("message")]
        public List<Message> Message { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Message;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Message object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_message", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Message object.")]
    public partial class Message : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the message. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the risk. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A reference to an object that is defined within the context of a wellbore.
        /// </summary>
        [XmlElement("objectReference")]
        public RefObjectString ObjectReference { get; set; }
        /// <summary>
        /// A reference to an sub-object that is defined within the context of the object referenced by objectReference. This should only refer to recurring components of a growing object.
        /// </summary>
        [XmlElement("subObjectReference")]
        public RefObjectString SubObjectReference { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
        [XmlElement("activityCode")]
        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set { 
                activityCodeField = value;
                this.ActivityCodeSpecified = true;
            }
        }

        private ActivityCode activityCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ActivityCodeSpecified { get; set; }
        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
        [XmlElement("detailActivity")]
        public String DetailActivity { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit { get; set; }
        /// <summary>
        /// Message type. 
        /// </summary>
        [XmlElement("typeMessage")]
        public MessageType? TypeMessage { get; set; }
        /// <summary>
        /// Message text. 
        /// </summary>
        [XmlElement("messageText")]
        public String MessageText { get; set; }
		/// <summary>
        /// Any extra numeric data. 
        /// </summary>
        [XmlElement("param")]
        public List<IndexedObject> PluggedAndAbandonedram { get; set; }
        /// <summary>
        /// Severity of incident. 
        /// </summary>
        [XmlElement("severity")]
        public MessageSeverity? Severity {
            get {
                return severityField;
            } 
            set { 
                severityField = value;
                this.SeveritySpecified = true;
            }
        }

        private MessageSeverity? severityField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SeveritySpecified { get; set; }
        /// <summary>
        /// A warning probability (applies to warning).
        /// </summary>
        [XmlElement("warnProbability")]
        public MessageProbability? WarnProbability {
            get {
                return warnProbabilityField;
            } 
            set { 
                warnProbabilityField = value;
                this.WarnProbabilitySpecified = true;
            }
        }

        private MessageProbability? warnProbabilityField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean WarnProbabilitySpecified { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refObjectString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refObjectString", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the refObjectString xsd type.")]
    public partial class RefObjectString : Object 
    {
        public RefObjectString() {}
        public RefObjectString(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The name of the singular object being referenced.
        /// </summary>
        [XmlAttribute("object")]
        public String Object { get; set; }
		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the object referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
        [XmlAttribute("uidRef")]
        public String UidRef { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_mudLogs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("mudLogs", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_mudLogs xsd type.")]
    public partial class MudLogList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single mud log. 
        /// </summary>
        [XmlElement("mudLog")]
        public List<MudLog> MudLog { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return MudLog;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Mud Log object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_mudLog", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Mud Log object.")]
    public partial class MudLog : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the mud log. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the mud log. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Whether or not the mudLog is growing. True ("true" or "1") indicates the that the mudLog is still growing in size (that is, geologyInterval or parameter values are still being added). For example, it may be connected to a realtime stream. False ("false" or "0") indicates that the mudLog is closed (that is, no further geologyInterval or parameter values will be added). Not given indicates that the status of the mudLog is not known. This value is only relevant within the context of a server.
        /// </summary>
        [XmlElement("objectGrowing")]
        public Boolean? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set { 
                objectGrowingField = value;
                this.ObjectGrowingSpecified = true;
            }
        }

        private Boolean? objectGrowingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ObjectGrowingSpecified { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Name of the company recording the information. 
        /// </summary>
        [XmlElement("mudLogCompany")]
        public String MudLogCompany { get; set; }
        /// <summary>
        /// Concatenated names of mud loggers constructing the log. 
        /// </summary>
        [XmlElement("mudLogEngineers")]
        public String MudLogEngineers { get; set; }
        /// <summary>
        /// The minimum mdTop value in all geologyIntervals for this mud log message. This will be populated by the server to match the values that were returned as a result of a query. Used in a query template for specifying the begining range of logs to be retrieved.
        /// </summary>
        [XmlElement("startMd")]
        public MeasuredDepthCoord StartMD { get; set; }
        /// <summary>
        /// The maximum mdBottom value in all geologyIntervals for this mud log message. This will be populated by the server to match the values that were returned as a result of a query. Used in a query template for specifying the ending range of logs to be retrieved. 
        /// </summary>
        [XmlElement("endMd")]
        public MeasuredDepthCoord EndMD { get; set; }
		/// <summary>
        /// A foreign key to a related Log. This is a pointer to a log that is related to the mud log. The log may or may not have been created as a result of the mudlogging process. The log must represent the same well and wellbore as the mud log.
        /// </summary>
        [XmlElement("relatedLog")]
        public List<RefNameString> RelatedLog { get; set; }
		/// <summary>
        /// A single mud log parameter.
        /// </summary>
        [XmlElement("parameter")]
        public List<MudLogParameter> PluggedAndAbandonedrameter { get; set; }
		/// <summary>
        /// Set of geology and drilling information records for the wellbore. 
        /// </summary>
        [XmlElement("geologyInterval")]
        public List<GeologyInterval> GeologyInterval { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Mud Log Parameter Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudLogParameter", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Mud Log Parameter Component Schema")]
    public partial class MudLogParameter : Object 
    {

        /// <summary>
        /// The type of the mud log parameter.
        /// </summary>
        [XmlElement("type")]
        public MudLogParameterType? Type { get; set; }
        /// <summary>
        /// The data and time related to the parameter. At least one of dTime or mdTop must be given. The time refers to the top of the interval. 
        /// </summary>
        [XmlElement("dTime")]
        public DateTime? DateTimee {
            get {
                return dTimeField;
            } 
            set { 
                dTimeField = value;
                this.DateTimeeSpecified = true;
            }
        }

        private DateTime? dTimeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeeSpecified { get; set; }
        /// <summary>
        /// The measured depth at a point or at the top of an interval. If it represents the top of an interval then bottom measured depth must also be given. At least one of dTime or mdTop must be given.
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// The bottom of an interval along the borehole. The bottom of the interval cannot be given unless the top is also given.
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// A concentration value that represents the parameter. If you set this property, you must also set TypeConc.
        /// </summary>
        [XmlElement("concentration")]
        public VolumePerVolumeMeasure Concentration {
            get {
                return concentrationField;
            } 
            set { 
                if (equivalentMudWeightFieldSpecified) throw new Exception("Cannot set property Concentration when property EquivalentMudWeight is already set");
                if (pressureGradientFieldSpecified) throw new Exception("Cannot set property Concentration when property PressureGradient is already set");
                if (forceFieldSpecified) throw new Exception("Cannot set property Concentration when property Force is already set");
                concentrationField = value;
                concentrationFieldSpecified = true;
            }
        }

        private VolumePerVolumeMeasure concentrationField; 
        private bool concentrationFieldSpecified = false; 

        /// <summary>
        /// A equivalent mud weight value that represents the parameter. This commonly used for pressure gradient parameters and pressure parameters.
        /// </summary>
        [XmlElement("equivalentMudWeight")]
        public DensityMeasure EquivalentMudWeight {
            get {
                return equivalentMudWeightField;
            } 
            set { 
                if (concentrationFieldSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property Concentration is already set");
                if (pressureGradientFieldSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property PressureGradient is already set");
                if (forceFieldSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property Force is already set");
                equivalentMudWeightField = value;
                equivalentMudWeightFieldSpecified = true;
            }
        }

        private DensityMeasure equivalentMudWeightField; 
        private bool equivalentMudWeightFieldSpecified = false; 

        /// <summary>
        /// A pressure gradient value that represents the parameter. This is sometimes specified instead of an equivalent mud weight.
        /// </summary>
        [XmlElement("pressureGradient")]
        public ForcePerVolumeMeasure PressureGradient {
            get {
                return pressureGradientField;
            } 
            set { 
                if (equivalentMudWeightFieldSpecified) throw new Exception("Cannot set property PressureGradient when property EquivalentMudWeight is already set");
                if (concentrationFieldSpecified) throw new Exception("Cannot set property PressureGradient when property Concentration is already set");
                if (forceFieldSpecified) throw new Exception("Cannot set property PressureGradient when property Force is already set");
                pressureGradientField = value;
                pressureGradientFieldSpecified = true;
            }
        }

        private ForcePerVolumeMeasure pressureGradientField; 
        private bool pressureGradientFieldSpecified = false; 

        /// <summary>
        /// A force value (e.g., hookload) that represents the parameter.
        /// </summary>
        [XmlElement("force")]
        public ForceMeasure Force {
            get {
                return forceField;
            } 
            set { 
                if (equivalentMudWeightFieldSpecified) throw new Exception("Cannot set property Force when property EquivalentMudWeight is already set");
                if (concentrationFieldSpecified) throw new Exception("Cannot set property Force when property Concentration is already set");
                if (pressureGradientFieldSpecified) throw new Exception("Cannot set property Force when property PressureGradient is already set");
                forceField = value;
                forceFieldSpecified = true;
            }
        }

        private ForceMeasure forceField; 
        private bool forceFieldSpecified = false; 


        /// <summary>
        /// A textual parameter value. This value is typically annotation on the log. All spaces, tabs, line feeds and carriage returns are retained in the string. Characters representing line breaks should be replaced by a line feed or carriage return.
        /// </summary>
        [XmlElement("text")]
        public String Text { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_opsReports xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("opsReports", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_opsReports xsd type.")]
    public partial class OpsReportList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single operations report. 
        /// </summary>
        [XmlElement("opsReport")]
        public List<OpsReport> OperatingsReport { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return OperatingsReport;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Operations Report object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_opsReport", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Operations Report object.")]
    public partial class OpsReport : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the operations report. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the operations report. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A pointer to the rig utilized in this reporting period. 
        /// </summary>
        [XmlElement("rig")]
        public RefNameString Rig { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// Time from start of Operations (commonly in days). 
        /// </summary>
        [XmlElement("eTimStart")]
        public TimeMeasure ETimeStart { get; set; }
        /// <summary>
        /// Time since bit broke ground (commonly in days). 
        /// </summary>
        [XmlElement("eTimSpud")]
        public TimeMeasure ETimeSpud { get; set; }
        /// <summary>
        /// Time rig on location (commonly in days). 
        /// </summary>
        [XmlElement("eTimLoc")]
        public TimeMeasure ETimeLoc { get; set; }
        /// <summary>
        /// Wellbore Measured Depth. 
        /// </summary>
        [XmlElement("mdReport")]
        public MeasuredDepthCoord MDReport { get; set; }
        /// <summary>
        /// Wellbore True Vertical Depth. 
        /// </summary>
        [XmlElement("tvdReport")]
        public WellVerticalDepthCoord TvdReport { get; set; }
        /// <summary>
        /// Distance drilled since last report. 
        /// </summary>
        [XmlElement("distDrill")]
        public LengthMeasure DistDrill { get; set; }
        /// <summary>
        /// Drilling time. 
        /// </summary>
        [XmlElement("eTimDrill")]
        public TimeMeasure ETimeDrill { get; set; }
        /// <summary>
        /// Measured depth of plan for this day number. 
        /// </summary>
        [XmlElement("mdPlanned")]
        public MeasuredDepthCoord MDPlanned { get; set; }
        /// <summary>
        /// Average Rate of Penetration through Interval. 
        /// </summary>
        [XmlElement("ropAv")]
        public VelocityMeasure RopAverage { get; set; }
        /// <summary>
        /// Rate of penetration at report time. 
        /// </summary>
        [XmlElement("ropCurrent")]
        public VelocityMeasure RopCurrent { get; set; }
        /// <summary>
        /// Name of operator rig supervisor. 
        /// </summary>
        [XmlElement("supervisor")]
        public String Supervisor { get; set; }
        /// <summary>
        /// Nae of Engineer. 
        /// </summary>
        [XmlElement("engineer")]
        public String Engineer { get; set; }
        /// <summary>
        /// Name of operator wellsite geologist. 
        /// </summary>
        [XmlElement("geologist")]
        public String Geologist { get; set; }
        /// <summary>
        /// Time spent rotary drilling for report interval. 
        /// </summary>
        [XmlElement("eTimDrillRot")]
        public TimeMeasure ETimeDrillRot { get; set; }
        /// <summary>
        /// Time spent slide drilling from start of bit run. 
        /// </summary>
        [XmlElement("eTimDrillSlid")]
        public TimeMeasure ETimeDrillSlid { get; set; }
        /// <summary>
        /// Time spent circulating from start of bit run. 
        /// </summary>
        [XmlElement("eTimCirc")]
        public TimeMeasure ETimeCirc { get; set; }
        /// <summary>
        /// Time spent reaming from start of bit run. 
        /// </summary>
        [XmlElement("eTimReam")]
        public TimeMeasure ETimeReam { get; set; }
        /// <summary>
        /// Time spent with no DD work (commonly in hours). 
        /// </summary>
        [XmlElement("eTimHold")]
        public TimeMeasure ETimeHold { get; set; }
        /// <summary>
        /// Time spent steering bottom hole assembly (commonly in hours). 
        /// </summary>
        [XmlElement("eTimSteering")]
        public TimeMeasure ETimeSteering { get; set; }
        /// <summary>
        /// Distance drilled - rotating. 
        /// </summary>
        [XmlElement("distDrillRot")]
        public LengthMeasure DistDrillRot { get; set; }
        /// <summary>
        /// Distance drilled - sliding. 
        /// </summary>
        [XmlElement("distDrillSlid")]
        public LengthMeasure DistDrillSlid { get; set; }
        /// <summary>
        /// Distance reamed. 
        /// </summary>
        [XmlElement("distReam")]
        public LengthMeasure DistReam { get; set; }
        /// <summary>
        /// Distance covered while holding angle with a steerable drilling assembly. 
        /// </summary>
        [XmlElement("distHold")]
        public LengthMeasure DistHold { get; set; }
        /// <summary>
        /// Distance covered while actively steering with a steerable drilling assembly. 
        /// </summary>
        [XmlElement("distSteering")]
        public LengthMeasure DistSteering { get; set; }
        /// <summary>
        /// Total number of personnel on board. 
        /// </summary>
        [XmlElement("numPob")]
        public Int16? NumPob {
            get {
                return numPobField;
            } 
            set { 
                numPobField = value;
                this.NumPobSpecified = true;
            }
        }

        private Int16? numPobField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumPobSpecified { get; set; }
        /// <summary>
        /// Number of contractor personnel on board. 
        /// </summary>
        [XmlElement("numContract")]
        public Int16? NumContract {
            get {
                return numContractField;
            } 
            set { 
                numContractField = value;
                this.NumContractSpecified = true;
            }
        }

        private Int16? numContractField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumContractSpecified { get; set; }
        /// <summary>
        /// Number of Operator personnel on board. 
        /// </summary>
        [XmlElement("numOperator")]
        public Int16? NumOperator {
            get {
                return numOperatorField;
            } 
            set { 
                numOperatorField = value;
                this.NumOperatorSpecified = true;
            }
        }

        private Int16? numOperatorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumOperatorSpecified { get; set; }
        /// <summary>
        /// Number of service company personnel on board. 
        /// </summary>
        [XmlElement("numService")]
        public Int16? NumService {
            get {
                return numServiceField;
            } 
            set { 
                numServiceField = value;
                this.NumServiceSpecified = true;
            }
        }

        private Int16? numServiceField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumServiceSpecified { get; set; }
		/// <summary>
        /// Activity breakdown, multiple for many activities. 
        /// </summary>
        [XmlElement("activity")]
        public List<Activity> Activity { get; set; }
		/// <summary>
        /// Average bottom hole assembly parameters for report duration or actual instances of bottom hole assembly operations. 
        /// </summary>
        [XmlElement("drillingParams")]
        public List<DrillingParams> DrillingPluggedAndAbandonedrams { get; set; }
        /// <summary>
        /// Record of actual hole geometry at report time. 
        /// </summary>
        [XmlElement("wbGeometry")]
        public WellboreGeometry WellboreGeometry { get; set; }
		/// <summary>
        /// Cost item for the report interval. 
        /// </summary>
        [XmlElement("dayCost")]
        public List<DayCost> DayCost { get; set; }
		/// <summary>
        /// Survey station recorded during the report interval. 
        /// </summary>
        [XmlElement("trajectoryStation")]
        public List<TrajectoryStation> TrajectoryStation { get; set; }
		/// <summary>
        /// One fluid record. 
        /// </summary>
        [XmlElement("fluid")]
        public List<Fluid> Fluid { get; set; }
		/// <summary>
        /// Slow circulation rate pressure test for well control operations. 
        /// </summary>
        [XmlElement("scr")]
        public List<Scr> Scr { get; set; }
		/// <summary>
        /// Pit volume record for the report interval. 
        /// </summary>
        [XmlElement("pitVolume")]
        public List<PitVolume> PitVolume { get; set; }
        /// <summary>
        /// Description of mud built, received, etc. 
        /// </summary>
        [XmlElement("mudVolume")]
        public MudVolume MudVolume { get; set; }
		/// <summary>
        /// Mud inventory item and cost for the report interval. 
        /// </summary>
        [XmlElement("mudInventory")]
        public List<Inventory> MudInventory { get; set; }
		/// <summary>
        /// Bulk item usage and cost. 
        /// </summary>
        [XmlElement("bulk")]
        public List<Inventory> Bulk { get; set; }
        /// <summary>
        /// Average rig response readings for the day. 
        /// </summary>
        [XmlElement("rigResponse")]
        public RigResponse RigResponse { get; set; }
		/// <summary>
        /// Pump rate/pressure reading. 
        /// </summary>
        [XmlElement("pumpOp")]
        public List<PumpOp> PumpOperating { get; set; }
		/// <summary>
        /// Container element for shaker operation elements. 
        /// </summary>
        [XmlElement("shakerOp")]
        public List<ShakerOp> ShakerOperating { get; set; }
        /// <summary>
        /// Health, safety and environmental information. 
        /// </summary>
        [XmlElement("hse")]
        public Hse Hse { get; set; }
		/// <summary>
        /// Personnel records. 
        /// </summary>
        [XmlElement("personnel")]
        public List<Personnel> Personnel { get; set; }
		/// <summary>
        /// Support craft object container element. 
        /// </summary>
        [XmlElement("supportCraft")]
        public List<SupportCraft> SupportCraft { get; set; }
		/// <summary>
        /// Metrological readings for the day. 
        /// </summary>
        [XmlElement("weather")]
        public List<Weather> Weather { get; set; }
        /// <summary>
        /// AFE (authorization for expenditure) number that this cost item applies to. 
        /// </summary>
        [XmlElement("numAFE")]
        public String NumAFE { get; set; }
        /// <summary>
        /// Daily Cost. 
        /// </summary>
        [XmlElement("costDay")]
        public Cost CostDay { get; set; }
        /// <summary>
        /// Daily Mud Cost. 
        /// </summary>
        [XmlElement("costDayMud")]
        public Cost CostDayMud { get; set; }
        /// <summary>
        /// Hole diameter. 
        /// </summary>
        [XmlElement("diaHole")]
        public LengthMeasure DiaHole { get; set; }
        /// <summary>
        /// Hole condition description. 
        /// </summary>
        [XmlElement("conditionHole")]
        public String ConditionHole { get; set; }
        /// <summary>
        /// Lithology for the Interval. 
        /// </summary>
        [XmlElement("lithology")]
        public String Lithology { get; set; }
        /// <summary>
        /// Name of formation. 
        /// </summary>
        [XmlElement("nameFormation")]
        public String NameFormation { get; set; }
        /// <summary>
        /// Diameter of last casing. 
        /// </summary>
        [XmlElement("diaCsgLast")]
        public LengthMeasure DiaCsgLast { get; set; }
        /// <summary>
        /// Measured depth of last casing. 
        /// </summary>
        [XmlElement("mdCsgLast")]
        public MeasuredDepthCoord MDCsgLast { get; set; }
        /// <summary>
        /// True vertical depth of last casing. 
        /// </summary>
        [XmlElement("tvdCsgLast")]
        public WellVerticalDepthCoord TvdCsgLast { get; set; }
        /// <summary>
        /// True vertical depth of leak off test point. 
        /// </summary>
        [XmlElement("tvdLot")]
        public WellVerticalDepthCoord TvdLot { get; set; }
        /// <summary>
        /// Leak off test equivalent mud weight. 
        /// </summary>
        [XmlElement("presLotEmw")]
        public DensityMeasure PresLotEmw { get; set; }
        /// <summary>
        /// Kick tolerance pressure. 
        /// </summary>
        [XmlElement("presKickTol")]
        public PressureMeasure PresKickTol { get; set; }
        /// <summary>
        /// Kick tolerance volume. 
        /// </summary>
        [XmlElement("volKickTol")]
        public VolumeMeasure VolKickTol { get; set; }
        /// <summary>
        /// Maximum allowable shut-in casing pressure. 
        /// </summary>
        [XmlElement("maasp")]
        public PressureMeasure Maasp { get; set; }
        /// <summary>
        /// A pointer to the tubular (assembly) used in this report period. This represents a foreign key to tubular. 
        /// </summary>
        [XmlElement("tubular")]
        public RefNameString Tubular { get; set; }
        /// <summary>
        /// 24 hour summary description. 
        /// </summary>
        [XmlElement("sum24Hr")]
        public String Sum24Hr { get; set; }
        /// <summary>
        /// Forecast for next 24 hrs. 
        /// </summary>
        [XmlElement("forecast24Hr")]
        public String Forecast24Hr { get; set; }
        /// <summary>
        /// Current status description. 
        /// </summary>
        [XmlElement("statusCurrent")]
        public String StatusCurrent { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Activity Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_activity", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Activity Component Schema ")]
    public partial class Activity : Object 
    {

        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// Date and time that activities were completed. 
        /// </summary>
        [XmlElement("dTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set { 
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
            }
        }

        private DateTime? dTimEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndSpecified { get; set; }
        /// <summary>
        /// The activity duration (commonly in hours). 
        /// </summary>
        [XmlElement("duration")]
        public TimeMeasure Duration { get; set; }
        /// <summary>
        /// Phase (large activity classification) e.g. Drill Surface Hole. 
        /// </summary>
        [XmlElement("phase")]
        public String PHase { get; set; }
        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
        [XmlElement("activityCode")]
        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set { 
                activityCodeField = value;
                this.ActivityCodeSpecified = true;
            }
        }

        private ActivityCode activityCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ActivityCodeSpecified { get; set; }
        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
        [XmlElement("detailActivity")]
        public String DetailActivity { get; set; }
        /// <summary>
        /// Classifier (Planned, Unplanned, Downtime). 
        /// </summary>
        [XmlElement("typeActivityClass")]
        public ActivityClassType? TypeActivityClass {
            get {
                return typeActivityClassField;
            } 
            set { 
                typeActivityClassField = value;
                this.TypeActivityClassSpecified = true;
            }
        }

        private ActivityClassType? typeActivityClassField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeActivityClassSpecified { get; set; }
        /// <summary>
        /// Measured Depth at start of activity. 
        /// </summary>
        [XmlElement("mdHoleStart")]
        public MeasuredDepthCoord MDHoleStart { get; set; }
        /// <summary>
        /// True Vertical Depth at start of activity 
        /// </summary>
        [XmlElement("tvdHoleStart")]
        public WellVerticalDepthCoord TvdHoleStart { get; set; }
        /// <summary>
        /// Measured Depth at end of activity. 
        /// </summary>
        [XmlElement("mdHoleEnd")]
        public MeasuredDepthCoord MDHoleEnd { get; set; }
        /// <summary>
        /// True Vertical Depth at end of activity. 
        /// </summary>
        [XmlElement("tvdHoleEnd")]
        public WellVerticalDepthCoord TvdHoleEnd { get; set; }
        /// <summary>
        /// Measured depth of bit at start of activity. 
        /// </summary>
        [XmlElement("mdBitStart")]
        public MeasuredDepthCoord MDBitStart { get; set; }
        /// <summary>
        /// Measured depth of bit at end of activity. 
        /// </summary>
        [XmlElement("mdBitEnd")]
        public MeasuredDepthCoord MDBitEnd { get; set; }
        /// <summary>
        /// Finish, interrupted, failed, etc. 
        /// </summary>
        [XmlElement("state")]
        public String State { get; set; }
        /// <summary>
        /// Operator company name. 
        /// </summary>
        [XmlElement("operator")]
        public String Operator { get; set; }
        /// <summary>
        /// A pointer to the tubular related to this activity.
        /// </summary>
        [XmlElement("tubular")]
        public RefNameString Tubular { get; set; }
        /// <summary>
        /// Is the activity optimum. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("optimum")]
        public Boolean? Operatingtimum {
            get {
                return optimumField;
            } 
            set { 
                optimumField = value;
                this.OperatingtimumSpecified = true;
            }
        }

        private Boolean? optimumField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean OperatingtimumSpecified { get; set; }
        /// <summary>
        /// Does activity bring closer to objective. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("productive")]
        public Boolean? Productive {
            get {
                return productiveField;
            } 
            set { 
                productiveField = value;
                this.ProductiveSpecified = true;
            }
        }

        private Boolean? productiveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ProductiveSpecified { get; set; }
        /// <summary>
        /// The item state for the data object. 
        /// </summary>
        [XmlElement("itemState")]
        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set { 
                itemStateField = value;
                this.ItemStateSpecified = true;
            }
        }

        private ItemState? itemStateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ItemStateSpecified { get; set; }
        /// <summary>
        /// Comments and Remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Day Cost Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_dayCost", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Day Cost Component Schema ")]
    public partial class DayCost : Object 
    {

        /// <summary>
        /// AFE number that this cost item applies to. 
        /// </summary>
        [XmlElement("numAFE")]
        public String NumAFE { get; set; }
        /// <summary>
        /// Cost group code. 
        /// </summary>
        [XmlElement("costGroup")]
        public String CostGroup { get; set; }
        /// <summary>
        /// Cost class code. 
        /// </summary>
        [XmlElement("costClass")]
        public String CostClass { get; set; }
        /// <summary>
        /// Cost code. 
        /// </summary>
        [XmlElement("costCode")]
        public String CostCode { get; set; }
        /// <summary>
        /// Cost subcode. 
        /// </summary>
        [XmlElement("costSubCode")]
        public String CostSubCode { get; set; }
        /// <summary>
        /// Description of cost item. 
        /// </summary>
        [XmlElement("costItemDescription")]
        public String CostItemDescription { get; set; }
        /// <summary>
        /// Cost per cost item, assume same currency.
        /// </summary>
        [XmlElement("costPerItem")]
        public Cost CostPerItem { get; set; }
        /// <summary>
        /// The kind of cost item specified (e.g., rig dayrate, joints casing). 
        /// </summary>
        [XmlElement("itemKind")]
        public String ItemKind { get; set; }
        /// <summary>
        /// Size of one cost item. 
        /// </summary>
        [XmlElement("itemSize")]
        public Double? ItemSize {
            get {
                return itemSizeField;
            } 
            set { 
                itemSizeField = value;
                this.ItemSizeSpecified = true;
            }
        }

        private Double? itemSizeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ItemSizeSpecified { get; set; }
        /// <summary>
        /// Number of cost items used that day e.g. 1 rig dayrate, 30 joints casing. 
        /// </summary>
        [XmlElement("qtyItem")]
        public Int16? QtyItem {
            get {
                return qtyItemField;
            } 
            set { 
                qtyItemField = value;
                this.QtyItemSpecified = true;
            }
        }

        private Int16? qtyItemField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyItemSpecified { get; set; }
        /// <summary>
        /// Cost for the item for this record. 
        /// </summary>
        [XmlElement("costAmount")]
        public Cost CostAmount { get; set; }
        /// <summary>
        /// Invoice number for cost item, bill sent to Operator. 
        /// </summary>
        [XmlElement("numInvoice")]
        public String NumInvoice { get; set; }
        /// <summary>
        /// Purchase order number, provided by Operator. 
        /// </summary>
        [XmlElement("numPO")]
        public String NumPO { get; set; }
        /// <summary>
        /// Field Ticket number, issued by service company on location. 
        /// </summary>
        [XmlElement("numTicket")]
        public String NumTicket { get; set; }
        /// <summary>
        /// Is this item carried from day to day? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("isCarryOver")]
        public Boolean? IsCarryOver {
            get {
                return isCarryOverField;
            } 
            set { 
                isCarryOverField = value;
                this.IsCarryOverSpecified = true;
            }
        }

        private Boolean? isCarryOverField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsCarryOverSpecified { get; set; }
        /// <summary>
        /// Is this item a rental? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("isRental")]
        public Boolean? IsRental {
            get {
                return isRentalField;
            } 
            set { 
                isRentalField = value;
                this.IsRentalSpecified = true;
            }
        }

        private Boolean? isRentalField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsRentalSpecified { get; set; }
		/// <summary>
        /// An identification tag for the item. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
        /// <summary>
        /// Serial number. 
        /// </summary>
        [XmlElement("numSerial")]
        public String NumSerial { get; set; }
        /// <summary>
        /// Name of vendor. 
        /// </summary>
        [XmlElement("nameVendor")]
        public String NameVendor { get; set; }
        /// <summary>
        /// Vendor number. 
        /// </summary>
        [XmlElement("numVendor")]
        public String NumVendor { get; set; }
        /// <summary>
        /// Name of pool/reservoir that this cost item can be accounted to. 
        /// </summary>
        [XmlElement("pool")]
        public String Pool { get; set; }
        /// <summary>
        /// Is this an estimated cost? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("estimated")]
        public Boolean? Estimated {
            get {
                return estimatedField;
            } 
            set { 
                estimatedField = value;
                this.EstimatedSpecified = true;
            }
        }

        private Boolean? estimatedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EstimatedSpecified { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cost xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cost", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the cost xsd type.")]
    public partial class Cost : Object 
    {
        public Cost() {}
        public Cost(Double value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		
        [XmlAttribute("currency")]
        public String Currency { get; set; }
		
        [XmlText]
        public Double Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Trajectory Station Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_trajectoryStation", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Trajectory Station Component Schema")]
    public partial class TrajectoryStation : Object 
    {

        /// <summary>
        /// A pointer to the intended target of this station. 
        /// </summary>
        [XmlElement("target")]
        public RefNameString Target { get; set; }
        /// <summary>
        /// Date and time the station was measured or created. 
        /// </summary>
        [XmlElement("dTimStn")]
        public DateTime? DateTimeStn {
            get {
                return dTimStnField;
            } 
            set { 
                dTimStnField = value;
                this.DateTimeStnSpecified = true;
            }
        }

        private DateTime? dTimStnField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStnSpecified { get; set; }
        /// <summary>
        /// Type of survey station. 
        /// </summary>
        [XmlElement("typeTrajStation")]
        public TrajStationType? TypeTrajStation { get; set; }
        /// <summary>
        /// The type of tool used for the measurements.
        /// </summary>
        [XmlElement("typeSurveyTool")]
        public TypeSurveyTool? TypeSurveyTool {
            get {
                return typeSurveyToolField;
            } 
            set { 
                typeSurveyToolField = value;
                this.TypeSurveyToolSpecified = true;
            }
        }

        private TypeSurveyTool? typeSurveyToolField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeSurveyToolSpecified { get; set; }
        /// <summary>
        /// Measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// Hole inclination, measured from vertical. 
        /// </summary>
        [XmlElement("incl")]
        public PlaneAngleMeasure Incl { get; set; }
        /// <summary>
        /// Hole azimuth. Corrected to wells azimuth reference. 
        /// </summary>
        [XmlElement("azi")]
        public PlaneAngleMeasure Azi { get; set; }
        /// <summary>
        /// Toolface angle (magnetic). 
        /// </summary>
        [XmlElement("mtf")]
        public PlaneAngleMeasure Mtf { get; set; }
        /// <summary>
        /// Toolface angle (gravity). 
        /// </summary>
        [XmlElement("gtf")]
        public PlaneAngleMeasure Gtf { get; set; }
        /// <summary>
        /// North-south offset, positive to the North. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.
        /// </summary>
        [XmlElement("dispNs")]
        public LengthMeasure DispNS { get; set; }
        /// <summary>
        /// East-west offset, positive to the East. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location. 
        /// </summary>
        [XmlElement("dispEw")]
        public LengthMeasure DispEW { get; set; }
        /// <summary>
        /// Distance along vertical section azimuth plane. 
        /// </summary>
        [XmlElement("vertSect")]
        public LengthMeasure VertSect { get; set; }
        /// <summary>
        /// Dogleg severity. 
        /// </summary>
        [XmlElement("dls")]
        public AnglePerLengthMeasure DoglegSeverity { get; set; }
        /// <summary>
        /// Turn rate, radius of curvature computation. 
        /// </summary>
        [XmlElement("rateTurn")]
        public AnglePerLengthMeasure RateTurn { get; set; }
        /// <summary>
        /// Build Rate, radius of curvature computation. 
        /// </summary>
        [XmlElement("rateBuild")]
        public AnglePerLengthMeasure RateBuild { get; set; }
        /// <summary>
        /// Delta measured depth from previous station. 
        /// </summary>
        [XmlElement("mdDelta")]
        public MeasuredDepthCoord MDDelta { get; set; }
        /// <summary>
        /// Delta true vertical depth from previous station. 
        /// </summary>
        [XmlElement("tvdDelta")]
        public WellVerticalDepthCoord TvdDelta { get; set; }
        /// <summary>
        /// Tool error model used to compute covariance matrix. 
        /// </summary>
        [XmlElement("modelToolError")]
        public String ModelToolError { get; set; }
        /// <summary>
        /// Survey tool gravity uncertainty. 
        /// </summary>
        [XmlElement("gravTotalUncert")]
        public AccelerationLinearMeasure GravTotalUncert { get; set; }
        /// <summary>
        /// Survey tool dip uncertainty. 
        /// </summary>
        [XmlElement("dipAngleUncert")]
        public PlaneAngleMeasure DipAngleUncert { get; set; }
        /// <summary>
        /// Survey tool magnetic uncertainty. 
        /// </summary>
        [XmlElement("magTotalUncert")]
        public MagneticInductionMeasure MagTotalUncert { get; set; }
        /// <summary>
        /// Was an accelerometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("gravAccelCorUsed")]
        public Boolean? GravAccelCorUsed {
            get {
                return gravAccelCorUsedField;
            } 
            set { 
                gravAccelCorUsedField = value;
                this.GravAccelCorUsedSpecified = true;
            }
        }

        private Boolean? gravAccelCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean GravAccelCorUsedSpecified { get; set; }
        /// <summary>
        /// Was a magnetometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("magXAxialCorUsed")]
        public Boolean? MagXAxialCorUsed {
            get {
                return magXAxialCorUsedField;
            } 
            set { 
                magXAxialCorUsedField = value;
                this.MagXAxialCorUsedSpecified = true;
            }
        }

        private Boolean? magXAxialCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MagXAxialCorUsedSpecified { get; set; }
        /// <summary>
        /// Was a bottom hole assembly sag correction applied to the survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("sagCorUsed")]
        public Boolean? SagCorUsed {
            get {
                return sagCorUsedField;
            } 
            set { 
                sagCorUsedField = value;
                this.SagCorUsedSpecified = true;
            }
        }

        private Boolean? sagCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SagCorUsedSpecified { get; set; }
        /// <summary>
        /// Was a drillstring magnetism correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("magDrlstrCorUsed")]
        public Boolean? MagDrlstrCorUsed {
            get {
                return magDrlstrCorUsedField;
            } 
            set { 
                magDrlstrCorUsedField = value;
                this.MagDrlstrCorUsedSpecified = true;
            }
        }

        private Boolean? magDrlstrCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MagDrlstrCorUsedSpecified { get; set; }
        /// <summary>
        /// Gravitational field theoretical/reference value. 
        /// </summary>
        [XmlElement("gravTotalFieldReference")]
        public AccelerationLinearMeasure GravTotalFieldReference { get; set; }
        /// <summary>
        /// Geomagnetic field theoretical/reference value. 
        /// </summary>
        [XmlElement("magTotalFieldReference")]
        public MagneticInductionMeasure MagTotalFieldReference { get; set; }
        /// <summary>
        /// Magnetic dip angle theoretical/reference value. 
        /// </summary>
        [XmlElement("magDipAngleReference")]
        public PlaneAngleMeasure MagDipAngleReference { get; set; }
        /// <summary>
        /// Geomagnetic model used. 
        /// </summary>
        [XmlElement("magModelUsed")]
        public String MagModelUsed { get; set; }
        /// <summary>
        /// Current valid interval for the geomagnetic model used. 
        /// </summary>
        [XmlElement("magModelValid")]
        public String MagModelValid { get; set; }
        /// <summary>
        /// Gravitational model used. 
        /// </summary>
        [XmlElement("geoModelUsed")]
        public String GeoModelUsed { get; set; }
        /// <summary>
        /// Status of the station. 
        /// </summary>
        [XmlElement("statusTrajStation")]
        public TrajStationStatus? StatusTrajStation {
            get {
                return statusTrajStationField;
            } 
            set { 
                statusTrajStationField = value;
                this.StatusTrajStationSpecified = true;
            }
        }

        private TrajStationStatus? statusTrajStationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StatusTrajStationSpecified { get; set; }
        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
        [XmlElement("rawData")]
        public StnTrajRawData RawData { get; set; }
        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
        [XmlElement("corUsed")]
        public StnTrajCorUsed CorUsed { get; set; }
        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
        [XmlElement("valid")]
        public StnTrajValid Valid { get; set; }
        /// <summary>
        /// Covariance matrix for error model. 
        /// </summary>
        [XmlElement("matrixCov")]
        public StnTrajMatrixCov MatrixCov { get; set; }
		/// <summary>
        /// The 2D coordinates of the item. Note that within the context of trajectory, the "original" coordinates are inherently local coordinates as defined above.
        /// </summary>
        [XmlElement("location")]
        public List<Location> Location { get; set; }
        /// <summary>
        /// A pointer to the trajectoryStation from which this station was derived. The trajectoryStation may be in another wellbore.
        /// </summary>
        [XmlElement("sourceStation")]
        public RefWellboreTrajectoryStation SourceStation { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Trajectory Station Raw Data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajRawData", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML Trajectory Station Raw Data")]
    public partial class StnTrajRawData : Object 
    {

        /// <summary>
        /// Uncorrected gravitational field strength measured in axial direction. 
        /// </summary>
        [XmlElement("gravAxialRaw")]
        public AccelerationLinearMeasure GravAxialRaw { get; set; }
        /// <summary>
        /// Uncorrected gravitational field strength measured in transverse direction. 
        /// </summary>
        [XmlElement("gravTran1Raw")]
        public AccelerationLinearMeasure GravTran1Raw { get; set; }
        /// <summary>
        /// Uncorrected gravitational field strength measured in transverse direction, approximately normal to tran1. 
        /// </summary>
        [XmlElement("gravTran2Raw")]
        public AccelerationLinearMeasure GravTran2Raw { get; set; }
        /// <summary>
        /// Uncorrected magnetic field strength measured in axial direction. 
        /// </summary>
        [XmlElement("magAxialRaw")]
        public MagneticInductionMeasure MagAxialRaw { get; set; }
        /// <summary>
        /// Uncorrected magnetic field strength measured in transverse direction. 
        /// </summary>
        [XmlElement("magTran1Raw")]
        public MagneticInductionMeasure MagTran1Raw { get; set; }
        /// <summary>
        /// Uncorrected magnetic field strength measured in transverse direction, approximately normal to tran1. 
        /// </summary>
        [XmlElement("magTran2Raw")]
        public MagneticInductionMeasure MagTran2Raw { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Trajectory Station Corrections Applied
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajCorUsed", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML Trajectory Station Corrections Applied")]
    public partial class StnTrajCorUsed : Object 
    {

        /// <summary>
        /// Calculated gravitational field strength correction. 
        /// </summary>
        [XmlElement("gravAxialAccelCor")]
        public AccelerationLinearMeasure GravAxialAccelCor { get; set; }
        /// <summary>
        /// The correction applied to the X cross-axial component of the earths magnetic field. 
        /// </summary>
        [XmlElement("gravTran1AccelCor")]
        public AccelerationLinearMeasure GravTran1AccelCor { get; set; }
        /// <summary>
        /// The correction applied to the Y cross-axial component of the earths magnetic field. 
        /// </summary>
        [XmlElement("gravTran2AccelCor")]
        public AccelerationLinearMeasure GravTran2AccelCor { get; set; }
        /// <summary>
        /// Axial magnetic drillstring correction. 
        /// </summary>
        [XmlElement("magAxialDrlstrCor")]
        public MagneticInductionMeasure MagAxialDrlstrCor { get; set; }
        /// <summary>
        /// Cross-axial magnetic correction. 
        /// </summary>
        [XmlElement("magTran1DrlstrCor")]
        public MagneticInductionMeasure MagTran1DrlstrCor { get; set; }
        /// <summary>
        /// Cross-axial magnetic correction. 
        /// </summary>
        [XmlElement("magTran2DrlstrCor")]
        public MagneticInductionMeasure MagTran2DrlstrCor { get; set; }
        /// <summary>
        /// Calculated sag correction to inclination. 
        /// </summary>
        [XmlElement("sagIncCor")]
        public PlaneAngleMeasure SagIncCor { get; set; }
        /// <summary>
        /// Calculated sag correction to azimuth. 
        /// </summary>
        [XmlElement("sagAziCor")]
        public PlaneAngleMeasure SagAziCor { get; set; }
        /// <summary>
        /// Magnetic declination used to correct a magnetic survey station. 
        /// </summary>
        [XmlElement("stnMagDeclUsed")]
        public PlaneAngleMeasure StnMagDeclUsed { get; set; }
        /// <summary>
        /// Grid Correction (Meridian convergence). The angle between True North and Grid North. Grid Correction is positive when True North is west of Grid North. The correction is added to the raw observation, thus yielding a reduced or corrected observation that can go into the subsequent calculations.
        /// </summary>
        [XmlElement("stnGridCorUsed")]
        public PlaneAngleMeasure StnGridCorUsed { get; set; }
        /// <summary>
        /// Offset relative to bit. 
        /// </summary>
        [XmlElement("dirSensorOffset")]
        public LengthMeasure DirSensorOffset { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Validation Information for Survey
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajValid", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML Validation Information for Survey")]
    public partial class StnTrajValid : Object 
    {

        /// <summary>
        /// Calculated total intensity of the geomagnetic field as sum of BGGM, IFR and local field. 
        /// </summary>
        [XmlElement("magTotalFieldCalc")]
        public MagneticInductionMeasure MagTotalFieldCAlc { get; set; }
        /// <summary>
        /// Calculated magnetic dip (inclination), the angle between the horizontal and the geomagnetic field (positive down, res .001). 
        /// </summary>
        [XmlElement("magDipAngleCalc")]
        public PlaneAngleMeasure MagDipAngleCAlc { get; set; }
        /// <summary>
        /// Calculated total gravitational field. 
        /// </summary>
        [XmlElement("gravTotalFieldCalc")]
        public AccelerationLinearMeasure GravTotalFieldCAlc { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Validation Information for Covariance Matrix
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajMatrixCov", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML Validation Information for Covariance Matrix")]
    public partial class StnTrajMatrixCov : Object 
    {

        /// <summary>
        /// Covariance north north. 
        /// </summary>
        [XmlElement("varianceNN")]
        public AreaMeasure VarianceNN { get; set; }
        /// <summary>
        /// Crossvariance north east. 
        /// </summary>
        [XmlElement("varianceNE")]
        public AreaMeasure VarianceNE { get; set; }
        /// <summary>
        /// Crossvariance north vertical. 
        /// </summary>
        [XmlElement("varianceNVert")]
        public AreaMeasure VarianceNVert { get; set; }
        /// <summary>
        /// Covariance east east. 
        /// </summary>
        [XmlElement("varianceEE")]
        public AreaMeasure VarianceEE { get; set; }
        /// <summary>
        /// Crossvariance east vertical. 
        /// </summary>
        [XmlElement("varianceEVert")]
        public AreaMeasure VarianceEVert { get; set; }
        /// <summary>
        /// Covariance vertical vertical. 
        /// </summary>
        [XmlElement("varianceVertVert")]
        public AreaMeasure VarianceVertVert { get; set; }
        /// <summary>
        /// Bias north. 
        /// </summary>
        [XmlElement("biasN")]
        public LengthMeasure BiasN { get; set; }
        /// <summary>
        /// Bias east. 
        /// </summary>
        [XmlElement("biasE")]
        public LengthMeasure BiasE { get; set; }
        /// <summary>
        /// Bias vertical. 
        /// </summary>
        [XmlElement("biasVert")]
        public LengthMeasure BiasVert { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Location Component Schema This is a location that is expressed in terms of 2D coordinates. In order that the location be understood, the coordinate reference system (CRS) must be known.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_location", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML Location Component Schema This is a location that is expressed in terms of 2D coordinates. In order that the location be understood, the coordinate reference system (CRS) must be known.")]
    public partial class Location : Object 
    {

        /// <summary>
        /// A pointer to the wellCRS that defines the CRS for the coordinates. While optional, it is strongly recommended that this be specified.
        /// </summary>
        [XmlElement("wellCRS")]
        public RefNameString WellCRS { get; set; }
        /// <summary>
        /// The latitude with north being positive. If you set this property, you must also set Longitude.
        /// </summary>
        [XmlElement("latitude")]
        public PlaneAngleMeasure Latitude {
            get {
                return latitudeField;
            } 
            set { 
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Latitude when property ProjectedX is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Latitude when property ProjectedY is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property Latitude when property Northing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property Latitude when property Southing is already set");
                if (westingFieldSpecified) throw new Exception("Cannot set property Latitude when property Westing is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Latitude when property LocalY is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property Latitude when property Easting is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Latitude when property LocalX is already set");
                latitudeField = value;
                latitudeFieldSpecified = true;
            }
        }

        private PlaneAngleMeasure latitudeField; 
        private bool latitudeFieldSpecified = false; 

        /// <summary>
        /// The longitude with east being positive. If you set this property, you must also set Latitude.
        /// </summary>
        [XmlElement("longitude")]
        public PlaneAngleMeasure Longitude {
            get {
                return longitudeField;
            } 
            set { 
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Longitude when property ProjectedX is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Longitude when property ProjectedY is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property Longitude when property Northing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property Longitude when property Southing is already set");
                if (westingFieldSpecified) throw new Exception("Cannot set property Longitude when property Westing is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Longitude when property LocalY is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property Longitude when property Easting is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Longitude when property LocalX is already set");
                longitudeField = value;
                longitudeFieldSpecified = true;
            }
        }

        private PlaneAngleMeasure longitudeField; 
        private bool longitudeFieldSpecified = false; 

        /// <summary>
        /// The projected coordinate with east being positive. This is the most common type of projected coordinates. UTM coordinates are expressed in Easting and Northing. If you set this property, you must also set Northing.
        /// </summary>
        [XmlElement("easting")]
        public LengthMeasure Easting {
            get {
                return eastingField;
            } 
            set { 
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Easting when property ProjectedX is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Easting when property ProjectedY is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property Easting when property Southing is already set");
                if (westingFieldSpecified) throw new Exception("Cannot set property Easting when property Westing is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Easting when property LocalY is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property Easting when property Longitude is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property Easting when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Easting when property LocalX is already set");
                eastingField = value;
                eastingFieldSpecified = true;
            }
        }

        private LengthMeasure eastingField; 
        private bool eastingFieldSpecified = false; 

        /// <summary>
        /// The projected coordinate with north being positive. This is the most common type of projected coordinates. UTM coordinates are expressed in Easting and Northing. If you set this property, you must also set Easting.
        /// </summary>
        [XmlElement("northing")]
        public LengthMeasure Northing {
            get {
                return northingField;
            } 
            set { 
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Northing when property ProjectedX is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Northing when property ProjectedY is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property Northing when property Southing is already set");
                if (westingFieldSpecified) throw new Exception("Cannot set property Northing when property Westing is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Northing when property LocalY is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property Northing when property Longitude is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property Northing when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Northing when property LocalX is already set");
                northingField = value;
                northingFieldSpecified = true;
            }
        }

        private LengthMeasure northingField; 
        private bool northingFieldSpecified = false; 

        /// <summary>
        /// The projected coordinate with west being positive. The positive directions are reversed from the usual Easting and Northing values. These values are generally located in the southern hemisphere, most notably in South Africa and Australia. If you set this property, you must also set Southing.
        /// </summary>
        [XmlElement("westing")]
        public LengthMeasure Westing {
            get {
                return westingField;
            } 
            set { 
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Westing when property ProjectedX is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Westing when property ProjectedY is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property Westing when property Northing is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Westing when property LocalY is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property Westing when property Longitude is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property Westing when property Easting is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property Westing when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Westing when property LocalX is already set");
                westingField = value;
                westingFieldSpecified = true;
            }
        }

        private LengthMeasure westingField; 
        private bool westingFieldSpecified = false; 

        /// <summary>
        /// The projected coordinate with south being positive. The positive directions are reversed from the usual Easting and Northing values. These values are generally located in the southern hemisphere, most notably in South Africa and Australia. If you set this property, you must also set Westing.
        /// </summary>
        [XmlElement("southing")]
        public LengthMeasure Southing {
            get {
                return southingField;
            } 
            set { 
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Southing when property ProjectedX is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Southing when property ProjectedY is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property Southing when property Northing is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Southing when property LocalY is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property Southing when property Longitude is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property Southing when property Easting is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property Southing when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Southing when property LocalX is already set");
                southingField = value;
                southingFieldSpecified = true;
            }
        }

        private LengthMeasure southingField; 
        private bool southingFieldSpecified = false; 

        /// <summary>
        /// The projected X coordinate with the positive direction unknown. ProjectedX and ProjectedY are used when it is not known what the meaning of the coordinates is. If the meaning is known, the Easting/Northing or Westing/Southing should be used. Use of this pair implies a lack of knowledge on the part of the sender. If you set this property, you must also set ProjectedY.
        /// </summary>
        [XmlElement("projectedX")]
        public LengthMeasure ProjectedX {
            get {
                return projectedXField;
            } 
            set { 
                if (northingFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Northing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Southing is already set");
                if (westingFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Westing is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property ProjectedX when property LocalY is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Longitude is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Easting is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property ProjectedX when property LocalX is already set");
                projectedXField = value;
                projectedXFieldSpecified = true;
            }
        }

        private LengthMeasure projectedXField; 
        private bool projectedXFieldSpecified = false; 

        /// <summary>
        /// The projected Y coordinate with the positive direction unknown. ProjectedX and ProjectedY are used when it is not known what the meaning of the coordinates is. If the meaning is known, the Easting/Northing or Westing/Southing should be used. Use of this pair implies a lack of knowledge on the part of the sender. If you set this property, you must also set ProjectedX.
        /// </summary>
        [XmlElement("projectedY")]
        public LengthMeasure ProjectedY {
            get {
                return projectedYField;
            } 
            set { 
                if (northingFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Northing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Southing is already set");
                if (westingFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Westing is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property ProjectedY when property LocalY is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Longitude is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Easting is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property ProjectedY when property LocalX is already set");
                projectedYField = value;
                projectedYFieldSpecified = true;
            }
        }

        private LengthMeasure projectedYField; 
        private bool projectedYFieldSpecified = false; 

        /// <summary>
        /// The local (engineering) X coordinate. The CRS will define the orientation of the axis. If you set this property, you must also set LocalY.
        /// </summary>
        [XmlElement("localX")]
        public LengthMeasure LocalX {
            get {
                return localXField;
            } 
            set { 
                if (projectedXFieldSpecified) throw new Exception("Cannot set property LocalX when property ProjectedX is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property LocalX when property ProjectedY is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property LocalX when property Northing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property LocalX when property Southing is already set");
                if (westingFieldSpecified) throw new Exception("Cannot set property LocalX when property Westing is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property LocalX when property Longitude is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property LocalX when property Easting is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property LocalX when property Latitude is already set");
                localXField = value;
                localXFieldSpecified = true;
            }
        }

        private LengthMeasure localXField; 
        private bool localXFieldSpecified = false; 

        /// <summary>
        /// The local (engineering) Y coordinate. The CRS will define the orientation of the axis. If you set this property, you must also set LocalX.
        /// </summary>
        [XmlElement("localY")]
        public LengthMeasure LocalY {
            get {
                return localYField;
            } 
            set { 
                if (projectedXFieldSpecified) throw new Exception("Cannot set property LocalY when property ProjectedX is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property LocalY when property ProjectedY is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property LocalY when property Northing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property LocalY when property Southing is already set");
                if (westingFieldSpecified) throw new Exception("Cannot set property LocalY when property Westing is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property LocalY when property Longitude is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property LocalY when property Easting is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property LocalY when property Latitude is already set");
                localYField = value;
                localYFieldSpecified = true;
            }
        }

        private LengthMeasure localYField; 
        private bool localYFieldSpecified = false; 


		
        [XmlIgnore]
		[Browsable(false)]
        public List<ItemsChoiceType> ItemsElementName { get; set; }
        /// <summary>
        /// Flag indicating (if "true" or "1") that this pair of values was the original data given for the location. If the pair of values was calculated from an original pair of values, this flag should be "false" (or "0"), or not present.
        /// </summary>
        [XmlElement("original")]
        public Boolean? Original {
            get {
                return originalField;
            } 
            set { 
                originalField = value;
                this.OriginalSpecified = true;
            }
        }

        private Boolean? originalField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean OriginalSpecified { get; set; }
        /// <summary>
        /// A Comment, generally given to help the reader interpret the coordinates if the CRS and the chosen pair do not make them clear.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_refWellboreTrajectoryStation xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellboreTrajectoryStation", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the cs_refWellboreTrajectoryStation xsd type.")]
    public partial class RefWellboreTrajectoryStation : Object 
    {

        /// <summary>
        /// A pointer to the trajectoryStation within the parent trajectory. This is a special case where we only use a uid for the pointer. The natural identity of a station is its physical characteristics (e.g., md).
        /// </summary>
        [XmlElement("stationReference")]
        public String StationReference { get; set; }
        /// <summary>
        /// A pointer to the trajectory within the parent wellbore. This trajectory contains the trajectoryStation.
        /// </summary>
        [XmlElement("trajectoryParent")]
        public RefNameString TrajectoryPluggedAndAbandonedrent { get; set; }
        /// <summary>
        /// A pointer to the wellbore that contains the trajectory. This is not needed unless the trajectory is outside the context of a common parent wellbore.
        /// </summary>
        [XmlElement("wellboreParent")]
        public RefNameString WellborePluggedAndAbandonedrent { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Slow Circulation Rates (SCR) Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_scr", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Slow Circulation Rates (SCR) Component Schema")]
    public partial class Scr : Object 
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// This is a pointer to the corresponding pump on the rig.
        /// </summary>
        [XmlElement("pump")]
        public RefPositiveCount Pump { get; set; }
        /// <summary>
        /// Type of slow circulation rate. 
        /// </summary>
        [XmlElement("typeScr")]
        public ScrType? TypeScr { get; set; }
        /// <summary>
        /// Pump stroke rate. 
        /// </summary>
        [XmlElement("rateStroke")]
        public AnglePerTimeMeasure RateStroke { get; set; }
        /// <summary>
        /// Recorded pump pressure for the stroke rate. 
        /// </summary>
        [XmlElement("presRecorded")]
        public PressureMeasure PresRecorded { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refPositiveCount xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refPositiveCount", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the refPositiveCount xsd type.")]
    public partial class RefPositiveCount : Object 
    {
        public RefPositiveCount() {}
        public RefPositiveCount(Int16 value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the node referenced by the index value. This attribute is required within the context of a WITSML server.
        /// </summary>
        [XmlAttribute("uidRef")]
        public String UidRef { get; set; }
		
        [XmlText]
        public Int16 Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Pit Volume Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pitVolume", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Pit Volume Component Schema")]
    public partial class PitVolume : Object 
    {

        /// <summary>
        /// This is a pointer to the corresponding pit on the rig.
        /// </summary>
        [XmlElement("pit")]
        public RefPositiveCount Pit { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Volume of fluid in pit. 
        /// </summary>
        [XmlElement("volPit")]
        public VolumeMeasure VolPit { get; set; }
        /// <summary>
        /// Density of fluid in pit. 
        /// </summary>
        [XmlElement("densFluid")]
        public DensityMeasure DensFluid { get; set; }
        /// <summary>
        /// Fluid description. 
        /// </summary>
        [XmlElement("descFluid")]
        public String DescFluid { get; set; }
        /// <summary>
        /// Funnel viscosity in seconds. 
        /// </summary>
        [XmlElement("visFunnel")]
        public TimeMeasure VisFunnel { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Mud Volume Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudVolume", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Mud Volume Component Schema")]
    public partial class MudVolume : Object 
    {

        /// <summary>
        /// Total volume of mud at start of report interval (including pits and hole). 
        /// </summary>
        [XmlElement("volTotMudStart")]
        public VolumeMeasure VolTotMudStart { get; set; }
        /// <summary>
        /// Volume of mud dumped. 
        /// </summary>
        [XmlElement("volMudDumped")]
        public VolumeMeasure VolMudDumped { get; set; }
        /// <summary>
        /// Volume of mud received from mud warehouse. 
        /// </summary>
        [XmlElement("volMudReceived")]
        public VolumeMeasure VolMudReceived { get; set; }
        /// <summary>
        /// Volume of mud returned to mud warehouse. 
        /// </summary>
        [XmlElement("volMudReturned")]
        public VolumeMeasure VolMudReturned { get; set; }
        /// <summary>
        /// Mud losses detailed breakdown between Surface and Down Hole. 
        /// </summary>
        [XmlElement("mudLosses")]
        public MudLosses MudLosses { get; set; }
        /// <summary>
        /// Volume of mud built. 
        /// </summary>
        [XmlElement("volMudBuilt")]
        public VolumeMeasure VolMudBuilt { get; set; }
        /// <summary>
        /// Volume of mud contained within active string. 
        /// </summary>
        [XmlElement("volMudString")]
        public VolumeMeasure VolMudString { get; set; }
        /// <summary>
        /// Volume of mud contained in casing annulus. 
        /// </summary>
        [XmlElement("volMudCasing")]
        public VolumeMeasure VolMudCAsing { get; set; }
        /// <summary>
        /// Volume of mud contained in open hole annulus. 
        /// </summary>
        [XmlElement("volMudHole")]
        public VolumeMeasure VolMudHole { get; set; }
        /// <summary>
        /// Volume of mud contained in riser section annulus. 
        /// </summary>
        [XmlElement("volMudRiser")]
        public VolumeMeasure VolMudRiser { get; set; }
        /// <summary>
        /// Total volume of mud at the end of the report interval (including pits and hole). 
        /// </summary>
        [XmlElement("volTotMudEnd")]
        public VolumeMeasure VolTotMudEnd { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Mud Losses Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudLosses", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Mud Losses Component Schema")]
    public partial class MudLosses : Object 
    {

        /// <summary>
        /// Volume of mud lost at shakers (at surface). 
        /// </summary>
        [XmlElement("volLostShakerSurf")]
        public VolumeMeasure VolLostShakerSurf { get; set; }
        /// <summary>
        /// Volume of mud lost in mud cleaning equipment (at surface). 
        /// </summary>
        [XmlElement("volLostMudCleanerSurf")]
        public VolumeMeasure VolLostMudCleanerSurf { get; set; }
        /// <summary>
        /// Volume of mud lost in pit room (at surface). 
        /// </summary>
        [XmlElement("volLostPitsSurf")]
        public VolumeMeasure VolLostPitsSurf { get; set; }
        /// <summary>
        /// Volume of mud lost while tripping (at surface). 
        /// </summary>
        [XmlElement("volLostTrippingSurf")]
        public VolumeMeasure VolLostTrippingSurf { get; set; }
        /// <summary>
        /// Surface volume lost other location. 
        /// </summary>
        [XmlElement("volLostOtherSurf")]
        public VolumeMeasure VolLostOtherSurf { get; set; }
        /// <summary>
        /// Total volume of mud lost at surface. 
        /// </summary>
        [XmlElement("volTotMudLostSurf")]
        public VolumeMeasure VolTotMudLostSurf { get; set; }
        /// <summary>
        /// Mud volume lost downhole while circulating. 
        /// </summary>
        [XmlElement("volLostCircHole")]
        public VolumeMeasure VolLostCircHole { get; set; }
        /// <summary>
        /// Mud volume lost downhole while running casing. 
        /// </summary>
        [XmlElement("volLostCsgHole")]
        public VolumeMeasure VolLostCsgHole { get; set; }
        /// <summary>
        /// Mud volume lost downhole while cementing. 
        /// </summary>
        [XmlElement("volLostCmtHole")]
        public VolumeMeasure VolLostCmtHole { get; set; }
        /// <summary>
        /// Mud volume lost downhole behind casing. 
        /// </summary>
        [XmlElement("volLostBhdCsgHole")]
        public VolumeMeasure VolLostBhdCsgHole { get; set; }
        /// <summary>
        /// Mud volume lost downhole during abandonment. 
        /// </summary>
        [XmlElement("volLostAbandonHole")]
        public VolumeMeasure VolLostAbandonHole { get; set; }
        /// <summary>
        /// Mud volume lost downhole from other location. 
        /// </summary>
        [XmlElement("volLostOtherHole")]
        public VolumeMeasure VolLostOtherHole { get; set; }
        /// <summary>
        /// Total volume of mud lost downhole. 
        /// </summary>
        [XmlElement("volTotMudLostHole")]
        public VolumeMeasure VolTotMudLostHole { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Inventory Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_inventory", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Inventory Component Schema ")]
    public partial class Inventory : Object 
    {

        /// <summary>
        /// Name or type of inventory item. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Weight per item unit. 
        /// </summary>
        [XmlElement("itemWtPerUnit")]
        public MassMeasure ItemWeightPerUnit {
            get {
                return itemWtPerUnitField;
            } 
            set { 
                if (itemVolPerUnitFieldSpecified) throw new Exception("Cannot set property ItemWeightPerUnit when property ItemVolPerUnit is already set");
                itemWtPerUnitField = value;
                itemWtPerUnitFieldSpecified = true;
            }
        }

        private MassMeasure itemWtPerUnitField; 
        private bool itemWtPerUnitFieldSpecified = false; 

        /// <summary>
        /// Volume per item unit. 
        /// </summary>
        [XmlElement("itemVolPerUnit")]
        public VolumeMeasure ItemVolPerUnit {
            get {
                return itemVolPerUnitField;
            } 
            set { 
                if (itemWtPerUnitFieldSpecified) throw new Exception("Cannot set property ItemVolPerUnit when property ItemWeightPerUnit is already set");
                itemVolPerUnitField = value;
                itemVolPerUnitFieldSpecified = true;
            }
        }

        private VolumeMeasure itemVolPerUnitField; 
        private bool itemVolPerUnitFieldSpecified = false; 


        /// <summary>
        /// Price per item unit, assume same currency for all items. 
        /// </summary>
        [XmlElement("pricePerUnit")]
        public Cost PricePerUnit { get; set; }
        /// <summary>
        /// Start quantity for report interval. 
        /// </summary>
        [XmlElement("qtyStart")]
        public Int16? QtyStart {
            get {
                return qtyStartField;
            } 
            set { 
                qtyStartField = value;
                this.QtyStartSpecified = true;
            }
        }

        private Int16? qtyStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyStartSpecified { get; set; }
        /// <summary>
        /// Daily quantity adjustment/correction. 
        /// </summary>
        [XmlElement("qtyAdjustment")]
        public Int32? QtyAdjustment {
            get {
                return qtyAdjustmentField;
            } 
            set { 
                qtyAdjustmentField = value;
                this.QtyAdjustmentSpecified = true;
            }
        }

        private Int32? qtyAdjustmentField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyAdjustmentSpecified { get; set; }
        /// <summary>
        /// Quantity received at site. 
        /// </summary>
        [XmlElement("qtyReceived")]
        public Int16? QtyReceived {
            get {
                return qtyReceivedField;
            } 
            set { 
                qtyReceivedField = value;
                this.QtyReceivedSpecified = true;
            }
        }

        private Int16? qtyReceivedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyReceivedSpecified { get; set; }
        /// <summary>
        /// Quantity returned to base from site. 
        /// </summary>
        [XmlElement("qtyReturned")]
        public Int16? QtyReturned {
            get {
                return qtyReturnedField;
            } 
            set { 
                qtyReturnedField = value;
                this.QtyReturnedSpecified = true;
            }
        }

        private Int16? qtyReturnedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyReturnedSpecified { get; set; }
        /// <summary>
        /// Quantity used for the report period 
        /// </summary>
        [XmlElement("qtyUsed")]
        public Int16? QtyUsed {
            get {
                return qtyUsedField;
            } 
            set { 
                qtyUsedField = value;
                this.QtyUsedSpecified = true;
            }
        }

        private Int16? qtyUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyUsedSpecified { get; set; }
        /// <summary>
        /// Cost for the product for the interval. 
        /// </summary>
        [XmlElement("costItem")]
        public Cost CostItem { get; set; }
        /// <summary>
        /// Amount of item remaining on location after all adjustments for the report interval. 
        /// </summary>
        [XmlElement("qtyOnLocation")]
        public Int16? QtyOnLocation {
            get {
                return qtyOnLocationField;
            } 
            set { 
                qtyOnLocationField = value;
                this.QtyOnLocationSpecified = true;
            }
        }

        private Int16? qtyOnLocationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyOnLocationSpecified { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Rig Response Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rigResponse", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Rig Response Component Schema")]
    public partial class RigResponse : Object 
    {

		/// <summary>
        /// Vector of the tension on anchors #1 to #n. 
        /// </summary>
        [XmlElement("anchorTension")]
        public List<IndexedObject> AnchorTension { get; set; }
		/// <summary>
        /// Vector of the angles of the anchors #1 to #n. 
        /// </summary>
        [XmlElement("anchorAngle")]
        public List<IndexedObject> AnchorAngle { get; set; }
        /// <summary>
        /// Direction, relative to true north, to which the rig is facing. 
        /// </summary>
        [XmlElement("rigHeading")]
        public PlaneAngleMeasure RigHeading { get; set; }
        /// <summary>
        /// Maximum amplitude of the vertical motion of the rig. 
        /// </summary>
        [XmlElement("rigHeave")]
        public LengthMeasure RigHeave { get; set; }
        /// <summary>
        /// Measure of the fore-aft rotational movement of the rig due the combined effects of wind and waves; measured as the angle from horizontal 
        /// </summary>
        [XmlElement("rigPitchAngle")]
        public PlaneAngleMeasure RigPitchAngle { get; set; }
        /// <summary>
        /// Measure of the side-to-side rotational movement of the rig due the combined effects of wind and waves; measured as the angle from vertical 
        /// </summary>
        [XmlElement("rigRollAngle")]
        public PlaneAngleMeasure RigRollAngle { get; set; }
        /// <summary>
        /// Angle of the marine riser with the vertical. 
        /// </summary>
        [XmlElement("riserAngle")]
        public PlaneAngleMeasure RiserAngle { get; set; }
        /// <summary>
        /// Direction of the marine riser. 
        /// </summary>
        [XmlElement("riserDirection")]
        public PlaneAngleMeasure RiserDirection { get; set; }
        /// <summary>
        /// Tension of the marine riser. 
        /// </summary>
        [XmlElement("riserTension")]
        public ForceMeasure RiserTension { get; set; }
        /// <summary>
        /// Current temporary load on the rig deck. 
        /// </summary>
        [XmlElement("variableDeckLoad")]
        public ForceMeasure VariableDeckLoad { get; set; }
        /// <summary>
        /// Total deck load. 
        /// </summary>
        [XmlElement("totalDeckLoad")]
        public ForceMeasure TotalDeckLoad { get; set; }
        /// <summary>
        /// Direction of the guide base. 
        /// </summary>
        [XmlElement("guideBaseAngle")]
        public PlaneAngleMeasure GuideBaseAngle { get; set; }
        /// <summary>
        /// Angle between riser and blow out preventer at the flex joint. 
        /// </summary>
        [XmlElement("ballJointAngle")]
        public PlaneAngleMeasure BallJointAngle { get; set; }
        /// <summary>
        /// Direction of the ball joint. 
        /// </summary>
        [XmlElement("ballJointDirection")]
        public PlaneAngleMeasure BallJointDirection { get; set; }
        /// <summary>
        /// Horizontal displacement of the rig relative to the wellhead. 
        /// </summary>
        [XmlElement("offsetRig")]
        public LengthMeasure OffsetRig { get; set; }
        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
        [XmlElement("loadLeg1")]
        public ForceMeasure LoadLeg1 { get; set; }
        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
        [XmlElement("loadLeg2")]
        public ForceMeasure LoadLeg2 { get; set; }
        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
        [XmlElement("loadLeg3")]
        public ForceMeasure LoadLeg3 { get; set; }
        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
        [XmlElement("loadLeg4")]
        public ForceMeasure LoadLeg4 { get; set; }
        /// <summary>
        /// Penetration of leg into seabed. 
        /// </summary>
        [XmlElement("penetrationLeg1")]
        public LengthMeasure PenetrationLeg1 { get; set; }
        /// <summary>
        /// Penetration of leg into seabed. 
        /// </summary>
        [XmlElement("penetrationLeg2")]
        public LengthMeasure PenetrationLeg2 { get; set; }
        /// <summary>
        /// Penetration of leg into seabed 
        /// </summary>
        [XmlElement("penetrationLeg3")]
        public LengthMeasure PenetrationLeg3 { get; set; }
        /// <summary>
        /// Penetration of leg into seabed 
        /// </summary>
        [XmlElement("penetrationLeg4")]
        public LengthMeasure PenetrationLeg4 { get; set; }
        /// <summary>
        /// Vessel displacement (in water). 
        /// </summary>
        [XmlElement("dispRig")]
        public LengthMeasure DispRig { get; set; }
        /// <summary>
        /// Mean draft at mid-section. 
        /// </summary>
        [XmlElement("meanDraft")]
        public LengthMeasure MeanDraft { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Pump Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pumpOp", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Pump Component Schema")]
    public partial class PumpOp : Object 
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// This is a pointer to the corresponding pump on the rig. 
        /// </summary>
        [XmlElement("pump")]
        public RefPositiveCount Pump { get; set; }
        /// <summary>
        /// Type of pump operation. 
        /// </summary>
        [XmlElement("typeOperation")]
        public PumpOpType? TypeOperatingeration {
            get {
                return typeOperationField;
            } 
            set { 
                typeOperationField = value;
                this.TypeOperatingerationSpecified = true;
            }
        }

        private PumpOpType? typeOperationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeOperatingerationSpecified { get; set; }
        /// <summary>
        /// Liner size. 
        /// </summary>
        [XmlElement("idLiner")]
        public LengthMeasure LinerSize { get; set; }
        /// <summary>
        /// Stroke Length. 
        /// </summary>
        [XmlElement("lenStroke")]
        public LengthMeasure LenStroke { get; set; }
        /// <summary>
        /// Pump rate (Strokes per minute). 
        /// </summary>
        [XmlElement("rateStroke")]
        public AnglePerTimeMeasure RateStroke { get; set; }
        /// <summary>
        /// Pump pressure recorded. 
        /// </summary>
        [XmlElement("pressure")]
        public PressureMeasure Pressure { get; set; }
        /// <summary>
        /// Pump efficiency. 
        /// </summary>
        [XmlElement("pcEfficiency")]
        public RelativePowerMeasure PercentEfficiency { get; set; }
        /// <summary>
        /// Pump output (incl. for efficiency). 
        /// </summary>
        [XmlElement("pumpOutput")]
        public VolumeFlowRateMeasure PumpOutput { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Shaker Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shakerOp", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Shaker Component Schema")]
    public partial class ShakerOp : Object 
    {

        /// <summary>
        /// A pointer to the shaker that is characterized by this report. 
        /// </summary>
        [XmlElement("shaker")]
        public RefNameString Shaker { get; set; }
        /// <summary>
        /// Hole measured depth at time of measurement. 
        /// </summary>
        [XmlElement("mdHole")]
        public MeasuredDepthCoord MDHole { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Hours run for this operation. 
        /// </summary>
        [XmlElement("hoursRun")]
        public TimeMeasure HoursRun { get; set; }
        /// <summary>
        /// Percent of screen covered by cuttings. 
        /// </summary>
        [XmlElement("pcScreenCovered")]
        public AreaPerAreaMeasure PercentScreenCovered { get; set; }
        /// <summary>
        /// Set of shaker screen records for the operation. 
        /// </summary>
        [XmlElement("shakerScreen")]
        public ShakerScreen ShakerScreen { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Shaker Screen Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shakerScreen", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Shaker Screen Component Schema")]
    public partial class ShakerScreen : Object 
    {

        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// Date and time activities were completed. 
        /// </summary>
        [XmlElement("dTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set { 
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
            }
        }

        private DateTime? dTimEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndSpecified { get; set; }
        /// <summary>
        /// Deck number mesh installed on. 
        /// </summary>
        [XmlElement("numDeck")]
        public Int16? NumDeck {
            get {
                return numDeckField;
            } 
            set { 
                numDeckField = value;
                this.NumDeckSpecified = true;
            }
        }

        private Int16? numDeckField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumDeckSpecified { get; set; }
        /// <summary>
        /// Mesh size in the X direction. 
        /// </summary>
        [XmlElement("meshX")]
        public LengthMeasure MeshX { get; set; }
        /// <summary>
        /// Mesh size in the Y direction. 
        /// </summary>
        [XmlElement("meshY")]
        public LengthMeasure MeshY { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Shaker screen cut point - the maximum size that will pass through the screen.
        /// </summary>
        [XmlElement("cutPoint")]
        public LengthMeasure CutPoint { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Health, Safety and Environment Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_hse", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Health, Safety and Environment Component Schema")]
    public partial class Hse : Object 
    {

        /// <summary>
        /// Incident free duration (commonly in days). 
        /// </summary>
        [XmlElement("daysIncFree")]
        public TimeMeasure DaysIncFree { get; set; }
		/// <summary>
        /// Incident report occurrences description. 
        /// </summary>
        [XmlElement("incident")]
        public List<Incident> Incident { get; set; }
        /// <summary>
        /// Last casing pressure test date and time. 
        /// </summary>
        [XmlElement("lastCsgPresTest")]
        public DateTime? LastCsgPresTest {
            get {
                return lastCsgPresTestField;
            } 
            set { 
                lastCsgPresTestField = value;
                this.LastCsgPresTestSpecified = true;
            }
        }

        private DateTime? lastCsgPresTestField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastCsgPresTestSpecified { get; set; }
        /// <summary>
        /// Last casing pressure test pressure. 
        /// </summary>
        [XmlElement("presLastCsg")]
        public PressureMeasure PresLastCsg { get; set; }
        /// <summary>
        /// Last blow out preventer pressure test. 
        /// </summary>
        [XmlElement("lastBopPresTest")]
        public DateTime? LastBopPresTest {
            get {
                return lastBopPresTestField;
            } 
            set { 
                lastBopPresTestField = value;
                this.LastBopPresTestSpecified = true;
            }
        }

        private DateTime? lastBopPresTestField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastBopPresTestSpecified { get; set; }
        /// <summary>
        /// Next blow out preventer pressure test. 
        /// </summary>
        [XmlElement("nextBopPresTest")]
        public DateTime? NextBopPresTest {
            get {
                return nextBopPresTestField;
            } 
            set { 
                nextBopPresTestField = value;
                this.NextBopPresTestSpecified = true;
            }
        }

        private DateTime? nextBopPresTestField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NextBopPresTestSpecified { get; set; }
        /// <summary>
        /// Standpipe manifold pressure tested to. 
        /// </summary>
        [XmlElement("presStdPipe")]
        public PressureMeasure PresStdPipe { get; set; }
        /// <summary>
        /// Kelly hose pressure tested to. 
        /// </summary>
        [XmlElement("presKellyHose")]
        public PressureMeasure PresKellyHose { get; set; }
        /// <summary>
        /// Blow out preventer diverter pressure tested to. 
        /// </summary>
        [XmlElement("presDiverter")]
        public PressureMeasure PresDivisionerter { get; set; }
        /// <summary>
        /// Blow out preventer annular preventer pressure tested to. 
        /// </summary>
        [XmlElement("presAnnular")]
        public PressureMeasure PresAnnular { get; set; }
        /// <summary>
        /// Blow out preventer ram pressure tested to. 
        /// </summary>
        [XmlElement("presRams")]
        public PressureMeasure PresRams { get; set; }
        /// <summary>
        /// Choke line pressure tested to. 
        /// </summary>
        [XmlElement("presChokeLine")]
        public PressureMeasure PresChokeLine { get; set; }
        /// <summary>
        /// Choke line manifold pressure tested to. 
        /// </summary>
        [XmlElement("presChokeMan")]
        public PressureMeasure PresChokeMan { get; set; }
        /// <summary>
        /// Last fire or boat drill. 
        /// </summary>
        [XmlElement("lastFireBoatDrill")]
        public DateTime? LastFireBoatDrill {
            get {
                return lastFireBoatDrillField;
            } 
            set { 
                lastFireBoatDrillField = value;
                this.LastFireBoatDrillSpecified = true;
            }
        }

        private DateTime? lastFireBoatDrillField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastFireBoatDrillSpecified { get; set; }
        /// <summary>
        /// Last abandonment drill. 
        /// </summary>
        [XmlElement("lastAbandonDrill")]
        public DateTime? LastAbandonDrill {
            get {
                return lastAbandonDrillField;
            } 
            set { 
                lastAbandonDrillField = value;
                this.LastAbandonDrillSpecified = true;
            }
        }

        private DateTime? lastAbandonDrillField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastAbandonDrillSpecified { get; set; }
        /// <summary>
        /// Last rig inspection/check. 
        /// </summary>
        [XmlElement("lastRigInspection")]
        public DateTime? LastRigInspection {
            get {
                return lastRigInspectionField;
            } 
            set { 
                lastRigInspectionField = value;
                this.LastRigInspectionSpecified = true;
            }
        }

        private DateTime? lastRigInspectionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastRigInspectionSpecified { get; set; }
        /// <summary>
        /// Last safety meeting. 
        /// </summary>
        [XmlElement("lastSafetyMeeting")]
        public DateTime? LastSafetyMeeting {
            get {
                return lastSafetyMeetingField;
            } 
            set { 
                lastSafetyMeetingField = value;
                this.LastSafetyMeetingSpecified = true;
            }
        }

        private DateTime? lastSafetyMeetingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastSafetyMeetingSpecified { get; set; }
        /// <summary>
        /// Last safety inspection. 
        /// </summary>
        [XmlElement("lastSafetyInspection")]
        public DateTime? LastSafetyInspection {
            get {
                return lastSafetyInspectionField;
            } 
            set { 
                lastSafetyInspectionField = value;
                this.LastSafetyInspectionSpecified = true;
            }
        }

        private DateTime? lastSafetyInspectionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastSafetyInspectionSpecified { get; set; }
        /// <summary>
        /// Last trip drill. 
        /// </summary>
        [XmlElement("lastTripDrill")]
        public DateTime? LastTripDrill {
            get {
                return lastTripDrillField;
            } 
            set { 
                lastTripDrillField = value;
                this.LastTripDrillSpecified = true;
            }
        }

        private DateTime? lastTripDrillField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastTripDrillSpecified { get; set; }
        /// <summary>
        /// Last diverter drill. 
        /// </summary>
        [XmlElement("lastDiverterDrill")]
        public DateTime? LastDivisionerterDrill {
            get {
                return lastDiverterDrillField;
            } 
            set { 
                lastDiverterDrillField = value;
                this.LastDivisionerterDrillSpecified = true;
            }
        }

        private DateTime? lastDiverterDrillField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastDivisionerterDrillSpecified { get; set; }
        /// <summary>
        /// Last blow out preventer drill. 
        /// </summary>
        [XmlElement("lastBopDrill")]
        public DateTime? LastBopDrill {
            get {
                return lastBopDrillField;
            } 
            set { 
                lastBopDrillField = value;
                this.LastBopDrillSpecified = true;
            }
        }

        private DateTime? lastBopDrillField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastBopDrillSpecified { get; set; }
        /// <summary>
        /// Governmental regulatory inspection agency inspection? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("regAgencyInsp")]
        public Boolean? RegAgencyInsp {
            get {
                return regAgencyInspField;
            } 
            set { 
                regAgencyInspField = value;
                this.RegAgencyInspSpecified = true;
            }
        }

        private Boolean? regAgencyInspField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RegAgencyInspSpecified { get; set; }
        /// <summary>
        /// Inspection non-compliance notice served? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("nonComplianceIssued")]
        public Boolean? NonComplianceIssued {
            get {
                return nonComplianceIssuedField;
            } 
            set { 
                nonComplianceIssuedField = value;
                this.NonComplianceIssuedSpecified = true;
            }
        }

        private Boolean? nonComplianceIssuedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NonComplianceIssuedSpecified { get; set; }
        /// <summary>
        /// Number of Health, Safety and Environment incidents reported. 
        /// </summary>
        [XmlElement("numStopCards")]
        public Int16? NumStopCArds {
            get {
                return numStopCardsField;
            } 
            set { 
                numStopCardsField = value;
                this.NumStopCArdsSpecified = true;
            }
        }

        private Int16? numStopCardsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumStopCArdsSpecified { get; set; }
        /// <summary>
        /// Daily whole mud discarded. 
        /// </summary>
        [XmlElement("fluidDischarged")]
        public VolumeMeasure FluidDischarged { get; set; }
        /// <summary>
        /// Volume of cuttings discharged. 
        /// </summary>
        [XmlElement("volCtgDischarged")]
        public VolumeMeasure VolCTgDischarged { get; set; }
        /// <summary>
        /// Oil on cuttings daily discharge. 
        /// </summary>
        [XmlElement("volOilCtgDischarge")]
        public VolumeMeasure VolOilCTgDischarge { get; set; }
        /// <summary>
        /// Volume of sanitary waste discharged. 
        /// </summary>
        [XmlElement("wasteDischarged")]
        public VolumeMeasure WasteDischarged { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations HSE Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_incident", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations HSE Component Schema")]
    public partial class Incident : Object 
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// Name of person who prepared incident report. 
        /// </summary>
        [XmlElement("reporter")]
        public String Reporter { get; set; }
        /// <summary>
        /// Number of personnel with minor injuries. 
        /// </summary>
        [XmlElement("numMinorInjury")]
        public Int16? NumMinorInjury {
            get {
                return numMinorInjuryField;
            } 
            set { 
                numMinorInjuryField = value;
                this.NumMinorInjurySpecified = true;
            }
        }

        private Int16? numMinorInjuryField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumMinorInjurySpecified { get; set; }
        /// <summary>
        /// Number of personnel with major injuries. 
        /// </summary>
        [XmlElement("numMajorInjury")]
        public Int16? NumMajorInjury {
            get {
                return numMajorInjuryField;
            } 
            set { 
                numMajorInjuryField = value;
                this.NumMajorInjurySpecified = true;
            }
        }

        private Int16? numMajorInjuryField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumMajorInjurySpecified { get; set; }
        /// <summary>
        /// Number of personnel killed in incident. 
        /// </summary>
        [XmlElement("numFatality")]
        public Int16? NumFatality {
            get {
                return numFatalityField;
            } 
            set { 
                numFatalityField = value;
                this.NumFatalitySpecified = true;
            }
        }

        private Int16? numFatalityField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumFatalitySpecified { get; set; }
        /// <summary>
        /// Near miss incident occurrence? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("isNearMiss")]
        public Boolean? IsNearMiss {
            get {
                return isNearMissField;
            } 
            set { 
                isNearMissField = value;
                this.IsNearMissSpecified = true;
            }
        }

        private Boolean? isNearMissField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsNearMissSpecified { get; set; }
        /// <summary>
        /// Location description. 
        /// </summary>
        [XmlElement("descLocation")]
        public String DescLocation { get; set; }
        /// <summary>
        /// Accident description. 
        /// </summary>
        [XmlElement("descAccident")]
        public String DescAccident { get; set; }
        /// <summary>
        /// Remedial action description. 
        /// </summary>
        [XmlElement("remedialActionDesc")]
        public String RemedialActionDesc { get; set; }
        /// <summary>
        /// Cause description. 
        /// </summary>
        [XmlElement("causeDesc")]
        public String CAuseDesc { get; set; }
        /// <summary>
        /// Number of hours lost due to incident. 
        /// </summary>
        [XmlElement("eTimLostGross")]
        public TimeMeasure ETimeLostGross { get; set; }
        /// <summary>
        /// Gross estimate of cost incurred due to incident. 
        /// </summary>
        [XmlElement("costLostGross")]
        public Cost CostLostGross { get; set; }
        /// <summary>
        /// Name of company that caused incident. 
        /// </summary>
        [XmlElement("responsibleCompany")]
        public String ResponsibleCompany { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Personnel Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_personnel", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Personnel Component Schema")]
    public partial class Personnel : Object 
    {

        /// <summary>
        /// Name of company. 
        /// </summary>
        [XmlElement("company")]
        public String Company { get; set; }
        /// <summary>
        /// Service provided by the company. 
        /// </summary>
        [XmlElement("typeService")]
        public String TypeService { get; set; }
        /// <summary>
        /// Number of people on board for that company. 
        /// </summary>
        [XmlElement("numPeople")]
        public Int16? NumPeople {
            get {
                return numPeopleField;
            } 
            set { 
                numPeopleField = value;
                this.NumPeopleSpecified = true;
            }
        }

        private Int16? numPeopleField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumPeopleSpecified { get; set; }
        /// <summary>
        /// Total time worked by the company (commonly in hours). 
        /// </summary>
        [XmlElement("totalTime")]
        public TimeMeasure TotalTime { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Support Craft Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_supportCraft", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Support Craft Component Schema")]
    public partial class SupportCraft : Object 
    {

        /// <summary>
        /// Human recognizable context for support craft. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Type of support craft. 
        /// </summary>
        [XmlElement("typeSuppCraft")]
        public SupportCraftType? TypeSuppCraft {
            get {
                return typeSuppCraftField;
            } 
            set { 
                typeSuppCraftField = value;
                this.TypeSuppCraftSpecified = true;
            }
        }

        private SupportCraftType? typeSuppCraftField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeSuppCraftSpecified { get; set; }
        /// <summary>
        /// Date and time when vehicle arrived at rig site. 
        /// </summary>
        [XmlElement("dTimArrived")]
        public DateTime? DateTimeArrived {
            get {
                return dTimArrivedField;
            } 
            set { 
                dTimArrivedField = value;
                this.DateTimeArrivedSpecified = true;
            }
        }

        private DateTime? dTimArrivedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeArrivedSpecified { get; set; }
        /// <summary>
        /// Date and time when vehicle departed rig site. 
        /// </summary>
        [XmlElement("dTimDeparted")]
        public DateTime? DateTimeDeparted {
            get {
                return dTimDepartedField;
            } 
            set { 
                dTimDepartedField = value;
                this.DateTimeDepartedSpecified = true;
            }
        }

        private DateTime? dTimDepartedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeDepartedSpecified { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Weather Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_weather", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Operations Weather Component Schema")]
    public partial class Weather : Object 
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// Name of company that supplied the data. 
        /// </summary>
        [XmlElement("agency")]
        public String Agency { get; set; }
        /// <summary>
        /// Atmospheric pressure. 
        /// </summary>
        [XmlElement("barometricPressure")]
        public PressureMeasure BarometricPressure { get; set; }
        /// <summary>
        /// The Beaufort wind scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th Century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions. 
        /// </summary>
        [XmlElement("beaufortScaleNumber")]
        public Int16? BeaufortScaleNumber {
            get {
                return beaufortScaleNumberField;
            } 
            set { 
                beaufortScaleNumberField = value;
                this.BeaufortScaleNumberSpecified = true;
            }
        }

        private Int16? beaufortScaleNumberField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BeaufortScaleNumberSpecified { get; set; }
        /// <summary>
        /// Minimum temperature above ground. Temperature of the atmosphere. 
        /// </summary>
        [XmlElement("tempSurfaceMn")]
        public ThermodynamicTemperatureMeasure TempSurfaceMin { get; set; }
        /// <summary>
        /// Maximum temperature above ground. 
        /// </summary>
        [XmlElement("tempSurfaceMx")]
        public ThermodynamicTemperatureMeasure TempSurfaceMax { get; set; }
        /// <summary>
        /// A measure of the combined chilling effect of wind and low temperature on living things, also named chill factor, e.g., according to US weather service table, an air temperature of 30 degF with a 10 mi/h corresponds to a windchill of 22 degF. 
        /// </summary>
        [XmlElement("tempWindChill")]
        public ThermodynamicTemperatureMeasure TempWindChill { get; set; }
        /// <summary>
        /// Sea temperature. 
        /// </summary>
        [XmlElement("tempsea")]
        public ThermodynamicTemperatureMeasure Tempsea { get; set; }
        /// <summary>
        /// Horizontal visibility. 
        /// </summary>
        [XmlElement("visibility")]
        public LengthMeasure Visibility { get; set; }
        /// <summary>
        /// The direction from which the waves are coming, measured from true north. 
        /// </summary>
        [XmlElement("aziWave")]
        public PlaneAngleMeasure AziWave { get; set; }
        /// <summary>
        /// Average height of the waves. 
        /// </summary>
        [XmlElement("htWave")]
        public LengthMeasure HeightWave { get; set; }
        /// <summary>
        /// An average of the higher 1/3 of the wave heights passing during a sample period (typically 20 to 30 minutes). 
        /// </summary>
        [XmlElement("significantWave")]
        public LengthMeasure SignificantWave { get; set; }
        /// <summary>
        /// The maximum wave height.
        /// </summary>
        [XmlElement("maxWave")]
        public LengthMeasure MaxWave { get; set; }
        /// <summary>
        /// The elapsed time between the passing of two wave tops. 
        /// </summary>
        [XmlElement("periodWave")]
        public TimeMeasure PeriodWave { get; set; }
        /// <summary>
        /// The direction from which the wind is blowing, measured from true north. 
        /// </summary>
        [XmlElement("aziWind")]
        public PlaneAngleMeasure AziWind { get; set; }
        /// <summary>
        /// Wind speed. 
        /// </summary>
        [XmlElement("velWind")]
        public VelocityMeasure VelWind { get; set; }
        /// <summary>
        /// Type of precipitation. 
        /// </summary>
        [XmlElement("typePrecip")]
        public String TypePrecip { get; set; }
        /// <summary>
        /// Amount of precipitation. 
        /// </summary>
        [XmlElement("amtPrecip")]
        public LengthMeasure AmtPrecip { get; set; }
        /// <summary>
        /// Description of cloud cover. 
        /// </summary>
        [XmlElement("coverCloud")]
        public String CoverCloud { get; set; }
        /// <summary>
        /// Height of cloud cover. 
        /// </summary>
        [XmlElement("ceilingCloud")]
        public LengthMeasure CeilingCloud { get; set; }
        /// <summary>
        /// Current speed. 
        /// </summary>
        [XmlElement("currentSea")]
        public VelocityMeasure CurrentSea { get; set; }
        /// <summary>
        /// Azimuth of current. 
        /// </summary>
        [XmlElement("aziCurrentSea")]
        public PlaneAngleMeasure AziCurrentSea { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_realtimes xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("realtimes", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_realtimes xsd type.")]
    public partial class RealtimeList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single realtime. 
        /// </summary>
        [XmlElement("realtime")]
        public List<Realtime> Realtime { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Realtime;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Realtime object. Realtime data is not persistent data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_realtime", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Realtime object. Realtime data is not persistent data.")]
    public partial class Realtime : Object 
    {

        /// <summary>
        /// The time index for the realtime object if the interval type is time-based. It is the default time index for all data in the realtime object. Both dTim and md can be overridden at the channel level. This value should be given when "dTim" is given with any channel.
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. It is the default depth index for all data in the realtime object. Both dTim and md can be overridden at the channel level. This value should be given when "md" is given with any channel.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// The one-based sequence of realtime messages for one subscription. The first message for a subscription should have a sequence number of one and each subsequent message for that subscription should increment by one.
        /// </summary>
        [XmlElement("sequence")]
        public Int32? Sequence { get; set; }
        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
        [XmlElement("activityCode")]
        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set { 
                activityCodeField = value;
                this.ActivityCodeSpecified = true;
            }
        }

        private ActivityCode activityCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ActivityCodeSpecified { get; set; }
        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
        [XmlElement("detailActivity")]
        public String DetailActivity { get; set; }
        /// <summary>
        /// The group name of the channels in this realtime. For example, a publisher can publish data from the mudlogger, drilling and MWD systems at the same time. The drilling and mudlogger systems could have channels with the same mnemonic. The group name is used to distinguish between curves from these different source systems.
        /// </summary>
        [XmlElement("dataGroup")]
        public String DataGroup { get; set; }
        /// <summary>
        /// The information which is constant for all realtimes. This will only be sent with the first realtime for a subscription, when a retransmit is requested or when the header is updated (e.g., when more channels are added).
        /// </summary>
        [XmlElement("realtimeHeader")]
        public RealtimeHeader RealtimeHeader { get; set; }
		/// <summary>
        /// The data associated with a (de-multiplexed) channel.
        /// </summary>
        [XmlElement("channel")]
        public List<Channel> Channel { get; set; }
		/// <summary>
        /// The multiplexed data associated with a channel.
        /// </summary>
        [XmlElement("record")]
        public List<Record> Record { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		/// <summary>
        /// Unique identifier for the Subscription. This matches the value of the idSub attribute that is returned in the Subscription Request. The value is only optional so that the a realtime can be retrieved using the Store interface (possibly after the subscription has retired). Otherwise, the value must be included when the realtime is returned as a result of a subscription.
        /// </summary>
        [XmlAttribute("idSub")]
        public String IdSub { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML realtime header component object. The header is only transmitted with the first realtime, when the header changes or when a retransmit is requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_realtimeHeader", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML realtime header component object. The header is only transmitted with the first realtime, when the header changes or when a retransmit is requested.")]
    public partial class RealtimeHeader : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the tubular. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Name of contractor who provided the service.
        /// </summary>
        [XmlElement("serviceCompany")]
        public String ServiceCompany { get; set; }
        /// <summary>
        /// Log run number. This should normally be a number; however some legacy systems encode other information in this value.
        /// </summary>
        [XmlElement("runNumber")]
        public String RunNumber { get; set; }
        /// <summary>
        /// The bottom hole assembly run number associated with this log.
        /// </summary>
        [XmlElement("bhaRunNumber")]
        public Int16? BhaRunNumber {
            get {
                return bhaRunNumberField;
            } 
            set { 
                bhaRunNumberField = value;
                this.BhaRunNumberSpecified = true;
            }
        }

        private Int16? bhaRunNumberField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BhaRunNumberSpecified { get; set; }
        /// <summary>
        /// Identifies the pass within the run.
        /// </summary>
        [XmlElement("pass")]
        public String PluggedAndAbandonedss { get; set; }
        /// <summary>
        /// Date and time that the realtime was created.
        /// </summary>
        [XmlElement("creationDate")]
        public DateTime? CreationDate {
            get {
                return creationDateField;
            } 
            set { 
                creationDateField = value;
                this.CreationDateSpecified = true;
            }
        }

        private DateTime? creationDateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CreationDateSpecified { get; set; }
        /// <summary>
        /// Comments about the realtime.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// The definition of a group of channels.
        /// </summary>
        [XmlElement("groupDefinition")]
        public List<GroupDefinition> GroupDefinition { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML realtime group definition component object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_groupDefinition", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML realtime group definition component object.")]
    public partial class GroupDefinition : Object 
    {

        /// <summary>
        /// The id of this group. The value should match a commonly agreed value.
        /// </summary>
        [XmlElement("id")]
        public String Id { get; set; }
        /// <summary>
        /// True (value of "1" or "true") indicates that this group will be represented by multiplexed data records. False (value of "0" or "false") indicates that this group will be represented by de-multiplexed data channels.
        /// </summary>
        [XmlElement("multiplexed")]
        public Boolean? Multiplexed { get; set; }
        /// <summary>
        /// The depth or time interval over which the group data are requested to be derived.
        /// </summary>
        [XmlElement("interval")]
        public Interval Interval { get; set; }
        /// <summary>
        /// A pointer to the log (within the context of the current wellbore) that will be used to persist this data.
        /// </summary>
        [XmlElement("persistedAsLog")]
        public RefNameString PersistedAsLog {
            get {
                return persistedAsLogField;
            } 
            set { 
                if (persistedAsWellLogFieldSpecified) throw new Exception("Cannot set property PersistedAsLog when property PersistedAsWellLog is already set");
                persistedAsLogField = value;
                persistedAsLogFieldSpecified = true;
            }
        }

        private RefNameString persistedAsLogField; 
        private bool persistedAsLogFieldSpecified = false; 

        /// <summary>
        /// A pointer to the wellLog (within the context of the current wellbore) that will be used to persist this data.
        /// </summary>
        [XmlElement("persistedAsWellLog")]
        public RefNameString PersistedAsWellLog {
            get {
                return persistedAsWellLogField;
            } 
            set { 
                if (persistedAsLogFieldSpecified) throw new Exception("Cannot set property PersistedAsWellLog when property PersistedAsLog is already set");
                persistedAsWellLogField = value;
                persistedAsWellLogFieldSpecified = true;
            }
        }

        private RefNameString persistedAsWellLogField; 
        private bool persistedAsWellLogFieldSpecified = false; 


		
        [XmlIgnore]
		[Browsable(false)]
        public ItemChoiceType? ItemElementName { get; set; }
        /// <summary>
        /// A comment or remark about this group.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
		/// <summary>
        /// The definition of a channel.
        /// </summary>
        [XmlElement("channelDefinition")]
        public List<ChannelDefinition> ChannelDefinition { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Realtime Channel Interval Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_interval", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Realtime Channel Interval Schema ")]
    public partial class Interval : Object 
    {

        /// <summary>
        /// The type of interval.
        /// </summary>
        [XmlElement("type")]
        public IntervalType? Type { get; set; }
        /// <summary>
        /// The interval method. Not appropriate for a SpotSample.
        /// </summary>
        [XmlElement("method")]
        public IntervalMethod? Method { get; set; }
        /// <summary>
        /// The distance interval associated with the method.
        /// </summary>
        [XmlElement("distanceInterval")]
        public LengthMeasure DistanceInterval {
            get {
                return distanceIntervalField;
            } 
            set { 
                if (timeIntervalFieldSpecified) throw new Exception("Cannot set property DistanceInterval when property TimeInterval is already set");
                distanceIntervalField = value;
                distanceIntervalFieldSpecified = true;
            }
        }

        private LengthMeasure distanceIntervalField; 
        private bool distanceIntervalFieldSpecified = false; 

        /// <summary>
        /// The time interval associated with the method.
        /// </summary>
        [XmlElement("timeInterval")]
        public TimeMeasure TimeInterval {
            get {
                return timeIntervalField;
            } 
            set { 
                if (distanceIntervalFieldSpecified) throw new Exception("Cannot set property TimeInterval when property DistanceInterval is already set");
                timeIntervalField = value;
                timeIntervalFieldSpecified = true;
            }
        }

        private TimeMeasure timeIntervalField; 
        private bool timeIntervalFieldSpecified = false; 


    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Realtime Channel Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_channelDefinition", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Realtime Channel Component Schema ")]
    public partial class ChannelDefinition : Object 
    {

        /// <summary>
        /// Used to differentiate between multiples of same sensor type. The mnemonic must be unique within the context of each group definition. 
        /// </summary>
        [XmlElement("mnemonic")]
        public String Minemonic { get; set; }
        /// <summary>
        /// Specifies the data encoding of a "value". If this value is not supplied, the data type is assumed to be double.
        /// </summary>
        [XmlElement("dataType")]
        public LogDataType? DataType {
            get {
                return dataTypeField;
            } 
            set { 
                dataTypeField = value;
                this.DataTypeSpecified = true;
            }
        }

        private LogDataType? dataTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DataTypeSpecified { get; set; }
        /// <summary>
        /// Name of channel from realtime catalog. Although this is optional, it is strongly recommended that it be included. This defines the underlying meaning of the curve (e.g., a porosity). Mnemonic allows multiple channels of the same class to exist in one realtime.
        /// </summary>
        [XmlElement("classWitsml")]
        public RealtimeData ClassWitsml {
            get {
                return classWitsmlField;
            } 
            set { 
                classWitsmlField = value;
                this.ClassWitsmlSpecified = true;
            }
        }

        private RealtimeData classWitsmlField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ClassWitsmlSpecified { get; set; }
        /// <summary>
        /// A 1-based index of curve data in the data records. This can only be specified if multiplexed is true in the group definition.
        /// </summary>
        [XmlElement("columnIndex")]
        public Int16? ColumnIndex {
            get {
                return columnIndexField;
            } 
            set { 
                columnIndexField = value;
                this.ColumnIndexSpecified = true;
            }
        }

        private Int16? columnIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ColumnIndexSpecified { get; set; }
        /// <summary>
        /// The unit of measure for a quantity value. This can only be specified if multiplexed is true in the group definition. For demultiplexed values the unit is carried by each individual value.
        /// </summary>
        [XmlElement("unit")]
        public String Unit { get; set; }
        /// <summary>
        /// A description of the channel.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Name alias for this trace. 
        /// </summary>
        [XmlElement("mnemAlias")]
        public String MinemAlias { get; set; }
        /// <summary>
        /// Offset of sensor from a downhole equipment vertical reference (the drill bit, for MWD logs; the tool zero reference for wireline logs). This element is only informative (log values are presented at actual depth, not requiring subtraction of an offset).
        /// </summary>
        [XmlElement("sensorOffset")]
        public LengthMeasure SensorOffset { get; set; }
        /// <summary>
        /// Data source, could be tool name/id. 
        /// </summary>
        [XmlElement("dataSource")]
        public String DataSource { get; set; }
        /// <summary>
        /// A container element that describes how data was gathered, computed, and sampled. This can only be specified if multiplexed is false in the group definition. That is, this can only be specified for a de-multiplexed representation.
        /// </summary>
        [XmlElement("interval")]
        public Interval Interval { get; set; }
		/// <summary>
        /// Indicates that the channel is an array channel (i.e., multi-valued samples), and provides meta data by which an axis of the array can be understood.
        /// </summary>
        [XmlElement("axisDefinition")]
        public List<AxisDefinition> AxisDefinition { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Realtime Channel Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_channel", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Realtime Channel Component Schema ")]
    public partial class Channel : Object 
    {

        /// <summary>
        /// The id of the group that this channel represents.
        /// </summary>
        [XmlElement("id")]
        public String Id { get; set; }
        /// <summary>
        /// The mnemonic assigned to the channel. This must match a mnemonic of a channel definition in the header and represents the unique key of the channel. Multiple (de-multiplexed) channels with the same mnemonic cannot exist in the same realtime.
        /// </summary>
        [XmlElement("mnemonic")]
        public String Minemonic { get; set; }
        /// <summary>
        /// The time index for the realtime channel if the interval type is time-based. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Value of the channel. The encoding of the value is defined by "dataType" in the header. For array channels, this will be a space delimited list of values. 
        /// </summary>
        [XmlElement("value")]
        public EncodedArrayString Value { get; set; }
        /// <summary>
        /// Data density of sample in samples per length unit 
        /// </summary>
        [XmlElement("densData")]
        public PerLengthMeasure DensData { get; set; }
        /// <summary>
        /// Data quality indicator. 
        /// </summary>
        [XmlElement("qualData")]
        public String QualData { get; set; }
        /// <summary>
        /// Formation exposure time. 
        /// </summary>
        [XmlElement("fet")]
        public TimeMeasure Fet { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the encodedArrayString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="encodedArrayString", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the encodedArrayString xsd type.")]
    public partial class EncodedArrayString : Object 
    {
        public EncodedArrayString() {}
        public EncodedArrayString(String value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public String Uom { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Realtime Record Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_record", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Realtime Record Component Schema ")]
    public partial class Record : Object 
    {

        /// <summary>
        /// The id of the group that this record represents. The combination of id and seq should be unique within a subscription.
        /// </summary>
        [XmlElement("id")]
        public String Id { get; set; }
        /// <summary>
        /// The one-based sequence of records for one group in this subscription. The first record for a group should have a sequence number of one and each subsequent record for that group should increment by one.
        /// </summary>
        [XmlElement("seq")]
        public Int16? Seq { get; set; }
        /// <summary>
        /// The time index for the record if the interval type is time-based. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// The data values for the record. A comma delimited list of data values with one value for each channel in the group (e.g., "xxx,yyy, zzz"). For array channels, the value of the array channel will be a space delimited list of values that are contained within the commas that delimit the value for that curve (e.g., "xxx,aa bb cc,zzz"). This essentially represents one row of a table where the channel mnemonics represent the column headings. 
        /// </summary>
        [XmlElement("value")]
        public EncodedArrayString Value { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_rigs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("rigs", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_rigs xsd type.")]
    public partial class RigList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single rig. 
        /// </summary>
        [XmlElement("rig")]
        public List<Rig> Rig { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Rig;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Rig object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_rig", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Rig object.")]
    public partial class Rig : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the rig. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the rig. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
        /// <summary>
        /// Rig type. 
        /// </summary>
        [XmlElement("typeRig")]
        public RigType? TypeRig {
            get {
                return typeRigField;
            } 
            set { 
                typeRigField = value;
                this.TypeRigSpecified = true;
            }
        }

        private RigType? typeRigField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeRigSpecified { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
		/// <summary>
        /// Year entered service (CCYY). 
        /// </summary>
        [XmlElement("")]
        public String YearEntService { get; set; }
        /// <summary>
        /// Rig classification. 
        /// </summary>
        [XmlElement("classRig")]
        public String ClassRig { get; set; }
        /// <summary>
        /// Rig approvals/certification. 
        /// </summary>
        [XmlElement("approvals")]
        public String Approvals { get; set; }
        /// <summary>
        /// Rig registration location. 
        /// </summary>
        [XmlElement("registration")]
        public String Registration { get; set; }
        /// <summary>
        /// Rig telephone number. 
        /// </summary>
        [XmlElement("telNumber")]
        public String TelNumber { get; set; }
        /// <summary>
        /// Rig fax number. 
        /// </summary>
        [XmlElement("faxNumber")]
        public String FaxNumber { get; set; }
        /// <summary>
        /// Rig Email address. 
        /// </summary>
        [XmlElement("emailAddress")]
        public String EmailAddress { get; set; }
        /// <summary>
        /// Name of contact person. 
        /// </summary>
        [XmlElement("nameContact")]
        public String NameContact { get; set; }
        /// <summary>
        /// Maximum hole depth rating for the rig. 
        /// </summary>
        [XmlElement("ratingDrillDepth")]
        public LengthMeasure RatingDrillDepth { get; set; }
        /// <summary>
        /// Working water depth capability of rig. 
        /// </summary>
        [XmlElement("ratingWaterDepth")]
        public LengthMeasure RatingWaterDepth { get; set; }
        /// <summary>
        /// Flag to indicate that rig is an offshore rig (Drill Ship, Semi, Jack-up, Platform, TADU). Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("isOffshore")]
        public Boolean? IsOffshore {
            get {
                return isOffshoreField;
            } 
            set { 
                isOffshoreField = value;
                this.IsOffshoreSpecified = true;
            }
        }

        private Boolean? isOffshoreField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsOffshoreSpecified { get; set; }
        /// <summary>
        /// Air gap from Rig Floor to ground or mean sea level depending on location. 
        /// </summary>
        [XmlElement("airGap")]
        public LengthMeasure AirGap { get; set; }
        /// <summary>
        /// Date and time rig operations started, or date and time object created. 
        /// </summary>
        [XmlElement("dTimStartOp")]
        public DateTime? DateTimeStartOperating {
            get {
                return dTimStartOpField;
            } 
            set { 
                dTimStartOpField = value;
                this.DateTimeStartOperatingSpecified = true;
            }
        }

        private DateTime? dTimStartOpField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartOperatingSpecified { get; set; }
        /// <summary>
        /// Date and time rig operations ended (May be NULL for active rig). 
        /// </summary>
        [XmlElement("dTimEndOp")]
        public DateTime? DateTimeEndOperating {
            get {
                return dTimEndOpField;
            } 
            set { 
                dTimEndOpField = value;
                this.DateTimeEndOperatingSpecified = true;
            }
        }

        private DateTime? dTimEndOpField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndOperatingSpecified { get; set; }
        /// <summary>
        /// Blow out preventer description and components. 
        /// </summary>
        [XmlElement("bop")]
        public Bop Bop { get; set; }
		/// <summary>
        /// Pit equipment for the rig. 
        /// </summary>
        [XmlElement("pit")]
        public List<Pit> Pit { get; set; }
		/// <summary>
        /// Drilling fluid (mud/cement) pumping units for the rig. 
        /// </summary>
        [XmlElement("pump")]
        public List<Pump> Pump { get; set; }
		/// <summary>
        /// Mud cleaning shaker equipment for the rig. 
        /// </summary>
        [XmlElement("shaker")]
        public List<Shaker> Shaker { get; set; }
		/// <summary>
        /// Mud cleaning centrifuge equipment for the rig. 
        /// </summary>
        [XmlElement("centrifuge")]
        public List<Centrifuge> Centrifuge { get; set; }
		/// <summary>
        /// Mud cleaning hydrocyclone equipment for the rig. 
        /// </summary>
        [XmlElement("hydrocyclone")]
        public List<Hydrocyclone> Hydrocyclone { get; set; }
		/// <summary>
        /// Mud de-gasser equipment for the rig. 
        /// </summary>
        [XmlElement("degasser")]
        public List<Degasser> Degasser { get; set; }
        /// <summary>
        /// Coiled tubing specific equipment configuration. 
        /// </summary>
        [XmlElement("surfaceEquipment")]
        public SurfaceEquipment SurfaceEquipment { get; set; }
        /// <summary>
        /// Number of derricks on the rig. 
        /// </summary>
        [XmlElement("numDerricks")]
        public Int16? NumDerricks {
            get {
                return numDerricksField;
            } 
            set { 
                numDerricksField = value;
                this.NumDerricksSpecified = true;
            }
        }

        private Int16? numDerricksField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumDerricksSpecified { get; set; }
        /// <summary>
        /// Derrick type. 
        /// </summary>
        [XmlElement("typeDerrick")]
        public DerrickType? TypeDerrick {
            get {
                return typeDerrickField;
            } 
            set { 
                typeDerrickField = value;
                this.TypeDerrickSpecified = true;
            }
        }

        private DerrickType? typeDerrickField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeDerrickSpecified { get; set; }
        /// <summary>
        /// Maximum support load applied to derrick structure. 
        /// </summary>
        [XmlElement("ratingDerrick")]
        public ForceMeasure RatingDerrick { get; set; }
        /// <summary>
        /// Height of derrick. 
        /// </summary>
        [XmlElement("htDerrick")]
        public LengthMeasure HeightDerrick { get; set; }
        /// <summary>
        /// Maximum hookload rating. 
        /// </summary>
        [XmlElement("ratingHkld")]
        public ForceMeasure RatingHookload { get; set; }
        /// <summary>
        /// Derrick wind capacity. 
        /// </summary>
        [XmlElement("capWindDerrick")]
        public VelocityMeasure CapWindDerrick { get; set; }
        /// <summary>
        /// Block weight. 
        /// </summary>
        [XmlElement("wtBlock")]
        public ForceMeasure WeightBlock { get; set; }
        /// <summary>
        /// Weight rating of the travelling block. 
        /// </summary>
        [XmlElement("ratingBlock")]
        public ForceMeasure RatingBlock { get; set; }
        /// <summary>
        /// Number of block lines. 
        /// </summary>
        [XmlElement("numBlockLines")]
        public Int16? NumBlockLines {
            get {
                return numBlockLinesField;
            } 
            set { 
                numBlockLinesField = value;
                this.NumBlockLinesSpecified = true;
            }
        }

        private Int16? numBlockLinesField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumBlockLinesSpecified { get; set; }
        /// <summary>
        /// Type of hook. 
        /// </summary>
        [XmlElement("typeHook")]
        public String TypeHook { get; set; }
        /// <summary>
        /// Weight rating of the hook. 
        /// </summary>
        [XmlElement("ratingHook")]
        public ForceMeasure RatingHook { get; set; }
        /// <summary>
        /// Drill line diameter. 
        /// </summary>
        [XmlElement("sizeDrillLine")]
        public LengthMeasure SizeDrillLine { get; set; }
        /// <summary>
        /// Draw-works type. 
        /// </summary>
        [XmlElement("typeDrawWorks")]
        public DrawWorksType? TypeDrawWorks {
            get {
                return typeDrawWorksField;
            } 
            set { 
                typeDrawWorksField = value;
                this.TypeDrawWorksSpecified = true;
            }
        }

        private DrawWorksType? typeDrawWorksField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeDrawWorksSpecified { get; set; }
        /// <summary>
        /// Draw works horse power. 
        /// </summary>
        [XmlElement("powerDrawWorks")]
        public PowerMeasure PowerDrawWorks { get; set; }
        /// <summary>
        /// Weight rating of the drawworks. 
        /// </summary>
        [XmlElement("ratingDrawWorks")]
        public ForceMeasure RatingDrawWorks { get; set; }
        /// <summary>
        /// Description of the drawworks motor. 
        /// </summary>
        [XmlElement("motorDrawWorks")]
        public String MotorDrawWorks { get; set; }
        /// <summary>
        /// Rig brake description. 
        /// </summary>
        [XmlElement("descBrake")]
        public String DescBrake { get; set; }
        /// <summary>
        /// Type of Swivel. 
        /// </summary>
        [XmlElement("typeSwivel")]
        public String TypeSwivel { get; set; }
        /// <summary>
        /// Maximum swivel rating. 
        /// </summary>
        [XmlElement("ratingSwivel")]
        public ForceMeasure RatingSwivel { get; set; }
        /// <summary>
        /// Work string drive type. 
        /// </summary>
        [XmlElement("rotSystem")]
        public DriveType? RotSystem {
            get {
                return rotSystemField;
            } 
            set { 
                rotSystemField = value;
                this.RotSystemSpecified = true;
            }
        }

        private DriveType? rotSystemField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RotSystemSpecified { get; set; }
        /// <summary>
        /// Description of rotating system. 
        /// </summary>
        [XmlElement("descRotSystem")]
        public String DescRotSystem { get; set; }
        /// <summary>
        /// Work string rotational torque rating. 
        /// </summary>
        [XmlElement("ratingTqRotSys")]
        public MomentOfForceMeasure RatingTorqueRotSys { get; set; }
        /// <summary>
        /// Rotary size opening. 
        /// </summary>
        [XmlElement("rotSizeOpening")]
        public LengthMeasure RotSizeOpening { get; set; }
        /// <summary>
        /// Work string rotational torque rating. 
        /// </summary>
        [XmlElement("ratingRotSystem")]
        public ForceMeasure RatingRotSystem { get; set; }
        /// <summary>
        /// Description of slow circulation rates system. 
        /// </summary>
        [XmlElement("scrSystem")]
        public String ScrSystem { get; set; }
        /// <summary>
        /// Name of pipe handling system. 
        /// </summary>
        [XmlElement("pipeHandlingSystem")]
        public String PipeHandlingSystem { get; set; }
        /// <summary>
        /// Bulk/dry mud storage capacity. 
        /// </summary>
        [XmlElement("capBulkMud")]
        public VolumeMeasure CapBulkMud { get; set; }
        /// <summary>
        /// Liquid mud storage capacity. 
        /// </summary>
        [XmlElement("capLiquidMud")]
        public VolumeMeasure CapLiquidMud { get; set; }
        /// <summary>
        /// Drill water capacity. 
        /// </summary>
        [XmlElement("capDrillWater")]
        public VolumeMeasure CapDrillWater { get; set; }
        /// <summary>
        /// Potable water capacity. 
        /// </summary>
        [XmlElement("capPotableWater")]
        public VolumeMeasure CapPotableWater { get; set; }
        /// <summary>
        /// Fuel capacity. 
        /// </summary>
        [XmlElement("capFuel")]
        public VolumeMeasure CapFuel { get; set; }
        /// <summary>
        /// Capacity of builk cement. 
        /// </summary>
        [XmlElement("capBulkCement")]
        public VolumeMeasure CapBulkCement { get; set; }
        /// <summary>
        /// Power system. 
        /// </summary>
        [XmlElement("mainEngine")]
        public String MainEngine { get; set; }
        /// <summary>
        /// Description of the electrical power generating system. 
        /// </summary>
        [XmlElement("generator")]
        public String Generator { get; set; }
        /// <summary>
        /// Name of cement unit on the rig. 
        /// </summary>
        [XmlElement("cementUnit")]
        public String CementUnit { get; set; }
        /// <summary>
        /// Number of beds available on the rig. 
        /// </summary>
        [XmlElement("numBunks")]
        public Int16? NumBunks {
            get {
                return numBunksField;
            } 
            set { 
                numBunksField = value;
                this.NumBunksSpecified = true;
            }
        }

        private Int16? numBunksField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumBunksSpecified { get; set; }
        /// <summary>
        /// Number of bunks per room. 
        /// </summary>
        [XmlElement("bunksPerRoom")]
        public Int16? BunksPerRoom {
            get {
                return bunksPerRoomField;
            } 
            set { 
                bunksPerRoomField = value;
                this.BunksPerRoomSpecified = true;
            }
        }

        private Int16? bunksPerRoomField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BunksPerRoomSpecified { get; set; }
        /// <summary>
        /// Number of cranes on the rig. 
        /// </summary>
        [XmlElement("numCranes")]
        public Int16? NumCranes {
            get {
                return numCranesField;
            } 
            set { 
                numCranesField = value;
                this.NumCranesSpecified = true;
            }
        }

        private Int16? numCranesField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumCranesSpecified { get; set; }
        /// <summary>
        /// Number of anchors. 
        /// </summary>
        [XmlElement("numAnch")]
        public Int16? NumAnch {
            get {
                return numAnchField;
            } 
            set { 
                numAnchField = value;
                this.NumAnchSpecified = true;
            }
        }

        private Int16? numAnchField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumAnchSpecified { get; set; }
        /// <summary>
        /// Mooring type. 
        /// </summary>
        [XmlElement("moorType")]
        public String MoorType { get; set; }
        /// <summary>
        /// Number of guideline tensioners. 
        /// </summary>
        [XmlElement("numGuideTens")]
        public Int16? NumGuideTens {
            get {
                return numGuideTensField;
            } 
            set { 
                numGuideTensField = value;
                this.NumGuideTensSpecified = true;
            }
        }

        private Int16? numGuideTensField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumGuideTensSpecified { get; set; }
        /// <summary>
        /// Number of riser tensioners. 
        /// </summary>
        [XmlElement("numRiserTens")]
        public Int16? NumRiserTens {
            get {
                return numRiserTensField;
            } 
            set { 
                numRiserTensField = value;
                this.NumRiserTensSpecified = true;
            }
        }

        private Int16? numRiserTensField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumRiserTensSpecified { get; set; }
        /// <summary>
        /// Variable deck load maximum (offshore rigs only). 
        /// </summary>
        [XmlElement("varDeckLdMx")]
        public ForceMeasure VarDeckLoadMax { get; set; }
        /// <summary>
        /// Variable deck load storm rating (offshore rigs only). 
        /// </summary>
        [XmlElement("vdlStorm")]
        public ForceMeasure VdlStorm { get; set; }
        /// <summary>
        /// Number of thrusters. 
        /// </summary>
        [XmlElement("numThrusters")]
        public Int16? NumThrusters {
            get {
                return numThrustersField;
            } 
            set { 
                numThrustersField = value;
                this.NumThrustersSpecified = true;
            }
        }

        private Int16? numThrustersField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumThrustersSpecified { get; set; }
        /// <summary>
        /// Are the thrusters azimuth. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("azimuthing")]
        public Boolean? Azimuthing {
            get {
                return azimuthingField;
            } 
            set { 
                azimuthingField = value;
                this.AzimuthingSpecified = true;
            }
        }

        private Boolean? azimuthingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AzimuthingSpecified { get; set; }
        /// <summary>
        /// Minimum motion compensation. 
        /// </summary>
        [XmlElement("motionCompensationMn")]
        public ForceMeasure MotionCompensationMin { get; set; }
        /// <summary>
        /// Maximum motion compensation. 
        /// </summary>
        [XmlElement("motionCompensationMx")]
        public ForceMeasure MotionCompensationMax { get; set; }
        /// <summary>
        /// Length of motion compensation provided by equipment. 
        /// </summary>
        [XmlElement("strokeMotionCompensation")]
        public LengthMeasure StrokeMotionCompensation { get; set; }
        /// <summary>
        /// Riser angle limit. 
        /// </summary>
        [XmlElement("riserAngleLimit")]
        public PlaneAngleMeasure RiserAngleLimit { get; set; }
        /// <summary>
        /// Maximum allowable heave. 
        /// </summary>
        [XmlElement("heaveMx")]
        public LengthMeasure HeaveMax { get; set; }
        /// <summary>
        /// Description of gantry. 
        /// </summary>
        [XmlElement("gantry")]
        public String Gantry { get; set; }
        /// <summary>
        /// Description of flare. 
        /// </summary>
        [XmlElement("flares")]
        public String Flares { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Rig BOP Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bop", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Rig BOP Component Schema.")]
    public partial class Bop : Object 
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal Date. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
		/// <summary>
        /// An identification tag for the blow out preventer. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
        /// <summary>
        /// Type of connection to Blow Out Preventer. 
        /// </summary>
        [XmlElement("typeConnectionBop")]
        public String TypeConnectionBop { get; set; }
        /// <summary>
        /// Size of connection to Blow Out Preventer. 
        /// </summary>
        [XmlElement("sizeConnectionBop")]
        public LengthMeasure SizeConnectionBop { get; set; }
        /// <summary>
        /// Maximum Pressure rating of Blow Out Preventer. 
        /// </summary>
        [XmlElement("presBopRating")]
        public PressureMeasure PresBopRating { get; set; }
        /// <summary>
        /// Maximum tubulars passable through Blow Out Preventer. 
        /// </summary>
        [XmlElement("sizeBopSys")]
        public LengthMeasure SizeBopSys { get; set; }
        /// <summary>
        /// Is this a Rotating Blow Out Preventer? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("rotBop")]
        public Boolean? RotBop {
            get {
                return rotBopField;
            } 
            set { 
                rotBopField = value;
                this.RotBopSpecified = true;
            }
        }

        private Boolean? rotBopField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RotBopSpecified { get; set; }
        /// <summary>
        /// Inner diameter of Booster Line. 
        /// </summary>
        [XmlElement("idBoosterLine")]
        public LengthMeasure InnerDiameterBoosterLine { get; set; }
        /// <summary>
        /// Outer diameter of Booster Line. 
        /// </summary>
        [XmlElement("odBoosterLine")]
        public LengthMeasure OuterDiameterBoosterLine { get; set; }
        /// <summary>
        /// Length of Booster Line along riser. 
        /// </summary>
        [XmlElement("lenBoosterLine")]
        public LengthMeasure LenBoosterLine { get; set; }
        /// <summary>
        /// Inner diameter of Surface Line. 
        /// </summary>
        [XmlElement("idSurfLine")]
        public LengthMeasure InnerDiameterSurfLine { get; set; }
        /// <summary>
        /// Outer diameter of Surface Line. 
        /// </summary>
        [XmlElement("odSurfLine")]
        public LengthMeasure OuterDiameterSurfLine { get; set; }
        /// <summary>
        /// Length of Choke Line along riser. 
        /// </summary>
        [XmlElement("lenSurfLine")]
        public LengthMeasure LenSurfLine { get; set; }
        /// <summary>
        /// Inner diameter of Choke Line. 
        /// </summary>
        [XmlElement("idChkLine")]
        public LengthMeasure InnerDiameterChkLine { get; set; }
        /// <summary>
        /// Outer diameter of Choke Line. 
        /// </summary>
        [XmlElement("odChkLine")]
        public LengthMeasure OuterDiameterChkLine { get; set; }
        /// <summary>
        /// Length of Choke Line along riser. 
        /// </summary>
        [XmlElement("lenChkLine")]
        public LengthMeasure LenChkLine { get; set; }
        /// <summary>
        /// Inner diameter of Kill Line. 
        /// </summary>
        [XmlElement("idKillLine")]
        public LengthMeasure InnerDiameterKillLine { get; set; }
        /// <summary>
        /// Outer diameter of Kill Line. 
        /// </summary>
        [XmlElement("odKillLine")]
        public LengthMeasure OuterDiameterKillLine { get; set; }
        /// <summary>
        /// Length of Kill Line. 
        /// </summary>
        [XmlElement("lenKillLine")]
        public LengthMeasure LenKillLine { get; set; }
		/// <summary>
        /// Container element for Blow Out Preventer component schema elements. 
        /// </summary>
        [XmlElement("bopComponent")]
        public List<BopComponent> BopComponent { get; set; }
        /// <summary>
        /// Diverter description. 
        /// </summary>
        [XmlElement("typeDiverter")]
        public String TypeDivisionerter { get; set; }
        /// <summary>
        /// Diameter of diverter. 
        /// </summary>
        [XmlElement("diaDiverter")]
        public LengthMeasure DiaDivisionerter { get; set; }
        /// <summary>
        /// Working rating pressure of the component. 
        /// </summary>
        [XmlElement("presWorkDiverter")]
        public PressureMeasure PresWorkDivisionerter { get; set; }
        /// <summary>
        /// Type of accumulator/description. 
        /// </summary>
        [XmlElement("accumulator")]
        public String Accumulator { get; set; }
        /// <summary>
        /// Accumulator fluid capacity. 
        /// </summary>
        [XmlElement("capAccFluid")]
        public VolumeMeasure CapAccFluid { get; set; }
        /// <summary>
        /// Accumulator pre-charge pressure. 
        /// </summary>
        [XmlElement("presAccPreCharge")]
        public PressureMeasure PresAccPreCharge { get; set; }
        /// <summary>
        /// Accumulator pre-charge volume
        /// </summary>
        [XmlElement("volAccPreCharge")]
        public VolumeMeasure VolAccPreCharge { get; set; }
        /// <summary>
        /// Accumulator operating pressure rating. 
        /// </summary>
        [XmlElement("presAccOpRating")]
        public PressureMeasure PresAccOperatingRating { get; set; }
        /// <summary>
        /// Blow Out Preventer Control System. 
        /// </summary>
        [XmlElement("typeControlManifold")]
        public String TypeControlManifold { get; set; }
        /// <summary>
        /// Description of control system. 
        /// </summary>
        [XmlElement("descControlManifold")]
        public String DescControlManifold { get; set; }
        /// <summary>
        /// Type of choke manifold. 
        /// </summary>
        [XmlElement("typeChokeManifold")]
        public String TypeChokeManifold { get; set; }
        /// <summary>
        /// Choke manifold pressure. 
        /// </summary>
        [XmlElement("presChokeManifold")]
        public PressureMeasure PresChokeManifold { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Blow Out Preventer Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bopComponent", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Blow Out Preventer Component Schema.")]
    public partial class BopComponent : Object 
    {

        /// <summary>
        /// Type of ram/preventer. 
        /// </summary>
        [XmlElement("typeBopComp")]
        public BopType? TypeBopComp {
            get {
                return typeBopCompField;
            } 
            set { 
                typeBopCompField = value;
                this.TypeBopCompSpecified = true;
            }
        }

        private BopType? typeBopCompField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeBopCompSpecified { get; set; }
        /// <summary>
        /// Description of component. 
        /// </summary>
        [XmlElement("descComp")]
        public String DescComp { get; set; }
        /// <summary>
        /// Inner diameter that tubulars can pass thru. 
        /// </summary>
        [XmlElement("idPassThru")]
        public LengthMeasure InnerDiameterPluggedAndAbandonedssThru { get; set; }
        /// <summary>
        /// Working rating pressure of the component. 
        /// </summary>
        [XmlElement("presWork")]
        public PressureMeasure PresWork { get; set; }
        /// <summary>
        /// Minimum diameter of component it will seal. 
        /// </summary>
        [XmlElement("diaCloseMn")]
        public LengthMeasure DiaCloseMin { get; set; }
        /// <summary>
        /// Maximum diameter of component it will seal. 
        /// </summary>
        [XmlElement("diaCloseMx")]
        public LengthMeasure DiaCloseMax { get; set; }
        /// <summary>
        /// Arrangement nomenclature for the Blow Out Preventer stack (e.g. S, R, A).
        /// </summary>
        [XmlElement("nomenclature")]
        public String Nomenclature { get; set; }
        /// <summary>
        /// Is Ram bore variable or single size? Defaults to false. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("isVariable")]
        public Boolean? IsVariable {
            get {
                return isVariableField;
            } 
            set { 
                isVariableField = value;
                this.IsVariableSpecified = true;
            }
        }

        private Boolean? isVariableField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsVariableSpecified { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Pit Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pit", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Rig Pit Component Schema ")]
    public partial class Pit : Object 
    {

        /// <summary>
        /// Relative pit number of all pits on the rig. One-based. 
        /// </summary>
        [XmlElement("index")]
        public Int16? Index { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal date and time. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Maximum pit capacity. 
        /// </summary>
        [XmlElement("capMx")]
        public VolumeMeasure CapMax { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
        /// <summary>
        /// The type of pit. 
        /// </summary>
        [XmlElement("typePit")]
        public PitType? TypePit {
            get {
                return typePitField;
            } 
            set { 
                typePitField = value;
                this.TypePitSpecified = true;
            }
        }

        private PitType? typePitField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypePitSpecified { get; set; }
        /// <summary>
        /// Flag to indicate if Pit is part of the active system. Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("isActive")]
        public Boolean? IsActive {
            get {
                return isActiveField;
            } 
            set { 
                isActiveField = value;
                this.IsActiveSpecified = true;
            }
        }

        private Boolean? isActiveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsActiveSpecified { get; set; }
		/// <summary>
        /// An identification tag for the pit. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Pump Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pump", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Rig Pump Component Schema ")]
    public partial class Pump : Object 
    {

        /// <summary>
        /// Relative pump number. One-based. 
        /// </summary>
        [XmlElement("index")]
        public Int16? Index { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of pump installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Date and time the pump was removed.
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
        /// <summary>
        /// Pump type reference list. 
        /// </summary>
        [XmlElement("typePump")]
        public PumpType? TypePump {
            get {
                return typePumpField;
            } 
            set { 
                typePumpField = value;
                this.TypePumpSpecified = true;
            }
        }

        private PumpType? typePumpField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypePumpSpecified { get; set; }
        /// <summary>
        /// Number of cylinders (3=single acting, 2 = double acting) 
        /// </summary>
        [XmlElement("numCyl")]
        public Int16? NumCyl {
            get {
                return numCylField;
            } 
            set { 
                numCylField = value;
                this.NumCylSpecified = true;
            }
        }

        private Int16? numCylField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumCylSpecified { get; set; }
        /// <summary>
        /// Rod outer diameter. 
        /// </summary>
        [XmlElement("odRod")]
        public LengthMeasure OuterDiameterRod { get; set; }
        /// <summary>
        /// Inner diameter of the pump liner. 
        /// </summary>
        [XmlElement("idLiner")]
        public LengthMeasure LinerSize { get; set; }
        /// <summary>
        /// Pump action. 1 = Single acting, 2 = double acting. 
        /// </summary>
        [XmlElement("pumpAction")]
        public Int16? PumpAction {
            get {
                return pumpActionField;
            } 
            set { 
                pumpActionField = value;
                this.PumpActionSpecified = true;
            }
        }

        private Int16? pumpActionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PumpActionSpecified { get; set; }
        /// <summary>
        /// Efficiency of the pump. 
        /// </summary>
        [XmlElement("eff")]
        public RelativePowerMeasure Eff { get; set; }
        /// <summary>
        /// Stroke length. 
        /// </summary>
        [XmlElement("lenStroke")]
        public LengthMeasure LenStroke { get; set; }
        /// <summary>
        /// Maximum pump pressure. 
        /// </summary>
        [XmlElement("presMx")]
        public PressureMeasure PresMax { get; set; }
        /// <summary>
        /// Maximum hydraulics horsepower. 
        /// </summary>
        [XmlElement("powHydMx")]
        public PowerMeasure PowHydMax { get; set; }
        /// <summary>
        /// Maximum Speed. 
        /// </summary>
        [XmlElement("spmMx")]
        public AnglePerTimeMeasure SpmMax { get; set; }
        /// <summary>
        ///  Pump displacement.
        /// </summary>
        [XmlElement("displacement")]
        public VolumeMeasure Displacement { get; set; }
        /// <summary>
        /// Pulsation dampener pressure. 
        /// </summary>
        [XmlElement("presDamp")]
        public PressureMeasure PresDamp { get; set; }
        /// <summary>
        /// Pulsation dampener volume. 
        /// </summary>
        [XmlElement("volDamp")]
        public VolumeMeasure VolDamp { get; set; }
        /// <summary>
        /// Maximum mechanical power. 
        /// </summary>
        [XmlElement("powMechMx")]
        public PowerMeasure PowMechMax { get; set; }
		/// <summary>
        /// An identification tag for the pump. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Shaker Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shaker", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Rig Shaker Component Schema ")]
    public partial class Shaker : Object 
    {

        /// <summary>
        /// Human recognizable context for the shaker.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal date and time. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Description for the type of object. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// Shaker location on rig. 
        /// </summary>
        [XmlElement("locationShaker")]
        public String LocationShaker { get; set; }
        /// <summary>
        /// Number of decks. 
        /// </summary>
        [XmlElement("numDecks")]
        public Int16? NumDecks {
            get {
                return numDecksField;
            } 
            set { 
                numDecksField = value;
                this.NumDecksSpecified = true;
            }
        }

        private Int16? numDecksField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumDecksSpecified { get; set; }
        /// <summary>
        /// Number of cascade levels. 
        /// </summary>
        [XmlElement("numCascLevel")]
        public Int16? NumCAscLevel {
            get {
                return numCascLevelField;
            } 
            set { 
                numCascLevelField = value;
                this.NumCAscLevelSpecified = true;
            }
        }

        private Int16? numCascLevelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumCAscLevelSpecified { get; set; }
        /// <summary>
        /// Is part of mud cleaning assembly as opposed to discrete Shale Shaker. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("mudCleaner")]
        public Boolean? MudCleaner {
            get {
                return mudCleanerField;
            } 
            set { 
                mudCleanerField = value;
                this.MudCleanerSpecified = true;
            }
        }

        private Boolean? mudCleanerField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MudCleanerSpecified { get; set; }
        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
        [XmlElement("capFlow")]
        public VolumeFlowRateMeasure CapFlow { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
        /// <summary>
        /// Minimum mesh size. 
        /// </summary>
        [XmlElement("sizeMeshMn")]
        public LengthMeasure SizeMeshMin { get; set; }
		/// <summary>
        /// An identification tag for the shaker. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Centrifuge Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_centrifuge", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Rig Centrifuge Component Schema ")]
    public partial class Centrifuge : Object 
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal date and time. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Description for the type of object. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
        [XmlElement("capFlow")]
        public VolumeFlowRateMeasure CapFlow { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
		/// <summary>
        /// An identification tag for the centrifuge. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig HydroCyclones Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_hydrocyclone", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Rig HydroCyclones Component Schema ")]
    public partial class Hydrocyclone : Object 
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal date and time. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Description for the type of object. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// Cones description. 
        /// </summary>
        [XmlElement("descCone")]
        public String DescCone { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
		/// <summary>
        /// An identification tag for the hydrocyclone. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Degasser Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_degasser", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Rig Degasser Component Schema ")]
    public partial class Degasser : Object 
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal date and time. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Description for the type of object. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
        /// <summary>
        /// Height of separator. 
        /// </summary>
        [XmlElement("height")]
        public LengthMeasure Height { get; set; }
        /// <summary>
        /// Length of separator. 
        /// </summary>
        [XmlElement("len")]
        public LengthMeasure Len { get; set; }
        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
        [XmlElement("id")]
        public LengthMeasure InnerDiameter { get; set; }
        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
        [XmlElement("capFlow")]
        public VolumeFlowRateMeasure CapFlow { get; set; }
        /// <summary>
        /// Flow area of separator. 
        /// </summary>
        [XmlElement("areaSeparatorFlow")]
        public AreaMeasure AreaSeparatorFlow { get; set; }
        /// <summary>
        /// Depth of trip-tank fluid level to provide back pressure against separator flow. 
        /// </summary>
        [XmlElement("htMudSeal")]
        public LengthMeasure HeightMudSeal { get; set; }
        /// <summary>
        /// Internal diameter of inlet line. 
        /// </summary>
        [XmlElement("idInlet")]
        public LengthMeasure InnerDiameterInlet { get; set; }
        /// <summary>
        /// Internal diameter of vent line. 
        /// </summary>
        [XmlElement("idVentLine")]
        public LengthMeasure InnerDiameterVentLine { get; set; }
        /// <summary>
        /// Length of vent line. 
        /// </summary>
        [XmlElement("lenVentLine")]
        public LengthMeasure LenVentLine { get; set; }
        /// <summary>
        /// Safe gas separating capacity. 
        /// </summary>
        [XmlElement("capGasSep")]
        public VolumeFlowRateMeasure CapGasSep { get; set; }
        /// <summary>
        /// Gas vent rate at which the vent line pressure drop exceeds the hydrostatic head due to the mud seal. 
        /// </summary>
        [XmlElement("capBlowdown")]
        public VolumeFlowRateMeasure CapBlowdown { get; set; }
        /// <summary>
        /// Pressure rating of the item. 
        /// </summary>
        [XmlElement("presRating")]
        public PressureMeasure PresRating { get; set; }
        /// <summary>
        /// Temperature rating of separator. 
        /// </summary>
        [XmlElement("tempRating")]
        public ThermodynamicTemperatureMeasure TempRating { get; set; }
		/// <summary>
        /// An identification tag for the degasser. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Surface Equipment Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_surfaceEquipment", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Rig Surface Equipment Component Schema ")]
    public partial class SurfaceEquipment : Object 
    {

        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Pressure rating of the item. 
        /// </summary>
        [XmlElement("presRating")]
        public PressureMeasure PresRating { get; set; }
        /// <summary>
        /// Surface equipment type (IADC1-4,Custom, Coiled Tubing). 
        /// </summary>
        [XmlElement("typeSurfEquip")]
        public SurfEquipType? TypeSurfEquip { get; set; }
        /// <summary>
        /// Use pump discharge Line. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("usePumpDischarge")]
        public Boolean? UsePumpDischarge {
            get {
                return usePumpDischargeField;
            } 
            set { 
                usePumpDischargeField = value;
                this.UsePumpDischargeSpecified = true;
            }
        }

        private Boolean? usePumpDischargeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UsePumpDischargeSpecified { get; set; }
        /// <summary>
        /// Use standpipe geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useStandpipe")]
        public Boolean? UseStandpipe {
            get {
                return useStandpipeField;
            } 
            set { 
                useStandpipeField = value;
                this.UseStandpipeSpecified = true;
            }
        }

        private Boolean? useStandpipeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseStandpipeSpecified { get; set; }
        /// <summary>
        /// Use kelly hose geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useHose")]
        public Boolean? UseHose {
            get {
                return useHoseField;
            } 
            set { 
                useHoseField = value;
                this.UseHoseSpecified = true;
            }
        }

        private Boolean? useHoseField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseHoseSpecified { get; set; }
        /// <summary>
        /// Use swivel geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useSwivel")]
        public Boolean? UseSwivel {
            get {
                return useSwivelField;
            } 
            set { 
                useSwivelField = value;
                this.UseSwivelSpecified = true;
            }
        }

        private Boolean? useSwivelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseSwivelSpecified { get; set; }
        /// <summary>
        /// Use kelly geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useKelly")]
        public Boolean? UseKelly {
            get {
                return useKellyField;
            } 
            set { 
                useKellyField = value;
                this.UseKellySpecified = true;
            }
        }

        private Boolean? useKellyField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseKellySpecified { get; set; }
        /// <summary>
        /// Use top stack height. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useTopStack")]
        public Boolean? UseTopStack {
            get {
                return useTopStackField;
            } 
            set { 
                useTopStackField = value;
                this.UseTopStackSpecified = true;
            }
        }

        private Boolean? useTopStackField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseTopStackSpecified { get; set; }
        /// <summary>
        /// Use injector stack height. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useInjStack")]
        public Boolean? UseInjStack {
            get {
                return useInjStackField;
            } 
            set { 
                useInjStackField = value;
                this.UseInjStackSpecified = true;
            }
        }

        private Boolean? useInjStackField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseInjStackSpecified { get; set; }
        /// <summary>
        /// Use surface iron description. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useSurfaceIron")]
        public Boolean? UseSurfaceIron {
            get {
                return useSurfaceIronField;
            } 
            set { 
                useSurfaceIronField = value;
                this.UseSurfaceIronSpecified = true;
            }
        }

        private Boolean? useSurfaceIronField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseSurfaceIronSpecified { get; set; }
        /// <summary>
        /// Inner diameter of standpipe. 
        /// </summary>
        [XmlElement("idStandpipe")]
        public LengthMeasure InnerDiameterStandpipe { get; set; }
        /// <summary>
        /// Length of standpipe. 
        /// </summary>
        [XmlElement("lenStandpipe")]
        public LengthMeasure LenStandpipe { get; set; }
        /// <summary>
        /// Inner diameter of kelly hose. 
        /// </summary>
        [XmlElement("idHose")]
        public LengthMeasure InnerDiameterHose { get; set; }
        /// <summary>
        /// Length of kelly hose. 
        /// </summary>
        [XmlElement("lenHose")]
        public LengthMeasure LenHose { get; set; }
        /// <summary>
        /// Inner diameter of swivel. 
        /// </summary>
        [XmlElement("idSwivel")]
        public LengthMeasure InnerDiameterSwivel { get; set; }
        /// <summary>
        /// Length of swivel. 
        /// </summary>
        [XmlElement("lenSwivel")]
        public LengthMeasure LenSwivel { get; set; }
        /// <summary>
        /// Inner diameter of kelly hose. 
        /// </summary>
        [XmlElement("idKelly")]
        public LengthMeasure InnerDiameterKelly { get; set; }
        /// <summary>
        /// Length of kelly. 
        /// </summary>
        [XmlElement("lenKelly")]
        public LengthMeasure LenKelly { get; set; }
        /// <summary>
        /// Inner diameter of surface iron. 
        /// </summary>
        [XmlElement("idSurfaceIron")]
        public LengthMeasure InnerDiameterSurfaceIron { get; set; }
        /// <summary>
        /// Length of surface iron. 
        /// </summary>
        [XmlElement("lenSurfaceIron")]
        public LengthMeasure LenSurfaceIron { get; set; }
        /// <summary>
        /// Height of surface iron. 
        /// </summary>
        [XmlElement("htSurfaceIron")]
        public LengthMeasure HeightSurfaceIron { get; set; }
        /// <summary>
        /// Coiled tubing - Inner diameter of pump discharge line. 
        /// </summary>
        [XmlElement("idDischargeLine")]
        public LengthMeasure InnerDiameterDischargeLine { get; set; }
        /// <summary>
        /// Coiled tubing - Length of pump discharge line. 
        /// </summary>
        [XmlElement("lenDischargeLine")]
        public LengthMeasure LenDischargeLine { get; set; }
        /// <summary>
        /// Coiled tubing - Coiled tubing wrap type. 
        /// </summary>
        [XmlElement("ctWrapType")]
        public String CTWrapType { get; set; }
        /// <summary>
        /// Coiled tubing - Specifies the OD of the coiled tubing reel. 
        /// </summary>
        [XmlElement("odReel")]
        public LengthMeasure OuterDiameterReel { get; set; }
        /// <summary>
        /// Coiled tubing - Outer diameter of the reel core that the coiled tubing is wrapped around. 
        /// </summary>
        [XmlElement("odCore")]
        public LengthMeasure OuterDiameterCore { get; set; }
        /// <summary>
        /// Coiled tubing - Width of the reel core. This is the inside dimension. 
        /// </summary>
        [XmlElement("widReelWrap")]
        public LengthMeasure WidReelWrap { get; set; }
        /// <summary>
        /// Coiled tubing - Length of the coiled tubing remaining on the reel. 
        /// </summary>
        [XmlElement("lenReel")]
        public LengthMeasure LenReel { get; set; }
        /// <summary>
        /// Coiled tubing - Injector Stack Up. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("injStkUp")]
        public Boolean? InjStkUp {
            get {
                return injStkUpField;
            } 
            set { 
                injStkUpField = value;
                this.InjStkUpSpecified = true;
            }
        }

        private Boolean? injStkUpField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean InjStkUpSpecified { get; set; }
        /// <summary>
        /// Coiled tubing -The length of tubing from the end of the coil reel to the rotary kelly bushing. Basically we define what is in the hole and on the reel. This measurement takes into account the 20 or so feet of tubing that is being straightened and shoved through the injector head. 
        /// </summary>
        [XmlElement("htInjStk")]
        public LengthMeasure HeightInjStk { get; set; }
        /// <summary>
        /// Coiled tubing - Umbilical inside, true/false check box so that you can account for the wireline inside the coiled tubing. With this pressure loss calculation, you can calculate for the strings used for logging, wire line coring, etc. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("umbInside")]
        public Boolean? UmbInside {
            get {
                return umbInsideField;
            } 
            set { 
                umbInsideField = value;
                this.UmbInsideSpecified = true;
            }
        }

        private Boolean? umbInsideField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UmbInsideSpecified { get; set; }
        /// <summary>
        /// Coiled tubing - Outer diameter of the umbilical. 
        /// </summary>
        [XmlElement("odUmbilical")]
        public LengthMeasure OuterDiameterUmbilical { get; set; }
        /// <summary>
        /// Coiled tubing - Length of the umbilical. 
        /// </summary>
        [XmlElement("lenUmbilical")]
        public LengthMeasure LenUmbilical { get; set; }
        /// <summary>
        /// Top drive - Inner diameter of top stack. 
        /// </summary>
        [XmlElement("idTopStk")]
        public LengthMeasure InnerDiameterTopStk { get; set; }
        /// <summary>
        /// Top drive - The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. We are measuring the distance that the mud will flow through the top drive. 
        /// </summary>
        [XmlElement("htTopStk")]
        public LengthMeasure HeightTopStk { get; set; }
        /// <summary>
        /// Height of flange. If you select Top Drive Stackup Height, Swivel and Kelly are disabled so that you can specify the top-drive rotary system. 
        /// </summary>
        [XmlElement("htFlange")]
        public LengthMeasure HeightFlange { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_risks xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("risks", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_risks xsd type.")]
    public partial class RiskList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single risk. 
        /// </summary>
        [XmlElement("risk")]
        public List<Risk> Risk { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Risk;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Risk object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_risk", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Risk object.")]
    public partial class Risk : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the risk. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the risk. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A reference to an object that is defined within the context of a wellbore.
        /// </summary>
        [XmlElement("objectReference")]
        public RefObjectString ObjectReference { get; set; }
        /// <summary>
        /// The type of risk.
        /// </summary>
        [XmlElement("type")]
        public RiskType? Type { get; set; }
        /// <summary>
        /// The category of risk.
        /// </summary>
        [XmlElement("category")]
        public RiskCategory? Category { get; set; }
        /// <summary>
        /// The sub category of risk.
        /// </summary>
        [XmlElement("subCategory")]
        public RiskSubCategory? SubCategory {
            get {
                return subCategoryField;
            } 
            set { 
                subCategoryField = value;
                this.SubCategorySpecified = true;
            }
        }

        private RiskSubCategory? subCategoryField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SubCategorySpecified { get; set; }
        /// <summary>
        /// Custom string to further categorize the risk.
        /// </summary>
        [XmlElement("extendCategory")]
        public String ExtendCategory { get; set; }
		/// <summary>
        /// The personnel afected by the risk.
        /// </summary>
        [XmlElement("affectedPersonnel")]
        public List<RiskAffectedPersonnel> AffectedPersonnel { get; set; }
        /// <summary>
        /// Date and time that activities started.
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// Date and time that activities were completed.
        /// </summary>
        [XmlElement("dTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set { 
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
            }
        }

        private DateTime? dTimEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndSpecified { get; set; }
        /// <summary>
        /// Measured Depth at start of activity.
        /// </summary>
        [XmlElement("mdHoleStart")]
        public MeasuredDepthCoord MDHoleStart { get; set; }
        /// <summary>
        /// Measured Depth at end of activity.
        /// </summary>
        [XmlElement("mdHoleEnd")]
        public MeasuredDepthCoord MDHoleEnd { get; set; }
        /// <summary>
        /// True Vertical Depth at start of activity.
        /// </summary>
        [XmlElement("tvdHoleStart")]
        public WellVerticalDepthCoord TvdHoleStart { get; set; }
        /// <summary>
        /// True Vertical Depth at end of activity.
        /// </summary>
        [XmlElement("tvdHoleEnd")]
        public WellVerticalDepthCoord TvdHoleEnd { get; set; }
        /// <summary>
        /// Measured depth of bit at start of activity.
        /// </summary>
        [XmlElement("mdBitStart")]
        public MeasuredDepthCoord MDBitStart { get; set; }
        /// <summary>
        /// Measured depth of bit at end of activity.
        /// </summary>
        [XmlElement("mdBitEnd")]
        public MeasuredDepthCoord MDBitEnd { get; set; }
        /// <summary>
        /// Hole diameter. 
        /// </summary>
        [XmlElement("diaHole")]
        public LengthMeasure DiaHole { get; set; }
        /// <summary>
        /// Severity Level of the Risk. Values of 1 through 5 with 1 being the lowest.
        /// </summary>
        [XmlElement("severityLevel")]
        public Int16? SeverityLevel {
            get {
                return severityLevelField;
            } 
            set { 
                severityLevelField = value;
                this.SeverityLevelSpecified = true;
            }
        }

        private Int16? severityLevelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SeverityLevelSpecified { get; set; }
        /// <summary>
        /// Probability Level of the Risk. Values of 1 through 5 with 1 being the lowest.
        /// </summary>
        [XmlElement("probabilityLevel")]
        public Int16? ProbabilityLevel {
            get {
                return probabilityLevelField;
            } 
            set { 
                probabilityLevelField = value;
                this.ProbabilityLevelSpecified = true;
            }
        }

        private Int16? probabilityLevelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ProbabilityLevelSpecified { get; set; }
        /// <summary>
        /// summary description of risk.
        /// </summary>
        [XmlElement("summary")]
        public String Summary { get; set; }
        /// <summary>
        /// Complete description of Risk.
        /// </summary>
        [XmlElement("details")]
        public String Details { get; set; }
        /// <summary>
        /// Details for identifing the Risk.
        /// </summary>
        [XmlElement("identification")]
        public String Identification { get; set; }
        /// <summary>
        /// Plan of action if the Risk materializes.
        /// </summary>
        [XmlElement("contingency")]
        public String Contingency { get; set; }
		/// <summary>
        /// Plan of action to ensure the risk does not materialize.
        /// </summary>
        [XmlElement("mitigation")]
        public List<String> Mitigation { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    /// <summary>
    /// This class represents the obj_sidewallCores xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("sidewallCores", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_sidewallCores xsd type.")]
    public partial class SidewallCoreList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single sidewall core. 
        /// </summary>
        [XmlElement("sidewallCore")]
        public List<SidewallCore> SidewallCore { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return SidewallCore;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Sidewall Core object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_sidewallCore", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Sidewall Core object.")]
    public partial class SidewallCore : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the sidewall core. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the sidewall core. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Date and time logging suite run in the hole. 
        /// </summary>
        [XmlElement("dTimToolRun")]
        public DateTime? DateTimeToolRun {
            get {
                return dTimToolRunField;
            } 
            set { 
                dTimToolRunField = value;
                this.DateTimeToolRunSpecified = true;
            }
        }

        private DateTime? dTimToolRunField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeToolRunSpecified { get; set; }
        /// <summary>
        /// Date and time logging suite pulled out of the hole. 
        /// </summary>
        [XmlElement("dTimToolPull")]
        public DateTime? DateTimeToolPull {
            get {
                return dTimToolPullField;
            } 
            set { 
                dTimToolPullField = value;
                this.DateTimeToolPullSpecified = true;
            }
        }

        private DateTime? dTimToolPullField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeToolPullSpecified { get; set; }
        /// <summary>
        /// Tool reference measured depth. 
        /// </summary>
        [XmlElement("mdToolReference")]
        public MeasuredDepthCoord MDToolReference { get; set; }
        /// <summary>
        /// Reference log information. 
        /// </summary>
        [XmlElement("coreReferenceLog")]
        public String CoreReferenceLog { get; set; }
        /// <summary>
        /// Measured depth of core. 
        /// </summary>
        [XmlElement("mdCore")]
        public MeasuredDepthCoord MDCore { get; set; }
        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
        [XmlElement("serviceCompany")]
        public String ServiceCompany { get; set; }
        /// <summary>
        /// Analysis company 
        /// </summary>
        [XmlElement("analysisContractor")]
        public String AnalysisContractor { get; set; }
        /// <summary>
        /// Name of engineer analyzing sidewall core samples. 
        /// </summary>
        [XmlElement("analysisBy")]
        public String AnalysisBy { get; set; }
        /// <summary>
        /// Sidewall coring tool description. 
        /// </summary>
        [XmlElement("sidewallCoringTool")]
        public String SidewallCoringTool { get; set; }
        /// <summary>
        /// Hole diameter. 
        /// </summary>
        [XmlElement("diaHole")]
        public LengthMeasure DiaHole { get; set; }
        /// <summary>
        /// Diameter of plugs. 
        /// </summary>
        [XmlElement("diaPlug")]
        public LengthMeasure DiaPlug { get; set; }
        /// <summary>
        /// Number of shots fired. 
        /// </summary>
        [XmlElement("numPlugsShot")]
        public Int16? NumPlugsShot {
            get {
                return numPlugsShotField;
            } 
            set { 
                numPlugsShotField = value;
                this.NumPlugsShotSpecified = true;
            }
        }

        private Int16? numPlugsShotField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumPlugsShotSpecified { get; set; }
        /// <summary>
        /// Number of recovered plugs. 
        /// </summary>
        [XmlElement("numRecPlugs")]
        public Int16? NumRecPlugs {
            get {
                return numRecPlugsField;
            } 
            set { 
                numRecPlugsField = value;
                this.NumRecPlugsSpecified = true;
            }
        }

        private Int16? numRecPlugsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumRecPlugsSpecified { get; set; }
        /// <summary>
        /// Number of plugs that misfired. 
        /// </summary>
        [XmlElement("numMisfiredPlugs")]
        public Int16? NumMisfiredPlugs {
            get {
                return numMisfiredPlugsField;
            } 
            set { 
                numMisfiredPlugsField = value;
                this.NumMisfiredPlugsSpecified = true;
            }
        }

        private Int16? numMisfiredPlugsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumMisfiredPlugsSpecified { get; set; }
        /// <summary>
        /// Number of plugs that fired OK but were empty. 
        /// </summary>
        [XmlElement("numEmptyPlugs")]
        public Int16? NumEmptyPlugs {
            get {
                return numEmptyPlugsField;
            } 
            set { 
                numEmptyPlugsField = value;
                this.NumEmptyPlugsSpecified = true;
            }
        }

        private Int16? numEmptyPlugsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumEmptyPlugsSpecified { get; set; }
        /// <summary>
        /// Number of lost plugs. 
        /// </summary>
        [XmlElement("numLostPlugs")]
        public Int16? NumLostPlugs {
            get {
                return numLostPlugsField;
            } 
            set { 
                numLostPlugsField = value;
                this.NumLostPlugsSpecified = true;
            }
        }

        private Int16? numLostPlugsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumLostPlugsSpecified { get; set; }
        /// <summary>
        /// Number of plugs paid for by client. 
        /// </summary>
        [XmlElement("numPaidPlugs")]
        public Int16? NumPluggedAndAbandonedidPlugs {
            get {
                return numPaidPlugsField;
            } 
            set { 
                numPaidPlugsField = value;
                this.NumPluggedAndAbandonedidPlugsSpecified = true;
            }
        }

        private Int16? numPaidPlugsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumPluggedAndAbandonedidPlugsSpecified { get; set; }
		/// <summary>
        /// Set of plug sample descriptions. 
        /// </summary>
        [XmlElement("swcSample")]
        public List<SwcSample> SwcSample { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Sidewall Core Sample Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_swcSample", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Sidewall Core Sample Component Schema")]
    public partial class SwcSample : Object 
    {

        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Set of Lithology records for the Interval 
        /// </summary>
        [XmlElement("lithology")]
        public Lithology Lithology { get; set; }
        /// <summary>
        /// Show description for the plug. 
        /// </summary>
        [XmlElement("show")]
        public Show Show { get; set; }
        /// <summary>
        /// Name of formation penetrated. 
        /// </summary>
        [XmlElement("nameFormation")]
        public String NameFormation { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_surveyPrograms xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("surveyPrograms", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_surveyPrograms xsd type.")]
    public partial class SurveyProgramList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single survey program . 
        /// </summary>
        [XmlElement("surveyProgram")]
        public List<SurveyProgram> SurveyProgram { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return SurveyProgram;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Survey Program object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_surveyProgram", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Survey Program object.")]
    public partial class SurveyProgram : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the survey program. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the survey program. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Survey version number, incremented every time the program is modified. 
        /// </summary>
        [XmlElement("surveyVer")]
        public Int16? SurveyVer { get; set; }
        /// <summary>
        /// Date and time trajectory program was created or edited. 
        /// </summary>
        [XmlElement("dTimTrajProg")]
        public DateTime? DateTimeTrajProg {
            get {
                return dTimTrajProgField;
            } 
            set { 
                dTimTrajProgField = value;
                this.DateTimeTrajProgSpecified = true;
            }
        }

        private DateTime? dTimTrajProgField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeTrajProgSpecified { get; set; }
        /// <summary>
        /// Name of engineer. 
        /// </summary>
        [XmlElement("engineer")]
        public String Engineer { get; set; }
        /// <summary>
        /// Is program a final or intermediate/preliminary? 
        /// </summary>
        [XmlElement("final")]
        public String Final { get; set; }
		/// <summary>
        /// Survey section object. 
        /// </summary>
        [XmlElement("surveySection")]
        public List<SurveySection> SurveySection { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Survey Section Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_surveySection", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Survey Section Component Schema ")]
    public partial class SurveySection : Object 
    {

        /// <summary>
        /// Order in which program sections will be executed / were executed. 
        /// </summary>
        [XmlElement("sequence")]
        public Int16? Sequence { get; set; }
        /// <summary>
        /// Name of survey program section. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Hole measured depth at which the survey run will begin/began. 
        /// </summary>
        [XmlElement("mdStart")]
        public MeasuredDepthCoord MDStart { get; set; }
        /// <summary>
        /// Hole measured depth at which the survey run will end/ended. 
        /// </summary>
        [XmlElement("mdEnd")]
        public MeasuredDepthCoord MDEnd { get; set; }
        /// <summary>
        /// Company who will run / has run sruvey tool. 
        /// </summary>
        [XmlElement("nameSurveyCompany")]
        public String NameSurveyCompany { get; set; }
        /// <summary>
        /// Name of survey tool to be used / used for this section. 
        /// </summary>
        [XmlElement("nameTool")]
        public String NameTool { get; set; }
        /// <summary>
        /// Type of tool used. 
        /// </summary>
        [XmlElement("typeTool")]
        public String TypeTool { get; set; }
        /// <summary>
        /// Error model used to calculate ellipses of uncertainty. 
        /// </summary>
        [XmlElement("modelError")]
        public String ModelError { get; set; }
        /// <summary>
        /// Normally true, higher index trajectory takes precedence over overlapping section of previous trajectory. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("overwrite")]
        public Boolean? Overwrite {
            get {
                return overwriteField;
            } 
            set { 
                overwriteField = value;
                this.OverwriteSpecified = true;
            }
        }

        private Boolean? overwriteField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean OverwriteSpecified { get; set; }
        /// <summary>
        /// Maximum allowable depth frequency for survey stations for this survey run. 
        /// </summary>
        [XmlElement("frequencyMx")]
        public LengthMeasure FrequencyMax { get; set; }
        /// <summary>
        /// The item state for the data object. 
        /// </summary>
        [XmlElement("itemState")]
        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set { 
                itemStateField = value;
                this.ItemStateSpecified = true;
            }
        }

        private ItemState? itemStateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ItemStateSpecified { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_targets xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("targets", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_targets xsd type.")]
    public partial class TargetList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single target. 
        /// </summary>
        [XmlElement("target")]
        public List<Target> Target { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Target;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Target object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_target", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Target object.")]
    public partial class Target : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the target. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the target. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A pointer to the parent target. This represents a relationship between a drillers and geological target. 
        /// </summary>
        [XmlElement("parentTarget")]
        public RefNameString PluggedAndAbandonedrentTarget { get; set; }
        /// <summary>
        /// Northing of target center point in map coordinates. 
        /// </summary>
        [XmlElement("dispNsCenter")]
        public LengthMeasure DispNSCenter { get; set; }
        /// <summary>
        /// Easting of target center point in map coordinates. 
        /// </summary>
        [XmlElement("dispEwCenter")]
        public LengthMeasure DispEWCenter { get; set; }
        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// North-south offset of target intercept point from shape center. 
        /// </summary>
        [XmlElement("dispNsOffset")]
        public LengthMeasure DispNSOffset { get; set; }
        /// <summary>
        /// East-west offset of target intercept point from shape center. 
        /// </summary>
        [XmlElement("dispEwOffset")]
        public LengthMeasure DispEWOffset { get; set; }
        /// <summary>
        /// Height of target above center point. 
        /// </summary>
        [XmlElement("thickAbove")]
        public LengthMeasure ThickAbove { get; set; }
        /// <summary>
        /// Depth of target below center point. 
        /// </summary>
        [XmlElement("thickBelow")]
        public LengthMeasure ThickBelow { get; set; }
        /// <summary>
        /// Angle of dip with respect to horizontal. 
        /// </summary>
        [XmlElement("dip")]
        public PlaneAngleMeasure Dip { get; set; }
        /// <summary>
        /// Direction of dip with respect to north azimuth reference. 
        /// </summary>
        [XmlElement("strike")]
        public PlaneAngleMeasure Strike { get; set; }
        /// <summary>
        /// Direction of target geometry with respect to north azimuth reference. 
        /// </summary>
        [XmlElement("rotation")]
        public PlaneAngleMeasure Rotation { get; set; }
        /// <summary>
        /// Distance from center to perimeter in rotation direction. This may be ignored depending on the value of typeTargetScope.
        /// </summary>
        [XmlElement("lenMajorAxis")]
        public LengthMeasure LenMajorAxis { get; set; }
        /// <summary>
        /// Distance from center to perimeter at 90 deg to rotation direction. This may be ignored depending on the value of typeTargetScope. 
        /// </summary>
        [XmlElement("widMinorAxis")]
        public LengthMeasure WidMinorAxis { get; set; }
        /// <summary>
        /// The type of scope of the drilling target.
        /// </summary>
        [XmlElement("typeTargetScope")]
        public TargetScope? TypeTargetScope {
            get {
                return typeTargetScopeField;
            } 
            set { 
                typeTargetScopeField = value;
                this.TypeTargetScopeSpecified = true;
            }
        }

        private TargetScope? typeTargetScopeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeTargetScopeSpecified { get; set; }
        /// <summary>
        /// Origin north-south used as starting point for sections, mandatory parameter when sections are used.. 
        /// </summary>
        [XmlElement("dispNsSectOrig")]
        public LengthMeasure DispNSSectOrig { get; set; }
        /// <summary>
        /// Origin east-west used as starting point for sections, mandatory parameter when sections are used. 
        /// </summary>
        [XmlElement("dispEwSectOrig")]
        public LengthMeasure DispEWSectOrig { get; set; }
        /// <summary>
        /// Specifies the definition of north. 
        /// </summary>
        [XmlElement("aziRef")]
        public AziRef? AziRef {
            get {
                return aziRefField;
            } 
            set { 
                aziRefField = value;
                this.AziRefSpecified = true;
            }
        }

        private AziRef? aziRefField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AziRefSpecified { get; set; }
        /// <summary>
        /// Geological or drillers target. 
        /// </summary>
        [XmlElement("catTarg")]
        public TargetCategory? CatTarg {
            get {
                return catTargField;
            } 
            set { 
                catTargField = value;
                this.CatTargSpecified = true;
            }
        }

        private TargetCategory? catTargField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CatTargSpecified { get; set; }
		/// <summary>
        /// The 2D coordinates of the item at the start of the section. The location object is mandatory for the first section starting point. 
        /// </summary>
        [XmlElement("location")]
        public List<Location> Location { get; set; }
		/// <summary>
        /// Sections describing target. These may be ignored depending on the value of typeTargetScope. 
        /// </summary>
        [XmlElement("targetSection")]
        public List<TargetSection> TargetSection { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Element Types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_targetSection", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML Element Types")]
    public partial class TargetSection : Object 
    {

        /// <summary>
        /// Sequence number of section, 1,2,3. 
        /// </summary>
        [XmlElement("sectNumber")]
        public Int16? SectNumber { get; set; }
        /// <summary>
        /// Section scope: Line or Arc. 
        /// </summary>
        [XmlElement("typeTargetSectionScope")]
        public TargetSectionScope? TypeTargetSectionScope { get; set; }
        /// <summary>
        /// Length of straight line section or radius of arc for continuous curve section. 
        /// </summary>
        [XmlElement("lenRadius")]
        public LengthMeasure LenRadius { get; set; }
        /// <summary>
        /// Direction of straight line section or radius of arc for continuous curve section. 
        /// </summary>
        [XmlElement("angleArc")]
        public PlaneAngleMeasure AngleArc { get; set; }
        /// <summary>
        /// Height of target above center point at the start of the section. In the case of an arc, the thickness above should vary linearly with the arc length. 
        /// </summary>
        [XmlElement("thickAbove")]
        public LengthMeasure ThickAbove { get; set; }
        /// <summary>
        /// Depth of target below center point at the start of the section. In the case of an arc, the thickness below should vary linearly with the arc length. 
        /// </summary>
        [XmlElement("thickBelow")]
        public LengthMeasure ThickBelow { get; set; }
		/// <summary>
        /// The 2D coordinates of the item at the start of the section. This is redundant information and can be computed by starting at the section origin and applying the sequence of angleArcs and lenRadius. 
        /// </summary>
        [XmlElement("location")]
        public List<Location> Location { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_trajectorys xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("trajectorys", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_trajectorys xsd type.")]
    public partial class TrajectoryList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single trajectory. 
        /// </summary>
        [XmlElement("trajectory")]
        public List<Trajectory> Trajectory { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Trajectory;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Trajectory object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_trajectory", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Trajectory object.")]
    public partial class Trajectory : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the trajectory. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the trajectory. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Whether or not the trajectory is growing. True ("true" or "1") indicates the that the trajectory is still growing in size (that is, trajectoryStation values are still being added). For example, it may be connected to a realtime stream. False ("false" or "0") indicates that the trajectory is closed (that is, no further trajectoryStation values will be added). Not given indicates that the status of the trajectory is not known. This value is only relevant within the context of a server.
        /// </summary>
        [XmlElement("objectGrowing")]
        public Boolean? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set { 
                objectGrowingField = value;
                this.ObjectGrowingSpecified = true;
            }
        }

        private Boolean? objectGrowingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ObjectGrowingSpecified { get; set; }
        /// <summary>
        /// If a trajectory is tied into another trajectory, a pointer to the parent trajectory. The trajectory may be in another wellbore.
        /// </summary>
        [XmlElement("parentTrajectory")]
        public RefWellboreTrajectory PluggedAndAbandonedrentTrajectory { get; set; }
        /// <summary>
        /// Start date and time of trajectory station measurements. Note that this is NOT a server query parameter.
        /// </summary>
        [XmlElement("dTimTrajStart")]
        public DateTime? DateTimeTrajStart {
            get {
                return dTimTrajStartField;
            } 
            set { 
                dTimTrajStartField = value;
                this.DateTimeTrajStartSpecified = true;
            }
        }

        private DateTime? dTimTrajStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeTrajStartSpecified { get; set; }
        /// <summary>
        /// End date and time of trajectory station measurements. Note that this is NOT a server query parameter.
        /// </summary>
        [XmlElement("dTimTrajEnd")]
        public DateTime? DateTimeTrajEnd {
            get {
                return dTimTrajEndField;
            } 
            set { 
                dTimTrajEndField = value;
                this.DateTimeTrajEndSpecified = true;
            }
        }

        private DateTime? dTimTrajEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeTrajEndSpecified { get; set; }
        /// <summary>
        /// Minimum measured depth of trajectory. This is a query parameter. It's value will be populated by the server to reflect the values of md in the returned trajectoryStations.
        /// </summary>
        [XmlElement("mdMn")]
        public MeasuredDepthCoord MDMin { get; set; }
        /// <summary>
        /// Maximum measured depth of trajectory. This is a query parameter. It's value will be populated by the server to reflect the values of md in the returned trajectoryStations.
        /// </summary>
        [XmlElement("mdMx")]
        public MeasuredDepthCoord MDMax { get; set; }
        /// <summary>
        /// Name of contractor who provided the service.
        /// </summary>
        [XmlElement("serviceCompany")]
        public String ServiceCompany { get; set; }
        /// <summary>
        /// Magnetic declination used to correct a magnetic survey. Starting value if stations have individual values. 
        /// </summary>
        [XmlElement("magDeclUsed")]
        public PlaneAngleMeasure MagDeclUsed { get; set; }
        /// <summary>
        /// Grid correction used to correct a survey. Starting value if stations have individual values.
        /// </summary>
        [XmlElement("gridCorUsed")]
        public PlaneAngleMeasure GridCorUsed { get; set; }
        /// <summary>
        /// Azimuth used for vertical section plot/computations.
        /// </summary>
        [XmlElement("aziVertSect")]
        public PlaneAngleMeasure AziVertSect { get; set; }
        /// <summary>
        /// Origin north-south used for vertical section plot/computations.
        /// </summary>
        [XmlElement("dispNsVertSectOrig")]
        public LengthMeasure DispNSVertSectOrig { get; set; }
        /// <summary>
        /// Origin east-west used for vertical section plot/computations.
        /// </summary>
        [XmlElement("dispEwVertSectOrig")]
        public LengthMeasure DispEWVertSectOrig { get; set; }
        /// <summary>
        /// True ("true" or "1") indicates that this trajectory is definitive for this wellbore. False ("false" or "0") or not given indicates otherwise. There can only be one trajectory per wellbore with definitive=true and it must define the geometry of the whole wellbore (surface to bottom). The definitive trajectory may represent a composite of information in many other trajectories. A query requesting a subset of the possible information can provide a simplistic view of the geometry of the wellbore.
        /// </summary>
        [XmlElement("definitive")]
        public Boolean? Definitive {
            get {
                return definitiveField;
            } 
            set { 
                definitiveField = value;
                this.DefinitiveSpecified = true;
            }
        }

        private Boolean? definitiveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DefinitiveSpecified { get; set; }
        /// <summary>
        /// Is trajectory a result of a memory dump from a tool? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("memory")]
        public Boolean? Memory {
            get {
                return memoryField;
            } 
            set { 
                memoryField = value;
                this.MemorySpecified = true;
            }
        }

        private Boolean? memoryField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MemorySpecified { get; set; }
        /// <summary>
        /// Is trajectory a final or intermediate/preliminary? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("finalTraj")]
        public Boolean? FinalTraj {
            get {
                return finalTrajField;
            } 
            set { 
                finalTrajField = value;
                this.FinalTrajSpecified = true;
            }
        }

        private Boolean? finalTrajField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FinalTrajSpecified { get; set; }
        /// <summary>
        /// Specifies the definition of north. While this is optional because of legacy data, it is strongly recommended that this always be specified.
        /// </summary>
        [XmlElement("aziRef")]
        public AziRef? AziRef {
            get {
                return aziRefField;
            } 
            set { 
                aziRefField = value;
                this.AziRefSpecified = true;
            }
        }

        private AziRef? aziRefField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AziRefSpecified { get; set; }
		/// <summary>
        /// Container element for trajectory station elements.
        /// </summary>
        [XmlElement("trajectoryStation")]
        public List<TrajectoryStation> TrajectoryStation { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_refWellboreTrajectory xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellboreTrajectory", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the cs_refWellboreTrajectory xsd type.")]
    public partial class RefWellboreTrajectory : Object 
    {

        /// <summary>
        /// A pointer to the trajectory within the wellbore.
        /// </summary>
        [XmlElement("trajectoryReference")]
        public RefNameString TrajectoryReference { get; set; }
        /// <summary>
        /// A pointer to the wellbore that contains the trajectoryReference. This is not needed unless the trajectory is outside the context of a common parent wellbore.
        /// </summary>
        [XmlElement("wellboreParent")]
        public RefNameString WellborePluggedAndAbandonedrent { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_trajectoryStations xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("trajectoryStations", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_trajectoryStations xsd type.")]
    public partial class TrajectoryStationList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single trajectory station. 
        /// </summary>
        [XmlElement("trajectoryStation")]
        public List<StandAloneTrajectoryStation> TrajectoryStation { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return TrajectoryStation;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// WITSML - Trajectory Station Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_trajectoryStation", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Trajectory Station Component Schema")]
    public partial class StandAloneTrajectoryStation : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the trajectory.
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the trajectory that contains the trajectory station.
        /// </summary>
        [XmlElement("nameTrajectory")]
        public String NameTrajectory { get; set; }
        /// <summary>
        /// A pointer to the intended target of this station. 
        /// </summary>
        [XmlElement("target")]
        public RefNameString Target { get; set; }
        /// <summary>
        /// Date and time the station was measured or created. 
        /// </summary>
        [XmlElement("dTimStn")]
        public DateTime? DateTimeStn {
            get {
                return dTimStnField;
            } 
            set { 
                dTimStnField = value;
                this.DateTimeStnSpecified = true;
            }
        }

        private DateTime? dTimStnField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStnSpecified { get; set; }
        /// <summary>
        /// Type of survey station. 
        /// </summary>
        [XmlElement("typeTrajStation")]
        public TrajStationType? TypeTrajStation { get; set; }
        /// <summary>
        /// The type of tool used for the measurements.
        /// </summary>
        [XmlElement("typeSurveyTool")]
        public TypeSurveyTool? TypeSurveyTool {
            get {
                return typeSurveyToolField;
            } 
            set { 
                typeSurveyToolField = value;
                this.TypeSurveyToolSpecified = true;
            }
        }

        private TypeSurveyTool? typeSurveyToolField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeSurveyToolSpecified { get; set; }
        /// <summary>
        /// Measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// Hole inclination, measured from vertical. 
        /// </summary>
        [XmlElement("incl")]
        public PlaneAngleMeasure Incl { get; set; }
        /// <summary>
        /// Hole azimuth. Corrected to wells azimuth reference. 
        /// </summary>
        [XmlElement("azi")]
        public PlaneAngleMeasure Azi { get; set; }
        /// <summary>
        /// Toolface angle (magnetic). 
        /// </summary>
        [XmlElement("mtf")]
        public PlaneAngleMeasure Mtf { get; set; }
        /// <summary>
        /// Toolface angle (gravity). 
        /// </summary>
        [XmlElement("gtf")]
        public PlaneAngleMeasure Gtf { get; set; }
        /// <summary>
        /// North-south offset, positive to the North. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.
        /// </summary>
        [XmlElement("dispNs")]
        public LengthMeasure DispNS { get; set; }
        /// <summary>
        /// East-west offset, positive to the East. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location. 
        /// </summary>
        [XmlElement("dispEw")]
        public LengthMeasure DispEW { get; set; }
        /// <summary>
        /// Distance along vertical section azimuth plane. 
        /// </summary>
        [XmlElement("vertSect")]
        public LengthMeasure VertSect { get; set; }
        /// <summary>
        /// Dogleg severity. 
        /// </summary>
        [XmlElement("dls")]
        public AnglePerLengthMeasure DoglegSeverity { get; set; }
        /// <summary>
        /// Turn rate, radius of curvature computation. 
        /// </summary>
        [XmlElement("rateTurn")]
        public AnglePerLengthMeasure RateTurn { get; set; }
        /// <summary>
        /// Build Rate, radius of curvature computation. 
        /// </summary>
        [XmlElement("rateBuild")]
        public AnglePerLengthMeasure RateBuild { get; set; }
        /// <summary>
        /// Delta measured depth from previous station. 
        /// </summary>
        [XmlElement("mdDelta")]
        public MeasuredDepthCoord MDDelta { get; set; }
        /// <summary>
        /// Delta true vertical depth from previous station. 
        /// </summary>
        [XmlElement("tvdDelta")]
        public WellVerticalDepthCoord TvdDelta { get; set; }
        /// <summary>
        /// Tool error model used to compute covariance matrix. 
        /// </summary>
        [XmlElement("modelToolError")]
        public String ModelToolError { get; set; }
        /// <summary>
        /// Survey tool gravity uncertainty. 
        /// </summary>
        [XmlElement("gravTotalUncert")]
        public AccelerationLinearMeasure GravTotalUncert { get; set; }
        /// <summary>
        /// Survey tool dip uncertainty. 
        /// </summary>
        [XmlElement("dipAngleUncert")]
        public PlaneAngleMeasure DipAngleUncert { get; set; }
        /// <summary>
        /// Survey tool magnetic uncertainty. 
        /// </summary>
        [XmlElement("magTotalUncert")]
        public MagneticInductionMeasure MagTotalUncert { get; set; }
        /// <summary>
        /// Was an accelerometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("gravAccelCorUsed")]
        public Boolean? GravAccelCorUsed {
            get {
                return gravAccelCorUsedField;
            } 
            set { 
                gravAccelCorUsedField = value;
                this.GravAccelCorUsedSpecified = true;
            }
        }

        private Boolean? gravAccelCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean GravAccelCorUsedSpecified { get; set; }
        /// <summary>
        /// Was a magnetometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("magXAxialCorUsed")]
        public Boolean? MagXAxialCorUsed {
            get {
                return magXAxialCorUsedField;
            } 
            set { 
                magXAxialCorUsedField = value;
                this.MagXAxialCorUsedSpecified = true;
            }
        }

        private Boolean? magXAxialCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MagXAxialCorUsedSpecified { get; set; }
        /// <summary>
        /// Was a bottom hole assembly sag correction applied to the survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("sagCorUsed")]
        public Boolean? SagCorUsed {
            get {
                return sagCorUsedField;
            } 
            set { 
                sagCorUsedField = value;
                this.SagCorUsedSpecified = true;
            }
        }

        private Boolean? sagCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SagCorUsedSpecified { get; set; }
        /// <summary>
        /// Was a drillstring magnetism correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("magDrlstrCorUsed")]
        public Boolean? MagDrlstrCorUsed {
            get {
                return magDrlstrCorUsedField;
            } 
            set { 
                magDrlstrCorUsedField = value;
                this.MagDrlstrCorUsedSpecified = true;
            }
        }

        private Boolean? magDrlstrCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MagDrlstrCorUsedSpecified { get; set; }
        /// <summary>
        /// Gravitational field theoretical/reference value. 
        /// </summary>
        [XmlElement("gravTotalFieldReference")]
        public AccelerationLinearMeasure GravTotalFieldReference { get; set; }
        /// <summary>
        /// Geomagnetic field theoretical/reference value. 
        /// </summary>
        [XmlElement("magTotalFieldReference")]
        public MagneticInductionMeasure MagTotalFieldReference { get; set; }
        /// <summary>
        /// Magnetic dip angle theoretical/reference value. 
        /// </summary>
        [XmlElement("magDipAngleReference")]
        public PlaneAngleMeasure MagDipAngleReference { get; set; }
        /// <summary>
        /// Geomagnetic model used. 
        /// </summary>
        [XmlElement("magModelUsed")]
        public String MagModelUsed { get; set; }
        /// <summary>
        /// Current valid interval for the geomagnetic model used. 
        /// </summary>
        [XmlElement("magModelValid")]
        public String MagModelValid { get; set; }
        /// <summary>
        /// Gravitational model used. 
        /// </summary>
        [XmlElement("geoModelUsed")]
        public String GeoModelUsed { get; set; }
        /// <summary>
        /// Status of the station. 
        /// </summary>
        [XmlElement("statusTrajStation")]
        public TrajStationStatus? StatusTrajStation {
            get {
                return statusTrajStationField;
            } 
            set { 
                statusTrajStationField = value;
                this.StatusTrajStationSpecified = true;
            }
        }

        private TrajStationStatus? statusTrajStationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StatusTrajStationSpecified { get; set; }
        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
        [XmlElement("rawData")]
        public StnTrajRawData RawData { get; set; }
        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
        [XmlElement("corUsed")]
        public StnTrajCorUsed CorUsed { get; set; }
        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
        [XmlElement("valid")]
        public StnTrajValid Valid { get; set; }
        /// <summary>
        /// Covariance matrix for error model. 
        /// </summary>
        [XmlElement("matrixCov")]
        public StnTrajMatrixCov MatrixCov { get; set; }
		/// <summary>
        /// The 2D coordinates of the item. Note that within the context of trajectory, the "original" coordinates are inherently local coordinates as defined above.
        /// </summary>
        [XmlElement("location")]
        public List<Location> Location { get; set; }
        /// <summary>
        /// A pointer to the trajectoryStation from which this station was derived. The trajectoryStation may be in another wellbore.
        /// </summary>
        [XmlElement("sourceStation")]
        public RefWellboreTrajectoryStation SourceStation { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		/// <summary>
        /// Unique identifier for the trajectory. This uniquely represents the trajectory referenced by the (possibly non-unique) nameTraj. 
        /// </summary>
        [XmlAttribute("uidTrajectory")]
        public String UidTrajectory { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    /// <summary>
    /// This class represents the obj_tubulars xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("tubulars", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_tubulars xsd type.")]
    public partial class TubularList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single tubular (assembly). This represents the "transient" assemblies used in drilling a well as opposed to the "fixed" assemblies (see wbGeometry).
        /// </summary>
        [XmlElement("tubular")]
        public List<Tubular> Tubular { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Tubular;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML tubular object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_tubular", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML tubular object.")]
    public partial class Tubular : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the tubular. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the tubular (assembly). 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Type of tubular assembly. 
        /// </summary>
        [XmlElement("typeTubularAssy")]
        public TubularAssembly? TypeTubularAssy { get; set; }
        /// <summary>
        /// Is float valve present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("valveFloat")]
        public Boolean? ValveFloat {
            get {
                return valveFloatField;
            } 
            set { 
                valveFloatField = value;
                this.ValveFloatSpecified = true;
            }
        }

        private Boolean? valveFloatField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ValveFloatSpecified { get; set; }
        /// <summary>
        /// Is nuclear tool present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("sourceNuclear")]
        public Boolean? SourceNuclear {
            get {
                return sourceNuclearField;
            } 
            set { 
                sourceNuclearField = value;
                this.SourceNuclearSpecified = true;
            }
        }

        private Boolean? sourceNuclearField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SourceNuclearSpecified { get; set; }
        /// <summary>
        /// Maximum hole size generated by assembly. 
        /// </summary>
        [XmlElement("diaHoleAssy")]
        public LengthMeasure DiaHoleAssy { get; set; }
		/// <summary>
        /// Container element for the tubular component elements. 
        /// </summary>
        [XmlElement("tubularComponent")]
        public List<TubularComponent> TubularComponent { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - tubular component - component schema. The order of the components in the XML instance is significant. The components are list in the order that they enter the hole. That is, the first component is closest to the bit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_tubularComponent", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - tubular component - component schema. The order of the components in the XML instance is significant. The components are list in the order that they enter the hole. That is, the first component is closest to the bit.")]
    public partial class TubularComponent : Object 
    {

        /// <summary>
        /// Type of component. 
        /// </summary>
        [XmlElement("typeTubularComp")]
        public TubularComponentType? TypeTubularComp { get; set; }
        /// <summary>
        /// The sequence within which the components entered the hole. That is, a sequence number of 1 entered first, 2 entered next, etc. 
        /// </summary>
        [XmlElement("sequence")]
        public Int16? Sequence { get; set; }
        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
        [XmlElement("id")]
        public LengthMeasure InnerDiameter { get; set; }
        /// <summary>
        /// Outside diameter of the body of the item. 
        /// </summary>
        [XmlElement("od")]
        public LengthMeasure OuterDiameter { get; set; }
        /// <summary>
        /// Maximum outside diameter.
        /// </summary>
        [XmlElement("odMx")]
        public LengthMeasure OuterDiameterMax { get; set; }
        /// <summary>
        /// Length of the item. 
        /// </summary>
        [XmlElement("len")]
        public LengthMeasure Len { get; set; }
        /// <summary>
        /// Average length of joint for tubulars. 
        /// </summary>
        [XmlElement("lenJointAv")]
        public LengthMeasure LenJointAverage { get; set; }
        /// <summary>
        /// Number of joints per stand of tubular. 
        /// </summary>
        [XmlElement("numJointStand")]
        public Int16? NumJointStand {
            get {
                return numJointStandField;
            } 
            set { 
                numJointStandField = value;
                this.NumJointStandSpecified = true;
            }
        }

        private Int16? numJointStandField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumJointStandSpecified { get; set; }
        /// <summary>
        /// Weight per unit length. 
        /// </summary>
        [XmlElement("wtPerLen")]
        public MassPerLengthMeasure WeightPerLen { get; set; }
        /// <summary>
        /// Material grade for the tubular section. 
        /// </summary>
        [XmlElement("grade")]
        public String Grade { get; set; }
        /// <summary>
        /// Minimum pass through diameter. 
        /// </summary>
        [XmlElement("odDrift")]
        public LengthMeasure OuterDiameterDrift { get; set; }
        /// <summary>
        /// Yield stress of steel - worn stress. 
        /// </summary>
        [XmlElement("tensYield")]
        public PressureMeasure TensYield { get; set; }
        /// <summary>
        /// Torque yield stress - worn stress. 
        /// </summary>
        [XmlElement("tqYield")]
        public PressureMeasure TorqueYield { get; set; }
        /// <summary>
        /// Fatigue endurance limit. 
        /// </summary>
        [XmlElement("stressFatig")]
        public PressureMeasure StressFatig { get; set; }
        /// <summary>
        /// Fish neck length. 
        /// </summary>
        [XmlElement("lenFishneck")]
        public LengthMeasure LenFishneck { get; set; }
        /// <summary>
        /// Fish neck inside diameter. 
        /// </summary>
        [XmlElement("idFishneck")]
        public LengthMeasure InnerDiameterFishneck { get; set; }
        /// <summary>
        /// Fish neck outside diameter. 
        /// </summary>
        [XmlElement("odFishneck")]
        public LengthMeasure OuterDiameterFishneck { get; set; }
        /// <summary>
        /// Closed end displacement. 
        /// </summary>
        [XmlElement("disp")]
        public VolumeMeasure Disp { get; set; }
        /// <summary>
        /// Burst pressure. 
        /// </summary>
        [XmlElement("presBurst")]
        public PressureMeasure PresBurst { get; set; }
        /// <summary>
        /// Collapse pressure. 
        /// </summary>
        [XmlElement("presCollapse")]
        public PressureMeasure PresCollapse { get; set; }
        /// <summary>
        /// Service class. 
        /// </summary>
        [XmlElement("classService")]
        public String ClassService { get; set; }
        /// <summary>
        /// Wall thickness wear (commonly in percent). 
        /// </summary>
        [XmlElement("wearWall")]
        public LengthPerLengthMeasure WearWall { get; set; }
        /// <summary>
        /// Wall thickness. 
        /// </summary>
        [XmlElement("thickWall")]
        public LengthMeasure ThickWall { get; set; }
        /// <summary>
        /// Box/Pin configuration. 
        /// </summary>
        [XmlElement("configCon")]
        public BoxPinConfig? ConfigCon {
            get {
                return configConField;
            } 
            set { 
                configConField = value;
                this.ConfigConSpecified = true;
            }
        }

        private BoxPinConfig? configConField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ConfigConSpecified { get; set; }
        /// <summary>
        /// Bending stiffness of tubular. 
        /// </summary>
        [XmlElement("bendStiffness")]
        public ForcePerLengthMeasure BendStiffness { get; set; }
        /// <summary>
        /// Axial stiffness of tubular. 
        /// </summary>
        [XmlElement("axialStiffness")]
        public ForcePerLengthMeasure AxialStiffness { get; set; }
        /// <summary>
        /// Torsional stiffness of tubular. 
        /// </summary>
        [XmlElement("torsionalStiffness")]
        public ForcePerLengthMeasure TorsionalStiffness { get; set; }
        /// <summary>
        /// Type of material. 
        /// </summary>
        [XmlElement("typeMaterial")]
        public MaterialType? TypeMaterial {
            get {
                return typeMaterialField;
            } 
            set { 
                typeMaterialField = value;
                this.TypeMaterialSpecified = true;
            }
        }

        private MaterialType? typeMaterialField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeMaterialSpecified { get; set; }
        /// <summary>
        /// Maximum dogleg severity. 
        /// </summary>
        [XmlElement("doglegMx")]
        public AnglePerLengthMeasure DoglegMax { get; set; }
        /// <summary>
        /// Name of vendor. 
        /// </summary>
        [XmlElement("vendor")]
        public String Vendor { get; set; }
        /// <summary>
        /// Component name from manufacturer. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
		/// <summary>
        /// An identification tag for the component tool. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
        /// <summary>
        /// Bit object. 
        /// </summary>
        [XmlElement("bitRecord")]
        public BitRecord BitRecord { get; set; }
        /// <summary>
        /// Total area of nozzles. 
        /// </summary>
        [XmlElement("areaNozzleFlow")]
        public AreaMeasure AreaNozzleFlow { get; set; }
		/// <summary>
        /// Set of nozzle objects. Examples of items that have nozzles are bit, hole opener, circulation sub, jetting sub, pressure relief sub. 
        /// </summary>
        [XmlElement("nozzle")]
        public List<Nozzle> Nozzle { get; set; }
		/// <summary>
        /// Connection object. 
        /// </summary>
        [XmlElement("connection")]
        public List<Connection> Connection { get; set; }
        /// <summary>
        /// Jar object. 
        /// </summary>
        [XmlElement("jar")]
        public Jar Jar { get; set; }
        /// <summary>
        /// MWD (measurement while drilling) tool object. 
        /// </summary>
        [XmlElement("mwdTool")]
        public MwdTool MwdTool { get; set; }
        /// <summary>
        /// Motor object. 
        /// </summary>
        [XmlElement("motor")]
        public Motor Motor { get; set; }
		/// <summary>
        /// Stabilizer object. 
        /// </summary>
        [XmlElement("stabilizer")]
        public List<Stabilizer> Stabilizer { get; set; }
		/// <summary>
        /// Bend object. 
        /// </summary>
        [XmlElement("bend")]
        public List<Bend> Bend { get; set; }
        /// <summary>
        /// Hole opener object. 
        /// </summary>
        [XmlElement("holeOpener")]
        public HoleOpener HoleOpener { get; set; }
        /// <summary>
        /// Rotary Steerable Tool. 
        /// </summary>
        [XmlElement("rotarySteerableTool")]
        public RotarySteerableTool RotarySteerableTool { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Bit Record Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bitRecord", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Bit Record Component Schema.")]
    public partial class BitRecord : Object 
    {

        /// <summary>
        /// Bit number and rerun number e.g. "4.1" for the first rerun of bit 4. 
        /// </summary>
        [XmlElement("numBit")]
        public String NumBit { get; set; }
        /// <summary>
        /// Diameter of drilled hole. 
        /// </summary>
        [XmlElement("diaBit")]
        public LengthMeasure DiaBit { get; set; }
        /// <summary>
        /// Minimum hole or tubing which bit will pass through (for bi-center bits). 
        /// </summary>
        [XmlElement("diaPassThru")]
        public LengthMeasure DiaPluggedAndAbandonedssThru { get; set; }
        /// <summary>
        /// Diameter of pilot bit (for bi-center bits). 
        /// </summary>
        [XmlElement("diaPilot")]
        public LengthMeasure DiaPilot { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Type of bit. 
        /// </summary>
        [XmlElement("typeBit")]
        public BitType? TypeBit {
            get {
                return typeBitField;
            } 
            set { 
                typeBitField = value;
                this.TypeBitSpecified = true;
            }
        }

        private BitType? typeBitField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeBitSpecified { get; set; }
        /// <summary>
        /// Bit cost in local currency. 
        /// </summary>
        [XmlElement("cost")]
        public Cost Cost { get; set; }
        /// <summary>
        /// IADC bit code. 
        /// </summary>
        [XmlElement("codeIADC")]
        public String CodeIADC { get; set; }
        /// <summary>
        /// Condition of inner tooth rows (inner 2/3 of bit) (0-8). 
        /// </summary>
        [XmlElement("condInitInner")]
        public Int16? CondInitInner {
            get {
                return condInitInnerField;
            } 
            set { 
                condInitInnerField = value;
                this.CondInitInnerSpecified = true;
            }
        }

        private Int16? condInitInnerField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondInitInnerSpecified { get; set; }
        /// <summary>
        /// Condition of outer tooth rows (outer 1/3 of bit) (0-8). 
        /// </summary>
        [XmlElement("condInitOuter")]
        public Int16? CondInitOuter {
            get {
                return condInitOuterField;
            } 
            set { 
                condInitOuterField = value;
                this.CondInitOuterSpecified = true;
            }
        }

        private Int16? condInitOuterField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondInitOuterSpecified { get; set; }
        /// <summary>
        /// Overall dull condition from IADC bit wear 2 character codes. 
        /// </summary>
        [XmlElement("condInitDull")]
        public BitDullCode? CondInitDull {
            get {
                return condInitDullField;
            } 
            set { 
                condInitDullField = value;
                this.CondInitDullSpecified = true;
            }
        }

        private BitDullCode? condInitDullField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondInitDullSpecified { get; set; }
        /// <summary>
        /// Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc). 
        /// </summary>
        [XmlElement("condInitLocation")]
        public String CondInitLocation { get; set; }
        /// <summary>
        /// Condition of bit bearings (integer 0-8 or E, F, N or X)). 
        /// </summary>
        [XmlElement("condInitBearing")]
        public String CondInitBearing { get; set; }
        /// <summary>
        /// Condition of bit gauge in 1/16 of an inch. I = in gauge, else number of 16ths out of gauge. 
        /// </summary>
        [XmlElement("condInitGauge")]
        public String CondInitGauge { get; set; }
        /// <summary>
        /// Other comments on bit condition from IADC list (BitDullCode in standard list). 
        /// </summary>
        [XmlElement("condInitOther")]
        public String CondInitOther { get; set; }
        /// <summary>
        /// Reason bit was pulled from IADC codes. 
        /// </summary>
        [XmlElement("condInitReason")]
        public BitReasonPulled? CondInitReason {
            get {
                return condInitReasonField;
            } 
            set { 
                condInitReasonField = value;
                this.CondInitReasonSpecified = true;
            }
        }

        private BitReasonPulled? condInitReasonField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondInitReasonSpecified { get; set; }
        /// <summary>
        /// Condition of inner tooth rows (inner 2/3 of bit) (0-8). 
        /// </summary>
        [XmlElement("condFinalInner")]
        public Int16? CondFinalInner {
            get {
                return condFinalInnerField;
            } 
            set { 
                condFinalInnerField = value;
                this.CondFinalInnerSpecified = true;
            }
        }

        private Int16? condFinalInnerField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondFinalInnerSpecified { get; set; }
        /// <summary>
        /// Condition of outer tooth rows (outer 1/3 of bit) (0-8). 
        /// </summary>
        [XmlElement("condFinalOuter")]
        public Int16? CondFinalOuter {
            get {
                return condFinalOuterField;
            } 
            set { 
                condFinalOuterField = value;
                this.CondFinalOuterSpecified = true;
            }
        }

        private Int16? condFinalOuterField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondFinalOuterSpecified { get; set; }
        /// <summary>
        /// Overall dull condition from IADC bit wear 2 character codes. 
        /// </summary>
        [XmlElement("condFinalDull")]
        public BitDullCode? CondFinalDull {
            get {
                return condFinalDullField;
            } 
            set { 
                condFinalDullField = value;
                this.CondFinalDullSpecified = true;
            }
        }

        private BitDullCode? condFinalDullField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondFinalDullSpecified { get; set; }
        /// <summary>
        /// Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc). 
        /// </summary>
        [XmlElement("condFinalLocation")]
        public String CondFinalLocation { get; set; }
        /// <summary>
        /// Condition of bit bearings (integer 0-8 or E, F, N or X). 
        /// </summary>
        [XmlElement("condFinalBearing")]
        public String CondFinalBearing { get; set; }
        /// <summary>
        /// Condition of bit gauge in 1/16 of a inch. I = in gauge, else number of 16ths out of gauge. 
        /// </summary>
        [XmlElement("condFinalGauge")]
        public String CondFinalGauge { get; set; }
        /// <summary>
        /// Other comments on bit condition from IADC list (BitDullCode in Standard LISTS). 
        /// </summary>
        [XmlElement("condFinalOther")]
        public String CondFinalOther { get; set; }
        /// <summary>
        /// Reason bit was pulled from IADC codes. 
        /// </summary>
        [XmlElement("condFinalReason")]
        public BitReasonPulled? CondFinalReason {
            get {
                return condFinalReasonField;
            } 
            set { 
                condFinalReasonField = value;
                this.CondFinalReasonSpecified = true;
            }
        }

        private BitReasonPulled? condFinalReasonField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondFinalReasonSpecified { get; set; }
        /// <summary>
        /// Bit drive type (Motor, rotary table etc). 
        /// </summary>
        [XmlElement("drive")]
        public String Drive { get; set; }
        /// <summary>
        /// N = new, U = used. 
        /// </summary>
        [XmlElement("bitClass")]
        public String BitClass { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Nozzle Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_nozzle", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Nozzle Component Schema")]
    public partial class Nozzle : Object 
    {

        /// <summary>
        /// Index if this is an indexed object. 
        /// </summary>
        [XmlElement("index")]
        public Int16? Index {
            get {
                return indexField;
            } 
            set { 
                indexField = value;
                this.IndexSpecified = true;
            }
        }

        private Int16? indexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IndexSpecified { get; set; }
        /// <summary>
        /// Nozzle diameter. 
        /// </summary>
        [XmlElement("diaNozzle")]
        public LengthMeasure DiaNozzle { get; set; }
        /// <summary>
        /// Nozzle type. 
        /// </summary>
        [XmlElement("typeNozzle")]
        public NozzleType? TypeNozzle {
            get {
                return typeNozzleField;
            } 
            set { 
                typeNozzleField = value;
                this.TypeNozzleSpecified = true;
            }
        }

        private NozzleType? typeNozzleField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeNozzleSpecified { get; set; }
        /// <summary>
        /// Length of the nozzle. 
        /// </summary>
        [XmlElement("len")]
        public LengthMeasure Len { get; set; }
        /// <summary>
        /// Nozzle orientation. 
        /// </summary>
        [XmlElement("orientation")]
        public String Orientation { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Tubular Connection Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_connection", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Tubular Connection Component Schema ")]
    public partial class Connection : Object 
    {

        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
        [XmlElement("id")]
        public LengthMeasure InnerDiameter { get; set; }
        /// <summary>
        /// Outside diameter of the body of the item. 
        /// </summary>
        [XmlElement("od")]
        public LengthMeasure OuterDiameter { get; set; }
        /// <summary>
        /// Length of the item. 
        /// </summary>
        [XmlElement("len")]
        public LengthMeasure Len { get; set; }
        /// <summary>
        /// Thread type from API RP7G, 5CT. 
        /// </summary>
        [XmlElement("typeThread")]
        public String TypeThread { get; set; }
        /// <summary>
        /// Thread size. 
        /// </summary>
        [XmlElement("sizeThread")]
        public LengthMeasure SizeThread { get; set; }
        /// <summary>
        /// Yield stress of steel - worn stress. 
        /// </summary>
        [XmlElement("tensYield")]
        public PressureMeasure TensYield { get; set; }
        /// <summary>
        /// Torque yield stress. 
        /// </summary>
        [XmlElement("tqYield")]
        public PressureMeasure TorqueYield { get; set; }
        /// <summary>
        /// Where connected. 
        /// </summary>
        [XmlElement("position")]
        public ConnectionPosition? Position {
            get {
                return positionField;
            } 
            set { 
                positionField = value;
                this.PositionSpecified = true;
            }
        }

        private ConnectionPosition? positionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PositionSpecified { get; set; }
        /// <summary>
        /// For bending stiffness ratio. 
        /// </summary>
        [XmlElement("criticalCrossSection")]
        public AreaMeasure CriticalCrossSection { get; set; }
        /// <summary>
        /// Leak pressure rating. 
        /// </summary>
        [XmlElement("presLeak")]
        public PressureMeasure PresLeak { get; set; }
        /// <summary>
        /// Make up torque. 
        /// </summary>
        [XmlElement("tqMakeup")]
        public MomentOfForceMeasure TorqueMakeup { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Jar Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_jar", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Tubular Jar Component Schema")]
    public partial class Jar : Object 
    {

        /// <summary>
        /// Up set force. 
        /// </summary>
        [XmlElement("forUpSet")]
        public ForceMeasure ForUpSet { get; set; }
        /// <summary>
        /// Down set force. 
        /// </summary>
        [XmlElement("forDownSet")]
        public ForceMeasure ForDownSet { get; set; }
        /// <summary>
        /// Up trip force. 
        /// </summary>
        [XmlElement("forUpTrip")]
        public ForceMeasure ForUpTrip { get; set; }
        /// <summary>
        /// Down trip force. 
        /// </summary>
        [XmlElement("forDownTrip")]
        public ForceMeasure ForDownTrip { get; set; }
        /// <summary>
        /// Pump open force. 
        /// </summary>
        [XmlElement("forPmpOpen")]
        public ForceMeasure ForPmpOpen { get; set; }
        /// <summary>
        /// Seal friction force. 
        /// </summary>
        [XmlElement("forSealFric")]
        public ForceMeasure ForSealFric { get; set; }
        /// <summary>
        /// The kind of jar. 
        /// </summary>
        [XmlElement("typeJar")]
        public JarType? TypeJar {
            get {
                return typeJarField;
            } 
            set { 
                typeJarField = value;
                this.TypeJarSpecified = true;
            }
        }

        private JarType? typeJarField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeJarSpecified { get; set; }
        /// <summary>
        /// The jar action. 
        /// </summary>
        [XmlElement("jarAction")]
        public JarAction? JarAction {
            get {
                return jarActionField;
            } 
            set { 
                jarActionField = value;
                this.JarActionSpecified = true;
            }
        }

        private JarAction? jarActionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean JarActionSpecified { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular MWD Tool Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mwdTool", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Tubular MWD Tool Component Schema")]
    public partial class MwdTool : Object 
    {

        /// <summary>
        /// Minimum flow rate. 
        /// </summary>
        [XmlElement("flowrateMn")]
        public VolumeFlowRateMeasure FlowrateMin { get; set; }
        /// <summary>
        /// Maximum flow rate. 
        /// </summary>
        [XmlElement("flowrateMx")]
        public VolumeFlowRateMeasure FlowrateMax { get; set; }
        /// <summary>
        /// Maximum Temperature. 
        /// </summary>
        [XmlElement("tempMx")]
        public ThermodynamicTemperatureMeasure TempMax { get; set; }
        /// <summary>
        /// Equivalent inner diameter. 
        /// </summary>
        [XmlElement("idEquv")]
        public LengthMeasure IdEquv { get; set; }
		/// <summary>
        /// Sensor object. 
        /// </summary>
        [XmlElement("sensor")]
        public List<Sensor> Sensor { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Sensor Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_sensor", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Tubular Sensor Component Schema")]
    public partial class Sensor : Object 
    {

        /// <summary>
        /// Type from POSC. 
        /// </summary>
        [XmlElement("typeMeasurement")]
        public MeasurementType? TypeMeasurement {
            get {
                return typeMeasurementField;
            } 
            set { 
                typeMeasurementField = value;
                this.TypeMeasurementSpecified = true;
            }
        }

        private MeasurementType? typeMeasurementField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeMeasurementSpecified { get; set; }
        /// <summary>
        /// Offset from bottom of measurement while drilling tool. 
        /// </summary>
        [XmlElement("offsetBot")]
        public LengthMeasure OffsetBot { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Motor Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_motor", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Tubular Motor Component Schema")]
    public partial class Motor : Object 
    {

        /// <summary>
        /// Tool offset from bottom. 
        /// </summary>
        [XmlElement("offsetTool")]
        public LengthMeasure OffsetTool { get; set; }
        /// <summary>
        /// Pressure loss factor. 
        /// </summary>
        [XmlElement("presLossFact")]
        public Double? PresLossFact {
            get {
                return presLossFactField;
            } 
            set { 
                presLossFactField = value;
                this.PresLossFactSpecified = true;
            }
        }

        private Double? presLossFactField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PresLossFactSpecified { get; set; }
        /// <summary>
        /// Minimum flow rate. 
        /// </summary>
        [XmlElement("flowrateMn")]
        public VolumeFlowRateMeasure FlowrateMin { get; set; }
        /// <summary>
        /// Maximum flow rate. 
        /// </summary>
        [XmlElement("flowrateMx")]
        public VolumeFlowRateMeasure FlowrateMax { get; set; }
        /// <summary>
        /// Diameter of rotor at nozzle. 
        /// </summary>
        [XmlElement("diaRotorNozzle")]
        public LengthMeasure DiaRotorNozzle { get; set; }
        /// <summary>
        /// Clearance inside bearing box. 
        /// </summary>
        [XmlElement("clearanceBearBox")]
        public LengthMeasure ClearanceBearBox { get; set; }
        /// <summary>
        /// Number of rotor lobes. 
        /// </summary>
        [XmlElement("lobesRotor")]
        public Int16? LobesRotor {
            get {
                return lobesRotorField;
            } 
            set { 
                lobesRotorField = value;
                this.LobesRotorSpecified = true;
            }
        }

        private Int16? lobesRotorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LobesRotorSpecified { get; set; }
        /// <summary>
        /// Number of stator lobes. 
        /// </summary>
        [XmlElement("lobesStator")]
        public Int16? LobesStator {
            get {
                return lobesStatorField;
            } 
            set { 
                lobesStatorField = value;
                this.LobesStatorSpecified = true;
            }
        }

        private Int16? lobesStatorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LobesStatorSpecified { get; set; }
        /// <summary>
        /// Type of bearing. 
        /// </summary>
        [XmlElement("typeBearing")]
        public BearingType? TypeBearing {
            get {
                return typeBearingField;
            } 
            set { 
                typeBearingField = value;
                this.TypeBearingSpecified = true;
            }
        }

        private BearingType? typeBearingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeBearingSpecified { get; set; }
        /// <summary>
        /// Maximum operating temperature. 
        /// </summary>
        [XmlElement("tempOpMx")]
        public ThermodynamicTemperatureMeasure TempOperatingMax { get; set; }
        /// <summary>
        /// Is rotor catcher present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("rotorCatcher")]
        public Boolean? RotorCatcher {
            get {
                return rotorCatcherField;
            } 
            set { 
                rotorCatcherField = value;
                this.RotorCatcherSpecified = true;
            }
        }

        private Boolean? rotorCatcherField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RotorCatcherSpecified { get; set; }
        /// <summary>
        /// Is dump valve present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("dumpValve")]
        public Boolean? DumpValve {
            get {
                return dumpValveField;
            } 
            set { 
                dumpValveField = value;
                this.DumpValveSpecified = true;
            }
        }

        private Boolean? dumpValveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DumpValveSpecified { get; set; }
        /// <summary>
        /// Nozzle diameter. 
        /// </summary>
        [XmlElement("diaNozzle")]
        public LengthMeasure DiaNozzle { get; set; }
        /// <summary>
        /// Is motor rotatable? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("rotatable")]
        public Boolean? Rotatable {
            get {
                return rotatableField;
            } 
            set { 
                rotatableField = value;
                this.RotatableSpecified = true;
            }
        }

        private Boolean? rotatableField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RotatableSpecified { get; set; }
        /// <summary>
        /// Minimum bend angle setting. 
        /// </summary>
        [XmlElement("bendSettingsMn")]
        public PlaneAngleMeasure BendSettingsMin { get; set; }
        /// <summary>
        /// Maximum bend angle setting. 
        /// </summary>
        [XmlElement("bendSettingsMx")]
        public PlaneAngleMeasure BendSettingsMax { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Stablizer Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stabilizer", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Stablizer Component Schema")]
    public partial class Stabilizer : Object 
    {

        /// <summary>
        /// Length of blade. 
        /// </summary>
        [XmlElement("lenBlade")]
        public LengthMeasure LenBlade { get; set; }
        /// <summary>
        /// Gauge Length of blade. That is, the length of the blade which measures at the odBladeMx.
        /// </summary>
        [XmlElement("lenBladeGauge")]
        public LengthMeasure LenBladeGauge { get; set; }
        /// <summary>
        /// Maximum outer diameter of blade. 
        /// </summary>
        [XmlElement("odBladeMx")]
        public LengthMeasure OuterDiameterBladeMax { get; set; }
        /// <summary>
        /// Minimum outer diameter of blade. 
        /// </summary>
        [XmlElement("odBladeMn")]
        public LengthMeasure OuterDiameterBladeMin { get; set; }
        /// <summary>
        /// Distance of blade bottom from bottom of component. 
        /// </summary>
        [XmlElement("distBladeBot")]
        public LengthMeasure DistBladeBot { get; set; }
        /// <summary>
        /// Blade shape. 
        /// </summary>
        [XmlElement("shapeBlade")]
        public BladeShapeType? ShapeBlade {
            get {
                return shapeBladeField;
            } 
            set { 
                shapeBladeField = value;
                this.ShapeBladeSpecified = true;
            }
        }

        private BladeShapeType? shapeBladeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ShapeBladeSpecified { get; set; }
        /// <summary>
        /// Friction factor. 
        /// </summary>
        [XmlElement("factFric")]
        public Double? FactFric {
            get {
                return factFricField;
            } 
            set { 
                factFricField = value;
                this.FactFricSpecified = true;
            }
        }

        private Double? factFricField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FactFricSpecified { get; set; }
        /// <summary>
        /// Blade type. 
        /// </summary>
        [XmlElement("typeBlade")]
        public BladeType? TypeBlade {
            get {
                return typeBladeField;
            } 
            set { 
                typeBladeField = value;
                this.TypeBladeSpecified = true;
            }
        }

        private BladeType? typeBladeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeBladeSpecified { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Bend Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bend", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Tubular Bend Component Schema.")]
    public partial class Bend : Object 
    {

        /// <summary>
        /// Angle of the bend. 
        /// </summary>
        [XmlElement("angle")]
        public PlaneAngleMeasure Angle { get; set; }
        /// <summary>
        /// Distance of bend from bottom of component. 
        /// </summary>
        [XmlElement("distBendBot")]
        public LengthMeasure DistBendBot { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Hole Opener Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_holeOpener", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Hole Opener Component Schema")]
    public partial class HoleOpener : Object 
    {

        /// <summary>
        /// Under reamer or fixed blade. 
        /// </summary>
        [XmlElement("typeHoleOpener")]
        public HoleOpenerType? TypeHoleOpener {
            get {
                return typeHoleOpenerField;
            } 
            set { 
                typeHoleOpenerField = value;
                this.TypeHoleOpenerSpecified = true;
            }
        }

        private HoleOpenerType? typeHoleOpenerField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeHoleOpenerSpecified { get; set; }
        /// <summary>
        /// Number of cutters. 
        /// </summary>
        [XmlElement("numCutter")]
        public Int16? NumCutter {
            get {
                return numCutterField;
            } 
            set { 
                numCutterField = value;
                this.NumCutterSpecified = true;
            }
        }

        private Int16? numCutterField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumCutterSpecified { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Diameter of the reamer. 
        /// </summary>
        [XmlElement("diaHoleOpener")]
        public LengthMeasure DiaHoleOpener { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rotary Steerable Tool Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rotarySteerableTool", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Rotary Steerable Tool Component Schema ")]
    public partial class RotarySteerableTool : Object 
    {

        /// <summary>
        /// Method used to direct the deviation of the trajectory: PointBit or PushBit.
        /// </summary>
        [XmlElement("deflectionMethod")]
        public DeflectionMethod? DeflectionMethod { get; set; }
        /// <summary>
        /// Offset from bottom connection to bend.
        /// </summary>
        [XmlElement("bendOffset")]
        public LengthMeasure BendOffset {
            get {
                return bendOffsetField;
            } 
            set { 
                if (bendAngleFieldSpecified) throw new Exception("Cannot set property BendOffset when property BendAngle is already set");
                bendOffsetField = value;
                bendOffsetFieldSpecified = true;
            }
        }

        private LengthMeasure bendOffsetField; 
        private bool bendOffsetFieldSpecified = false; 

        /// <summary>
        /// Used with PointTheBit type RSS tools, describes the angle of the bit.
        /// </summary>
        [XmlElement("bendAngle")]
        public PlaneAngleMeasure BendAngle {
            get {
                return bendAngleField;
            } 
            set { 
                if (bendOffsetFieldSpecified) throw new Exception("Cannot set property BendAngle when property BendOffset is already set");
                bendAngleField = value;
                bendAngleFieldSpecified = true;
            }
        }

        private PlaneAngleMeasure bendAngleField; 
        private bool bendAngleFieldSpecified = false; 


        /// <summary>
        /// Minimum size of hole in which the tool can operate.
        /// </summary>
        [XmlElement("holeSizeMn")]
        public LengthMeasure HoleSizeMin { get; set; }
        /// <summary>
        /// Maximum size of hole in which the tool can operate.
        /// </summary>
        [XmlElement("holeSizeMx")]
        public LengthMeasure HoleSizeMax { get; set; }
        /// <summary>
        /// Maximum weight on the bit.
        /// </summary>
        [XmlElement("wobMx")]
        public ForceMeasure WobMax { get; set; }
        /// <summary>
        /// Suggested operating speed.
        /// </summary>
        [XmlElement("operatingSpeed")]
        public AnglePerTimeMeasure OperatingSpeed { get; set; }
        /// <summary>
        /// Maximum rotation speed.
        /// </summary>
        [XmlElement("speedMx")]
        public AnglePerTimeMeasure SpeedMax { get; set; }
        /// <summary>
        /// Minimum flow rate for tool operation.
        /// </summary>
        [XmlElement("flowRateMn")]
        public VolumeFlowRateMeasure FlowRateMin { get; set; }
        /// <summary>
        /// Maximum flow rate for tool operation.
        /// </summary>
        [XmlElement("flowRateMx")]
        public VolumeFlowRateMeasure FlowRateMax { get; set; }
        /// <summary>
        /// Minimum flow rate for programming tool.
        /// </summary>
        [XmlElement("downLinkFlowRateMn")]
        public VolumeFlowRateMeasure DownLinkFlowRateMin { get; set; }
        /// <summary>
        /// Maximum flow rate for programming tool.
        /// </summary>
        [XmlElement("downLinkFlowRateMx")]
        public VolumeFlowRateMeasure DownLinkFlowRateMax { get; set; }
        /// <summary>
        /// Pressure drop across tool.
        /// </summary>
        [XmlElement("pressLossFact")]
        public Double? PressLossFact {
            get {
                return pressLossFactField;
            } 
            set { 
                pressLossFactField = value;
                this.PressLossFactSpecified = true;
            }
        }

        private Double? pressLossFactField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PressLossFactSpecified { get; set; }
        /// <summary>
        /// The number of contact pads.
        /// </summary>
        [XmlElement("padCount")]
        public Int16? PluggedAndAbandoneddCount {
            get {
                return padCountField;
            } 
            set { 
                padCountField = value;
                this.PluggedAndAbandoneddCountSpecified = true;
            }
        }

        private Int16? padCountField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PluggedAndAbandoneddCountSpecified { get; set; }
        /// <summary>
        /// Length of contact pad.
        /// </summary>
        [XmlElement("padLen")]
        public LengthMeasure PluggedAndAbandoneddLen { get; set; }
        /// <summary>
        /// Width of contact pad.
        /// </summary>
        [XmlElement("padWidth")]
        public LengthMeasure PluggedAndAbandoneddWidth { get; set; }
        /// <summary>
        /// Offset from bottom of pad to bottom connector.
        /// </summary>
        [XmlElement("padOffset")]
        public LengthMeasure PluggedAndAbandoneddOffset { get; set; }
        /// <summary>
        /// Outside diameter of tool when pads are activated.
        /// </summary>
        [XmlElement("openPadOd")]
        public LengthMeasure OpenPluggedAndAbandoneddOuterDiameter { get; set; }
        /// <summary>
        /// Outiside diameter of tool when pads are closed.
        /// </summary>
        [XmlElement("closePadOd")]
        public LengthMeasure ClosePluggedAndAbandoneddOuterDiameter { get; set; }
		/// <summary>
        /// A sensor.
        /// </summary>
        [XmlElement("sensor")]
        public List<Sensor> Sensor { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_wbGeometrys xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("wbGeometrys", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_wbGeometrys xsd type.")]
    public partial class WellboreGeometryList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single wellbore geometry. 
        /// </summary>
        [XmlElement("wbGeometry")]
        public List<StandAloneWellboreGeometry> WellboreGeometry { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellboreGeometry;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// WITSML - Wellbore Geometry Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wbGeometry", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Wellbore Geometry Component Schema ")]
    public partial class StandAloneWellboreGeometry : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the wellbore geometry. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore geometry. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Time report generated. 
        /// </summary>
        [XmlElement("dTimReport")]
        public DateTime? DateTimeReport { get; set; }
        /// <summary>
        /// Measured depth at bottom. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// Air gap. 
        /// </summary>
        [XmlElement("gapAir")]
        public LengthMeasure GapAir { get; set; }
        /// <summary>
        /// Water depth. 
        /// </summary>
        [XmlElement("depthWaterMean")]
        public LengthMeasure DepthWaterMean { get; set; }
		/// <summary>
        /// Wellbore geometry section object. 
        /// </summary>
        [XmlElement("wbGeometrySection")]
        public List<WellboreGeometrySection> WellboreGeometrySection { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    /// <summary>
    /// This class represents the obj_wells xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("wells", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_wells xsd type.")]
    public partial class WellList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// Information about a single well. A well is a unique surface location from which wellbores are drilled into the Earth for the purpose of either (1) finding or producing underground resources; or (2) providing services related to the production of underground resources. 
        /// </summary>
        [XmlElement("well")]
        public List<Well> Well { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Well;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Well object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_well", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Well object.")]
    public partial class Well : Object 
    {

        /// <summary>
        /// Human recognizable context for the well. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Legal name of the well. 
        /// </summary>
        [XmlElement("nameLegal")]
        public String NameLegal { get; set; }
        /// <summary>
        /// License number of the well. 
        /// </summary>
        [XmlElement("numLicense")]
        public String NumLicense { get; set; }
        /// <summary>
        /// Government assigned well number. 
        /// </summary>
        [XmlElement("numGovt")]
        public String NumGovt { get; set; }
        /// <summary>
        /// Date and time license was issued. 
        /// </summary>
        [XmlElement("dTimLicense")]
        public DateTime? DateTimeLicense {
            get {
                return dTimLicenseField;
            } 
            set { 
                dTimLicenseField = value;
                this.DateTimeLicenseSpecified = true;
            }
        }

        private DateTime? dTimLicenseField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeLicenseSpecified { get; set; }
        /// <summary>
        /// Name of the field in which the well is located. 
        /// </summary>
        [XmlElement("field")]
        public String Field { get; set; }
        /// <summary>
        /// Country in which well is located. 
        /// </summary>
        [XmlElement("country")]
        public String Country { get; set; }
        /// <summary>
        /// State or province in which well is located. 
        /// </summary>
        [XmlElement("state")]
        public String State { get; set; }
        /// <summary>
        /// County in which the well is located. 
        /// </summary>
        [XmlElement("county")]
        public String County { get; set; }
        /// <summary>
        /// Geo-political region. 
        /// </summary>
        [XmlElement("region")]
        public String Region { get; set; }
        /// <summary>
        /// Geo-political district name. 
        /// </summary>
        [XmlElement("district")]
        public String District { get; set; }
        /// <summary>
        /// Block name in which well is located. 
        /// </summary>
        [XmlElement("block")]
        public String Block { get; set; }
        /// <summary>
        /// The time zone in which well is located. It is the deviation in hours and minutes from UTC. This should be the normal time zone at the well and not a seasonally adjusted value such as daylight savings time. While the time zone is optional in a date time value, it is strongly advised that the zone always be specified in each date time value. The time zone in a date time value may use seasonally adjusted values.
        /// </summary>
        [XmlElement("timeZone")]
        public String TimeZone { get; set; }
        /// <summary>
        /// Operator company name. 
        /// </summary>
        [XmlElement("operator")]
        public String Operator { get; set; }
        /// <summary>
        /// Division of operator company. 
        /// </summary>
        [XmlElement("operatorDiv")]
        public String OperatorDivision { get; set; }
        /// <summary>
        /// Interest for Operator. Commonly in percent. 
        /// </summary>
        [XmlElement("pcInterest")]
        public DimensionlessMeasure PercentInterest { get; set; }
        /// <summary>
        /// American Petroleum Institute well number. 
        /// </summary>
        [XmlElement("numAPI")]
        public String NumAPI { get; set; }
        /// <summary>
        /// POSC Well status. 
        /// </summary>
        [XmlElement("statusWell")]
        public WellStatus? StatusWell {
            get {
                return statusWellField;
            } 
            set { 
                statusWellField = value;
                this.StatusWellSpecified = true;
            }
        }

        private WellStatus? statusWellField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StatusWellSpecified { get; set; }
        /// <summary>
        /// POSC well purpose. 
        /// </summary>
        [XmlElement("purposeWell")]
        public WellPurpose? PurposeWell {
            get {
                return purposeWellField;
            } 
            set { 
                purposeWellField = value;
                this.PurposeWellSpecified = true;
            }
        }

        private WellPurpose? purposeWellField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PurposeWellSpecified { get; set; }
        /// <summary>
        /// POSC well fluid. The type of fluid being produced from or injected into a well facility. 
        /// </summary>
        [XmlElement("fluidWell")]
        public WellFluid? FluidWell {
            get {
                return fluidWellField;
            } 
            set { 
                fluidWellField = value;
                this.FluidWellSpecified = true;
            }
        }

        private WellFluid? fluidWellField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FluidWellSpecified { get; set; }
        /// <summary>
        /// POSC well direction. The direction of flow of the fluids in a well facility (generally, injected or produced, or some combination). 
        /// </summary>
        [XmlElement("directionWell")]
        public WellDirection? DirectionWell {
            get {
                return directionWellField;
            } 
            set { 
                directionWellField = value;
                this.DirectionWellSpecified = true;
            }
        }

        private WellDirection? directionWellField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DirectionWellSpecified { get; set; }
        /// <summary>
        /// Date and time at which well was spudded. 
        /// </summary>
        [XmlElement("dTimSpud")]
        public DateTime? DateTimeSpud {
            get {
                return dTimSpudField;
            } 
            set { 
                dTimSpudField = value;
                this.DateTimeSpudSpecified = true;
            }
        }

        private DateTime? dTimSpudField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpudSpecified { get; set; }
        /// <summary>
        /// Date and time at which well was plugged and abandoned. 
        /// </summary>
        [XmlElement("dTimPa")]
        public DateTime? DateTimePluggedAndAbandoned {
            get {
                return dTimPaField;
            } 
            set { 
                dTimPaField = value;
                this.DateTimePluggedAndAbandonedSpecified = true;
            }
        }

        private DateTime? dTimPaField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePluggedAndAbandonedSpecified { get; set; }
        /// <summary>
        /// Elevation of wellhead relative to a wellDatum. 
        /// </summary>
        [XmlElement("wellheadElevation")]
        public WellElevationCoord WellheadElevation { get; set; }
		/// <summary>
        /// A datum to which elevations and depths are referenced. 
        /// </summary>
        [XmlElement("wellDatum")]
        public List<WellDatum> WellDatum { get; set; }
        /// <summary>
        /// Elevation of ground level (land rigs). 
        /// </summary>
        [XmlElement("groundElevation")]
        public WellElevationCoord GroundElevation { get; set; }
        /// <summary>
        /// Depth of water (not land rigs). 
        /// </summary>
        [XmlElement("waterDepth")]
        public WellVerticalDepthCoord WaterDepth { get; set; }
		/// <summary>
        /// the 2D coordinates of the well surface point in one coordinate reference system. This is where the well crosses ground level on land and crosses the platform offshore. 
        /// </summary>
        [XmlElement("wellLocation")]
        public List<Location> WellLocation { get; set; }
		/// <summary>
        /// Defines a reference point within the context of the well. 
        /// </summary>
        [XmlElement("referencePoint")]
        public List<ReferencePoint> ReferencePoint { get; set; }
		/// <summary>
        /// A coordinate reference system that was used within the context of this well. 
        /// </summary>
        [XmlElement("wellCRS")]
        public List<WellCRS> WellCRS { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines the datums associated with elevation, vertical depth and measured depth coordinates within the context of a well. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellDatum", Namespace="http://www.witsml.org/schemas/131")]
    [Description("Defines the datums associated with elevation, vertical depth and measured depth coordinates within the context of a well. ")]
    public partial class WellDatum : Object 
    {

        /// <summary>
        /// The human understandable contextual name of the reference datum.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The code value that represents the type of reference datum. This may represent a point on a device (e.g., kelly bushing) or it may represent a vertical reference datum (e.g., mean sea level).
        /// </summary>
        [XmlElement("code")]
        public ElevCodeEnum? Code {
            get {
                return codeField;
            } 
            set { 
                codeField = value;
                this.CodeSpecified = true;
            }
        }

        private ElevCodeEnum? codeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CodeSpecified { get; set; }
        /// <summary>
        /// The name of the vertical reference datum in a particular naming system. This should only be specified if the above 'code' represents some variation of sea level. An optional short name (code) can also be specified. Specifying a well known datum is highly desired if the above code is a variant of sea level because sea level varies over time and space. An example would be to specify a name of 'Caspian Sea' with a code of '5106' in the 'EPSG' naming system.
        /// </summary>
        [XmlElement("datumName")]
        public WellKnownNameStruct DatumName { get; set; }
		/// <summary>
        /// Since various activities may use different points as measurement datums, it is useful to characterize the point based on its usage. A well reference datum may have more than one such characterization. For example, it may be the datum used by the driller and logger for measuring their depths. Example usage values would be 'permanent','driller', 'logger' 'WRP' (well reference point) and 'SRP' (site reference point).
        /// </summary>
        [XmlElement("kind")]
        public List<String> Kind { get; set; }
        /// <summary>
        /// A pointer to the wellbore that contains the reference datum. This should be specified if a measured depth is given.
        /// </summary>
        [XmlElement("wellbore")]
        public RefWellWellbore Wellbore { get; set; }
        /// <summary>
        /// A pointer to the rig that contains the device used as a reference datum. The rig may be associated with a wellbore in another well (e.g., pattern drilling using a rig on a track).
        /// </summary>
        [XmlElement("rig")]
        public RefWellWellboreRig Rig { get; set; }
        /// <summary>
        /// The gravity based elevation coordinate of this reference datum as measured from another datum. Positive moving upward from the elevation datum. An elevation should be given unless this is a vertical reference datum (e.g., sea level). 
        /// </summary>
        [XmlElement("elevation")]
        public WellElevationCoord Elevation { get; set; }
        /// <summary>
        /// The measured depth coordinate of this reference datum as measured from another datum. The measured depth datum should either be the same as the elevation datum or it should be relatable to the elevation datum through other datums. Positive moving toward the bottomhole from the measured depth datum. This should be given when a local reference is "downhole", such as a kickoff point or ocean bottom template, and the borehole may not be vertical. If a Depth is given then an Elevation should also be given.
        /// </summary>
        [XmlElement("measuredDepth")]
        public MeasuredDepthCoord MeasuredDepth { get; set; }
        /// <summary>
        /// A contextual description of the well reference datum.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
		/// <summary>
        /// True indicates that this is the default reference datum for measured depth coordinates. False or not given indicates that this is not the default reference datum. Measured depth coordinates that do not specify a datum reference should be assumed to be measured relative to this default reference datum. Only one reference datum may be designated as the default measured depth datum for each well. Values are "true" (or "1") and "false" ( or "0").
        /// </summary>
        [XmlAttribute("defaultMeasuredDepth")]
        public Boolean DefaultMeasuredDepth {
            get {
                return defaultMeasuredDepthField;
            } 
            set { 
                defaultMeasuredDepthField = value;
                this.DefaultMeasuredDepthSpecified = true;
            }
        }

        private Boolean defaultMeasuredDepthField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DefaultMeasuredDepthSpecified { get; set; }
		/// <summary>
        /// True indicates that this is the default reference datum for vertical depth coordinates. False or not given indicates that this is not the default reference datum. Vertical depth coordinates that do not specify a datum reference should be assumed to be measured relative to the default reference datum. Only one reference datum may be designated as the default vertical depth datum for each well. Values are "true" (or "1") and "false" ( or "0").
        /// </summary>
        [XmlAttribute("defaultVerticalDepth")]
        public Boolean DefaultVerticalDepth {
            get {
                return defaultVerticalDepthField;
            } 
            set { 
                defaultVerticalDepthField = value;
                this.DefaultVerticalDepthSpecified = true;
            }
        }

        private Boolean defaultVerticalDepthField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DefaultVerticalDepthSpecified { get; set; }
		/// <summary>
        /// True indicates that this is the default reference datum for elevation coordinates. False or not given indicates that this is not the default reference datum. Elevation coordinates that do not specify a datum reference should be assumed to be measured relative to the default reference datum. Only one reference datum may be designated as the default elevation datum for each well. Values are "true" (or "1") and "false" ( or "0").
        /// </summary>
        [XmlAttribute("defaultElevation")]
        public Boolean DefaultElevation {
            get {
                return defaultElevationField;
            } 
            set { 
                defaultElevationField = value;
                this.DefaultElevationSpecified = true;
            }
        }

        private Boolean defaultElevationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DefaultElevationSpecified { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellKnownNameStruct xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellKnownNameStruct", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the wellKnownNameStruct xsd type.")]
    public partial class WellKnownNameStruct : Object 
    {
        public WellKnownNameStruct() {}
        public WellKnownNameStruct(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The naming system within the name is unique.
        /// </summary>
        [XmlAttribute("namingSystem")]
        public String NamingSystem { get; set; }
		/// <summary>
        /// A unique (short) code associated with the name.
        /// </summary>
        [XmlAttribute("code")]
        public String Code { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Data that represents a foreign key to a wellbore. The wellbore may be defined within the context of another well.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellWellbore", Namespace="http://www.witsml.org/schemas/131")]
    [Description("Data that represents a foreign key to a wellbore. The wellbore may be defined within the context of another well.")]
    public partial class RefWellWellbore : Object 
    {

        /// <summary>
        /// A pointer the wellbore with which there is a relationship.
        /// </summary>
        [XmlElement("wellboreReference")]
        public RefNameString WellboreReference { get; set; }
        /// <summary>
        /// A pointer to the well that contains the wellboreReference. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
        [XmlElement("wellParent")]
        public RefNameString WellPluggedAndAbandonedrent { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A reference to a rig within a wellbore. The wellbore may be defined within the context of another well. This value represents a foreign key from one node to another.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellWellboreRig", Namespace="http://www.witsml.org/schemas/131")]
    [Description("A reference to a rig within a wellbore. The wellbore may be defined within the context of another well. This value represents a foreign key from one node to another.")]
    public partial class RefWellWellboreRig : Object 
    {

        /// <summary>
        /// A pointer to the rig with which there is a relationship.
        /// </summary>
        [XmlElement("rigReference")]
        public RefNameString RigReference { get; set; }
        /// <summary>
        /// A pointer to the wellbore that contains the rigReference. This is not needed unless the referenced rig is outside the context of a common parent wellbore.
        /// </summary>
        [XmlElement("wellboreParent")]
        public RefNameString WellborePluggedAndAbandonedrent { get; set; }
        /// <summary>
        /// A pointer to the well that contains the wellboreParent. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
        [XmlElement("wellParent")]
        public RefNameString WellPluggedAndAbandonedrent { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Reference Point Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_referencePoint", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Reference Point Component Schema.")]
    public partial class ReferencePoint : Object 
    {

        /// <summary>
        /// Human recognizable context for the point. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The kind of point. For example, 'well reference point', 'platform reference point', 'sea surface', 'sea bottom'. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// The gravity based elevation coordinate of this point as measured from a datum. Positive moving upward from the elevation datum. 
        /// </summary>
        [XmlElement("elevation")]
        public WellElevationCoord Elevation { get; set; }
        /// <summary>
        /// The measured depth coordinate of this reference point. Positive moving toward the bottomhole from the measured depth datum. This should be given when the reference is "downhole", such as an ocean bottom template, or when the reference point is also used as a vertical well datum. The measured depth value can be used to determine if the reference point and a vertical well datum are at the same point.
        /// </summary>
        [XmlElement("measuredDepth")]
        public MeasuredDepthCoord MeasuredDepth { get; set; }
		/// <summary>
        /// Two dimensional coordinates that locate the point. 
        /// </summary>
        [XmlElement("location")]
        public List<Location> Location { get; set; }
        /// <summary>
        /// A textual description of the point. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Well Coordinate Reference System Component Schema. Note that this is intended for use with two dimensional coordinates. That does not prevent the use of a three dimensional CRS. It just means that only two coordinates will be specified in that 3D system. The veritcal coordinates are specified separately and, for 3D systems, one of the linked wellDatums should represent the vertical datum of that 3D system so that the height in the 3d system can be determined. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellCRS", Namespace="http://www.witsml.org/schemas/131")]
    [Description(" WITSML - Well Coordinate Reference System Component Schema. Note that this is intended for use with two dimensional coordinates. That does not prevent the use of a three dimensional CRS. It just means that only two coordinates will be specified in that 3D system. The veritcal coordinates are specified separately and, for 3D systems, one of the linked wellDatums should represent the vertical datum of that 3D system so that the height in the 3d system can be determined. ")]
    public partial class WellCRS : Object 
    {

        /// <summary>
        /// Human recognizable context for the system. For a geographic system this is commonly the name of the datum. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Geographic system. 
        /// </summary>
        [XmlElement("geographic")]
        public GeodeticModel Geographic {
            get {
                return geographicField;
            } 
            set { 
                if (mapProjectionFieldSpecified) throw new Exception("Cannot set property Geographic when property MapProjection is already set");
                if (localCRSFieldSpecified) throw new Exception("Cannot set property Geographic when property LocalCRS is already set");
                geographicField = value;
                geographicFieldSpecified = true;
            }
        }

        private GeodeticModel geographicField; 
        private bool geographicFieldSpecified = false; 

        /// <summary>
        /// Map projection system. 
        /// </summary>
        [XmlElement("mapProjection")]
        public Projectionx MapProjection {
            get {
                return mapProjectionField;
            } 
            set { 
                if (geographicFieldSpecified) throw new Exception("Cannot set property MapProjection when property Geographic is already set");
                if (localCRSFieldSpecified) throw new Exception("Cannot set property MapProjection when property LocalCRS is already set");
                mapProjectionField = value;
                mapProjectionFieldSpecified = true;
            }
        }

        private Projectionx mapProjectionField; 
        private bool mapProjectionFieldSpecified = false; 

        /// <summary>
        /// Local (engineering) system. 
        /// </summary>
        [XmlElement("localCRS")]
        public LocalCRS LocalCRS {
            get {
                return localCRSField;
            } 
            set { 
                if (geographicFieldSpecified) throw new Exception("Cannot set property LocalCRS when property Geographic is already set");
                if (mapProjectionFieldSpecified) throw new Exception("Cannot set property LocalCRS when property MapProjection is already set");
                localCRSField = value;
                localCRSFieldSpecified = true;
            }
        }

        private LocalCRS localCRSField; 
        private bool localCRSFieldSpecified = false; 


        /// <summary>
        /// A textual description of the system. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Geodetic Model Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_geodeticModel", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML - Geodetic Model Component Schema")]
    public partial class GeodeticModel : Object 
    {

        /// <summary>
        /// The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'ED50' with a code of '4230' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is also true for any other naming system. If in doubt, contact your local geodesist.
        /// </summary>
        [XmlElement("nameCRS")]
        public WellKnownNameStruct NameCRS { get; set; }
        /// <summary>
        /// Geodetic datum code. This defines a system in the Geoshare naming system and should probably not be used with CRSName. 
        /// </summary>
        [XmlElement("geodeticDatumCode")]
        public GeodeticDatum? GeodeticDatumCode {
            get {
                return geodeticDatumCodeField;
            } 
            set { 
                geodeticDatumCodeField = value;
                this.GeodeticDatumCodeSpecified = true;
            }
        }

        private GeodeticDatum? geodeticDatumCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean GeodeticDatumCodeSpecified { get; set; }
        /// <summary>
        /// Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
        [XmlElement("xTranslation")]
        public LengthMeasure XTranslation { get; set; }
        /// <summary>
        /// Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
        [XmlElement("yTranslation")]
        public LengthMeasure YTranslation { get; set; }
        /// <summary>
        /// Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
        [XmlElement("zTranslation")]
        public LengthMeasure ZTranslation { get; set; }
        /// <summary>
        /// Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
        [XmlElement("xRotation")]
        public PlaneAngleMeasure XRotation { get; set; }
        /// <summary>
        /// Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
        [XmlElement("yRotation")]
        public PlaneAngleMeasure YRotation { get; set; }
        /// <summary>
        /// Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
        [XmlElement("zRotation")]
        public PlaneAngleMeasure ZRotation { get; set; }
        /// <summary>
        /// Ellipsoid scale factor. 
        /// </summary>
        [XmlElement("scaleFactor")]
        public Double? ScaleFactor {
            get {
                return scaleFactorField;
            } 
            set { 
                scaleFactorField = value;
                this.ScaleFactorSpecified = true;
            }
        }

        private Double? scaleFactorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ScaleFactorSpecified { get; set; }
        /// <summary>
        /// Ellipsoid code (spheroid) defining geographic or planar coordinates. Implied if geodeticDatumCode is specified (and is not user defined). 
        /// </summary>
        [XmlElement("ellipsoidCode")]
        public Ellipsoid? EllipsoidCode {
            get {
                return ellipsoidCodeField;
            } 
            set { 
                ellipsoidCodeField = value;
                this.EllipsoidCodeSpecified = true;
            }
        }

        private Ellipsoid? ellipsoidCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EllipsoidCodeSpecified { get; set; }
        /// <summary>
        /// Ellipsoid semi-major axis size. Implied if geodeticDatumCode or ellipsoidCode specified. 
        /// </summary>
        [XmlElement("ellipsoidSemiMajorAxis")]
        public LengthMeasure EllipsoidSemiMajorAxis { get; set; }
        /// <summary>
        /// Ellipsoid inverse flattening value (ie. 1/x). Implied if geodeticDatumCode or ellipsoidCode specified. 
        /// </summary>
        [XmlElement("ellipsoidInverseFlattening")]
        public Double? EllipsoidInverseFlattening {
            get {
                return ellipsoidInverseFlatteningField;
            } 
            set { 
                ellipsoidInverseFlatteningField = value;
                this.EllipsoidInverseFlatteningSpecified = true;
            }
        }

        private Double? ellipsoidInverseFlatteningField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EllipsoidInverseFlatteningSpecified { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_localCRS xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_localCRS", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the cs_localCRS xsd type.")]
    public partial class LocalCRS : Object 
    {

        /// <summary>
        /// A pointer to the reference point that is the origin of this CRS.
        /// </summary>
        [XmlElement("origin")]
        public RefNameString Origin {
            get {
                return originField;
            } 
            set { 
                if (usesWellAsOriginFieldSpecified) throw new Exception("Cannot set property Origin when property UsesWellAsOrigin is already set");
                if (originDescriptionFieldSpecified) throw new Exception("Cannot set property Origin when property OriginDescription is already set");
                originField = value;
                originFieldSpecified = true;
            }
        }

        private RefNameString originField; 
        private bool originFieldSpecified = false; 

        /// <summary>
        /// True ("true" or "1") indicates that the well surface point is the origin of this CRS. False ("false" or "0") or not given indicates otherwise.
        /// </summary>
        [XmlElement("usesWellAsOrigin")]
        public Boolean UsesWellAsOrigin {
            get {
                return usesWellAsOriginField;
            } 
            set { 
                if (originFieldSpecified) throw new Exception("Cannot set property UsesWellAsOrigin when property Origin is already set");
                if (originDescriptionFieldSpecified) throw new Exception("Cannot set property UsesWellAsOrigin when property OriginDescription is already set");
                usesWellAsOriginField = value;
                usesWellAsOriginFieldSpecified = true;
            }
        }

        private Boolean usesWellAsOriginField; 
        private bool usesWellAsOriginFieldSpecified = false; 

        /// <summary>
        /// A textual description of the origin.
        /// </summary>
        [XmlElement("originDescription")]
        public String OriginDescription {
            get {
                return originDescriptionField;
            } 
            set { 
                if (originFieldSpecified) throw new Exception("Cannot set property OriginDescription when property Origin is already set");
                if (usesWellAsOriginFieldSpecified) throw new Exception("Cannot set property OriginDescription when property UsesWellAsOrigin is already set");
                originDescriptionField = value;
                originDescriptionFieldSpecified = true;
            }
        }

        private String originDescriptionField; 
        private bool originDescriptionFieldSpecified = false; 


        /// <summary>
        /// The angle of the Y axis from North (as described in attribute northDirection). Defaults to zero. Positive clockwise.
        /// </summary>
        [XmlElement("yAxisAzimuth")]
        public YAxisAzimuth YAxisAzimuth { get; set; }
        /// <summary>
        /// A free-form description of the Y axis. Examples would be 'parallel to the west side of the platform', or 'along the main entry road'.
        /// </summary>
        [XmlElement("yAxisDescription")]
        public String YAxisDescription { get; set; }
        /// <summary>
        /// True ("true" or "1") indicates that the X axis is rotated counter-clockwise from the Y axis when viewed from above the earth looking down. False ("false" or "0") or not given indicates a clockwise rotation. Generally the X axis is rotated clockwise.
        /// </summary>
        [XmlElement("xRotationCounterClockwise")]
        public Boolean? XRotationCounterClockwise {
            get {
                return xRotationCounterClockwiseField;
            } 
            set { 
                xRotationCounterClockwiseField = value;
                this.XRotationCounterClockwiseSpecified = true;
            }
        }

        private Boolean? xRotationCounterClockwiseField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean XRotationCounterClockwiseSpecified { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Element Types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_projectionx", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML Element Types")]
    public partial class Projectionx : Object 
    {

        /// <summary>
        /// The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'WGS 84 / UTM zone 10N' with a code of '32610' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is also true for any other naming system. If in doubt, contact your local geodesist.
        /// </summary>
        [XmlElement("nameCRS")]
        public WellKnownNameStruct NameCRS { get; set; }
        /// <summary>
        /// A code to identify the type of projection. 
        /// </summary>
        [XmlElement("projectionCode")]
        public Projection? ProjectionCode {
            get {
                return projectionCodeField;
            } 
            set { 
                projectionCodeField = value;
                this.ProjectionCodeSpecified = true;
            }
        }

        private Projection? projectionCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ProjectionCodeSpecified { get; set; }
        /// <summary>
        /// A pointer to the wellCRS that represents the geographic system from which this system was projected.
        /// </summary>
        [XmlElement("projectedFrom")]
        public RefNameString ProjectedFrom { get; set; }
        /// <summary>
        /// Latitude of first standard parallel. 
        /// </summary>
        [XmlElement("stdParallel1")]
        public PlaneAngleMeasure StdPluggedAndAbandonedrallel1 { get; set; }
        /// <summary>
        /// Latitude of second standard parallel, if used. 
        /// </summary>
        [XmlElement("stdParallel2")]
        public PlaneAngleMeasure StdPluggedAndAbandonedrallel2 { get; set; }
        /// <summary>
        /// Longitude of the Y axis of the resulting map. 
        /// </summary>
        [XmlElement("centralMeridian")]
        public PlaneAngleMeasure CentralMeridian { get; set; }
        /// <summary>
        /// Latitude at which the X axis intersects the central meridian. 
        /// </summary>
        [XmlElement("originLatitude")]
        public PlaneAngleMeasure OriginLatitude { get; set; }
        /// <summary>
        /// Longitude of the central meridian. 
        /// </summary>
        [XmlElement("originLongitude")]
        public PlaneAngleMeasure OriginLongitude { get; set; }
        /// <summary>
        /// Latitude of the first point if the two-point specification of the central line is used. 
        /// </summary>
        [XmlElement("latitude1")]
        public PlaneAngleMeasure Latitude1 { get; set; }
        /// <summary>
        /// Longitude of the first point if the two-point specification of the central line is used. 
        /// </summary>
        [XmlElement("longitude1")]
        public PlaneAngleMeasure Longitude1 { get; set; }
        /// <summary>
        /// Latitude of the second point if the two-point specification of the central line is used. 
        /// </summary>
        [XmlElement("latitude2")]
        public PlaneAngleMeasure Latitude2 { get; set; }
        /// <summary>
        /// Longitude of the second point if the two-point specification of the central line is used. 
        /// </summary>
        [XmlElement("longitude2")]
        public PlaneAngleMeasure Longitude2 { get; set; }
        /// <summary>
        /// Latitude of a point for which the scale factor is specified exactly. Default to origin. 
        /// </summary>
        [XmlElement("latitudeForScale")]
        public PlaneAngleMeasure LatitudeForScale { get; set; }
        /// <summary>
        /// Longitude of a point for which the scale factor is specified exactly. Default to origin. 
        /// </summary>
        [XmlElement("longitudeForScale")]
        public PlaneAngleMeasure LongitudeForScale { get; set; }
        /// <summary>
        /// Latitude at which the scale on the map is exact. If none is provided, scale is assumed to be exact at the equator. 
        /// </summary>
        [XmlElement("trueScaleLatitude")]
        public PlaneAngleMeasure TrueScaleLatitude { get; set; }
        /// <summary>
        /// Spheroid radius. 
        /// </summary>
        [XmlElement("spheroidRadius")]
        public LengthMeasure SpheroidRadius { get; set; }
        /// <summary>
        /// Ellipsoid scale factor. 
        /// </summary>
        [XmlElement("scaleFactor")]
        public Double? ScaleFactor {
            get {
                return scaleFactorField;
            } 
            set { 
                scaleFactorField = value;
                this.ScaleFactorSpecified = true;
            }
        }

        private Double? scaleFactorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ScaleFactorSpecified { get; set; }
        /// <summary>
        /// Projection method variant - establishes minor variations of the projection. Geoshare proposal. 
        /// </summary>
        [XmlElement("methodVariant")]
        public ProjectionVariantsObliqueMercator? MethodVariant {
            get {
                return methodVariantField;
            } 
            set { 
                methodVariantField = value;
                this.MethodVariantSpecified = true;
            }
        }

        private ProjectionVariantsObliqueMercator? methodVariantField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MethodVariantSpecified { get; set; }
        /// <summary>
        /// Height above the surface origin location from which the perspective is taken. 
        /// </summary>
        [XmlElement("perspectiveHeight")]
        public LengthMeasure PerspectiveHeight { get; set; }
        /// <summary>
        /// Zone for the type of projection. Zones have values from 1 to 60 with a required direction of "N" (North) or "S" (South). For example, "21N". 
        /// </summary>
        [XmlElement("zone")]
        public String Zone { get; set; }
        /// <summary>
        /// North American Datum type. 
        /// </summary>
        [XmlElement("NADType")]
        public NADTypeList? NADType {
            get {
                return NADTypeField;
            } 
            set { 
                NADTypeField = value;
                this.NADTypeSpecified = true;
            }
        }

        private NADTypeList? NADTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NADTypeSpecified { get; set; }
        /// <summary>
        /// Artificial value added to the X axis. 
        /// </summary>
        [XmlElement("falseEasting")]
        public LengthMeasure FalseEasting { get; set; }
        /// <summary>
        /// Artificial value added to the Y axis. 
        /// </summary>
        [XmlElement("falseNorthing")]
        public LengthMeasure FalseNorthing { get; set; }
        /// <summary>
        /// Bearing angle of the great circle with respect to north at the central point. 
        /// </summary>
        [XmlElement("bearing")]
        public PlaneAngleMeasure Bearing { get; set; }
        /// <summary>
        /// Is the projection in the northern hemisphere or the southern hemisphere. 
        /// </summary>
        [XmlElement("hemisphere")]
        public HemisphereList? Hemisphere {
            get {
                return hemisphereField;
            } 
            set { 
                hemisphereField = value;
                this.HemisphereSpecified = true;
            }
        }

        private HemisphereList? hemisphereField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean HemisphereSpecified { get; set; }
        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Parameter describing the user-defined projection. 
        /// </summary>
        [XmlElement("parameter")]
        public List<IndexedObject> PluggedAndAbandonedrameter { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_wellbores xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("wellbores", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_wellbores xsd type.")]
    public partial class WellboreList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// Information about a single wellbore. A wellbore is a unique, oriented path from the bottom of a drilled borehole to the surface of the Earth. The path must not overlap or cross itself. 
        /// </summary>
        [XmlElement("wellbore")]
        public List<Wellbore> Wellbore { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Wellbore;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Wellbore object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellbore", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Wellbore object.")]
    public partial class Wellbore : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// This is a pointer to the parent wellbore. No parent = starts from top. 
        /// </summary>
        [XmlElement("parentWellbore")]
        public RefNameString PluggedAndAbandonedrentWellbore { get; set; }
        /// <summary>
        /// Operator borehole number. 
        /// </summary>
        [XmlElement("number")]
        public String Number { get; set; }
        /// <summary>
        /// API suffix. 
        /// </summary>
        [XmlElement("suffixAPI")]
        public String SuffixAPI { get; set; }
        /// <summary>
        /// Government assigned number. 
        /// </summary>
        [XmlElement("numGovt")]
        public String NumGovt { get; set; }
        /// <summary>
        /// POSC wellbore status. 
        /// </summary>
        [XmlElement("statusWellbore")]
        public WellStatus? StatusWellbore {
            get {
                return statusWellboreField;
            } 
            set { 
                statusWellboreField = value;
                this.StatusWellboreSpecified = true;
            }
        }

        private WellStatus? statusWellboreField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StatusWellboreSpecified { get; set; }
        /// <summary>
        /// POSC wellbore purpose. 
        /// </summary>
        [XmlElement("purposeWellbore")]
        public WellPurpose? PurposeWellbore {
            get {
                return purposeWellboreField;
            } 
            set { 
                purposeWellboreField = value;
                this.PurposeWellboreSpecified = true;
            }
        }

        private WellPurpose? purposeWellboreField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PurposeWellboreSpecified { get; set; }
        /// <summary>
        /// Type of wellbore. 
        /// </summary>
        [XmlElement("typeWellbore")]
        public WellboreType? TypeWellbore {
            get {
                return typeWellboreField;
            } 
            set { 
                typeWellboreField = value;
                this.TypeWellboreSpecified = true;
            }
        }

        private WellboreType? typeWellboreField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeWellboreSpecified { get; set; }
        /// <summary>
        /// POSC wellbore trajectory shape. 
        /// </summary>
        [XmlElement("shape")]
        public WellboreShape? Shape {
            get {
                return shapeField;
            } 
            set { 
                shapeField = value;
                this.ShapeSpecified = true;
            }
        }

        private WellboreShape? shapeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ShapeSpecified { get; set; }
        /// <summary>
        /// Date and time of wellbore kickoff. 
        /// </summary>
        [XmlElement("dTimKickoff")]
        public DateTime? DateTimeKickoff {
            get {
                return dTimKickoffField;
            } 
            set { 
                dTimKickoffField = value;
                this.DateTimeKickoffSpecified = true;
            }
        }

        private DateTime? dTimKickoffField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeKickoffSpecified { get; set; }
        /// <summary>
        /// True ("true" of "1") indicates that the wellbore has acheieved total depth. That is, drilling has completed. False ("false" or "0") indicates otherwise. Not given indicates that it is not known whether total depth has been reached.
        /// </summary>
        [XmlElement("achievedTD")]
        public Boolean? AchievedTD {
            get {
                return achievedTDField;
            } 
            set { 
                achievedTDField = value;
                this.AchievedTDSpecified = true;
            }
        }

        private Boolean? achievedTDField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AchievedTDSpecified { get; set; }
        /// <summary>
        /// The current measured depth of the borehole. If status is plugged, indicates the maximum depth reached before plugging. 
        /// </summary>
        [XmlElement("mdCurrent")]
        public MeasuredDepthCoord MDCurrent { get; set; }
        /// <summary>
        /// The current true vertical depth of the borehole. If status is plugged, indicates the maximum depth reached before plugging. 
        /// </summary>
        [XmlElement("tvdCurrent")]
        public WellVerticalDepthCoord TvdCurrent { get; set; }
        /// <summary>
        /// Kickoff measured depth of the wellbore. 
        /// </summary>
        [XmlElement("mdKickoff")]
        public MeasuredDepthCoord MDKickoff { get; set; }
        /// <summary>
        /// Kickoff true vertical depth of the wellbore. 
        /// </summary>
        [XmlElement("tvdKickoff")]
        public WellVerticalDepthCoord TvdKickoff { get; set; }
        /// <summary>
        /// Planned measured depth for the wellbore total depth. 
        /// </summary>
        [XmlElement("mdPlanned")]
        public MeasuredDepthCoord MDPlanned { get; set; }
        /// <summary>
        /// Planned true vertical depth for the wellbore total depth. 
        /// </summary>
        [XmlElement("tvdPlanned")]
        public WellVerticalDepthCoord TvdPlanned { get; set; }
        /// <summary>
        /// Planned measured for the wellbore total depth - with respect to seabed. 
        /// </summary>
        [XmlElement("mdSubSeaPlanned")]
        public MeasuredDepthCoord MDSubSeaPlanned { get; set; }
        /// <summary>
        /// Planned true vertical depth for the wellbore total depth - with respect to seabed. 
        /// </summary>
        [XmlElement("tvdSubSeaPlanned")]
        public WellVerticalDepthCoord TvdSubSeaPlanned { get; set; }
        /// <summary>
        /// Target days for drilling wellbore. 
        /// </summary>
        [XmlElement("dayTarget")]
        public TimeMeasure DayTarget { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    /// <summary>
    /// This class represents the obj_wellLogs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("wellLogs", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]
    [Description("This class represents the obj_wellLogs xsd type.")]
    public partial class WellLogList : Object , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single well log. 
        /// </summary>
        [XmlElement("wellLog")]
        public List<WellLog> WellLog { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellLog;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Well Log.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellLog", Namespace="http://www.witsml.org/schemas/131")]
    [Description("The non-contextual content of a WITSML Well Log.")]
    public partial class WellLog : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the log. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the well log. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Whether or not the wellLog is growing. True ("true" or "1") indicates the that the wellLog is still growing in size (that is, logData values are still being added). For example, it may be connected to a realtime stream. False ("false" or "0") indicates that the wellLog is closed (that is, no further logData values will be added). Not given indicates that the status of the wellLog is not known. This value is only relevant within the context of a server.
        /// </summary>
        [XmlElement("objectGrowing")]
        public Boolean? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set { 
                objectGrowingField = value;
                this.ObjectGrowingSpecified = true;
            }
        }

        private Boolean? objectGrowingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ObjectGrowingSpecified { get; set; }
        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
        [XmlElement("serviceCompany")]
        public String ServiceCompany { get; set; }
        /// <summary>
        /// Log run number. This should normally be a number; however some legacy systems encode other information in this value.
        /// </summary>
        [XmlElement("runNumber")]
        public String RunNumber { get; set; }
        /// <summary>
        /// The bottom hole assembly run number associated with this log.
        /// </summary>
        [XmlElement("bhaRunNumber")]
        public Int16? BhaRunNumber {
            get {
                return bhaRunNumberField;
            } 
            set { 
                bhaRunNumberField = value;
                this.BhaRunNumberSpecified = true;
            }
        }

        private Int16? bhaRunNumberField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BhaRunNumberSpecified { get; set; }
        /// <summary>
        /// Date and time that the log was created. 
        /// </summary>
        [XmlElement("creationDate")]
        public DateTime? CreationDate {
            get {
                return creationDateField;
            } 
            set { 
                creationDateField = value;
                this.CreationDateSpecified = true;
            }
        }

        private DateTime? creationDateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CreationDateSpecified { get; set; }
        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Primary index type. If the log is comprised of both DEPTH- and TIME-indexed passes, the primary index type of the log should be DEPTH. 
        /// </summary>
        [XmlElement("indexType")]
        public LogIndexType? IndexType { get; set; }
        /// <summary>
        /// A bounding primary index value for the data records of the log. The minimum indexType value for all data records of the log.
        /// </summary>
        [XmlElement("minIndex")]
        public GenericMeasure MinIndex { get; set; }
        /// <summary>
        /// A bounding primary index value for the data records of the log. The maximum indexType value for all data records of the log.
        /// </summary>
        [XmlElement("maxIndex")]
        public GenericMeasure MaxIndex { get; set; }
        /// <summary>
        /// A bounding (date time) index value for the data records of the log. The minimum date time index value for all data records of the log. If an index is elapsed time and a start date time is specified then the corresponding date time should be calculated. 
        /// </summary>
        [XmlElement("minDateTimeIndex")]
        public DateTime? MinDateTimeIndex {
            get {
                return minDateTimeIndexField;
            } 
            set { 
                minDateTimeIndexField = value;
                this.MinDateTimeIndexSpecified = true;
            }
        }

        private DateTime? minDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MinDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// A bounding (date time) index value for the data records of the log. The maximum date time index value for all data records of the log. If an index is elapsed time and a start date time is specified then the corresponding date time should be calculated. 
        /// </summary>
        [XmlElement("maxDateTimeIndex")]
        public DateTime? MaxDateTimeIndex {
            get {
                return maxDateTimeIndexField;
            } 
            set { 
                maxDateTimeIndexField = value;
                this.MaxDateTimeIndexSpecified = true;
            }
        }

        private DateTime? maxDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MaxDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e. when the null value representation is not explicitly defined). If a null value representation is defined for a log, this becomes the default for all curves in that log (but can be overridden at the block and curve level). An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited or base64 encoded array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
        [XmlElement("nullValue")]
        public String NullValue { get; set; }
		/// <summary>
        /// Log parameters that apply to the overall log. 
        /// </summary>
        [XmlElement("logParam")]
        public List<IndexedObject> LogPluggedAndAbandonedram { get; set; }
		/// <summary>
        /// Information about a curve mnemonic. This defines curve information whose data can be recorded into many blocks. 
        /// </summary>
        [XmlElement("logCurveInfo")]
        public List<WellLogCurveInfo> LogCurveInfo { get; set; }
		/// <summary>
        /// The description of a data block. 
        /// </summary>
        [XmlElement("blockInfo")]
        public List<BlockInfo> BlockInfo { get; set; }
        /// <summary>
        /// Container for one or more blocks of well log data. 
        /// </summary>
        [XmlElement("logData")]
        public List<LogCurveInfoData> LogData { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Well Log - Curve Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellLogCurveInfo", Namespace="http://www.witsml.org/schemas/131")]
    [Description("WITSML Well Log - Curve Information")]
    public partial class WellLogCurveInfo : Object 
    {

        /// <summary>
        /// The curve name. More than one curve can have the same mnemonic but something like the array definition should be different between them.
        /// </summary>
        [XmlElement("mnemonic")]
        public String Minemonic { get; set; }
        /// <summary>
        /// The curve classification obtained from a lookup in the vendors mnemonic catalog. 
        /// </summary>
        [XmlElement("classWitsml")]
        public RealtimeData ClassWitsml {
            get {
                return classWitsmlField;
            } 
            set { 
                classWitsmlField = value;
                this.ClassWitsmlSpecified = true;
            }
        }

        private RealtimeData classWitsmlField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ClassWitsmlSpecified { get; set; }
        /// <summary>
        /// Unit of measurement for the data values. 
        /// </summary>
        [XmlElement("unit")]
        public String Unit { get; set; }
        /// <summary>
        /// Name alias for this trace. 
        /// </summary>
        [XmlElement("mnemAlias")]
        public String MinemAlias { get; set; }
        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e., when the null value representation is not explicitly defined). If a null value is defined in the logCurveInfo, it overrides any null value specified at the logHeader level. An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited or base64 encoded array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data.
        /// </summary>
        [XmlElement("nullValue")]
        public String NullValue { get; set; }
        /// <summary>
        /// True (true or 1) if this curve is a candidate to be a primary index. False (false or 0) or not given, indicates otherwise. An index curve should monotonically change when sorted on its own values (i.e., no duplicates). 
        /// </summary>
        [XmlElement("alternateIndex")]
        public Boolean? AlternateIndex {
            get {
                return alternateIndexField;
            } 
            set { 
                alternateIndexField = value;
                this.AlternateIndexSpecified = true;
            }
        }

        private Boolean? alternateIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AlternateIndexSpecified { get; set; }
        /// <summary>
        /// A pointer to the wellDatum that represents the values of this trace. This is only relevant for measured depths, vertical depths or elevations.
        /// </summary>
        [XmlElement("wellDatum")]
        public RefNameString WellDatum { get; set; }
        /// <summary>
        /// Description of the curve. 
        /// </summary>
        [XmlElement("curveDescription")]
        public String CurveDescription { get; set; }
        /// <summary>
        /// Offset of sensor from a downhole equipment vertical reference (the drill bit, for MWD logs; the tool zero reference for wireline logs). This element is only informative (log values are presented at actual depth, not requiring subtraction of an offset).
        /// </summary>
        [XmlElement("sensorOffset")]
        public LengthMeasure SensorOffset { get; set; }
        /// <summary>
        /// Data source, could be tool name/id. 
        /// </summary>
        [XmlElement("dataSource")]
        public String DataSource { get; set; }
        /// <summary>
        /// Data density of sample in samples per length unit. 
        /// </summary>
        [XmlElement("densData")]
        public PerLengthMeasure DensData { get; set; }
        /// <summary>
        /// State of trace data. 
        /// </summary>
        [XmlElement("traceState")]
        public LogTraceState? TraceState {
            get {
                return traceStateField;
            } 
            set { 
                traceStateField = value;
                this.TraceStateSpecified = true;
            }
        }

        private LogTraceState? traceStateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TraceStateSpecified { get; set; }
        /// <summary>
        /// Origin of trace data. 
        /// </summary>
        [XmlElement("traceOrigin")]
        public LogTraceOrigin? TraceOrigin {
            get {
                return traceOriginField;
            } 
            set { 
                traceOriginField = value;
                this.TraceOriginSpecified = true;
            }
        }

        private LogTraceOrigin? traceOriginField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TraceOriginSpecified { get; set; }
        /// <summary>
        /// Indicates that the channel is encoded using a Base64 representation of binary values, and defines the binary type of elements of the array. If absent and axisDefinition is given, implies space delimited values, whose elemental data type is given by typeLogData.
        /// </summary>
        [XmlElement("encodingDef")]
        public ArrayElementDataType EncodingDef {
            get {
                return encodingDefField;
            } 
            set { 
                if (typeLogDataFieldSpecified) throw new Exception("Cannot set property EncodingDef when property TypeLogData is already set");
                encodingDefField = value;
                encodingDefFieldSpecified = true;
            }
        }

        private ArrayElementDataType encodingDefField; 
        private bool encodingDefFieldSpecified = false; 

        /// <summary>
        /// Curve data type. For simple (non-array) traces, the data type of the curve data. For array curves (except Base64-encoded array curves), the data type of curve array element. For Base64-encoded arrays, the element data type is defined by encodingDef. If neither typeLogData nor encodingDef are given then 'Double' is assumed.
        /// </summary>
        [XmlElement("typeLogData")]
        public LogDataType TypeLogData {
            get {
                return typeLogDataField;
            } 
            set { 
                if (encodingDefFieldSpecified) throw new Exception("Cannot set property TypeLogData when property EncodingDef is already set");
                typeLogDataField = value;
                typeLogDataFieldSpecified = true;
            }
        }

        private LogDataType typeLogDataField; 
        private bool typeLogDataFieldSpecified = false; 


		/// <summary>
        /// Indicates that the curve is an array curve (i.e., multi-valued samples), and provides meta data by which an axis of the array can be understood. A separate definition is required for each axis of an N-dimensional array.
        /// </summary>
        [XmlElement("axisDefinition")]
        public List<AxisDefinition> AxisDefinition { get; set; }
		/// <summary>
        /// Unique identifier for the curve. This value must be unique within the context of the wellLog. This value will be referenced by block curve descriptors.
        /// </summary>
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Describes a well log data block. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_blockInfo", Namespace="http://www.witsml.org/schemas/131")]
    [Description("Describes a well log data block. ")]
    public partial class BlockInfo : Object 
    {

        /// <summary>
        /// The number of data rows in the persistent block. If a value is specified for this element in a query then the server will limit the number of data rows in the result but the return value will still be the number of data rows in the persistent block.
        /// </summary>
        [XmlElement("dataRowCount")]
        public Int32? DataRowCount {
            get {
                return dataRowCountField;
            } 
            set { 
                dataRowCountField = value;
                this.DataRowCountSpecified = true;
            }
        }

        private Int32? dataRowCountField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DataRowCountSpecified { get; set; }
        /// <summary>
        /// Identifies the pass within the run.
        /// </summary>
        [XmlElement("pass")]
        public String PluggedAndAbandonedss { get; set; }
        /// <summary>
        /// A description of the block. For example, 'main log section', 'repeat section', 'logged going in hole' 'main log section, curve group 1', 'composite'.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Primary index type. The index may be a quantity type or it may be a dateTime type. At least one of the index sets must be given. If both are given then "indexType" and "indexCurve" must represent an elapsed time from "startDateTimeIndex". The start and end indexes are server query parameters and will be populated with valid values in a GetFromStore result.
        /// </summary>
        [XmlElement("indexType")]
        public LogIndexType? IndexType { get; set; }
        /// <summary>
        /// When the direction is defined as "Increasing", the startIndex is the starting (minimum) index value at which the first data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first data point is located. 
        /// </summary>
        [XmlElement("startIndex")]
        public GenericMeasure StartIndex { get; set; }
        /// <summary>
        /// When the direction is defined as "Increasing", the endIndex is the ending (maximum) index value at which the last data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last data point is located.
        /// </summary>
        [XmlElement("endIndex")]
        public GenericMeasure EndIndex { get; set; }
        /// <summary>
        /// The sampling increment. Set to zero for unequal sampling. For curves that are originally sampled at a constant increment, this value should be retained because calculated values may have cumulative errors.
        /// </summary>
        [XmlElement("stepIncrement")]
        public RatioGenericMeasure StepIncrement { get; set; }
        /// <summary>
        /// When the direction is defined as "Increasing", the startIndex is the starting (minimum) index value at which the first data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first data point is located. 
        /// </summary>
        [XmlElement("startDateTimeIndex")]
        public DateTime? StartDateTimeIndex {
            get {
                return startDateTimeIndexField;
            } 
            set { 
                startDateTimeIndexField = value;
                this.StartDateTimeIndexSpecified = true;
            }
        }

        private DateTime? startDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StartDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// When the direction is defined as "Increasing", the endIndex is the ending (maximum) index value at which the last data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last data point is located. This value is optional when startDateTimeIndex represents a reference for elapsed times. Otherwise, it should be defined when startDateTimeIndex is defined. 
        /// </summary>
        [XmlElement("endDateTimeIndex")]
        public DateTime? EndDateTimeIndex {
            get {
                return endDateTimeIndexField;
            } 
            set { 
                endDateTimeIndexField = value;
                this.EndDateTimeIndexSpecified = true;
            }
        }

        private DateTime? endDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EndDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// The polarity of change in index values associated with successive data records. Increasing or Decreasing. Mixed is not a valid value.
        /// </summary>
        [XmlElement("direction")]
        public LogIndexDirection? Direction {
            get {
                return directionField;
            } 
            set { 
                directionField = value;
                this.DirectionSpecified = true;
            }
        }

        private LogIndexDirection? directionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DirectionSpecified { get; set; }
        /// <summary>
        /// The mnemonic of the index curve plus the column index. A column index of zero indicates an implied trace whose values start at startIndex and increment by stepIncrement for each row.
        /// </summary>
        [XmlElement("indexCurve")]
        public IndexCurve IndexCurve { get; set; }
        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e. when the null value representation is not explicitly defined). If a null value representation is defined for a log, this becomes the default for all curves in that log (but can be overridden at the block or curve level). An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited or base64 encoded array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
        [XmlElement("nullValue")]
        public String NullValue { get; set; }
		/// <summary>
        /// Log parameters that apply to this block.
        /// </summary>
        [XmlElement("logParam")]
        public List<IndexedObject> LogPluggedAndAbandonedram { get; set; }
		/// <summary>
        /// A curve occurring in data records defined by this block, and its position within the data record. Each curve in the block must have a different mnemonic.
        /// </summary>
        [XmlElement("blockCurveInfo")]
        public List<BlockCurveInfo> BlockCurveInfo { get; set; }
		/// <summary>
        /// Unique identifier for the block. This value must be unique within the context of the wellLog. This value will be pointed to by data levels that are associated with this block.
        /// </summary>
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Descriptor of a curve associated with a block. This captures the representational aspects of the curve. The data semantics is defined by logCurveInfo.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_blockCurveInfo", Namespace="http://www.witsml.org/schemas/131")]
    [Description("Descriptor of a curve associated with a block. This captures the representational aspects of the curve. The data semantics is defined by logCurveInfo.")]
    public partial class BlockCurveInfo : Object 
    {

        /// <summary>
        /// A pointer to the curveInfo's curveId that this curve represents.
        /// </summary>
        [XmlElement("curveId")]
        public String CurveId { get; set; }
        /// <summary>
        /// A 1-based index of curve data in the data records. A value of zero indicates an implied curve with no values in the data record.
        /// </summary>
        [XmlElement("columnIndex")]
        public Int16? ColumnIndex { get; set; }
        /// <summary>
        /// The minimum index value at which the first valid data point is located. This value will be properly set by the server to reflect data in the returned document.
        /// </summary>
        [XmlElement("minIndex")]
        public GenericMeasure MinIndex { get; set; }
        /// <summary>
        /// The maximum index value at which the last valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
        [XmlElement("maxIndex")]
        public GenericMeasure MaxIndex { get; set; }
        /// <summary>
        /// The minimum index value at which the first valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
        [XmlElement("minDateTimeIndex")]
        public DateTime? MinDateTimeIndex {
            get {
                return minDateTimeIndexField;
            } 
            set { 
                minDateTimeIndexField = value;
                this.MinDateTimeIndexSpecified = true;
            }
        }

        private DateTime? minDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MinDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// The maximum index value at which the last valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
        [XmlElement("maxDateTimeIndex")]
        public DateTime? MaxDateTimeIndex {
            get {
                return maxDateTimeIndexField;
            } 
            set { 
                maxDateTimeIndexField = value;
                this.MaxDateTimeIndexSpecified = true;
            }
        }

        private DateTime? maxDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MaxDateTimeIndexSpecified { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the data xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="data", Namespace="http://www.witsml.org/schemas/131")]
    [Description("This class represents the data xsd type.")]
    public partial class LogCurveInfoData : Object 
    {
        public LogCurveInfoData() {}
        public LogCurveInfoData(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A pointer to the block descriptor's uid that this level represents. If more than one block descriptor is specified then this attribute is required.
        /// </summary>
        [XmlAttribute("id")]
        public String Id { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    #endregion

    #region Enumerations
    namespace ReferenceData {
        /// <summary>
        /// This class represents the ItemState xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ItemState xsd enumeration.")]
        public enum ItemState 
        {
        /// <summary>
        /// Actual data measured or entered at the well site.
        /// </summary>
          actual,
        /// <summary>
        /// Model data used for "what if" calculations.
        /// </summary>
          model,
        /// <summary>
        /// A planned object. That is, one which is expected to be executed in the future.
        /// </summary>
          plan,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the timeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the timeUom xsd enumeration.")]
        public enum TimeUom 
        {
        
          s,
        
          a,
        
          cs,
        
          d,
        
          Ga,
        
          h,
        
          [XmlEnum("100s")]
          Item100s,
        
          Ma,
        
          min,
        
          ms,
        
          [XmlEnum("ms/2")]
          ms2,
        
          ns,
        
          ps,
        
          us,
        
          wk,
        
          [XmlEnum("100ka")]
          Item100ka
        }
        /// <summary>
        /// This class represents the WellVerticalCoordinateUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellVerticalCoordinateUom xsd enumeration.")]
        public enum WellVerticalCoordinateUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS,
        
          [XmlEnum("ftBr(65)")]
          ftBr65
        }
        /// <summary>
        /// This class represents the MeasuredDepthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MeasuredDepthUom xsd enumeration.")]
        public enum MeasuredDepthUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS
        }
        /// <summary>
        /// This class represents the PercentUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the PercentUom xsd enumeration.")]
        public enum PercentUom 
        {
        
          [XmlEnum("%")]
          Item
        }
        /// <summary>
        /// This class represents the planeAngleUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the planeAngleUom xsd enumeration.")]
        public enum PlaneAngleUom 
        {
        
          rad,
        
          c,
        
          ccgr,
        
          cgr,
        
          dega,
        
          gon,
        
          gr,
        
          Grad,
        
          krad,
        
          mila,
        
          mina,
        
          mrad,
        
          Mrad,
        
          mseca,
        
          seca,
        
          urad
        }
        /// <summary>
        /// This class represents the AziRef xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the AziRef xsd enumeration.")]
        public enum AziRef 
        {
        
          [XmlEnum("magnetic north")]
          magneticnorth,
        
          [XmlEnum("grid north")]
          gridnorth,
        
          [XmlEnum("true north")]
          truenorth,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the volumePerVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the volumePerVolumeUom xsd enumeration.")]
        public enum VolumePerVolumeUom 
        {
        
          Euc,
        
          [XmlEnum("%")]
          Item,
        
          permil,
        
          ppdk,
        
          ppk,
        
          ppm,
        
          [XmlEnum("bbl/acre.ft")]
          bblacreft,
        
          [XmlEnum("bbl/bbl")]
          bblbbl,
        
          [XmlEnum("bbl/ft3")]
          bblft3,
        
          [XmlEnum("bbl/100bbl")]
          bbl100bbl,
        
          [XmlEnum("bbl/k(ft3)")]
          bblkft3,
        
          [XmlEnum("bbl/M(ft3)")]
          bblMft3,
        
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        
          [XmlEnum("cm3/m3")]
          cm3m3,
        
          [XmlEnum("dm3/m3")]
          dm3m3,
        
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        
          [XmlEnum("galUS/kgalUS")]
          galUSkgalUS,
        
          [XmlEnum("galUK/kgalUK")]
          galUKkgalUK,
        
          [XmlEnum("galUK/ft3")]
          galUKft3,
        
          [XmlEnum("galUK/Mbbl")]
          galUKMbbl,
        
          [XmlEnum("galUS/bbl")]
          galUSbbl,
        
          [XmlEnum("galUS/10bbl")]
          galUS10bbl,
        
          [XmlEnum("galUS/ft3")]
          galUSft3,
        
          [XmlEnum("galUS/Mbbl")]
          galUSMbbl,
        
          [XmlEnum("1000ft3/bbl")]
          Item1000ft3bbl,
        
          [XmlEnum("ksm3/sm3")]
          ksm3sm3,
        
          [XmlEnum("L/10bbl")]
          L10bbl,
        
          [XmlEnum("L/m3")]
          Lm3,
        
          [XmlEnum("m3/ha.m")]
          m3ham,
        
          [XmlEnum("m3/m3")]
          m3m3,
        
          [XmlEnum("M(ft3)/acre.ft")]
          Mft3acreft,
        
          [XmlEnum("mL/galUK")]
          mLgalUK,
        
          [XmlEnum("mL/galUS")]
          mLgalUS,
        
          [XmlEnum("mL/mL")]
          mLmL,
        
          [XmlEnum("MMbbl/acre.ft")]
          MMbblacreft,
        
          [XmlEnum("MMscf60/stb60")]
          MMscf60stb60,
        
          [XmlEnum("Mscf60/stb60")]
          Mscf60stb60,
        
          [XmlEnum("ptUK/Mbbl")]
          ptUKMbbl,
        
          [XmlEnum("ptUS/10bbl")]
          ptUS10bbl,
        
          pu,
        
          [XmlEnum("scm15/stb60")]
          scm15stb60,
        
          [XmlEnum("sm3/ksm3")]
          sm3ksm3,
        
          [XmlEnum("sm3/sm3")]
          sm3sm3,
        
          [XmlEnum("stb60/MMscf60")]
          stb60MMscf60,
        
          [XmlEnum("stb60/MMscm15")]
          stb60MMscm15,
        
          [XmlEnum("stb60/Mscf60")]
          stb60Mscf60,
        
          [XmlEnum("stb60/Mscm15")]
          stb60Mscm15,
        
          [XmlEnum("stb60/scm15")]
          stb60scm15
        }
        /// <summary>
        /// This class represents the volumeFlowRateUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the volumeFlowRateUom xsd enumeration.")]
        public enum VolumeFlowRateUom 
        {
        
          [XmlEnum("m3/s")]
          m3s,
        
          [XmlEnum("bbl/d")]
          bbld,
        
          [XmlEnum("bbl/hr")]
          bblhr,
        
          [XmlEnum("bbl/min")]
          bblmin,
        
          [XmlEnum("cm3/30min")]
          cm330min,
        
          [XmlEnum("cm3/h")]
          cm3h,
        
          [XmlEnum("cm3/min")]
          cm3min,
        
          [XmlEnum("cm3/s")]
          cm3s,
        
          [XmlEnum("dm3/s")]
          dm3s,
        
          [XmlEnum("ft3/d")]
          ft3d,
        
          [XmlEnum("ft3/h")]
          ft3h,
        
          [XmlEnum("ft3/min")]
          ft3min,
        
          [XmlEnum("ft3/s")]
          ft3s,
        
          [XmlEnum("galUK/d")]
          galUKd,
        
          [XmlEnum("galUK/hr")]
          galUKhr,
        
          [XmlEnum("galUK/min")]
          galUKmin,
        
          [XmlEnum("galUS/d")]
          galUSd,
        
          [XmlEnum("galUS/hr")]
          galUShr,
        
          [XmlEnum("galUS/min")]
          galUSmin,
        
          [XmlEnum("kbbl/d")]
          kbbld,
        
          [XmlEnum("1000ft3/d")]
          Item1000ft3d,
        
          [XmlEnum("1000m3/d")]
          Item1000m3d,
        
          [XmlEnum("1000m3/h")]
          Item1000m3h,
        
          [XmlEnum("L/h")]
          Lh,
        
          [XmlEnum("L/min")]
          Lmin,
        
          [XmlEnum("L/s")]
          Ls,
        
          [XmlEnum("m3/d")]
          m3d,
        
          [XmlEnum("m3/h")]
          m3h,
        
          [XmlEnum("m3/min")]
          m3min,
        
          [XmlEnum("Mbbl/d")]
          Mbbld,
        
          [XmlEnum("M(ft3)/d")]
          Mft3d,
        
          [XmlEnum("M(m3)/d")]
          Mm3d
        }
        /// <summary>
        /// This class represents the volumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the volumeUom xsd enumeration.")]
        public enum VolumeUom 
        {
        
          m3,
        
          [XmlEnum("acre.ft")]
          acreft,
        
          bbl,
        
          bcf,
        
          cm3,
        
          dm3,
        
          flozUK,
        
          flozUS,
        
          ft3,
        
          galUK,
        
          galUS,
        
          [XmlEnum("ha.m")]
          ham,
        
          hL,
        
          in3,
        
          [XmlEnum("1000ft3")]
          Item1000ft3,
        
          km3,
        
          L,
        
          Mbbl,
        
          Mcf,
        
          [XmlEnum("M(ft3)")]
          Mft3,
        
          mi3,
        
          mL,
        
          [XmlEnum("M(m3)")]
          Mm3,
        
          mm3,
        
          MMbbl,
        
          ptUK,
        
          ptUS,
        
          qtUK,
        
          qtUS,
        
          tcf,
        
          [XmlEnum("um2.m")]
          um2m,
        
          yd3
        }
        /// <summary>
        /// This class represents the velocityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the velocityUom xsd enumeration.")]
        public enum VelocityUom 
        {
        
          [XmlEnum("m/s")]
          ms,
        
          [XmlEnum("cm/a")]
          cma,
        
          [XmlEnum("cm/s")]
          cms,
        
          [XmlEnum("dm/s")]
          dms,
        
          [XmlEnum("ft/d")]
          ftd,
        
          [XmlEnum("ft/h")]
          fth,
        
          [XmlEnum("ft/min")]
          ftmin,
        
          [XmlEnum("ft/ms")]
          ftms,
        
          [XmlEnum("ft/s")]
          fts,
        
          [XmlEnum("ft/us")]
          ftus,
        
          [XmlEnum("in/a")]
          ina,
        
          [XmlEnum("in/min")]
          inmin,
        
          [XmlEnum("in/s")]
          ins,
        
          [XmlEnum("kft/h")]
          kfth,
        
          [XmlEnum("kft/s")]
          kfts,
        
          [XmlEnum("km/h")]
          kmh,
        
          [XmlEnum("km/s")]
          kms,
        
          knot,
        
          [XmlEnum("m/d")]
          md,
        
          [XmlEnum("m/h")]
          mh,
        
          [XmlEnum("m/min")]
          mmin,
        
          [XmlEnum("m/ms")]
          mms,
        
          [XmlEnum("mi/h")]
          mih,
        
          [XmlEnum("mil/yr")]
          milyr,
        
          [XmlEnum("mm/a")]
          mma,
        
          [XmlEnum("mm/s")]
          mms1,
        
          [XmlEnum("nm/s")]
          nms,
        
          [XmlEnum("um/s")]
          ums
        }
        /// <summary>
        /// This class represents the thermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the thermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperatureUom 
        {
        
          K,
        
          degC,
        
          degF,
        
          degR
        }
        /// <summary>
        /// This class represents the specificVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the specificVolumeUom xsd enumeration.")]
        public enum SpecificVolumeUom 
        {
        
          [XmlEnum("m3/kg")]
          m3kg,
        
          [XmlEnum("bbl/tonUK")]
          bbltonUK,
        
          [XmlEnum("bbl/tonUS")]
          bbltonUS,
        
          [XmlEnum("cm3/g")]
          cm3g,
        
          [XmlEnum("dm3/kg")]
          dm3kg,
        
          [XmlEnum("dm3/t")]
          dm3t,
        
          [XmlEnum("ft3/kg")]
          ft3kg,
        
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        
          [XmlEnum("ft3/sack94")]
          ft3sack94,
        
          [XmlEnum("galUS/sack94")]
          galUSsack94,
        
          [XmlEnum("galUK/lbm")]
          galUKlbm,
        
          [XmlEnum("galUS/lbm")]
          galUSlbm,
        
          [XmlEnum("galUS/tonUK")]
          galUStonUK,
        
          [XmlEnum("galUS/tonUS")]
          galUStonUS,
        
          [XmlEnum("L/100kg")]
          L100kg,
        
          [XmlEnum("L/kg")]
          Lkg,
        
          [XmlEnum("L/t")]
          Lt,
        
          [XmlEnum("L/tonUK")]
          LtonUK,
        
          [XmlEnum("m3/g")]
          m3g,
        
          [XmlEnum("m3/t")]
          m3t,
        
          [XmlEnum("m3/tonUK")]
          m3tonUK,
        
          [XmlEnum("m3/tonUS")]
          m3tonUS
        }
        /// <summary>
        /// This class represents the relativePowerUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the relativePowerUom xsd enumeration.")]
        public enum RelativePowerUom 
        {
        
          [XmlEnum("%")]
          Item,
        
          [XmlEnum("Btu/bhp.hr")]
          Btubhphr,
        
          [XmlEnum("W/kW")]
          WkW,
        
          [XmlEnum("W/W")]
          WW
        }
        /// <summary>
        /// This class represents the pressureUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the pressureUom xsd enumeration.")]
        public enum PressureUom 
        {
        
          Pa,
        
          at,
        
          atm,
        
          bar,
        
          [XmlEnum("cmH2O(4degC)")]
          cmH2O4degC,
        
          [XmlEnum("dyne/cm2")]
          dynecm2,
        
          GPa,
        
          hbar,
        
          [XmlEnum("inH2O(39.2F)")]
          inH2O392F,
        
          [XmlEnum("inH2O(60F)")]
          inH2O60F,
        
          [XmlEnum("inHg(32F)")]
          inHg32F,
        
          [XmlEnum("inHg(60F)")]
          inHg60F,
        
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        
          [XmlEnum("kN/m2")]
          kNm2,
        
          kPa,
        
          kpsi,
        
          [XmlEnum("lbf/ft2")]
          lbfft2,
        
          [XmlEnum("lbf/100ft2")]
          lbf100ft2,
        
          [XmlEnum("lbf/in2")]
          lbfin2,
        
          mbar,
        
          [XmlEnum("mmHg(0C)")]
          mmHg0C,
        
          mPa,
        
          MPa,
        
          Mpsi,
        
          [XmlEnum("N/m2")]
          Nm2,
        
          [XmlEnum("N/mm2")]
          Nmm2,
        
          [XmlEnum("Pa(g)")]
          Pag,
        
          pPa,
        
          psi,
        
          psia,
        
          psig,
        
          [XmlEnum("tonfUS/ft2")]
          tonfUSft2,
        
          [XmlEnum("tonfUS/in2")]
          tonfUSin2,
        
          torr,
        
          ubar,
        
          [XmlEnum("umHg(0C)")]
          umHg0C,
        
          uPa,
        
          upsi
        }
        /// <summary>
        /// This class represents the powerUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the powerUom xsd enumeration.")]
        public enum PowerUom 
        {
        
          W,
        
          ch,
        
          CV,
        
          ehp,
        
          GW,
        
          hhp,
        
          hp,
        
          [XmlEnum("kcal/h")]
          kcalh,
        
          kW,
        
          [XmlEnum("MJ/a")]
          MJa,
        
          MW,
        
          mW,
        
          nW,
        
          [XmlEnum("ton of refrig")]
          tonofrefrig,
        
          TW,
        
          uW
        }
        /// <summary>
        /// This class represents the perLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the perLengthUom xsd enumeration.")]
        public enum PerLengthUom 
        {
        
          [XmlEnum("1/m")]
          Item1m,
        
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        
          [XmlEnum("1/cm")]
          Item1cm,
        
          [XmlEnum("1/ft")]
          Item1ft,
        
          [XmlEnum("1/in")]
          Item1in,
        
          [XmlEnum("1/mi")]
          Item1mi,
        
          [XmlEnum("1/mm")]
          Item1mm,
        
          [XmlEnum("1/nm")]
          Item1nm,
        
          [XmlEnum("1/yd")]
          Item1yd
        }
        /// <summary>
        /// This class represents the momentOfForceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the momentOfForceUom xsd enumeration.")]
        public enum MomentOfForceUom 
        {
        
          J,
        
          [XmlEnum("dN.m")]
          dNm,
        
          [XmlEnum("daN.m")]
          daNm,
        
          [XmlEnum("ft.lbf")]
          ftlbf,
        
          [XmlEnum("kft.lbf")]
          kftlbf,
        
          [XmlEnum("kgf.m")]
          kgfm,
        
          [XmlEnum("kN.m")]
          kNm,
        
          [XmlEnum("lbf.ft")]
          lbfft,
        
          [XmlEnum("lbf.in")]
          lbfin,
        
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        
          [XmlEnum("N.m")]
          Nm,
        
          [XmlEnum("pdl.ft")]
          pdlft,
        
          [XmlEnum("tonfUS.ft")]
          tonfUSft,
        
          [XmlEnum("tonfUS.mi")]
          tonfUSmi
        }
        /// <summary>
        /// This class represents the massPerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the massPerLengthUom xsd enumeration.")]
        public enum MassPerLengthUom 
        {
        
          [XmlEnum("kg/m")]
          kgm,
        
          [XmlEnum("klbm/in")]
          klbmin,
        
          [XmlEnum("lbm/ft")]
          lbmft,
        
          [XmlEnum("Mg/in")]
          Mgin,
        
          [XmlEnum("kg.m/cm2")]
          kgmcm2
        }
        /// <summary>
        /// This class represents the massUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the massUom xsd enumeration.")]
        public enum MassUom 
        {
        
          kg,
        
          ag,
        
          ct,
        
          cwtUK,
        
          cwtUS,
        
          g,
        
          grain,
        
          klbm,
        
          lbm,
        
          Mg,
        
          mg,
        
          [XmlEnum("oz(av)")]
          ozav,
        
          [XmlEnum("oz(troy)")]
          oztroy,
        
          ozm,
        
          sack94,
        
          t,
        
          tonUK,
        
          tonUS,
        
          ug
        }
        /// <summary>
        /// This class represents the massConcentrationUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the massConcentrationUom xsd enumeration.")]
        public enum MassConcentrationUom 
        {
        
          Euc,
        
          [XmlEnum("%")]
          Item,
        
          [XmlEnum("g/kg")]
          gkg,
        
          [XmlEnum("kg/kg")]
          kgkg,
        
          [XmlEnum("kg/sack94")]
          kgsack94,
        
          [XmlEnum("mg/kg")]
          mgkg,
        
          permil,
        
          ppdk,
        
          ppk,
        
          ppm
        }
        /// <summary>
        /// This class represents the magneticInductionUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the magneticInductionUom xsd enumeration.")]
        public enum MagneticInductionUom 
        {
        
          T,
        
          gauss,
        
          mT,
        
          mgauss,
        
          nT,
        
          uT
        }
        /// <summary>
        /// This class represents the magneticFieldStrengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the magneticFieldStrengthUom xsd enumeration.")]
        public enum MagneticFieldStrengthUom 
        {
        
          [XmlEnum("A/m")]
          Am,
        
          [XmlEnum("A/mm")]
          Amm,
        
          gamma,
        
          Oe
        }
        /// <summary>
        /// This class represents the lengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the lengthPerLengthUom xsd enumeration.")]
        public enum LengthPerLengthUom 
        {
        
          [XmlEnum("%")]
          Item,
        
          [XmlEnum("ft/100ft")]
          ft100ft,
        
          [XmlEnum("ft/ft")]
          ftft,
        
          [XmlEnum("ft/in")]
          ftin,
        
          [XmlEnum("ft/m")]
          ftm,
        
          [XmlEnum("ft/mi")]
          ftmi,
        
          [XmlEnum("km/cm")]
          kmcm,
        
          [XmlEnum("m/30m")]
          m30m,
        
          [XmlEnum("m/cm")]
          mcm,
        
          [XmlEnum("m/km")]
          mkm,
        
          [XmlEnum("m/m")]
          mm,
        
          [XmlEnum("mi/in")]
          miin
        }
        /// <summary>
        /// This class represents the lengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the lengthUom xsd enumeration.")]
        public enum LengthUom 
        {
        
          m,
        
          angstrom,
        
          chBnA,
        
          chBnB,
        
          chCla,
        
          chSe,
        
          chUS,
        
          cm,
        
          dm,
        
          fathom,
        
          fm,
        
          ft,
        
          ftBnA,
        
          ftBnB,
        
          [XmlEnum("ftBr(65)")]
          ftBr65,
        
          ftCla,
        
          ftGC,
        
          ftInd,
        
          [XmlEnum("ftInd(37)")]
          ftInd37,
        
          [XmlEnum("ftInd(62)")]
          ftInd62,
        
          [XmlEnum("ftInd(75)")]
          ftInd75,
        
          ftMA,
        
          ftSe,
        
          ftUS,
        
          @in,
        
          [XmlEnum("in/10")]
          in10,
        
          [XmlEnum("in/16")]
          in16,
        
          [XmlEnum("in/32")]
          in32,
        
          [XmlEnum("in/64")]
          in64,
        
          inUS,
        
          km,
        
          lkBnA,
        
          lkBnB,
        
          lkCla,
        
          lkSe,
        
          lkUS,
        
          mGer,
        
          mi,
        
          mil,
        
          miUS,
        
          mm,
        
          Mm,
        
          nautmi,
        
          nm,
        
          pm,
        
          um,
        
          yd,
        
          ydBnA,
        
          ydBnB,
        
          ydCla,
        
          ydIm,
        
          ydInd,
        
          [XmlEnum("ydInd(37)")]
          ydInd37,
        
          [XmlEnum("ydInd(62)")]
          ydInd62,
        
          [XmlEnum("ydInd(75)")]
          ydInd75,
        
          ydSe
        }
        /// <summary>
        /// This class represents the illuminanceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the illuminanceUom xsd enumeration.")]
        public enum IlluminanceUom 
        {
        
          lx,
        
          [XmlEnum("lm/m2")]
          lmm2,
        
          footcandle,
        
          klx
        }
        /// <summary>
        /// This class represents the frequencyUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the frequencyUom xsd enumeration.")]
        public enum FrequencyUom 
        {
        
          Hz,
        
          [XmlEnum("c/s")]
          cs,
        
          GHz,
        
          kHz,
        
          mHz,
        
          MHz,
        
          uHz,
        
          [XmlEnum("1/s")]
          Item1s,
        
          [XmlEnum("1/a")]
          Item1a,
        
          [XmlEnum("1/d")]
          Item1d,
        
          [XmlEnum("1/h")]
          Item1h,
        
          [XmlEnum("1/min")]
          Item1min,
        
          [XmlEnum("1/wk")]
          Item1wk,
        
          [XmlEnum("kEuc/s")]
          kEucs
        }
        /// <summary>
        /// This class represents the forcePerVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the forcePerVolumeUom xsd enumeration.")]
        public enum ForcePerVolumeUom 
        {
        
          [XmlEnum("N/m3")]
          Nm3,
        
          [XmlEnum("atm/100m")]
          atm100m,
        
          [XmlEnum("atm/m")]
          atmm,
        
          [XmlEnum("bar/km")]
          barkm,
        
          [XmlEnum("bar/m")]
          barm,
        
          [XmlEnum("GPa/cm")]
          GPacm,
        
          [XmlEnum("kPa/100m")]
          kPa100m,
        
          [XmlEnum("kPa/m")]
          kPam,
        
          [XmlEnum("lbf/ft3")]
          lbfft3,
        
          [XmlEnum("lbf/galUS")]
          lbfgalUS,
        
          [XmlEnum("MPa/m")]
          MPam,
        
          [XmlEnum("psi/ft")]
          psift,
        
          [XmlEnum("psi/100ft")]
          psi100ft,
        
          [XmlEnum("psi/kft")]
          psikft,
        
          [XmlEnum("psi/m")]
          psim,
        
          [XmlEnum("Pa/m")]
          Pam,
        
          [XmlEnum("atm/ft")]
          atmft
        }
        /// <summary>
        /// This class represents the forcePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the forcePerLengthUom xsd enumeration.")]
        public enum ForcePerLengthUom 
        {
        
          [XmlEnum("N/30m")]
          N30m,
        
          [XmlEnum("N/m")]
          Nm,
        
          [XmlEnum("dyne/cm")]
          dynecm,
        
          [XmlEnum("kN/m")]
          kNm,
        
          [XmlEnum("kgf/cm")]
          kgfcm,
        
          [XmlEnum("lbf/100ft")]
          lbf100ft,
        
          [XmlEnum("lbf/30m")]
          lbf30m,
        
          [XmlEnum("lbf/ft")]
          lbfft,
        
          [XmlEnum("lbf/in")]
          lbfin,
        
          [XmlEnum("mN/km")]
          mNkm,
        
          [XmlEnum("mN/m")]
          mNm,
        
          [XmlEnum("pdl/cm")]
          pdlcm,
        
          [XmlEnum("tonfUK/ft")]
          tonfUKft,
        
          [XmlEnum("tonfUS/ft")]
          tonfUSft
        }
        /// <summary>
        /// This class represents the forceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the forceUom xsd enumeration.")]
        public enum ForceUom 
        {
        
          N,
        
          daN,
        
          dyne,
        
          gf,
        
          kdyne,
        
          kgf,
        
          klbf,
        
          kN,
        
          lbf,
        
          Mgf,
        
          mN,
        
          MN,
        
          ozf,
        
          pdl,
        
          tonfUK,
        
          tonfUS,
        
          uN
        }
        /// <summary>
        /// This class represents the equivalentPerMassUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the equivalentPerMassUom xsd enumeration.")]
        public enum EquivalentPerMassUom 
        {
        
          [XmlEnum("eq/kg")]
          eqkg,
        
          [XmlEnum("meq/g")]
          meqg,
        
          [XmlEnum("meq/100g")]
          meq100g
        }
        /// <summary>
        /// This class represents the energyPerAreaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the energyPerAreaUom xsd enumeration.")]
        public enum EnergyPerAreaUom 
        {
        
          [XmlEnum("N/m")]
          Nm,
        
          [XmlEnum("erg/cm2")]
          ergcm2,
        
          [XmlEnum("J/cm2")]
          Jcm2,
        
          [XmlEnum("J/m2")]
          Jm2,
        
          [XmlEnum("kgf.m/cm2")]
          kgfmcm2,
        
          [XmlEnum("lbf.ft/in2")]
          lbfftin2,
        
          [XmlEnum("mJ/cm2")]
          mJcm2,
        
          [XmlEnum("mJ/m2")]
          mJm2
        }
        /// <summary>
        /// This class represents the electricPotentialUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the electricPotentialUom xsd enumeration.")]
        public enum ElectricPotentialUom 
        {
        
          V,
        
          kV,
        
          mV,
        
          MV,
        
          uV
        }
        /// <summary>
        /// This class represents the electricCurrentUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the electricCurrentUom xsd enumeration.")]
        public enum ElectricCurrentUom 
        {
        
          A,
        
          MA,
        
          kA,
        
          mA,
        
          nA,
        
          pA,
        
          uA
        }
        /// <summary>
        /// This class represents the dynamicViscosityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the dynamicViscosityUom xsd enumeration.")]
        public enum DynamicViscosityUom 
        {
        
          [XmlEnum("Pa.s")]
          Pas,
        
          cP,
        
          P,
        
          [XmlEnum("psi.s")]
          psis,
        
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        
          [XmlEnum("mPa.s")]
          mPas,
        
          [XmlEnum("N.s/m2")]
          Nsm2
        }
        /// <summary>
        /// This class represents the dimensionlessUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the dimensionlessUom xsd enumeration.")]
        public enum DimensionlessUom 
        {
        
          Euc,
        
          [XmlEnum("%")]
          Item,
        
          cEuc,
        
          mEuc,
        
          nEuc,
        
          uEuc
        }
        /// <summary>
        /// This class represents the densityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the densityUom xsd enumeration.")]
        public enum DensityUom 
        {
        
          [XmlEnum("kg/m3")]
          kgm3,
        
          [XmlEnum("10Mg/m3")]
          Item10Mgm3,
        
          dAPI,
        
          [XmlEnum("g/cm3")]
          gcm3,
        
          [XmlEnum("g/dm3")]
          gdm3,
        
          [XmlEnum("g/galUK")]
          ggalUK,
        
          [XmlEnum("g/galUS")]
          ggalUS,
        
          [XmlEnum("g/L")]
          gL,
        
          [XmlEnum("g/m3")]
          gm3,
        
          [XmlEnum("grain/ft3")]
          grainft3,
        
          [XmlEnum("grain/galUS")]
          graingalUS,
        
          [XmlEnum("grain/100ft3")]
          grain100ft3,
        
          [XmlEnum("kg/dm3")]
          kgdm3,
        
          [XmlEnum("kg/L")]
          kgL,
        
          [XmlEnum("Mg/m3")]
          Mgm3,
        
          [XmlEnum("lbm/10bbl")]
          lbm10bbl,
        
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        
          [XmlEnum("lbm/ft3")]
          lbmft3,
        
          [XmlEnum("lbm/galUK")]
          lbmgalUK,
        
          [XmlEnum("lbm/1000galUK")]
          lbm1000galUK,
        
          [XmlEnum("lbm/galUS")]
          lbmgalUS,
        
          [XmlEnum("lbm/1000galUS")]
          lbm1000galUS,
        
          [XmlEnum("lbm/in3")]
          lbmin3,
        
          [XmlEnum("lbm/Mbbl")]
          lbmMbbl,
        
          [XmlEnum("mg/dm3")]
          mgdm3,
        
          [XmlEnum("mg/galUS")]
          mggalUS,
        
          [XmlEnum("mg/L")]
          mgL,
        
          [XmlEnum("mg/m3")]
          mgm3,
        
          [XmlEnum("ug/cm3")]
          ugcm3
        }
        /// <summary>
        /// This class represents the areaPerAreaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the areaPerAreaUom xsd enumeration.")]
        public enum AreaPerAreaUom 
        {
        
          Euc,
        
          [XmlEnum("%")]
          Item,
        
          [XmlEnum("in2/ft2")]
          in2ft2,
        
          [XmlEnum("in2/in2")]
          in2in2,
        
          [XmlEnum("m2/m2")]
          m2m2,
        
          [XmlEnum("mm2/mm2")]
          mm2mm2
        }
        /// <summary>
        /// This class represents the areaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the areaUom xsd enumeration.")]
        public enum AreaUom 
        {
        
          m2,
        
          acre,
        
          b,
        
          cm2,
        
          ft2,
        
          ha,
        
          in2,
        
          km2,
        
          mi2,
        
          miUS2,
        
          mm2,
        
          um2,
        
          yd2
        }
        /// <summary>
        /// This class represents the anglePerTimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the anglePerTimeUom xsd enumeration.")]
        public enum AnglePerTimeUom 
        {
        
          [XmlEnum("rad/s")]
          rads,
        
          [XmlEnum("c/s")]
          cs,
        
          [XmlEnum("dega/h")]
          degah,
        
          [XmlEnum("dega/min")]
          degamin,
        
          [XmlEnum("dega/s")]
          degas,
        
          [XmlEnum("rev/s")]
          revs,
        
          rpm
        }
        /// <summary>
        /// This class represents the anglePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the anglePerLengthUom xsd enumeration.")]
        public enum AnglePerLengthUom 
        {
        
          [XmlEnum("rad/m")]
          radm,
        
          [XmlEnum("dega/30ft")]
          dega30ft,
        
          [XmlEnum("dega/ft")]
          degaft,
        
          [XmlEnum("dega/100ft")]
          dega100ft,
        
          [XmlEnum("dega/m")]
          degam,
        
          [XmlEnum("dega/30m")]
          dega30m,
        
          [XmlEnum("rad/ft")]
          radft
        }
        /// <summary>
        /// This class represents the accelerationLinearUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the accelerationLinearUom xsd enumeration.")]
        public enum AccelerationLinearUom 
        {
        
          [XmlEnum("m/s2")]
          ms2,
        
          [XmlEnum("cm/s2")]
          cms2,
        
          [XmlEnum("ft/s2")]
          fts2,
        
          Gal,
        
          mgn,
        
          gn,
        
          mGal
        }
        /// <summary>
        /// This class represents the BhaStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BhaStatus xsd enumeration.")]
        public enum BhaStatus 
        {
        /// <summary>
        /// 
        /// </summary>
          final,
        /// <summary>
        /// 
        /// </summary>
          progress,
        /// <summary>
        /// 
        /// </summary>
          plan,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the CementJobType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the CementJobType xsd enumeration.")]
        public enum CementJobType 
        {
        /// <summary>
        /// 
        /// </summary>
          primary,
        /// <summary>
        /// 
        /// </summary>
          plug,
        /// <summary>
        /// 
        /// </summary>
          squeeze,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the HoleCasingType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the HoleCasingType xsd enumeration.")]
        public enum HoleCasingType 
        {
        
          [XmlEnum("blow out preventer")]
          blowoutpreventer,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// 
        /// </summary>
          conductor,
        
          [XmlEnum("curved conductor")]
          curvedconductor,
        /// <summary>
        /// 
        /// </summary>
          liner,
        
          [XmlEnum("open hole")]
          openhole,
        /// <summary>
        /// 
        /// </summary>
          riser,
        /// <summary>
        /// 
        /// </summary>
          tubing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LithologySource xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LithologySource xsd enumeration.")]
        public enum LithologySource 
        {
        /// <summary>
        /// The lithology has one overall interpretation based on several sources such as logs and cuttings or cores.
        /// </summary>
          interpreted,
        /// <summary>
        /// The lithology as based on a visual inspection of the core. A percentage is commonly assigned to each portion of the lithology.
        /// </summary>
          core,
        /// <summary>
        /// The lithology as based on a visual inspection of the cuttings. A percentage is commonly assigned to each portion of the lithology.
        /// </summary>
          cuttings,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowRating xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ShowRating xsd enumeration.")]
        public enum ShowRating 
        {
        /// <summary>
        /// 
        /// </summary>
          none,
        
          [XmlEnum("very poor")]
          verypoor,
        /// <summary>
        /// 
        /// </summary>
          poor,
        /// <summary>
        /// 
        /// </summary>
          fair,
        /// <summary>
        /// 
        /// </summary>
          good,
        
          [XmlEnum("very good")]
          verygood,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowFluorescence xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ShowFluorescence xsd enumeration.")]
        public enum ShowFluorescence 
        {
        /// <summary>
        /// 
        /// </summary>
          faint,
        /// <summary>
        /// 
        /// </summary>
          bright,
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowSpeed xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ShowSpeed xsd enumeration.")]
        public enum ShowSpeed 
        {
        /// <summary>
        /// 
        /// </summary>
          slow,
        
          [XmlEnum("moderately fast")]
          moderatelyfast,
        /// <summary>
        /// 
        /// </summary>
          fast,
        /// <summary>
        /// 
        /// </summary>
          instantaneous,
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowLevel xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ShowLevel xsd enumeration.")]
        public enum ShowLevel 
        {
        /// <summary>
        /// 
        /// </summary>
          blooming,
        /// <summary>
        /// 
        /// </summary>
          streaming,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the GasPeakType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the GasPeakType xsd enumeration.")]
        public enum GasPeakType 
        {
        
          [XmlEnum("circulating background gas")]
          circulatingbackgroundgas,
        
          [XmlEnum("connection gas")]
          connectiongas,
        
          [XmlEnum("drilling background gas")]
          drillingbackgroundgas,
        
          [XmlEnum("drilling gas peak")]
          drillinggaspeak,
        
          [XmlEnum("flow check gas")]
          flowcheckgas,
        
          [XmlEnum("no readings")]
          noreadings,
        /// <summary>
        /// 
        /// </summary>
          other,
        
          [XmlEnum("shut down gas")]
          shutdowngas,
        
          [XmlEnum("trip gas")]
          tripgas,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the FiberMode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the FiberMode xsd enumeration.")]
        public enum FiberMode 
        {
        /// <summary>
        /// A single, narrow, core of constant refractive index, surrounded by glass cladding. The core diameter is comparable to a wave length of the light (about 5 um).
        /// </summary>
          singlemode,
        /// <summary>
        /// The core has a graded refractive index. The core is generally about 50um in diameter.
        /// </summary>
          multimode,
        /// <summary>
        /// The fiber mode is neither singlemode or multimode.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the InstalledFiberPoint xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the InstalledFiberPoint xsd enumeration.")]
        public enum InstalledFiberPoint 
        {
        /// <summary>
        /// A point at which a fiber is physically, and semi-permanently, connected to another length of fiber.
        /// </summary>
          splice,
        /// <summary>
        /// A point at which a cable connector is installed, which allows the fiber to be connected to another instrument or fiber length.
        /// </summary>
          connector,
        
          [XmlEnum("end of fiber")]
          endoffiber,
        
          [XmlEnum("base of fiber")]
          baseoffiber,
        
          [XmlEnum("turn around point")]
          turnaroundpoint,
        
          [XmlEnum("start of fiber")]
          startoffiber,
        
          [XmlEnum("oven entry point")]
          ovenentrypoint,
        
          [XmlEnum("oven exit point")]
          ovenexitpoint,
        
          [XmlEnum("downhole gauge")]
          downholegauge,
        
          [XmlEnum("DTS laser head")]
          DTSlaserhead,
        
          [XmlEnum("DTS reference oven")]
          DTSreferenceoven,
        
          [XmlEnum("splice box")]
          splicebox,
        
          [XmlEnum("wellhead junction box")]
          wellheadjunctionbox,
        
          [XmlEnum("base tubing hanger flange")]
          basetubinghangerflange,
        
          [XmlEnum("PBR wet connect")]
          PBRwetconnect,
        
          [XmlEnum("top ESP pump")]
          topESPpump,
        
          [XmlEnum("base ESP pump")]
          baseESPpump,
        
          [XmlEnum("wellhead temperature gauge")]
          wellheadtemperaturegauge,
        
          [XmlEnum("top completion zone")]
          topcompletionzone,
        
          [XmlEnum("base completion zone")]
          basecompletionzone,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the OTDRReason xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the OTDRReason xsd enumeration.")]
        public enum OTDRReason 
        {
        
          [XmlEnum("pre-installation")]
          preinstallation,
        
          [XmlEnum("post-installation")]
          postinstallation,
        
          [XmlEnum("DTS run")]
          DTSrun,
        /// <summary>
        /// The OTDR was run for another reason.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogIndexType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LogIndexType xsd enumeration.")]
        public enum LogIndexType 
        {
        
          [XmlEnum("date time")]
          datetime,
        
          [XmlEnum("elapsed time")]
          elapsedtime,
        /// <summary>
        /// Log is indexed on length (not a depth).
        /// </summary>
          length,
        
          [XmlEnum("measured depth")]
          measureddepth,
        
          [XmlEnum("vertical depth")]
          verticaldepth,
        /// <summary>
        /// Any other index type for a log.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogIndexDirection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LogIndexDirection xsd enumeration.")]
        public enum LogIndexDirection 
        {
        /// <summary>
        /// Log items are in order of decreasing index values (e.g. wireline log logging while pulling out of hole)
        /// </summary>
          decreasing,
        /// <summary>
        /// Log items are in order of increasing index values (e.g. increasing depths or times)
        /// </summary>
          increasing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogTraceState xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LogTraceState xsd enumeration.")]
        public enum LogTraceState 
        {
        
          [XmlEnum("depth adjusted")]
          depthadjusted,
        /// <summary>
        /// 
        /// </summary>
          edited,
        /// <summary>
        /// 
        /// </summary>
          joined,
        /// <summary>
        /// 
        /// </summary>
          processed,
        /// <summary>
        /// 
        /// </summary>
          raw,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogTraceOrigin xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LogTraceOrigin xsd enumeration.")]
        public enum LogTraceOrigin 
        {
        /// <summary>
        /// The data were read from a realtime sensor stream.
        /// </summary>
          realtime,
        /// <summary>
        /// The data are synthetic.
        /// </summary>
          modeled,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogDataType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LogDataType xsd enumeration.")]
        public enum LogDataType 
        {
        
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// Double precision floating point value.
        /// </summary>
          @double,
        /// <summary>
        /// Long integer data value.
        /// </summary>
          @long,
        /// <summary>
        /// Character string data.
        /// </summary>
          @string,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MessageType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MessageType xsd enumeration.")]
        public enum MessageType 
        {
        /// <summary>
        /// An alarm condition when something has exceeded specified limits
        /// </summary>
          alarm,
        /// <summary>
        /// Information about a specific event
        /// </summary>
          @event,
        /// <summary>
        /// General information message
        /// </summary>
          informational,
        /// <summary>
        /// A cautionary message
        /// </summary>
          warning,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MessageSeverity xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MessageSeverity xsd enumeration.")]
        public enum MessageSeverity 
        {
        /// <summary>
        /// 
        /// </summary>
          catastrophic,
        /// <summary>
        /// 
        /// </summary>
          major,
        /// <summary>
        /// 
        /// </summary>
          minor,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MessageProbability xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MessageProbability xsd enumeration.")]
        public enum MessageProbability 
        {
        /// <summary>
        /// 
        /// </summary>
          low,
        /// <summary>
        /// 
        /// </summary>
          medium,
        /// <summary>
        /// 
        /// </summary>
          high,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MudLogParameterType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MudLogParameterType xsd enumeration.")]
        public enum MudLogParameterType 
        {
        
          [XmlEnum("bit parameters")]
          bitparameters,
        
          [XmlEnum("bit type comment")]
          bittypecomment,
        
          [XmlEnum("casing point comment")]
          casingpointcomment,
        
          [XmlEnum("chromatograph comment")]
          chromatographcomment,
        
          [XmlEnum("circulation system comment")]
          circulationsystemcomment,
        
          [XmlEnum("core interval comment")]
          coreintervalcomment,
        
          [XmlEnum("cuttings gas")]
          cuttingsgas,
        
          [XmlEnum("direct fracture pressure")]
          directfracturepressure,
        
          [XmlEnum("direct pore pressure measurements")]
          directporepressuremeasurements,
        
          [XmlEnum("drilling data comment")]
          drillingdatacomment,
        
          [XmlEnum("fracture PG estimate most likely")]
          fracturePGestimatemostlikely,
        
          [XmlEnum("gas peaks comment")]
          gaspeakscomment,
        
          [XmlEnum("gas ratio comment")]
          gasratiocomment,
        
          [XmlEnum("general engineering comment")]
          generalengineeringcomment,
        
          [XmlEnum("kicks and flows")]
          kicksandflows,
        
          [XmlEnum("lithlog comment")]
          lithlogcomment,
        
          [XmlEnum("lost returns")]
          lostreturns,
        
          [XmlEnum("LWD comment")]
          LWDcomment,
        
          [XmlEnum("marker or formation top comment")]
          markerorformationtopcomment,
        
          [XmlEnum("midnight depth date")]
          midnightdepthdate,
        
          [XmlEnum("mud check comment")]
          mudcheckcomment,
        
          [XmlEnum("mud data comment")]
          muddatacomment,
        
          [XmlEnum("mudlog comment")]
          mudlogcomment,
        
          [XmlEnum("overburden gradient")]
          overburdengradient,
        
          [XmlEnum("overpull on connection")]
          overpullonconnection,
        
          [XmlEnum("overpull on trip")]
          overpullontrip,
        
          [XmlEnum("pore PG estimate most likely")]
          porePGestimatemostlikely,
        
          [XmlEnum("pore pressure estimate while drilling")]
          porepressureestimatewhiledrilling,
        
          [XmlEnum("pressure data comment")]
          pressuredatacomment,
        
          [XmlEnum("shale density comment")]
          shaledensitycomment,
        
          [XmlEnum("short trip comment")]
          shorttripcomment,
        
          [XmlEnum("show report comment")]
          showreportcomment,
        
          [XmlEnum("sidewall core comment")]
          sidewallcorecomment,
        
          [XmlEnum("sliding Interval")]
          slidingInterval,
        
          [XmlEnum("steam still results comment")]
          steamstillresultscomment,
        
          [XmlEnum("survey comment")]
          surveycomment,
        
          [XmlEnum("temperature data comment")]
          temperaturedatacomment,
        
          [XmlEnum("temperature trend comment")]
          temperaturetrendcomment,
        
          [XmlEnum("wireline log comment")]
          wirelinelogcomment,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ActivityClassType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ActivityClassType xsd enumeration.")]
        public enum ActivityClassType 
        {
        /// <summary>
        /// 
        /// </summary>
          planned,
        /// <summary>
        /// 
        /// </summary>
          unplanned,
        /// <summary>
        /// 
        /// </summary>
          downtime,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TrajStationType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TrajStationType xsd enumeration.")]
        public enum TrajStationType 
        {
        
          [XmlEnum("azimuth on plane")]
          azimuthonplane,
        
          [XmlEnum("buildrate to delta-MD")]
          buildratetodeltaMD,
        
          [XmlEnum("buildrate to INCL")]
          buildratetoINCL,
        
          [XmlEnum("buildrate to MD")]
          buildratetoMD,
        
          [XmlEnum("buildrate and turnrate to AZI")]
          buildrateandturnratetoAZI,
        
          [XmlEnum("buildrate and turnrate to delta-MD")]
          buildrateandturnratetodeltaMD,
        
          [XmlEnum("buildrate and turnrate to INCL")]
          buildrateandturnratetoINCL,
        
          [XmlEnum("buildrate and turnrate to INCL and AZI")]
          buildrateandturnratetoINCLandAZI,
        
          [XmlEnum("buildrate and turnrate to MD")]
          buildrateandturnratetoMD,
        
          [XmlEnum("buildrate and turnrate to TVD")]
          buildrateandturnratetoTVD,
        
          [XmlEnum("buildrate TVD")]
          buildrateTVD,
        
          [XmlEnum("casing MD")]
          casingMD,
        
          [XmlEnum("casing TVD")]
          casingTVD,
        /// <summary>
        /// Section follows a given dogleg severity 
        /// </summary>
          DLS,
        
          [XmlEnum("DLS to AZI and MD")]
          DLStoAZIandMD,
        
          [XmlEnum("DLS to AZI-TVD")]
          DLStoAZITVD,
        
          [XmlEnum("DLS to INCL")]
          DLStoINCL,
        
          [XmlEnum("DLS to INCL and AZI")]
          DLStoINCLandAZI,
        
          [XmlEnum("DLS to INCL and MD")]
          DLStoINCLandMD,
        
          [XmlEnum("DLS to INCL and TVD")]
          DLStoINCLandTVD,
        
          [XmlEnum("DLS to NS, EW and TVD")]
          DLStoNSEWandTVD,
        
          [XmlEnum("DLS and toolface to AZI")]
          DLSandtoolfacetoAZI,
        
          [XmlEnum("DLS and toolface to delta-MD")]
          DLSandtoolfacetodeltaMD,
        
          [XmlEnum("DLS and toolface to INCL")]
          DLSandtoolfacetoINCL,
        
          [XmlEnum("DLS and toolface to INCL-AZI")]
          DLSandtoolfacetoINCLAZI,
        
          [XmlEnum("DLS and toolface to MD")]
          DLSandtoolfacetoMD,
        
          [XmlEnum("DLS and toolface to TVD")]
          DLSandtoolfacetoTVD,
        
          [XmlEnum("formation MD")]
          formationMD,
        
          [XmlEnum("formation TVD")]
          formationTVD,
        
          [XmlEnum("gyro inertial")]
          gyroinertial,
        
          [XmlEnum("gyro MWD")]
          gyroMWD,
        
          [XmlEnum("gyro north seeking")]
          gyronorthseeking,
        
          [XmlEnum("hold to delta-MD")]
          holdtodeltaMD,
        
          [XmlEnum("hold to MD")]
          holdtoMD,
        
          [XmlEnum("hold to TVD")]
          holdtoTVD,
        
          [XmlEnum("INCL, AZI and TVD")]
          INCLAZIandTVD,
        
          [XmlEnum("magnetic multi-shot")]
          magneticmultishot,
        
          [XmlEnum("magnetic MWD")]
          magneticMWD,
        
          [XmlEnum("magnetic single shot")]
          magneticsingleshot,
        
          [XmlEnum("marker MD")]
          markerMD,
        
          [XmlEnum("marker TVD")]
          markerTVD,
        
          [XmlEnum("NS, EW and TVD")]
          NSEWandTVD,
        
          [XmlEnum("target center")]
          targetcenter,
        
          [XmlEnum("target offset")]
          targetoffset,
        
          [XmlEnum("tie in point")]
          tieinpoint,
        
          [XmlEnum("turnrate to AZI")]
          turnratetoAZI,
        
          [XmlEnum("turnrate to delta-MD")]
          turnratetodeltaMD,
        
          [XmlEnum("turnrate to MD")]
          turnratetoMD,
        
          [XmlEnum("turnrate to TVD")]
          turnratetoTVD,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TypeSurveyTool xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TypeSurveyTool xsd enumeration.")]
        public enum TypeSurveyTool 
        {
        
          [XmlEnum("magnetic MWD")]
          magneticMWD,
        
          [XmlEnum("gyroscopic  MWD")]
          gyroscopicMWD,
        
          [XmlEnum("gyroscopic north seeking")]
          gyroscopicnorthseeking,
        
          [XmlEnum("gyroscopic inertial")]
          gyroscopicinertial,
        
          [XmlEnum("magnetic single-shot")]
          magneticsingleshot,
        
          [XmlEnum("magnetic multiple-shot")]
          magneticmultipleshot,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TrajStationStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TrajStationStatus xsd enumeration.")]
        public enum TrajStationStatus 
        {
        /// <summary>
        /// 
        /// </summary>
          locked,
        /// <summary>
        /// 
        /// </summary>
          open,
        /// <summary>
        /// 
        /// </summary>
          rejected,
        /// <summary>
        /// 
        /// </summary>
          valid,
        /// <summary>
        /// 
        /// </summary>
          position,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemsChoiceType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ItemsChoiceType xsd enumeration.")]
        public enum ItemsChoiceType 
        {
        
          easting,
        
          latitude,
        
          localX,
        
          localY,
        
          longitude,
        
          northing,
        
          projectedX,
        
          projectedY,
        
          southing,
        
          westing
        }
        /// <summary>
        /// This class represents the ScrType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ScrType xsd enumeration.")]
        public enum ScrType 
        {
        
          [XmlEnum("string annulus")]
          stringannulus,
        
          [XmlEnum("string kill line")]
          stringkillline,
        
          [XmlEnum("string choke line")]
          stringchokeline,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PumpOpType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the PumpOpType xsd enumeration.")]
        public enum PumpOpType 
        {
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// 
        /// </summary>
          reaming,
        /// <summary>
        /// 
        /// </summary>
          circulating,
        
          [XmlEnum("slow pump")]
          slowpump,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the SupportCraft xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the SupportCraft xsd enumeration.")]
        public enum SupportCraftType 
        {
        /// <summary>
        /// 
        /// </summary>
          barge,
        
          [XmlEnum("standby boat")]
          standbyboat,
        /// <summary>
        /// 
        /// </summary>
          helicopter,
        
          [XmlEnum("supply boat")]
          supplyboat,
        /// <summary>
        /// 
        /// </summary>
          truck,
        
          [XmlEnum("crew vehicle")]
          crewvehicle,
        
          [XmlEnum("tug boat")]
          tugboat,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the IntervalType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the IntervalType xsd enumeration.")]
        public enum IntervalType 
        {
        /// <summary>
        /// 
        /// </summary>
          time,
        /// <summary>
        /// 
        /// </summary>
          depth,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the IntervalMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the IntervalMethod xsd enumeration.")]
        public enum IntervalMethod 
        {
        /// <summary>
        /// 
        /// </summary>
          average,
        /// <summary>
        /// 
        /// </summary>
          maximum,
        /// <summary>
        /// 
        /// </summary>
          minimum,
        /// <summary>
        /// 
        /// </summary>
          other,
        
          [XmlEnum("spot sample")]
          spotsample,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemChoiceType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ItemChoiceType xsd enumeration.")]
        public enum ItemChoiceType 
        {
        
          persistedAsLog,
        
          persistedAsWellLog
        }
        /// <summary>
        /// This class represents the RigType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the RigType xsd enumeration.")]
        public enum RigType 
        {
        /// <summary>
        /// Barge rig
        /// </summary>
          barge,
        
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// Floating rig
        /// </summary>
          floater,
        /// <summary>
        /// Jackup rig
        /// </summary>
          jackup,
        /// <summary>
        /// Land rig
        /// </summary>
          land,
        /// <summary>
        /// Fixed platform
        /// </summary>
          platform,
        
          [XmlEnum("semi-submersible")]
          semisubmersible,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BopType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BopType xsd enumeration.")]
        public enum BopType 
        {
        
          [XmlEnum("annular preventer")]
          annularpreventer,
        
          [XmlEnum("shear ram")]
          shearram,
        
          [XmlEnum("blind ram")]
          blindram,
        
          [XmlEnum("pipe ram")]
          piperam,
        
          [XmlEnum("drilling spool")]
          drillingspool,
        
          [XmlEnum("flexible joint")]
          flexiblejoint,
        /// <summary>
        /// 
        /// </summary>
          connector,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PitType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the PitType xsd enumeration.")]
        public enum PitType 
        {
        /// <summary>
        /// 
        /// </summary>
          bulk,
        /// <summary>
        /// 
        /// </summary>
          chemical,
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// 
        /// </summary>
          mix,
        
          [XmlEnum("mud cleaning")]
          mudcleaning,
        
          [XmlEnum("sand trap")]
          sandtrap,
        /// <summary>
        /// That pit in the active pit system located immediately downstream of the shale shakers, whose primary purpose is to allow the settling and disposal of the larger drilled cuttings not removed by the shale shakers. It is occasionally also called a settling tank.
        /// </summary>
          slug,
        /// <summary>
        /// 
        /// </summary>
          storage,
        
          [XmlEnum("surge tank")]
          surgetank,
        
          [XmlEnum("trip tank")]
          triptank,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PumpType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the PumpType xsd enumeration.")]
        public enum PumpType 
        {
        /// <summary>
        /// Centrifugal mud pump
        /// </summary>
          centrifugal,
        /// <summary>
        /// Duplex mud mump, 2 cylinders
        /// </summary>
          duplex,
        /// <summary>
        /// Triplex mud pump, three cylinders
        /// </summary>
          triplex,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the SurfEquipType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the SurfEquipType xsd enumeration.")]
        public enum SurfEquipType 
        {
        /// <summary>
        /// 
        /// </summary>
          IADC,
        /// <summary>
        /// 
        /// </summary>
          custom,
        
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DerrickType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the DerrickType xsd enumeration.")]
        public enum DerrickType 
        {
        /// <summary>
        /// 2 stand capacity derrick
        /// </summary>
          @double,
        /// <summary>
        /// 4 stand capacity derrick
        /// </summary>
          quadruple,
        /// <summary>
        /// Slant derrick
        /// </summary>
          slant,
        /// <summary>
        /// 3 stand capacity derrick
        /// </summary>
          triple,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DrawWorksType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the DrawWorksType xsd enumeration.")]
        public enum DrawWorksType 
        {
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        
          [XmlEnum("standard electric")]
          standardelectric,
        
          [XmlEnum("diesel electric")]
          dieselelectric,
        
          [XmlEnum("ram rig")]
          ramrig,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DriveType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the DriveType xsd enumeration.")]
        public enum DriveType 
        {
        
          [XmlEnum("coiled tubing")]
          coiledtubing,
        
          [XmlEnum("rotary kelly drive")]
          rotarykellydrive,
        
          [XmlEnum("top drive")]
          topdrive,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RiskType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the RiskType xsd enumeration.")]
        public enum RiskType 
        {
        /// <summary>
        /// 
        /// </summary>
          risk,
        /// <summary>
        /// 
        /// </summary>
          @event,
        
          [XmlEnum("near miss")]
          nearmiss,
        
          [XmlEnum("best practice")]
          bestpractice,
        
          [XmlEnum("lessons learned")]
          lessonslearned,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RiskCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the RiskCategory xsd enumeration.")]
        public enum RiskCategory 
        {
        /// <summary>
        /// 
        /// </summary>
          hydraulics,
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        
          [XmlEnum("time related")]
          timerelated,
        
          [XmlEnum("wellbore stability")]
          wellborestability,
        
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// 
        /// </summary>
          bit,
        
          [XmlEnum("equipment failure")]
          equipmentfailure,
        /// <summary>
        /// 
        /// </summary>
          completion,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RiskSubCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the RiskSubCategory xsd enumeration.")]
        public enum RiskSubCategory 
        {
        
          [XmlEnum("gas kick")]
          gaskick,
        
          [XmlEnum("shallow water influx")]
          shallowwaterinflux,
        
          [XmlEnum("other influx or kicks")]
          otherinfluxorkicks,
        
          [XmlEnum("loss circulation")]
          losscirculation,
        
          [XmlEnum("poor hole cleaning")]
          poorholecleaning,
        
          [XmlEnum("good hole cleaning at high ROP")]
          goodholecleaningathighROP,
        
          [XmlEnum("high mud weight")]
          highmudweight,
        
          [XmlEnum("special additives needed")]
          specialadditivesneeded,
        
          [XmlEnum("gumbo problems")]
          gumboproblems,
        
          [XmlEnum("high ECD - rheology related")]
          highECDrheologyrelated,
        
          [XmlEnum("excessive circulation")]
          excessivecirculation,
        
          [XmlEnum("performing a kill")]
          performingakill,
        
          [XmlEnum("mud weight change")]
          mudweightchange,
        
          [XmlEnum("excessive pipe cement scaling")]
          excessivepipecementscaling,
        
          [XmlEnum("pit gain or loss")]
          pitgainorloss,
        
          [XmlEnum("mud stability problems")]
          mudstabilityproblems,
        
          [XmlEnum("shallow gas flow")]
          shallowgasflow,
        
          [XmlEnum("twist off")]
          twistoff,
        
          [XmlEnum("stuck pipe")]
          stuckpipe,
        
          [XmlEnum("wireline stuck in hole")]
          wirelinestuckinhole,
        
          [XmlEnum("stick and slip")]
          stickandslip,
        
          [XmlEnum("vibration - axial")]
          vibrationaxial,
        
          [XmlEnum("vibration - torsional")]
          vibrationtorsional,
        
          [XmlEnum("vibration - transverse")]
          vibrationtransverse,
        
          [XmlEnum("vibration unknown or rough drilling")]
          vibrationunknownorroughdrilling,
        
          [XmlEnum("uneven wear of BHA")]
          unevenwearofBHA,
        
          [XmlEnum("uneven wear of drillstring")]
          unevenwearofdrillstring,
        
          [XmlEnum("excessive torque")]
          excessivetorque,
        
          [XmlEnum("excessive drag")]
          excessivedrag,
        
          [XmlEnum("reaming greater than 2 hours")]
          reaminggreaterthan2hours,
        /// <summary>
        /// 
        /// </summary>
          washouts,
        
          [XmlEnum("tight hole or overPull")]
          tightholeoroverPull,
        
          [XmlEnum("failed inspections or fatigue wear")]
          failedinspectionsorfatiguewear,
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        
          [XmlEnum("drilling greater than 1000 feet/day")]
          drillinggreaterthan1000feetday,
        
          [XmlEnum("drilling greater than 2000 feet/day")]
          drillinggreaterthan2000feetday,
        
          [XmlEnum("drilling less than 20 feet/day")]
          drillinglessthan20feetday,
        
          [XmlEnum("trips greater than 24 hours")]
          tripsgreaterthan24hours,
        
          [XmlEnum("excessive time for BHA makeup")]
          excessivetimeforBHAmakeup,
        
          [XmlEnum("waiting on decisions")]
          waitingondecisions,
        
          [XmlEnum("waiting on weather")]
          waitingonweather,
        
          [XmlEnum("waiting on tools")]
          waitingontools,
        
          [XmlEnum("sloughing or packoffs")]
          sloughingorpackoffs,
        /// <summary>
        /// 
        /// </summary>
          ballooning,
        
          [XmlEnum("fracture problems")]
          fractureproblems,
        
          [XmlEnum("unstable zones")]
          unstablezones,
        
          [XmlEnum("formation integrity test")]
          formationintegritytest,
        
          [XmlEnum("leak-off test")]
          leakofftest,
        /// <summary>
        /// 
        /// </summary>
          tectonics,
        
          [XmlEnum("pore pressure")]
          porepressure,
        /// <summary>
        /// 
        /// </summary>
          breakouts,
        
          [XmlEnum("bed parallel")]
          bedparallel,
        
          [XmlEnum("wellbore stability")]
          wellborestability,
        
          [XmlEnum("excessive doglegs")]
          excessivedoglegs,
        /// <summary>
        /// 
        /// </summary>
          sidetrack,
        
          [XmlEnum("BHA change for directional")]
          BHAchangefordirectional,
        
          [XmlEnum("wrong total flow area")]
          wrongtotalflowarea,
        
          [XmlEnum("well collision - actual")]
          wellcollisionactual,
        
          [XmlEnum("well collision - technical")]
          wellcollisiontechnical,
        /// <summary>
        /// 
        /// </summary>
          geosteering,
        
          [XmlEnum("abnormal tendency changes")]
          abnormaltendencychanges,
        /// <summary>
        /// 
        /// </summary>
          resurveying,
        
          [XmlEnum("in-field referencing (IFR) actions")]
          infieldreferencingIFRactions,
        
          [XmlEnum("bit or BHA performance")]
          bitorBHAperformance,
        
          [XmlEnum("drilling optimization")]
          drillingoptimization,
        
          [XmlEnum("bit balling")]
          bitballing,
        
          [XmlEnum("lost cones or broken cutters")]
          lostconesorbrokencutters,
        
          [XmlEnum("excessive bit wear or gauge")]
          excessivebitwearorgauge,
        
          [XmlEnum("low rate of bit penetration")]
          lowrateofbitpenetration,
        
          [XmlEnum("high rate of bit penetration")]
          highrateofbitpenetration,
        
          [XmlEnum("downhole tool")]
          downholetool,
        
          [XmlEnum("surface system")]
          surfacesystem,
        
          [XmlEnum("motor or rotary steerable system failure")]
          motororrotarysteerablesystemfailure,
        
          [XmlEnum("topdrive failure")]
          topdrivefailure,
        
          [XmlEnum("hoisting equipment failure")]
          hoistingequipmentfailure,
        
          [XmlEnum("circulating equipment failure")]
          circulatingequipmentfailure,
        
          [XmlEnum("electrical system failure")]
          electricalsystemfailure,
        
          [XmlEnum("blow out preventer events")]
          blowoutpreventerevents,
        
          [XmlEnum("surface instrumentation problems")]
          surfaceinstrumentationproblems,
        
          [XmlEnum("rig communications")]
          rigcommunications,
        
          [XmlEnum("completion equipment failure")]
          completionequipmentfailure,
        
          [XmlEnum("miscellaneous rig equipment")]
          miscellaneousrigequipment,
        
          [XmlEnum("tool or equipment failure")]
          toolorequipmentfailure,
        
          [XmlEnum("squeeze jobs")]
          squeezejobs,
        
          [XmlEnum("casing surge losses")]
          casingsurgelosses,
        
          [XmlEnum("stuck casing or completion")]
          stuckcasingorcompletion,
        
          [XmlEnum("shoe failures")]
          shoefailures,
        
          [XmlEnum("early cement setup")]
          earlycementsetup,
        
          [XmlEnum("casing collapse")]
          casingcollapse,
        /// <summary>
        /// 
        /// </summary>
          milling,
        
          [XmlEnum("excessive casing wear or cuttings")]
          excessivecasingwearorcuttings,
        
          [XmlEnum("excessive formation damage or skin")]
          excessiveformationdamageorskin,
        
          [XmlEnum("casing rotation or reciprocation rqd")]
          casingrotationorreciprocationrqd,
        /// <summary>
        /// 
        /// </summary>
          broaching,
        
          [XmlEnum("completion or casing")]
          completionorcasing,
        /// <summary>
        /// 
        /// </summary>
          stratigraphy,
        /// <summary>
        /// 
        /// </summary>
          fishing,
        
          [XmlEnum("junk in hole")]
          junkinhole,
        
          [XmlEnum("delay due to political unrest")]
          delayduetopoliticalunrest,
        
          [XmlEnum("rig move")]
          rigmove,
        
          [XmlEnum("gas hydrates")]
          gashydrates,
        
          [XmlEnum("pending analysis")]
          pendinganalysis,
        
          [XmlEnum("riser disconnect")]
          riserdisconnect,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// 
        /// </summary>
          personnel,
        /// <summary>
        /// 
        /// </summary>
          environmental,
        /// <summary>
        /// 
        /// </summary>
          automotive,
        /// <summary>
        /// 
        /// </summary>
          asset,
        /// <summary>
        /// 
        /// </summary>
          information,
        /// <summary>
        /// 
        /// </summary>
          time,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE
        }
        /// <summary>
        /// This class represents the RiskAffectedPersonnel xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the RiskAffectedPersonnel xsd enumeration.")]
        public enum RiskAffectedPersonnel 
        {
        /// <summary>
        /// 
        /// </summary>
          cementer,
        
          [XmlEnum("company man")]
          companyman,
        /// <summary>
        /// 
        /// </summary>
          contractor,
        
          [XmlEnum("directional driller")]
          directionaldriller,
        /// <summary>
        /// 
        /// </summary>
          driller,
        
          [XmlEnum("drilling engineer")]
          drillingengineer,
        
          [XmlEnum("drilling superintendent")]
          drillingsuperintendent,
        
          [XmlEnum("drilling team")]
          drillingteam,
        
          [XmlEnum("facility engineer")]
          facilityengineer,
        
          [XmlEnum("field service manager")]
          fieldservicemanager,
        /// <summary>
        /// 
        /// </summary>
          foreman,
        
          [XmlEnum("general service supervisor")]
          generalservicesupervisor,
        /// <summary>
        /// 
        /// </summary>
          geologist,
        /// <summary>
        /// 
        /// </summary>
          member,
        
          [XmlEnum("mud engineer")]
          mudengineer,
        
          [XmlEnum("mud logger")]
          mudlogger,
        
          [XmlEnum("MWD or LWD engineer")]
          MWDorLWDengineer,
        
          [XmlEnum("perform engineer")]
          performengineer,
        /// <summary>
        /// 
        /// </summary>
          petrophysicist,
        
          [XmlEnum("production engineer")]
          productionengineer,
        
          [XmlEnum("remotely operated vehicle engineer")]
          remotelyoperatedvehicleengineer,
        
          [XmlEnum("safety manger")]
          safetymanger,
        
          [XmlEnum("sales engineer")]
          salesengineer,
        
          [XmlEnum("service supervisor")]
          servicesupervisor,
        
          [XmlEnum("technical support")]
          technicalsupport,
        
          [XmlEnum("tool pusher")]
          toolpusher,
        
          [XmlEnum("wireline engineer")]
          wirelineengineer
        }
        /// <summary>
        /// This class represents the TargetScope xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TargetScope xsd enumeration.")]
        public enum TargetScope 
        {
        
          [XmlEnum("3D volume")]
          Item3Dvolume,
        /// <summary>
        /// 
        /// </summary>
          ellipsoid,
        /// <summary>
        /// Elliptical targets. Includes circle (semi-major = semi-minor axis). Any sections present are ignored.
        /// </summary>
          elliptical,
        /// <summary>
        /// Boundary Conditions. Use sections to describe, length and width ignore.
        /// </summary>
          hardLine,
        /// <summary>
        /// Includes half circle and polygon. Use sections to describe, length and width ignored. 
        /// </summary>
          irregular,
        
          [XmlEnum("lease line")]
          leaseline,
        /// <summary>
        /// Line target
        /// </summary>
          line,
        /// <summary>
        /// Plane target. Used for horizontal wells. Any sections present are ignored.
        /// </summary>
          plane,
        /// <summary>
        /// Point Target. Any sections present are ignored.
        /// </summary>
          point,
        /// <summary>
        /// Rectangular Targets. Includes square (length = width). Any sections present are ignored.
        /// </summary>
          rectangular,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TargetCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TargetCategory xsd enumeration.")]
        public enum TargetCategory 
        {
        /// <summary>
        /// 
        /// </summary>
          geological,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TargetSectionScope xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TargetSectionScope xsd enumeration.")]
        public enum TargetSectionScope 
        {
        /// <summary>
        /// continuous curve
        /// </summary>
          arc,
        /// <summary>
        /// straight line
        /// </summary>
          line,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TubularAssembly xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TubularAssembly xsd enumeration.")]
        public enum TubularAssembly 
        {
        /// <summary>
        /// 
        /// </summary>
          drilling,
        
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// 
        /// </summary>
          fishing,
        
          [XmlEnum("condition mud")]
          conditionmud,
        
          [XmlEnum("tubing conveyed logging")]
          tubingconveyedlogging,
        /// <summary>
        /// 
        /// </summary>
          cementing,
        /// <summary>
        /// 
        /// </summary>
          casing,
        
          [XmlEnum("clean out")]
          cleanout,
        
          [XmlEnum("completion or testing")]
          completionortesting,
        /// <summary>
        /// 
        /// </summary>
          coring,
        
          [XmlEnum("hole opening or underreaming")]
          holeopeningorunderreaming,
        
          [XmlEnum("milling or dressing or cutting")]
          millingordressingorcutting,
        
          [XmlEnum("wiper or check or reaming")]
          wiperorcheckorreaming,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TubularComponent xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TubularComponent xsd enumeration.")]
        public enum TubularComponentType 
        {
        
          [XmlEnum("non-magnetic stabilizer")]
          nonmagneticstabilizer,
        
          [XmlEnum("non-magnetic collar")]
          nonmagneticcollar,
        /// <summary>
        /// Drill string component with blades that help keep the drill string away from the sides of the hole.
        /// </summary>
          stabilizer,
        
          [XmlEnum("adjustable kickoff")]
          adjustablekickoff,
        /// <summary>
        /// A downhole tool used in conjunction with a jar that stores energy for rapid release when the jar is fired. Depending on the operating mode, the energy in tension or compression is stored by means of a mechanical spring or compressible fluid such as nitrogen gas.
        /// </summary>
          accelerator,
        
          [XmlEnum("rotary steering tool")]
          rotarysteeringtool,
        
          [XmlEnum("sub-bar catcher")]
          subbarcatcher,
        
          [XmlEnum("sub-bent")]
          subbent,
        
          [XmlEnum("bit core diamond")]
          bitcorediamond,
        
          [XmlEnum("bit core PDC")]
          bitcorePDC,
        
          [XmlEnum("bit diamond fixed cut")]
          bitdiamondfixedcut,
        
          [XmlEnum("bit insert roller cone")]
          bitinsertrollercone,
        
          [XmlEnum("bit mill tooth roller cone")]
          bitmilltoothrollercone,
        
          [XmlEnum("bit PDC fixed cutter")]
          bitPDCfixedcutter,
        
          [XmlEnum("sub-bit")]
          subbit,
        
          [XmlEnum("bridge plug")]
          bridgeplug,
        /// <summary>
        /// A blank end component substituting for a bit, when re entering an already existing hole to guide the BHA, to avoid inadvertent sidetracks, such as when run below a hole opener in an existing hole.
        /// </summary>
          bullnose,
        
          [XmlEnum("bull plug")]
          bullplug,
        
          [XmlEnum("sub-bumper")]
          subbumper,
        /// <summary>
        /// Tubing used to line the wellbore and protect against pressure differences between the wellbore fluids and the formation.
        /// </summary>
          casing,
        
          [XmlEnum("casing cutter")]
          casingcutter,
        
          [XmlEnum("hanger casing subsea")]
          hangercasingsubsea,
        
          [XmlEnum("hanger casing surface")]
          hangercasingsurface,
        
          [XmlEnum("casing head")]
          casinghead,
        
          [XmlEnum("catch assembly")]
          catchassembly,
        
          [XmlEnum("sub-catcher")]
          subcatcher,
        
          [XmlEnum("sub-circulation")]
          subcirculation,
        
          [XmlEnum("coiled tubing in hole")]
          coiledtubinginhole,
        
          [XmlEnum("coiled tubing on coil")]
          coiledtubingoncoil,
        
          [XmlEnum("drill pipe compressive")]
          drillpipecompressive,
        
          [XmlEnum("sub-cone")]
          subcone,
        
          [XmlEnum("core barrel")]
          corebarrel,
        
          [XmlEnum("core orientation barrel")]
          coreorientationbarrel,
        
          [XmlEnum("sub-crossover")]
          subcrossover,
        
          [XmlEnum("casing crossover")]
          casingcrossover,
        
          [XmlEnum("sub-dart")]
          subdart,
        
          [XmlEnum("die collar")]
          diecollar,
        
          [XmlEnum("die collar LH")]
          diecollarLH,
        
          [XmlEnum("directional guidance system")]
          directionalguidancesystem,
        
          [XmlEnum("drill collar")]
          drillcollar,
        
          [XmlEnum("drill pipe")]
          drillpipe,
        
          [XmlEnum("drill pipe LH")]
          drillpipeLH,
        
          [XmlEnum("drill stem test BHA")]
          drillstemtestBHA,
        
          [XmlEnum("drive pipe")]
          drivepipe,
        
          [XmlEnum("dual catch assembly")]
          dualcatchassembly,
        
          [XmlEnum("extension bowl overshot")]
          extensionbowlovershot,
        
          [XmlEnum("extension sub-overshot")]
          extensionsubovershot,
        
          [XmlEnum("float collar")]
          floatcollar,
        
          [XmlEnum("float shoe")]
          floatshoe,
        
          [XmlEnum("sub-float")]
          subfloat,
        
          [XmlEnum("flow head")]
          flowhead,
        
          [XmlEnum("guide shoe")]
          guideshoe,
        
          [XmlEnum("MWD hang off sub")]
          MWDhangoffsub,
        
          [XmlEnum("heavy weight drill pipe")]
          heavyweightdrillpipe,
        
          [XmlEnum("heavy weight drill pipe LH")]
          heavyweightdrillpipeLH,
        
          [XmlEnum("riser high pressure")]
          riserhighpressure,
        
          [XmlEnum("bit hole opener")]
          bitholeopener,
        
          [XmlEnum("casing inflatable packer")]
          casinginflatablepacker,
        
          [XmlEnum("motor instrumented")]
          motorinstrumented,
        /// <summary>
        /// Hydraulic or spring-loaded component used to free stuck pipe.
        /// </summary>
          jar,
        
          [XmlEnum("sub-jetting")]
          subjetting,
        
          [XmlEnum("junk basket")]
          junkbasket,
        
          [XmlEnum("junk basket reverse circulation")]
          junkbasketreversecirculation,
        
          [XmlEnum("sub-junk")]
          subjunk,
        /// <summary>
        /// Hexagonal or square pipe used to rotate the drill string from the rig floor.
        /// </summary>
          kelly,
        
          [XmlEnum("keyseat wiper tool")]
          keyseatwipertool,
        
          [XmlEnum("landing float collar")]
          landingfloatcollar,
        
          [XmlEnum("lead impression block")]
          leadimpressionblock,
        /// <summary>
        /// Casing or tubing that is hung from the inside of existing casing rather than from the sea bed or surface.
        /// </summary>
          liner,
        
          [XmlEnum("hanger liner")]
          hangerliner,
        /// <summary>
        /// Magnet used to retrieve magnetic debris from the hole.
        /// </summary>
          magnet,
        
          [XmlEnum("riser marine")]
          risermarine,
        
          [XmlEnum("mill dress")]
          milldress,
        
          [XmlEnum("mill flat bottom")]
          millflatbottom,
        
          [XmlEnum("mill hollow")]
          millhollow,
        
          [XmlEnum("mill polish")]
          millpolish,
        
          [XmlEnum("mill section")]
          millsection,
        
          [XmlEnum("mill taper")]
          milltaper,
        
          [XmlEnum("mill washover")]
          millwashover,
        
          [XmlEnum("mill packer picker assembly")]
          millpackerpickerassembly,
        
          [XmlEnum("millout extension")]
          milloutextension,
        
          [XmlEnum("multilateral hanger running tool")]
          multilateralhangerrunningtool,
        
          [XmlEnum("hanger mud line")]
          hangermudline,
        /// <summary>
        /// Downhole tool, usually powered by fluid flow, that rotates the drill bit.
        /// </summary>
          motor,
        
          [XmlEnum("mule shoe")]
          muleshoe,
        
          [XmlEnum("logging while drilling tool")]
          loggingwhiledrillingtool,
        
          [XmlEnum("stabilizer near bit roller reamer")]
          stabilizernearbitrollerreamer,
        
          [XmlEnum("stabilizer near bit")]
          stabilizernearbit,
        
          [XmlEnum("stabilizer non-rotating")]
          stabilizernonrotating,
        
          [XmlEnum("sub-orienting")]
          suborienting,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// Tool used for retrieving pipe that has been lost in the hole.
        /// </summary>
          overshot,
        
          [XmlEnum("overshot LH")]
          overshotLH,
        
          [XmlEnum("oversize lip guide overshot")]
          oversizelipguideovershot,
        /// <summary>
        /// Component that can be inflated so that it seals off a section of the wellbore, typically for formation testing.
        /// </summary>
          packer,
        
          [XmlEnum("polished bore receptacle")]
          polishedborereceptacle,
        
          [XmlEnum("mill pilot")]
          millpilot,
        
          [XmlEnum("pipe cutter")]
          pipecutter,
        
          [XmlEnum("ported stinger")]
          portedstinger,
        
          [XmlEnum("sub-ported")]
          subported,
        
          [XmlEnum("prepacked screens")]
          prepackedscreens,
        
          [XmlEnum("sub-pressure relief")]
          subpressurerelief,
        
          [XmlEnum("riser production")]
          riserproduction,
        
          [XmlEnum("MWD pulser")]
          MWDpulser,
        
          [XmlEnum("sub-pump out")]
          subpumpout,
        
          [XmlEnum("sub-restrictor")]
          subrestrictor,
        
          [XmlEnum("packer retrieve TT squeeze")]
          packerretrieveTTsqueeze,
        
          [XmlEnum("reversing tool")]
          reversingtool,
        
          [XmlEnum("stabilizer string roller reamer")]
          stabilizerstringrollerreamer,
        
          [XmlEnum("packer RTTS")]
          packerRTTS,
        
          [XmlEnum("running tool")]
          runningtool,
        
          [XmlEnum("safety joint")]
          safetyjoint,
        
          [XmlEnum("safety joint LH")]
          safetyjointLH,
        
          [XmlEnum("sub-saver")]
          subsaver,
        
          [XmlEnum("scab liner bit guide")]
          scablinerbitguide,
        /// <summary>
        /// 
        /// </summary>
          scraper,
        /// <summary>
        /// A device for cleaning mud and mud filter cake off of the wellbore wall when cementing casing in the hole to ensure good contact and bonding between the cement and the wellbore wall.
        /// </summary>
          scratchers,
        
          [XmlEnum("casing shoe screw-in")]
          casingshoescrewin,
        
          [XmlEnum("sub-shock")]
          subshock,
        
          [XmlEnum("drill collar short")]
          drillcollarshort,
        
          [XmlEnum("sub-side entry")]
          subsideentry,
        
          [XmlEnum("slotted liner")]
          slottedliner,
        /// <summary>
        /// Fishing tool that attaches to the inside of the stuck pipe by threads or grapples.
        /// </summary>
          spear,
        
          [XmlEnum("stage cement collar")]
          stagecementcollar,
        
          [XmlEnum("motor steerable")]
          motorsteerable,
        
          [XmlEnum("packer storm valve RTTS")]
          packerstormvalveRTTS,
        
          [XmlEnum("stabilizer string")]
          stabilizerstring,
        
          [XmlEnum("surface pipe")]
          surfacepipe,
        
          [XmlEnum("taper tap")]
          tapertap,
        
          [XmlEnum("taper tap LH")]
          tapertapLH,
        
          [XmlEnum("tubing-conveyed perforating gun")]
          tubingconveyedperforatinggun,
        /// <summary>
        /// Drilling tool used to maintain weight on bit.
        /// </summary>
          thruster,
        
          [XmlEnum("tieback polished bore receptacle")]
          tiebackpolishedborereceptacle,
        
          [XmlEnum("tieback stinger")]
          tiebackstinger,
        /// <summary>
        /// Small diameter pipe that is run inside casing or tubing as part of the well completion.
        /// </summary>
          tubing,
        
          [XmlEnum("hanger tubing")]
          hangertubing,
        /// <summary>
        /// Downhole device used for directional drilling, powered by mud circulation that rotates the drill bit while the drill string remains non-rotating
        /// </summary>
          turbine,
        
          [XmlEnum("bit under reamer")]
          bitunderreamer,
        
          [XmlEnum("stabilizer variable blade")]
          stabilizervariableblade,
        
          [XmlEnum("washover pipe")]
          washoverpipe,
        
          [XmlEnum("mill watermelon")]
          millwatermelon,
        /// <summary>
        /// Wedge shaped tool used to drill off in a different direction.
        /// </summary>
          whipstock,
        
          [XmlEnum("whipstock anchor")]
          whipstockanchor,
        
          [XmlEnum("stabilizer turbo back")]
          stabilizerturboback,
        
          [XmlEnum("stabilizer inline")]
          stabilizerinline,
        
          [XmlEnum("stabilizer steerable")]
          stabilizersteerable,
        
          [XmlEnum("sub-stop")]
          substop,
        
          [XmlEnum("sub-filter")]
          subfilter,
        
          [XmlEnum("mill casing cutting")]
          millcasingcutting,
        /// <summary>
        /// Tool used to enlarge the hole.
        /// </summary>
          reamer,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BoxPinConfig xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BoxPinConfig xsd enumeration.")]
        public enum BoxPinConfig 
        {
        
          [XmlEnum("bottom box, top box")]
          bottomboxtopbox,
        
          [XmlEnum("bottom box, top pin")]
          bottomboxtoppin,
        
          [XmlEnum("bottom pin top box")]
          bottompintopbox,
        
          [XmlEnum("bottom pin")]
          bottompin,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MaterialType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MaterialType xsd enumeration.")]
        public enum MaterialType 
        {
        /// <summary>
        /// 
        /// </summary>
          aluminum,
        
          [XmlEnum("beryllium copper")]
          berylliumcopper,
        
          [XmlEnum("chrome alloy")]
          chromealloy,
        /// <summary>
        /// 
        /// </summary>
          composite,
        /// <summary>
        /// 
        /// </summary>
          other,
        
          [XmlEnum("non-magnetic steel")]
          nonmagneticsteel,
        /// <summary>
        /// 
        /// </summary>
          plastic,
        /// <summary>
        /// 
        /// </summary>
          steel,
        
          [XmlEnum("steel alloy")]
          steelalloy,
        /// <summary>
        /// 
        /// </summary>
          titanium,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BitType xsd enumeration.")]
        public enum BitType 
        {
        /// <summary>
        /// Diamond bit
        /// </summary>
          diamond,
        
          [XmlEnum("diamond core")]
          diamondcore,
        
          [XmlEnum("insert roller cone")]
          insertrollercone,
        /// <summary>
        /// polycrystalline diamond compact fixed cutter bit
        /// </summary>
          PDC,
        
          [XmlEnum("PDC core")]
          PDCcore,
        
          [XmlEnum("roller cone")]
          rollercone,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitDullCode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BitDullCode xsd enumeration.")]
        public enum BitDullCode 
        {
        /// <summary>
        /// Broken Cone
        /// </summary>
          BC,
        /// <summary>
        /// Broken teeth/cutters
        /// </summary>
          BT,
        /// <summary>
        /// Balled Up
        /// </summary>
          BU,
        /// <summary>
        /// Cracked Cone
        /// </summary>
          CC,
        /// <summary>
        /// Cone Dragged
        /// </summary>
          CD,
        /// <summary>
        /// Cone Interference
        /// </summary>
          CI,
        /// <summary>
        /// Cored
        /// </summary>
          CR,
        /// <summary>
        /// Chipped Teeth
        /// </summary>
          CT,
        /// <summary>
        /// Erosion
        /// </summary>
          ER,
        /// <summary>
        /// Flat Crested Wear
        /// </summary>
          FC,
        /// <summary>
        /// Heat Checking
        /// </summary>
          HC,
        /// <summary>
        /// Junk Damage
        /// </summary>
          JD,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LC,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LN,
        /// <summary>
        /// Lost Teeth/Cutters
        /// </summary>
          LT,
        /// <summary>
        /// No Dull/No Other Wear
        /// </summary>
          NO,
        /// <summary>
        /// Off-Center Wear
        /// </summary>
          OC,
        /// <summary>
        /// Pinched Bit
        /// </summary>
          PB,
        /// <summary>
        /// Plugged Nozzle
        /// </summary>
          PN,
        /// <summary>
        /// Rounded Gauge
        /// </summary>
          RG,
        /// <summary>
        /// Ring Out
        /// </summary>
          RO,
        /// <summary>
        /// Shirttail Damage
        /// </summary>
          SD,
        /// <summary>
        /// Self-Sharpening Wear
        /// </summary>
          SS,
        /// <summary>
        /// Tracking
        /// </summary>
          TR,
        /// <summary>
        /// WashOut on Bit
        /// </summary>
          WO,
        /// <summary>
        /// Worn Teeth/Cutters
        /// </summary>
          WT,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitReasonPulled xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BitReasonPulled xsd enumeration.")]
        public enum BitReasonPulled 
        {
        /// <summary>
        /// Change Bottom Hole Assembly
        /// </summary>
          BHA,
        /// <summary>
        /// Condition Mud
        /// </summary>
          CM,
        /// <summary>
        /// Core Point
        /// </summary>
          CP,
        /// <summary>
        /// Downhole Motor Failure
        /// </summary>
          DMF,
        /// <summary>
        /// Drill Plug
        /// </summary>
          DP,
        /// <summary>
        /// Drill Stem Test
        /// </summary>
          DST,
        /// <summary>
        /// Downhole Tool Failure
        /// </summary>
          DTF,
        /// <summary>
        /// Formation Change
        /// </summary>
          FM,
        /// <summary>
        /// Hole Problems
        /// </summary>
          HP,
        /// <summary>
        /// Hours on Bit
        /// </summary>
          HR,
        /// <summary>
        /// Run Logs
        /// </summary>
          LOG,
        /// <summary>
        /// Pump Pressure
        /// </summary>
          PP,
        /// <summary>
        /// Penetration Rate
        /// </summary>
          PR,
        /// <summary>
        /// Rig Repairs
        /// </summary>
          RIG,
        /// <summary>
        /// Total Depth/Casing Depth
        /// </summary>
          TD,
        /// <summary>
        /// Torque
        /// </summary>
          TQ,
        /// <summary>
        /// Twist Off
        /// </summary>
          TW,
        /// <summary>
        /// Weather Conditions
        /// </summary>
          WC,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NozzleType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the NozzleType xsd enumeration.")]
        public enum NozzleType 
        {
        /// <summary>
        /// 
        /// </summary>
          extended,
        /// <summary>
        /// 
        /// </summary>
          normal,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ConnectionPosition xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ConnectionPosition xsd enumeration.")]
        public enum ConnectionPosition 
        {
        /// <summary>
        /// The connection is the same at both ends of the component
        /// </summary>
          both,
        /// <summary>
        /// This connection is only at the bottom of the component
        /// </summary>
          bottom,
        /// <summary>
        /// This connection is only at the top of the component
        /// </summary>
          top,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the JarType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the JarType xsd enumeration.")]
        public enum JarType 
        {
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// 
        /// </summary>
          hydraulic,
        
          [XmlEnum("hydro mechanical")]
          hydromechanical,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the JarAction xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the JarAction xsd enumeration.")]
        public enum JarAction 
        {
        /// <summary>
        /// 
        /// </summary>
          up,
        /// <summary>
        /// 
        /// </summary>
          down,
        /// <summary>
        /// 
        /// </summary>
          both,
        /// <summary>
        /// 
        /// </summary>
          vibrating,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MeasurementType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MeasurementType xsd enumeration.")]
        public enum MeasurementType 
        {
        /// <summary>
        /// Output from an accelerometer on a logging tool.
        /// </summary>
          acceleration,
        
          [XmlEnum("acoustic caliper")]
          acousticcaliper,
        
          [XmlEnum("acoustic casing collar locator")]
          acousticcasingcollarlocator,
        
          [XmlEnum("acoustic impedance")]
          acousticimpedance,
        
          [XmlEnum("acoustic porosity")]
          acousticporosity,
        
          [XmlEnum("acoustic velocity")]
          acousticvelocity,
        
          [XmlEnum("acoustic wave matrix travel time")]
          acousticwavematrixtraveltime,
        
          [XmlEnum("acoustic wave travel time")]
          acousticwavetraveltime,
        /// <summary>
        /// Any measurement of the maximum departure of a wave from an average value.
        /// </summary>
          amplitude,
        
          [XmlEnum("amplitude of acoustic wave")]
          amplitudeofacousticwave,
        
          [XmlEnum("amplitude of E-M wave")]
          amplitudeofEMwave,
        
          [XmlEnum("amplitude ratio")]
          amplituderatio,
        /// <summary>
        /// A particular extent of space or surface.
        /// </summary>
          area,
        /// <summary>
        /// The amount of reduction in the amplitude of a wave.
        /// </summary>
          attenuation,
        
          [XmlEnum("attenuation of acoustic wave")]
          attenuationofacousticwave,
        
          [XmlEnum("attenuation of E-M wave")]
          attenuationofEMwave,
        /// <summary>
        /// A general classification for measurements which are very specialized and not normally accessed by petrophysicists.
        /// </summary>
          auxiliary,
        
          [XmlEnum("average porosity")]
          averageporosity,
        /// <summary>
        /// In the horizontal plane, it is the clockwise angle of departure from magnetic north (while looking down hole).
        /// </summary>
          azimuth,
        
          [XmlEnum("barite mud correction")]
          baritemudcorrection,
        
          [XmlEnum("bed thickness correction")]
          bedthicknesscorrection,
        
          [XmlEnum("bit size")]
          bitsize,
        /// <summary>
        /// A well log trace which has been edited to reflect sharp bed boundaries. The trace has a square wave appearance.
        /// </summary>
          blocked,
        
          [XmlEnum("borehole environment correction")]
          boreholeenvironmentcorrection,
        
          [XmlEnum("borehole fluid composition correction")]
          boreholefluidcompositioncorrection,
        
          [XmlEnum("borehole fluid correction")]
          boreholefluidcorrection,
        
          [XmlEnum("borehole size correction")]
          boreholesizecorrection,
        
          [XmlEnum("bromide mud correction")]
          bromidemudcorrection,
        
          [XmlEnum("bulk compressibility")]
          bulkcompressibility,
        
          [XmlEnum("bulk density")]
          bulkdensity,
        
          [XmlEnum("bulk volume")]
          bulkvolume,
        
          [XmlEnum("bulk volume gas")]
          bulkvolumegas,
        
          [XmlEnum("bulk volume hydrocarbon")]
          bulkvolumehydrocarbon,
        
          [XmlEnum("bulk volume oil")]
          bulkvolumeoil,
        
          [XmlEnum("bulk volume water")]
          bulkvolumewater,
        
          [XmlEnum("C/O ratio")]
          COratio,
        /// <summary>
        /// A well log used to record hole diameter (open or cased).
        /// </summary>
          caliper,
        
          [XmlEnum("cased hole correction")]
          casedholecorrection,
        
          [XmlEnum("casing collar locator")]
          casingcollarlocator,
        
          [XmlEnum("casing correction")]
          casingcorrection,
        
          [XmlEnum("casing diameter correction")]
          casingdiametercorrection,
        
          [XmlEnum("casing inspection")]
          casinginspection,
        
          [XmlEnum("casing thickness correction")]
          casingthicknesscorrection,
        
          [XmlEnum("casing weight correction")]
          casingweightcorrection,
        
          [XmlEnum("cement correction")]
          cementcorrection,
        
          [XmlEnum("cement density correction")]
          cementdensitycorrection,
        
          [XmlEnum("cement evaluation")]
          cementevaluation,
        
          [XmlEnum("cement thickness correction")]
          cementthicknesscorrection,
        
          [XmlEnum("cement type correction")]
          cementtypecorrection,
        
          [XmlEnum("CH density porosity")]
          CHdensityporosity,
        
          [XmlEnum("CH dolomite density porosity")]
          CHdolomitedensityporosity,
        
          [XmlEnum("CH dolomite neutron porosity")]
          CHdolomiteneutronporosity,
        
          [XmlEnum("CH limestone density porosity")]
          CHlimestonedensityporosity,
        
          [XmlEnum("CH limestone neutron porosity")]
          CHlimestoneneutronporosity,
        
          [XmlEnum("CH neutron porosity")]
          CHneutronporosity,
        
          [XmlEnum("CH sandstone density porosity")]
          CHsandstonedensityporosity,
        
          [XmlEnum("CH sandstone neutron porosity")]
          CHsandstoneneutronporosity,
        
          [XmlEnum("compressional wave dolomite porosity")]
          compressionalwavedolomiteporosity,
        
          [XmlEnum("compressional wave limestone porosity")]
          compressionalwavelimestoneporosity,
        
          [XmlEnum("compressional wave matrix travel time")]
          compressionalwavematrixtraveltime,
        
          [XmlEnum("compressional wave sandstone porosity")]
          compressionalwavesandstoneporosity,
        
          [XmlEnum("compressional wave travel time")]
          compressionalwavetraveltime,
        /// <summary>
        /// The property of a medium (solid or fluid) which allows the medium to conduct a form of energy; e.g., electrical conductivity or thermal conductivity.
        /// </summary>
          conductivity,
        
          [XmlEnum("conductivity from attenuation")]
          conductivityfromattenuation,
        
          [XmlEnum("conductivity from phase shift")]
          conductivityfromphaseshift,
        
          [XmlEnum("connate water conductivity")]
          connatewaterconductivity,
        
          [XmlEnum("connate water resistivity")]
          connatewaterresistivity,
        
          [XmlEnum("conventional core porosity")]
          conventionalcoreporosity,
        
          [XmlEnum("core matrix density")]
          corematrixdensity,
        
          [XmlEnum("core permeability")]
          corepermeability,
        
          [XmlEnum("core porosity")]
          coreporosity,
        /// <summary>
        /// A trace which has had corrections applied; e.g. environmental corrections.
        /// </summary>
          corrected,
        
          [XmlEnum("count rate")]
          countrate,
        
          [XmlEnum("count rate ratio")]
          countrateratio,
        
          [XmlEnum("cross plot porosity")]
          crossplotporosity,
        
          [XmlEnum("decay time")]
          decaytime,
        
          [XmlEnum("deep conductivity")]
          deepconductivity,
        
          [XmlEnum("deep induction conductivity")]
          deepinductionconductivity,
        
          [XmlEnum("deep induction resistivity")]
          deepinductionresistivity,
        
          [XmlEnum("deep laterolog conductivity")]
          deeplaterologconductivity,
        
          [XmlEnum("deep laterolog resistivity")]
          deeplaterologresistivity,
        
          [XmlEnum("deep resistivity")]
          deepresistivity,
        /// <summary>
        /// Mass per unit Volume - well logging units are usually gm/cc.
        /// </summary>
          density,
        
          [XmlEnum("density porosity")]
          densityporosity,
        /// <summary>
        /// The distance to a point in a wellbore.
        /// </summary>
          depth,
        
          [XmlEnum("depth adjusted")]
          depthadjusted,
        
          [XmlEnum("depth derived from velocity")]
          depthderivedfromvelocity,
        /// <summary>
        /// Departure of a borehole from vertical. Also, the angle measured between the tool axis and vertical.
        /// </summary>
          deviation,
        /// <summary>
        /// Relative permittivity.
        /// </summary>
          dielectric,
        
          [XmlEnum("diffusion correction")]
          diffusioncorrection,
        /// <summary>
        /// The angle that a structural surface, e.g. a bedding or fault plane, makes with the horizontal, measured perpendicular to the strike of the structure.
        /// </summary>
          dip,
        /// <summary>
        /// Any of a number of measurements produced by a tool designed to measure formation dip and borehole characteristics through direct and indirect measurements.
        /// </summary>
          dipmeter,
        
          [XmlEnum("dipmeter conductivity")]
          dipmeterconductivity,
        
          [XmlEnum("dipmeter resistivity")]
          dipmeterresistivity,
        
          [XmlEnum("dolomite acoustic porosity")]
          dolomiteacousticporosity,
        
          [XmlEnum("dolomite density porosity")]
          dolomitedensityporosity,
        
          [XmlEnum("dolomite neutron porosity")]
          dolomiteneutronporosity,
        /// <summary>
        /// A well log trace which has been corrected or adjusted through an editing process.
        /// </summary>
          edited,
        
          [XmlEnum("effective porosity")]
          effectiveporosity,
        
          [XmlEnum("electric current")]
          electriccurrent,
        
          [XmlEnum("electric potential")]
          electricpotential,
        
          [XmlEnum("electromagnetic wave matrix travel time")]
          electromagneticwavematrixtraveltime,
        
          [XmlEnum("electromagnetic wave travel time")]
          electromagneticwavetraveltime,
        /// <summary>
        /// The elemental composition, generally in weight percent, of a formation as calculated from information obtained from a geochemical logging pass; e.g., weight percent of Al, Si, Ca, Fe, etc.
        /// </summary>
          element,
        
          [XmlEnum("elemental ratio")]
          elementalratio,
        /// <summary>
        /// A well log trace which has been filtered to improve its value; e.g. inverse filtering for better resolution.
        /// </summary>
          enhanced,
        /// <summary>
        /// A well log trace which has had a filter applied to it.
        /// </summary>
          filtered,
        /// <summary>
        /// A logging tool to measure the rate and/or direction of fluid flow in a wellbore.
        /// </summary>
          flowmeter,
        
          [XmlEnum("fluid density")]
          fluiddensity,
        
          [XmlEnum("fluid velocity")]
          fluidvelocity,
        
          [XmlEnum("fluid viscosity")]
          fluidviscosity,
        
          [XmlEnum("flushed zone conductivity")]
          flushedzoneconductivity,
        
          [XmlEnum("flushed zone resistivity")]
          flushedzoneresistivity,
        
          [XmlEnum("flushed zone saturation")]
          flushedzonesaturation,
        /// <summary>
        /// Energy exerted or brought to bear.
        /// </summary>
          force,
        
          [XmlEnum("formation density correction")]
          formationdensitycorrection,
        
          [XmlEnum("formation properties correction")]
          formationpropertiescorrection,
        
          [XmlEnum("formation salinity correction")]
          formationsalinitycorrection,
        
          [XmlEnum("formation saturation correction")]
          formationsaturationcorrection,
        
          [XmlEnum("formation volume factor correction")]
          formationvolumefactorcorrection,
        
          [XmlEnum("formation water density correction")]
          formationwaterdensitycorrection,
        
          [XmlEnum("formation water saturation correction")]
          formationwatersaturationcorrection,
        
          [XmlEnum("free fluid index")]
          freefluidindex,
        
          [XmlEnum("friction effect correction")]
          frictioneffectcorrection,
        
          [XmlEnum("gamma ray")]
          gammaray,
        
          [XmlEnum("gamma ray minus uranium")]
          gammarayminusuranium,
        
          [XmlEnum("gas saturation")]
          gassaturation,
        /// <summary>
        /// The measurement of the average density of fluids in a wellbore.
        /// </summary>
          gradiomanometer,
        
          [XmlEnum("high frequency conductivity")]
          highfrequencyconductivity,
        
          [XmlEnum("high frequency electromagnetic")]
          highfrequencyelectromagnetic,
        
          [XmlEnum("high frequency electromagnetic porosity")]
          highfrequencyelectromagneticporosity,
        
          [XmlEnum("high frequency E-M phase shift")]
          highfrequencyEMphaseshift,
        
          [XmlEnum("high frequency resistivity")]
          highfrequencyresistivity,
        
          [XmlEnum("hydrocarbon correction")]
          hydrocarboncorrection,
        
          [XmlEnum("hydrocarbon density correction")]
          hydrocarbondensitycorrection,
        
          [XmlEnum("hydrocarbon gravity correction")]
          hydrocarbongravitycorrection,
        
          [XmlEnum("hydrocarbon saturation")]
          hydrocarbonsaturation,
        
          [XmlEnum("hydrocarbon viscosity correction")]
          hydrocarbonviscositycorrection,
        /// <summary>
        /// The likeness of an object produced by an electrical device.
        /// </summary>
          image,
        
          [XmlEnum("interpretation variable")]
          interpretationvariable,
        
          [XmlEnum("iron mud correction")]
          ironmudcorrection,
        /// <summary>
        /// A well log trace which has had two or more runs spliced together to make a single trace.
        /// </summary>
          joined,
        
          [XmlEnum("KCl mud correction")]
          KClmudcorrection,
        /// <summary>
        /// A measured distance or dimension.
        /// </summary>
          length,
        
          [XmlEnum("limestone acoustic porosity")]
          limestoneacousticporosity,
        
          [XmlEnum("limestone density porosity")]
          limestonedensityporosity,
        
          [XmlEnum("limestone neutron porosity")]
          limestoneneutronporosity,
        
          [XmlEnum("lithology correction")]
          lithologycorrection,
        
          [XmlEnum("log derived permeability")]
          logderivedpermeability,
        
          [XmlEnum("log matrix density")]
          logmatrixdensity,
        
          [XmlEnum("magnetic casing collar locator")]
          magneticcasingcollarlocator,
        
          [XmlEnum("matrix density")]
          matrixdensity,
        
          [XmlEnum("matrix travel time")]
          matrixtraveltime,
        
          [XmlEnum("measured depth")]
          measureddepth,
        
          [XmlEnum("mechanical caliper")]
          mechanicalcaliper,
        
          [XmlEnum("mechanical casing collar locator")]
          mechanicalcasingcollarlocator,
        
          [XmlEnum("medium conductivity")]
          mediumconductivity,
        
          [XmlEnum("medium induction conductivity")]
          mediuminductionconductivity,
        
          [XmlEnum("medium induction resistivity")]
          mediuminductionresistivity,
        
          [XmlEnum("medium laterolog conductivity")]
          mediumlaterologconductivity,
        
          [XmlEnum("medium laterolog resistivity")]
          mediumlaterologresistivity,
        
          [XmlEnum("medium resistivity")]
          mediumresistivity,
        
          [XmlEnum("micro conductivity")]
          microconductivity,
        
          [XmlEnum("micro inverse conductivity")]
          microinverseconductivity,
        
          [XmlEnum("micro inverse resistivity")]
          microinverseresistivity,
        
          [XmlEnum("micro laterolog conductivity")]
          microlaterologconductivity,
        
          [XmlEnum("micro laterolog resistivity")]
          microlaterologresistivity,
        
          [XmlEnum("micro normal conductivity")]
          micronormalconductivity,
        
          [XmlEnum("micro normal resistivity")]
          micronormalresistivity,
        
          [XmlEnum("micro resistivity")]
          microresistivity,
        
          [XmlEnum("micro spherically focused conductivity")]
          microsphericallyfocusedconductivity,
        
          [XmlEnum("micro spherically focused resistivity")]
          microsphericallyfocusedresistivity,
        /// <summary>
        /// The mineral composition, generally in weight percent, of a formation as calculated from elemental information obtained from a geochemical logging pass; e.g., weight percent of dolomite, calcite, illite, quartzite, etc.
        /// </summary>
          mineral,
        
          [XmlEnum("mud cake conductivity")]
          mudcakeconductivity,
        
          [XmlEnum("mud cake correction")]
          mudcakecorrection,
        
          [XmlEnum("mud cake density correction")]
          mudcakedensitycorrection,
        
          [XmlEnum("mud cake resistivity")]
          mudcakeresistivity,
        
          [XmlEnum("mud cake resistivity correction")]
          mudcakeresistivitycorrection,
        
          [XmlEnum("mud cake thickness correction")]
          mudcakethicknesscorrection,
        
          [XmlEnum("mud composition correction")]
          mudcompositioncorrection,
        
          [XmlEnum("mud conductivity")]
          mudconductivity,
        
          [XmlEnum("mud filtrate conductivity")]
          mudfiltrateconductivity,
        
          [XmlEnum("mud filtrate correction")]
          mudfiltratecorrection,
        
          [XmlEnum("mud filtrate density correction")]
          mudfiltratedensitycorrection,
        
          [XmlEnum("mud filtrate resistivity")]
          mudfiltrateresistivity,
        
          [XmlEnum("mud filtrate resistivity correction")]
          mudfiltrateresistivitycorrection,
        
          [XmlEnum("mud filtrate salinity correction")]
          mudfiltratesalinitycorrection,
        
          [XmlEnum("mud resistivity")]
          mudresistivity,
        
          [XmlEnum("mud salinity correction")]
          mudsalinitycorrection,
        
          [XmlEnum("mud viscosity correction")]
          mudviscositycorrection,
        
          [XmlEnum("mud weight correction")]
          mudweightcorrection,
        
          [XmlEnum("neutron die away time")]
          neutrondieawaytime,
        
          [XmlEnum("neutron porosity")]
          neutronporosity,
        
          [XmlEnum("nuclear caliper")]
          nuclearcaliper,
        
          [XmlEnum("nuclear magnetic decay time")]
          nuclearmagneticdecaytime,
        
          [XmlEnum("nuclear magnetism log permeability")]
          nuclearmagnetismlogpermeability,
        
          [XmlEnum("nuclear magnetism porosity")]
          nuclearmagnetismporosity,
        
          [XmlEnum("OH density porosity")]
          OHdensityporosity,
        
          [XmlEnum("OH dolomite density porosity")]
          OHdolomitedensityporosity,
        
          [XmlEnum("OH dolomite neutron porosity")]
          OHdolomiteneutronporosity,
        
          [XmlEnum("OH limestone density porosity")]
          OHlimestonedensityporosity,
        
          [XmlEnum("OH limestone neutron porosity")]
          OHlimestoneneutronporosity,
        
          [XmlEnum("OH neutron porosity")]
          OHneutronporosity,
        
          [XmlEnum("OH sandstone density porosity")]
          OHsandstonedensityporosity,
        
          [XmlEnum("OH sandstone neutron porosity")]
          OHsandstoneneutronporosity,
        
          [XmlEnum("oil based mud correction")]
          oilbasedmudcorrection,
        
          [XmlEnum("oil saturation")]
          oilsaturation,
        /// <summary>
        /// The procedure for introducing holes through casing into a formation so that formation fluids can enter into the casing.
        /// </summary>
          perforating,
        /// <summary>
        /// The permeability of the surrounding formation.
        /// </summary>
          permeability,
        
          [XmlEnum("phase shift")]
          phaseshift,
        
          [XmlEnum("photoelectric absorption")]
          photoelectricabsorption,
        
          [XmlEnum("photoelectric absorption correction")]
          photoelectricabsorptioncorrection,
        
          [XmlEnum("physical measurement correction")]
          physicalmeasurementcorrection,
        
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// The total pore volume occupied by fluid in a rock. Includes isolated nonconnecting pores and volume occupied by absorbed, immobile fluid.
        /// </summary>
          porosity,
        
          [XmlEnum("porosity correction")]
          porositycorrection,
        /// <summary>
        /// The measurement of gamma radiation emitted by potassium.
        /// </summary>
          potassium,
        /// <summary>
        /// The force or thrust exerted upon a surface divided by the area of the surface.
        /// </summary>
          pressure,
        
          [XmlEnum("pressure correction")]
          pressurecorrection,
        /// <summary>
        /// A well log trace which has been processed in some way; e.g., depth adjusted or environmentally corrected.
        /// </summary>
          processed,
        
          [XmlEnum("pulsed neutron porosity")]
          pulsedneutronporosity,
        /// <summary>
        /// Degree of excellence.
        /// </summary>
          quality,
        /// <summary>
        /// A relationship between two values usually expressed as a fraction.
        /// </summary>
          ratio,
        /// <summary>
        /// A well log trace which has not had any processing. In other words, a trace which has not been depth adjusted or environmentally corrected.
        /// </summary>
          raw,
        
          [XmlEnum("relative bearing")]
          relativebearing,
        /// <summary>
        /// The property measuring the resistance to flow of an electrical current.
        /// </summary>
          resistivity,
        
          [XmlEnum("resistivity factor correction")]
          resistivityfactorcorrection,
        
          [XmlEnum("resistivity from attenuation")]
          resistivityfromattenuation,
        
          [XmlEnum("resistivity from phase shift")]
          resistivityfromphaseshift,
        
          [XmlEnum("resistivity phase shift")]
          resistivityphaseshift,
        
          [XmlEnum("resistivity ratio")]
          resistivityratio,
        /// <summary>
        /// The concentration of ions in solution.
        /// </summary>
          salinity,
        /// <summary>
        /// To take a sample of or from something.
        /// </summary>
          sampling,
        
          [XmlEnum("sandstone acoustic porosity")]
          sandstoneacousticporosity,
        
          [XmlEnum("sandstone density porosity")]
          sandstonedensityporosity,
        
          [XmlEnum("sandstone neutron porosity")]
          sandstoneneutronporosity,
        /// <summary>
        /// The fraction or percentage of the pore volume of a rock.
        /// </summary>
          saturation,
        
          [XmlEnum("shale volume")]
          shalevolume,
        
          [XmlEnum("shallow conductivity")]
          shallowconductivity,
        
          [XmlEnum("shallow induction conductivity")]
          shallowinductionconductivity,
        
          [XmlEnum("shallow induction resistivity")]
          shallowinductionresistivity,
        
          [XmlEnum("shallow laterolog conductivity")]
          shallowlaterologconductivity,
        
          [XmlEnum("shallow laterolog resistivity")]
          shallowlaterologresistivity,
        
          [XmlEnum("shallow resistivity")]
          shallowresistivity,
        
          [XmlEnum("shear wave dolomite porosity")]
          shearwavedolomiteporosity,
        
          [XmlEnum("shear wave limestone porosity")]
          shearwavelimestoneporosity,
        
          [XmlEnum("shear wave matrix travel time")]
          shearwavematrixtraveltime,
        
          [XmlEnum("shear wave sandstone porosity")]
          shearwavesandstoneporosity,
        
          [XmlEnum("shear wave travel time")]
          shearwavetraveltime,
        /// <summary>
        /// A well log trace which has had its original values shifted by some factor; e.g., added or multiplied by a constant.
        /// </summary>
          shifted,
        
          [XmlEnum("sidewall core porosity")]
          sidewallcoreporosity,
        /// <summary>
        /// The macroscopic capture cross section, i.e. the effective cross-sectional area per unit volume for the capture of neutrons.
        /// </summary>
          sigma,
        
          [XmlEnum("sigma formation")]
          sigmaformation,
        
          [XmlEnum("sigma gas")]
          sigmagas,
        
          [XmlEnum("sigma hydrocarbon")]
          sigmahydrocarbon,
        
          [XmlEnum("sigma matrix")]
          sigmamatrix,
        
          [XmlEnum("sigma oil")]
          sigmaoil,
        
          [XmlEnum("sigma water")]
          sigmawater,
        
          [XmlEnum("slippage velocity correction")]
          slippagevelocitycorrection,
        /// <summary>
        /// A well log trace which has been filtered to smooth, or average the trace.
        /// </summary>
          smoothed,
        
          [XmlEnum("spectral gamma ray")]
          spectralgammaray,
        
          [XmlEnum("spherically focused conductivity")]
          sphericallyfocusedconductivity,
        
          [XmlEnum("spherically focused resistivity")]
          sphericallyfocusedresistivity,
        
          [XmlEnum("spontaneous potential")]
          spontaneouspotential,
        
          [XmlEnum("spreading loss correction")]
          spreadinglosscorrection,
        
          [XmlEnum("synthetic well log trace")]
          syntheticwelllogtrace,
        /// <summary>
        /// A temperature measurement.
        /// </summary>
          temperature,
        
          [XmlEnum("temperature correction")]
          temperaturecorrection,
        /// <summary>
        /// The tension on the wireline cable while logging.
        /// </summary>
          tension,
        
          [XmlEnum("Th/K ratio")]
          ThKratio,
        /// <summary>
        /// The measurement of gamma radiation emitted by thorium.
        /// </summary>
          thorium,
        /// <summary>
        /// A measured or measurable period.
        /// </summary>
          time,
        
          [XmlEnum("tool diameter correction")]
          tooldiametercorrection,
        
          [XmlEnum("tool eccentricity correction")]
          tooleccentricitycorrection,
        
          [XmlEnum("total gamma ray")]
          totalgammaray,
        
          [XmlEnum("total porosity")]
          totalporosity,
        
          [XmlEnum("tracer survey")]
          tracersurvey,
        
          [XmlEnum("travel time")]
          traveltime,
        
          [XmlEnum("true conductivity")]
          trueconductivity,
        
          [XmlEnum("true resistivity")]
          trueresistivity,
        
          [XmlEnum("true vertical depth")]
          trueverticaldepth,
        
          [XmlEnum("tube wave dolomite porosity")]
          tubewavedolomiteporosity,
        
          [XmlEnum("tube wave limestone porosity")]
          tubewavelimestoneporosity,
        
          [XmlEnum("tube wave matrix travel time")]
          tubewavematrixtraveltime,
        
          [XmlEnum("tube wave sandstone porosity")]
          tubewavesandstoneporosity,
        
          [XmlEnum("tube wave travel time")]
          tubewavetraveltime,
        /// <summary>
        /// The measurement of gamma radiation emitted by uranium.
        /// </summary>
          uranium,
        /// <summary>
        /// directional speed
        /// </summary>
          velocity,
        /// <summary>
        /// cubic capacity
        /// </summary>
          volume,
        
          [XmlEnum("water based fluid correction")]
          waterbasedfluidcorrection,
        
          [XmlEnum("water holdup correction")]
          waterholdupcorrection,
        
          [XmlEnum("water saturated conductivity")]
          watersaturatedconductivity,
        
          [XmlEnum("water saturated resistivity")]
          watersaturatedresistivity,
        
          [XmlEnum("water saturation")]
          watersaturation,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BearingType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BearingType xsd enumeration.")]
        public enum BearingType 
        {
        
          [XmlEnum("oil seal")]
          oilseal,
        
          [XmlEnum("mud lube")]
          mudlube,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BladeShapeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BladeShapeType xsd enumeration.")]
        public enum BladeShapeType 
        {
        /// <summary>
        /// 
        /// </summary>
          dynamic,
        /// <summary>
        /// 
        /// </summary>
          melon,
        /// <summary>
        /// 
        /// </summary>
          spiral,
        /// <summary>
        /// 
        /// </summary>
          straight,
        /// <summary>
        /// 
        /// </summary>
          variable,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BladeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BladeType xsd enumeration.")]
        public enum BladeType 
        {
        
          [XmlEnum("clamp-on")]
          clampon,
        /// <summary>
        /// 
        /// </summary>
          integral,
        /// <summary>
        /// 
        /// </summary>
          sleeve,
        /// <summary>
        /// 
        /// </summary>
          welded,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the HoleOpenerType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the HoleOpenerType xsd enumeration.")]
        public enum HoleOpenerType 
        {
        
          [XmlEnum("under-reamer")]
          underreamer,
        
          [XmlEnum("fixed blade")]
          fixedblade,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DeflectionMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the DeflectionMethod xsd enumeration.")]
        public enum DeflectionMethod 
        {
        
          [XmlEnum("point bit")]
          pointbit,
        
          [XmlEnum("push bit")]
          pushbit
        }
        /// <summary>
        /// This class represents the WellStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellStatus xsd enumeration.")]
        public enum WellStatus 
        {
        /// <summary>
        /// The status of a facility in which drilling, completion, and production operations have been permanently terminated.
        /// </summary>
          abandoned,
        /// <summary>
        /// For a well to be active, at least one of its wellbores must be active. For a wellbore to be active, at least one of its completions must be actively producing or injecting fluids.
        /// </summary>
          active,
        
          [XmlEnum("active -- injecting")]
          activeinjecting,
        
          [XmlEnum("active -- producing")]
          activeproducing,
        /// <summary>
        /// The completion has been installed, but the facility is not yet active. This status is appropriate only before the initial producing or injecting activity.
        /// </summary>
          completed,
        /// <summary>
        /// The status of a well or wellbore in which drilling operations have begun, but are not yet completed. The status ends when another status becomes appropriate.
        /// </summary>
          drilling,
        
          [XmlEnum("partially plugged")]
          partiallyplugged,
        /// <summary>
        /// The facility has received regulatory approvel, but drilling has not yet commenced. For a well, it has been spudded. For a subsequent wellbore, the whipstock or similar device has not yet been set.
        /// </summary>
          permitted,
        
          [XmlEnum("plugged and abandoned")]
          pluggedandabandoned,
        /// <summary>
        /// The status of a well or wellbore from conception to either regulatory approval or commencement of drilling.
        /// </summary>
          proposed,
        /// <summary>
        /// The facility has been sold, so it is no longer appropriate to keep a close internal status value. Status values may be added at later times without changing the sold status.
        /// </summary>
          sold,
        /// <summary>
        /// Production or injection has been temporarily suspended in a manner that will allow immediate resumption of activities.
        /// </summary>
          suspended,
        
          [XmlEnum("temporarily abandoned")]
          temporarilyabandoned,
        /// <summary>
        /// The facility operations are suspended while tests are being conducted to determine formation and/or reservoir properties. For example, a drillstem test. This status also includes extended testing.
        /// </summary>
          testing,
        /// <summary>
        /// Information about the status of the well is confidential. This is more explicit than unknown, since it gives the reason that the status value is unknown.
        /// </summary>
          tight,
        
          [XmlEnum("working over")]
          workingover,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellPurpose xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellPurpose xsd enumeration.")]
        public enum WellPurpose 
        {
        /// <summary>
        /// A well drilled into a formation shown to be potentially productive of oil or gas by an earlier well for the purpose of obtaining more information about the reservoir. Also known as a delineation well.
        /// </summary>
          appraisal,
        
          [XmlEnum("appraisal -- confirmation appraisal")]
          appraisalconfirmationappraisal,
        
          [XmlEnum("appraisal -- exploratory appraisal")]
          appraisalexploratoryappraisal,
        /// <summary>
        /// An exploratory well drilled in an unproved area to test for a new field, a new pay, a deeper reservoir, or a shallower reservoir. Also known as a wildcat.
        /// </summary>
          exploration,
        
          [XmlEnum("exploration -- deeper-pool wildcat")]
          explorationdeeperpoolwildcat,
        
          [XmlEnum("exploration -- new-field wildcat")]
          explorationnewfieldwildcat,
        
          [XmlEnum("exploration -- new-pool wildcat")]
          explorationnewpoolwildcat,
        
          [XmlEnum("exploration -- outpost wildcat")]
          explorationoutpostwildcat,
        
          [XmlEnum("exploration -- shallower-pool wildcat")]
          explorationshallowerpoolwildcat,
        /// <summary>
        /// A well drilled in a zone in an area already proved productive.
        /// </summary>
          development,
        
          [XmlEnum("development -- infill development")]
          developmentinfilldevelopment,
        
          [XmlEnum("development -- injector")]
          developmentinjector,
        
          [XmlEnum("development -- producer")]
          developmentproducer,
        
          [XmlEnum("fluid storage")]
          fluidstorage,
        
          [XmlEnum("fluid storage -- gas storage")]
          fluidstoragegasstorage,
        
          [XmlEnum("general srvc")]
          generalsrvc,
        
          [XmlEnum("general srvc -- borehole re-acquisition")]
          generalsrvcboreholereacquisition,
        
          [XmlEnum("general srvc -- observation")]
          generalsrvcobservation,
        
          [XmlEnum("general srvc -- relief")]
          generalsrvcrelief,
        
          [XmlEnum("general srvc -- research")]
          generalsrvcresearch,
        
          [XmlEnum("general srvc -- research -- drill test")]
          generalsrvcresearchdrilltest,
        
          [XmlEnum("general srvc -- research -- strat test")]
          generalsrvcresearchstrattest,
        
          [XmlEnum("general srvc -- waste disposal")]
          generalsrvcwastedisposal,
        /// <summary>
        /// A non-oil and gas E and P well drilled for the purpose of locating and/or extracting a mineral from the subsurface, usually through the injection and/or extraction of mineral-bearing fluids.
        /// </summary>
          mineral,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellFluid xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellFluid xsd enumeration.")]
        public enum WellFluid 
        {
        /// <summary>
        /// This is generally an injected fluid.
        /// </summary>
          air,
        /// <summary>
        /// Liquid hydrocarbons produced with natural gas that are separated from the gas by cooling and various other means. Condensate generally has an API gravity of 50 degrees to 120 degrees and is water white, straw, or bluish in color. It is the liquid recovery from a well classified as a gas well. It is generally dissolved in the gaseous state under reservoir conditions but separates as a liquid either in passing up the hole or at the surface. These hydrocarbons, from associated and nonassociated gas well gas, normally are recovered from lease separators or field facilities by mechanical separation.
        /// </summary>
          condensate,
        /// <summary>
        /// The well facility is classified as a dry well. It has not been, nor will it be used to produce or inject any fluids.
        /// </summary>
          dry,
        /// <summary>
        /// The well is classified as a gas well, producing or injecting a hydrocarbon gas. The gas is generally methane, but may have a mixture of other gases also.
        /// </summary>
          gas,
        
          [XmlEnum("gas-water")]
          gaswater,
        
          [XmlEnum("non HC gas")]
          nonHCgas,
        
          [XmlEnum("non HC gas -- CO2")]
          nonHCgasCO2,
        /// <summary>
        /// The liquid hydrocarbon, generally referred to as crude oil.
        /// </summary>
          oil,
        
          [XmlEnum("oil-gas")]
          oilgas,
        
          [XmlEnum("oil-water")]
          oilwater,
        /// <summary>
        /// The gaseous state of water. This is generally an injected fluid, but it is possible that some hydrothermal wells produce steam.
        /// </summary>
          steam,
        /// <summary>
        /// The well is classified as a water well without distinguishing between brine or fresh water.
        /// </summary>
          water,
        
          [XmlEnum("water -- brine")]
          waterbrine,
        
          [XmlEnum("water -- fresh water")]
          waterfreshwater,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellDirection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellDirection xsd enumeration.")]
        public enum WellDirection 
        {
        
          [XmlEnum("huff-n-puff")]
          huffnpuff,
        /// <summary>
        /// The well facility is injecting fluids into the subsurface.
        /// </summary>
          injector,
        /// <summary>
        /// The well facility is producing fluids from the subsurface.
        /// </summary>
          producer,
        /// <summary>
        /// The flow direction of the fluids is variable, but not on a regular basis as is the case with the huff-n-puff flow.
        /// </summary>
          uncertain,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ElevCodeEnum xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ElevCodeEnum xsd enumeration.")]
        public enum ElevCodeEnum 
        {
        /// <summary>
        /// casing flange: A flange affixed to the top of the casing string used to attach production equipment.
        /// </summary>
          CF,
        /// <summary>
        /// crown valve
        /// </summary>
          CV,
        /// <summary>
        /// derrick floor
        /// </summary>
          DF,
        /// <summary>
        /// ground level
        /// </summary>
          GL,
        /// <summary>
        /// kelly bushing
        /// </summary>
          KB,
        /// <summary>
        /// rotary bushing
        /// </summary>
          RB,
        /// <summary>
        /// rotary table
        /// </summary>
          RT,
        /// <summary>
        /// sea floor
        /// </summary>
          SF,
        /// <summary>
        /// Lowest Astronomical Tide. The lowest tide level over the duration of the National Tidal Datum Epoch (19 years).
        /// </summary>
          LAT,
        /// <summary>
        /// Mean Sea Level - A tidal datum. The arithmetic mean of hourly heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          SL,
        /// <summary>
        /// Mean Higher High Water - A tidal datum. The average of the higher high water height of each tidal day observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHHW,
        /// <summary>
        /// Mean High Water - A tidal datum. The average of all the high water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHW,
        /// <summary>
        /// Mean Lower Low Water - A tidal datum. The average of the lower low water height of each tidal day observed over the National Tidal Datum Epoch (19 years ).
        /// </summary>
          MLLW,
        /// <summary>
        /// Mean Low Water - A tidal datum. The average of all the low water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MLW,
        /// <summary>
        /// Mean Tide Level - A tidal datum. The arithmetic mean of mean high water and mean low water. Same as half-tide level.
        /// </summary>
          MTL,
        /// <summary>
        /// kickoff point
        /// </summary>
          KO,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the GeodeticDatum xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the GeodeticDatum xsd enumeration.")]
        public enum GeodeticDatum 
        {
        /// <summary>
        /// Adindian ellipsoid=CL80 region="Sudan, Ethiopia"
        /// </summary>
          ADND,
        /// <summary>
        /// ARC 1950 ellipsoid=CL80B region="Southern Africa"
        /// </summary>
          ARC50,
        /// <summary>
        /// Australian ellipsoid=GRS67 region="Australia Geodetic"
        /// </summary>
          AUSG,
        /// <summary>
        /// Camp Area Astro ellipsoid=INT24 region=Antarctica 
        /// </summary>
          CAA,
        /// <summary>
        /// Chau Astro ellipsoid=INT24 region=Paraguay 
        /// </summary>
          CHAS,
        /// <summary>
        /// Corrego Alegre ellipsoid=INT24 region=INT24 
        /// </summary>
          CORAL,
        /// <summary>
        /// European 1950 ellipsoid=INT24 region="Europe, Middle East, North Africa"
        /// </summary>
          ED50,
        /// <summary>
        /// European 1987 ellipsoid=INT24 region="Europe, Middle East, North Africa"
        /// </summary>
          ED87,
        /// <summary>
        /// Ireland 1965 ellipsoid=AIRY_MOD region=Ireland 
        /// </summary>
          ERIN65,
        /// <summary>
        /// Geodetic Datum 1949 ellipsoid=INT24 region="New Zealand"
        /// </summary>
          GD49,
        /// <summary>
        /// Ghana ellipsoid=WAR24 region=Ghana 
        /// </summary>
          GHANA,
        /// <summary>
        /// Guam 1963 ellipsoid=CL66 region="Marianas Islands"
        /// </summary>
          GUAM63,
        /// <summary>
        /// Hjorsey 1955 ellipsoid=INT24 region=Iceland 
        /// </summary>
          HJRS55,
        /// <summary>
        /// Hu-Tzu-Shan ellipsoid=INT24 region=Taiwan 
        /// </summary>
          HTS,
        /// <summary>
        /// Campo Inchauspe ellipsoid=INT24 region=Argentina 
        /// </summary>
          INCH,
        /// <summary>
        /// Indian 'Kalimpur' ellipsoid=EVER region=India 
        /// </summary>
          INDIA1,
        /// <summary>
        /// Indian 'Kalimpur' ellipsoid=INT24 region=India 
        /// </summary>
          INDIA2,
        /// <summary>
        /// Indonesia 1974 ellipsoid=GRS67 region=Indonesia 
        /// </summary>
          INDNS74,
        /// <summary>
        /// Liberia 1964 ellipsoid=CL80 region=Liberia 
        /// </summary>
          LIB64,
        /// <summary>
        /// Luzon ellipsoid=CL66 region=Philippines 
        /// </summary>
          LUZON,
        /// <summary>
        /// Merchich ellipsoid=CL80A region=Morocco 
        /// </summary>
          MRCH,
        /// <summary>
        /// North American 'Meades Ranch' ellipsoid=CL66 region="North America"
        /// </summary>
          NAD27,
        /// <summary>
        /// North American Datum of 1983 ellipsoid=GRS80 region="Canada, Cuba, U.S., Caribbean"
        /// </summary>
          NAD83,
        /// <summary>
        /// Nigeria ellipsoid=CL80 region=Nigeria 
        /// </summary>
          NGRA,
        /// <summary>
        /// 
        /// </summary>
          None,
        /// <summary>
        /// Naparima ellipsoid=INT24 region="Trinidad and Tobago"
        /// </summary>
          NPRM,
        /// <summary>
        /// Ordnance Survey of Great Britain 1936 ellipsoid=AIRY region="Great Britain, Northern Ireland"
        /// </summary>
          OSGB36,
        /// <summary>
        /// European 'Pelmert Tower, Potsdam' ellipsoid=INT24 region="Most of Eurasia, Africa"
        /// </summary>
          POTS1,
        /// <summary>
        /// Russian 'Pulkovo' ellipsoid=BESS41 
        /// </summary>
          PULK1,
        /// <summary>
        /// Russian 'Pulkovo' ellipsoid=KRSV 
        /// </summary>
          PULK2,
        /// <summary>
        /// Qornoq ellipsoid=INT24 region=Greenland 
        /// </summary>
          QRNQ,
        /// <summary>
        /// Provisional South American, 1956 ellipsoid=INT24 region="Bolivia, Chile, Colombia, Ecuador, Peru, Venezuela, the Guianas"
        /// </summary>
          SA56,
        /// <summary>
        /// Sierra Leone 1960 ellipsoid=CL80 region="Sierra Leone"
        /// </summary>
          SRL60,
        /// <summary>
        /// Tananarive (Antananarivo) Obsv. 1925T ellipsoid=INT24 region="Malagasy Republic"
        /// </summary>
          TNRV25,
        /// <summary>
        /// Tokyo ellipsoid=BESS41 region=Japan
        /// </summary>
          TOKYO,
        /// <summary>
        /// Datum defined elsewhere
        /// </summary>
          UserDefined,
        /// <summary>
        /// Voirol ellipsoid=CL80 region="Algeria, Tunisia"
        /// </summary>
          VROL,
        /// <summary>
        /// World Geodetic System 1972 ellipsoid=WGS72
        /// </summary>
          WGS72,
        /// <summary>
        /// World Geodetic System 1984 ellipsoid=WGS84 region="Sino-Soviet Bloc, SW Asia, Hydrographic, Aeronautical"
        /// </summary>
          WGS84,
        /// <summary>
        /// Yacare ellipsoid=INT24 region=Uruguay
        /// </summary>
          YACR,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Ellipsoid xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the Ellipsoid xsd enumeration.")]
        public enum Ellipsoid 
        {
        /// <summary>
        /// Australian Old
        /// </summary>
          AGD66,
        /// <summary>
        /// Modified Airy
        /// </summary>
          AIRY_MOD,
        /// <summary>
        /// Airy 1830
        /// </summary>
          AIRY30,
        /// <summary>
        /// Airy 1849
        /// </summary>
          AIRY49,
        /// <summary>
        /// Australian National Same as KAU63 and SA69
        /// </summary>
          AUST_NAT,
        
          [XmlEnum("BESL-DHD")]
          BESLDHD,
        
          [XmlEnum("BESL-NGL")]
          BESLNGL,
        
          [XmlEnum("BESL-RT9")]
          BESLRT9,
        /// <summary>
        /// Bessel 1841
        /// </summary>
          BESS41,
        /// <summary>
        /// Bessel 1841 for Namibia
        /// </summary>
          BESSNAM,
        /// <summary>
        /// BOGOTA (International 1924)
        /// </summary>
          BOGOTA,
        /// <summary>
        /// Clarke 1858
        /// </summary>
          CL58,
        
          [XmlEnum("CL58-1")]
          CL581,
        /// <summary>
        /// Clarke 1866
        /// </summary>
          CL66,
        
          [XmlEnum("CL66-M")]
          CL66M,
        /// <summary>
        /// Clarke 1880
        /// </summary>
          CL80,
        
          [XmlEnum("CL80-A")]
          CL80A,
        
          [XmlEnum("CL80-B")]
          CL80B,
        
          [XmlEnum("CL80-I")]
          CL80I,
        
          [XmlEnum("CL80-J")]
          CL80J,
        
          [XmlEnum("CL80-M")]
          CL80M,
        
          [XmlEnum("CL80-P")]
          CL80P,
        /// <summary>
        /// CAMPO INCH (International 1924)
        /// </summary>
          CMPOINCH,
        /// <summary>
        /// Danish
        /// </summary>
          DAN,
        /// <summary>
        /// DELAMBRE 1810 
        /// </summary>
          DELA,
        /// <summary>
        /// ED50 (International 1924)
        /// </summary>
          ED50,
        /// <summary>
        /// EGYPT07 (Helmert 1906)
        /// </summary>
          EGYPT07,
        /// <summary>
        /// Everest 1830 - Indian
        /// </summary>
          EVER,
        /// <summary>
        /// Everest 1948
        /// </summary>
          EVER48,
        /// <summary>
        /// Everest 1956
        /// </summary>
          EVER56,
        /// <summary>
        /// Everest 1969
        /// </summary>
          EVER69,
        
          [XmlEnum("EVER-BR")]
          EVERBR,
        /// <summary>
        /// Modified Everest
        /// </summary>
          EVERMOD,
        
          [XmlEnum("EVER-P")]
          EVERP,
        
          [XmlEnum("EVER-TM")]
          EVERTM,
        /// <summary>
        /// Everest - Timbali 
        /// </summary>
          EVTM,
        /// <summary>
        /// "Fischer 1960 aka ""Mercury"""
        /// </summary>
          FISC60,
        /// <summary>
        /// Fischer 1960 Modified
        /// </summary>
          FISC60MOD,
        /// <summary>
        /// "Fischer 1968 aka ""Modified Mercury"""
        /// </summary>
          FISC68,
        /// <summary>
        /// "Modified Fischer 1960 aka ""South Asia"""
        /// </summary>
          FISCMOD,
        /// <summary>
        /// GDA94 - Australia
        /// </summary>
          GDA94,
        /// <summary>
        /// Geodetic Reference System 1967
        /// </summary>
          GRS67,
        /// <summary>
        /// Geodetic Reference System 1980
        /// </summary>
          GRS80,
        /// <summary>
        /// Hayford 1909
        /// </summary>
          HAY09,
        /// <summary>
        /// Heiskanen 1929
        /// </summary>
          HEIS,
        /// <summary>
        /// Helmert 1906
        /// </summary>
          HEL06,
        /// <summary>
        /// Helmert 1907 
        /// </summary>
          HEL07,
        /// <summary>
        /// Hough 1956 
        /// </summary>
          HOUG,
        
          [XmlEnum("IAG-75")]
          IAG75,
        /// <summary>
        /// INDIAN75 (Everest 1930)
        /// </summary>
          INDIAN75,
        
          [XmlEnum("INDO-74")]
          INDO74,
        /// <summary>
        /// International 1924
        /// </summary>
          INT24,
        /// <summary>
        /// IUGG 1967
        /// </summary>
          IUGG67,
        /// <summary>
        /// IUGG 1975
        /// </summary>
          IUGG75,
        /// <summary>
        /// Jeffreys 1948
        /// </summary>
          JEFF48,
        /// <summary>
        /// Kaula 1963 Same as AUST_NAT and SA69
        /// </summary>
          KAU63,
        /// <summary>
        /// Krassovsky
        /// </summary>
          KRSV,
        /// <summary>
        /// MERIT83
        /// </summary>
          MERIT83,
        /// <summary>
        /// NAD27 (Clarke 1866)
        /// </summary>
          NAD27,
        /// <summary>
        /// NAHRAN (Clarke 1880)
        /// </summary>
          NAHRAN,
        /// <summary>
        /// New International 1967
        /// </summary>
          NEWINT67,
        
          [XmlEnum("NWL-10D")]
          NWL10D,
        
          [XmlEnum("NWL-9D")]
          NWL9D,
        /// <summary>
        /// OSGB36 (Airy 1830)
        /// </summary>
          OSGB36,
        /// <summary>
        /// OSU86F
        /// </summary>
          OSU86F,
        /// <summary>
        /// OSU91A
        /// </summary>
          OSU91A,
        
          [XmlEnum("PLESSIS-1817")]
          PLESSIS1817,
        /// <summary>
        /// PSAD56 (International 1924)
        /// </summary>
          PSAD56,
        /// <summary>
        /// Pointe Noire 1948
        /// </summary>
          PTNOIRE,
        /// <summary>
        /// South American 1969
        /// </summary>
          SA69,
        /// <summary>
        /// Sphere of radius 6370997
        /// </summary>
          SPHR,
        /// <summary>
        /// Struve 1860
        /// </summary>
          STRU,
        /// <summary>
        /// Walbeck
        /// </summary>
          WALB,
        /// <summary>
        /// War Office 1924
        /// </summary>
          WAR24,
        /// <summary>
        /// World Geodetic System 1960
        /// </summary>
          WGS60,
        /// <summary>
        /// World Geodetic System 1966
        /// </summary>
          WGS66,
        /// <summary>
        /// World Geodetic System 1972
        /// </summary>
          WGS72,
        /// <summary>
        /// World Geodetic System 1984
        /// </summary>
          WGS84,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Projection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the Projection xsd enumeration.")]
        public enum Projection 
        {
        
          [XmlEnum("Albers equal area")]
          Albersequalarea,
        
          [XmlEnum("azimuthal equidistant")]
          azimuthalequidistant,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-CASSINI
        /// </summary>
          Cassini,
        
          [XmlEnum("equidistant conic")]
          equidistantconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-EQUIRECTANGULAR
        /// </summary>
          equirectangular,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-GNOMONIC
        /// </summary>
          gnomonic,
        
          [XmlEnum("Lambert azimuthal")]
          Lambertazimuthal,
        
          [XmlEnum("Lambert conformal conic")]
          Lambertconformalconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-MERCATOR
        /// </summary>
          Mercator,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-MILLER
        /// </summary>
          Miller,
        
          [XmlEnum("oblique Mercator")]
          obliqueMercator,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-ORTHO
        /// </summary>
          orthographic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-PERSPECTIVE
        /// </summary>
          perspective,
        
          [XmlEnum("polar stereographic")]
          polarstereographic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-POLYCONIC
        /// </summary>
          polyconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-SINUSOIDAL
        /// </summary>
          sinusoidal,
        
          [XmlEnum("state plane")]
          stateplane,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-STEREO
        /// </summary>
          stereographic,
        
          [XmlEnum("transverse Mercator")]
          transverseMercator,
        
          [XmlEnum("universal transverse Mercator")]
          universaltransverseMercator,
        
          [XmlEnum("user defined")]
          userdefined,
        
          [XmlEnum("Van der Grinten")]
          VanderGrinten,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ProjectionVariantsObliqueMercator xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ProjectionVariantsObliqueMercator xsd enumeration.")]
        public enum ProjectionVariantsObliqueMercator 
        {
        /// <summary>
        /// 
        /// </summary>
          @default,
        /// <summary>
        /// 
        /// </summary>
          rectified,
        
          [XmlEnum("rectified skew")]
          rectifiedskew,
        
          [XmlEnum("rectified skew center origin")]
          rectifiedskewcenterorigin,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NADTypes xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the NADTypes xsd enumeration.")]
        public enum NADTypeList 
        {
        /// <summary>
        /// 
        /// </summary>
          NAD27,
        /// <summary>
        /// 
        /// </summary>
          NAD83,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Hemispheres xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the Hemispheres xsd enumeration.")]
        public enum HemisphereList 
        {
        /// <summary>
        /// Northern hemisphere.
        /// </summary>
          northern,
        /// <summary>
        /// Southern hemisphere.
        /// </summary>
          southern,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellboreType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellboreType xsd enumeration.")]
        public enum WellboreType 
        {
        /// <summary>
        /// The original wellbore had to be abandoned before its final usage. This wellbore is being drilled as a different wellbore, but one which has the same target as the one that was abandoned.
        /// </summary>
          bypass,
        /// <summary>
        /// This is the first wellbore that has been drilled, or attempted, in a given well.
        /// </summary>
          initial,
        /// <summary>
        /// The wellbore is being redrilled.
        /// </summary>
          redrill,
        /// <summary>
        /// The wellbore is being reentered after a period of abandonment.
        /// </summary>
          reentry,
        /// <summary>
        /// The wellbore is part of an existing regulatory well. The original borehole did not reach the target depth. This borehole required the well to be respudded (drilled from a different surface position).
        /// </summary>
          respud,
        /// <summary>
        /// The wellbore is a deviation from a given wellbore, that produces a different borehole from the others, and whose bottomhole differs from any previously extisting wellbore bottomholes.
        /// </summary>
          sidetrack,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellboreShape xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellboreShape xsd enumeration.")]
        public enum WellboreShape 
        {
        
          [XmlEnum("build and hold")]
          buildandhold,
        /// <summary>
        /// A wellbore that significantly departs from vertical with respect to the surface location.
        /// </summary>
          deviated,
        
          [XmlEnum("double kickoff")]
          doublekickoff,
        /// <summary>
        /// A wellbore whose path deviates from the vertical by at least 75 degrees.
        /// </summary>
          horizontal,
        
          [XmlEnum("S-shaped")]
          Sshaped,
        /// <summary>
        /// A wellbore that is nearly vertical with respect to the surface location.
        /// </summary>
          vertical,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ArrayElementDataType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ArrayElementDataType xsd enumeration.")]
        public enum ArrayElementDataType 
        {
        
          boolean,
        
          [XmlEnum("integer 8 bit")]
          integer8bit,
        
          [XmlEnum("integer 16 bit")]
          integer16bit,
        
          [XmlEnum("integer 32 bit")]
          integer32bit,
        
          [XmlEnum("integer 64 bit")]
          integer64bit,
        
          [XmlEnum("IEEE float 32 bit")]
          IEEEfloat32bit,
        
          [XmlEnum("IEEE float 64 bit")]
          IEEEfloat64bit
        }
    }
    #endregion
}