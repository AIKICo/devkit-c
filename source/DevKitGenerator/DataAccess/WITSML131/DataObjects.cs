

















//This code was generated using the Energistics Generator tool.  Direct changes to this code will be lost
//during regeneration.

using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

using Energistics.DataAccess.WITSML131.ComponentSchemas;
using Energistics.DataAccess.WITSML131.ReferenceData;

namespace Energistics.DataAccess.WITSML131
{
    #region Classes

    /// <summary>
    /// This class represents the obj_capClients xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/api/131")]
    [System.Xml.Serialization.XmlRootAttribute("capClients", Namespace="http://www.witsml.org/api/131", IsNullable=false)]

    [Description("This class represents the obj_capClients xsd type.")]
    public partial class CapClients : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// capClient property
        /// </summary>
		[XmlElement("capClient")]

        public CapClient CapClient {
            get {
                return capClientField;
            } 
            set {
                capClientField = value;
                NotifyPropertyChanged("CapClient");
            }
        }

        private CapClient capClientField; 


		/// <summary>
        /// version property
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_capClient xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_capClient", Namespace="http://www.witsml.org/api/131")]

    [Description("This class represents the obj_capClient xsd type.")]
    public partial class CapClient : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// contact property
        /// </summary>
		[XmlElement("contact")]

        public Contact Contact {
            get {
                return contactField;
            } 
            set {
                contactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

        private Contact contactField; 


        /// <summary>
        /// description property
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// name property
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// vendor property
        /// </summary>
		[XmlElement("vendor")]

        public String Vendor {
            get {
                return vendorField;
            } 
            set {
                vendorField = value;
                NotifyPropertyChanged("Vendor");
            }
        }

        private String vendorField; 


        /// <summary>
        /// version property
        /// </summary>
		[XmlElement("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 


        /// <summary>
        /// schemaVersion property
        /// </summary>
		[XmlElement("schemaVersion")]

        public String SchemaVersion {
            get {
                return schemaVersionField;
            } 
            set {
                schemaVersionField = value;
                NotifyPropertyChanged("SchemaVersion");
            }
        }

        private String schemaVersionField; 


		/// <summary>
        /// apiVers property
        /// </summary>
        [XmlAttribute("apiVers")]

        public String ApiVers {
            get {
                return apiVersField;
            } 
            set {
                apiVersField = value;
                NotifyPropertyChanged("ApiVers");
            }
        }

        private String apiVersField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the cs_contact xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_contact", Namespace="http://www.witsml.org/api/131")]

    [Description("This class represents the cs_contact xsd type.")]
    public partial class Contact : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// name property
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// email property
        /// </summary>
		[XmlElement("email")]

        public String Email {
            get {
                return emailField;
            } 
            set {
                emailField = value;
                NotifyPropertyChanged("Email");
            }
        }

        private String emailField; 


        /// <summary>
        /// phone property
        /// </summary>
		[XmlElement("phone")]

        public String Phone {
            get {
                return phoneField;
            } 
            set {
                phoneField = value;
                NotifyPropertyChanged("Phone");
            }
        }

        private String phoneField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_capPublishers xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/api/131")]
    [System.Xml.Serialization.XmlRootAttribute("capPublishers", Namespace="http://www.witsml.org/api/131", IsNullable=false)]

    [Description("This class represents the obj_capPublishers xsd type.")]
    public partial class CapPublishers : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// capPublisher property
        /// </summary>
		[XmlElement("capPublisher")]

        public CapPublisher CapPublisher {
            get {
                return capPublisherField;
            } 
            set {
                capPublisherField = value;
                NotifyPropertyChanged("CapPublisher");
            }
        }

        private CapPublisher capPublisherField; 


		/// <summary>
        /// version property
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_capPublisher xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_capPublisher", Namespace="http://www.witsml.org/api/131")]

    [Description("This class represents the obj_capPublisher xsd type.")]
    public partial class CapPublisher : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// contact property
        /// </summary>
		[XmlElement("contact")]

        public Contact Contact {
            get {
                return contactField;
            } 
            set {
                contactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

        private Contact contactField; 


        /// <summary>
        /// description property
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// name property
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// vendor property
        /// </summary>
		[XmlElement("vendor")]

        public String Vendor {
            get {
                return vendorField;
            } 
            set {
                vendorField = value;
                NotifyPropertyChanged("Vendor");
            }
        }

        private String vendorField; 


        /// <summary>
        /// version property
        /// </summary>
		[XmlElement("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 


        /// <summary>
        /// schemaVersion property
        /// </summary>
		[XmlElement("schemaVersion")]

        public String SchemaVersion {
            get {
                return schemaVersionField;
            } 
            set {
                schemaVersionField = value;
                NotifyPropertyChanged("SchemaVersion");
            }
        }

        private String schemaVersionField; 


        /// <summary>
        /// function property
        /// </summary>
		[XmlElement("function")]

        public List<Function> Function {
            get {
                return functionField;
            } 
            set {
                functionField = value;
                NotifyPropertyChanged("Function");
            }
        }

        private List<Function> functionField; 


		/// <summary>
        /// apiVers property
        /// </summary>
        [XmlAttribute("apiVers")]

        public String ApiVers {
            get {
                return apiVersField;
            } 
            set {
                apiVersField = value;
                NotifyPropertyChanged("ApiVers");
            }
        }

        private String apiVersField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the cs_function xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_function", Namespace="http://www.witsml.org/api/131")]

    [Description("This class represents the cs_function xsd type.")]
    public partial class Function : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// dataObject property
        /// </summary>
		[XmlElement("dataObject")]

        public List<String> DataObject {
            get {
                return dataObjectField;
            } 
            set {
                dataObjectField = value;
                NotifyPropertyChanged("DataObject");
            }
        }

        private List<String> dataObjectField; 


		/// <summary>
        /// name property
        /// </summary>
        [XmlAttribute("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_capServers xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/api/131")]
    [System.Xml.Serialization.XmlRootAttribute("capServers", Namespace="http://www.witsml.org/api/131", IsNullable=false)]

    [Description("This class represents the obj_capServers xsd type.")]
    public partial class CapServers : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// capServer property
        /// </summary>
		[XmlElement("capServer")]

        public CapServer CapServer {
            get {
                return capServerField;
            } 
            set {
                capServerField = value;
                NotifyPropertyChanged("CapServer");
            }
        }

        private CapServer capServerField; 


		/// <summary>
        /// version property
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_capServer xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_capServer", Namespace="http://www.witsml.org/api/131")]

    [Description("This class represents the obj_capServer xsd type.")]
    public partial class CapServer : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// contact property
        /// </summary>
		[XmlElement("contact")]

        public Contact Contact {
            get {
                return contactField;
            } 
            set {
                contactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

        private Contact contactField; 


        /// <summary>
        /// description property
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// name property
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// vendor property
        /// </summary>
		[XmlElement("vendor")]

        public String Vendor {
            get {
                return vendorField;
            } 
            set {
                vendorField = value;
                NotifyPropertyChanged("Vendor");
            }
        }

        private String vendorField; 


        /// <summary>
        /// version property
        /// </summary>
		[XmlElement("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 


        /// <summary>
        /// schemaVersion property
        /// </summary>
		[XmlElement("schemaVersion")]

        public String SchemaVersion {
            get {
                return schemaVersionField;
            } 
            set {
                schemaVersionField = value;
                NotifyPropertyChanged("SchemaVersion");
            }
        }

        private String schemaVersionField; 


        /// <summary>
        /// function property
        /// </summary>
		[XmlElement("function")]

        public List<Function> Function {
            get {
                return functionField;
            } 
            set {
                functionField = value;
                NotifyPropertyChanged("Function");
            }
        }

        private List<Function> functionField; 


		/// <summary>
        /// apiVers property
        /// </summary>
        [XmlAttribute("apiVers")]

        public String ApiVers {
            get {
                return apiVersField;
            } 
            set {
                apiVersField = value;
                NotifyPropertyChanged("ApiVers");
            }
        }

        private String apiVersField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_capSubscribers xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/api/131")]
    [System.Xml.Serialization.XmlRootAttribute("capSubscribers", Namespace="http://www.witsml.org/api/131", IsNullable=false)]

    [Description("This class represents the obj_capSubscribers xsd type.")]
    public partial class CapSubscribers : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// capSubscriber property
        /// </summary>
		[XmlElement("capSubscriber")]

        public CapSubscriber CapSubscriber {
            get {
                return capSubscriberField;
            } 
            set {
                capSubscriberField = value;
                NotifyPropertyChanged("CapSubscriber");
            }
        }

        private CapSubscriber capSubscriberField; 


		/// <summary>
        /// version property
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_capSubscriber xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_capSubscriber", Namespace="http://www.witsml.org/api/131")]

    [Description("This class represents the obj_capSubscriber xsd type.")]
    public partial class CapSubscriber : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// contact property
        /// </summary>
		[XmlElement("contact")]

        public Contact Contact {
            get {
                return contactField;
            } 
            set {
                contactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

        private Contact contactField; 


        /// <summary>
        /// description property
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// name property
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// vendor property
        /// </summary>
		[XmlElement("vendor")]

        public String Vendor {
            get {
                return vendorField;
            } 
            set {
                vendorField = value;
                NotifyPropertyChanged("Vendor");
            }
        }

        private String vendorField; 


        /// <summary>
        /// version property
        /// </summary>
		[XmlElement("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 


        /// <summary>
        /// schemaVersion property
        /// </summary>
		[XmlElement("schemaVersion")]

        public String SchemaVersion {
            get {
                return schemaVersionField;
            } 
            set {
                schemaVersionField = value;
                NotifyPropertyChanged("SchemaVersion");
            }
        }

        private String schemaVersionField; 


		/// <summary>
        /// apiVers property
        /// </summary>
        [XmlAttribute("apiVers")]

        public String ApiVers {
            get {
                return apiVersField;
            } 
            set {
                apiVersField = value;
                NotifyPropertyChanged("ApiVers");
            }
        }

        private String apiVersField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_subscriptions xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/api/131")]
    [System.Xml.Serialization.XmlRootAttribute("subscriptions", Namespace="http://www.witsml.org/api/131", IsNullable=false)]

    [Description("This class represents the obj_subscriptions xsd type.")]
    public partial class SubscriptionList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// subscription property
        /// </summary>
		[XmlElement("subscription")]

        public List<Subscription> Subscription {
            get {
                return subscriptionField;
            } 
            set {
                subscriptionField = value;
                NotifyPropertyChanged("Subscription");
            }
        }

        private List<Subscription> subscriptionField; 


        /// <summary>
        /// subscription property
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Subscription;
			}
        }

		/// <summary>
        /// version property
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_subscription xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_subscription", Namespace="http://www.witsml.org/api/131")]

    [Description("This class represents the obj_subscription xsd type.")]
    public partial class Subscription : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Any property
        /// </summary>
		[XmlElement("Any")]

        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

        private List<XmlElement> AnyField; 


		/// <summary>
        /// host property
        /// </summary>
        [XmlAttribute("host")]

        public String Host {
            get {
                return hostField;
            } 
            set {
                hostField = value;
                NotifyPropertyChanged("Host");
            }
        }

        private String hostField; 


		/// <summary>
        /// process property
        /// </summary>
        [XmlAttribute("process")]

        public String Process {
            get {
                return processField;
            } 
            set {
                processField = value;
                NotifyPropertyChanged("Process");
            }
        }

        private String processField; 


		/// <summary>
        /// encrypt property
        /// </summary>
        [XmlAttribute("encrypt")]

        public Boolean Encrypt {
            get {
                return encryptField;
            } 
            set {
                encryptField = value;
                this.EncryptSpecified = true;
                NotifyPropertyChanged("Encrypt");
            }
        }

        private Boolean encryptField; 


		/// <summary>
        /// encryptSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean EncryptSpecified {
            get {
                return encryptSpecifiedField;
            } 
            set {
                encryptSpecifiedField = value;
                NotifyPropertyChanged("EncryptSpecified");
            }
        }

        private Boolean encryptSpecifiedField; 


		/// <summary>
        /// port property
        /// </summary>
        [XmlAttribute("port")]

        public String Port {
            get {
                return portField;
            } 
            set {
                portField = value;
                NotifyPropertyChanged("Port");
            }
        }

        private String portField; 


		/// <summary>
        /// retry property
        /// </summary>
        [XmlAttribute("retry")]

        public Int16 Retry {
            get {
                return retryField;
            } 
            set {
                retryField = value;
                this.RetrySpecified = true;
                NotifyPropertyChanged("Retry");
            }
        }

        private Int16 retryField; 


		/// <summary>
        /// retrySpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean RetrySpecified {
            get {
                return retrySpecifiedField;
            } 
            set {
                retrySpecifiedField = value;
                NotifyPropertyChanged("RetrySpecified");
            }
        }

        private Boolean retrySpecifiedField; 


		/// <summary>
        /// idPub property
        /// </summary>
        [XmlAttribute("idPub")]

        public String IdPub {
            get {
                return idPubField;
            } 
            set {
                idPubField = value;
                NotifyPropertyChanged("IdPub");
            }
        }

        private String idPubField; 


		/// <summary>
        /// idSub property
        /// </summary>
        [XmlAttribute("idSub")]

        public String IdSub {
            get {
                return idSubField;
            } 
            set {
                idSubField = value;
                NotifyPropertyChanged("IdSub");
            }
        }

        private String idSubField; 


		/// <summary>
        /// retCode property
        /// </summary>
        [XmlAttribute("retCode")]

        public Int16 RetCode {
            get {
                return retCodeField;
            } 
            set {
                retCodeField = value;
                this.RetCodeSpecified = true;
                NotifyPropertyChanged("RetCode");
            }
        }

        private Int16 retCodeField; 


		/// <summary>
        /// retCodeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean RetCodeSpecified {
            get {
                return retCodeSpecifiedField;
            } 
            set {
                retCodeSpecifiedField = value;
                NotifyPropertyChanged("RetCodeSpecified");
            }
        }

        private Boolean retCodeSpecifiedField; 


		/// <summary>
        /// action property
        /// </summary>
        [XmlAttribute("action")]

        public SubscriptionAction Action {
            get {
                return actionField;
            } 
            set {
                actionField = value;
                NotifyPropertyChanged("Action");
            }
        }

        private SubscriptionAction actionField; 


		/// <summary>
        /// test property
        /// </summary>
        [XmlAttribute("test")]

        public Boolean Test {
            get {
                return testField;
            } 
            set {
                testField = value;
                this.TestSpecified = true;
                NotifyPropertyChanged("Test");
            }
        }

        private Boolean testField; 


		/// <summary>
        /// testSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TestSpecified {
            get {
                return testSpecifiedField;
            } 
            set {
                testSpecifiedField = value;
                NotifyPropertyChanged("TestSpecified");
            }
        }

        private Boolean testSpecifiedField; 


		/// <summary>
        /// updateInterval property
        /// </summary>
        [XmlAttribute("updateInterval")]

        public Int16 UpdateInterval {
            get {
                return updateIntervalField;
            } 
            set {
                updateIntervalField = value;
                this.UpdateIntervalSpecified = true;
                NotifyPropertyChanged("UpdateInterval");
            }
        }

        private Int16 updateIntervalField; 


		/// <summary>
        /// updateIntervalSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean UpdateIntervalSpecified {
            get {
                return updateIntervalSpecifiedField;
            } 
            set {
                updateIntervalSpecifiedField = value;
                NotifyPropertyChanged("UpdateIntervalSpecified");
            }
        }

        private Boolean updateIntervalSpecifiedField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_bhaRuns xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("bhaRuns", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_bhaRuns xsd type.")]
    public partial class BhaRunList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single bottom hole assembly run. 
        /// </summary>
		[XmlElement("bhaRun")]

        public List<BhaRun> BhaRun {
            get {
                return bhaRunField;
            } 
            set {
                bhaRunField = value;
                NotifyPropertyChanged("BhaRun");
            }
        }

        private List<BhaRun> bhaRunField; 


        /// <summary>
        /// A single bottom hole assembly run. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return BhaRun;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentInfo", Namespace="http://www.witsml.org/schemas/131")]

    [Description("A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.")]
    public partial class DocumentInfo : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// An identifier for the document. This is intended to be unique within the context of the NamingSystem.
        /// </summary>
		[XmlElement("DocumentName")]

        public NameStruct DocumentName {
            get {
                return DocumentNameField;
            } 
            set {
                DocumentNameField = value;
                NotifyPropertyChanged("DocumentName");
            }
        }

        private NameStruct DocumentNameField; 


        /// <summary>
        /// Zero or more alternate names for the document. These names do not need to be unique within the naming system.
        /// </summary>
		[XmlElement("DocumentAlias")]

        public List<NameStruct> DocumentAlias {
            get {
                return DocumentAliasField;
            } 
            set {
                DocumentAliasField = value;
                NotifyPropertyChanged("DocumentAlias");
            }
        }

        private List<NameStruct> DocumentAliasField; 


        /// <summary>
        /// The date of the creation of the document. This is not the same as the date that the file was created. For this date, the document is considered to be the set of information associated with this document information. For example, the document may be a seismic binset. This represents the date that the binset was created. The FileCreation information would capture the date that the XML file was created to send or exchange the binset.
        /// </summary>
		[XmlElement("DocumentDate")]

        public DateTime? DocumentDate {
            get {
                return DocumentDateField;
            } 
            set {
                DocumentDateField = value;
                this.DocumentDateSpecified = true;
                NotifyPropertyChanged("DocumentDate");
            }
        }

        private DateTime? DocumentDateField; 


		/// <summary>
        /// DocumentDateSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DocumentDateSpecified {
            get {
                return DocumentDateSpecifiedField;
            } 
            set {
                DocumentDateSpecifiedField = value;
                NotifyPropertyChanged("DocumentDateSpecified");
            }
        }

        private Boolean DocumentDateSpecifiedField; 


        /// <summary>
        /// A document class. Examples of classes would be a metadata classification or a set of keywords. 
        /// </summary>
		[XmlElement("documentClass")]

        public List<NameStruct> DocumentClass {
            get {
                return documentClassField;
            } 
            set {
                documentClassField = value;
                NotifyPropertyChanged("DocumentClass");
            }
        }

        private List<NameStruct> documentClassField; 


        /// <summary>
        /// The information about the creation of the exchange file. This is not about the creation of the data within the file, but the creation of the file itself.
        /// </summary>
		[XmlElement("FileCreationInformation")]

        public FileCreationType FileCreationInformation {
            get {
                return FileCreationInformationField;
            } 
            set {
                FileCreationInformationField = value;
                NotifyPropertyChanged("FileCreationInformation");
            }
        }

        private FileCreationType FileCreationInformationField; 


        /// <summary>
        /// Information about the security to be applied to this file. More than one classification can be given.
        /// </summary>
		[XmlElement("SecurityInformation")]

        public List<SecurityInfoType> SecurityInformation {
            get {
                return SecurityInformationField;
            } 
            set {
                SecurityInformationField = value;
                NotifyPropertyChanged("SecurityInformation");
            }
        }

        private List<SecurityInfoType> SecurityInformationField; 


        /// <summary>
        /// A free-form string that allows a disclaimer to accompany the information.
        /// </summary>
		[XmlElement("Disclaimer")]

        public String Disclaimer {
            get {
                return DisclaimerField;
            } 
            set {
                DisclaimerField = value;
                NotifyPropertyChanged("Disclaimer");
            }
        }

        private String DisclaimerField; 


        /// <summary>
        /// A collection of events that can document the history of the data.
        /// </summary>
		[XmlArrayItem("Event")]
        [XmlArray("AuditTrail")]

        public List<EventType> AuditTrail {
            get {
                return AuditTrailField;
            } 
            set {
                AuditTrailField = value;
                NotifyPropertyChanged("AuditTrail");
            }
        }

        private List<EventType> AuditTrailField; 


        /// <summary>
        /// The owner of the data.
        /// </summary>
		[XmlElement("Owner")]

        public String Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String OwnerField; 


        /// <summary>
        /// An optional comment about the document.
        /// </summary>
		[XmlElement("Comment")]

        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the nameStruct xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="nameStruct", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the nameStruct xsd type.")]
    public partial class NameStruct : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the NameStruct class.
        /// </summary>
        public NameStruct() {}

        /// <summary>
        /// Initializes a new instance of the NameStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public NameStruct(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


		/// <summary>
        /// The naming system within the name is (hopefully) unique.
        /// </summary>
        [XmlAttribute("namingSystem")]

        public String NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private String namingSystemField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the fileCreationType xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="fileCreationType", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the fileCreationType xsd type.")]
    public partial class FileCreationType : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The date and time that the file was created.
        /// </summary>
		[XmlElement("FileCreationDate")]

        public DateTime? FileCreationDate {
            get {
                return FileCreationDateField;
            } 
            set {
                FileCreationDateField = value;
                NotifyPropertyChanged("FileCreationDate");
            }
        }

        private DateTime? FileCreationDateField; 


        /// <summary>
        /// If appropriate, the software that created the file. This is a free form string, and may include whatever information is deemed relevant.
        /// </summary>
		[XmlElement("SoftwareName")]

        public String SoftwareName {
            get {
                return SoftwareNameField;
            } 
            set {
                SoftwareNameField = value;
                NotifyPropertyChanged("SoftwareName");
            }
        }

        private String SoftwareNameField; 


        /// <summary>
        /// The person or business associate that created the file.
        /// </summary>
		[XmlElement("FileCreator")]

        public String FileCreator {
            get {
                return FileCreatorField;
            } 
            set {
                FileCreatorField = value;
                NotifyPropertyChanged("FileCreator");
            }
        }

        private String FileCreatorField; 


        /// <summary>
        /// Any comment that would be useful to further explain the creation of this instance document.
        /// </summary>
		[XmlElement("Comment")]

        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the securityInfoType xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="securityInfoType", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the securityInfoType xsd type.")]
    public partial class SecurityInfoType : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The security class in which this document is classified. Examples would be confidential, partner confidential, tight. The meaning of the class is determined by the System in which it is defined.
        /// </summary>
		[XmlElement("Class")]

        public String Class {
            get {
                return ClassField;
            } 
            set {
                ClassField = value;
                NotifyPropertyChanged("Class");
            }
        }

        private String ClassField; 


        /// <summary>
        /// The security classification system. This gives context to the meaning of the Class value.
        /// </summary>
		[XmlElement("System")]

        public String System {
            get {
                return SystemField;
            } 
            set {
                SystemField = value;
                NotifyPropertyChanged("System");
            }
        }

        private String SystemField; 


        /// <summary>
        /// The date on which this security class is no longer applicable.
        /// </summary>
		[XmlElement("EndDate")]

        public DateTime? EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private DateTime? EndDateField; 


		/// <summary>
        /// EndDateSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean EndDateSpecified {
            get {
                return EndDateSpecifiedField;
            } 
            set {
                EndDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private Boolean EndDateSpecifiedField; 


        /// <summary>
        /// A general comment to further define the security class.
        /// </summary>
		[XmlElement("Comment")]

        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the eventType xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="eventType", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the eventType xsd type.")]
    public partial class EventType : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The date on which the event took place.
        /// </summary>
		[XmlElement("EventDate")]

        public DateTime? EventDate {
            get {
                return EventDateField;
            } 
            set {
                EventDateField = value;
                NotifyPropertyChanged("EventDate");
            }
        }

        private DateTime? EventDateField; 


        /// <summary>
        /// The party responsible for the event.
        /// </summary>
		[XmlElement("ResponsibleParty")]

        public String ResponsibleParty {
            get {
                return ResponsiblePartyField;
            } 
            set {
                ResponsiblePartyField = value;
                NotifyPropertyChanged("ResponsibleParty");
            }
        }

        private String ResponsiblePartyField; 


        /// <summary>
        /// A free form comment that can further define the event that occurred.
        /// </summary>
		[XmlElement("Comment")]

        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// The non-contextual content of a WITSML bottom hole assembly run object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_bhaRun", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML bottom hole assembly run object.")]
    public partial class BhaRun : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the bottom hole assembly. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the run. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// This represents a foreign key to the tubular (assembly) that was utilized in this run.
        /// </summary>
		[XmlElement("tubular")]

        public RefNameString Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private RefNameString tubularField; 


        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
		[XmlElement("dTimStart")]

        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? dTimStartField; 


		/// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private Boolean dTimStartSpecifiedField; 


        /// <summary>
        /// Date and time that activities stopped. 
        /// </summary>
		[XmlElement("dTimStop")]

        public DateTime? DateTimeStop {
            get {
                return dTimStopField;
            } 
            set {
                dTimStopField = value;
                this.DateTimeStopSpecified = true;
                NotifyPropertyChanged("DateTimeStop");
            }
        }

        private DateTime? dTimStopField; 


		/// <summary>
        /// dTimStopSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeStopSpecified {
            get {
                return dTimStopSpecifiedField;
            } 
            set {
                dTimStopSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStopSpecified");
            }
        }

        private Boolean dTimStopSpecifiedField; 


        /// <summary>
        /// Start on bottom - date and time. 
        /// </summary>
		[XmlElement("dTimStartDrilling")]

        public DateTime? DateTimeStartDrilling {
            get {
                return dTimStartDrillingField;
            } 
            set {
                dTimStartDrillingField = value;
                this.DateTimeStartDrillingSpecified = true;
                NotifyPropertyChanged("DateTimeStartDrilling");
            }
        }

        private DateTime? dTimStartDrillingField; 


		/// <summary>
        /// dTimStartDrillingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeStartDrillingSpecified {
            get {
                return dTimStartDrillingSpecifiedField;
            } 
            set {
                dTimStartDrillingSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartDrillingSpecified");
            }
        }

        private Boolean dTimStartDrillingSpecifiedField; 


        /// <summary>
        /// Start off bottom - date and time. 
        /// </summary>
		[XmlElement("dTimStopDrilling")]

        public DateTime? DateTimeStopDrilling {
            get {
                return dTimStopDrillingField;
            } 
            set {
                dTimStopDrillingField = value;
                this.DateTimeStopDrillingSpecified = true;
                NotifyPropertyChanged("DateTimeStopDrilling");
            }
        }

        private DateTime? dTimStopDrillingField; 


		/// <summary>
        /// dTimStopDrillingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeStopDrillingSpecified {
            get {
                return dTimStopDrillingSpecifiedField;
            } 
            set {
                dTimStopDrillingSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStopDrillingSpecified");
            }
        }

        private Boolean dTimStopDrillingSpecifiedField; 


        /// <summary>
        /// Planned dogleg severity. 
        /// </summary>
		[XmlElement("planDogleg")]

        public AnglePerLengthMeasure PlanDogleg {
            get {
                return planDoglegField;
            } 
            set {
                planDoglegField = value;
                NotifyPropertyChanged("PlanDogleg");
            }
        }

        private AnglePerLengthMeasure planDoglegField; 


        /// <summary>
        /// Actual dogleg severity. 
        /// </summary>
		[XmlElement("actDogleg")]

        public AnglePerLengthMeasure ActDogleg {
            get {
                return actDoglegField;
            } 
            set {
                actDoglegField = value;
                NotifyPropertyChanged("ActDogleg");
            }
        }

        private AnglePerLengthMeasure actDoglegField; 


        /// <summary>
        /// Actual dogleg severity - Maximum. 
        /// </summary>
		[XmlElement("actDoglegMx")]

        public AnglePerLengthMeasure ActDoglegMax {
            get {
                return actDoglegMxField;
            } 
            set {
                actDoglegMxField = value;
                NotifyPropertyChanged("ActDoglegMax");
            }
        }

        private AnglePerLengthMeasure actDoglegMxField; 


        /// <summary>
        /// Bottom hole assembly status.
        /// </summary>
		[XmlElement("statusBha")]

        public BhaStatus? StatusBha {
            get {
                return statusBhaField;
            } 
            set {
                statusBhaField = value;
                this.StatusBhaSpecified = true;
                NotifyPropertyChanged("StatusBha");
            }
        }

        private BhaStatus? statusBhaField; 


		/// <summary>
        /// statusBhaSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean StatusBhaSpecified {
            get {
                return statusBhaSpecifiedField;
            } 
            set {
                statusBhaSpecifiedField = value;
                NotifyPropertyChanged("StatusBhaSpecified");
            }
        }

        private Boolean statusBhaSpecifiedField; 


        /// <summary>
        /// Bit run number. 
        /// </summary>
		[XmlElement("numBitRun")]

        public String NumBitRun {
            get {
                return numBitRunField;
            } 
            set {
                numBitRunField = value;
                NotifyPropertyChanged("NumBitRun");
            }
        }

        private String numBitRunField; 


        /// <summary>
        /// The BHA (drilling string) run number. 
        /// </summary>
		[XmlElement("numStringRun")]

        public Int16? NumStringRun {
            get {
                return numStringRunField;
            } 
            set {
                numStringRunField = value;
                this.NumStringRunSpecified = true;
                NotifyPropertyChanged("NumStringRun");
            }
        }

        private Int16? numStringRunField; 


		/// <summary>
        /// numStringRunSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumStringRunSpecified {
            get {
                return numStringRunSpecifiedField;
            } 
            set {
                numStringRunSpecifiedField = value;
                NotifyPropertyChanged("NumStringRunSpecified");
            }
        }

        private Boolean numStringRunSpecifiedField; 


        /// <summary>
        /// Reason for trip. 
        /// </summary>
		[XmlElement("reasonTrip")]

        public String ReasonTrip {
            get {
                return reasonTripField;
            } 
            set {
                reasonTripField = value;
                NotifyPropertyChanged("ReasonTrip");
            }
        }

        private String reasonTripField; 


        /// <summary>
        /// Objective of bottom hole assembly. 
        /// </summary>
		[XmlElement("objectiveBha")]

        public String ObjectiveBha {
            get {
                return objectiveBhaField;
            } 
            set {
                objectiveBhaField = value;
                NotifyPropertyChanged("ObjectiveBha");
            }
        }

        private String objectiveBhaField; 


        /// <summary>
        /// Drilling parameters. 
        /// </summary>
		[XmlElement("drillingParams")]

        public DrillingParams DrillingParams {
            get {
                return drillingParamsField;
            } 
            set {
                drillingParamsField = value;
                NotifyPropertyChanged("DrillingParams");
            }
        }

        private DrillingParams drillingParamsField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the refNameString xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refNameString", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the refNameString xsd type.")]
    public partial class RefNameString : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RefNameString class.
        /// </summary>
        public RefNameString() {}

        /// <summary>
        /// Initializes a new instance of the RefNameString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public RefNameString(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the node referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
        [XmlAttribute("uidRef")]

        public String UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private String uidRefField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the abstractMeasure xsd type.
    /// </summary>

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaPerAreaMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AccelerationLinearMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassConcentrationMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellVerticalDepthCoord))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasuredDepthCoord))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RatioGenericMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GenericMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasurePercent))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(YAxisAzimuth))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TemperatureSlopeMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneralMeasureType))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeFlowRateMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VelocityMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermodynamicTemperatureMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecificVolumeMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelativePowerMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PressureMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PowerMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaneAngleMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PerLengthMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MomentOfForceMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassPerLengthMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellElevationCoord))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MagneticInductionMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MagneticFieldStrengthMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthPerLengthMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IlluminanceMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrequencyMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForcePerVolumeMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForcePerLengthMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForceMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentPerMassMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EnergyPerAreaMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectricPotentialMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectricCurrentMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DynamicViscosityMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DimensionlessMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DensityMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnglePerTimeMeasure))]

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnglePerLengthMeasure))]

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="abstractMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the abstractMeasure xsd type.")]
    public abstract partial class AbstractMeasure : Object , INotifyPropertyChanged
    {


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the anglePerLengthMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="anglePerLengthMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the anglePerLengthMeasure xsd type.")]
    public partial class AnglePerLengthMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AnglePerLengthMeasure class.
        /// </summary>
        public AnglePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AnglePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AnglePerLengthMeasure(Double value, AnglePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public AnglePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AnglePerLengthUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the wellElevationCoord xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellElevationCoord", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the wellElevationCoord xsd type.")]
    public partial class WellElevationCoord : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        public WellElevationCoord() {}

        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WellElevationCoord(Double value, WellVerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// The unit of measure of the quantity value. If not given then the default unit of measure of the explicitly or implicitly given datum must be assumed.
        /// </summary>
        [XmlAttribute("uom")]

        public WellVerticalCoordinateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private WellVerticalCoordinateUom uomField; 


		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
        [XmlAttribute("datum")]

        public String Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private String datumField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the wellVerticalDepthCoord xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellVerticalDepthCoord", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the wellVerticalDepthCoord xsd type.")]
    public partial class WellVerticalDepthCoord : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellVerticalDepthCoord class.
        /// </summary>
        public WellVerticalDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the WellVerticalDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WellVerticalDepthCoord(Double value, WellVerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// The unit of measure of the quantity value.
        /// </summary>
        [XmlAttribute("uom")]

        public WellVerticalCoordinateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private WellVerticalCoordinateUom uomField; 


		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
        [XmlAttribute("datum")]

        public String Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private String datumField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the measuredDepthCoord xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="measuredDepthCoord", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the measuredDepthCoord xsd type.")]
    public partial class MeasuredDepthCoord : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        public MeasuredDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasuredDepthCoord(Double value, MeasuredDepthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// The unit of measure of the quantity value.
        /// </summary>
        [XmlAttribute("uom")]

        public MeasuredDepthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MeasuredDepthUom uomField; 


		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. This value is assumed to match the uid value in a WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
        [XmlAttribute("datum")]

        public String Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private String datumField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the ratioGenericMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ratioGenericMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the ratioGenericMeasure xsd type.")]
    public partial class RatioGenericMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RatioGenericMeasure class.
        /// </summary>
        public RatioGenericMeasure() {}

        /// <summary>
        /// Initializes a new instance of the RatioGenericMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public RatioGenericMeasure(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 


		/// <summary>
        /// numerator property
        /// </summary>
        [XmlAttribute("numerator")]

        public Double Numerator {
            get {
                return numeratorField;
            } 
            set {
                numeratorField = value;
                this.NumeratorSpecified = true;
                NotifyPropertyChanged("Numerator");
            }
        }

        private Double numeratorField; 


		/// <summary>
        /// numeratorSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumeratorSpecified {
            get {
                return numeratorSpecifiedField;
            } 
            set {
                numeratorSpecifiedField = value;
                NotifyPropertyChanged("NumeratorSpecified");
            }
        }

        private Boolean numeratorSpecifiedField; 


		/// <summary>
        /// denominator property
        /// </summary>
        [XmlAttribute("denominator")]

        public Double Denominator {
            get {
                return denominatorField;
            } 
            set {
                denominatorField = value;
                this.DenominatorSpecified = true;
                NotifyPropertyChanged("Denominator");
            }
        }

        private Double denominatorField; 


		/// <summary>
        /// denominatorSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DenominatorSpecified {
            get {
                return denominatorSpecifiedField;
            } 
            set {
                denominatorSpecifiedField = value;
                NotifyPropertyChanged("DenominatorSpecified");
            }
        }

        private Boolean denominatorSpecifiedField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the genericMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="genericMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the genericMeasure xsd type.")]
    public partial class GenericMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the GenericMeasure class.
        /// </summary>
        public GenericMeasure() {}

        /// <summary>
        /// Initializes a new instance of the GenericMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public GenericMeasure(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// The unit of measure for the quantity. The uom is mandatory unless the value represents a unitless quantity.
        /// </summary>
        [XmlAttribute("uom")]

        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the volumePerVolumeMeasurePercent xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasurePercent", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the volumePerVolumeMeasurePercent xsd type.")]
    public partial class VolumePerVolumeMeasurePercent : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasurePercent class.
        /// </summary>
        public VolumePerVolumeMeasurePercent() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasurePercent class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasurePercent(Double value, PercentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public PercentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PercentUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the yAxisAzimuth xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="yAxisAzimuth", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the yAxisAzimuth xsd type.")]
    public partial class YAxisAzimuth : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the YAxisAzimuth class.
        /// </summary>
        public YAxisAzimuth() {}

        /// <summary>
        /// Initializes a new instance of the YAxisAzimuth class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public YAxisAzimuth(Double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// The unit of measure of the azimuth value.
        /// </summary>
        [XmlAttribute("uom")]

        public PlaneAngleUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PlaneAngleUom uomField; 


		/// <summary>
        /// Specifies the direction to be considered North for the y axis.
        /// </summary>
        [XmlAttribute("northDirection")]

        public AziRef NorthDirection {
            get {
                return northDirectionField;
            } 
            set {
                northDirectionField = value;
                this.NorthDirectionSpecified = true;
                NotifyPropertyChanged("NorthDirection");
            }
        }

        private AziRef northDirectionField; 


		/// <summary>
        /// northDirectionSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NorthDirectionSpecified {
            get {
                return northDirectionSpecifiedField;
            } 
            set {
                northDirectionSpecifiedField = value;
                NotifyPropertyChanged("NorthDirectionSpecified");
            }
        }

        private Boolean northDirectionSpecifiedField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the temperatureSlopeMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="temperatureSlopeMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the temperatureSlopeMeasure xsd type.")]
    public partial class TemperatureSlopeMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TemperatureSlopeMeasure class.
        /// </summary>
        public TemperatureSlopeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the TemperatureSlopeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public TemperatureSlopeMeasure(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the generalMeasureType xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="generalMeasureType", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the generalMeasureType xsd type.")]
    public partial class GeneralMeasureType : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the GeneralMeasureType class.
        /// </summary>
        public GeneralMeasureType() {}

        /// <summary>
        /// Initializes a new instance of the GeneralMeasureType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public GeneralMeasureType(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the volumePerVolumeMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the volumePerVolumeMeasure xsd type.")]
    public partial class VolumePerVolumeMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        public VolumePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasure(Double value, VolumePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public VolumePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerVolumeUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the volumeFlowRateMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeFlowRateMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the volumeFlowRateMeasure xsd type.")]
    public partial class VolumeFlowRateMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeFlowRateMeasure class.
        /// </summary>
        public VolumeFlowRateMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeFlowRateMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeFlowRateMeasure(Double value, VolumeFlowRateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public VolumeFlowRateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeFlowRateUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the volumeMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the volumeMeasure xsd type.")]
    public partial class VolumeMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        public VolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeMeasure(Double value, VolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public VolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the velocityMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="velocityMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the velocityMeasure xsd type.")]
    public partial class VelocityMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VelocityMeasure class.
        /// </summary>
        public VelocityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VelocityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VelocityMeasure(Double value, VelocityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public VelocityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VelocityUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the timeMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timeMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the timeMeasure xsd type.")]
    public partial class TimeMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        public TimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public TimeMeasure(Double value, TimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public TimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private TimeUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the thermodynamicTemperatureMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermodynamicTemperatureMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the thermodynamicTemperatureMeasure xsd type.")]
    public partial class ThermodynamicTemperatureMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        public ThermodynamicTemperatureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermodynamicTemperatureMeasure(Double value, ThermodynamicTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public ThermodynamicTemperatureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermodynamicTemperatureUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the specificVolumeMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="specificVolumeMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the specificVolumeMeasure xsd type.")]
    public partial class SpecificVolumeMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the SpecificVolumeMeasure class.
        /// </summary>
        public SpecificVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the SpecificVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public SpecificVolumeMeasure(Double value, SpecificVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public SpecificVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private SpecificVolumeUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the relativePowerMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="relativePowerMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the relativePowerMeasure xsd type.")]
    public partial class RelativePowerMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RelativePowerMeasure class.
        /// </summary>
        public RelativePowerMeasure() {}

        /// <summary>
        /// Initializes a new instance of the RelativePowerMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public RelativePowerMeasure(Double value, RelativePowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public RelativePowerUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private RelativePowerUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the pressureMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="pressureMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the pressureMeasure xsd type.")]
    public partial class PressureMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        public PressureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PressureMeasure(Double value, PressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public PressureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PressureUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the powerMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="powerMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the powerMeasure xsd type.")]
    public partial class PowerMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PowerMeasure class.
        /// </summary>
        public PowerMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PowerMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PowerMeasure(Double value, PowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public PowerUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PowerUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the planeAngleMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="planeAngleMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the planeAngleMeasure xsd type.")]
    public partial class PlaneAngleMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        public PlaneAngleMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PlaneAngleMeasure(Double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public PlaneAngleUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PlaneAngleUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the perLengthMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="perLengthMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the perLengthMeasure xsd type.")]
    public partial class PerLengthMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PerLengthMeasure class.
        /// </summary>
        public PerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PerLengthMeasure(Double value, PerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public PerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PerLengthUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the momentOfForceMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="momentOfForceMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the momentOfForceMeasure xsd type.")]
    public partial class MomentOfForceMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MomentOfForceMeasure class.
        /// </summary>
        public MomentOfForceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MomentOfForceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MomentOfForceMeasure(Double value, MomentOfForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public MomentOfForceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MomentOfForceUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the massPerLengthMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massPerLengthMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the massPerLengthMeasure xsd type.")]
    public partial class MassPerLengthMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerLengthMeasure class.
        /// </summary>
        public MassPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerLengthMeasure(Double value, MassPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public MassPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerLengthUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the massMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the massMeasure xsd type.")]
    public partial class MassMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        public MassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassMeasure(Double value, MassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public MassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the massConcentrationMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massConcentrationMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the massConcentrationMeasure xsd type.")]
    public partial class MassConcentrationMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassConcentrationMeasure class.
        /// </summary>
        public MassConcentrationMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassConcentrationMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassConcentrationMeasure(Double value, MassConcentrationUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public MassConcentrationUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassConcentrationUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the magneticInductionMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="magneticInductionMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the magneticInductionMeasure xsd type.")]
    public partial class MagneticInductionMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MagneticInductionMeasure class.
        /// </summary>
        public MagneticInductionMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MagneticInductionMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MagneticInductionMeasure(Double value, MagneticInductionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public MagneticInductionUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MagneticInductionUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the magneticFieldStrengthMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="magneticFieldStrengthMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the magneticFieldStrengthMeasure xsd type.")]
    public partial class MagneticFieldStrengthMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MagneticFieldStrengthMeasure class.
        /// </summary>
        public MagneticFieldStrengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MagneticFieldStrengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MagneticFieldStrengthMeasure(Double value, MagneticFieldStrengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public MagneticFieldStrengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MagneticFieldStrengthUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the lengthPerLengthMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthPerLengthMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the lengthPerLengthMeasure xsd type.")]
    public partial class LengthPerLengthMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        public LengthPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthPerLengthMeasure(Double value, LengthPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public LengthPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthPerLengthUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the lengthMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the lengthMeasure xsd type.")]
    public partial class LengthMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        public LengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthMeasure(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the illuminanceMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="illuminanceMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the illuminanceMeasure xsd type.")]
    public partial class IlluminanceMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IlluminanceMeasure class.
        /// </summary>
        public IlluminanceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the IlluminanceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IlluminanceMeasure(Double value, IlluminanceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public IlluminanceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private IlluminanceUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the frequencyMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="frequencyMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the frequencyMeasure xsd type.")]
    public partial class FrequencyMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FrequencyMeasure class.
        /// </summary>
        public FrequencyMeasure() {}

        /// <summary>
        /// Initializes a new instance of the FrequencyMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public FrequencyMeasure(Double value, FrequencyUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public FrequencyUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private FrequencyUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the forcePerVolumeMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forcePerVolumeMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the forcePerVolumeMeasure xsd type.")]
    public partial class ForcePerVolumeMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasure class.
        /// </summary>
        public ForcePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerVolumeMeasure(Double value, ForcePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public ForcePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForcePerVolumeUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the forcePerLengthMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forcePerLengthMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the forcePerLengthMeasure xsd type.")]
    public partial class ForcePerLengthMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        public ForcePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerLengthMeasure(Double value, ForcePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public ForcePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForcePerLengthUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the forceMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forceMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the forceMeasure xsd type.")]
    public partial class ForceMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForceMeasure class.
        /// </summary>
        public ForceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForceMeasure(Double value, ForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public ForceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForceUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the equivalentPerMassMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="equivalentPerMassMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the equivalentPerMassMeasure xsd type.")]
    public partial class EquivalentPerMassMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EquivalentPerMassMeasure class.
        /// </summary>
        public EquivalentPerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the EquivalentPerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public EquivalentPerMassMeasure(Double value, EquivalentPerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public EquivalentPerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private EquivalentPerMassUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the energyPerAreaMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="energyPerAreaMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the energyPerAreaMeasure xsd type.")]
    public partial class EnergyPerAreaMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EnergyPerAreaMeasure class.
        /// </summary>
        public EnergyPerAreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the EnergyPerAreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public EnergyPerAreaMeasure(Double value, EnergyPerAreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public EnergyPerAreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private EnergyPerAreaUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the electricPotentialMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="electricPotentialMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the electricPotentialMeasure xsd type.")]
    public partial class ElectricPotentialMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricPotentialMeasure class.
        /// </summary>
        public ElectricPotentialMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricPotentialMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricPotentialMeasure(Double value, ElectricPotentialUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public ElectricPotentialUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricPotentialUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the electricCurrentMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="electricCurrentMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the electricCurrentMeasure xsd type.")]
    public partial class ElectricCurrentMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        public ElectricCurrentMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricCurrentMeasure(Double value, ElectricCurrentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public ElectricCurrentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricCurrentUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the dynamicViscosityMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dynamicViscosityMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the dynamicViscosityMeasure xsd type.")]
    public partial class DynamicViscosityMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        public DynamicViscosityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DynamicViscosityMeasure(Double value, DynamicViscosityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public DynamicViscosityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DynamicViscosityUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the dimensionlessMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dimensionlessMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the dimensionlessMeasure xsd type.")]
    public partial class DimensionlessMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        public DimensionlessMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DimensionlessMeasure(Double value, DimensionlessUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public DimensionlessUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DimensionlessUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the densityMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="densityMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the densityMeasure xsd type.")]
    public partial class DensityMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DensityMeasure class.
        /// </summary>
        public DensityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DensityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DensityMeasure(Double value, DensityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public DensityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DensityUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the areaPerAreaMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="areaPerAreaMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the areaPerAreaMeasure xsd type.")]
    public partial class AreaPerAreaMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaPerAreaMeasure class.
        /// </summary>
        public AreaPerAreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaPerAreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaPerAreaMeasure(Double value, AreaPerAreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public AreaPerAreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaPerAreaUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the areaMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="areaMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the areaMeasure xsd type.")]
    public partial class AreaMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        public AreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaMeasure(Double value, AreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public AreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the anglePerTimeMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="anglePerTimeMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the anglePerTimeMeasure xsd type.")]
    public partial class AnglePerTimeMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AnglePerTimeMeasure class.
        /// </summary>
        public AnglePerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AnglePerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AnglePerTimeMeasure(Double value, AnglePerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public AnglePerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AnglePerTimeUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the accelerationLinearMeasure xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="accelerationLinearMeasure", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the accelerationLinearMeasure xsd type.")]
    public partial class AccelerationLinearMeasure : AbstractMeasure , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AccelerationLinearMeasure class.
        /// </summary>
        public AccelerationLinearMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AccelerationLinearMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AccelerationLinearMeasure(Double value, AccelerationLinearUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public AccelerationLinearUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AccelerationLinearUom uomField; 




    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Bottom hole assembly drilling parameters component schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillingParams", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Bottom hole assembly drilling parameters component schema ")]
    public partial class DrillingParams : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Operating time spent by bit for run. 
        /// </summary>
		[XmlElement("eTimOpBit")]

        public TimeMeasure ETimeOperatingBit {
            get {
                return eTimOpBitField;
            } 
            set {
                eTimOpBitField = value;
                NotifyPropertyChanged("ETimeOperatingBit");
            }
        }

        private TimeMeasure eTimOpBitField; 


        /// <summary>
        /// Measured depth at start. 
        /// </summary>
		[XmlElement("mdHoleStart")]

        public MeasuredDepthCoord MDHoleStart {
            get {
                return mdHoleStartField;
            } 
            set {
                mdHoleStartField = value;
                NotifyPropertyChanged("MDHoleStart");
            }
        }

        private MeasuredDepthCoord mdHoleStartField; 


        /// <summary>
        /// Measured depth at stop. 
        /// </summary>
		[XmlElement("mdHoleStop")]

        public MeasuredDepthCoord MDHoleStop {
            get {
                return mdHoleStopField;
            } 
            set {
                mdHoleStopField = value;
                NotifyPropertyChanged("MDHoleStop");
            }
        }

        private MeasuredDepthCoord mdHoleStopField; 


        /// <summary>
        /// A pointer to the tubular assembly. 
        /// </summary>
		[XmlElement("tubular")]

        public RefNameString Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private RefNameString tubularField; 


        /// <summary>
        /// Hookload - rotating. 
        /// </summary>
		[XmlElement("hkldRot")]

        public ForceMeasure HookloadRot {
            get {
                return hkldRotField;
            } 
            set {
                hkldRotField = value;
                NotifyPropertyChanged("HookloadRot");
            }
        }

        private ForceMeasure hkldRotField; 


        /// <summary>
        /// hkldUp-hkldRot. 
        /// </summary>
		[XmlElement("overPull")]

        public ForceMeasure OverPull {
            get {
                return overPullField;
            } 
            set {
                overPullField = value;
                NotifyPropertyChanged("OverPull");
            }
        }

        private ForceMeasure overPullField; 


        /// <summary>
        /// hkldRot-hkldDown. 
        /// </summary>
		[XmlElement("slackOff")]

        public ForceMeasure SlackOff {
            get {
                return slackOffField;
            } 
            set {
                slackOffField = value;
                NotifyPropertyChanged("SlackOff");
            }
        }

        private ForceMeasure slackOffField; 


        /// <summary>
        /// Hookload - string moving up. 
        /// </summary>
		[XmlElement("hkldUp")]

        public ForceMeasure HookloadUp {
            get {
                return hkldUpField;
            } 
            set {
                hkldUpField = value;
                NotifyPropertyChanged("HookloadUp");
            }
        }

        private ForceMeasure hkldUpField; 


        /// <summary>
        /// Hookload - string moving down. 
        /// </summary>
		[XmlElement("hkldDn")]

        public ForceMeasure HookloadDown {
            get {
                return hkldDnField;
            } 
            set {
                hkldDnField = value;
                NotifyPropertyChanged("HookloadDown");
            }
        }

        private ForceMeasure hkldDnField; 


        /// <summary>
        /// Average Torque - on bottom. 
        /// </summary>
		[XmlElement("tqOnBotAv")]

        public MomentOfForceMeasure TorqueOnBotAverage {
            get {
                return tqOnBotAvField;
            } 
            set {
                tqOnBotAvField = value;
                NotifyPropertyChanged("TorqueOnBotAverage");
            }
        }

        private MomentOfForceMeasure tqOnBotAvField; 


        /// <summary>
        /// Maximum torque - on bottom. 
        /// </summary>
		[XmlElement("tqOnBotMx")]

        public MomentOfForceMeasure TorqueOnBotMax {
            get {
                return tqOnBotMxField;
            } 
            set {
                tqOnBotMxField = value;
                NotifyPropertyChanged("TorqueOnBotMax");
            }
        }

        private MomentOfForceMeasure tqOnBotMxField; 


        /// <summary>
        /// Minimum torque - on bottom. 
        /// </summary>
		[XmlElement("tqOnBotMn")]

        public MomentOfForceMeasure TorqueOnBotMin {
            get {
                return tqOnBotMnField;
            } 
            set {
                tqOnBotMnField = value;
                NotifyPropertyChanged("TorqueOnBotMin");
            }
        }

        private MomentOfForceMeasure tqOnBotMnField; 


        /// <summary>
        /// Average torque - off bottom. 
        /// </summary>
		[XmlElement("tqOffBotAv")]

        public MomentOfForceMeasure TorqueOffBotAverage {
            get {
                return tqOffBotAvField;
            } 
            set {
                tqOffBotAvField = value;
                NotifyPropertyChanged("TorqueOffBotAverage");
            }
        }

        private MomentOfForceMeasure tqOffBotAvField; 


        /// <summary>
        /// Average torque - downhole. 
        /// </summary>
		[XmlElement("tqDhAv")]

        public MomentOfForceMeasure TorqueDownholeAverage {
            get {
                return tqDhAvField;
            } 
            set {
                tqDhAvField = value;
                NotifyPropertyChanged("TorqueDownholeAverage");
            }
        }

        private MomentOfForceMeasure tqDhAvField; 


        /// <summary>
        /// Weight above jars. 
        /// </summary>
		[XmlElement("wtAboveJar")]

        public ForceMeasure WeightAboveJar {
            get {
                return wtAboveJarField;
            } 
            set {
                wtAboveJarField = value;
                NotifyPropertyChanged("WeightAboveJar");
            }
        }

        private ForceMeasure wtAboveJarField; 


        /// <summary>
        /// Weight below jars. 
        /// </summary>
		[XmlElement("wtBelowJar")]

        public ForceMeasure WeightBelowJar {
            get {
                return wtBelowJarField;
            } 
            set {
                wtBelowJarField = value;
                NotifyPropertyChanged("WeightBelowJar");
            }
        }

        private ForceMeasure wtBelowJarField; 


        /// <summary>
        /// Mud density. 
        /// </summary>
		[XmlElement("wtMud")]

        public DensityMeasure WeightMud {
            get {
                return wtMudField;
            } 
            set {
                wtMudField = value;
                NotifyPropertyChanged("WeightMud");
            }
        }

        private DensityMeasure wtMudField; 


        /// <summary>
        /// Pump flow rate. 
        /// </summary>
		[XmlElement("flowratePump")]

        public VolumeFlowRateMeasure FlowratePump {
            get {
                return flowratePumpField;
            } 
            set {
                flowratePumpField = value;
                NotifyPropertyChanged("FlowratePump");
            }
        }

        private VolumeFlowRateMeasure flowratePumpField; 


        /// <summary>
        /// Bit hydraulic. 
        /// </summary>
		[XmlElement("powBit")]

        public PowerMeasure PowBit {
            get {
                return powBitField;
            } 
            set {
                powBitField = value;
                NotifyPropertyChanged("PowBit");
            }
        }

        private PowerMeasure powBitField; 


        /// <summary>
        /// Bit nozzle average velocity. 
        /// </summary>
		[XmlElement("velNozzleAv")]

        public VelocityMeasure VelNozzleAverage {
            get {
                return velNozzleAvField;
            } 
            set {
                velNozzleAvField = value;
                NotifyPropertyChanged("VelNozzleAverage");
            }
        }

        private VelocityMeasure velNozzleAvField; 


        /// <summary>
        /// Pressure drop in bit. 
        /// </summary>
		[XmlElement("presDropBit")]

        public PressureMeasure PresDropBit {
            get {
                return presDropBitField;
            } 
            set {
                presDropBitField = value;
                NotifyPropertyChanged("PresDropBit");
            }
        }

        private PressureMeasure presDropBitField; 


        /// <summary>
        /// Time spent on hold from start of bit run. 
        /// </summary>
		[XmlElement("cTimHold")]

        public TimeMeasure CTimHold {
            get {
                return cTimHoldField;
            } 
            set {
                cTimHoldField = value;
                NotifyPropertyChanged("CTimHold");
            }
        }

        private TimeMeasure cTimHoldField; 


        /// <summary>
        /// Time spent steering from start of bit run. 
        /// </summary>
		[XmlElement("cTimSteering")]

        public TimeMeasure CTimSteering {
            get {
                return cTimSteeringField;
            } 
            set {
                cTimSteeringField = value;
                NotifyPropertyChanged("CTimSteering");
            }
        }

        private TimeMeasure cTimSteeringField; 


        /// <summary>
        /// Time spent rotary drilling from start of bit run. 
        /// </summary>
		[XmlElement("cTimDrillRot")]

        public TimeMeasure CTimDrillRot {
            get {
                return cTimDrillRotField;
            } 
            set {
                cTimDrillRotField = value;
                NotifyPropertyChanged("CTimDrillRot");
            }
        }

        private TimeMeasure cTimDrillRotField; 


        /// <summary>
        /// Time spent slide drilling from start of bit run. 
        /// </summary>
		[XmlElement("cTimDrillSlid")]

        public TimeMeasure CTimDrillSlid {
            get {
                return cTimDrillSlidField;
            } 
            set {
                cTimDrillSlidField = value;
                NotifyPropertyChanged("CTimDrillSlid");
            }
        }

        private TimeMeasure cTimDrillSlidField; 


        /// <summary>
        /// Time spent circulating from start of bit run. 
        /// </summary>
		[XmlElement("cTimCirc")]

        public TimeMeasure CTimCirc {
            get {
                return cTimCircField;
            } 
            set {
                cTimCircField = value;
                NotifyPropertyChanged("CTimCirc");
            }
        }

        private TimeMeasure cTimCircField; 


        /// <summary>
        /// Time spent reaming from start of bit run. 
        /// </summary>
		[XmlElement("cTimReam")]

        public TimeMeasure CTimReam {
            get {
                return cTimReamField;
            } 
            set {
                cTimReamField = value;
                NotifyPropertyChanged("CTimReam");
            }
        }

        private TimeMeasure cTimReamField; 


        /// <summary>
        /// Distance drilled - rotating. 
        /// </summary>
		[XmlElement("distDrillRot")]

        public LengthMeasure DistDrillRot {
            get {
                return distDrillRotField;
            } 
            set {
                distDrillRotField = value;
                NotifyPropertyChanged("DistDrillRot");
            }
        }

        private LengthMeasure distDrillRotField; 


        /// <summary>
        /// Distance drilled - sliding 
        /// </summary>
		[XmlElement("distDrillSlid")]

        public LengthMeasure DistDrillSlid {
            get {
                return distDrillSlidField;
            } 
            set {
                distDrillSlidField = value;
                NotifyPropertyChanged("DistDrillSlid");
            }
        }

        private LengthMeasure distDrillSlidField; 


        /// <summary>
        /// Distance reamed. 
        /// </summary>
		[XmlElement("distReam")]

        public LengthMeasure DistReam {
            get {
                return distReamField;
            } 
            set {
                distReamField = value;
                NotifyPropertyChanged("DistReam");
            }
        }

        private LengthMeasure distReamField; 


        /// <summary>
        /// Distance covered while holding angle with a steerable drilling assembly. 
        /// </summary>
		[XmlElement("distHold")]

        public LengthMeasure DistHold {
            get {
                return distHoldField;
            } 
            set {
                distHoldField = value;
                NotifyPropertyChanged("DistHold");
            }
        }

        private LengthMeasure distHoldField; 


        /// <summary>
        /// Distance covered while actively steering with a steerable drilling assembly. 
        /// </summary>
		[XmlElement("distSteering")]

        public LengthMeasure DistSteering {
            get {
                return distSteeringField;
            } 
            set {
                distSteeringField = value;
                NotifyPropertyChanged("DistSteering");
            }
        }

        private LengthMeasure distSteeringField; 


        /// <summary>
        /// Average turn rate (commonly in rpm) through Interval. 
        /// </summary>
		[XmlElement("rpmAv")]

        public AnglePerTimeMeasure RpmAverage {
            get {
                return rpmAvField;
            } 
            set {
                rpmAvField = value;
                NotifyPropertyChanged("RpmAverage");
            }
        }

        private AnglePerTimeMeasure rpmAvField; 


        /// <summary>
        /// Maximum turn rate (commonly in rpm). 
        /// </summary>
		[XmlElement("rpmMx")]

        public AnglePerTimeMeasure RpmMax {
            get {
                return rpmMxField;
            } 
            set {
                rpmMxField = value;
                NotifyPropertyChanged("RpmMax");
            }
        }

        private AnglePerTimeMeasure rpmMxField; 


        /// <summary>
        /// Minimum turn rate (commonly in rpm). 
        /// </summary>
		[XmlElement("rpmMn")]

        public AnglePerTimeMeasure RpmMin {
            get {
                return rpmMnField;
            } 
            set {
                rpmMnField = value;
                NotifyPropertyChanged("RpmMin");
            }
        }

        private AnglePerTimeMeasure rpmMnField; 


        /// <summary>
        /// Average turn rate (commonly in rpm) downhole. 
        /// </summary>
		[XmlElement("rpmAvDh")]

        public AnglePerTimeMeasure RpmAverageDownhole {
            get {
                return rpmAvDhField;
            } 
            set {
                rpmAvDhField = value;
                NotifyPropertyChanged("RpmAverageDownhole");
            }
        }

        private AnglePerTimeMeasure rpmAvDhField; 


        /// <summary>
        /// Average rate of penetration through Interval. 
        /// </summary>
		[XmlElement("ropAv")]

        public VelocityMeasure RopAverage {
            get {
                return ropAvField;
            } 
            set {
                ropAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private VelocityMeasure ropAvField; 


        /// <summary>
        /// Maximum rate of penetration through Interval. 
        /// </summary>
		[XmlElement("ropMx")]

        public VelocityMeasure RopMax {
            get {
                return ropMxField;
            } 
            set {
                ropMxField = value;
                NotifyPropertyChanged("RopMax");
            }
        }

        private VelocityMeasure ropMxField; 


        /// <summary>
        /// Minimum rate of penetration through Interval. 
        /// </summary>
		[XmlElement("ropMn")]

        public VelocityMeasure RopMin {
            get {
                return ropMnField;
            } 
            set {
                ropMnField = value;
                NotifyPropertyChanged("RopMin");
            }
        }

        private VelocityMeasure ropMnField; 


        /// <summary>
        /// Surface weight on bit - average through interval. 
        /// </summary>
		[XmlElement("wobAv")]

        public ForceMeasure WobAverage {
            get {
                return wobAvField;
            } 
            set {
                wobAvField = value;
                NotifyPropertyChanged("WobAverage");
            }
        }

        private ForceMeasure wobAvField; 


        /// <summary>
        /// Weight on bit - maximum. 
        /// </summary>
		[XmlElement("wobMx")]

        public ForceMeasure WobMax {
            get {
                return wobMxField;
            } 
            set {
                wobMxField = value;
                NotifyPropertyChanged("WobMax");
            }
        }

        private ForceMeasure wobMxField; 


        /// <summary>
        /// Weight on bit - minimum. 
        /// </summary>
		[XmlElement("wobMn")]

        public ForceMeasure WobMin {
            get {
                return wobMnField;
            } 
            set {
                wobMnField = value;
                NotifyPropertyChanged("WobMin");
            }
        }

        private ForceMeasure wobMnField; 


        /// <summary>
        /// Weight on bit - average downhole. 
        /// </summary>
		[XmlElement("wobAvDh")]

        public ForceMeasure WobAverageDownhole {
            get {
                return wobAvDhField;
            } 
            set {
                wobAvDhField = value;
                NotifyPropertyChanged("WobAverageDownhole");
            }
        }

        private ForceMeasure wobAvDhField; 


        /// <summary>
        /// Reason for trip. 
        /// </summary>
		[XmlElement("reasonTrip")]

        public String ReasonTrip {
            get {
                return reasonTripField;
            } 
            set {
                reasonTripField = value;
                NotifyPropertyChanged("ReasonTrip");
            }
        }

        private String reasonTripField; 


        /// <summary>
        /// Objective of bottom hole assembly. 
        /// </summary>
		[XmlElement("objectiveBha")]

        public String ObjectiveBha {
            get {
                return objectiveBhaField;
            } 
            set {
                objectiveBhaField = value;
                NotifyPropertyChanged("ObjectiveBha");
            }
        }

        private String objectiveBhaField; 


        /// <summary>
        /// Azimuth at start measured depth. 
        /// </summary>
		[XmlElement("aziTop")]

        public PlaneAngleMeasure AziTop {
            get {
                return aziTopField;
            } 
            set {
                aziTopField = value;
                NotifyPropertyChanged("AziTop");
            }
        }

        private PlaneAngleMeasure aziTopField; 


        /// <summary>
        /// Azimuth at stop measured depth. 
        /// </summary>
		[XmlElement("aziBottom")]

        public PlaneAngleMeasure AziBottom {
            get {
                return aziBottomField;
            } 
            set {
                aziBottomField = value;
                NotifyPropertyChanged("AziBottom");
            }
        }

        private PlaneAngleMeasure aziBottomField; 


        /// <summary>
        /// Inclination at start measured depth. 
        /// </summary>
		[XmlElement("inclStart")]

        public PlaneAngleMeasure InclStart {
            get {
                return inclStartField;
            } 
            set {
                inclStartField = value;
                NotifyPropertyChanged("InclStart");
            }
        }

        private PlaneAngleMeasure inclStartField; 


        /// <summary>
        /// Maximum inclination. 
        /// </summary>
		[XmlElement("inclMx")]

        public PlaneAngleMeasure InclMax {
            get {
                return inclMxField;
            } 
            set {
                inclMxField = value;
                NotifyPropertyChanged("InclMax");
            }
        }

        private PlaneAngleMeasure inclMxField; 


        /// <summary>
        /// Minimum inclination. 
        /// </summary>
		[XmlElement("inclMn")]

        public PlaneAngleMeasure InclMin {
            get {
                return inclMnField;
            } 
            set {
                inclMnField = value;
                NotifyPropertyChanged("InclMin");
            }
        }

        private PlaneAngleMeasure inclMnField; 


        /// <summary>
        /// Inclination at stop measured depth. 
        /// </summary>
		[XmlElement("inclStop")]

        public PlaneAngleMeasure InclStop {
            get {
                return inclStopField;
            } 
            set {
                inclStopField = value;
                NotifyPropertyChanged("InclStop");
            }
        }

        private PlaneAngleMeasure inclStopField; 


        /// <summary>
        /// Maximum mud temperature downhole during run. 
        /// </summary>
		[XmlElement("tempMudDhMx")]

        public ThermodynamicTemperatureMeasure TempMudDownholeMax {
            get {
                return tempMudDhMxField;
            } 
            set {
                tempMudDhMxField = value;
                NotifyPropertyChanged("TempMudDownholeMax");
            }
        }

        private ThermodynamicTemperatureMeasure tempMudDhMxField; 


        /// <summary>
        /// Average pump pressure. 
        /// </summary>
		[XmlElement("presPumpAv")]

        public PressureMeasure PresPumpAverage {
            get {
                return presPumpAvField;
            } 
            set {
                presPumpAvField = value;
                NotifyPropertyChanged("PresPumpAverage");
            }
        }

        private PressureMeasure presPumpAvField; 


        /// <summary>
        /// Flow rate at bit. 
        /// </summary>
		[XmlElement("flowrateBit")]

        public VolumeFlowRateMeasure FlowrateBit {
            get {
                return flowrateBitField;
            } 
            set {
                flowrateBitField = value;
                NotifyPropertyChanged("FlowrateBit");
            }
        }

        private VolumeFlowRateMeasure flowrateBitField; 


        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Common Data Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_commonData", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Common Data Component Schema ")]
    public partial class CommonData : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// An identifier to indicate the data originator. This identifies the server that originally created the object and thus most of the uids in the object (but not necessarily the uids of the parents). This is typically a url. 
        /// </summary>
		[XmlElement("sourceName")]

        public String SourceName {
            get {
                return sourceNameField;
            } 
            set {
                sourceNameField = value;
                NotifyPropertyChanged("SourceName");
            }
        }

        private String sourceNameField; 


        /// <summary>
        /// When the data was created at the persistent data store. 
        /// </summary>
		[XmlElement("dTimCreation")]

        public DateTime? DateTimeCreation {
            get {
                return dTimCreationField;
            } 
            set {
                dTimCreationField = value;
                this.DateTimeCreationSpecified = true;
                NotifyPropertyChanged("DateTimeCreation");
            }
        }

        private DateTime? dTimCreationField; 


		/// <summary>
        /// dTimCreationSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeCreationSpecified {
            get {
                return dTimCreationSpecifiedField;
            } 
            set {
                dTimCreationSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCreationSpecified");
            }
        }

        private Boolean dTimCreationSpecifiedField; 


        /// <summary>
        /// Last change of any element of the data at the persistent data store. The change time is not updated for a growing object while it is growing. 
        /// </summary>
		[XmlElement("dTimLastChange")]

        public DateTime? DateTimeLastChange {
            get {
                return dTimLastChangeField;
            } 
            set {
                dTimLastChangeField = value;
                this.DateTimeLastChangeSpecified = true;
                NotifyPropertyChanged("DateTimeLastChange");
            }
        }

        private DateTime? dTimLastChangeField; 


		/// <summary>
        /// dTimLastChangeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeLastChangeSpecified {
            get {
                return dTimLastChangeSpecifiedField;
            } 
            set {
                dTimLastChangeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeLastChangeSpecified");
            }
        }

        private Boolean dTimLastChangeSpecifiedField; 


        /// <summary>
        /// The item state for the data object. 
        /// </summary>
		[XmlElement("itemState")]

        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set {
                itemStateField = value;
                this.ItemStateSpecified = true;
                NotifyPropertyChanged("ItemState");
            }
        }

        private ItemState? itemStateField; 


		/// <summary>
        /// itemStateSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ItemStateSpecified {
            get {
                return itemStateSpecifiedField;
            } 
            set {
                itemStateSpecifiedField = value;
                NotifyPropertyChanged("ItemStateSpecified");
            }
        }

        private Boolean itemStateSpecifiedField; 


        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the cs_customData xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_customData", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the cs_customData xsd type.")]
    public partial class CustomData : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Any property
        /// </summary>
		[XmlElement("Any")]

        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

        private List<XmlElement> AnyField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_cementJobs xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("cementJobs", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_cementJobs xsd type.")]
    public partial class CementJobList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single cement job. 
        /// </summary>
		[XmlElement("cementJob")]

        public List<CementJob> CementJob {
            get {
                return cementJobField;
            } 
            set {
                cementJobField = value;
                NotifyPropertyChanged("CementJob");
            }
        }

        private List<CementJob> cementJobField; 


        /// <summary>
        /// A single cement job. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return CementJob;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Cement Job.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_cementJob", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Cement Job.")]
    public partial class CementJob : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the cement job. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the cement job. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Type of cement job. 
        /// </summary>
		[XmlElement("jobType")]

        public CementJobType? JobType {
            get {
                return jobTypeField;
            } 
            set {
                jobTypeField = value;
                this.JobTypeSpecified = true;
                NotifyPropertyChanged("JobType");
            }
        }

        private CementJobType? jobTypeField; 


		/// <summary>
        /// jobTypeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean JobTypeSpecified {
            get {
                return jobTypeSpecifiedField;
            } 
            set {
                jobTypeSpecifiedField = value;
                NotifyPropertyChanged("JobTypeSpecified");
            }
        }

        private Boolean jobTypeSpecifiedField; 


        /// <summary>
        /// Job configuration. 
        /// </summary>
		[XmlElement("jobConfig")]

        public String JobConfig {
            get {
                return jobConfigField;
            } 
            set {
                jobConfigField = value;
                NotifyPropertyChanged("JobConfig");
            }
        }

        private String jobConfigField; 


        /// <summary>
        /// Date and time of Cement Job. 
        /// </summary>
		[XmlElement("dTimJob")]

        public DateTime? DateTimeJob {
            get {
                return dTimJobField;
            } 
            set {
                dTimJobField = value;
                this.DateTimeJobSpecified = true;
                NotifyPropertyChanged("DateTimeJob");
            }
        }

        private DateTime? dTimJobField; 


		/// <summary>
        /// dTimJobSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeJobSpecified {
            get {
                return dTimJobSpecifiedField;
            } 
            set {
                dTimJobSpecifiedField = value;
                NotifyPropertyChanged("DateTimeJobSpecified");
            }
        }

        private Boolean dTimJobSpecifiedField; 


        /// <summary>
        /// Name for the cemented string 
        /// </summary>
		[XmlElement("nameCementedString")]

        public String NameCementedString {
            get {
                return nameCementedStringField;
            } 
            set {
                nameCementedStringField = value;
                NotifyPropertyChanged("NameCementedString");
            }
        }

        private String nameCementedStringField; 


        /// <summary>
        /// Wellbore Geometry of annulus. 
        /// </summary>
		[XmlElement("holeConfig")]

        public WellboreGeometry HoleConfig {
            get {
                return holeConfigField;
            } 
            set {
                holeConfigField = value;
                NotifyPropertyChanged("HoleConfig");
            }
        }

        private WellboreGeometry holeConfigField; 


        /// <summary>
        /// Name for the cement work string 
        /// </summary>
		[XmlElement("nameWorkString")]

        public String NameWorkString {
            get {
                return nameWorkStringField;
            } 
            set {
                nameWorkStringField = value;
                NotifyPropertyChanged("NameWorkString");
            }
        }

        private String nameWorkStringField; 


        /// <summary>
        /// Name of cementing contractor. 
        /// </summary>
		[XmlElement("contractor")]

        public String Contractor {
            get {
                return contractorField;
            } 
            set {
                contractorField = value;
                NotifyPropertyChanged("Contractor");
            }
        }

        private String contractorField; 


        /// <summary>
        /// Cementing engineer. 
        /// </summary>
		[XmlElement("cementEngr")]

        public String CementEngr {
            get {
                return cementEngrField;
            } 
            set {
                cementEngrField = value;
                NotifyPropertyChanged("CementEngr");
            }
        }

        private String cementEngrField; 


        /// <summary>
        /// Offshore job? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[XmlElement("offshoreJob")]

        public Boolean? OffshoreJob {
            get {
                return offshoreJobField;
            } 
            set {
                offshoreJobField = value;
                this.OffshoreJobSpecified = true;
                NotifyPropertyChanged("OffshoreJob");
            }
        }

        private Boolean? offshoreJobField; 


		/// <summary>
        /// offshoreJobSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean OffshoreJobSpecified {
            get {
                return offshoreJobSpecifiedField;
            } 
            set {
                offshoreJobSpecifiedField = value;
                NotifyPropertyChanged("OffshoreJobSpecified");
            }
        }

        private Boolean offshoreJobSpecifiedField; 


        /// <summary>
        /// Water depth if offshore. 
        /// </summary>
		[XmlElement("mdWater")]

        public MeasuredDepthCoord MDWater {
            get {
                return mdWaterField;
            } 
            set {
                mdWaterField = value;
                NotifyPropertyChanged("MDWater");
            }
        }

        private MeasuredDepthCoord mdWaterField; 


        /// <summary>
        /// Returns to seabed? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[XmlElement("returnsToSeabed")]

        public Boolean? ReturnsToSeabed {
            get {
                return returnsToSeabedField;
            } 
            set {
                returnsToSeabedField = value;
                this.ReturnsToSeabedSpecified = true;
                NotifyPropertyChanged("ReturnsToSeabed");
            }
        }

        private Boolean? returnsToSeabedField; 


		/// <summary>
        /// returnsToSeabedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ReturnsToSeabedSpecified {
            get {
                return returnsToSeabedSpecifiedField;
            } 
            set {
                returnsToSeabedSpecifiedField = value;
                NotifyPropertyChanged("ReturnsToSeabedSpecified");
            }
        }

        private Boolean returnsToSeabedSpecifiedField; 


        /// <summary>
        /// Pipe being reciprocated. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("reciprocating")]

        public Boolean? Reciprocating {
            get {
                return reciprocatingField;
            } 
            set {
                reciprocatingField = value;
                this.ReciprocatingSpecified = true;
                NotifyPropertyChanged("Reciprocating");
            }
        }

        private Boolean? reciprocatingField; 


		/// <summary>
        /// reciprocatingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ReciprocatingSpecified {
            get {
                return reciprocatingSpecifiedField;
            } 
            set {
                reciprocatingSpecifiedField = value;
                NotifyPropertyChanged("ReciprocatingSpecified");
            }
        }

        private Boolean reciprocatingSpecifiedField; 


        /// <summary>
        /// Duration for waiting on cement to set. 
        /// </summary>
		[XmlElement("woc")]

        public TimeMeasure Woc {
            get {
                return wocField;
            } 
            set {
                wocField = value;
                NotifyPropertyChanged("Woc");
            }
        }

        private TimeMeasure wocField; 


        /// <summary>
        /// If Plug, measured depth of top of plug. 
        /// </summary>
		[XmlElement("mdPlugTop")]

        public MeasuredDepthCoord MDPlugTop {
            get {
                return mdPlugTopField;
            } 
            set {
                mdPlugTopField = value;
                NotifyPropertyChanged("MDPlugTop");
            }
        }

        private MeasuredDepthCoord mdPlugTopField; 


        /// <summary>
        /// If Plug, measured depth of bottom of plug. 
        /// </summary>
		[XmlElement("mdPlugBot")]

        public MeasuredDepthCoord MDPlugBot {
            get {
                return mdPlugBotField;
            } 
            set {
                mdPlugBotField = value;
                NotifyPropertyChanged("MDPlugBot");
            }
        }

        private MeasuredDepthCoord mdPlugBotField; 


        /// <summary>
        /// Measured depth at bottom of hole. 
        /// </summary>
		[XmlElement("mdHole")]

        public MeasuredDepthCoord MDHole {
            get {
                return mdHoleField;
            } 
            set {
                mdHoleField = value;
                NotifyPropertyChanged("MDHole");
            }
        }

        private MeasuredDepthCoord mdHoleField; 


        /// <summary>
        /// Measured depth of previous shoe. 
        /// </summary>
		[XmlElement("mdShoe")]

        public MeasuredDepthCoord MDShoe {
            get {
                return mdShoeField;
            } 
            set {
                mdShoeField = value;
                NotifyPropertyChanged("MDShoe");
            }
        }

        private MeasuredDepthCoord mdShoeField; 


        /// <summary>
        /// True Vertical Depth of previous shoe. 
        /// </summary>
		[XmlElement("tvdShoe")]

        public WellVerticalDepthCoord TvdShoe {
            get {
                return tvdShoeField;
            } 
            set {
                tvdShoeField = value;
                NotifyPropertyChanged("TvdShoe");
            }
        }

        private WellVerticalDepthCoord tvdShoeField; 


        /// <summary>
        /// Measured depth of cement string shoe. 
        /// </summary>
		[XmlElement("mdStringSet")]

        public MeasuredDepthCoord MDStringSet {
            get {
                return mdStringSetField;
            } 
            set {
                mdStringSetField = value;
                NotifyPropertyChanged("MDStringSet");
            }
        }

        private MeasuredDepthCoord mdStringSetField; 


        /// <summary>
        /// True vertical depth of cement string shoe. 
        /// </summary>
		[XmlElement("tvdStringSet")]

        public WellVerticalDepthCoord TvdStringSet {
            get {
                return tvdStringSetField;
            } 
            set {
                tvdStringSetField = value;
                NotifyPropertyChanged("TvdStringSet");
            }
        }

        private WellVerticalDepthCoord tvdStringSetField; 


        /// <summary>
        /// Set of stages for the job (usually 1 or 2). 
        /// </summary>
		[XmlElement("cementStage")]

        public List<CementStage> CementStage {
            get {
                return cementStageField;
            } 
            set {
                cementStageField = value;
                NotifyPropertyChanged("CementStage");
            }
        }

        private List<CementStage> cementStageField; 


        /// <summary>
        /// Test results post-job. 
        /// </summary>
		[XmlElement("cementTest")]

        public CementTest CementTest {
            get {
                return cementTestField;
            } 
            set {
                cementTestField = value;
                NotifyPropertyChanged("CementTest");
            }
        }

        private CementTest cementTestField; 


        /// <summary>
        /// Plug type. 
        /// </summary>
		[XmlElement("typePlug")]

        public String TypePlug {
            get {
                return typePlugField;
            } 
            set {
                typePlugField = value;
                NotifyPropertyChanged("TypePlug");
            }
        }

        private String typePlugField; 


        /// <summary>
        /// Name for the cementing string 
        /// </summary>
		[XmlElement("nameCementString")]

        public String NameCementString {
            get {
                return nameCementStringField;
            } 
            set {
                nameCementStringField = value;
                NotifyPropertyChanged("NameCementString");
            }
        }

        private String nameCementStringField; 


        /// <summary>
        /// Date and time that cement plug was set. 
        /// </summary>
		[XmlElement("dTimPlugSet")]

        public DateTime? DateTimePlugSet {
            get {
                return dTimPlugSetField;
            } 
            set {
                dTimPlugSetField = value;
                this.DateTimePlugSetSpecified = true;
                NotifyPropertyChanged("DateTimePlugSet");
            }
        }

        private DateTime? dTimPlugSetField; 


		/// <summary>
        /// dTimPlugSetSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimePlugSetSpecified {
            get {
                return dTimPlugSetSpecifiedField;
            } 
            set {
                dTimPlugSetSpecifiedField = value;
                NotifyPropertyChanged("DateTimePlugSetSpecified");
            }
        }

        private Boolean dTimPlugSetSpecifiedField; 


        /// <summary>
        /// Cement drilled out flag. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("cementDrillOut")]

        public Boolean? CementDrillOut {
            get {
                return cementDrillOutField;
            } 
            set {
                cementDrillOutField = value;
                this.CementDrillOutSpecified = true;
                NotifyPropertyChanged("CementDrillOut");
            }
        }

        private Boolean? cementDrillOutField; 


		/// <summary>
        /// cementDrillOutSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CementDrillOutSpecified {
            get {
                return cementDrillOutSpecifiedField;
            } 
            set {
                cementDrillOutSpecifiedField = value;
                NotifyPropertyChanged("CementDrillOutSpecified");
            }
        }

        private Boolean cementDrillOutSpecifiedField; 


        /// <summary>
        /// Date and time that cement was drilled out. 
        /// </summary>
		[XmlElement("dTimCementDrillOut")]

        public DateTime? DateTimeCementDrillOut {
            get {
                return dTimCementDrillOutField;
            } 
            set {
                dTimCementDrillOutField = value;
                this.DateTimeCementDrillOutSpecified = true;
                NotifyPropertyChanged("DateTimeCementDrillOut");
            }
        }

        private DateTime? dTimCementDrillOutField; 


		/// <summary>
        /// dTimCementDrillOutSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeCementDrillOutSpecified {
            get {
                return dTimCementDrillOutSpecifiedField;
            } 
            set {
                dTimCementDrillOutSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCementDrillOutSpecified");
            }
        }

        private Boolean dTimCementDrillOutSpecifiedField; 


        /// <summary>
        /// Type of squeeze. 
        /// </summary>
		[XmlElement("typeSqueeze")]

        public String TypeSqueeze {
            get {
                return typeSqueezeField;
            } 
            set {
                typeSqueezeField = value;
                NotifyPropertyChanged("TypeSqueeze");
            }
        }

        private String typeSqueezeField; 


        /// <summary>
        /// Measured depth of squeeze. 
        /// </summary>
		[XmlElement("mdSqueeze")]

        public MeasuredDepthCoord MDSqueeze {
            get {
                return mdSqueezeField;
            } 
            set {
                mdSqueezeField = value;
                NotifyPropertyChanged("MDSqueeze");
            }
        }

        private MeasuredDepthCoord mdSqueezeField; 


        /// <summary>
        /// Date and time of squeeze. 
        /// </summary>
		[XmlElement("dTimSqueeze")]

        public DateTime? DateTimeSqueeze {
            get {
                return dTimSqueezeField;
            } 
            set {
                dTimSqueezeField = value;
                this.DateTimeSqueezeSpecified = true;
                NotifyPropertyChanged("DateTimeSqueeze");
            }
        }

        private DateTime? dTimSqueezeField; 


		/// <summary>
        /// dTimSqueezeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSqueezeSpecified {
            get {
                return dTimSqueezeSpecifiedField;
            } 
            set {
                dTimSqueezeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSqueezeSpecified");
            }
        }

        private Boolean dTimSqueezeSpecifiedField; 


        /// <summary>
        /// Tool Company. 
        /// </summary>
		[XmlElement("toolCompany")]

        public String ToolCompany {
            get {
                return toolCompanyField;
            } 
            set {
                toolCompanyField = value;
                NotifyPropertyChanged("ToolCompany");
            }
        }

        private String toolCompanyField; 


        /// <summary>
        /// Cement tool type. 
        /// </summary>
		[XmlElement("typeTool")]

        public String TypeTool {
            get {
                return typeToolField;
            } 
            set {
                typeToolField = value;
                NotifyPropertyChanged("TypeTool");
            }
        }

        private String typeToolField; 


        /// <summary>
        /// Pipe rotation start time. 
        /// </summary>
		[XmlElement("dTimPipeRotStart")]

        public DateTime? DateTimePipeRotStart {
            get {
                return dTimPipeRotStartField;
            } 
            set {
                dTimPipeRotStartField = value;
                this.DateTimePipeRotStartSpecified = true;
                NotifyPropertyChanged("DateTimePipeRotStart");
            }
        }

        private DateTime? dTimPipeRotStartField; 


		/// <summary>
        /// dTimPipeRotStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimePipeRotStartSpecified {
            get {
                return dTimPipeRotStartSpecifiedField;
            } 
            set {
                dTimPipeRotStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimePipeRotStartSpecified");
            }
        }

        private Boolean dTimPipeRotStartSpecifiedField; 


        /// <summary>
        /// Pipe rotation end time. 
        /// </summary>
		[XmlElement("dTimPipeRotEnd")]

        public DateTime? DateTimePipeRotEnd {
            get {
                return dTimPipeRotEndField;
            } 
            set {
                dTimPipeRotEndField = value;
                this.DateTimePipeRotEndSpecified = true;
                NotifyPropertyChanged("DateTimePipeRotEnd");
            }
        }

        private DateTime? dTimPipeRotEndField; 


		/// <summary>
        /// dTimPipeRotEndSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimePipeRotEndSpecified {
            get {
                return dTimPipeRotEndSpecifiedField;
            } 
            set {
                dTimPipeRotEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimePipeRotEndSpecified");
            }
        }

        private Boolean dTimPipeRotEndSpecifiedField; 


        /// <summary>
        /// Pipe rotation rate (commonly in rpm). 
        /// </summary>
		[XmlElement("rpmPipe")]

        public AnglePerTimeMeasure RpmPipe {
            get {
                return rpmPipeField;
            } 
            set {
                rpmPipeField = value;
                NotifyPropertyChanged("RpmPipe");
            }
        }

        private AnglePerTimeMeasure rpmPipeField; 


        /// <summary>
        /// Pipe rotation initial torque. 
        /// </summary>
		[XmlElement("tqInitPipeRot")]

        public MomentOfForceMeasure TorqueInitPipeRot {
            get {
                return tqInitPipeRotField;
            } 
            set {
                tqInitPipeRotField = value;
                NotifyPropertyChanged("TorqueInitPipeRot");
            }
        }

        private MomentOfForceMeasure tqInitPipeRotField; 


        /// <summary>
        /// Pipe rotation average torque. 
        /// </summary>
		[XmlElement("tqPipeAv")]

        public MomentOfForceMeasure TorquePipeAverage {
            get {
                return tqPipeAvField;
            } 
            set {
                tqPipeAvField = value;
                NotifyPropertyChanged("TorquePipeAverage");
            }
        }

        private MomentOfForceMeasure tqPipeAvField; 


        /// <summary>
        /// Pipe rotation maximum torque. 
        /// </summary>
		[XmlElement("tqPipeMx")]

        public MomentOfForceMeasure TorquePipeMax {
            get {
                return tqPipeMxField;
            } 
            set {
                tqPipeMxField = value;
                NotifyPropertyChanged("TorquePipeMax");
            }
        }

        private MomentOfForceMeasure tqPipeMxField; 


        /// <summary>
        /// Date and time at start of pipe reciprocation. 
        /// </summary>
		[XmlElement("dTimRecipStart")]

        public DateTime? DateTimeRecipStart {
            get {
                return dTimRecipStartField;
            } 
            set {
                dTimRecipStartField = value;
                this.DateTimeRecipStartSpecified = true;
                NotifyPropertyChanged("DateTimeRecipStart");
            }
        }

        private DateTime? dTimRecipStartField; 


		/// <summary>
        /// dTimRecipStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeRecipStartSpecified {
            get {
                return dTimRecipStartSpecifiedField;
            } 
            set {
                dTimRecipStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRecipStartSpecified");
            }
        }

        private Boolean dTimRecipStartSpecifiedField; 


        /// <summary>
        /// Date and time at end of pipe reciprocation. 
        /// </summary>
		[XmlElement("dTimRecipEnd")]

        public DateTime? DateTimeRecipEnd {
            get {
                return dTimRecipEndField;
            } 
            set {
                dTimRecipEndField = value;
                this.DateTimeRecipEndSpecified = true;
                NotifyPropertyChanged("DateTimeRecipEnd");
            }
        }

        private DateTime? dTimRecipEndField; 


		/// <summary>
        /// dTimRecipEndSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeRecipEndSpecified {
            get {
                return dTimRecipEndSpecifiedField;
            } 
            set {
                dTimRecipEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRecipEndSpecified");
            }
        }

        private Boolean dTimRecipEndSpecifiedField; 


        /// <summary>
        /// String up weight during reciprocation. 
        /// </summary>
		[XmlElement("overPull")]

        public ForceMeasure OverPull {
            get {
                return overPullField;
            } 
            set {
                overPullField = value;
                NotifyPropertyChanged("OverPull");
            }
        }

        private ForceMeasure overPullField; 


        /// <summary>
        /// String down weight during reciprocation. 
        /// </summary>
		[XmlElement("slackOff")]

        public ForceMeasure SlackOff {
            get {
                return slackOffField;
            } 
            set {
                slackOffField = value;
                NotifyPropertyChanged("SlackOff");
            }
        }

        private ForceMeasure slackOffField; 


        /// <summary>
        /// Pipe reciprocation RPM. 
        /// </summary>
		[XmlElement("rpmPipeRecip")]

        public AnglePerTimeMeasure RpmPipeRecip {
            get {
                return rpmPipeRecipField;
            } 
            set {
                rpmPipeRecipField = value;
                NotifyPropertyChanged("RpmPipeRecip");
            }
        }

        private AnglePerTimeMeasure rpmPipeRecipField; 


        /// <summary>
        /// Pipe reciprocation stroke length. 
        /// </summary>
		[XmlElement("lenPipeRecipStroke")]

        public LengthMeasure LenPipeRecipStroke {
            get {
                return lenPipeRecipStrokeField;
            } 
            set {
                lenPipeRecipStrokeField = value;
                NotifyPropertyChanged("LenPipeRecipStroke");
            }
        }

        private LengthMeasure lenPipeRecipStrokeField; 


        /// <summary>
        /// Coiled Tubing Used (true=CTU used). Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("coilTubing")]

        public Boolean? CoilTubing {
            get {
                return coilTubingField;
            } 
            set {
                coilTubingField = value;
                this.CoilTubingSpecified = true;
                NotifyPropertyChanged("CoilTubing");
            }
        }

        private Boolean? coilTubingField; 


		/// <summary>
        /// coilTubingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CoilTubingSpecified {
            get {
                return coilTubingSpecifiedField;
            } 
            set {
                coilTubingSpecifiedField = value;
                NotifyPropertyChanged("CoilTubingSpecified");
            }
        }

        private Boolean coilTubingSpecifiedField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Wellbore Geometry Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wbGeometry", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Wellbore Geometry Component Schema ")]
    public partial class WellboreGeometry : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Time report generated. 
        /// </summary>
		[XmlElement("dTimReport")]

        public DateTime? DateTimeReport {
            get {
                return dTimReportField;
            } 
            set {
                dTimReportField = value;
                NotifyPropertyChanged("DateTimeReport");
            }
        }

        private DateTime? dTimReportField; 


        /// <summary>
        /// Measured depth at bottom. 
        /// </summary>
		[XmlElement("mdBottom")]

        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 


        /// <summary>
        /// Air gap. 
        /// </summary>
		[XmlElement("gapAir")]

        public LengthMeasure GapAir {
            get {
                return gapAirField;
            } 
            set {
                gapAirField = value;
                NotifyPropertyChanged("GapAir");
            }
        }

        private LengthMeasure gapAirField; 


        /// <summary>
        /// Water depth. 
        /// </summary>
		[XmlElement("depthWaterMean")]

        public LengthMeasure DepthWaterMean {
            get {
                return depthWaterMeanField;
            } 
            set {
                depthWaterMeanField = value;
                NotifyPropertyChanged("DepthWaterMean");
            }
        }

        private LengthMeasure depthWaterMeanField; 


        /// <summary>
        /// Wellbore geometry section object. 
        /// </summary>
		[XmlElement("wbGeometrySection")]

        public List<WellboreGeometrySection> WellboreGeometrySection {
            get {
                return wbGeometrySectionField;
            } 
            set {
                wbGeometrySectionField = value;
                NotifyPropertyChanged("WellboreGeometrySection");
            }
        }

        private List<WellboreGeometrySection> wbGeometrySectionField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Wellbore Geometry Component Schema. This defines the "fixed" components in a wellbore. It does not define the "transient" drilling strings or the "hanging" production components. 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wbGeometrySection", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Wellbore Geometry Component Schema. This defines the fixed components in a wellbore. It does not define the transient drilling strings or the hanging production components. ")]
    public partial class WellboreGeometrySection : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Type of fixed component. 
        /// </summary>
		[XmlElement("typeHoleCasing")]

        public HoleCasingType? TypeHoleCasing {
            get {
                return typeHoleCasingField;
            } 
            set {
                typeHoleCasingField = value;
                this.TypeHoleCasingSpecified = true;
                NotifyPropertyChanged("TypeHoleCasing");
            }
        }

        private HoleCasingType? typeHoleCasingField; 


		/// <summary>
        /// typeHoleCasingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeHoleCasingSpecified {
            get {
                return typeHoleCasingSpecifiedField;
            } 
            set {
                typeHoleCasingSpecifiedField = value;
                NotifyPropertyChanged("TypeHoleCasingSpecified");
            }
        }

        private Boolean typeHoleCasingSpecifiedField; 


        /// <summary>
        /// Measured depth at Top of Interval. 
        /// </summary>
		[XmlElement("mdTop")]

        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 


        /// <summary>
        /// Measured depth at bottom of the section. 
        /// </summary>
		[XmlElement("mdBottom")]

        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 


        /// <summary>
        /// True vertical depth at top of the section. 
        /// </summary>
		[XmlElement("tvdTop")]

        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 


        /// <summary>
        /// True vertical depth at bottom of the section. 
        /// </summary>
		[XmlElement("tvdBottom")]

        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 


        /// <summary>
        /// Inner diameter. 
        /// </summary>
		[XmlElement("idSection")]

        public LengthMeasure InnerDiameterSection {
            get {
                return idSectionField;
            } 
            set {
                idSectionField = value;
                NotifyPropertyChanged("InnerDiameterSection");
            }
        }

        private LengthMeasure idSectionField; 


        /// <summary>
        /// Outer diameter - Only for casings and risers. 
        /// </summary>
		[XmlElement("odSection")]

        public LengthMeasure OuterDiameterSection {
            get {
                return odSectionField;
            } 
            set {
                odSectionField = value;
                NotifyPropertyChanged("OuterDiameterSection");
            }
        }

        private LengthMeasure odSectionField; 


        /// <summary>
        /// Weight per unit length for casing sections. 
        /// </summary>
		[XmlElement("wtPerLen")]

        public MassPerLengthMeasure WeightPerLen {
            get {
                return wtPerLenField;
            } 
            set {
                wtPerLenField = value;
                NotifyPropertyChanged("WeightPerLen");
            }
        }

        private MassPerLengthMeasure wtPerLenField; 


        /// <summary>
        /// Material grade for the tubular section. 
        /// </summary>
		[XmlElement("grade")]

        public String Grade {
            get {
                return gradeField;
            } 
            set {
                gradeField = value;
                NotifyPropertyChanged("Grade");
            }
        }

        private String gradeField; 


        /// <summary>
        /// Curved conductor? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[XmlElement("curveConductor")]

        public Boolean? CurveConductor {
            get {
                return curveConductorField;
            } 
            set {
                curveConductorField = value;
                this.CurveConductorSpecified = true;
                NotifyPropertyChanged("CurveConductor");
            }
        }

        private Boolean? curveConductorField; 


		/// <summary>
        /// curveConductorSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CurveConductorSpecified {
            get {
                return curveConductorSpecifiedField;
            } 
            set {
                curveConductorSpecifiedField = value;
                NotifyPropertyChanged("CurveConductorSpecified");
            }
        }

        private Boolean curveConductorSpecifiedField; 


        /// <summary>
        /// Maximum diameter that can pass through. 
        /// </summary>
		[XmlElement("diaDrift")]

        public LengthMeasure DiaDrift {
            get {
                return diaDriftField;
            } 
            set {
                diaDriftField = value;
                NotifyPropertyChanged("DiaDrift");
            }
        }

        private LengthMeasure diaDriftField; 


        /// <summary>
        /// Friction factor. 
        /// </summary>
		[XmlElement("factFric")]

        public Double? FactFric {
            get {
                return factFricField;
            } 
            set {
                factFricField = value;
                this.FactFricSpecified = true;
                NotifyPropertyChanged("FactFric");
            }
        }

        private Double? factFricField; 


		/// <summary>
        /// factFricSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean FactFricSpecified {
            get {
                return factFricSpecifiedField;
            } 
            set {
                factFricSpecifiedField = value;
                NotifyPropertyChanged("FactFricSpecified");
            }
        }

        private Boolean factFricSpecifiedField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Cement Stage Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementStage", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Cement Stage Component Schema ")]
    public partial class CementStage : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Stage number. 
        /// </summary>
		[XmlElement("numStage")]

        public Int16? NumStage {
            get {
                return numStageField;
            } 
            set {
                numStageField = value;
                NotifyPropertyChanged("NumStage");
            }
        }

        private Int16? numStageField; 


        /// <summary>
        /// Stage type. 
        /// </summary>
		[XmlElement("typeStage")]

        public String TypeStage {
            get {
                return typeStageField;
            } 
            set {
                typeStageField = value;
                NotifyPropertyChanged("TypeStage");
            }
        }

        private String typeStageField; 


        /// <summary>
        /// Date and time when mixing started. 
        /// </summary>
		[XmlElement("dTimMixStart")]

        public DateTime? DateTimeMixStart {
            get {
                return dTimMixStartField;
            } 
            set {
                dTimMixStartField = value;
                this.DateTimeMixStartSpecified = true;
                NotifyPropertyChanged("DateTimeMixStart");
            }
        }

        private DateTime? dTimMixStartField; 


		/// <summary>
        /// dTimMixStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeMixStartSpecified {
            get {
                return dTimMixStartSpecifiedField;
            } 
            set {
                dTimMixStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeMixStartSpecified");
            }
        }

        private Boolean dTimMixStartSpecifiedField; 


        /// <summary>
        /// Datetime at start of pumping cement. 
        /// </summary>
		[XmlElement("dTimPumpStart")]

        public DateTime? DateTimePumpStart {
            get {
                return dTimPumpStartField;
            } 
            set {
                dTimPumpStartField = value;
                this.DateTimePumpStartSpecified = true;
                NotifyPropertyChanged("DateTimePumpStart");
            }
        }

        private DateTime? dTimPumpStartField; 


		/// <summary>
        /// dTimPumpStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimePumpStartSpecified {
            get {
                return dTimPumpStartSpecifiedField;
            } 
            set {
                dTimPumpStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimePumpStartSpecified");
            }
        }

        private Boolean dTimPumpStartSpecifiedField; 


        /// <summary>
        /// Datetime at end of pumping cement. 
        /// </summary>
		[XmlElement("dTimPumpEnd")]

        public DateTime? DateTimePumpEnd {
            get {
                return dTimPumpEndField;
            } 
            set {
                dTimPumpEndField = value;
                this.DateTimePumpEndSpecified = true;
                NotifyPropertyChanged("DateTimePumpEnd");
            }
        }

        private DateTime? dTimPumpEndField; 


		/// <summary>
        /// dTimPumpEndSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimePumpEndSpecified {
            get {
                return dTimPumpEndSpecifiedField;
            } 
            set {
                dTimPumpEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimePumpEndSpecified");
            }
        }

        private Boolean dTimPumpEndSpecifiedField; 


        /// <summary>
        /// Date and time when displacing cement started. 
        /// </summary>
		[XmlElement("dTimDisplaceStart")]

        public DateTime? DateTimeDisplaceStart {
            get {
                return dTimDisplaceStartField;
            } 
            set {
                dTimDisplaceStartField = value;
                this.DateTimeDisplaceStartSpecified = true;
                NotifyPropertyChanged("DateTimeDisplaceStart");
            }
        }

        private DateTime? dTimDisplaceStartField; 


		/// <summary>
        /// dTimDisplaceStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeDisplaceStartSpecified {
            get {
                return dTimDisplaceStartSpecifiedField;
            } 
            set {
                dTimDisplaceStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeDisplaceStartSpecified");
            }
        }

        private Boolean dTimDisplaceStartSpecifiedField; 


        /// <summary>
        /// Measured depth at top of interval. 
        /// </summary>
		[XmlElement("mdTop")]

        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 


        /// <summary>
        /// Measured depth of base of cement. 
        /// </summary>
		[XmlElement("mdBottom")]

        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 


        /// <summary>
        /// Excess volume. 
        /// </summary>
		[XmlElement("volExcess")]

        public VolumeMeasure VolExcess {
            get {
                return volExcessField;
            } 
            set {
                volExcessField = value;
                NotifyPropertyChanged("VolExcess");
            }
        }

        private VolumeMeasure volExcessField; 


        /// <summary>
        /// Average displacement rate. 
        /// </summary>
		[XmlElement("flowrateDisplaceAv")]

        public VolumeFlowRateMeasure FlowrateDisplaceAverage {
            get {
                return flowrateDisplaceAvField;
            } 
            set {
                flowrateDisplaceAvField = value;
                NotifyPropertyChanged("FlowrateDisplaceAverage");
            }
        }

        private VolumeFlowRateMeasure flowrateDisplaceAvField; 


        /// <summary>
        /// Maximum displacement rate. 
        /// </summary>
		[XmlElement("flowrateDisplaceMx")]

        public VolumeFlowRateMeasure FlowrateDisplaceMax {
            get {
                return flowrateDisplaceMxField;
            } 
            set {
                flowrateDisplaceMxField = value;
                NotifyPropertyChanged("FlowrateDisplaceMax");
            }
        }

        private VolumeFlowRateMeasure flowrateDisplaceMxField; 


        /// <summary>
        /// Final displacement pressure. 
        /// </summary>
		[XmlElement("presDisplace")]

        public PressureMeasure PresDisplace {
            get {
                return presDisplaceField;
            } 
            set {
                presDisplaceField = value;
                NotifyPropertyChanged("PresDisplace");
            }
        }

        private PressureMeasure presDisplaceField; 


        /// <summary>
        /// Volume of returns. 
        /// </summary>
		[XmlElement("volReturns")]

        public VolumeMeasure VolReturns {
            get {
                return volReturnsField;
            } 
            set {
                volReturnsField = value;
                NotifyPropertyChanged("VolReturns");
            }
        }

        private VolumeMeasure volReturnsField; 


        /// <summary>
        /// Mud circulation elapsed time before the job. 
        /// </summary>
		[XmlElement("eTimMudCirculation")]

        public TimeMeasure ETimeMudCirculation {
            get {
                return eTimMudCirculationField;
            } 
            set {
                eTimMudCirculationField = value;
                NotifyPropertyChanged("ETimeMudCirculation");
            }
        }

        private TimeMeasure eTimMudCirculationField; 


        /// <summary>
        /// Rate mud circulated during stage. 
        /// </summary>
		[XmlElement("flowrateMudCirc")]

        public VolumeFlowRateMeasure FlowrateMudCirc {
            get {
                return flowrateMudCircField;
            } 
            set {
                flowrateMudCircField = value;
                NotifyPropertyChanged("FlowrateMudCirc");
            }
        }

        private VolumeFlowRateMeasure flowrateMudCircField; 


        /// <summary>
        /// Mud circulation pressure. 
        /// </summary>
		[XmlElement("presMudCirc")]

        public PressureMeasure PresMudCirc {
            get {
                return presMudCircField;
            } 
            set {
                presMudCircField = value;
                NotifyPropertyChanged("PresMudCirc");
            }
        }

        private PressureMeasure presMudCircField; 


        /// <summary>
        /// Final displacement pump rate. 
        /// </summary>
		[XmlElement("flowrateEnd")]

        public VolumeFlowRateMeasure FlowrateEnd {
            get {
                return flowrateEndField;
            } 
            set {
                flowrateEndField = value;
                NotifyPropertyChanged("FlowrateEnd");
            }
        }

        private VolumeFlowRateMeasure flowrateEndField; 


        /// <summary>
        /// Displaced Mud, washes and spacers, cements, displacement mud. 
        /// </summary>
		[XmlElement("cementingFluid")]

        public CementingFluid CementingFluid {
            get {
                return cementingFluidField;
            } 
            set {
                cementingFluidField = value;
                NotifyPropertyChanged("CementingFluid");
            }
        }

        private CementingFluid cementingFluidField; 


        /// <summary>
        /// Annular flow at the end of displacement. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("afterFlowAnn")]

        public Boolean? AfterFlowAnn {
            get {
                return afterFlowAnnField;
            } 
            set {
                afterFlowAnnField = value;
                this.AfterFlowAnnSpecified = true;
                NotifyPropertyChanged("AfterFlowAnn");
            }
        }

        private Boolean? afterFlowAnnField; 


		/// <summary>
        /// afterFlowAnnSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean AfterFlowAnnSpecified {
            get {
                return afterFlowAnnSpecifiedField;
            } 
            set {
                afterFlowAnnSpecifiedField = value;
                NotifyPropertyChanged("AfterFlowAnnSpecified");
            }
        }

        private Boolean afterFlowAnnSpecifiedField; 


        /// <summary>
        /// Squeeze objective. 
        /// </summary>
		[XmlElement("squeezeObj")]

        public String SqueezeObj {
            get {
                return squeezeObjField;
            } 
            set {
                squeezeObjField = value;
                NotifyPropertyChanged("SqueezeObj");
            }
        }

        private String squeezeObjField; 


        /// <summary>
        /// Squeeze obtained. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("squeezeObtained")]

        public Boolean? SqueezeObtained {
            get {
                return squeezeObtainedField;
            } 
            set {
                squeezeObtainedField = value;
                this.SqueezeObtainedSpecified = true;
                NotifyPropertyChanged("SqueezeObtained");
            }
        }

        private Boolean? squeezeObtainedField; 


		/// <summary>
        /// squeezeObtainedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean SqueezeObtainedSpecified {
            get {
                return squeezeObtainedSpecifiedField;
            } 
            set {
                squeezeObtainedSpecifiedField = value;
                NotifyPropertyChanged("SqueezeObtainedSpecified");
            }
        }

        private Boolean squeezeObtainedSpecifiedField; 


        /// <summary>
        /// Measured depth of string (multi-stage cement job). 
        /// </summary>
		[XmlElement("mdString")]

        public MeasuredDepthCoord MDString {
            get {
                return mdStringField;
            } 
            set {
                mdStringField = value;
                NotifyPropertyChanged("MDString");
            }
        }

        private MeasuredDepthCoord mdStringField; 


        /// <summary>
        /// Measured depth of tool (multi-stage cement job. 
        /// </summary>
		[XmlElement("mdTool")]

        public MeasuredDepthCoord MDTool {
            get {
                return mdToolField;
            } 
            set {
                mdToolField = value;
                NotifyPropertyChanged("MDTool");
            }
        }

        private MeasuredDepthCoord mdToolField; 


        /// <summary>
        /// Measured depth of CoilTubing (multi-stage cement job. 
        /// </summary>
		[XmlElement("mdCoilTbg")]

        public MeasuredDepthCoord MDCoilTbg {
            get {
                return mdCoilTbgField;
            } 
            set {
                mdCoilTbgField = value;
                NotifyPropertyChanged("MDCoilTbg");
            }
        }

        private MeasuredDepthCoord mdCoilTbgField; 


        /// <summary>
        /// Total volume inside casing. 
        /// </summary>
		[XmlElement("volCsgIn")]

        public VolumeMeasure VolCsgIn {
            get {
                return volCsgInField;
            } 
            set {
                volCsgInField = value;
                NotifyPropertyChanged("VolCsgIn");
            }
        }

        private VolumeMeasure volCsgInField; 


        /// <summary>
        /// Total volume outside casing for this stage placement. 
        /// </summary>
		[XmlElement("volCsgOut")]

        public VolumeMeasure VolCsgOut {
            get {
                return volCsgOutField;
            } 
            set {
                volCsgOutField = value;
                NotifyPropertyChanged("VolCsgOut");
            }
        }

        private VolumeMeasure volCsgOutField; 


        /// <summary>
        /// Tail pipe used? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("tailPipeUsed")]

        public Boolean? TailPipeUsed {
            get {
                return tailPipeUsedField;
            } 
            set {
                tailPipeUsedField = value;
                this.TailPipeUsedSpecified = true;
                NotifyPropertyChanged("TailPipeUsed");
            }
        }

        private Boolean? tailPipeUsedField; 


		/// <summary>
        /// tailPipeUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TailPipeUsedSpecified {
            get {
                return tailPipeUsedSpecifiedField;
            } 
            set {
                tailPipeUsedSpecifiedField = value;
                NotifyPropertyChanged("TailPipeUsedSpecified");
            }
        }

        private Boolean tailPipeUsedSpecifiedField; 


        /// <summary>
        /// Tail pipe size (diameter). 
        /// </summary>
		[XmlElement("diaTailPipe")]

        public LengthMeasure DiaTailPipe {
            get {
                return diaTailPipeField;
            } 
            set {
                diaTailPipeField = value;
                NotifyPropertyChanged("DiaTailPipe");
            }
        }

        private LengthMeasure diaTailPipeField; 


        /// <summary>
        /// Tail pipe perforated? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("tailPipePerf")]

        public Boolean? TailPipePerf {
            get {
                return tailPipePerfField;
            } 
            set {
                tailPipePerfField = value;
                this.TailPipePerfSpecified = true;
                NotifyPropertyChanged("TailPipePerf");
            }
        }

        private Boolean? tailPipePerfField; 


		/// <summary>
        /// tailPipePerfSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TailPipePerfSpecified {
            get {
                return tailPipePerfSpecifiedField;
            } 
            set {
                tailPipePerfSpecifiedField = value;
                NotifyPropertyChanged("TailPipePerfSpecified");
            }
        }

        private Boolean tailPipePerfSpecifiedField; 


        /// <summary>
        /// Tubing pressure at start of job (not coiled tubing). 
        /// </summary>
		[XmlElement("presTbgStart")]

        public PressureMeasure PresTbgStart {
            get {
                return presTbgStartField;
            } 
            set {
                presTbgStartField = value;
                NotifyPropertyChanged("PresTbgStart");
            }
        }

        private PressureMeasure presTbgStartField; 


        /// <summary>
        /// Tubing pressure at end of job. 
        /// </summary>
		[XmlElement("presTbgEnd")]

        public PressureMeasure PresTbgEnd {
            get {
                return presTbgEndField;
            } 
            set {
                presTbgEndField = value;
                NotifyPropertyChanged("PresTbgEnd");
            }
        }

        private PressureMeasure presTbgEndField; 


        /// <summary>
        /// Casing pressure at start of job. 
        /// </summary>
		[XmlElement("presCsgStart")]

        public PressureMeasure PresCsgStart {
            get {
                return presCsgStartField;
            } 
            set {
                presCsgStartField = value;
                NotifyPropertyChanged("PresCsgStart");
            }
        }

        private PressureMeasure presCsgStartField; 


        /// <summary>
        /// Casing pressure at end of job. 
        /// </summary>
		[XmlElement("presCsgEnd")]

        public PressureMeasure PresCsgEnd {
            get {
                return presCsgEndField;
            } 
            set {
                presCsgEndField = value;
                NotifyPropertyChanged("PresCsgEnd");
            }
        }

        private PressureMeasure presCsgEndField; 


        /// <summary>
        /// Constant back pressure applied while pumping the job (can be supersede by a back pressure per pumping stage) 
        /// </summary>
		[XmlElement("presBackPressure")]

        public PressureMeasure PresBackPressure {
            get {
                return presBackPressureField;
            } 
            set {
                presBackPressureField = value;
                NotifyPropertyChanged("PresBackPressure");
            }
        }

        private PressureMeasure presBackPressureField; 


        /// <summary>
        /// Pressure CTU start. 
        /// </summary>
		[XmlElement("presCoilTbgStart")]

        public PressureMeasure PresCoilTbgStart {
            get {
                return presCoilTbgStartField;
            } 
            set {
                presCoilTbgStartField = value;
                NotifyPropertyChanged("PresCoilTbgStart");
            }
        }

        private PressureMeasure presCoilTbgStartField; 


        /// <summary>
        /// Pressure CTU end 
        /// </summary>
		[XmlElement("presCoilTbgEnd")]

        public PressureMeasure PresCoilTbgEnd {
            get {
                return presCoilTbgEndField;
            } 
            set {
                presCoilTbgEndField = value;
                NotifyPropertyChanged("PresCoilTbgEnd");
            }
        }

        private PressureMeasure presCoilTbgEndField; 


        /// <summary>
        /// Breakdown pressure. 
        /// </summary>
		[XmlElement("presBreakDown")]

        public PressureMeasure PresBreakDown {
            get {
                return presBreakDownField;
            } 
            set {
                presBreakDownField = value;
                NotifyPropertyChanged("PresBreakDown");
            }
        }

        private PressureMeasure presBreakDownField; 


        /// <summary>
        /// Breakdown rate. 
        /// </summary>
		[XmlElement("flowrateBreakDown")]

        public VolumeFlowRateMeasure FlowrateBreakDown {
            get {
                return flowrateBreakDownField;
            } 
            set {
                flowrateBreakDownField = value;
                NotifyPropertyChanged("FlowrateBreakDown");
            }
        }

        private VolumeFlowRateMeasure flowrateBreakDownField; 


        /// <summary>
        /// Squeeze pressure average. 
        /// </summary>
		[XmlElement("presSqueezeAv")]

        public PressureMeasure PresSqueezeAverage {
            get {
                return presSqueezeAvField;
            } 
            set {
                presSqueezeAvField = value;
                NotifyPropertyChanged("PresSqueezeAverage");
            }
        }

        private PressureMeasure presSqueezeAvField; 


        /// <summary>
        /// Squeeze pressure final. 
        /// </summary>
		[XmlElement("presSqueezeEnd")]

        public PressureMeasure PresSqueezeEnd {
            get {
                return presSqueezeEndField;
            } 
            set {
                presSqueezeEndField = value;
                NotifyPropertyChanged("PresSqueezeEnd");
            }
        }

        private PressureMeasure presSqueezeEndField; 


        /// <summary>
        /// Squeeze pressure held. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("presSqueezeHeld")]

        public Boolean? PresSqueezeHeld {
            get {
                return presSqueezeHeldField;
            } 
            set {
                presSqueezeHeldField = value;
                this.PresSqueezeHeldSpecified = true;
                NotifyPropertyChanged("PresSqueezeHeld");
            }
        }

        private Boolean? presSqueezeHeldField; 


		/// <summary>
        /// presSqueezeHeldSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PresSqueezeHeldSpecified {
            get {
                return presSqueezeHeldSpecifiedField;
            } 
            set {
                presSqueezeHeldSpecifiedField = value;
                NotifyPropertyChanged("PresSqueezeHeldSpecified");
            }
        }

        private Boolean presSqueezeHeldSpecifiedField; 


        /// <summary>
        /// Squeeze pressure left on pipe. 
        /// </summary>
		[XmlElement("presSqueeze")]

        public PressureMeasure PresSqueeze {
            get {
                return presSqueezeField;
            } 
            set {
                presSqueezeField = value;
                NotifyPropertyChanged("PresSqueeze");
            }
        }

        private PressureMeasure presSqueezeField; 


        /// <summary>
        /// Time pressure held. 
        /// </summary>
		[XmlElement("eTimPresHeld")]

        public TimeMeasure ETimePresHeld {
            get {
                return eTimPresHeldField;
            } 
            set {
                eTimPresHeldField = value;
                NotifyPropertyChanged("ETimePresHeld");
            }
        }

        private TimeMeasure eTimPresHeldField; 


        /// <summary>
        /// Squeeze job average rate. 
        /// </summary>
		[XmlElement("flowrateSqueezeAv")]

        public VolumeFlowRateMeasure FlowrateSqueezeAverage {
            get {
                return flowrateSqueezeAvField;
            } 
            set {
                flowrateSqueezeAvField = value;
                NotifyPropertyChanged("FlowrateSqueezeAverage");
            }
        }

        private VolumeFlowRateMeasure flowrateSqueezeAvField; 


        /// <summary>
        /// Squeeze job maximum rate. 
        /// </summary>
		[XmlElement("flowrateSqueezeMx")]

        public VolumeFlowRateMeasure FlowrateSqueezeMax {
            get {
                return flowrateSqueezeMxField;
            } 
            set {
                flowrateSqueezeMxField = value;
                NotifyPropertyChanged("FlowrateSqueezeMax");
            }
        }

        private VolumeFlowRateMeasure flowrateSqueezeMxField; 


        /// <summary>
        /// Pump rate at start of job. 
        /// </summary>
		[XmlElement("flowratePumpStart")]

        public VolumeFlowRateMeasure FlowratePumpStart {
            get {
                return flowratePumpStartField;
            } 
            set {
                flowratePumpStartField = value;
                NotifyPropertyChanged("FlowratePumpStart");
            }
        }

        private VolumeFlowRateMeasure flowratePumpStartField; 


        /// <summary>
        /// Pump rate at end of job. 
        /// </summary>
		[XmlElement("flowratePumpEnd")]

        public VolumeFlowRateMeasure FlowratePumpEnd {
            get {
                return flowratePumpEndField;
            } 
            set {
                flowratePumpEndField = value;
                NotifyPropertyChanged("FlowratePumpEnd");
            }
        }

        private VolumeFlowRateMeasure flowratePumpEndField; 


        /// <summary>
        /// Pill below plug. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("pillBelowPlug")]

        public Boolean? PillBelowPlug {
            get {
                return pillBelowPlugField;
            } 
            set {
                pillBelowPlugField = value;
                this.PillBelowPlugSpecified = true;
                NotifyPropertyChanged("PillBelowPlug");
            }
        }

        private Boolean? pillBelowPlugField; 


		/// <summary>
        /// pillBelowPlugSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PillBelowPlugSpecified {
            get {
                return pillBelowPlugSpecifiedField;
            } 
            set {
                pillBelowPlugSpecifiedField = value;
                NotifyPropertyChanged("PillBelowPlugSpecified");
            }
        }

        private Boolean pillBelowPlugSpecifiedField; 


        /// <summary>
        /// Plug catcher. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("plugCatcher")]

        public Boolean? PlugCatcher {
            get {
                return plugCatcherField;
            } 
            set {
                plugCatcherField = value;
                this.PlugCatcherSpecified = true;
                NotifyPropertyChanged("PlugCatcher");
            }
        }

        private Boolean? plugCatcherField; 


		/// <summary>
        /// plugCatcherSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PlugCatcherSpecified {
            get {
                return plugCatcherSpecifiedField;
            } 
            set {
                plugCatcherSpecifiedField = value;
                NotifyPropertyChanged("PlugCatcherSpecified");
            }
        }

        private Boolean plugCatcherSpecifiedField; 


        /// <summary>
        /// Circulate out measured depth. 
        /// </summary>
		[XmlElement("mdCircOut")]

        public MeasuredDepthCoord MDCircOut {
            get {
                return mdCircOutField;
            } 
            set {
                mdCircOutField = value;
                NotifyPropertyChanged("MDCircOut");
            }
        }

        private MeasuredDepthCoord mdCircOutField; 


        /// <summary>
        /// Circulate prior to start of job. 
        /// </summary>
		[XmlElement("volCircPrior")]

        public VolumeMeasure VolCircPrior {
            get {
                return volCircPriorField;
            } 
            set {
                volCircPriorField = value;
                NotifyPropertyChanged("VolCircPrior");
            }
        }

        private VolumeMeasure volCircPriorField; 


        /// <summary>
        /// Type of mud in hole. 
        /// </summary>
		[XmlElement("typeOriginalMud")]

        public String TypeOriginalMud {
            get {
                return typeOriginalMudField;
            } 
            set {
                typeOriginalMudField = value;
                NotifyPropertyChanged("TypeOriginalMud");
            }
        }

        private String typeOriginalMudField; 


        /// <summary>
        /// Mud density. 
        /// </summary>
		[XmlElement("wtMud")]

        public DensityMeasure WeightMud {
            get {
                return wtMudField;
            } 
            set {
                wtMudField = value;
                NotifyPropertyChanged("WeightMud");
            }
        }

        private DensityMeasure wtMudField; 


        /// <summary>
        /// Funnel viscosity in seconds (in hole at start of job). 
        /// </summary>
		[XmlElement("visFunnelMud")]

        public TimeMeasure VisFunnelMud {
            get {
                return visFunnelMudField;
            } 
            set {
                visFunnelMudField = value;
                NotifyPropertyChanged("VisFunnelMud");
            }
        }

        private TimeMeasure visFunnelMudField; 


        /// <summary>
        /// Plastic viscosity (in hole at start of job). 
        /// </summary>
		[XmlElement("pvMud")]

        public DynamicViscosityMeasure PVMud {
            get {
                return pvMudField;
            } 
            set {
                pvMudField = value;
                NotifyPropertyChanged("PVMud");
            }
        }

        private DynamicViscosityMeasure pvMudField; 


        /// <summary>
        /// Yield point (in hole at start of job). 
        /// </summary>
		[XmlElement("ypMud")]

        public PressureMeasure YPMud {
            get {
                return ypMudField;
            } 
            set {
                ypMudField = value;
                NotifyPropertyChanged("YPMud");
            }
        }

        private PressureMeasure ypMudField; 


        /// <summary>
        /// Gels-10Sec (in hole at start of job). 
        /// </summary>
		[XmlElement("gel10Sec")]

        public PressureMeasure Gel10Sec {
            get {
                return gel10SecField;
            } 
            set {
                gel10SecField = value;
                NotifyPropertyChanged("Gel10Sec");
            }
        }

        private PressureMeasure gel10SecField; 


        /// <summary>
        /// Gels-10Min (in hole at start of job). 
        /// </summary>
		[XmlElement("gel10Min")]

        public PressureMeasure Gel10Min {
            get {
                return gel10MinField;
            } 
            set {
                gel10MinField = value;
                NotifyPropertyChanged("Gel10Min");
            }
        }

        private PressureMeasure gel10MinField; 


        /// <summary>
        /// Bottom hole circulating temperature. 
        /// </summary>
		[XmlElement("tempBHCT")]

        public ThermodynamicTemperatureMeasure TempBHCT {
            get {
                return tempBHCTField;
            } 
            set {
                tempBHCTField = value;
                NotifyPropertyChanged("TempBHCT");
            }
        }

        private ThermodynamicTemperatureMeasure tempBHCTField; 


        /// <summary>
        /// Bottom hole temperature static. 
        /// </summary>
		[XmlElement("tempBHST")]

        public ThermodynamicTemperatureMeasure TempBHST {
            get {
                return tempBHSTField;
            } 
            set {
                tempBHSTField = value;
                NotifyPropertyChanged("TempBHST");
            }
        }

        private ThermodynamicTemperatureMeasure tempBHSTField; 


        /// <summary>
        /// Method to estimate excess volume. 
        /// </summary>
		[XmlElement("volExcessMethod")]

        public String VolExcessMethod {
            get {
                return volExcessMethodField;
            } 
            set {
                volExcessMethodField = value;
                NotifyPropertyChanged("VolExcessMethod");
            }
        }

        private String volExcessMethodField; 


        /// <summary>
        /// Mix method. 
        /// </summary>
		[XmlElement("mixMethod")]

        public String MixMethod {
            get {
                return mixMethodField;
            } 
            set {
                mixMethodField = value;
                NotifyPropertyChanged("MixMethod");
            }
        }

        private String mixMethodField; 


        /// <summary>
        /// Method by which density is measured. 
        /// </summary>
		[XmlElement("densMeasBy")]

        public String DensMeasBy {
            get {
                return densMeasByField;
            } 
            set {
                densMeasByField = value;
                NotifyPropertyChanged("DensMeasBy");
            }
        }

        private String densMeasByField; 


        /// <summary>
        /// Fluid returns. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("annFlowAfter")]

        public Boolean? AnnFlowAfter {
            get {
                return annFlowAfterField;
            } 
            set {
                annFlowAfterField = value;
                this.AnnFlowAfterSpecified = true;
                NotifyPropertyChanged("AnnFlowAfter");
            }
        }

        private Boolean? annFlowAfterField; 


		/// <summary>
        /// annFlowAfterSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean AnnFlowAfterSpecified {
            get {
                return annFlowAfterSpecifiedField;
            } 
            set {
                annFlowAfterSpecifiedField = value;
                NotifyPropertyChanged("AnnFlowAfterSpecified");
            }
        }

        private Boolean annFlowAfterSpecifiedField; 


        /// <summary>
        /// Top plug used? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("topPlug")]

        public Boolean? TopPlug {
            get {
                return topPlugField;
            } 
            set {
                topPlugField = value;
                this.TopPlugSpecified = true;
                NotifyPropertyChanged("TopPlug");
            }
        }

        private Boolean? topPlugField; 


		/// <summary>
        /// topPlugSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TopPlugSpecified {
            get {
                return topPlugSpecifiedField;
            } 
            set {
                topPlugSpecifiedField = value;
                NotifyPropertyChanged("TopPlugSpecified");
            }
        }

        private Boolean topPlugSpecifiedField; 


        /// <summary>
        /// Bottom plug used. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("botPlug")]

        public Boolean? BotPlug {
            get {
                return botPlugField;
            } 
            set {
                botPlugField = value;
                this.BotPlugSpecified = true;
                NotifyPropertyChanged("BotPlug");
            }
        }

        private Boolean? botPlugField; 


		/// <summary>
        /// botPlugSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean BotPlugSpecified {
            get {
                return botPlugSpecifiedField;
            } 
            set {
                botPlugSpecifiedField = value;
                NotifyPropertyChanged("BotPlugSpecified");
            }
        }

        private Boolean botPlugSpecifiedField; 


        /// <summary>
        /// Amount of bottom plug used. 
        /// </summary>
		[XmlElement("botPlugNumber")]

        public Int16? BotPlugNumber {
            get {
                return botPlugNumberField;
            } 
            set {
                botPlugNumberField = value;
                this.BotPlugNumberSpecified = true;
                NotifyPropertyChanged("BotPlugNumber");
            }
        }

        private Int16? botPlugNumberField; 


		/// <summary>
        /// botPlugNumberSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean BotPlugNumberSpecified {
            get {
                return botPlugNumberSpecifiedField;
            } 
            set {
                botPlugNumberSpecifiedField = value;
                NotifyPropertyChanged("BotPlugNumberSpecified");
            }
        }

        private Boolean botPlugNumberSpecifiedField; 


        /// <summary>
        /// Plug bumped? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[XmlElement("plugBumped")]

        public Boolean? PlugBumped {
            get {
                return plugBumpedField;
            } 
            set {
                plugBumpedField = value;
                this.PlugBumpedSpecified = true;
                NotifyPropertyChanged("PlugBumped");
            }
        }

        private Boolean? plugBumpedField; 


		/// <summary>
        /// plugBumpedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PlugBumpedSpecified {
            get {
                return plugBumpedSpecifiedField;
            } 
            set {
                plugBumpedSpecifiedField = value;
                NotifyPropertyChanged("PlugBumpedSpecified");
            }
        }

        private Boolean plugBumpedSpecifiedField; 


        /// <summary>
        /// Pressure prior to bumping plug / pressure at end of displacement 
        /// </summary>
		[XmlElement("presPriorBump")]

        public PressureMeasure PresPriorBump {
            get {
                return presPriorBumpField;
            } 
            set {
                presPriorBumpField = value;
                NotifyPropertyChanged("PresPriorBump");
            }
        }

        private PressureMeasure presPriorBumpField; 


        /// <summary>
        /// Pressure plug bumped. 
        /// </summary>
		[XmlElement("presBump")]

        public PressureMeasure PresBump {
            get {
                return presBumpField;
            } 
            set {
                presBumpField = value;
                NotifyPropertyChanged("PresBump");
            }
        }

        private PressureMeasure presBumpField; 


        /// <summary>
        /// Pressure held to. 
        /// </summary>
		[XmlElement("presHeld")]

        public PressureMeasure PresHeld {
            get {
                return presHeldField;
            } 
            set {
                presHeldField = value;
                NotifyPropertyChanged("PresHeld");
            }
        }

        private PressureMeasure presHeldField; 


        /// <summary>
        /// Float held? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("floatHeld")]

        public Boolean? FloatHeld {
            get {
                return floatHeldField;
            } 
            set {
                floatHeldField = value;
                this.FloatHeldSpecified = true;
                NotifyPropertyChanged("FloatHeld");
            }
        }

        private Boolean? floatHeldField; 


		/// <summary>
        /// floatHeldSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean FloatHeldSpecified {
            get {
                return floatHeldSpecifiedField;
            } 
            set {
                floatHeldSpecifiedField = value;
                NotifyPropertyChanged("FloatHeldSpecified");
            }
        }

        private Boolean floatHeldSpecifiedField; 


        /// <summary>
        /// Total mud lost. 
        /// </summary>
		[XmlElement("volMudLost")]

        public VolumeMeasure VolMudLost {
            get {
                return volMudLostField;
            } 
            set {
                volMudLostField = value;
                NotifyPropertyChanged("VolMudLost");
            }
        }

        private VolumeMeasure volMudLostField; 


        /// <summary>
        /// Displacement fluid name. 
        /// </summary>
		[XmlElement("fluidDisplace")]

        public String FluidDisplace {
            get {
                return fluidDisplaceField;
            } 
            set {
                fluidDisplaceField = value;
                NotifyPropertyChanged("FluidDisplace");
            }
        }

        private String fluidDisplaceField; 


        /// <summary>
        /// Density of displacement fluid. 
        /// </summary>
		[XmlElement("densDisplaceFluid")]

        public DensityMeasure DensDisplaceFluid {
            get {
                return densDisplaceFluidField;
            } 
            set {
                densDisplaceFluidField = value;
                NotifyPropertyChanged("DensDisplaceFluid");
            }
        }

        private DensityMeasure densDisplaceFluidField; 


        /// <summary>
        /// Volume of displacement fluid. 
        /// </summary>
		[XmlElement("volDisplaceFluid")]

        public VolumeMeasure VolDisplaceFluid {
            get {
                return volDisplaceFluidField;
            } 
            set {
                volDisplaceFluidField = value;
                NotifyPropertyChanged("VolDisplaceFluid");
            }
        }

        private VolumeMeasure volDisplaceFluidField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Cementing Fluid Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementingFluid", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Cementing Fluid Component Schema ")]
    public partial class CementingFluid : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Fluid type: Mud, Wash, Spacer, Slurry. 
        /// </summary>
		[XmlElement("typeFluid")]

        public String TypeFluid {
            get {
                return typeFluidField;
            } 
            set {
                typeFluidField = value;
                NotifyPropertyChanged("TypeFluid");
            }
        }

        private String typeFluidField; 


        /// <summary>
        /// Fluid Index: 1: first fluid pumped (=original mud), (last-1)=Tail cement, last= displacement mud 
        /// </summary>
		[XmlElement("fluidIndex")]

        public Int16? FluidIndex {
            get {
                return fluidIndexField;
            } 
            set {
                fluidIndexField = value;
                this.FluidIndexSpecified = true;
                NotifyPropertyChanged("FluidIndex");
            }
        }

        private Int16? fluidIndexField; 


		/// <summary>
        /// fluidIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean FluidIndexSpecified {
            get {
                return fluidIndexSpecifiedField;
            } 
            set {
                fluidIndexSpecifiedField = value;
                NotifyPropertyChanged("FluidIndexSpecified");
            }
        }

        private Boolean fluidIndexSpecifiedField; 


        /// <summary>
        /// Fluid description. 
        /// </summary>
		[XmlElement("descFluid")]

        public String DescFluid {
            get {
                return descFluidField;
            } 
            set {
                descFluidField = value;
                NotifyPropertyChanged("DescFluid");
            }
        }

        private String descFluidField; 


        /// <summary>
        /// Purpose description. 
        /// </summary>
		[XmlElement("purpose")]

        public String Purpose {
            get {
                return purposeField;
            } 
            set {
                purposeField = value;
                NotifyPropertyChanged("Purpose");
            }
        }

        private String purposeField; 


        /// <summary>
        /// Slurry class. 
        /// </summary>
		[XmlElement("classSlurryDryBlend")]

        public String ClassSlurryDryBlend {
            get {
                return classSlurryDryBlendField;
            } 
            set {
                classSlurryDryBlendField = value;
                NotifyPropertyChanged("ClassSlurryDryBlend");
            }
        }

        private String classSlurryDryBlendField; 


        /// <summary>
        /// Measured depth at top of slurry placement. 
        /// </summary>
		[XmlElement("mdFluidTop")]

        public MeasuredDepthCoord MDFluidTop {
            get {
                return mdFluidTopField;
            } 
            set {
                mdFluidTopField = value;
                NotifyPropertyChanged("MDFluidTop");
            }
        }

        private MeasuredDepthCoord mdFluidTopField; 


        /// <summary>
        /// Measured depth at bottom of slurry placement. 
        /// </summary>
		[XmlElement("mdFluidBottom")]

        public MeasuredDepthCoord MDFluidBottom {
            get {
                return mdFluidBottomField;
            } 
            set {
                mdFluidBottomField = value;
                NotifyPropertyChanged("MDFluidBottom");
            }
        }

        private MeasuredDepthCoord mdFluidBottomField; 


        /// <summary>
        /// Water Source Description. 
        /// </summary>
		[XmlElement("sourceWater")]

        public String SourceWater {
            get {
                return sourceWaterField;
            } 
            set {
                sourceWaterField = value;
                NotifyPropertyChanged("SourceWater");
            }
        }

        private String sourceWaterField; 


        /// <summary>
        /// Water volume. 
        /// </summary>
		[XmlElement("volWater")]

        public VolumeMeasure VolWater {
            get {
                return volWaterField;
            } 
            set {
                volWaterField = value;
                NotifyPropertyChanged("VolWater");
            }
        }

        private VolumeMeasure volWaterField; 


        /// <summary>
        /// Volume of cement. 
        /// </summary>
		[XmlElement("volCement")]

        public VolumeMeasure VolCement {
            get {
                return volCementField;
            } 
            set {
                volCementField = value;
                NotifyPropertyChanged("VolCement");
            }
        }

        private VolumeMeasure volCementField; 


        /// <summary>
        /// Mix Water Ratio. 
        /// </summary>
		[XmlElement("ratioMixWater")]

        public SpecificVolumeMeasure RatioMixWater {
            get {
                return ratioMixWaterField;
            } 
            set {
                ratioMixWaterField = value;
                NotifyPropertyChanged("RatioMixWater");
            }
        }

        private SpecificVolumeMeasure ratioMixWaterField; 


        /// <summary>
        /// Fluid/Slurry Volume. 
        /// </summary>
		[XmlElement("volFluid")]

        public VolumeMeasure VolFluid {
            get {
                return volFluidField;
            } 
            set {
                volFluidField = value;
                NotifyPropertyChanged("VolFluid");
            }
        }

        private VolumeMeasure volFluidField; 


        /// <summary>
        /// Set of (Time / Rate / Back Pressure). 
        /// </summary>
		[XmlElement("cementPumpSchedule")]

        public CementPumpSchedule CementPumpSchedule {
            get {
                return cementPumpScheduleField;
            } 
            set {
                cementPumpScheduleField = value;
                NotifyPropertyChanged("CementPumpSchedule");
            }
        }

        private CementPumpSchedule cementPumpScheduleField; 


        /// <summary>
        /// Excess Percent. 
        /// </summary>
		[XmlElement("excessPc")]

        public VolumePerVolumeMeasure ExcessPercent {
            get {
                return excessPcField;
            } 
            set {
                excessPcField = value;
                NotifyPropertyChanged("ExcessPercent");
            }
        }

        private VolumePerVolumeMeasure excessPcField; 


        /// <summary>
        /// Slurry Yield. 
        /// </summary>
		[XmlElement("volYield")]

        public SpecificVolumeMeasure VolYield {
            get {
                return volYieldField;
            } 
            set {
                volYieldField = value;
                NotifyPropertyChanged("VolYield");
            }
        }

        private SpecificVolumeMeasure volYieldField; 


        /// <summary>
        /// Fluid density. 
        /// </summary>
		[XmlElement("density")]

        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 


        /// <summary>
        /// Equals 1 - Porosity. 
        /// </summary>
		[XmlElement("solidVolumeFraction")]

        public VolumePerVolumeMeasure SolidVolumeFraction {
            get {
                return solidVolumeFractionField;
            } 
            set {
                solidVolumeFractionField = value;
                NotifyPropertyChanged("SolidVolumeFraction");
            }
        }

        private VolumePerVolumeMeasure solidVolumeFractionField; 


        /// <summary>
        /// Volume Pumped. 
        /// </summary>
		[XmlElement("volPumped")]

        public VolumeMeasure VolPumped {
            get {
                return volPumpedField;
            } 
            set {
                volPumpedField = value;
                NotifyPropertyChanged("VolPumped");
            }
        }

        private VolumeMeasure volPumpedField; 


        /// <summary>
        /// Other Volume. 
        /// </summary>
		[XmlElement("volOther")]

        public VolumeMeasure VolOther {
            get {
                return volOtherField;
            } 
            set {
                volOtherField = value;
                NotifyPropertyChanged("VolOther");
            }
        }

        private VolumeMeasure volOtherField; 


        /// <summary>
        /// Newtonian/Bingham/Power Law/Herschel Bulkley. 
        /// </summary>
		[XmlElement("fluidRheologicalModel")]

        public String FluidRheologicalModel {
            get {
                return fluidRheologicalModelField;
            } 
            set {
                fluidRheologicalModelField = value;
                NotifyPropertyChanged("FluidRheologicalModel");
            }
        }

        private String fluidRheologicalModelField; 


        /// <summary>
        /// Viscosity (Newtonian) or Plastic Viscosity if Bingham. 
        /// </summary>
		[XmlElement("vis")]

        public DynamicViscosityMeasure Vis {
            get {
                return visField;
            } 
            set {
                visField = value;
                NotifyPropertyChanged("Vis");
            }
        }

        private DynamicViscosityMeasure visField; 


        /// <summary>
        /// Yield point (Bingham and Herschel Bulkley models). 
        /// </summary>
		[XmlElement("yp")]

        public PressureMeasure YP {
            get {
                return ypField;
            } 
            set {
                ypField = value;
                NotifyPropertyChanged("YP");
            }
        }

        private PressureMeasure ypField; 


        /// <summary>
        /// Power Law index (Power Law and HB). 
        /// </summary>
		[XmlElement("n")]

        public DimensionlessMeasure N {
            get {
                return nField;
            } 
            set {
                nField = value;
                NotifyPropertyChanged("N");
            }
        }

        private DimensionlessMeasure nField; 


        /// <summary>
        /// Consistency index (Power Law and HB). 
        /// </summary>
		[XmlElement("k")]

        public DimensionlessMeasure K {
            get {
                return kField;
            } 
            set {
                kField = value;
                NotifyPropertyChanged("K");
            }
        }

        private DimensionlessMeasure kField; 


        /// <summary>
        /// Gel reading after 10 seconds. 
        /// </summary>
		[XmlElement("gel10SecReading")]

        public PlaneAngleMeasure Gel10SecReading {
            get {
                return gel10SecReadingField;
            } 
            set {
                gel10SecReadingField = value;
                NotifyPropertyChanged("Gel10SecReading");
            }
        }

        private PlaneAngleMeasure gel10SecReadingField; 


        /// <summary>
        /// Gel strength after 10 seconds. 
        /// </summary>
		[XmlElement("gel10SecStrength")]

        public PressureMeasure Gel10SecStrength {
            get {
                return gel10SecStrengthField;
            } 
            set {
                gel10SecStrengthField = value;
                NotifyPropertyChanged("Gel10SecStrength");
            }
        }

        private PressureMeasure gel10SecStrengthField; 


        /// <summary>
        /// Gel reading after 1 minute. 
        /// </summary>
		[XmlElement("gel1MinReading")]

        public PlaneAngleMeasure Gel1MinReading {
            get {
                return gel1MinReadingField;
            } 
            set {
                gel1MinReadingField = value;
                NotifyPropertyChanged("Gel1MinReading");
            }
        }

        private PlaneAngleMeasure gel1MinReadingField; 


        /// <summary>
        /// Gel strength after 1 minute. 
        /// </summary>
		[XmlElement("gel1MinStrength")]

        public PressureMeasure Gel1MinStrength {
            get {
                return gel1MinStrengthField;
            } 
            set {
                gel1MinStrengthField = value;
                NotifyPropertyChanged("Gel1MinStrength");
            }
        }

        private PressureMeasure gel1MinStrengthField; 


        /// <summary>
        /// Gel reading after 10 minutes. 
        /// </summary>
		[XmlElement("gel10MinReading")]

        public PlaneAngleMeasure Gel10MinReading {
            get {
                return gel10MinReadingField;
            } 
            set {
                gel10MinReadingField = value;
                NotifyPropertyChanged("Gel10MinReading");
            }
        }

        private PlaneAngleMeasure gel10MinReadingField; 


        /// <summary>
        /// Gel strength after 10 minutes. 
        /// </summary>
		[XmlElement("gel10MinStrength")]

        public PressureMeasure Gel10MinStrength {
            get {
                return gel10MinStrengthField;
            } 
            set {
                gel10MinStrengthField = value;
                NotifyPropertyChanged("Gel10MinStrength");
            }
        }

        private PressureMeasure gel10MinStrengthField; 


        /// <summary>
        /// Type of base fluid: Fresh water, Sea water, Brine, Brackish water. 
        /// </summary>
		[XmlElement("typeBaseFluid")]

        public String TypeBaseFluid {
            get {
                return typeBaseFluidField;
            } 
            set {
                typeBaseFluidField = value;
                NotifyPropertyChanged("TypeBaseFluid");
            }
        }

        private String typeBaseFluidField; 


        /// <summary>
        /// Density of base fluid. 
        /// </summary>
		[XmlElement("densBaseFluid")]

        public DensityMeasure DensBaseFluid {
            get {
                return densBaseFluidField;
            } 
            set {
                densBaseFluidField = value;
                NotifyPropertyChanged("DensBaseFluid");
            }
        }

        private DensityMeasure densBaseFluidField; 


        /// <summary>
        /// Name of dry blend. 
        /// </summary>
		[XmlElement("dryBlendName")]

        public String DryBlendName {
            get {
                return dryBlendNameField;
            } 
            set {
                dryBlendNameField = value;
                NotifyPropertyChanged("DryBlendName");
            }
        }

        private String dryBlendNameField; 


        /// <summary>
        /// Description of dry blend. 
        /// </summary>
		[XmlElement("dryBlendDescription")]

        public String DryBlendDescription {
            get {
                return dryBlendDescriptionField;
            } 
            set {
                dryBlendDescriptionField = value;
                NotifyPropertyChanged("DryBlendDescription");
            }
        }

        private String dryBlendDescriptionField; 


        /// <summary>
        /// Mass of dry blend: the blend is made of different solid additives: the volume is not constant. 
        /// </summary>
		[XmlElement("massDryBlend")]

        public MassMeasure MassDryBlend {
            get {
                return massDryBlendField;
            } 
            set {
                massDryBlendField = value;
                NotifyPropertyChanged("MassDryBlend");
            }
        }

        private MassMeasure massDryBlendField; 


        /// <summary>
        /// Density of Dry blend. 
        /// </summary>
		[XmlElement("densDryBlend")]

        public DensityMeasure DensDryBlend {
            get {
                return densDryBlendField;
            } 
            set {
                densDryBlendField = value;
                NotifyPropertyChanged("DensDryBlend");
            }
        }

        private DensityMeasure densDryBlendField; 


        /// <summary>
        /// Weight of a sack of dry blend. 
        /// </summary>
		[XmlElement("massSackDryBlend")]

        public MassMeasure MassSackDryBlend {
            get {
                return massSackDryBlendField;
            } 
            set {
                massSackDryBlendField = value;
                NotifyPropertyChanged("MassSackDryBlend");
            }
        }

        private MassMeasure massSackDryBlendField; 


        /// <summary>
        /// Additives can be added in slurry but also in spacers, washes, mud. 
        /// </summary>
		[XmlElement("cementAdditive")]

        public List<CementAdditive> CementAdditive {
            get {
                return cementAdditiveField;
            } 
            set {
                cementAdditiveField = value;
                NotifyPropertyChanged("CementAdditive");
            }
        }

        private List<CementAdditive> cementAdditiveField; 


        /// <summary>
        /// Foam used indicator. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("foamUsed")]

        public Boolean? FoamUsed {
            get {
                return foamUsedField;
            } 
            set {
                foamUsedField = value;
                this.FoamUsedSpecified = true;
                NotifyPropertyChanged("FoamUsed");
            }
        }

        private Boolean? foamUsedField; 


		/// <summary>
        /// foamUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean FoamUsedSpecified {
            get {
                return foamUsedSpecifiedField;
            } 
            set {
                foamUsedSpecifiedField = value;
                NotifyPropertyChanged("FoamUsedSpecified");
            }
        }

        private Boolean foamUsedSpecifiedField; 


        /// <summary>
        /// Gas type used for foam job. 
        /// </summary>
		[XmlElement("typeGasFoam")]

        public String TypeGasFoam {
            get {
                return typeGasFoamField;
            } 
            set {
                typeGasFoamField = value;
                NotifyPropertyChanged("TypeGasFoam");
            }
        }

        private String typeGasFoamField; 


        /// <summary>
        /// Volume of gas used for foam job. 
        /// </summary>
		[XmlElement("volGasFoam")]

        public VolumeMeasure VolGasFoam {
            get {
                return volGasFoamField;
            } 
            set {
                volGasFoamField = value;
                NotifyPropertyChanged("VolGasFoam");
            }
        }

        private VolumeMeasure volGasFoamField; 


        /// <summary>
        /// Constant gas ratio method ratio 
        /// </summary>
		[XmlElement("ratioConstGasMethodAv")]

        public VolumePerVolumeMeasure RatioConstGasMethodAverage {
            get {
                return ratioConstGasMethodAvField;
            } 
            set {
                ratioConstGasMethodAvField = value;
                NotifyPropertyChanged("RatioConstGasMethodAverage");
            }
        }

        private VolumePerVolumeMeasure ratioConstGasMethodAvField; 


        /// <summary>
        /// Constant gas ratio method average density. 
        /// </summary>
		[XmlElement("densConstGasMethod")]

        public DensityMeasure DensConstGasMethod {
            get {
                return densConstGasMethodField;
            } 
            set {
                densConstGasMethodField = value;
                NotifyPropertyChanged("DensConstGasMethod");
            }
        }

        private DensityMeasure densConstGasMethodField; 


        /// <summary>
        /// Constant gas ratio method initial method ratio. 
        /// </summary>
		[XmlElement("ratioConstGasMethodStart")]

        public VolumePerVolumeMeasure RatioConstGasMethodStart {
            get {
                return ratioConstGasMethodStartField;
            } 
            set {
                ratioConstGasMethodStartField = value;
                NotifyPropertyChanged("RatioConstGasMethodStart");
            }
        }

        private VolumePerVolumeMeasure ratioConstGasMethodStartField; 


        /// <summary>
        /// Constant gas ratio method final method ratio. 
        /// </summary>
		[XmlElement("ratioConstGasMethodEnd")]

        public VolumePerVolumeMeasure RatioConstGasMethodEnd {
            get {
                return ratioConstGasMethodEndField;
            } 
            set {
                ratioConstGasMethodEndField = value;
                NotifyPropertyChanged("RatioConstGasMethodEnd");
            }
        }

        private VolumePerVolumeMeasure ratioConstGasMethodEndField; 


        /// <summary>
        /// Constant gas ratio method average density. 
        /// </summary>
		[XmlElement("densConstGasFoam")]

        public DensityMeasure DensConstGasFoam {
            get {
                return densConstGasFoamField;
            } 
            set {
                densConstGasFoamField = value;
                NotifyPropertyChanged("DensConstGasFoam");
            }
        }

        private DensityMeasure densConstGasFoamField; 


        /// <summary>
        /// Test thickening time. 
        /// </summary>
		[XmlElement("eTimThickening")]

        public TimeMeasure ETimeThickening {
            get {
                return eTimThickeningField;
            } 
            set {
                eTimThickeningField = value;
                NotifyPropertyChanged("ETimeThickening");
            }
        }

        private TimeMeasure eTimThickeningField; 


        /// <summary>
        /// Test thickening temperature. 
        /// </summary>
		[XmlElement("tempThickening")]

        public ThermodynamicTemperatureMeasure TempThickening {
            get {
                return tempThickeningField;
            } 
            set {
                tempThickeningField = value;
                NotifyPropertyChanged("TempThickening");
            }
        }

        private ThermodynamicTemperatureMeasure tempThickeningField; 


        /// <summary>
        /// Test thickening pressure. 
        /// </summary>
		[XmlElement("presTestThickening")]

        public PressureMeasure PresTestThickening {
            get {
                return presTestThickeningField;
            } 
            set {
                presTestThickeningField = value;
                NotifyPropertyChanged("PresTestThickening");
            }
        }

        private PressureMeasure presTestThickeningField; 


        /// <summary>
        /// Test thickening consistency/slurry viscosity - Bearden Consistency (Bc) 0 to 100. 
        /// </summary>
		[XmlElement("consTestThickening")]

        public DimensionlessMeasure ConsTestThickening {
            get {
                return consTestThickeningField;
            } 
            set {
                consTestThickeningField = value;
                NotifyPropertyChanged("ConsTestThickening");
            }
        }

        private DimensionlessMeasure consTestThickeningField; 


        /// <summary>
        /// Test free water na: = mL/250ML. 
        /// </summary>
		[XmlElement("pcFreeWater")]

        public VolumePerVolumeMeasure PercentFreeWater {
            get {
                return pcFreeWaterField;
            } 
            set {
                pcFreeWaterField = value;
                NotifyPropertyChanged("PercentFreeWater");
            }
        }

        private VolumePerVolumeMeasure pcFreeWaterField; 


        /// <summary>
        /// Test free water temperature. 
        /// </summary>
		[XmlElement("tempFreeWater")]

        public ThermodynamicTemperatureMeasure TempFreeWater {
            get {
                return tempFreeWaterField;
            } 
            set {
                tempFreeWaterField = value;
                NotifyPropertyChanged("TempFreeWater");
            }
        }

        private ThermodynamicTemperatureMeasure tempFreeWaterField; 


        /// <summary>
        /// Test fluid loss. 
        /// </summary>
		[XmlElement("volTestFluidLoss")]

        public VolumeMeasure VolTestFluidLoss {
            get {
                return volTestFluidLossField;
            } 
            set {
                volTestFluidLossField = value;
                NotifyPropertyChanged("VolTestFluidLoss");
            }
        }

        private VolumeMeasure volTestFluidLossField; 


        /// <summary>
        /// Test fluid loss temperature. 
        /// </summary>
		[XmlElement("tempFluidLoss")]

        public ThermodynamicTemperatureMeasure TempFluidLoss {
            get {
                return tempFluidLossField;
            } 
            set {
                tempFluidLossField = value;
                NotifyPropertyChanged("TempFluidLoss");
            }
        }

        private ThermodynamicTemperatureMeasure tempFluidLossField; 


        /// <summary>
        /// Test Fluid loss pressure. 
        /// </summary>
		[XmlElement("presTestFluidLoss")]

        public PressureMeasure PresTestFluidLoss {
            get {
                return presTestFluidLossField;
            } 
            set {
                presTestFluidLossField = value;
                NotifyPropertyChanged("PresTestFluidLoss");
            }
        }

        private PressureMeasure presTestFluidLossField; 


        /// <summary>
        /// Test Fluid loss: dehydrating test period, used to compute the API Fluid Loss. 
        /// </summary>
		[XmlElement("timeFluidLoss")]

        public TimeMeasure TimeFluidLoss {
            get {
                return timeFluidLossField;
            } 
            set {
                timeFluidLossField = value;
                NotifyPropertyChanged("TimeFluidLoss");
            }
        }

        private TimeMeasure timeFluidLossField; 


        /// <summary>
        /// API Fluid Loss = 2 * volTestFluidLoss * SQRT(30/timefluidloss). 
        /// </summary>
		[XmlElement("volAPIFluidLoss")]

        public VolumeMeasure VolAPIFluidLoss {
            get {
                return volAPIFluidLossField;
            } 
            set {
                volAPIFluidLossField = value;
                NotifyPropertyChanged("VolAPIFluidLoss");
            }
        }

        private VolumeMeasure volAPIFluidLossField; 


        /// <summary>
        /// Compressive strength time 1. 
        /// </summary>
		[XmlElement("eTimComprStren1")]

        public TimeMeasure ETimeComprStren1 {
            get {
                return eTimComprStren1Field;
            } 
            set {
                eTimComprStren1Field = value;
                NotifyPropertyChanged("ETimeComprStren1");
            }
        }

        private TimeMeasure eTimComprStren1Field; 


        /// <summary>
        /// Compressive strength time 2. 
        /// </summary>
		[XmlElement("eTimComprStren2")]

        public TimeMeasure ETimeComprStren2 {
            get {
                return eTimComprStren2Field;
            } 
            set {
                eTimComprStren2Field = value;
                NotifyPropertyChanged("ETimeComprStren2");
            }
        }

        private TimeMeasure eTimComprStren2Field; 


        /// <summary>
        /// Compressive strength pressure 1. 
        /// </summary>
		[XmlElement("presComprStren1")]

        public PressureMeasure PresComprStren1 {
            get {
                return presComprStren1Field;
            } 
            set {
                presComprStren1Field = value;
                NotifyPropertyChanged("PresComprStren1");
            }
        }

        private PressureMeasure presComprStren1Field; 


        /// <summary>
        /// Compressive strength pressure 2. 
        /// </summary>
		[XmlElement("presComprStren2")]

        public PressureMeasure PresComprStren2 {
            get {
                return presComprStren2Field;
            } 
            set {
                presComprStren2Field = value;
                NotifyPropertyChanged("PresComprStren2");
            }
        }

        private PressureMeasure presComprStren2Field; 


        /// <summary>
        /// Compressive strength temperature 1. 
        /// </summary>
		[XmlElement("tempComprStren1")]

        public ThermodynamicTemperatureMeasure TempComprStren1 {
            get {
                return tempComprStren1Field;
            } 
            set {
                tempComprStren1Field = value;
                NotifyPropertyChanged("TempComprStren1");
            }
        }

        private ThermodynamicTemperatureMeasure tempComprStren1Field; 


        /// <summary>
        /// Compressive strength temperature 2. 
        /// </summary>
		[XmlElement("tempComprStren2")]

        public ThermodynamicTemperatureMeasure TempComprStren2 {
            get {
                return tempComprStren2Field;
            } 
            set {
                tempComprStren2Field = value;
                NotifyPropertyChanged("TempComprStren2");
            }
        }

        private ThermodynamicTemperatureMeasure tempComprStren2Field; 


        /// <summary>
        /// Slurry density at pressure. 
        /// </summary>
		[XmlElement("densAtPres")]

        public DensityMeasure DensAtPres {
            get {
                return densAtPresField;
            } 
            set {
                densAtPresField = value;
                NotifyPropertyChanged("DensAtPres");
            }
        }

        private DensityMeasure densAtPresField; 


        /// <summary>
        /// Volume reserved. 
        /// </summary>
		[XmlElement("volReserved")]

        public VolumeMeasure VolReserved {
            get {
                return volReservedField;
            } 
            set {
                volReservedField = value;
                NotifyPropertyChanged("VolReserved");
            }
        }

        private VolumeMeasure volReservedField; 


        /// <summary>
        /// Total Slurry Volume. 
        /// </summary>
		[XmlElement("volTotSlurry")]

        public VolumeMeasure VolTotSlurry {
            get {
                return volTotSlurryField;
            } 
            set {
                volTotSlurryField = value;
                NotifyPropertyChanged("VolTotSlurry");
            }
        }

        private VolumeMeasure volTotSlurryField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Cement Pump Schedule Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementPumpSchedule", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Cement Pump Schedule Component Schema ")]
    public partial class CementPumpSchedule : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// (Elapsed time period during the fluid is pumped. 
        /// </summary>
		[XmlElement("eTimPump")]

        public TimeMeasure ETimePump {
            get {
                return eTimPumpField;
            } 
            set {
                eTimPumpField = value;
                NotifyPropertyChanged("ETimePump");
            }
        }

        private TimeMeasure eTimPumpField; 


        /// <summary>
        /// Rate fluid is pumped. 0 means it is a pause. 
        /// </summary>
		[XmlElement("ratePump")]

        public VolumeFlowRateMeasure RatePump {
            get {
                return ratePumpField;
            } 
            set {
                ratePumpField = value;
                NotifyPropertyChanged("RatePump");
            }
        }

        private VolumeFlowRateMeasure ratePumpField; 


        /// <summary>
        /// Volume pumped = eTimPump * ratePump. 
        /// </summary>
		[XmlElement("volPump")]

        public VolumeMeasure VolPump {
            get {
                return volPumpField;
            } 
            set {
                volPumpField = value;
                NotifyPropertyChanged("VolPump");
            }
        }

        private VolumeMeasure volPumpField; 


        /// <summary>
        /// Number of pump strokes for the fluid to be pumped (assumes pump output known). 
        /// </summary>
		[XmlElement("strokePump")]

        public Int16? StrokePump {
            get {
                return strokePumpField;
            } 
            set {
                strokePumpField = value;
                this.StrokePumpSpecified = true;
                NotifyPropertyChanged("StrokePump");
            }
        }

        private Int16? strokePumpField; 


		/// <summary>
        /// strokePumpSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean StrokePumpSpecified {
            get {
                return strokePumpSpecifiedField;
            } 
            set {
                strokePumpSpecifiedField = value;
                NotifyPropertyChanged("StrokePumpSpecified");
            }
        }

        private Boolean strokePumpSpecifiedField; 


        /// <summary>
        /// Back pressure applied during pumping stage. 
        /// </summary>
		[XmlElement("presBack")]

        public PressureMeasure PresBack {
            get {
                return presBackField;
            } 
            set {
                presBackField = value;
                NotifyPropertyChanged("PresBack");
            }
        }

        private PressureMeasure presBackField; 


        /// <summary>
        /// If shutdown event, the elapsed time duration. 
        /// </summary>
		[XmlElement("eTimShutdown")]

        public TimeMeasure ETimeShutdown {
            get {
                return eTimShutdownField;
            } 
            set {
                eTimShutdownField = value;
                NotifyPropertyChanged("ETimeShutdown");
            }
        }

        private TimeMeasure eTimShutdownField; 


        /// <summary>
        /// Comments and Remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Cement Additive Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementAdditive", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Cement Additive Component Schema ")]
    public partial class CementAdditive : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Additive name. 
        /// </summary>
		[XmlElement("nameAdd")]

        public String NameAdd {
            get {
                return nameAddField;
            } 
            set {
                nameAddField = value;
                NotifyPropertyChanged("NameAdd");
            }
        }

        private String nameAddField; 


        /// <summary>
        /// Additive type or Function (Retarder, Visosifier, Weighting agent). 
        /// </summary>
		[XmlElement("typeAdd")]

        public String TypeAdd {
            get {
                return typeAddField;
            } 
            set {
                typeAddField = value;
                NotifyPropertyChanged("TypeAdd");
            }
        }

        private String typeAddField; 


        /// <summary>
        /// Wet or Dry. 
        /// </summary>
		[XmlElement("formAdd")]

        public String FormAdd {
            get {
                return formAddField;
            } 
            set {
                formAddField = value;
                NotifyPropertyChanged("FormAdd");
            }
        }

        private String formAddField; 


        /// <summary>
        /// Additive density. 
        /// </summary>
		[XmlElement("densAdd")]

        public DensityMeasure DensAdd {
            get {
                return densAddField;
            } 
            set {
                densAddField = value;
                NotifyPropertyChanged("DensAdd");
            }
        }

        private DensityMeasure densAddField; 


        /// <summary>
        /// ConcentrationType: %BWOC (%By weight of Cement), %BWOB (%By weight of blend), %BWOW (%By weight of water), %BWOBF (%By weight of base fluid) . If you set this property, you must also set Concentration.
        /// </summary>
        [XmlElement("typeConc")]
        public String TypeConc {
            get {
                return typeConcField;
            } 
            set {
                if (value != null && WeightSackSpecified) throw new Exception("Cannot set property TypeConc when property WeightSack is already set");
                if (value != null && VolSackSpecified) throw new Exception("Cannot set property TypeConc when property VolSack is already set");
                typeConcField = value;
                TypeConcSpecified = (value!=null);
                NotifyPropertyChanged("TypeConc");
            }
        }

        private String typeConcField; 
        /// <summary>
        /// Boolean to indicate if TypeConc has been set. Used for serialization.
        /// </summary>
        private Boolean TypeConcSpecified = false; 

        /// <summary>
        /// Concentration Amount: unit type depends of typeConc. . If you set this property, you must also set TypeConc.
        /// </summary>
        [XmlElement("concentration")]
        public MassConcentrationMeasure Concentration {
            get {
                return concentrationField;
            } 
            set {
                if (value != null && WeightSackSpecified) throw new Exception("Cannot set property Concentration when property WeightSack is already set");
                if (value != null && VolSackSpecified) throw new Exception("Cannot set property Concentration when property VolSack is already set");
                concentrationField = value;
                ConcentrationSpecified = (value!=null);
                NotifyPropertyChanged("Concentration");
            }
        }

        private MassConcentrationMeasure concentrationField; 
        /// <summary>
        /// Boolean to indicate if Concentration has been set. Used for serialization.
        /// </summary>
        private Boolean ConcentrationSpecified = false; 

        /// <summary>
        /// Concentration in terms of weight per sack.
        /// </summary>
        [XmlElement("wtSack")]
        public MassMeasure WeightSack {
            get {
                return wtSackField;
            } 
            set {
                if (value != null && ConcentrationSpecified) throw new Exception("Cannot set property WeightSack when property Concentration is already set");
                if (value != null && TypeConcSpecified) throw new Exception("Cannot set property WeightSack when property TypeConc is already set");
                if (value != null && VolSackSpecified) throw new Exception("Cannot set property WeightSack when property VolSack is already set");
                wtSackField = value;
                WeightSackSpecified = (value!=null);
                NotifyPropertyChanged("WeightSack");
            }
        }

        private MassMeasure wtSackField; 
        /// <summary>
        /// Boolean to indicate if WeightSack has been set. Used for serialization.
        /// </summary>
        private Boolean WeightSackSpecified = false; 

        /// <summary>
        /// Concentration in terms of volume per sack.
        /// </summary>
        [XmlElement("volSack")]
        public VolumeMeasure VolSack {
            get {
                return volSackField;
            } 
            set {
                if (value != null && ConcentrationSpecified) throw new Exception("Cannot set property VolSack when property Concentration is already set");
                if (value != null && TypeConcSpecified) throw new Exception("Cannot set property VolSack when property TypeConc is already set");
                if (value != null && WeightSackSpecified) throw new Exception("Cannot set property VolSack when property WeightSack is already set");
                volSackField = value;
                VolSackSpecified = (value!=null);
                NotifyPropertyChanged("VolSack");
            }
        }

        private VolumeMeasure volSackField; 
        /// <summary>
        /// Boolean to indicate if VolSack has been set. Used for serialization.
        /// </summary>
        private Boolean VolSackSpecified = false; 



        /// <summary>
        /// Additive Amount. 
        /// </summary>
		[XmlElement("additive")]

        public MassMeasure Additive {
            get {
                return additiveField;
            } 
            set {
                additiveField = value;
                NotifyPropertyChanged("Additive");
            }
        }

        private MassMeasure additiveField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Cement Test Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementTest", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Cement Test Component Schema ")]
    public partial class CementTest : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Test pressure. 
        /// </summary>
		[XmlElement("presTest")]

        public PressureMeasure PresTest {
            get {
                return presTestField;
            } 
            set {
                presTestField = value;
                NotifyPropertyChanged("PresTest");
            }
        }

        private PressureMeasure presTestField; 


        /// <summary>
        /// Elapsed tome to perform the test. 
        /// </summary>
		[XmlElement("eTimTest")]

        public TimeMeasure ETimeTest {
            get {
                return eTimTestField;
            } 
            set {
                eTimTestField = value;
                NotifyPropertyChanged("ETimeTest");
            }
        }

        private TimeMeasure eTimTestField; 


        /// <summary>
        /// Cement found between shoe and collar? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("cementShoeCollar")]

        public Boolean? CementShoeCollar {
            get {
                return cementShoeCollarField;
            } 
            set {
                cementShoeCollarField = value;
                this.CementShoeCollarSpecified = true;
                NotifyPropertyChanged("CementShoeCollar");
            }
        }

        private Boolean? cementShoeCollarField; 


		/// <summary>
        /// cementShoeCollarSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CementShoeCollarSpecified {
            get {
                return cementShoeCollarSpecifiedField;
            } 
            set {
                cementShoeCollarSpecifiedField = value;
                NotifyPropertyChanged("CementShoeCollarSpecified");
            }
        }

        private Boolean cementShoeCollarSpecifiedField; 


        /// <summary>
        /// Cement evaluation tool run. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("cetRun")]

        public Boolean? CetRun {
            get {
                return cetRunField;
            } 
            set {
                cetRunField = value;
                this.CetRunSpecified = true;
                NotifyPropertyChanged("CetRun");
            }
        }

        private Boolean? cetRunField; 


		/// <summary>
        /// cetRunSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CetRunSpecified {
            get {
                return cetRunSpecifiedField;
            } 
            set {
                cetRunSpecifiedField = value;
                NotifyPropertyChanged("CetRunSpecified");
            }
        }

        private Boolean cetRunSpecifiedField; 


        /// <summary>
        /// Cement evaluation tool bond quality. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("cetBondQual")]

        public Boolean? CetBondQual {
            get {
                return cetBondQualField;
            } 
            set {
                cetBondQualField = value;
                this.CetBondQualSpecified = true;
                NotifyPropertyChanged("CetBondQual");
            }
        }

        private Boolean? cetBondQualField; 


		/// <summary>
        /// cetBondQualSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CetBondQualSpecified {
            get {
                return cetBondQualSpecifiedField;
            } 
            set {
                cetBondQualSpecifiedField = value;
                NotifyPropertyChanged("CetBondQualSpecified");
            }
        }

        private Boolean cetBondQualSpecifiedField; 


        /// <summary>
        /// Cement bond log run? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("cblRun")]

        public Boolean? CblRun {
            get {
                return cblRunField;
            } 
            set {
                cblRunField = value;
                this.CblRunSpecified = true;
                NotifyPropertyChanged("CblRun");
            }
        }

        private Boolean? cblRunField; 


		/// <summary>
        /// cblRunSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CblRunSpecified {
            get {
                return cblRunSpecifiedField;
            } 
            set {
                cblRunSpecifiedField = value;
                NotifyPropertyChanged("CblRunSpecified");
            }
        }

        private Boolean cblRunSpecifiedField; 


        /// <summary>
        /// Cement bond log quality indication. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("cblBondQual")]

        public Boolean? CblBondQual {
            get {
                return cblBondQualField;
            } 
            set {
                cblBondQualField = value;
                this.CblBondQualSpecified = true;
                NotifyPropertyChanged("CblBondQual");
            }
        }

        private Boolean? cblBondQualField; 


		/// <summary>
        /// cblBondQualSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CblBondQualSpecified {
            get {
                return cblBondQualSpecifiedField;
            } 
            set {
                cblBondQualSpecifiedField = value;
                NotifyPropertyChanged("CblBondQualSpecified");
            }
        }

        private Boolean cblBondQualSpecifiedField; 


        /// <summary>
        /// Cement bond Log under pressure. 
        /// </summary>
		[XmlElement("cblPres")]

        public PressureMeasure CblPres {
            get {
                return cblPresField;
            } 
            set {
                cblPresField = value;
                NotifyPropertyChanged("CblPres");
            }
        }

        private PressureMeasure cblPresField; 


        /// <summary>
        /// Temperature survey run. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("tempSurvey")]

        public Boolean? TempSurvey {
            get {
                return tempSurveyField;
            } 
            set {
                tempSurveyField = value;
                this.TempSurveySpecified = true;
                NotifyPropertyChanged("TempSurvey");
            }
        }

        private Boolean? tempSurveyField; 


		/// <summary>
        /// tempSurveySpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TempSurveySpecified {
            get {
                return tempSurveySpecifiedField;
            } 
            set {
                tempSurveySpecifiedField = value;
                NotifyPropertyChanged("TempSurveySpecified");
            }
        }

        private Boolean tempSurveySpecifiedField; 


        /// <summary>
        /// Hours before logging run after cement run. 
        /// </summary>
		[XmlElement("eTimCementLog")]

        public TimeMeasure ETimeCementLog {
            get {
                return eTimCementLogField;
            } 
            set {
                eTimCementLogField = value;
                NotifyPropertyChanged("ETimeCementLog");
            }
        }

        private TimeMeasure eTimCementLogField; 


        /// <summary>
        /// PIT/LOT formation breakdown gradient or absolute pressure. 
        /// </summary>
		[XmlElement("formPit")]

        public ForcePerVolumeMeasure FormPit {
            get {
                return formPitField;
            } 
            set {
                formPitField = value;
                NotifyPropertyChanged("FormPit");
            }
        }

        private ForcePerVolumeMeasure formPitField; 


        /// <summary>
        /// Tool name for PIT. 
        /// </summary>
		[XmlElement("toolCompanyPit")]

        public String ToolCompanyPit {
            get {
                return toolCompanyPitField;
            } 
            set {
                toolCompanyPitField = value;
                NotifyPropertyChanged("ToolCompanyPit");
            }
        }

        private String toolCompanyPitField; 


        /// <summary>
        /// Hours between end of cement job-start of PIT. 
        /// </summary>
		[XmlElement("eTimPitStart")]

        public TimeMeasure ETimePitStart {
            get {
                return eTimPitStartField;
            } 
            set {
                eTimPitStartField = value;
                NotifyPropertyChanged("ETimePitStart");
            }
        }

        private TimeMeasure eTimPitStartField; 


        /// <summary>
        /// Measured depth at top of cement. 
        /// </summary>
		[XmlElement("mdCementTop")]

        public MeasuredDepthCoord MDCementTop {
            get {
                return mdCementTopField;
            } 
            set {
                mdCementTopField = value;
                NotifyPropertyChanged("MDCementTop");
            }
        }

        private MeasuredDepthCoord mdCementTopField; 


        /// <summary>
        /// Method to determine cement top. 
        /// </summary>
		[XmlElement("topCementMethod")]

        public String TopCementMethod {
            get {
                return topCementMethodField;
            } 
            set {
                topCementMethodField = value;
                NotifyPropertyChanged("TopCementMethod");
            }
        }

        private String topCementMethodField; 


        /// <summary>
        /// Is the top of cement sufficient? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("tocOK")]

        public Boolean? TocOK {
            get {
                return tocOKField;
            } 
            set {
                tocOKField = value;
                this.TocOKSpecified = true;
                NotifyPropertyChanged("TocOK");
            }
        }

        private Boolean? tocOKField; 


		/// <summary>
        /// tocOKSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TocOKSpecified {
            get {
                return tocOKSpecifiedField;
            } 
            set {
                tocOKSpecifiedField = value;
                NotifyPropertyChanged("TocOKSpecified");
            }
        }

        private Boolean tocOKSpecifiedField; 


        /// <summary>
        /// Job rating. 
        /// </summary>
		[XmlElement("jobRating")]

        public String JobRating {
            get {
                return jobRatingField;
            } 
            set {
                jobRatingField = value;
                NotifyPropertyChanged("JobRating");
            }
        }

        private String jobRatingField; 


        /// <summary>
        /// Remedial cement required. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("remedialCement")]

        public Boolean? RemedialCement {
            get {
                return remedialCementField;
            } 
            set {
                remedialCementField = value;
                this.RemedialCementSpecified = true;
                NotifyPropertyChanged("RemedialCement");
            }
        }

        private Boolean? remedialCementField; 


		/// <summary>
        /// remedialCementSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean RemedialCementSpecified {
            get {
                return remedialCementSpecifiedField;
            } 
            set {
                remedialCementSpecifiedField = value;
                NotifyPropertyChanged("RemedialCementSpecified");
            }
        }

        private Boolean remedialCementSpecifiedField; 


        /// <summary>
        /// Number of remedials. 
        /// </summary>
		[XmlElement("numRemedial")]

        public Int16? NumRemedial {
            get {
                return numRemedialField;
            } 
            set {
                numRemedialField = value;
                this.NumRemedialSpecified = true;
                NotifyPropertyChanged("NumRemedial");
            }
        }

        private Int16? numRemedialField; 


		/// <summary>
        /// numRemedialSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumRemedialSpecified {
            get {
                return numRemedialSpecifiedField;
            } 
            set {
                numRemedialSpecifiedField = value;
                NotifyPropertyChanged("NumRemedialSpecified");
            }
        }

        private Boolean numRemedialSpecifiedField; 


        /// <summary>
        /// Method used to determine if cement job unsuccessful. 
        /// </summary>
		[XmlElement("failureMethod")]

        public String FailureMethod {
            get {
                return failureMethodField;
            } 
            set {
                failureMethodField = value;
                NotifyPropertyChanged("FailureMethod");
            }
        }

        private String failureMethodField; 


        /// <summary>
        /// The distance to the top of the liner. 
        /// </summary>
		[XmlElement("linerTop")]

        public LengthMeasure LinerTop {
            get {
                return linerTopField;
            } 
            set {
                linerTopField = value;
                NotifyPropertyChanged("LinerTop");
            }
        }

        private LengthMeasure linerTopField; 


        /// <summary>
        /// Liner overlap length. 
        /// </summary>
		[XmlElement("linerLap")]

        public LengthMeasure LinerLap {
            get {
                return linerLapField;
            } 
            set {
                linerLapField = value;
                NotifyPropertyChanged("LinerLap");
            }
        }

        private LengthMeasure linerLapField; 


        /// <summary>
        /// Hours before liner top test. 
        /// </summary>
		[XmlElement("eTimBeforeTest")]

        public TimeMeasure ETimeBeforeTest {
            get {
                return eTimBeforeTestField;
            } 
            set {
                eTimBeforeTestField = value;
                NotifyPropertyChanged("ETimeBeforeTest");
            }
        }

        private TimeMeasure eTimBeforeTestField; 


        /// <summary>
        /// Test negative tool for Liner top seal. 
        /// </summary>
		[XmlElement("testNegativeTool")]

        public String TestNegativeTool {
            get {
                return testNegativeToolField;
            } 
            set {
                testNegativeToolField = value;
                NotifyPropertyChanged("TestNegativeTool");
            }
        }

        private String testNegativeToolField; 


        /// <summary>
        /// Equivalent mud weight. Negative Test? 
        /// </summary>
		[XmlElement("testNegativeEmw")]

        public DensityMeasure TestNegativeEmw {
            get {
                return testNegativeEmwField;
            } 
            set {
                testNegativeEmwField = value;
                NotifyPropertyChanged("TestNegativeEmw");
            }
        }

        private DensityMeasure testNegativeEmwField; 


        /// <summary>
        /// Test Positive Tool for liner top seal. 
        /// </summary>
		[XmlElement("testPositiveTool")]

        public String TestPositiveTool {
            get {
                return testPositiveToolField;
            } 
            set {
                testPositiveToolField = value;
                NotifyPropertyChanged("TestPositiveTool");
            }
        }

        private String testPositiveToolField; 


        /// <summary>
        /// Equivalent mud weight. Positive Test or absolute pressure . 
        /// </summary>
		[XmlElement("testPositiveEmw")]

        public DensityMeasure TestPositiveEmw {
            get {
                return testPositiveEmwField;
            } 
            set {
                testPositiveEmwField = value;
                NotifyPropertyChanged("TestPositiveEmw");
            }
        }

        private DensityMeasure testPositiveEmwField; 


        /// <summary>
        /// Cement found on tool? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("cementFoundOnTool")]

        public Boolean? CementFoundOnTool {
            get {
                return cementFoundOnToolField;
            } 
            set {
                cementFoundOnToolField = value;
                this.CementFoundOnToolSpecified = true;
                NotifyPropertyChanged("CementFoundOnTool");
            }
        }

        private Boolean? cementFoundOnToolField; 


		/// <summary>
        /// cementFoundOnToolSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CementFoundOnToolSpecified {
            get {
                return cementFoundOnToolSpecifiedField;
            } 
            set {
                cementFoundOnToolSpecifiedField = value;
                NotifyPropertyChanged("CementFoundOnToolSpecified");
            }
        }

        private Boolean cementFoundOnToolSpecifiedField; 


        /// <summary>
        /// Measured depth to diverter tool. 
        /// </summary>
		[XmlElement("mdDVTool")]

        public MeasuredDepthCoord MDDVTool {
            get {
                return mdDVToolField;
            } 
            set {
                mdDVToolField = value;
                NotifyPropertyChanged("MDDVTool");
            }
        }

        private MeasuredDepthCoord mdDVToolField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_convCores xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("convCores", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_convCores xsd type.")]
    public partial class ConvCoreList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single conventional core. 
        /// </summary>
		[XmlElement("convCore")]

        public List<ConvCore> ConvCore {
            get {
                return convCoreField;
            } 
            set {
                convCoreField = value;
                NotifyPropertyChanged("ConvCore");
            }
        }

        private List<ConvCore> convCoreField; 


        /// <summary>
        /// A single conventional core. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ConvCore;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Conventional Core.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_convCore", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Conventional Core.")]
    public partial class ConvCore : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the conventional core. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the conventional core. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Top depth of core interval. 
        /// </summary>
		[XmlElement("mdCoreTop")]

        public MeasuredDepthCoord MDCoreTop {
            get {
                return mdCoreTopField;
            } 
            set {
                mdCoreTopField = value;
                NotifyPropertyChanged("MDCoreTop");
            }
        }

        private MeasuredDepthCoord mdCoreTopField; 


        /// <summary>
        /// Bottom depth of core interval. 
        /// </summary>
		[XmlElement("mdCoreBottom")]

        public MeasuredDepthCoord MDCoreBottom {
            get {
                return mdCoreBottomField;
            } 
            set {
                mdCoreBottomField = value;
                NotifyPropertyChanged("MDCoreBottom");
            }
        }

        private MeasuredDepthCoord mdCoreBottomField; 


        /// <summary>
        /// Date and time when coring commenced (cutting new core). 
        /// </summary>
		[XmlElement("dTimCoreStart")]

        public DateTime? DateTimeCoreStart {
            get {
                return dTimCoreStartField;
            } 
            set {
                dTimCoreStartField = value;
                this.DateTimeCoreStartSpecified = true;
                NotifyPropertyChanged("DateTimeCoreStart");
            }
        }

        private DateTime? dTimCoreStartField; 


		/// <summary>
        /// dTimCoreStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeCoreStartSpecified {
            get {
                return dTimCoreStartSpecifiedField;
            } 
            set {
                dTimCoreStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCoreStartSpecified");
            }
        }

        private Boolean dTimCoreStartSpecifiedField; 


        /// <summary>
        /// Date and time when coring complete (end of cutting new core). 
        /// </summary>
		[XmlElement("dTimCoreEnd")]

        public DateTime? DateTimeCoreEnd {
            get {
                return dTimCoreEndField;
            } 
            set {
                dTimCoreEndField = value;
                this.DateTimeCoreEndSpecified = true;
                NotifyPropertyChanged("DateTimeCoreEnd");
            }
        }

        private DateTime? dTimCoreEndField; 


		/// <summary>
        /// dTimCoreEndSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeCoreEndSpecified {
            get {
                return dTimCoreEndSpecifiedField;
            } 
            set {
                dTimCoreEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCoreEndSpecified");
            }
        }

        private Boolean dTimCoreEndSpecifiedField; 


        /// <summary>
        /// Manufacturer core reference. 
        /// </summary>
		[XmlElement("coreReference")]

        public String CoreReference {
            get {
                return coreReferenceField;
            } 
            set {
                coreReferenceField = value;
                NotifyPropertyChanged("CoreReference");
            }
        }

        private String coreReferenceField; 


        /// <summary>
        /// Name of coring contractor. 
        /// </summary>
		[XmlElement("coringContractor")]

        public String CoringContractor {
            get {
                return coringContractorField;
            } 
            set {
                coringContractorField = value;
                NotifyPropertyChanged("CoringContractor");
            }
        }

        private String coringContractorField; 


        /// <summary>
        /// Name of analysis company. 
        /// </summary>
		[XmlElement("analysisContractor")]

        public String AnalysisContractor {
            get {
                return analysisContractorField;
            } 
            set {
                analysisContractorField = value;
                NotifyPropertyChanged("AnalysisContractor");
            }
        }

        private String analysisContractorField; 


        /// <summary>
        /// Core barrel type. 
        /// </summary>
		[XmlElement("coreBarrel")]

        public String CoreBarrel {
            get {
                return coreBarrelField;
            } 
            set {
                coreBarrelField = value;
                NotifyPropertyChanged("CoreBarrel");
            }
        }

        private String coreBarrelField; 


        /// <summary>
        /// Inner barrel used? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[XmlElement("innerBarrelUsed")]

        public Boolean? InnerBarrelUsed {
            get {
                return innerBarrelUsedField;
            } 
            set {
                innerBarrelUsedField = value;
                this.InnerBarrelUsedSpecified = true;
                NotifyPropertyChanged("InnerBarrelUsed");
            }
        }

        private Boolean? innerBarrelUsedField; 


		/// <summary>
        /// innerBarrelUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean InnerBarrelUsedSpecified {
            get {
                return innerBarrelUsedSpecifiedField;
            } 
            set {
                innerBarrelUsedSpecifiedField = value;
                NotifyPropertyChanged("InnerBarrelUsedSpecified");
            }
        }

        private Boolean innerBarrelUsedSpecifiedField; 


        /// <summary>
        /// Core inner barrel type. 
        /// </summary>
		[XmlElement("innerBarrelType")]

        public String InnerBarrelType {
            get {
                return innerBarrelTypeField;
            } 
            set {
                innerBarrelTypeField = value;
                NotifyPropertyChanged("InnerBarrelType");
            }
        }

        private String innerBarrelTypeField; 


        /// <summary>
        /// Length of core barrel. 
        /// </summary>
		[XmlElement("lenBarrel")]

        public LengthMeasure LenBarrel {
            get {
                return lenBarrelField;
            } 
            set {
                lenBarrelField = value;
                NotifyPropertyChanged("LenBarrel");
            }
        }

        private LengthMeasure lenBarrelField; 


        /// <summary>
        /// Core bit type. 
        /// </summary>
		[XmlElement("coreBitType")]

        public String CoreBitType {
            get {
                return coreBitTypeField;
            } 
            set {
                coreBitTypeField = value;
                NotifyPropertyChanged("CoreBitType");
            }
        }

        private String coreBitTypeField; 


        /// <summary>
        /// Core bit outer diameter. 
        /// </summary>
		[XmlElement("diaBit")]

        public LengthMeasure DiaBit {
            get {
                return diaBitField;
            } 
            set {
                diaBitField = value;
                NotifyPropertyChanged("DiaBit");
            }
        }

        private LengthMeasure diaBitField; 


        /// <summary>
        /// Core cut diameter. 
        /// </summary>
		[XmlElement("diaCore")]

        public LengthMeasure DiaCore {
            get {
                return diaCoreField;
            } 
            set {
                diaCoreField = value;
                NotifyPropertyChanged("DiaCore");
            }
        }

        private LengthMeasure diaCoreField; 


        /// <summary>
        /// Cored interval length. 
        /// </summary>
		[XmlElement("lenCored")]

        public LengthMeasure LenCored {
            get {
                return lenCoredField;
            } 
            set {
                lenCoredField = value;
                NotifyPropertyChanged("LenCored");
            }
        }

        private LengthMeasure lenCoredField; 


        /// <summary>
        /// Length of core recovered. 
        /// </summary>
		[XmlElement("lenRecovered")]

        public LengthMeasure LenRecovered {
            get {
                return lenRecoveredField;
            } 
            set {
                lenRecoveredField = value;
                NotifyPropertyChanged("LenRecovered");
            }
        }

        private LengthMeasure lenRecoveredField; 


        /// <summary>
        /// Calculate recovery (commonly in percent). 
        /// </summary>
		[XmlElement("recoverPc")]

        public VolumePerVolumeMeasure RecoverPercent {
            get {
                return recoverPcField;
            } 
            set {
                recoverPcField = value;
                NotifyPropertyChanged("RecoverPercent");
            }
        }

        private VolumePerVolumeMeasure recoverPcField; 


        /// <summary>
        /// Wellbore inclination over cored interval. 
        /// </summary>
		[XmlElement("inclHole")]

        public PlaneAngleMeasure InclHole {
            get {
                return inclHoleField;
            } 
            set {
                inclHoleField = value;
                NotifyPropertyChanged("InclHole");
            }
        }

        private PlaneAngleMeasure inclHoleField; 


        /// <summary>
        /// True if the core can be re-oriented in space after extraction when a tool-face has been used. Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[XmlElement("coreOrientation")]

        public Boolean? CoreOrientation {
            get {
                return coreOrientationField;
            } 
            set {
                coreOrientationField = value;
                this.CoreOrientationSpecified = true;
                NotifyPropertyChanged("CoreOrientation");
            }
        }

        private Boolean? coreOrientationField; 


		/// <summary>
        /// coreOrientationSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CoreOrientationSpecified {
            get {
                return coreOrientationSpecifiedField;
            } 
            set {
                coreOrientationSpecifiedField = value;
                NotifyPropertyChanged("CoreOrientationSpecified");
            }
        }

        private Boolean coreOrientationSpecifiedField; 


        /// <summary>
        /// Method to catch core - fiberglass barrel, conventional, etc. 
        /// </summary>
		[XmlElement("coreMethod")]

        public String CoreMethod {
            get {
                return coreMethodField;
            } 
            set {
                coreMethodField = value;
                NotifyPropertyChanged("CoreMethod");
            }
        }

        private String coreMethodField; 


        /// <summary>
        /// Preservation method description. 
        /// </summary>
		[XmlElement("coreTreatmentMethod")]

        public String CoreTreatmentMethod {
            get {
                return coreTreatmentMethodField;
            } 
            set {
                coreTreatmentMethodField = value;
                NotifyPropertyChanged("CoreTreatmentMethod");
            }
        }

        private String coreTreatmentMethodField; 


        /// <summary>
        /// Mud type in use when cutting core. 
        /// </summary>
		[XmlElement("coreFluidUsed")]

        public String CoreFluidUsed {
            get {
                return coreFluidUsedField;
            } 
            set {
                coreFluidUsedField = value;
                NotifyPropertyChanged("CoreFluidUsed");
            }
        }

        private String coreFluidUsedField; 


        /// <summary>
        /// Name of formation penetrated. 
        /// </summary>
		[XmlElement("nameFormation")]

        public String NameFormation {
            get {
                return nameFormationField;
            } 
            set {
                nameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private String nameFormationField; 


        /// <summary>
        /// Set of Geological intervals, descriptions, gas readings for the cored interval. 
        /// </summary>
		[XmlElement("geologyInterval")]

        public GeologyInterval GeologyInterval {
            get {
                return geologyIntervalField;
            } 
            set {
                geologyIntervalField = value;
                NotifyPropertyChanged("GeologyInterval");
            }
        }

        private GeologyInterval geologyIntervalField; 


        /// <summary>
        /// General core description. 
        /// </summary>
		[XmlElement("coreDescription")]

        public String CoreDescription {
            get {
                return coreDescriptionField;
            } 
            set {
                coreDescriptionField = value;
                NotifyPropertyChanged("CoreDescription");
            }
        }

        private String coreDescriptionField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Geology Interval Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_geologyInterval", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Geology Interval Component Schema")]
    public partial class GeologyInterval : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The type of lithology declaration. An interpreted type will specify one lithology for the whole interval (i.e., the percentage is 100%). A cuttings or core type may specify one or more lithologies for the interval based on a visual inspection of the cuttings or core and a relative percentage will be assigned to each lithology.
        /// </summary>
		[XmlElement("typeLithology")]

        public LithologySource? TypeLithology {
            get {
                return typeLithologyField;
            } 
            set {
                typeLithologyField = value;
                NotifyPropertyChanged("TypeLithology");
            }
        }

        private LithologySource? typeLithologyField; 


        /// <summary>
        /// Measured depth at top of interval.
        /// </summary>
		[XmlElement("mdTop")]

        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 


        /// <summary>
        /// Measured depth at base of interval. A point interval should be indicated by setting mdTop=mdBottom.
        /// </summary>
		[XmlElement("mdBottom")]

        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 


        /// <summary>
        /// Date and time the information is related to. The time refers to the top of the interval. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


		/// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 


        /// <summary>
        /// True vertical depth at top of the section. 
        /// </summary>
		[XmlElement("tvdTop")]

        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 


        /// <summary>
        /// True vertical depth at base of interval. 
        /// </summary>
		[XmlElement("tvdBase")]

        public WellVerticalDepthCoord TvdBase {
            get {
                return tvdBaseField;
            } 
            set {
                tvdBaseField = value;
                NotifyPropertyChanged("TvdBase");
            }
        }

        private WellVerticalDepthCoord tvdBaseField; 


        /// <summary>
        /// Average rate of penetration through Interval. 
        /// </summary>
		[XmlElement("ropAv")]

        public VelocityMeasure RopAverage {
            get {
                return ropAvField;
            } 
            set {
                ropAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private VelocityMeasure ropAvField; 


        /// <summary>
        /// Minimum rate of penetration through Interval. 
        /// </summary>
		[XmlElement("ropMn")]

        public VelocityMeasure RopMin {
            get {
                return ropMnField;
            } 
            set {
                ropMnField = value;
                NotifyPropertyChanged("RopMin");
            }
        }

        private VelocityMeasure ropMnField; 


        /// <summary>
        /// Maximum rate of penetration through Interval. 
        /// </summary>
		[XmlElement("ropMx")]

        public VelocityMeasure RopMax {
            get {
                return ropMxField;
            } 
            set {
                ropMxField = value;
                NotifyPropertyChanged("RopMax");
            }
        }

        private VelocityMeasure ropMxField; 


        /// <summary>
        /// Surface weight on bit - average through interval. 
        /// </summary>
		[XmlElement("wobAv")]

        public ForceMeasure WobAverage {
            get {
                return wobAvField;
            } 
            set {
                wobAvField = value;
                NotifyPropertyChanged("WobAverage");
            }
        }

        private ForceMeasure wobAvField; 


        /// <summary>
        /// Average torque through interval. 
        /// </summary>
		[XmlElement("tqAv")]

        public MomentOfForceMeasure TorqueAverage {
            get {
                return tqAvField;
            } 
            set {
                tqAvField = value;
                NotifyPropertyChanged("TorqueAverage");
            }
        }

        private MomentOfForceMeasure tqAvField; 


        /// <summary>
        /// Average current through interval. This is the raw measurement from which the average torque could be calculated.
        /// </summary>
		[XmlElement("currentAv")]

        public ElectricCurrentMeasure CurrentAverage {
            get {
                return currentAvField;
            } 
            set {
                currentAvField = value;
                NotifyPropertyChanged("CurrentAverage");
            }
        }

        private ElectricCurrentMeasure currentAvField; 


        /// <summary>
        /// Average turn rate through interval (commonly in rpm). 
        /// </summary>
		[XmlElement("rpmAv")]

        public AnglePerTimeMeasure RpmAverage {
            get {
                return rpmAvField;
            } 
            set {
                rpmAvField = value;
                NotifyPropertyChanged("RpmAverage");
            }
        }

        private AnglePerTimeMeasure rpmAvField; 


        /// <summary>
        /// Average mud density in through interval. 
        /// </summary>
		[XmlElement("wtMudAv")]

        public DensityMeasure WeightMudAverage {
            get {
                return wtMudAvField;
            } 
            set {
                wtMudAvField = value;
                NotifyPropertyChanged("WeightMudAverage");
            }
        }

        private DensityMeasure wtMudAvField; 


        /// <summary>
        /// Average effective circulating density at TD through Interval. 
        /// </summary>
		[XmlElement("ecdTdAv")]

        public DensityMeasure EcdTdAverage {
            get {
                return ecdTdAvField;
            } 
            set {
                ecdTdAvField = value;
                NotifyPropertyChanged("EcdTdAverage");
            }
        }

        private DensityMeasure ecdTdAvField; 


        /// <summary>
        /// Average drilling exponent through Interval. 
        /// </summary>
		[XmlElement("dxcAv")]

        public Double? DxcAverage {
            get {
                return dxcAvField;
            } 
            set {
                dxcAvField = value;
                this.DxcAverageSpecified = true;
                NotifyPropertyChanged("DxcAverage");
            }
        }

        private Double? dxcAvField; 


		/// <summary>
        /// dxcAvSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DxcAverageSpecified {
            get {
                return dxcAvSpecifiedField;
            } 
            set {
                dxcAvSpecifiedField = value;
                NotifyPropertyChanged("DxcAverageSpecified");
            }
        }

        private Boolean dxcAvSpecifiedField; 


        /// <summary>
        /// Set of lithology records for the Interval. 
        /// </summary>
		[XmlElement("lithology")]

        public List<Lithology> Lithology {
            get {
                return lithologyField;
            } 
            set {
                lithologyField = value;
                NotifyPropertyChanged("Lithology");
            }
        }

        private List<Lithology> lithologyField; 


        /// <summary>
        /// Show record through the Interval. 
        /// </summary>
		[XmlElement("show")]

        public Show Show {
            get {
                return showField;
            } 
            set {
                showField = value;
                NotifyPropertyChanged("Show");
            }
        }

        private Show showField; 


        /// <summary>
        /// Chromatographic break down for the interval. 
        /// </summary>
		[XmlElement("chromatograph")]

        public Chromatograph Chromatograph {
            get {
                return chromatographField;
            } 
            set {
                chromatographField = value;
                NotifyPropertyChanged("Chromatograph");
            }
        }

        private Chromatograph chromatographField; 


        /// <summary>
        /// Total gas readings associated with this interval. 
        /// </summary>
		[XmlElement("mudGas")]

        public MudGas MudGas {
            get {
                return mudGasField;
            } 
            set {
                mudGasField = value;
                NotifyPropertyChanged("MudGas");
            }
        }

        private MudGas mudGasField; 


        /// <summary>
        /// Sample bulk density for the interval. 
        /// </summary>
		[XmlElement("densBulk")]

        public DensityMeasure DensBulk {
            get {
                return densBulkField;
            } 
            set {
                densBulkField = value;
                NotifyPropertyChanged("DensBulk");
            }
        }

        private DensityMeasure densBulkField; 


        /// <summary>
        /// Shale density for the interval. 
        /// </summary>
		[XmlElement("densShale")]

        public DensityMeasure DensShale {
            get {
                return densShaleField;
            } 
            set {
                densShaleField = value;
                NotifyPropertyChanged("DensShale");
            }
        }

        private DensityMeasure densShaleField; 


        /// <summary>
        /// Calcimetry calcite percentage. 
        /// </summary>
		[XmlElement("calcite")]

        public VolumePerVolumeMeasure Calcite {
            get {
                return calciteField;
            } 
            set {
                calciteField = value;
                NotifyPropertyChanged("Calcite");
            }
        }

        private VolumePerVolumeMeasure calciteField; 


        /// <summary>
        /// Calcimetry dolomite percentage. 
        /// </summary>
		[XmlElement("dolomite")]

        public VolumePerVolumeMeasure Dolomite {
            get {
                return dolomiteField;
            } 
            set {
                dolomiteField = value;
                NotifyPropertyChanged("Dolomite");
            }
        }

        private VolumePerVolumeMeasure dolomiteField; 


        /// <summary>
        /// Cuttings cationic exchange capacity. 
        /// </summary>
		[XmlElement("cec")]

        public EquivalentPerMassMeasure Cec {
            get {
                return cecField;
            } 
            set {
                cecField = value;
                NotifyPropertyChanged("Cec");
            }
        }

        private EquivalentPerMassMeasure cecField; 


        /// <summary>
        /// Fluorescence as measured using a device licensed for the Quantitative Fluorescence Technique.
        /// </summary>
		[XmlElement("qft")]

        public IlluminanceMeasure Qft {
            get {
                return qftField;
            } 
            set {
                qftField = value;
                NotifyPropertyChanged("Qft");
            }
        }

        private IlluminanceMeasure qftField; 


        /// <summary>
        /// Calcimetry stabilized percentage. 
        /// </summary>
		[XmlElement("calcStab")]

        public VolumePerVolumeMeasure CalcStab {
            get {
                return calcStabField;
            } 
            set {
                calcStabField = value;
                NotifyPropertyChanged("CalcStab");
            }
        }

        private VolumePerVolumeMeasure calcStabField; 


        /// <summary>
        /// Name of formation penetrated. 
        /// </summary>
		[XmlElement("nameFormation")]

        public List<String> NameFormation {
            get {
                return nameFormationField;
            } 
            set {
                nameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private List<String> nameFormationField; 


        /// <summary>
        /// Name of formation, regionally dependent. 
        /// </summary>
		[XmlElement("lithostratigraphic")]

        public List<String> Lithostratigraphic {
            get {
                return lithostratigraphicField;
            } 
            set {
                lithostratigraphicField = value;
                NotifyPropertyChanged("Lithostratigraphic");
            }
        }

        private List<String> lithostratigraphicField; 


        /// <summary>
        /// Chronostratigraphic classification. 
        /// </summary>
		[XmlElement("chronostratigraphic")]

        public List<String> Chronostratigraphic {
            get {
                return chronostratigraphicField;
            } 
            set {
                chronostratigraphicField = value;
                NotifyPropertyChanged("Chronostratigraphic");
            }
        }

        private List<String> chronostratigraphicField; 


        /// <summary>
        /// Minimum size. 
        /// </summary>
		[XmlElement("sizeMn")]

        public LengthMeasure SizeMin {
            get {
                return sizeMnField;
            } 
            set {
                sizeMnField = value;
                NotifyPropertyChanged("SizeMin");
            }
        }

        private LengthMeasure sizeMnField; 


        /// <summary>
        /// Maximum size. 
        /// </summary>
		[XmlElement("sizeMx")]

        public LengthMeasure SizeMax {
            get {
                return sizeMxField;
            } 
            set {
                sizeMxField = value;
                NotifyPropertyChanged("SizeMax");
            }
        }

        private LengthMeasure sizeMxField; 


        /// <summary>
        /// Plug length. 
        /// </summary>
		[XmlElement("lenPlug")]

        public LengthMeasure LenPlug {
            get {
                return lenPlugField;
            } 
            set {
                lenPlugField = value;
                NotifyPropertyChanged("LenPlug");
            }
        }

        private LengthMeasure lenPlugField; 


        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// Sample treatment : cutting fluid. 
        /// </summary>
		[XmlElement("cuttingFluid")]

        public String CuttingFluid {
            get {
                return cuttingFluidField;
            } 
            set {
                cuttingFluidField = value;
                NotifyPropertyChanged("CuttingFluid");
            }
        }

        private String cuttingFluidField; 


        /// <summary>
        /// Sample treatment : cleaning method. 
        /// </summary>
		[XmlElement("cleaningMethod")]

        public String CleaningMethod {
            get {
                return cleaningMethodField;
            } 
            set {
                cleaningMethodField = value;
                NotifyPropertyChanged("CleaningMethod");
            }
        }

        private String cleaningMethodField; 


        /// <summary>
        /// Sample treatment : drying method. 
        /// </summary>
		[XmlElement("dryingMethod")]

        public String DryingMethod {
            get {
                return dryingMethodField;
            } 
            set {
                dryingMethodField = value;
                NotifyPropertyChanged("DryingMethod");
            }
        }

        private String dryingMethodField; 


        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Lithology Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_lithology", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Lithology Component Schema")]
    public partial class Lithology : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The type of lithology. 
        /// </summary>
		[XmlElement("type")]

        public LithologyType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private LithologyType typeField; 


		/// <summary>
        /// typeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeSpecified {
            get {
                return typeSpecifiedField;
            } 
            set {
                typeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private Boolean typeSpecifiedField; 


        /// <summary>
        /// Lithology official codes if desired. Operator typically to define what the codes are. 
        /// </summary>
		[XmlElement("codeLith")]

        public String CodeLith {
            get {
                return codeLithField;
            } 
            set {
                codeLithField = value;
                NotifyPropertyChanged("CodeLith");
            }
        }

        private String codeLithField; 


        /// <summary>
        /// The lithology represents what portion of the sampled interval. The total of the lithologies within an interval should add up to 100 percent. The "undifferentiated" code should be used to fill out to 100.
        /// </summary>
		[XmlElement("lithPc")]

        public VolumePerVolumeMeasurePercent LithPercent {
            get {
                return lithPcField;
            } 
            set {
                lithPcField = value;
                NotifyPropertyChanged("LithPercent");
            }
        }

        private VolumePerVolumeMeasurePercent lithPcField; 


        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// Lithology classification description. 
        /// </summary>
		[XmlElement("lithClass")]

        public String LithClass {
            get {
                return lithClassField;
            } 
            set {
                lithClassField = value;
                NotifyPropertyChanged("LithClass");
            }
        }

        private String lithClassField; 


        /// <summary>
        /// Granulometry. 
        /// </summary>
		[XmlElement("grainType")]

        public String GrainType {
            get {
                return grainTypeField;
            } 
            set {
                grainTypeField = value;
                NotifyPropertyChanged("GrainType");
            }
        }

        private String grainTypeField; 


        /// <summary>
        /// Dunham limestone classification. 
        /// </summary>
		[XmlElement("dunhamClass")]

        public String DunhamClass {
            get {
                return dunhamClassField;
            } 
            set {
                dunhamClassField = value;
                NotifyPropertyChanged("DunhamClass");
            }
        }

        private String dunhamClassField; 


        /// <summary>
        /// Lithology color description. 
        /// </summary>
		[XmlElement("color")]

        public String Color {
            get {
                return colorField;
            } 
            set {
                colorField = value;
                NotifyPropertyChanged("Color");
            }
        }

        private String colorField; 


        /// <summary>
        /// Lithology texture description. 
        /// </summary>
		[XmlElement("texture")]

        public String Texture {
            get {
                return textureField;
            } 
            set {
                textureField = value;
                NotifyPropertyChanged("Texture");
            }
        }

        private String textureField; 


        /// <summary>
        /// Lithology hardness description. 
        /// </summary>
		[XmlElement("hardness")]

        public String Hardness {
            get {
                return hardnessField;
            } 
            set {
                hardnessField = value;
                NotifyPropertyChanged("Hardness");
            }
        }

        private String hardnessField; 


        /// <summary>
        /// Lithology grain size description. 
        /// </summary>
		[XmlElement("sizeGrain")]

        public String SizeGrain {
            get {
                return sizeGrainField;
            } 
            set {
                sizeGrainField = value;
                NotifyPropertyChanged("SizeGrain");
            }
        }

        private String sizeGrainField; 


        /// <summary>
        /// Lithology roundness description. 
        /// </summary>
		[XmlElement("roundness")]

        public String Roundness {
            get {
                return roundnessField;
            } 
            set {
                roundnessField = value;
                NotifyPropertyChanged("Roundness");
            }
        }

        private String roundnessField; 


        /// <summary>
        /// Lithology sorting description. 
        /// </summary>
		[XmlElement("sorting")]

        public String Sorting {
            get {
                return sortingField;
            } 
            set {
                sortingField = value;
                NotifyPropertyChanged("Sorting");
            }
        }

        private String sortingField; 


        /// <summary>
        /// Lithology matrix/cement description. 
        /// </summary>
		[XmlElement("matrixCement")]

        public String MatrixCement {
            get {
                return matrixCementField;
            } 
            set {
                matrixCementField = value;
                NotifyPropertyChanged("MatrixCement");
            }
        }

        private String matrixCementField; 


        /// <summary>
        /// Lithology visible porosity description. 
        /// </summary>
		[XmlElement("porosityVisible")]

        public String PorosityVisible {
            get {
                return porosityVisibleField;
            } 
            set {
                porosityVisibleField = value;
                NotifyPropertyChanged("PorosityVisible");
            }
        }

        private String porosityVisibleField; 


        /// <summary>
        /// Lithology permeability description. 
        /// </summary>
		[XmlElement("permeability")]

        public String Permeability {
            get {
                return permeabilityField;
            } 
            set {
                permeabilityField = value;
                NotifyPropertyChanged("Permeability");
            }
        }

        private String permeabilityField; 


        /// <summary>
        /// Shale density for the interval. 
        /// </summary>
		[XmlElement("densShale")]

        public DensityMeasure DensShale {
            get {
                return densShaleField;
            } 
            set {
                densShaleField = value;
                NotifyPropertyChanged("DensShale");
            }
        }

        private DensityMeasure densShaleField; 


        /// <summary>
        /// A single qualifier. In mudlogging terms, a qualifier is a graphical symbol in the Interpreted Lithology column of the Formation Evaluation Log (aka "the mudlog"). In addition to the major lithologies (e.g., sand, shale, etc) existing in the sample, other minerals (present as accessories or inclusions e.g. chert, pyrite, glauconite) and fossils (forams, oyster shells, bryozoans, etc) may exist and their abundance is generally categorized using ranges such as Trace (less than 10%), Common (10-25%) and Abundant (greater than 25%). These additional minerals and fossils can be of disproportionately great diagnostic and descriptive value. For example, qualifiers can be used to indicate facies changes, marker beds or something that impacted drilling conditions. These qualifiers (representing accessories, inclusions and/or fossils) are used to rapidly and graphically indicate to the recipient of the mudlog that a significant lithological event was encountered while drilling the well. 
        /// </summary>
		[XmlElement("qualifier")]

        public List<Qualifier> Qualifier {
            get {
                return qualifierField;
            } 
            set {
                qualifierField = value;
                NotifyPropertyChanged("Qualifier");
            }
        }

        private List<Qualifier> qualifierField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - lithology qualifier Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_qualifier", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - lithology qualifier Component Schema")]
    public partial class Qualifier : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The type of qualifier.
        /// </summary>
		[XmlElement("type")]

        public QualifierType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private QualifierType typeField; 


        /// <summary>
        /// The measured depth at the top of the interval represented by the qualifier. This must be within the range of the parent geologic interval.
        /// </summary>
		[XmlElement("mdTop")]

        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 


        /// <summary>
        /// The measured depth at the bottom of the interval represented by the qualifier. A point can be indicated by specifying bottom=top. This must be within the range of the parent geologic interval.
        /// </summary>
		[XmlElement("mdBottom")]

        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 


        /// <summary>
        /// The relative abundance of the qualifier. This is usually estimated based on a "visual area" basis by inspecting the cuttings spread out on the shaker table. This either represents a point value or the upperbound of a range (e.g., 0% to 10%).
        /// </summary>
		[XmlElement("abundance")]

        public VolumePerVolumeMeasurePercent Abundance {
            get {
                return abundanceField;
            } 
            set {
                abundanceField = value;
                NotifyPropertyChanged("Abundance");
            }
        }

        private VolumePerVolumeMeasurePercent abundanceField; 


        /// <summary>
        /// A code associated with the relative abundance of the qualifier. For example, "trace", "common" or "abundant". This is generally a proprietary code. The interoperable semantics are provided by the above abundance value. The presumption is that the value range associated with a code is mapped to a single value. On the other end of an exchange, the single value is mapped to the range associated with the local codes on that end.
        /// </summary>
		[XmlElement("abundanceCode")]

        public String AbundanceCode {
            get {
                return abundanceCodeField;
            } 
            set {
                abundanceCodeField = value;
                NotifyPropertyChanged("AbundanceCode");
            }
        }

        private String abundanceCodeField; 


        /// <summary>
        /// A textual description of the qualifier.
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML Geology Show Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_show", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML Geology Show Component Schema")]
    public partial class Show : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Show Rating. 
        /// </summary>
		[XmlElement("showRat")]

        public ShowRating? ShowRat {
            get {
                return showRatField;
            } 
            set {
                showRatField = value;
                this.ShowRatSpecified = true;
                NotifyPropertyChanged("ShowRat");
            }
        }

        private ShowRating? showRatField; 


		/// <summary>
        /// showRatSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ShowRatSpecified {
            get {
                return showRatSpecifiedField;
            } 
            set {
                showRatSpecifiedField = value;
                NotifyPropertyChanged("ShowRatSpecified");
            }
        }

        private Boolean showRatSpecifiedField; 


        /// <summary>
        /// Visible Stain Color. 
        /// </summary>
		[XmlElement("stainColor")]

        public String StainColor {
            get {
                return stainColorField;
            } 
            set {
                stainColorField = value;
                NotifyPropertyChanged("StainColor");
            }
        }

        private String stainColorField; 


        /// <summary>
        /// Visible Stain Distribution. 
        /// </summary>
		[XmlElement("stainDistr")]

        public String StainDistr {
            get {
                return stainDistrField;
            } 
            set {
                stainDistrField = value;
                NotifyPropertyChanged("StainDistr");
            }
        }

        private String stainDistrField; 


        /// <summary>
        /// Visible Stain (commonly in percent). 
        /// </summary>
		[XmlElement("stainPc")]

        public AreaPerAreaMeasure StainPercent {
            get {
                return stainPcField;
            } 
            set {
                stainPcField = value;
                NotifyPropertyChanged("StainPercent");
            }
        }

        private AreaPerAreaMeasure stainPcField; 


        /// <summary>
        /// Natural Fluorescence Color. 
        /// </summary>
		[XmlElement("natFlorColor")]

        public String NatFlorColor {
            get {
                return natFlorColorField;
            } 
            set {
                natFlorColorField = value;
                NotifyPropertyChanged("NatFlorColor");
            }
        }

        private String natFlorColorField; 


        /// <summary>
        /// Natural fluorescence (commonly in percent). 
        /// </summary>
		[XmlElement("natFlorPc")]

        public AreaPerAreaMeasure NatFlorPercent {
            get {
                return natFlorPcField;
            } 
            set {
                natFlorPcField = value;
                NotifyPropertyChanged("NatFlorPercent");
            }
        }

        private AreaPerAreaMeasure natFlorPcField; 


        /// <summary>
        /// Natural fluorescence level. 
        /// </summary>
		[XmlElement("natFlorLevel")]

        public ShowFluorescence? NatFlorLevel {
            get {
                return natFlorLevelField;
            } 
            set {
                natFlorLevelField = value;
                this.NatFlorLevelSpecified = true;
                NotifyPropertyChanged("NatFlorLevel");
            }
        }

        private ShowFluorescence? natFlorLevelField; 


		/// <summary>
        /// natFlorLevelSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NatFlorLevelSpecified {
            get {
                return natFlorLevelSpecifiedField;
            } 
            set {
                natFlorLevelSpecifiedField = value;
                NotifyPropertyChanged("NatFlorLevelSpecified");
            }
        }

        private Boolean natFlorLevelSpecifiedField; 


        /// <summary>
        /// Natural fluorescence description. 
        /// </summary>
		[XmlElement("natFlorDesc")]

        public String NatFlorDesc {
            get {
                return natFlorDescField;
            } 
            set {
                natFlorDescField = value;
                NotifyPropertyChanged("NatFlorDesc");
            }
        }

        private String natFlorDescField; 


        /// <summary>
        /// Cut color. 
        /// </summary>
		[XmlElement("cutColor")]

        public String CutColor {
            get {
                return cutColorField;
            } 
            set {
                cutColorField = value;
                NotifyPropertyChanged("CutColor");
            }
        }

        private String cutColorField; 


        /// <summary>
        /// Cut speed. 
        /// </summary>
		[XmlElement("cutSpeed")]

        public ShowSpeed? CutSpeed {
            get {
                return cutSpeedField;
            } 
            set {
                cutSpeedField = value;
                this.CutSpeedSpecified = true;
                NotifyPropertyChanged("CutSpeed");
            }
        }

        private ShowSpeed? cutSpeedField; 


		/// <summary>
        /// cutSpeedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CutSpeedSpecified {
            get {
                return cutSpeedSpecifiedField;
            } 
            set {
                cutSpeedSpecifiedField = value;
                NotifyPropertyChanged("CutSpeedSpecified");
            }
        }

        private Boolean cutSpeedSpecifiedField; 


        /// <summary>
        /// Cut strength. 
        /// </summary>
		[XmlElement("cutStrength")]

        public String CutStrength {
            get {
                return cutStrengthField;
            } 
            set {
                cutStrengthField = value;
                NotifyPropertyChanged("CutStrength");
            }
        }

        private String cutStrengthField; 


        /// <summary>
        /// Cut formulation. 
        /// </summary>
		[XmlElement("cutForm")]

        public ShowLevel? CutForm {
            get {
                return cutFormField;
            } 
            set {
                cutFormField = value;
                this.CutFormSpecified = true;
                NotifyPropertyChanged("CutForm");
            }
        }

        private ShowLevel? cutFormField; 


		/// <summary>
        /// cutFormSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CutFormSpecified {
            get {
                return cutFormSpecifiedField;
            } 
            set {
                cutFormSpecifiedField = value;
                NotifyPropertyChanged("CutFormSpecified");
            }
        }

        private Boolean cutFormSpecifiedField; 


        /// <summary>
        /// Cut level (Faint, Bright, etc.). 
        /// </summary>
		[XmlElement("cutLevel")]

        public String CutLevel {
            get {
                return cutLevelField;
            } 
            set {
                cutLevelField = value;
                NotifyPropertyChanged("CutLevel");
            }
        }

        private String cutLevelField; 


        /// <summary>
        /// Cut fluorescence color. 
        /// </summary>
		[XmlElement("cutFlorColor")]

        public String CutFlorColor {
            get {
                return cutFlorColorField;
            } 
            set {
                cutFlorColorField = value;
                NotifyPropertyChanged("CutFlorColor");
            }
        }

        private String cutFlorColorField; 


        /// <summary>
        /// Cut fluorescence speed. 
        /// </summary>
		[XmlElement("cutFlorSpeed")]

        public ShowSpeed? CutFlorSpeed {
            get {
                return cutFlorSpeedField;
            } 
            set {
                cutFlorSpeedField = value;
                this.CutFlorSpeedSpecified = true;
                NotifyPropertyChanged("CutFlorSpeed");
            }
        }

        private ShowSpeed? cutFlorSpeedField; 


		/// <summary>
        /// cutFlorSpeedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CutFlorSpeedSpecified {
            get {
                return cutFlorSpeedSpecifiedField;
            } 
            set {
                cutFlorSpeedSpecifiedField = value;
                NotifyPropertyChanged("CutFlorSpeedSpecified");
            }
        }

        private Boolean cutFlorSpeedSpecifiedField; 


        /// <summary>
        /// Cut fluorescence strength. 
        /// </summary>
		[XmlElement("cutFlorStrength")]

        public String CutFlorStrength {
            get {
                return cutFlorStrengthField;
            } 
            set {
                cutFlorStrengthField = value;
                NotifyPropertyChanged("CutFlorStrength");
            }
        }

        private String cutFlorStrengthField; 


        /// <summary>
        /// Cut fluorescence form. 
        /// </summary>
		[XmlElement("cutFlorForm")]

        public ShowLevel? CutFlorForm {
            get {
                return cutFlorFormField;
            } 
            set {
                cutFlorFormField = value;
                this.CutFlorFormSpecified = true;
                NotifyPropertyChanged("CutFlorForm");
            }
        }

        private ShowLevel? cutFlorFormField; 


		/// <summary>
        /// cutFlorFormSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CutFlorFormSpecified {
            get {
                return cutFlorFormSpecifiedField;
            } 
            set {
                cutFlorFormSpecifiedField = value;
                NotifyPropertyChanged("CutFlorFormSpecified");
            }
        }

        private Boolean cutFlorFormSpecifiedField; 


        /// <summary>
        /// Cut fluorescence level. 
        /// </summary>
		[XmlElement("cutFlorLevel")]

        public ShowFluorescence? CutFlorLevel {
            get {
                return cutFlorLevelField;
            } 
            set {
                cutFlorLevelField = value;
                this.CutFlorLevelSpecified = true;
                NotifyPropertyChanged("CutFlorLevel");
            }
        }

        private ShowFluorescence? cutFlorLevelField; 


		/// <summary>
        /// cutFlorLevelSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CutFlorLevelSpecified {
            get {
                return cutFlorLevelSpecifiedField;
            } 
            set {
                cutFlorLevelSpecifiedField = value;
                NotifyPropertyChanged("CutFlorLevelSpecified");
            }
        }

        private Boolean cutFlorLevelSpecifiedField; 


        /// <summary>
        /// Residue color. 
        /// </summary>
		[XmlElement("residueColor")]

        public String ResidueColor {
            get {
                return residueColorField;
            } 
            set {
                residueColorField = value;
                NotifyPropertyChanged("ResidueColor");
            }
        }

        private String residueColorField; 


        /// <summary>
        /// Free format show description. 
        /// </summary>
		[XmlElement("showDesc")]

        public String ShowDesc {
            get {
                return showDescField;
            } 
            set {
                showDescField = value;
                NotifyPropertyChanged("ShowDesc");
            }
        }

        private String showDescField; 


        /// <summary>
        /// Impregnated lithology. 
        /// </summary>
		[XmlElement("impregnatedLitho")]

        public String ImpregnatedLitho {
            get {
                return impregnatedLithoField;
            } 
            set {
                impregnatedLithoField = value;
                NotifyPropertyChanged("ImpregnatedLitho");
            }
        }

        private String impregnatedLithoField; 


        /// <summary>
        /// Description of any hydrocarbon type odors smelled. 
        /// </summary>
		[XmlElement("odor")]

        public String Odor {
            get {
                return odorField;
            } 
            set {
                odorField = value;
                NotifyPropertyChanged("Odor");
            }
        }

        private String odorField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Chromatographic Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_chromatograph", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Chromatographic Component Schema ")]
    public partial class Chromatograph : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The date and time at which the gas sample was processed. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


		/// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 


        /// <summary>
        /// Measured depth at top of Interval. 
        /// </summary>
		[XmlElement("mdTop")]

        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 


        /// <summary>
        /// Measured depth at base of interval. 
        /// </summary>
		[XmlElement("mdBottom")]

        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 


        /// <summary>
        /// Mud density in (active pits). 
        /// </summary>
		[XmlElement("wtMudIn")]

        public DensityMeasure WeightMudIn {
            get {
                return wtMudInField;
            } 
            set {
                wtMudInField = value;
                NotifyPropertyChanged("WeightMudIn");
            }
        }

        private DensityMeasure wtMudInField; 


        /// <summary>
        /// Mud density out (flowline). 
        /// </summary>
		[XmlElement("wtMudOut")]

        public DensityMeasure WeightMudOut {
            get {
                return wtMudOutField;
            } 
            set {
                wtMudOutField = value;
                NotifyPropertyChanged("WeightMudOut");
            }
        }

        private DensityMeasure wtMudOutField; 


        /// <summary>
        /// Chromatograph type. 
        /// </summary>
		[XmlElement("chromType")]

        public String ChromType {
            get {
                return chromTypeField;
            } 
            set {
                chromTypeField = value;
                NotifyPropertyChanged("ChromType");
            }
        }

        private String chromTypeField; 


        /// <summary>
        /// Chromatograph cycle time. Commonly in seconds. 
        /// </summary>
		[XmlElement("eTimChromCycle")]

        public TimeMeasure ETimeChromCycle {
            get {
                return eTimChromCycleField;
            } 
            set {
                eTimChromCycleField = value;
                NotifyPropertyChanged("ETimeChromCycle");
            }
        }

        private TimeMeasure eTimChromCycleField; 


        /// <summary>
        /// Chromatograph integrator report time, format may be variable due to recording equipment 
        /// </summary>
		[XmlElement("chromIntRpt")]

        public DateTime? ChromIntRpt {
            get {
                return chromIntRptField;
            } 
            set {
                chromIntRptField = value;
                this.ChromIntRptSpecified = true;
                NotifyPropertyChanged("ChromIntRpt");
            }
        }

        private DateTime? chromIntRptField; 


		/// <summary>
        /// chromIntRptSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ChromIntRptSpecified {
            get {
                return chromIntRptSpecifiedField;
            } 
            set {
                chromIntRptSpecifiedField = value;
                NotifyPropertyChanged("ChromIntRptSpecified");
            }
        }

        private Boolean chromIntRptSpecifiedField; 


        /// <summary>
        /// Methane (C1) ppm (average). 
        /// </summary>
		[XmlElement("methAv")]

        public VolumePerVolumeMeasure MethAverage {
            get {
                return methAvField;
            } 
            set {
                methAvField = value;
                NotifyPropertyChanged("MethAverage");
            }
        }

        private VolumePerVolumeMeasure methAvField; 


        /// <summary>
        /// Methane (C1) ppm (minimum). 
        /// </summary>
		[XmlElement("methMn")]

        public VolumePerVolumeMeasure MethMin {
            get {
                return methMnField;
            } 
            set {
                methMnField = value;
                NotifyPropertyChanged("MethMin");
            }
        }

        private VolumePerVolumeMeasure methMnField; 


        /// <summary>
        /// Methane (C1) ppm (maximum). 
        /// </summary>
		[XmlElement("methMx")]

        public VolumePerVolumeMeasure MethMax {
            get {
                return methMxField;
            } 
            set {
                methMxField = value;
                NotifyPropertyChanged("MethMax");
            }
        }

        private VolumePerVolumeMeasure methMxField; 


        /// <summary>
        /// Ethane (C2) ppm (average). 
        /// </summary>
		[XmlElement("ethAv")]

        public VolumePerVolumeMeasure EthAverage {
            get {
                return ethAvField;
            } 
            set {
                ethAvField = value;
                NotifyPropertyChanged("EthAverage");
            }
        }

        private VolumePerVolumeMeasure ethAvField; 


        /// <summary>
        /// Ethane (C2) ppm (minimum). 
        /// </summary>
		[XmlElement("ethMn")]

        public VolumePerVolumeMeasure EthMin {
            get {
                return ethMnField;
            } 
            set {
                ethMnField = value;
                NotifyPropertyChanged("EthMin");
            }
        }

        private VolumePerVolumeMeasure ethMnField; 


        /// <summary>
        /// Ethane (C2) ppm (maximum). 
        /// </summary>
		[XmlElement("ethMx")]

        public VolumePerVolumeMeasure EthMax {
            get {
                return ethMxField;
            } 
            set {
                ethMxField = value;
                NotifyPropertyChanged("EthMax");
            }
        }

        private VolumePerVolumeMeasure ethMxField; 


        /// <summary>
        /// Propane (C3) ppm (average). 
        /// </summary>
		[XmlElement("propAv")]

        public VolumePerVolumeMeasure PropAverage {
            get {
                return propAvField;
            } 
            set {
                propAvField = value;
                NotifyPropertyChanged("PropAverage");
            }
        }

        private VolumePerVolumeMeasure propAvField; 


        /// <summary>
        /// Propane (C3) ppm (minimum). 
        /// </summary>
		[XmlElement("propMn")]

        public VolumePerVolumeMeasure PropMin {
            get {
                return propMnField;
            } 
            set {
                propMnField = value;
                NotifyPropertyChanged("PropMin");
            }
        }

        private VolumePerVolumeMeasure propMnField; 


        /// <summary>
        /// Propane (C3) ppm (maximum). 
        /// </summary>
		[XmlElement("propMx")]

        public VolumePerVolumeMeasure PropMax {
            get {
                return propMxField;
            } 
            set {
                propMxField = value;
                NotifyPropertyChanged("PropMax");
            }
        }

        private VolumePerVolumeMeasure propMxField; 


        /// <summary>
        /// iso-Butane (iC4) ppm (average). 
        /// </summary>
		[XmlElement("ibutAv")]

        public VolumePerVolumeMeasure IbutAverage {
            get {
                return ibutAvField;
            } 
            set {
                ibutAvField = value;
                NotifyPropertyChanged("IbutAverage");
            }
        }

        private VolumePerVolumeMeasure ibutAvField; 


        /// <summary>
        /// iso-Butane (iC4) ppm (minimum). 
        /// </summary>
		[XmlElement("ibutMn")]

        public VolumePerVolumeMeasure IbutMin {
            get {
                return ibutMnField;
            } 
            set {
                ibutMnField = value;
                NotifyPropertyChanged("IbutMin");
            }
        }

        private VolumePerVolumeMeasure ibutMnField; 


        /// <summary>
        /// iso-Butane (iC4) ppm (maximum). 
        /// </summary>
		[XmlElement("ibutMx")]

        public VolumePerVolumeMeasure IbutMax {
            get {
                return ibutMxField;
            } 
            set {
                ibutMxField = value;
                NotifyPropertyChanged("IbutMax");
            }
        }

        private VolumePerVolumeMeasure ibutMxField; 


        /// <summary>
        /// nor-Butane (nC4) ppm (average). 
        /// </summary>
		[XmlElement("nbutAv")]

        public VolumePerVolumeMeasure NbutAverage {
            get {
                return nbutAvField;
            } 
            set {
                nbutAvField = value;
                NotifyPropertyChanged("NbutAverage");
            }
        }

        private VolumePerVolumeMeasure nbutAvField; 


        /// <summary>
        /// nor-Butane (nC4) ppm (minimum). 
        /// </summary>
		[XmlElement("nbutMn")]

        public VolumePerVolumeMeasure NbutMin {
            get {
                return nbutMnField;
            } 
            set {
                nbutMnField = value;
                NotifyPropertyChanged("NbutMin");
            }
        }

        private VolumePerVolumeMeasure nbutMnField; 


        /// <summary>
        /// nor-Butane (nC4) ppm (maximum). 
        /// </summary>
		[XmlElement("nbutMx")]

        public VolumePerVolumeMeasure NbutMax {
            get {
                return nbutMxField;
            } 
            set {
                nbutMxField = value;
                NotifyPropertyChanged("NbutMax");
            }
        }

        private VolumePerVolumeMeasure nbutMxField; 


        /// <summary>
        /// iso-Pentane (iC5) ppm (average). 
        /// </summary>
		[XmlElement("ipentAv")]

        public VolumePerVolumeMeasure IpentAverage {
            get {
                return ipentAvField;
            } 
            set {
                ipentAvField = value;
                NotifyPropertyChanged("IpentAverage");
            }
        }

        private VolumePerVolumeMeasure ipentAvField; 


        /// <summary>
        /// iso-Pentane (iC5) ppm (minimum). 
        /// </summary>
		[XmlElement("ipentMn")]

        public VolumePerVolumeMeasure IpentMin {
            get {
                return ipentMnField;
            } 
            set {
                ipentMnField = value;
                NotifyPropertyChanged("IpentMin");
            }
        }

        private VolumePerVolumeMeasure ipentMnField; 


        /// <summary>
        /// iso-Pentane (iC5) ppm (maximum). 
        /// </summary>
		[XmlElement("ipentMx")]

        public VolumePerVolumeMeasure IpentMax {
            get {
                return ipentMxField;
            } 
            set {
                ipentMxField = value;
                NotifyPropertyChanged("IpentMax");
            }
        }

        private VolumePerVolumeMeasure ipentMxField; 


        /// <summary>
        /// nor-Pentane (nC5) ppm (average). 
        /// </summary>
		[XmlElement("npentAv")]

        public VolumePerVolumeMeasure NpentAverage {
            get {
                return npentAvField;
            } 
            set {
                npentAvField = value;
                NotifyPropertyChanged("NpentAverage");
            }
        }

        private VolumePerVolumeMeasure npentAvField; 


        /// <summary>
        /// nor-Pentane (nC5) ppm (minimum). 
        /// </summary>
		[XmlElement("npentMn")]

        public VolumePerVolumeMeasure NpentMin {
            get {
                return npentMnField;
            } 
            set {
                npentMnField = value;
                NotifyPropertyChanged("NpentMin");
            }
        }

        private VolumePerVolumeMeasure npentMnField; 


        /// <summary>
        /// nor-Pentane (nC5) ppm (maximum). 
        /// </summary>
		[XmlElement("npentMx")]

        public VolumePerVolumeMeasure NpentMax {
            get {
                return npentMxField;
            } 
            set {
                npentMxField = value;
                NotifyPropertyChanged("NpentMax");
            }
        }

        private VolumePerVolumeMeasure npentMxField; 


        /// <summary>
        /// neo-Pentane (eC5) ppm (average). 
        /// </summary>
		[XmlElement("epentAv")]

        public VolumePerVolumeMeasure EpentAverage {
            get {
                return epentAvField;
            } 
            set {
                epentAvField = value;
                NotifyPropertyChanged("EpentAverage");
            }
        }

        private VolumePerVolumeMeasure epentAvField; 


        /// <summary>
        /// neo-Pentane (eC5) ppm (minimum). 
        /// </summary>
		[XmlElement("epentMn")]

        public VolumePerVolumeMeasure EpentMin {
            get {
                return epentMnField;
            } 
            set {
                epentMnField = value;
                NotifyPropertyChanged("EpentMin");
            }
        }

        private VolumePerVolumeMeasure epentMnField; 


        /// <summary>
        /// neo-Pentane (eC5) ppm (maximum). 
        /// </summary>
		[XmlElement("epentMx")]

        public VolumePerVolumeMeasure EpentMax {
            get {
                return epentMxField;
            } 
            set {
                epentMxField = value;
                NotifyPropertyChanged("EpentMax");
            }
        }

        private VolumePerVolumeMeasure epentMxField; 


        /// <summary>
        /// iso-Hexane (iC6) ppm (average). 
        /// </summary>
		[XmlElement("ihexAv")]

        public VolumePerVolumeMeasure IhexAverage {
            get {
                return ihexAvField;
            } 
            set {
                ihexAvField = value;
                NotifyPropertyChanged("IhexAverage");
            }
        }

        private VolumePerVolumeMeasure ihexAvField; 


        /// <summary>
        /// iso-Hexane (iC6) ppm (minimum). 
        /// </summary>
		[XmlElement("ihexMn")]

        public VolumePerVolumeMeasure IhexMin {
            get {
                return ihexMnField;
            } 
            set {
                ihexMnField = value;
                NotifyPropertyChanged("IhexMin");
            }
        }

        private VolumePerVolumeMeasure ihexMnField; 


        /// <summary>
        /// iso-Hexane (iC6) ppm (maximum). 
        /// </summary>
		[XmlElement("ihexMx")]

        public VolumePerVolumeMeasure IhexMax {
            get {
                return ihexMxField;
            } 
            set {
                ihexMxField = value;
                NotifyPropertyChanged("IhexMax");
            }
        }

        private VolumePerVolumeMeasure ihexMxField; 


        /// <summary>
        /// nor-Hexane (nC6) ppm (average). 
        /// </summary>
		[XmlElement("nhexAv")]

        public VolumePerVolumeMeasure NhexAverage {
            get {
                return nhexAvField;
            } 
            set {
                nhexAvField = value;
                NotifyPropertyChanged("NhexAverage");
            }
        }

        private VolumePerVolumeMeasure nhexAvField; 


        /// <summary>
        /// nor-Hexane (nC6) ppm (minimum). 
        /// </summary>
		[XmlElement("nhexMn")]

        public VolumePerVolumeMeasure NhexMin {
            get {
                return nhexMnField;
            } 
            set {
                nhexMnField = value;
                NotifyPropertyChanged("NhexMin");
            }
        }

        private VolumePerVolumeMeasure nhexMnField; 


        /// <summary>
        /// nor-Hexane (nC6) ppm (maximum). 
        /// </summary>
		[XmlElement("nhexMx")]

        public VolumePerVolumeMeasure NhexMax {
            get {
                return nhexMxField;
            } 
            set {
                nhexMxField = value;
                NotifyPropertyChanged("NhexMax");
            }
        }

        private VolumePerVolumeMeasure nhexMxField; 


        /// <summary>
        /// Carbon Dioxide ppm (average). 
        /// </summary>
		[XmlElement("co2Av")]

        public VolumePerVolumeMeasure Co2Average {
            get {
                return co2AvField;
            } 
            set {
                co2AvField = value;
                NotifyPropertyChanged("Co2Average");
            }
        }

        private VolumePerVolumeMeasure co2AvField; 


        /// <summary>
        /// Carbon Dioxide ppm (minimum). 
        /// </summary>
		[XmlElement("co2Mn")]

        public VolumePerVolumeMeasure Co2Min {
            get {
                return co2MnField;
            } 
            set {
                co2MnField = value;
                NotifyPropertyChanged("Co2Min");
            }
        }

        private VolumePerVolumeMeasure co2MnField; 


        /// <summary>
        /// Carbon Dioxide ppm (maximum). 
        /// </summary>
		[XmlElement("co2Mx")]

        public VolumePerVolumeMeasure Co2Max {
            get {
                return co2MxField;
            } 
            set {
                co2MxField = value;
                NotifyPropertyChanged("Co2Max");
            }
        }

        private VolumePerVolumeMeasure co2MxField; 


        /// <summary>
        /// Hydrogen Sulfide (average) ppm. 
        /// </summary>
		[XmlElement("h2sAv")]

        public VolumePerVolumeMeasure H2sAverage {
            get {
                return h2sAvField;
            } 
            set {
                h2sAvField = value;
                NotifyPropertyChanged("H2sAverage");
            }
        }

        private VolumePerVolumeMeasure h2sAvField; 


        /// <summary>
        /// Hydrogen Sulfide (minimum) ppm. 
        /// </summary>
		[XmlElement("h2sMn")]

        public VolumePerVolumeMeasure H2sMin {
            get {
                return h2sMnField;
            } 
            set {
                h2sMnField = value;
                NotifyPropertyChanged("H2sMin");
            }
        }

        private VolumePerVolumeMeasure h2sMnField; 


        /// <summary>
        /// Hydrogen Sulfide (maximum) ppm. 
        /// </summary>
		[XmlElement("h2sMx")]

        public VolumePerVolumeMeasure H2sMax {
            get {
                return h2sMxField;
            } 
            set {
                h2sMxField = value;
                NotifyPropertyChanged("H2sMax");
            }
        }

        private VolumePerVolumeMeasure h2sMxField; 


        /// <summary>
        /// Acetylene. 
        /// </summary>
		[XmlElement("acetylene")]

        public VolumePerVolumeMeasure Acetylene {
            get {
                return acetyleneField;
            } 
            set {
                acetyleneField = value;
                NotifyPropertyChanged("Acetylene");
            }
        }

        private VolumePerVolumeMeasure acetyleneField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML Mud Gas Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudGas", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML Mud Gas Component Schema")]
    public partial class MudGas : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Average total gas. 
        /// </summary>
		[XmlElement("gasAv")]

        public VolumePerVolumeMeasure GasAverage {
            get {
                return gasAvField;
            } 
            set {
                gasAvField = value;
                NotifyPropertyChanged("GasAverage");
            }
        }

        private VolumePerVolumeMeasure gasAvField; 


        /// <summary>
        /// Peak gas reading. 
        /// </summary>
		[XmlElement("gasPeak")]

        public VolumePerVolumeMeasure GasPeak {
            get {
                return gasPeakField;
            } 
            set {
                gasPeakField = value;
                NotifyPropertyChanged("GasPeak");
            }
        }

        private VolumePerVolumeMeasure gasPeakField; 


        /// <summary>
        /// Type of gas peak. 
        /// </summary>
		[XmlElement("gasPeakType")]

        public GasPeakType? GasPeakType {
            get {
                return gasPeakTypeField;
            } 
            set {
                gasPeakTypeField = value;
                this.GasPeakTypeSpecified = true;
                NotifyPropertyChanged("GasPeakType");
            }
        }

        private GasPeakType? gasPeakTypeField; 


		/// <summary>
        /// gasPeakTypeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean GasPeakTypeSpecified {
            get {
                return gasPeakTypeSpecifiedField;
            } 
            set {
                gasPeakTypeSpecifiedField = value;
                NotifyPropertyChanged("GasPeakTypeSpecified");
            }
        }

        private Boolean gasPeakTypeSpecifiedField; 


        /// <summary>
        /// Background gas reading. 
        /// </summary>
		[XmlElement("gasBackgnd")]

        public VolumePerVolumeMeasure GasBackgnd {
            get {
                return gasBackgndField;
            } 
            set {
                gasBackgndField = value;
                NotifyPropertyChanged("GasBackgnd");
            }
        }

        private VolumePerVolumeMeasure gasBackgndField; 


        /// <summary>
        /// Connection gas (average). 
        /// </summary>
		[XmlElement("gasConAv")]

        public VolumePerVolumeMeasure GasConAverage {
            get {
                return gasConAvField;
            } 
            set {
                gasConAvField = value;
                NotifyPropertyChanged("GasConAverage");
            }
        }

        private VolumePerVolumeMeasure gasConAvField; 


        /// <summary>
        /// Connection gas (maximum). 
        /// </summary>
		[XmlElement("gasConMx")]

        public VolumePerVolumeMeasure GasConMax {
            get {
                return gasConMxField;
            } 
            set {
                gasConMxField = value;
                NotifyPropertyChanged("GasConMax");
            }
        }

        private VolumePerVolumeMeasure gasConMxField; 


        /// <summary>
        /// Trip gas last reading. 
        /// </summary>
		[XmlElement("gasTrip")]

        public VolumePerVolumeMeasure GasTrip {
            get {
                return gasTripField;
            } 
            set {
                gasTripField = value;
                NotifyPropertyChanged("GasTrip");
            }
        }

        private VolumePerVolumeMeasure gasTripField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_dtsInstalledSystems xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("dtsInstalledSystems", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_dtsInstalledSystems xsd type.")]
    public partial class DtsInstalledSystemList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// Main wrapper for all the distributed temperature survey information about the installed system. Note that this can serve as a standalone object for messages that are not part of the WITSML server architecture.
        /// </summary>
		[XmlElement("dtsInstalledSystem")]

        public List<DtsInstalledSystem> DtsInstalledSystem {
            get {
                return dtsInstalledSystemField;
            } 
            set {
                dtsInstalledSystemField = value;
                NotifyPropertyChanged("DtsInstalledSystem");
            }
        }

        private List<DtsInstalledSystem> dtsInstalledSystemField; 


        /// <summary>
        /// Main wrapper for all the distributed temperature survey information about the installed system. Note that this can serve as a standalone object for messages that are not part of the WITSML server architecture.
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return DtsInstalledSystem;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The optical fiber is installed in a wellbore and attached to an instrument box. Calibrations are performed. In general, this should be a subelement of a DTS object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_dtsInstalledSystem", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The optical fiber is installed in a wellbore and attached to an instrument box. Calibrations are performed. In general, this should be a subelement of a DTS object.")]
    public partial class DtsInstalledSystem : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the installed system.
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the dts.
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Is this a planned installation in a well, or has the installation already occurred. Note that the default value is 'false', which states that this is an actual installation.
        /// </summary>
		[XmlElement("isPlanned")]

        public Boolean? IsPlanned {
            get {
                return isPlannedField;
            } 
            set {
                isPlannedField = value;
                this.IsPlannedSpecified = true;
                NotifyPropertyChanged("IsPlanned");
            }
        }

        private Boolean? isPlannedField; 


		/// <summary>
        /// isPlannedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean IsPlannedSpecified {
            get {
                return isPlannedSpecifiedField;
            } 
            set {
                isPlannedSpecifiedField = value;
                NotifyPropertyChanged("IsPlannedSpecified");
            }
        }

        private Boolean isPlannedSpecifiedField; 


        /// <summary>
        /// Information about the fiber used, and its installation.
        /// </summary>
		[XmlElement("fiberInformation")]

        public FiberInformation FiberInformation {
            get {
                return fiberInformationField;
            } 
            set {
                fiberInformationField = value;
                NotifyPropertyChanged("FiberInformation");
            }
        }

        private FiberInformation fiberInformationField; 


        /// <summary>
        /// Information about the instrument box used, and its installation.
        /// </summary>
		[XmlElement("instrumentBoxInformation")]

        public BoxInformation InstrumentBoxInformation {
            get {
                return instrumentBoxInformationField;
            } 
            set {
                instrumentBoxInformationField = value;
                NotifyPropertyChanged("InstrumentBoxInformation");
            }
        }

        private BoxInformation instrumentBoxInformationField; 


        /// <summary>
        /// The configuration of the fiber installation. Example values would be linear, linear with gauge, J, U.
        /// </summary>
		[XmlElement("fiberConfiguration")]

        public String FiberConfiguration {
            get {
                return fiberConfigurationField;
            } 
            set {
                fiberConfigurationField = value;
                NotifyPropertyChanged("FiberConfiguration");
            }
        }

        private String fiberConfigurationField; 


        /// <summary>
        /// A fiber installed with a "U" configuration will have two ends available for hookup to an instrument box. In order to record which end is cabled to the instrument box on a particular measurement run, it is necessary to identify the two ends. This complex type allows a name and description for each end, so that it may be identified in a later use. This may also be useful when multiple fibers in multiple wellbores converge at the same wellhead.
        /// </summary>
		[XmlElement("fiberEndPoint")]

        public List<FiberEndPoint> FiberEndPoint {
            get {
                return fiberEndPointField;
            } 
            set {
                fiberEndPointField = value;
                NotifyPropertyChanged("FiberEndPoint");
            }
        }

        private List<FiberEndPoint> fiberEndPointField; 


        /// <summary>
        /// The length of the fiber installed in the wellbore.
        /// </summary>
		[XmlElement("fiberLength")]

        public LengthMeasure FiberLength {
            get {
                return fiberLengthField;
            } 
            set {
                fiberLengthField = value;
                NotifyPropertyChanged("FiberLength");
            }
        }

        private LengthMeasure fiberLengthField; 


        /// <summary>
        /// A table of values along the length along the fiber.
        /// </summary>
		[XmlArrayItem("installedPoint")]
        [XmlArray("wellboreFiberSchematic")]

        public List<SingleInstalledPoint> WellboreFiberSchematic {
            get {
                return wellboreFiberSchematicField;
            } 
            set {
                wellboreFiberSchematicField = value;
                NotifyPropertyChanged("WellboreFiberSchematic");
            }
        }

        private List<SingleInstalledPoint> wellboreFiberSchematicField; 


        /// <summary>
        /// Total light budget available for the installation. This is generally measured in decibels, and indicates the total power loss for two-way travel of the light in the installed fiber.
        /// </summary>
		[XmlElement("opticalBudget")]

        public GeneralMeasureType OpticalBudget {
            get {
                return opticalBudgetField;
            } 
            set {
                opticalBudgetField = value;
                NotifyPropertyChanged("OpticalBudget");
            }
        }

        private GeneralMeasureType opticalBudgetField; 


        /// <summary>
        /// The activity of pumping the fiber downhole
        /// </summary>
		[XmlElement("pumpActivity")]

        public PumpActivity PumpActivity {
            get {
                return pumpActivityField;
            } 
            set {
                pumpActivityField = value;
                NotifyPropertyChanged("PumpActivity");
            }
        }

        private PumpActivity pumpActivityField; 


        /// <summary>
        /// This captures the data from the pre-installation and post-installation OTDR tests run on the fiber. A standard quality control program would include these two, but the schema allows for more than two if additional runs associated with the installation of the fiber are performed. OTDR runs associated with a measurement are given as a child of the measurementInformation element.
        /// </summary>
		[XmlElement("otdrInstallationTest")]

        public List<Otdr> OtdrInstallationTest {
            get {
                return otdrInstallationTestField;
            } 
            set {
                otdrInstallationTestField = value;
                NotifyPropertyChanged("OtdrInstallationTest");
            }
        }

        private List<Otdr> otdrInstallationTestField; 


        /// <summary>
        /// Any calibration other than the ones explicitly given may be recorded here. This is a general calibration type, which is populated with name/value pairs.
        /// </summary>
		[XmlElement("installationCalibration")]

        public List<Calibration> InstallationCalibration {
            get {
                return installationCalibrationField;
            } 
            set {
                installationCalibrationField = value;
                NotifyPropertyChanged("InstallationCalibration");
            }
        }

        private List<Calibration> installationCalibrationField; 


        /// <summary>
        /// If an instrument box is changed, for example, but the fiber remains the same, this instance of installed fiber is given to record that change. This element refers to a previous installed fiber, on which this one is based. For example, the wellboreFiberSchematic is unchanged, and may be obtained from the previous instance of installed fiber that is referenced here.
        /// </summary>
		[XmlElement("basedOnInstalledFiber")]

        public RefNameString BasedOnInstalledFiber {
            get {
                return basedOnInstalledFiberField;
            } 
            set {
                basedOnInstalledFiberField = value;
                NotifyPropertyChanged("BasedOnInstalledFiber");
            }
        }

        private RefNameString basedOnInstalledFiberField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// The optical fiber used for distributed temperature surveys
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberInformation", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The optical fiber used for distributed temperature surveys")]
    public partial class FiberInformation : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The date the fiber is installed.
        /// </summary>
		[XmlElement("installationDate")]

        public String InstallationDate {
            get {
                return installationDateField;
            } 
            set {
                installationDateField = value;
                NotifyPropertyChanged("InstallationDate");
            }
        }

        private String installationDateField; 


        /// <summary>
        /// The company that installed the fiber in the wellbore.
        /// </summary>
		[XmlElement("installationCompany")]

        public String InstallationCompany {
            get {
                return installationCompanyField;
            } 
            set {
                installationCompanyField = value;
                NotifyPropertyChanged("InstallationCompany");
            }
        }

        private String installationCompanyField; 


        /// <summary>
        /// The date the fiber was de-installed from the wellbore.
        /// </summary>
		[XmlElement("deInstallationDate")]

        public String DeInstallationDate {
            get {
                return deInstallationDateField;
            } 
            set {
                deInstallationDateField = value;
                NotifyPropertyChanged("DeInstallationDate");
            }
        }

        private String deInstallationDateField; 


        /// <summary>
        /// The diameter of the capillary tube into which one or more fibers will be installed. If the installation has fibers that go to different wellbores, only those fibers installed in the parent wellbore should be included in this instance.
        /// </summary>
		[XmlElement("capillaryTubeDiameter")]

        public LengthMeasure CapillaryTubeDiameter {
            get {
                return capillaryTubeDiameterField;
            } 
            set {
                capillaryTubeDiameterField = value;
                NotifyPropertyChanged("CapillaryTubeDiameter");
            }
        }

        private LengthMeasure capillaryTubeDiameterField; 


        /// <summary>
        /// The properties of the fiber or fibers installed in the wellbore.
        /// </summary>
		[XmlElement("fiber")]

        public List<Fiber> Fiber {
            get {
                return fiberField;
            } 
            set {
                fiberField = value;
                NotifyPropertyChanged("Fiber");
            }
        }

        private List<Fiber> fiberField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// The optical fiber used for distributed temperature surveys
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiber", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The optical fiber used for distributed temperature surveys")]
    public partial class Fiber : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A human understandable name for the fiber. This is used for identification of the instance.
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// The mode of fiber.
        /// </summary>
		[XmlElement("mode")]

        public FiberMode? Mode {
            get {
                return modeField;
            } 
            set {
                modeField = value;
                NotifyPropertyChanged("Mode");
            }
        }

        private FiberMode? modeField; 


        /// <summary>
        /// Zero or more instances that allow other classifications to be assigned to the fiber.
        /// </summary>
		[XmlElement("type")]

        public List<TypeOptionalClassString> Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private List<TypeOptionalClassString> typeField; 


        /// <summary>
        /// The type of coating on the fiber.
        /// </summary>
		[XmlElement("coating")]

        public String Coating {
            get {
                return coatingField;
            } 
            set {
                coatingField = value;
                NotifyPropertyChanged("Coating");
            }
        }

        private String coatingField; 


        /// <summary>
        /// The type of jacket covering the fiber.
        /// </summary>
		[XmlElement("jacket")]

        public String Jacket {
            get {
                return jacketField;
            } 
            set {
                jacketField = value;
                NotifyPropertyChanged("Jacket");
            }
        }

        private String jacketField; 


        /// <summary>
        /// The inner diameter of the core, generally measured in microns (um).
        /// </summary>
		[XmlElement("coreDiameter")]

        public LengthMeasure CoreDiameter {
            get {
                return coreDiameterField;
            } 
            set {
                coreDiameterField = value;
                NotifyPropertyChanged("CoreDiameter");
            }
        }

        private LengthMeasure coreDiameterField; 


        /// <summary>
        /// The diameter of the core plus the cladding, generally measured in microns (um).
        /// </summary>
		[XmlElement("claddedDiameter")]

        public LengthMeasure CladdedDiameter {
            get {
                return claddedDiameterField;
            } 
            set {
                claddedDiameterField = value;
                NotifyPropertyChanged("CladdedDiameter");
            }
        }

        private LengthMeasure claddedDiameterField; 


        /// <summary>
        /// The diameter of the cable and all its sheathing, generally measured in microns (um). This is intended to be the diameter of the cable on the spool.
        /// </summary>
		[XmlElement("outsideDiameter")]

        public LengthMeasure OutsideDiameter {
            get {
                return outsideDiameterField;
            } 
            set {
                outsideDiameterField = value;
                NotifyPropertyChanged("OutsideDiameter");
            }
        }

        private LengthMeasure outsideDiameterField; 


        /// <summary>
        /// The refractive index of the fiber. Also included is the frequency in Hz for which this refractive index is valid. There may be multiple instances of this element.
        /// </summary>
		[XmlElement("refractiveIndex")]

        public List<RefractiveIndex> RefractiveIndex {
            get {
                return refractiveIndexField;
            } 
            set {
                refractiveIndexField = value;
                NotifyPropertyChanged("RefractiveIndex");
            }
        }

        private List<RefractiveIndex> refractiveIndexField; 


        /// <summary>
        /// The power loss (usually in decibels) per unit of length of the fiber. Also included is the frequency for which this loss is measured. There ay be multiple instances of this element.
        /// </summary>
		[XmlElement("oneWayLoss")]

        public List<OneWayLoss> OneWayLoss {
            get {
                return oneWayLossField;
            } 
            set {
                oneWayLossField = value;
                NotifyPropertyChanged("OneWayLoss");
            }
        }

        private List<OneWayLoss> oneWayLossField; 


        /// <summary>
        /// Additional parameters to define the fiber as a material. These should not be parameters to define the installation of the fiber in a well, or other system. This element should be used only if an appropriate parameter is not available as an element, or in the calibration operation.
        /// </summary>
		[XmlElement("parameter")]

        public List<IndexedObject> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

        private List<IndexedObject> parameterField; 


        /// <summary>
        /// The spool number located on the particular spool. The spool number may contain alphanumeric characters.
        /// </summary>
		[XmlElement("spoolNumberTag")]

        public String SpoolNumberTag {
            get {
                return spoolNumberTagField;
            } 
            set {
                spoolNumberTagField = value;
                NotifyPropertyChanged("SpoolNumberTag");
            }
        }

        private String spoolNumberTagField; 


        /// <summary>
        /// The length of the fiber on the spool when purchased.
        /// </summary>
		[XmlElement("spoolLength")]

        public LengthMeasure SpoolLength {
            get {
                return spoolLengthField;
            } 
            set {
                spoolLengthField = value;
                NotifyPropertyChanged("SpoolLength");
            }
        }

        private LengthMeasure spoolLengthField; 


        /// <summary>
        /// A fiber may go through several manufacturers for its various parts. The supplier is the final company in the chain that supplies the fiber to the end user.
        /// </summary>
		[XmlElement("supplyDate")]

        public String SupplyDate {
            get {
                return supplyDateField;
            } 
            set {
                supplyDateField = value;
                NotifyPropertyChanged("SupplyDate");
            }
        }

        private String supplyDateField; 


        /// <summary>
        /// A fiber may go through several manufacturers for its various parts. The supplier is the final company in the chain that supplies the fiber to the end user.
        /// </summary>
		[XmlElement("supplier")]

        public String Supplier {
            get {
                return supplierField;
            } 
            set {
                supplierField = value;
                NotifyPropertyChanged("Supplier");
            }
        }

        private String supplierField; 


        /// <summary>
        /// The model number (alphanumeric) that is used by the supplier to reference the type of fiber that is supplied to the user.
        /// </summary>
		[XmlElement("supplierModelNumber")]

        public String SupplierModelNumber {
            get {
                return supplierModelNumberField;
            } 
            set {
                supplierModelNumberField = value;
                NotifyPropertyChanged("SupplierModelNumber");
            }
        }

        private String supplierModelNumberField; 


        /// <summary>
        /// Information about calibrations and quality checks that were performed on the cable at the factory. This is not to include calibrations that are run at installation time and at measurement time.
        /// </summary>
		[XmlElement("factoryCalibration")]

        public List<Calibration> FactoryCalibration {
            get {
                return factoryCalibrationField;
            } 
            set {
                factoryCalibrationField = value;
                NotifyPropertyChanged("FactoryCalibration");
            }
        }

        private List<Calibration> factoryCalibrationField; 


        /// <summary>
        /// A reference to a dtsInstalledSytem object that previously used the fiber.
        /// </summary>
		[XmlElement("installationHistory")]

        public List<RefNameString> InstallationHistory {
            get {
                return installationHistoryField;
            } 
            set {
                installationHistoryField = value;
                NotifyPropertyChanged("InstallationHistory");
            }
        }

        private List<RefNameString> installationHistoryField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the typeOptionalClassString xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="typeOptionalClassString", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the typeOptionalClassString xsd type.")]
    public partial class TypeOptionalClassString : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TypeOptionalClassString class.
        /// </summary>
        public TypeOptionalClassString() {}

        /// <summary>
        /// Initializes a new instance of the TypeOptionalClassString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public TypeOptionalClassString(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


		/// <summary>
        /// This identifies the classification system to which the class belongs. 
        /// </summary>
        [XmlAttribute("classType")]

        public String ClassType {
            get {
                return classTypeField;
            } 
            set {
                classTypeField = value;
                NotifyPropertyChanged("ClassType");
            }
        }

        private String classTypeField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// The refractive index of a material depends on the frequency or wavelength of the light. Hence it is necessary to include both the value (a unitless number) and the frequency or wavelength. The frequency will be a quantity type with a frequency unit, such as Hz, kHz, or MHz. The wavelength will be a quantity type with a length unit, such as m, cm, um, in, or ft.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refractiveIndex", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The refractive index of a material depends on the frequency or wavelength of the light. Hence it is necessary to include both the value (a unitless number) and the frequency or wavelength. The frequency will be a quantity type with a frequency unit, such as Hz, kHz, or MHz. The wavelength will be a quantity type with a length unit, such as m, cm, um, in, or ft.")]
    public partial class RefractiveIndex : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The value of the refractive index.
        /// </summary>
		[XmlElement("value")]

        public Double? Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double? valueField; 


        /// <summary>
        /// The frequency (and uom) for which the refractive index is measured.
        /// </summary>
		[XmlElement("frequency")]

        public FrequencyMeasure Frequency {
            get {
                return frequencyField;
            } 
            set {
                frequencyField = value;
                NotifyPropertyChanged("Frequency");
            }
        }

        private FrequencyMeasure frequencyField; 


        /// <summary>
        /// The wavelength (and uom) for which the refractive index is measured. The reported wavelength should be the wavelength of the light in a vacuum.
        /// </summary>
		[XmlElement("wavelength")]

        public LengthMeasure Wavelength {
            get {
                return wavelengthField;
            } 
            set {
                wavelengthField = value;
                NotifyPropertyChanged("Wavelength");
            }
        }

        private LengthMeasure wavelengthField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// The The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength. The wavelength varies with the refractive index, while the frequency remains constant. The wavelength given to specify this type is the wavelength in a vacuum (refractive index = 1).
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_oneWayLoss", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength. The wavelength varies with the refractive index, while the frequency remains constant. The wavelength given to specify this type is the wavelength in a vacuum (refractive index = 1).")]
    public partial class OneWayLoss : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The value of the one way loss per unit of length. The usual uom is decibels per kilometre (dB/km), although this might vary depending on the calibration method used.
        /// </summary>
		[XmlElement("value")]

        public GeneralMeasureType Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private GeneralMeasureType valueField; 


        /// <summary>
        /// The frequency (and uom) for which the one-way loss is measured.
        /// </summary>
		[XmlElement("frequency")]

        public FrequencyMeasure Frequency {
            get {
                return frequencyField;
            } 
            set {
                frequencyField = value;
                NotifyPropertyChanged("Frequency");
            }
        }

        private FrequencyMeasure frequencyField; 


        /// <summary>
        /// The wavelength (and uom) for which the one-way loss is measured. The reported wavelength should be the wavelength of the light in a vacuum.
        /// </summary>
		[XmlElement("wavelength")]

        public LengthMeasure Wavelength {
            get {
                return wavelengthField;
            } 
            set {
                wavelengthField = value;
                NotifyPropertyChanged("Wavelength");
            }
        }

        private LengthMeasure wavelengthField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the indexedObject xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="indexedObject", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the indexedObject xsd type.")]
    public partial class IndexedObject : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IndexedObject class.
        /// </summary>
        public IndexedObject() {}

        /// <summary>
        /// Initializes a new instance of the IndexedObject class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IndexedObject(String value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// index property
        /// </summary>
        [XmlAttribute("index")]

        public Int16 Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private Int16 indexField; 


		/// <summary>
        /// name property
        /// </summary>
        [XmlAttribute("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 


		/// <summary>
        /// description property
        /// </summary>
        [XmlAttribute("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// Calibration parameters vary from vendor to vendor, depending on the calibration method being used. This is a general type that allows a calibration date, business associate, and many name/value pairs.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_calibration", Namespace="http://www.witsml.org/schemas/131")]

    [Description("Calibration parameters vary from vendor to vendor, depending on the calibration method being used. This is a general type that allows a calibration date, business associate, and many name/value pairs.")]
    public partial class Calibration : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The date of the calibration
        /// </summary>
		[XmlElement("dTimCalibration", DataType="date")]

        public DateTime? DateTimeCalibration {
            get {
                return dTimCalibrationField;
            } 
            set {
                dTimCalibrationField = value;
                this.DateTimeCalibrationSpecified = true;
                NotifyPropertyChanged("DateTimeCalibration");
            }
        }

        private DateTime? dTimCalibrationField; 


		/// <summary>
        /// dTimCalibrationSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeCalibrationSpecified {
            get {
                return dTimCalibrationSpecifiedField;
            } 
            set {
                dTimCalibrationSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCalibrationSpecified");
            }
        }

        private Boolean dTimCalibrationSpecifiedField; 


        /// <summary>
        /// The business associate that performed the calibration.
        /// </summary>
		[XmlElement("calibratedBy")]

        public String CalibratedBy {
            get {
                return calibratedByField;
            } 
            set {
                calibratedByField = value;
                NotifyPropertyChanged("CalibratedBy");
            }
        }

        private String calibratedByField; 


        /// <summary>
        /// This may be a standard protocol, or a software application.
        /// </summary>
		[XmlElement("calibrationProtocol")]

        public String CalibrationProtocol {
            get {
                return calibrationProtocolField;
            } 
            set {
                calibrationProtocolField = value;
                NotifyPropertyChanged("CalibrationProtocol");
            }
        }

        private String calibrationProtocolField; 


        /// <summary>
        /// Attribute name is the name of the parameter. Optional attribute uom is the unit of measure of the parameter. The value of the element is the value of the parameter. Note that a string value may appear as a parameter.
        /// </summary>
		[XmlElement("parameter")]

        public List<CalibrationParameter> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

        private List<CalibrationParameter> parameterField; 


        /// <summary>
        /// Any remarks that may be useful, regarding the calibration information.
        /// </summary>
		[XmlElement("remarks")]

        public String Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private String remarksField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// Parameters are given by name/ value pairs, with optional uom. The parameter name and uom are attributes, and the value is the value of the element.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_calibrationParameter", Namespace="http://www.witsml.org/schemas/131")]

    [Description("Parameters are given by name/ value pairs, with optional uom. The parameter name and uom are attributes, and the value is the value of the element.")]
    public partial class CalibrationParameter : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CalibrationParameter class.
        /// </summary>
        public CalibrationParameter() {}

        /// <summary>
        /// Initializes a new instance of the CalibrationParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public CalibrationParameter(String value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// The unit of measure of the parameter value.
        /// </summary>
        [XmlAttribute("uom")]

        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 


		/// <summary>
        /// The name of the parameter.
        /// </summary>
        [XmlAttribute("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// The instrument box used for distributed temperature surveys
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_boxInformation", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The instrument box used for distributed temperature surveys")]
    public partial class BoxInformation : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The date the instrument box was installed.
        /// </summary>
		[XmlElement("installationDate")]

        public String InstallationDate {
            get {
                return installationDateField;
            } 
            set {
                installationDateField = value;
                NotifyPropertyChanged("InstallationDate");
            }
        }

        private String installationDateField; 


        /// <summary>
        /// The company that installed the instrument box in the wellbore measurement system.
        /// </summary>
		[XmlElement("installationCompany")]

        public String InstallationCompany {
            get {
                return installationCompanyField;
            } 
            set {
                installationCompanyField = value;
                NotifyPropertyChanged("InstallationCompany");
            }
        }

        private String installationCompanyField; 


        /// <summary>
        /// The date the instrument box was de-installed from the wellbore.
        /// </summary>
		[XmlElement("deInstallationDate")]

        public String DeInstallationDate {
            get {
                return deInstallationDateField;
            } 
            set {
                deInstallationDateField = value;
                NotifyPropertyChanged("DeInstallationDate");
            }
        }

        private String deInstallationDateField; 


        /// <summary>
        /// The properties of the instrument box.
        /// </summary>
		[XmlElement("instrumentBox")]

        public InstrumentBox InstrumentBox {
            get {
                return instrumentBoxField;
            } 
            set {
                instrumentBoxField = value;
                NotifyPropertyChanged("InstrumentBox");
            }
        }

        private InstrumentBox instrumentBoxField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// The instrument box used for distributed temperature surveys
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_instrumentBox", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The instrument box used for distributed temperature surveys")]
    public partial class InstrumentBox : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A name for the instrument box. This can be used to access the instrument box.
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// The ultimate manufacturer of the instrument box.
        /// </summary>
		[XmlElement("manufacturer")]

        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 


        /// <summary>
        /// The date the manufacturing of the instrument box was completed.
        /// </summary>
		[XmlElement("manufacturingDate")]

        public String ManufacturingDate {
            get {
                return manufacturingDateField;
            } 
            set {
                manufacturingDateField = value;
                NotifyPropertyChanged("ManufacturingDate");
            }
        }

        private String manufacturingDateField; 


        /// <summary>
        /// The type of instrument box used.
        /// </summary>
		[XmlElement("type")]

        public String Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String typeField; 


        /// <summary>
        /// An identification tag for the instrument box. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[XmlElement("nameTag")]

        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

        private List<NameTag> nameTagField; 


        /// <summary>
        /// The version of the software installed in the instrument box.
        /// </summary>
		[XmlElement("softwareVersion")]

        public String SoftwareVersion {
            get {
                return softwareVersionField;
            } 
            set {
                softwareVersionField = value;
                NotifyPropertyChanged("SoftwareVersion");
            }
        }

        private String softwareVersionField; 


        /// <summary>
        /// Information about the calibration of the instrument box that was performed. This includes factory calibrations before shipping, and bench calibrations. This does not include calibrations made in preparation for taking measurements.
        /// </summary>
		[XmlElement("factoryCalibration")]

        public List<InstrumentBoxCalibration> FactoryCalibration {
            get {
                return factoryCalibrationField;
            } 
            set {
                factoryCalibrationField = value;
                NotifyPropertyChanged("FactoryCalibration");
            }
        }

        private List<InstrumentBoxCalibration> factoryCalibrationField; 


        /// <summary>
        /// Near distance of the oven from the beginning of the fiber.
        /// </summary>
		[XmlElement("internalOvenLocationNear")]

        public LengthMeasure InternalOvenLocationNear {
            get {
                return internalOvenLocationNearField;
            } 
            set {
                internalOvenLocationNearField = value;
                NotifyPropertyChanged("InternalOvenLocationNear");
            }
        }

        private LengthMeasure internalOvenLocationNearField; 


        /// <summary>
        /// Far distance of the oven from the beginning of the fiber.
        /// </summary>
		[XmlElement("internalOvenLocationFar")]

        public LengthMeasure InternalOvenLocationFar {
            get {
                return internalOvenLocationFarField;
            } 
            set {
                internalOvenLocationFarField = value;
                NotifyPropertyChanged("InternalOvenLocationFar");
            }
        }

        private LengthMeasure internalOvenLocationFarField; 


        /// <summary>
        /// The temperature of the oven.
        /// </summary>
		[XmlElement("ovenSetPoint")]

        public ThermodynamicTemperatureMeasure OvenSetPoint {
            get {
                return ovenSetPointField;
            } 
            set {
                ovenSetPointField = value;
                NotifyPropertyChanged("OvenSetPoint");
            }
        }

        private ThermodynamicTemperatureMeasure ovenSetPointField; 


        /// <summary>
        /// The cable used to test the instrument box.
        /// </summary>
		[XmlElement("testCable")]

        public String TestCable {
            get {
                return testCableField;
            } 
            set {
                testCableField = value;
                NotifyPropertyChanged("TestCable");
            }
        }

        private String testCableField; 


        /// <summary>
        /// The offset setting applied to the instrument box based on the factory or bench calibration.
        /// </summary>
		[XmlElement("offset")]

        public String Offset {
            get {
                return offsetField;
            } 
            set {
                offsetField = value;
                NotifyPropertyChanged("Offset");
            }
        }

        private String offsetField; 


        /// <summary>
        /// The power loss over the length of the cable.
        /// </summary>
		[XmlElement("differentialLossSetting")]

        public GeneralMeasureType DifferentialLossSetting {
            get {
                return differentialLossSettingField;
            } 
            set {
                differentialLossSettingField = value;
                NotifyPropertyChanged("DifferentialLossSetting");
            }
        }

        private GeneralMeasureType differentialLossSettingField; 


        /// <summary>
        /// Additional parameters to define the instrument box as a piece of equipment. These should not be parameters to define the installation or use of the box in the wellbore, or other system. This element should be used only if an appropriate parameter is not available as an element, or in the calibration operation.
        /// </summary>
		[XmlElement("parameter")]

        public List<IndexedObject> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

        private List<IndexedObject> parameterField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Equipment NameTag Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_nameTag", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Equipment NameTag Schema")]
    public partial class NameTag : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The physical identification string of the equipment tag.
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// The format or encoding specification of the equipment tag. The tag may contain may different pieces of information and knowledge of that information is inherent in the specification. The "identification string" is a mandatory part of the information in a tag.
        /// </summary>
		[XmlElement("numberingScheme")]

        public NameTagNumberingScheme NumberingScheme {
            get {
                return numberingSchemeField;
            } 
            set {
                numberingSchemeField = value;
                NotifyPropertyChanged("NumberingScheme");
            }
        }

        private NameTagNumberingScheme numberingSchemeField; 


        /// <summary>
        /// Identifies the general type of identifier on an item. If multiple identifiers exist on an item, a separate description set for each identifier should be created. For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling. The barcode label may in turn be an RFID equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label' - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label' - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.
        /// </summary>
		[XmlElement("technology")]

        public NameTagTechnology Technology {
            get {
                return technologyField;
            } 
            set {
                technologyField = value;
                this.TechnologySpecified = true;
                NotifyPropertyChanged("Technology");
            }
        }

        private NameTagTechnology technologyField; 


		/// <summary>
        /// technologySpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TechnologySpecified {
            get {
                return technologySpecifiedField;
            } 
            set {
                technologySpecifiedField = value;
                NotifyPropertyChanged("TechnologySpecified");
            }
        }

        private Boolean technologySpecifiedField; 


        /// <summary>
        /// An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item. This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener. 'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item. Most non-downhole tools will use either 'body', 'other' or not specified as the location tends to lose value with smaller or non threaded items.
        /// </summary>
		[XmlElement("location")]

        public NameTagLocation Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                this.LocationSpecified = true;
                NotifyPropertyChanged("Location");
            }
        }

        private NameTagLocation locationField; 


		/// <summary>
        /// locationSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LocationSpecified {
            get {
                return locationSpecifiedField;
            } 
            set {
                locationSpecifiedField = value;
                NotifyPropertyChanged("LocationSpecified");
            }
        }

        private Boolean locationSpecifiedField; 


        /// <summary>
        /// When the tag was installed in or on the item. 
        /// </summary>
		[XmlElement("installationDate")]

        public DateTime? InstallationDate {
            get {
                return installationDateField;
            } 
            set {
                installationDateField = value;
                this.InstallationDateSpecified = true;
                NotifyPropertyChanged("InstallationDate");
            }
        }

        private DateTime? installationDateField; 


		/// <summary>
        /// installationDateSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean InstallationDateSpecified {
            get {
                return installationDateSpecifiedField;
            } 
            set {
                installationDateSpecifiedField = value;
                NotifyPropertyChanged("InstallationDateSpecified");
            }
        }

        private Boolean installationDateSpecifiedField; 


        /// <summary>
        /// The name of the company that installed the tag. 
        /// </summary>
		[XmlElement("installationCompany")]

        public String InstallationCompany {
            get {
                return installationCompanyField;
            } 
            set {
                installationCompanyField = value;
                NotifyPropertyChanged("InstallationCompany");
            }
        }

        private String installationCompanyField; 


        /// <summary>
        /// Reference to a manufacturers or installers installation description, code, or method. 
        /// </summary>
		[XmlElement("mountingCode")]

        public String MountingCode {
            get {
                return mountingCodeField;
            } 
            set {
                mountingCodeField = value;
                NotifyPropertyChanged("MountingCode");
            }
        }

        private String mountingCodeField; 


        /// <summary>
        /// A comment or remark about the tag.
        /// </summary>
		[XmlElement("comment")]

        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// Calibration parameters vary from vendor to vendor, depending on the calibration method being used. This is an extension of the general cs_calibration, and allows for specific parameters associated with an instrument box. The two additional parameters are the offset temperature calibration, and the slope calibration. These allow for a linear shift in temperature vs measurements. Additional offset and slope calibrations may be performed at measurement time.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_instrumentBoxCalibration", Namespace="http://www.witsml.org/schemas/131")]

    [Description("Calibration parameters vary from vendor to vendor, depending on the calibration method being used. This is an extension of the general cs_calibration, and allows for specific parameters associated with an instrument box. The two additional parameters are the offset temperature calibration, and the slope calibration. These allow for a linear shift in temperature vs measurements. Additional offset and slope calibrations may be performed at measurement time.")]
    public partial class InstrumentBoxCalibration : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The date of the calibration
        /// </summary>
		[XmlElement("dTimCalibration", DataType="date")]

        public DateTime? DateTimeCalibration {
            get {
                return dTimCalibrationField;
            } 
            set {
                dTimCalibrationField = value;
                this.DateTimeCalibrationSpecified = true;
                NotifyPropertyChanged("DateTimeCalibration");
            }
        }

        private DateTime? dTimCalibrationField; 


		/// <summary>
        /// dTimCalibrationSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeCalibrationSpecified {
            get {
                return dTimCalibrationSpecifiedField;
            } 
            set {
                dTimCalibrationSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCalibrationSpecified");
            }
        }

        private Boolean dTimCalibrationSpecifiedField; 


        /// <summary>
        /// The business associate that performed the calibration.
        /// </summary>
		[XmlElement("calibratedBy")]

        public String CalibratedBy {
            get {
                return calibratedByField;
            } 
            set {
                calibratedByField = value;
                NotifyPropertyChanged("CalibratedBy");
            }
        }

        private String calibratedByField; 


        /// <summary>
        /// This may be a standard protocol, or a software application.
        /// </summary>
		[XmlElement("calibrationProtocol")]

        public String CalibrationProtocol {
            get {
                return calibrationProtocolField;
            } 
            set {
                calibrationProtocolField = value;
                NotifyPropertyChanged("CalibrationProtocol");
            }
        }

        private String calibrationProtocolField; 


        /// <summary>
        /// Attribute name is the name of the parameter. Optional attribute uom is the unit of measure of the parameter. The value of the element is the value of the parameter. Note that a string value may appear as a parameter.
        /// </summary>
		[XmlElement("parameter")]

        public List<CalibrationParameter> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

        private List<CalibrationParameter> parameterField; 


        /// <summary>
        /// Any remarks that may be useful, regarding the calibration information.
        /// </summary>
		[XmlElement("remarks")]

        public String Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private String remarksField; 


        /// <summary>
        /// The temperature offset correction that is applied to the dts instrument box.
        /// </summary>
		[XmlElement("offsetTemperatureCalibration")]

        public ThermodynamicTemperatureMeasure OffsetTemperatureCalibration {
            get {
                return offsetTemperatureCalibrationField;
            } 
            set {
                offsetTemperatureCalibrationField = value;
                NotifyPropertyChanged("OffsetTemperatureCalibration");
            }
        }

        private ThermodynamicTemperatureMeasure offsetTemperatureCalibrationField; 


        /// <summary>
        /// The temperature slope correction that is applied to the dts instrument box.
        /// </summary>
		[XmlElement("slopeCalibration")]

        public TemperatureSlopeMeasure SlopeCalibration {
            get {
                return slopeCalibrationField;
            } 
            set {
                slopeCalibrationField = value;
                NotifyPropertyChanged("SlopeCalibration");
            }
        }

        private TemperatureSlopeMeasure slopeCalibrationField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// A fiber installed in a "U" configuration has two end points that a cable may hook to. When making a measurement, it is useful to be able to say which end was hooked to the input from the instrument box. In order to do this, the fiber ends must be identified. The identifier is a name, along with a description to further aid the interpreter in determining which end was used as the input
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberEndPoint", Namespace="http://www.witsml.org/schemas/131")]

    [Description("A fiber installed in a U configuration has two end points that a cable may hook to. When making a measurement, it is useful to be able to say which end was hooked to the input from the instrument box. In order to do this, the fiber ends must be identified. The identifier is a name, along with a description to further aid the interpreter in determining which end was used as the input")]
    public partial class FiberEndPoint : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A name, unique within the context of the well, for an instrument box cable to hook to.
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Any description of the node that may be useful in identifying the hookup.
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// A set of points recorded during the installation process. The information can include the length along the fiber, the measured depth, and a type of point.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_singleInstalledPoint", Namespace="http://www.witsml.org/schemas/131")]

    [Description("A set of points recorded during the installation process. The information can include the length along the fiber, the measured depth, and a type of point.")]
    public partial class SingleInstalledPoint : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The measured depth of the installed point of the fiber. This is optional, because the sender may want to record points that are outside the well.
        /// </summary>
		[XmlElement("md")]

        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 


        /// <summary>
        /// The length along the fiber, from the zero point, for this particular point.
        /// </summary>
		[XmlElement("lengthAlongFiber")]

        public LengthMeasure LengthAlongFiber {
            get {
                return lengthAlongFiberField;
            } 
            set {
                lengthAlongFiberField = value;
                NotifyPropertyChanged("LengthAlongFiber");
            }
        }

        private LengthMeasure lengthAlongFiberField; 


        /// <summary>
        /// The type of point that is being recorded.
        /// </summary>
		[XmlElement("type")]

        public InstalledFiberPoint? Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private InstalledFiberPoint? typeField; 


		/// <summary>
        /// typeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeSpecified {
            get {
                return typeSpecifiedField;
            } 
            set {
                typeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private Boolean typeSpecifiedField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// The activity of pumping the fiber downhole.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pumpActivity", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The activity of pumping the fiber downhole.")]
    public partial class PumpActivity : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A name which can be used to reference the pumping activity. In general, a pumping activity does not have a natural name, so that this element will not be often used.
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// The name of the InstalledFiberInstance that this activity relates to.
        /// </summary>
		[XmlElement("installedFiber")]

        public RefNameString InstalledFiber {
            get {
                return installedFiberField;
            } 
            set {
                installedFiberField = value;
                NotifyPropertyChanged("InstalledFiber");
            }
        }

        private RefNameString installedFiberField; 


        /// <summary>
        /// The date, or dateTime of the pumping activity.
        /// </summary>
		[XmlElement("pumpingDate")]

        public String PumpingDate {
            get {
                return pumpingDateField;
            } 
            set {
                pumpingDateField = value;
                NotifyPropertyChanged("PumpingDate");
            }
        }

        private String pumpingDateField; 


        /// <summary>
        /// The person in charge of the pumping activity.
        /// </summary>
		[XmlElement("engineerName")]

        public String EngineerName {
            get {
                return engineerNameField;
            } 
            set {
                engineerNameField = value;
                NotifyPropertyChanged("EngineerName");
            }
        }

        private String engineerNameField; 


        /// <summary>
        /// The company that performed the pumping activity.
        /// </summary>
		[XmlElement("serviceCompany")]

        public String ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private String serviceCompanyField; 


        /// <summary>
        /// The type of fluid used in the pump.
        /// </summary>
		[XmlElement("pumpFluidType")]

        public String PumpFluidType {
            get {
                return pumpFluidTypeField;
            } 
            set {
                pumpFluidTypeField = value;
                NotifyPropertyChanged("PumpFluidType");
            }
        }

        private String pumpFluidTypeField; 


        /// <summary>
        /// The type of fluid used in the control line.
        /// </summary>
		[XmlElement("controlLineFluid")]

        public String ControlLineFluid {
            get {
                return controlLineFluidField;
            } 
            set {
                controlLineFluidField = value;
                NotifyPropertyChanged("ControlLineFluid");
            }
        }

        private String controlLineFluidField; 


        /// <summary>
        /// The direction of the pumping.
        /// </summary>
		[XmlElement("pumpDirection")]

        public String PumpDirection {
            get {
                return pumpDirectionField;
            } 
            set {
                pumpDirectionField = value;
                NotifyPropertyChanged("PumpDirection");
            }
        }

        private String pumpDirectionField; 


        /// <summary>
        /// The type of end seal on the fiber.
        /// </summary>
		[XmlElement("fiberEndSeal")]

        public String FiberEndSeal {
            get {
                return fiberEndSealField;
            } 
            set {
                fiberEndSealField = value;
                NotifyPropertyChanged("FiberEndSeal");
            }
        }

        private String fiberEndSealField; 


        /// <summary>
        /// The type of cable meter.
        /// </summary>
		[XmlElement("cableMeterType")]

        public String CableMeterType {
            get {
                return cableMeterTypeField;
            } 
            set {
                cableMeterTypeField = value;
                NotifyPropertyChanged("CableMeterType");
            }
        }

        private String cableMeterTypeField; 


        /// <summary>
        /// The serial number of the cable meter.
        /// </summary>
		[XmlElement("cableMeterSerialNumber")]

        public String CableMeterSerialNumber {
            get {
                return cableMeterSerialNumberField;
            } 
            set {
                cableMeterSerialNumberField = value;
                NotifyPropertyChanged("CableMeterSerialNumber");
            }
        }

        private String cableMeterSerialNumberField; 


        /// <summary>
        /// The date the cable meter was calibrated.
        /// </summary>
		[XmlElement("cableMeterCalibrationDate")]

        public String CableMeterCalibrationDate {
            get {
                return cableMeterCalibrationDateField;
            } 
            set {
                cableMeterCalibrationDateField = value;
                NotifyPropertyChanged("CableMeterCalibrationDate");
            }
        }

        private String cableMeterCalibrationDateField; 


        /// <summary>
        /// True or False. Was a drift run performed? This element should be used to indicate if a drift run was performed or not, where the instance of the drift run (OTDR) is not available. If the OTDR is available, use the OTDRPerformed element to specify the OTDR instance.
        /// </summary>
        [XmlElement("wasDriftRunPerformed")]
        public Boolean? WasDriftRunPerformed {
            get {
                return wasDriftRunPerformedField;
            } 
            set {
                if (value != null && OTDRPerformedSpecified) throw new Exception("Cannot set property WasDriftRunPerformed when property OTDRPerformed is already set");
                wasDriftRunPerformedField = value;
                WasDriftRunPerformedSpecified = (value!=null);
                NotifyPropertyChanged("WasDriftRunPerformed");
            }
        }

        private Boolean? wasDriftRunPerformedField; 
        /// <summary>
        /// Boolean to indicate if WasDriftRunPerformed has been set. Used for serialization.
        /// </summary>
        private Boolean WasDriftRunPerformedSpecified = false; 

        /// <summary>
        /// A reference to the OTDR that was run. If an OTDR was run, but there is not instance of the OTDR to reference, choose the wasDriftRunPerformed element, and set it to True.
        /// </summary>
        [XmlElement("OTDRPerformed")]
        public RefNameString[] OTDRPerformed {
            get {
                return OTDRPerformedField;
            } 
            set {
                if (value != null && WasDriftRunPerformedSpecified) throw new Exception("Cannot set property OTDRPerformed when property WasDriftRunPerformed is already set");
                OTDRPerformedField = value;
                OTDRPerformedSpecified = (value!=null);
                NotifyPropertyChanged("OTDRPerformed");
            }
        }

        private RefNameString[] OTDRPerformedField; 
        /// <summary>
        /// Boolean to indicate if OTDRPerformed has been set. Used for serialization.
        /// </summary>
        private Boolean OTDRPerformedSpecified = false; 



        /// <summary>
        /// The length of the excess fiber that was removed.
        /// </summary>
		[XmlElement("excessFiberRecovered")]

        public LengthMeasure ExcessFiberRecovered {
            get {
                return excessFiberRecoveredField;
            } 
            set {
                excessFiberRecoveredField = value;
                NotifyPropertyChanged("ExcessFiberRecovered");
            }
        }

        private LengthMeasure excessFiberRecoveredField; 


        /// <summary>
        /// Information about the pumping activity, that is captured in the pump log.
        /// </summary>
		[XmlArrayItem("tableRow")]
        [XmlArray("pumpLog")]

        public List<PumpLogRow> PumpLog {
            get {
                return pumpLogField;
            } 
            set {
                pumpLogField = value;
                NotifyPropertyChanged("PumpLog");
            }
        }

        private List<PumpLogRow> pumpLogField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// The pump log row are elements defined in the sequence below.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pumpLogRow", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The pump log row are elements defined in the sequence below.")]
    public partial class PumpLogRow : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The speed of the cable.
        /// </summary>
		[XmlElement("cableSpeed")]

        public VelocityMeasure CableSpeed {
            get {
                return cableSpeedField;
            } 
            set {
                cableSpeedField = value;
                NotifyPropertyChanged("CableSpeed");
            }
        }

        private VelocityMeasure cableSpeedField; 


        /// <summary>
        /// The length of fiber pumped into the wellbore.
        /// </summary>
		[XmlElement("fiberPumpedLength")]

        public LengthMeasure FiberPumpedLength {
            get {
                return fiberPumpedLengthField;
            } 
            set {
                fiberPumpedLengthField = value;
                NotifyPropertyChanged("FiberPumpedLength");
            }
        }

        private LengthMeasure fiberPumpedLengthField; 


        /// <summary>
        /// The operating pressure of the pump.
        /// </summary>
		[XmlElement("pumpPressure")]

        public PressureMeasure PumpPressure {
            get {
                return pumpPressureField;
            } 
            set {
                pumpPressureField = value;
                NotifyPropertyChanged("PumpPressure");
            }
        }

        private PressureMeasure pumpPressureField; 


        /// <summary>
        /// The fluid used in the pumping operation.
        /// </summary>
		[XmlElement("pumpFluid")]

        public String PumpFluid {
            get {
                return pumpFluidField;
            } 
            set {
                pumpFluidField = value;
                NotifyPropertyChanged("PumpFluid");
            }
        }

        private String pumpFluidField; 


        /// <summary>
        /// The temperature going into the wellbore.
        /// </summary>
		[XmlElement("temperatureIn")]

        public ThermodynamicTemperatureMeasure TemperatureIn {
            get {
                return temperatureInField;
            } 
            set {
                temperatureInField = value;
                NotifyPropertyChanged("TemperatureIn");
            }
        }

        private ThermodynamicTemperatureMeasure temperatureInField; 


        /// <summary>
        /// The temperature at the end of the operation
        /// </summary>
		[XmlElement("temperatureOut")]

        public ThermodynamicTemperatureMeasure TemperatureOut {
            get {
                return temperatureOutField;
            } 
            set {
                temperatureOutField = value;
                NotifyPropertyChanged("TemperatureOut");
            }
        }

        private ThermodynamicTemperatureMeasure temperatureOutField; 


        /// <summary>
        /// Any general remarks about the pumping operation.
        /// </summary>
		[XmlElement("remarks")]

        public String Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private String remarksField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This records the result arrays, along with context information, from an Optical Time Domain Reflectometry (OTDR) run. The arrays will define the relative scattered power from the Rayleigh scattering vs distance along the fiber. The actual data values are recorded in a wellLog object, which is referenced in a subelement.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_otdr", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This records the result arrays, along with context information, from an Optical Time Domain Reflectometry (OTDR) run. The arrays will define the relative scattered power from the Rayleigh scattering vs distance along the fiber. The actual data values are recorded in a wellLog object, which is referenced in a subelement.")]
    public partial class Otdr : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The reason the OTDR test was run. The three main reasons are 'pre-installation', which is before the installation of the fiber; 'post-installation', which is used to validate a successful fiber installation; and 'DTS run', which is a quality check of the fiber prior to a DTS run. A fourth permitted value is 'other'.
        /// </summary>
		[XmlElement("reasonForRun")]

        public OTDRReason? ReasonForRun {
            get {
                return reasonForRunField;
            } 
            set {
                reasonForRunField = value;
                NotifyPropertyChanged("ReasonForRun");
            }
        }

        private OTDRReason? reasonForRunField; 


        /// <summary>
        /// The dateTime of the run.
        /// </summary>
		[XmlElement("dTimRun")]

        public DateTime? DateTimeRun {
            get {
                return dTimRunField;
            } 
            set {
                dTimRunField = value;
                this.DateTimeRunSpecified = true;
                NotifyPropertyChanged("DateTimeRun");
            }
        }

        private DateTime? dTimRunField; 


		/// <summary>
        /// dTimRunSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeRunSpecified {
            get {
                return dTimRunSpecifiedField;
            } 
            set {
                dTimRunSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRunSpecified");
            }
        }

        private Boolean dTimRunSpecifiedField; 


        /// <summary>
        /// A reference to the well log used to record the table of data.
        /// </summary>
		[XmlElement("dataInWellLog")]

        public RefNameString DataInWellLog {
            get {
                return dataInWellLogField;
            } 
            set {
                dataInWellLogField = value;
                NotifyPropertyChanged("DataInWellLog");
            }
        }

        private RefNameString dataInWellLogField; 


        /// <summary>
        /// A pointer to the fiber connection node. If more than one node is available for a well/wellbore, this element is used to specify which node is connected to the instrument box. This name should correspond to the fiberEndPoint/name that is recorded in the installed system object.
        /// </summary>
		[XmlElement("fiberEndConncected")]

        public RefNameString FiberEndConncected {
            get {
                return fiberEndConncectedField;
            } 
            set {
                fiberEndConncectedField = value;
                NotifyPropertyChanged("FiberEndConncected");
            }
        }

        private RefNameString fiberEndConncectedField; 


        /// <summary>
        /// A general comment about the OTDR run.
        /// </summary>
		[XmlElement("comment")]

        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_dtsMeasurements xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("dtsMeasurements", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_dtsMeasurements xsd type.")]
    public partial class DtsMeasurementList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// Main wrapper for all the distributed temperature survey information about the measurement. Note that this object must be accompanied by a wellLog object in order to be complete.
        /// </summary>
		[XmlElement("dtsMeasurement")]

        public List<DtsMeasurement> DtsMeasurement {
            get {
                return dtsMeasurementField;
            } 
            set {
                dtsMeasurementField = value;
                NotifyPropertyChanged("DtsMeasurement");
            }
        }

        private List<DtsMeasurement> dtsMeasurementField; 


        /// <summary>
        /// Main wrapper for all the distributed temperature survey information about the measurement. Note that this object must be accompanied by a wellLog object in order to be complete.
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return DtsMeasurement;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The information content of a DTS temperature run is captured in the following elements, and in the referenced dtsInstalledFiber (for context) and the reference well log (captures the table of data).
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_dtsMeasurement", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The information content of a DTS temperature run is captured in the following elements, and in the referenced dtsInstalledFiber (for context) and the reference well log (captures the table of data).")]
    public partial class DtsMeasurement : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the dts. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the dts.
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// The length of time that the instrument box was operating while collecting DTS data.
        /// </summary>
		[XmlElement("runDuration")]

        public TimeMeasure RunDuration {
            get {
                return runDurationField;
            } 
            set {
                runDurationField = value;
                NotifyPropertyChanged("RunDuration");
            }
        }

        private TimeMeasure runDurationField; 


        /// <summary>
        /// A reference to the installed system that was used to make the measurements.
        /// </summary>
		[XmlElement("installedSystemUsed")]

        public RefNameString InstalledSystemUsed {
            get {
                return installedSystemUsedField;
            } 
            set {
                installedSystemUsedField = value;
                NotifyPropertyChanged("InstalledSystemUsed");
            }
        }

        private RefNameString installedSystemUsedField; 


        /// <summary>
        /// A reference to the well log used to record the table of data.
        /// </summary>
		[XmlElement("dataInWellLog")]

        public RefNameString DataInWellLog {
            get {
                return dataInWellLogField;
            } 
            set {
                dataInWellLogField = value;
                NotifyPropertyChanged("DataInWellLog");
            }
        }

        private RefNameString dataInWellLogField; 


        /// <summary>
        /// A reference to the fiber used to record the table of data. This is necessary only in the cases in which a dtsInstalledSystem has a multi-fiber installation. If there is only a single installed fiber, this element is unnecessary.
        /// </summary>
		[XmlElement("connectedToFiber")]

        public RefNameString ConnectedToFiber {
            get {
                return connectedToFiberField;
            } 
            set {
                connectedToFiberField = value;
                NotifyPropertyChanged("ConnectedToFiber");
            }
        }

        private RefNameString connectedToFiberField; 


        /// <summary>
        /// A pointer to the fiber connection node. If more than one node is available for a well/wellbore, this element is used to specify which node is connected to the instrument box. This name should correspond to the fiberEndPoint/name that is recorded in the installed system object.
        /// </summary>
		[XmlElement("fiberEndConnected")]

        public RefNameString FiberEndConnected {
            get {
                return fiberEndConnectedField;
            } 
            set {
                fiberEndConnectedField = value;
                NotifyPropertyChanged("FiberEndConnected");
            }
        }

        private RefNameString fiberEndConnectedField; 


        /// <summary>
        /// A known point of the fiber. This point should correspond to one that is given in the wellboreFiberSchematic, so that the relationship between the length of fiber values in the wellboreFiberSchematic can be related to the values in the measurement table.
        /// </summary>
		[XmlElement("fiberDefinedPoint")]

        public SingleInstalledPoint FiberDefinedPoint {
            get {
                return fiberDefinedPointField;
            } 
            set {
                fiberDefinedPointField = value;
                NotifyPropertyChanged("FiberDefinedPoint");
            }
        }

        private SingleInstalledPoint fiberDefinedPointField; 


        /// <summary>
        /// An error that occurred during the measurement.
        /// </summary>
		[XmlElement("errorReport")]

        public List<ErrorReport> ErrorReport {
            get {
                return errorReportField;
            } 
            set {
                errorReportField = value;
                NotifyPropertyChanged("ErrorReport");
            }
        }

        private List<ErrorReport> errorReportField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// A simple structure that allows an error report to be exchanged. The strucutre will allow for an error name, error id (generally a numerical code), and a description.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_errorReport", Namespace="http://www.witsml.org/schemas/131")]

    [Description("A simple structure that allows an error report to be exchanged. The strucutre will allow for an error name, error id (generally a numerical code), and a description.")]
    public partial class ErrorReport : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A name of the error.
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// A code, or other id, for the error.
        /// </summary>
		[XmlElement("id")]

        public String Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private String idField; 


        /// <summary>
        /// A description of the error.
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_fluidsReports xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("fluidsReports", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_fluidsReports xsd type.")]
    public partial class FluidsReportList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single fluids report. 
        /// </summary>
		[XmlElement("fluidsReport")]

        public List<FluidsReport> FluidsReport {
            get {
                return fluidsReportField;
            } 
            set {
                fluidsReportField = value;
                NotifyPropertyChanged("FluidsReport");
            }
        }

        private List<FluidsReport> fluidsReportField; 


        /// <summary>
        /// A single fluids report. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FluidsReport;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Fluids Report.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_fluidsReport", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Fluids Report.")]
    public partial class FluidsReport : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the fluids report. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the fluids report. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[XmlElement("md")]

        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 


        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
		[XmlElement("tvd")]

        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 


        /// <summary>
        /// Fluids report number. 
        /// </summary>
		[XmlElement("numReport")]

        public Int16? NumReport {
            get {
                return numReportField;
            } 
            set {
                numReportField = value;
                this.NumReportSpecified = true;
                NotifyPropertyChanged("NumReport");
            }
        }

        private Int16? numReportField; 


		/// <summary>
        /// numReportSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumReportSpecified {
            get {
                return numReportSpecifiedField;
            } 
            set {
                numReportSpecifiedField = value;
                NotifyPropertyChanged("NumReportSpecified");
            }
        }

        private Boolean numReportSpecifiedField; 


        /// <summary>
        /// A Fluid record. 
        /// </summary>
		[XmlElement("fluid")]

        public List<Fluid> Fluid {
            get {
                return fluidField;
            } 
            set {
                fluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

        private List<Fluid> fluidField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - fluids component schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluid", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - fluids component schema ")]
    public partial class Fluid : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Description for the type of object. 
        /// </summary>
		[XmlElement("type")]

        public String Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String typeField; 


        /// <summary>
        /// Sample location. 
        /// </summary>
		[XmlElement("locationSample")]

        public String LocationSample {
            get {
                return locationSampleField;
            } 
            set {
                locationSampleField = value;
                NotifyPropertyChanged("LocationSample");
            }
        }

        private String locationSampleField; 


        /// <summary>
        /// The time when fluid readings were recorded. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


		/// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 


        /// <summary>
        /// The measured depth when fluid readings were recorded. 
        /// </summary>
		[XmlElement("md")]

        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 


        /// <summary>
        /// Fluid density. 
        /// </summary>
		[XmlElement("density")]

        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 


        /// <summary>
        /// Funnel viscosity in seconds. 
        /// </summary>
		[XmlElement("visFunnel")]

        public TimeMeasure VisFunnel {
            get {
                return visFunnelField;
            } 
            set {
                visFunnelField = value;
                NotifyPropertyChanged("VisFunnel");
            }
        }

        private TimeMeasure visFunnelField; 


        /// <summary>
        /// Funnel viscosity temperature. 
        /// </summary>
		[XmlElement("tempVis")]

        public ThermodynamicTemperatureMeasure TempVis {
            get {
                return tempVisField;
            } 
            set {
                tempVisField = value;
                NotifyPropertyChanged("TempVis");
            }
        }

        private ThermodynamicTemperatureMeasure tempVisField; 


        /// <summary>
        /// Plastic viscosity. 
        /// </summary>
		[XmlElement("pv")]

        public DynamicViscosityMeasure PV {
            get {
                return pvField;
            } 
            set {
                pvField = value;
                NotifyPropertyChanged("PV");
            }
        }

        private DynamicViscosityMeasure pvField; 


        /// <summary>
        /// Yield point (Bingham and Herschel Bulkley models). 
        /// </summary>
		[XmlElement("yp")]

        public PressureMeasure YP {
            get {
                return ypField;
            } 
            set {
                ypField = value;
                NotifyPropertyChanged("YP");
            }
        }

        private PressureMeasure ypField; 


        /// <summary>
        /// 10 second gels. 
        /// </summary>
		[XmlElement("gel10Sec")]

        public PressureMeasure Gel10Sec {
            get {
                return gel10SecField;
            } 
            set {
                gel10SecField = value;
                NotifyPropertyChanged("Gel10Sec");
            }
        }

        private PressureMeasure gel10SecField; 


        /// <summary>
        /// 10 minute gels. 
        /// </summary>
		[XmlElement("gel10Min")]

        public PressureMeasure Gel10Min {
            get {
                return gel10MinField;
            } 
            set {
                gel10MinField = value;
                NotifyPropertyChanged("Gel10Min");
            }
        }

        private PressureMeasure gel10MinField; 


        /// <summary>
        /// 30 minute gels. 
        /// </summary>
		[XmlElement("gel30Min")]

        public PressureMeasure Gel30Min {
            get {
                return gel30MinField;
            } 
            set {
                gel30MinField = value;
                NotifyPropertyChanged("Gel30Min");
            }
        }

        private PressureMeasure gel30MinField; 


        /// <summary>
        /// Filter cake thickness at low (normal) temperature and pressure. 
        /// </summary>
		[XmlElement("filterCakeLtlp")]

        public LengthMeasure FilterCakeLtlp {
            get {
                return filterCakeLtlpField;
            } 
            set {
                filterCakeLtlpField = value;
                NotifyPropertyChanged("FilterCakeLtlp");
            }
        }

        private LengthMeasure filterCakeLtlpField; 


        /// <summary>
        /// API water loss (low temperature and pressure mud filtrate measurement) (ml/30min) 
        /// </summary>
		[XmlElement("filtrateLtlp")]

        public VolumeMeasure FiltrateLtlp {
            get {
                return filtrateLtlpField;
            } 
            set {
                filtrateLtlpField = value;
                NotifyPropertyChanged("FiltrateLtlp");
            }
        }

        private VolumeMeasure filtrateLtlpField; 


        /// <summary>
        /// High temperature high pressure (HTHP) temperature. 
        /// </summary>
		[XmlElement("tempHthp")]

        public ThermodynamicTemperatureMeasure TempHthp {
            get {
                return tempHthpField;
            } 
            set {
                tempHthpField = value;
                NotifyPropertyChanged("TempHthp");
            }
        }

        private ThermodynamicTemperatureMeasure tempHthpField; 


        /// <summary>
        /// High temperature high pressure (HTHP) pressure. 
        /// </summary>
		[XmlElement("presHthp")]

        public PressureMeasure PresHthp {
            get {
                return presHthpField;
            } 
            set {
                presHthpField = value;
                NotifyPropertyChanged("PresHthp");
            }
        }

        private PressureMeasure presHthpField; 


        /// <summary>
        /// High temperature high pressure (HTHP) filtrate (volume per 30min). 
        /// </summary>
		[XmlElement("filtrateHthp")]

        public VolumeMeasure FiltrateHthp {
            get {
                return filtrateHthpField;
            } 
            set {
                filtrateHthpField = value;
                NotifyPropertyChanged("FiltrateHthp");
            }
        }

        private VolumeMeasure filtrateHthpField; 


        /// <summary>
        /// High temperature high pressure (HTHP) Filter cake thickness. 
        /// </summary>
		[XmlElement("filterCakeHthp")]

        public LengthMeasure FilterCakeHthp {
            get {
                return filterCakeHthpField;
            } 
            set {
                filterCakeHthpField = value;
                NotifyPropertyChanged("FilterCakeHthp");
            }
        }

        private LengthMeasure filterCakeHthpField; 


        /// <summary>
        /// Solids percentage from retort (commonly in percent). 
        /// </summary>
		[XmlElement("solidsPc")]

        public VolumePerVolumeMeasure SolidsPercent {
            get {
                return solidsPcField;
            } 
            set {
                solidsPcField = value;
                NotifyPropertyChanged("SolidsPercent");
            }
        }

        private VolumePerVolumeMeasure solidsPcField; 


        /// <summary>
        /// Water content (commonly in percent). 
        /// </summary>
		[XmlElement("waterPc")]

        public VolumePerVolumeMeasure WaterPercent {
            get {
                return waterPcField;
            } 
            set {
                waterPcField = value;
                NotifyPropertyChanged("WaterPercent");
            }
        }

        private VolumePerVolumeMeasure waterPcField; 


        /// <summary>
        /// Oil content from retort (commonly in percent). 
        /// </summary>
		[XmlElement("oilPc")]

        public VolumePerVolumeMeasure OilPercent {
            get {
                return oilPcField;
            } 
            set {
                oilPcField = value;
                NotifyPropertyChanged("OilPercent");
            }
        }

        private VolumePerVolumeMeasure oilPcField; 


        /// <summary>
        /// Sand content (commonly in percent). 
        /// </summary>
		[XmlElement("sandPc")]

        public VolumePerVolumeMeasure SandPercent {
            get {
                return sandPcField;
            } 
            set {
                sandPcField = value;
                NotifyPropertyChanged("SandPercent");
            }
        }

        private VolumePerVolumeMeasure sandPcField; 


        /// <summary>
        /// Low gravity solids (%). 
        /// </summary>
		[XmlElement("solidsLowGravPc")]

        public VolumePerVolumeMeasure SolidsLowGravPercent {
            get {
                return solidsLowGravPcField;
            } 
            set {
                solidsLowGravPcField = value;
                NotifyPropertyChanged("SolidsLowGravPercent");
            }
        }

        private VolumePerVolumeMeasure solidsLowGravPcField; 


        /// <summary>
        /// Solids content (calculated) (commonly in percent). 
        /// </summary>
		[XmlElement("solidsCalcPc")]

        public VolumePerVolumeMeasure SolidsCalcPercent {
            get {
                return solidsCalcPcField;
            } 
            set {
                solidsCalcPcField = value;
                NotifyPropertyChanged("SolidsCalcPercent");
            }
        }

        private VolumePerVolumeMeasure solidsCalcPcField; 


        /// <summary>
        /// Barite content (commonly in percent). 
        /// </summary>
		[XmlElement("baritePc")]

        public VolumePerVolumeMeasure BaritePercent {
            get {
                return baritePcField;
            } 
            set {
                baritePcField = value;
                NotifyPropertyChanged("BaritePercent");
            }
        }

        private VolumePerVolumeMeasure baritePcField; 


        /// <summary>
        /// Lost circulation material. 
        /// </summary>
		[XmlElement("lcm")]

        public DensityMeasure Lcm {
            get {
                return lcmField;
            } 
            set {
                lcmField = value;
                NotifyPropertyChanged("Lcm");
            }
        }

        private DensityMeasure lcmField; 


        /// <summary>
        /// Cation exchange capacity (CEC) of the mud sample as measured by methylene blue titration (MBT). 
        /// </summary>
		[XmlElement("mbt")]

        public EquivalentPerMassMeasure Mbt {
            get {
                return mbtField;
            } 
            set {
                mbtField = value;
                NotifyPropertyChanged("Mbt");
            }
        }

        private EquivalentPerMassMeasure mbtField; 


        /// <summary>
        /// Mud pH. 
        /// </summary>
		[XmlElement("ph")]

        public Double? PH {
            get {
                return phField;
            } 
            set {
                phField = value;
                this.PHSpecified = true;
                NotifyPropertyChanged("PH");
            }
        }

        private Double? phField; 


		/// <summary>
        /// phSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PHSpecified {
            get {
                return phSpecifiedField;
            } 
            set {
                phSpecifiedField = value;
                NotifyPropertyChanged("PHSpecified");
            }
        }

        private Boolean phSpecifiedField; 


        /// <summary>
        /// Mud pH measurement temperature. 
        /// </summary>
		[XmlElement("tempPh")]

        public ThermodynamicTemperatureMeasure TempPH {
            get {
                return tempPhField;
            } 
            set {
                tempPhField = value;
                NotifyPropertyChanged("TempPH");
            }
        }

        private ThermodynamicTemperatureMeasure tempPhField; 


        /// <summary>
        /// Phenolphthalein alkalinity of whole mud. 
        /// </summary>
		[XmlElement("pm")]

        public VolumeMeasure Pm {
            get {
                return pmField;
            } 
            set {
                pmField = value;
                NotifyPropertyChanged("Pm");
            }
        }

        private VolumeMeasure pmField; 


        /// <summary>
        /// Phenolphthalein alkalinity of mud filtrate. 
        /// </summary>
		[XmlElement("pmFiltrate")]

        public VolumeMeasure PmFiltrate {
            get {
                return pmFiltrateField;
            } 
            set {
                pmFiltrateField = value;
                NotifyPropertyChanged("PmFiltrate");
            }
        }

        private VolumeMeasure pmFiltrateField; 


        /// <summary>
        /// Methyl orange alkalinity of filtrate. 
        /// </summary>
		[XmlElement("mf")]

        public VolumeMeasure Mf {
            get {
                return mfField;
            } 
            set {
                mfField = value;
                NotifyPropertyChanged("Mf");
            }
        }

        private VolumeMeasure mfField; 


        /// <summary>
        /// Mud alkalinity P1 from alternate alkalinity method (volume in ml of 0.02N acid to reach the phenolphthalein endpoint). 
        /// </summary>
		[XmlElement("alkalinityP1")]

        public VolumeMeasure AlkalinityP1 {
            get {
                return alkalinityP1Field;
            } 
            set {
                alkalinityP1Field = value;
                NotifyPropertyChanged("AlkalinityP1");
            }
        }

        private VolumeMeasure alkalinityP1Field; 


        /// <summary>
        /// Mud alkalinity P2 from alternate alkalinity method (volume in ml of 0.02N acid to titrate the reagent mixture to the phenolphthalein endpoint). 
        /// </summary>
		[XmlElement("alkalinityP2")]

        public VolumeMeasure AlkalinityP2 {
            get {
                return alkalinityP2Field;
            } 
            set {
                alkalinityP2Field = value;
                NotifyPropertyChanged("AlkalinityP2");
            }
        }

        private VolumeMeasure alkalinityP2Field; 


        /// <summary>
        /// Chloride content. 
        /// </summary>
		[XmlElement("chloride")]

        public DensityMeasure Chloride {
            get {
                return chlorideField;
            } 
            set {
                chlorideField = value;
                NotifyPropertyChanged("Chloride");
            }
        }

        private DensityMeasure chlorideField; 


        /// <summary>
        /// Calcium content. 
        /// </summary>
		[XmlElement("calcium")]

        public DensityMeasure Calcium {
            get {
                return calciumField;
            } 
            set {
                calciumField = value;
                NotifyPropertyChanged("Calcium");
            }
        }

        private DensityMeasure calciumField; 


        /// <summary>
        /// Magnesium content. 
        /// </summary>
		[XmlElement("magnesium")]

        public DensityMeasure Magnesium {
            get {
                return magnesiumField;
            } 
            set {
                magnesiumField = value;
                NotifyPropertyChanged("Magnesium");
            }
        }

        private DensityMeasure magnesiumField; 


        /// <summary>
        /// Potassium content. 
        /// </summary>
		[XmlElement("potassium")]

        public DensityMeasure Potassium {
            get {
                return potassiumField;
            } 
            set {
                potassiumField = value;
                NotifyPropertyChanged("Potassium");
            }
        }

        private DensityMeasure potassiumField; 


        /// <summary>
        /// One or more sets of rheometer readings at given temperature and pressure. 
        /// </summary>
		[XmlElement("rheometer")]

        public List<Rheometer> Rheometer {
            get {
                return rheometerField;
            } 
            set {
                rheometerField = value;
                NotifyPropertyChanged("Rheometer");
            }
        }

        private List<Rheometer> rheometerField; 


        /// <summary>
        /// Brine content (commonly in percent). 
        /// </summary>
		[XmlElement("brinePc")]

        public VolumePerVolumeMeasure BrinePercent {
            get {
                return brinePcField;
            } 
            set {
                brinePcField = value;
                NotifyPropertyChanged("BrinePercent");
            }
        }

        private VolumePerVolumeMeasure brinePcField; 


        /// <summary>
        /// Lime content. 
        /// </summary>
		[XmlElement("lime")]

        public DensityMeasure Lime {
            get {
                return limeField;
            } 
            set {
                limeField = value;
                NotifyPropertyChanged("Lime");
            }
        }

        private DensityMeasure limeField; 


        /// <summary>
        /// Measurement of the emulsion stability and oil-wetting capability in oil-based muds. 
        /// </summary>
		[XmlElement("electStab")]

        public ElectricPotentialMeasure ElectStab {
            get {
                return electStabField;
            } 
            set {
                electStabField = value;
                NotifyPropertyChanged("ElectStab");
            }
        }

        private ElectricPotentialMeasure electStabField; 


        /// <summary>
        /// Calcium chloride content. 
        /// </summary>
		[XmlElement("calciumChloride")]

        public DensityMeasure CalciumChloride {
            get {
                return calciumChlorideField;
            } 
            set {
                calciumChlorideField = value;
                NotifyPropertyChanged("CalciumChloride");
            }
        }

        private DensityMeasure calciumChlorideField; 


        /// <summary>
        /// Name of company. 
        /// </summary>
		[XmlElement("company")]

        public String Company {
            get {
                return companyField;
            } 
            set {
                companyField = value;
                NotifyPropertyChanged("Company");
            }
        }

        private String companyField; 


        /// <summary>
        /// Engineer name 
        /// </summary>
		[XmlElement("engineer")]

        public String Engineer {
            get {
                return engineerField;
            } 
            set {
                engineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private String engineerField; 


        /// <summary>
        /// Average specific gravity of solids. 
        /// </summary>
		[XmlElement("asg")]

        public Double? Asg {
            get {
                return asgField;
            } 
            set {
                asgField = value;
                this.AsgSpecified = true;
                NotifyPropertyChanged("Asg");
            }
        }

        private Double? asgField; 


		/// <summary>
        /// asgSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean AsgSpecified {
            get {
                return asgSpecifiedField;
            } 
            set {
                asgSpecifiedField = value;
                NotifyPropertyChanged("AsgSpecified");
            }
        }

        private Boolean asgSpecifiedField; 


        /// <summary>
        /// Solids high gravity (commonly in percent). 
        /// </summary>
		[XmlElement("solidsHiGravPc")]

        public VolumePerVolumeMeasure SolidsHiGravPercent {
            get {
                return solidsHiGravPcField;
            } 
            set {
                solidsHiGravPcField = value;
                NotifyPropertyChanged("SolidsHiGravPercent");
            }
        }

        private VolumePerVolumeMeasure solidsHiGravPcField; 


        /// <summary>
        /// Polymers present in mud system. 
        /// </summary>
		[XmlElement("polymer")]

        public VolumePerVolumeMeasure Polymer {
            get {
                return polymerField;
            } 
            set {
                polymerField = value;
                NotifyPropertyChanged("Polymer");
            }
        }

        private VolumePerVolumeMeasure polymerField; 


        /// <summary>
        /// Type of polymers present in mud system. 
        /// </summary>
		[XmlElement("polyType")]

        public String PolyType {
            get {
                return polyTypeField;
            } 
            set {
                polyTypeField = value;
                NotifyPropertyChanged("PolyType");
            }
        }

        private String polyTypeField; 


        /// <summary>
        /// Solids corrected for Chloride content (commonly in percent). 
        /// </summary>
		[XmlElement("solCorPc")]

        public VolumePerVolumeMeasure SolCorPercent {
            get {
                return solCorPcField;
            } 
            set {
                solCorPcField = value;
                NotifyPropertyChanged("SolCorPercent");
            }
        }

        private VolumePerVolumeMeasure solCorPcField; 


        /// <summary>
        /// Oil on Cuttings. 
        /// </summary>
		[XmlElement("oilCtg")]

        public MassConcentrationMeasure OilCtg {
            get {
                return oilCtgField;
            } 
            set {
                oilCtgField = value;
                NotifyPropertyChanged("OilCtg");
            }
        }

        private MassConcentrationMeasure oilCtgField; 


        /// <summary>
        /// Total calcium hardness. 
        /// </summary>
		[XmlElement("hardnessCa")]

        public MassConcentrationMeasure HardnessCA {
            get {
                return hardnessCaField;
            } 
            set {
                hardnessCaField = value;
                NotifyPropertyChanged("HardnessCA");
            }
        }

        private MassConcentrationMeasure hardnessCaField; 


        /// <summary>
        /// Sulfide content. 
        /// </summary>
		[XmlElement("sulfide")]

        public DensityMeasure Sulfide {
            get {
                return sulfideField;
            } 
            set {
                sulfideField = value;
                NotifyPropertyChanged("Sulfide");
            }
        }

        private DensityMeasure sulfideField; 


        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Rheometer Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rheometer", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Rheometer Component Schema ")]
    public partial class Rheometer : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Rheometer temperature. 
        /// </summary>
		[XmlElement("tempRheom")]

        public ThermodynamicTemperatureMeasure TempRheom {
            get {
                return tempRheomField;
            } 
            set {
                tempRheomField = value;
                NotifyPropertyChanged("TempRheom");
            }
        }

        private ThermodynamicTemperatureMeasure tempRheomField; 


        /// <summary>
        /// Rheometer pressure. 
        /// </summary>
		[XmlElement("presRheom")]

        public PressureMeasure PresRheom {
            get {
                return presRheomField;
            } 
            set {
                presRheomField = value;
                NotifyPropertyChanged("PresRheom");
            }
        }

        private PressureMeasure presRheomField; 


        /// <summary>
        /// 3 RPM viscometer reading 
        /// </summary>
		[XmlElement("vis3Rpm")]

        public Double? Vis3Rpm {
            get {
                return vis3RpmField;
            } 
            set {
                vis3RpmField = value;
                this.Vis3RpmSpecified = true;
                NotifyPropertyChanged("Vis3Rpm");
            }
        }

        private Double? vis3RpmField; 


		/// <summary>
        /// vis3RpmSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean Vis3RpmSpecified {
            get {
                return vis3RpmSpecifiedField;
            } 
            set {
                vis3RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis3RpmSpecified");
            }
        }

        private Boolean vis3RpmSpecifiedField; 


        /// <summary>
        /// 6 RPM viscometer reading. 
        /// </summary>
		[XmlElement("vis6Rpm")]

        public Double? Vis6Rpm {
            get {
                return vis6RpmField;
            } 
            set {
                vis6RpmField = value;
                this.Vis6RpmSpecified = true;
                NotifyPropertyChanged("Vis6Rpm");
            }
        }

        private Double? vis6RpmField; 


		/// <summary>
        /// vis6RpmSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean Vis6RpmSpecified {
            get {
                return vis6RpmSpecifiedField;
            } 
            set {
                vis6RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis6RpmSpecified");
            }
        }

        private Boolean vis6RpmSpecifiedField; 


        /// <summary>
        /// 100 RPM viscometer reading. 
        /// </summary>
		[XmlElement("vis100Rpm")]

        public Double? Vis100Rpm {
            get {
                return vis100RpmField;
            } 
            set {
                vis100RpmField = value;
                this.Vis100RpmSpecified = true;
                NotifyPropertyChanged("Vis100Rpm");
            }
        }

        private Double? vis100RpmField; 


		/// <summary>
        /// vis100RpmSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean Vis100RpmSpecified {
            get {
                return vis100RpmSpecifiedField;
            } 
            set {
                vis100RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis100RpmSpecified");
            }
        }

        private Boolean vis100RpmSpecifiedField; 


        /// <summary>
        /// 200 RPM viscometer reading. 
        /// </summary>
		[XmlElement("vis200Rpm")]

        public Double? Vis200Rpm {
            get {
                return vis200RpmField;
            } 
            set {
                vis200RpmField = value;
                this.Vis200RpmSpecified = true;
                NotifyPropertyChanged("Vis200Rpm");
            }
        }

        private Double? vis200RpmField; 


		/// <summary>
        /// vis200RpmSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean Vis200RpmSpecified {
            get {
                return vis200RpmSpecifiedField;
            } 
            set {
                vis200RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis200RpmSpecified");
            }
        }

        private Boolean vis200RpmSpecifiedField; 


        /// <summary>
        /// 300 RPM viscometer reading. 
        /// </summary>
		[XmlElement("vis300Rpm")]

        public Double? Vis300Rpm {
            get {
                return vis300RpmField;
            } 
            set {
                vis300RpmField = value;
                this.Vis300RpmSpecified = true;
                NotifyPropertyChanged("Vis300Rpm");
            }
        }

        private Double? vis300RpmField; 


		/// <summary>
        /// vis300RpmSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean Vis300RpmSpecified {
            get {
                return vis300RpmSpecifiedField;
            } 
            set {
                vis300RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis300RpmSpecified");
            }
        }

        private Boolean vis300RpmSpecifiedField; 


        /// <summary>
        /// 600 RPM viscometer reading. 
        /// </summary>
		[XmlElement("vis600Rpm")]

        public Double? Vis600Rpm {
            get {
                return vis600RpmField;
            } 
            set {
                vis600RpmField = value;
                this.Vis600RpmSpecified = true;
                NotifyPropertyChanged("Vis600Rpm");
            }
        }

        private Double? vis600RpmField; 


		/// <summary>
        /// vis600RpmSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean Vis600RpmSpecified {
            get {
                return vis600RpmSpecifiedField;
            } 
            set {
                vis600RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis600RpmSpecified");
            }
        }

        private Boolean vis600RpmSpecifiedField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_formationMarkers xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("formationMarkers", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_formationMarkers xsd type.")]
    public partial class FormationMarkerList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single formation marker. 
        /// </summary>
		[XmlElement("formationMarker")]

        public List<FormationMarker> FormationMarker {
            get {
                return formationMarkerField;
            } 
            set {
                formationMarkerField = value;
                NotifyPropertyChanged("FormationMarker");
            }
        }

        private List<FormationMarker> formationMarkerField; 


        /// <summary>
        /// A single formation marker. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FormationMarker;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Formation Marker.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_formationMarker", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Formation Marker.")]
    public partial class FormationMarker : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the formation marker. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the formation marker. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Prognosed measured depth. 
        /// </summary>
		[XmlElement("mdPrognosed")]

        public MeasuredDepthCoord MDPrognosed {
            get {
                return mdPrognosedField;
            } 
            set {
                mdPrognosedField = value;
                NotifyPropertyChanged("MDPrognosed");
            }
        }

        private MeasuredDepthCoord mdPrognosedField; 


        /// <summary>
        /// Prognosed true vertical depth. 
        /// </summary>
		[XmlElement("tvdPrognosed")]

        public WellVerticalDepthCoord TvdPrognosed {
            get {
                return tvdPrognosedField;
            } 
            set {
                tvdPrognosedField = value;
                NotifyPropertyChanged("TvdPrognosed");
            }
        }

        private WellVerticalDepthCoord tvdPrognosedField; 


        /// <summary>
        /// Sampled measured depth at top of marker. 
        /// </summary>
		[XmlElement("mdTopSample")]

        public MeasuredDepthCoord MDTopSample {
            get {
                return mdTopSampleField;
            } 
            set {
                mdTopSampleField = value;
                NotifyPropertyChanged("MDTopSample");
            }
        }

        private MeasuredDepthCoord mdTopSampleField; 


        /// <summary>
        /// Sampled true vertical depth at top of marker. 
        /// </summary>
		[XmlElement("tvdTopSample")]

        public WellVerticalDepthCoord TvdTopSample {
            get {
                return tvdTopSampleField;
            } 
            set {
                tvdTopSampleField = value;
                NotifyPropertyChanged("TvdTopSample");
            }
        }

        private WellVerticalDepthCoord tvdTopSampleField; 


        /// <summary>
        /// Bed Thickness. 
        /// </summary>
		[XmlElement("thicknessBed")]

        public LengthMeasure ThicknessBed {
            get {
                return thicknessBedField;
            } 
            set {
                thicknessBedField = value;
                NotifyPropertyChanged("ThicknessBed");
            }
        }

        private LengthMeasure thicknessBedField; 


        /// <summary>
        /// Formation exposed along the wellbore. 
        /// </summary>
		[XmlElement("thicknessApparent")]

        public LengthMeasure ThicknessApparent {
            get {
                return thicknessApparentField;
            } 
            set {
                thicknessApparentField = value;
                NotifyPropertyChanged("ThicknessApparent");
            }
        }

        private LengthMeasure thicknessApparentField; 


        /// <summary>
        /// Perpendicular thickness. 
        /// </summary>
		[XmlElement("thicknessPerpen")]

        public LengthMeasure ThicknessPerpen {
            get {
                return thicknessPerpenField;
            } 
            set {
                thicknessPerpenField = value;
                NotifyPropertyChanged("ThicknessPerpen");
            }
        }

        private LengthMeasure thicknessPerpenField; 


        /// <summary>
        /// Logged measured depth at top of marker. 
        /// </summary>
		[XmlElement("mdLogSample")]

        public MeasuredDepthCoord MDLogSample {
            get {
                return mdLogSampleField;
            } 
            set {
                mdLogSampleField = value;
                NotifyPropertyChanged("MDLogSample");
            }
        }

        private MeasuredDepthCoord mdLogSampleField; 


        /// <summary>
        /// Logged true vertical depth at top of marker. 
        /// </summary>
		[XmlElement("tvdLogSample")]

        public WellVerticalDepthCoord TvdLogSample {
            get {
                return tvdLogSampleField;
            } 
            set {
                tvdLogSampleField = value;
                NotifyPropertyChanged("TvdLogSample");
            }
        }

        private WellVerticalDepthCoord tvdLogSampleField; 


        /// <summary>
        /// Angle of dip with respect to horizontal. 
        /// </summary>
		[XmlElement("dip")]

        public PlaneAngleMeasure Dip {
            get {
                return dipField;
            } 
            set {
                dipField = value;
                NotifyPropertyChanged("Dip");
            }
        }

        private PlaneAngleMeasure dipField; 


        /// <summary>
        /// Interpreted downdip direction. 
        /// </summary>
		[XmlElement("dipDirection")]

        public PlaneAngleMeasure DipDirection {
            get {
                return dipDirectionField;
            } 
            set {
                dipDirectionField = value;
                NotifyPropertyChanged("DipDirection");
            }
        }

        private PlaneAngleMeasure dipDirectionField; 


        /// <summary>
        /// Chronostratigraphic classification. 
        /// </summary>
		[XmlElement("chronostratigraphic")]

        public String Chronostratigraphic {
            get {
                return chronostratigraphicField;
            } 
            set {
                chronostratigraphicField = value;
                NotifyPropertyChanged("Chronostratigraphic");
            }
        }

        private String chronostratigraphicField; 


        /// <summary>
        /// Formation name. 
        /// </summary>
		[XmlElement("nameFormation")]

        public String NameFormation {
            get {
                return nameFormationField;
            } 
            set {
                nameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private String nameFormationField; 


        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_logs xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("logs", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_logs xsd type.")]
    public partial class LogList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single log. 
        /// </summary>
		[XmlElement("log")]

        public List<Log> Log {
            get {
                return logField;
            } 
            set {
                logField = value;
                NotifyPropertyChanged("Log");
            }
        }

        private List<Log> logField; 


        /// <summary>
        /// A single log. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Log;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Log.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_log", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Log.")]
    public partial class Log : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the log. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the log. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Whether or not the log is growing. True ("true" or "1") indicates the that the log is still growing in size (that is, logData values are still being added). For example, it may be connected to a realtime stream. False ("false" or "0") indicates that the log is closed (that is, no further logData values will be added). Not given indicates that the status of the log is not known. This value is only relevant within the context of a server.
        /// </summary>
		[XmlElement("objectGrowing")]

        public Boolean? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set {
                objectGrowingField = value;
                this.ObjectGrowingSpecified = true;
                NotifyPropertyChanged("ObjectGrowing");
            }
        }

        private Boolean? objectGrowingField; 


		/// <summary>
        /// objectGrowingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ObjectGrowingSpecified {
            get {
                return objectGrowingSpecifiedField;
            } 
            set {
                objectGrowingSpecifiedField = value;
                NotifyPropertyChanged("ObjectGrowingSpecified");
            }
        }

        private Boolean objectGrowingSpecifiedField; 


        /// <summary>
        /// The number of data rows in the persistent log. If a value is specified for this element in a query then the server will limit the number of data rows in the result but the return value will still be the number of data rows in the persistent log.
        /// </summary>
		[XmlElement("dataRowCount")]

        public Int32? DataRowCount {
            get {
                return dataRowCountField;
            } 
            set {
                dataRowCountField = value;
                this.DataRowCountSpecified = true;
                NotifyPropertyChanged("DataRowCount");
            }
        }

        private Int32? dataRowCountField; 


		/// <summary>
        /// dataRowCountSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DataRowCountSpecified {
            get {
                return dataRowCountSpecifiedField;
            } 
            set {
                dataRowCountSpecifiedField = value;
                NotifyPropertyChanged("DataRowCountSpecified");
            }
        }

        private Boolean dataRowCountSpecifiedField; 


        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
		[XmlElement("serviceCompany")]

        public String ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private String serviceCompanyField; 


        /// <summary>
        /// Log run number. This should normally be a number; however some legacy systems encode other information in this value.
        /// </summary>
		[XmlElement("runNumber")]

        public String RunNumber {
            get {
                return runNumberField;
            } 
            set {
                runNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private String runNumberField; 


        /// <summary>
        /// The bottom hole assembly run number associated with this log.
        /// </summary>
		[XmlElement("bhaRunNumber")]

        public Int16? BhaRunNumber {
            get {
                return bhaRunNumberField;
            } 
            set {
                bhaRunNumberField = value;
                this.BhaRunNumberSpecified = true;
                NotifyPropertyChanged("BhaRunNumber");
            }
        }

        private Int16? bhaRunNumberField; 


		/// <summary>
        /// bhaRunNumberSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean BhaRunNumberSpecified {
            get {
                return bhaRunNumberSpecifiedField;
            } 
            set {
                bhaRunNumberSpecifiedField = value;
                NotifyPropertyChanged("BhaRunNumberSpecified");
            }
        }

        private Boolean bhaRunNumberSpecifiedField; 


        /// <summary>
        /// Identifies the pass within the run.
        /// </summary>
		[XmlElement("pass")]

        public String Pass {
            get {
                return passField;
            } 
            set {
                passField = value;
                NotifyPropertyChanged("Pass");
            }
        }

        private String passField; 


        /// <summary>
        /// Date and time that the log was created. 
        /// </summary>
		[XmlElement("creationDate")]

        public DateTime? CreationDate {
            get {
                return creationDateField;
            } 
            set {
                creationDateField = value;
                this.CreationDateSpecified = true;
                NotifyPropertyChanged("CreationDate");
            }
        }

        private DateTime? creationDateField; 


		/// <summary>
        /// creationDateSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CreationDateSpecified {
            get {
                return creationDateSpecifiedField;
            } 
            set {
                creationDateSpecifiedField = value;
                NotifyPropertyChanged("CreationDateSpecified");
            }
        }

        private Boolean creationDateSpecifiedField; 


        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// Primary index type. 
        /// </summary>
		[XmlElement("indexType")]

        public LogIndexType? IndexType {
            get {
                return indexTypeField;
            } 
            set {
                indexTypeField = value;
                NotifyPropertyChanged("IndexType");
            }
        }

        private LogIndexType? indexTypeField; 


        /// <summary>
        /// When the log header defines the direction as "Increasing", the startIndex is the starting (minimum) index value at which the first valid data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first valid data point is located.
        /// </summary>
		[XmlElement("startIndex")]

        public GenericMeasure StartIndex {
            get {
                return startIndexField;
            } 
            set {
                startIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private GenericMeasure startIndexField; 


        /// <summary>
        /// When the log header defines the direction as "Increasing", the endIndex is the ending (maximum) index value at which the last valid data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last valid data point is located.
        /// </summary>
		[XmlElement("endIndex")]

        public GenericMeasure EndIndex {
            get {
                return endIndexField;
            } 
            set {
                endIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private GenericMeasure endIndexField; 


        /// <summary>
        /// The sampling increment. Set to zero for unequal sampling. This would only apply if the curve was sorted on its own values. For curves that are originally sampled at a constant increment, this value should be retained because the calculated values may have cumulative errors.
        /// </summary>
		[XmlElement("stepIncrement")]

        public RatioGenericMeasure StepIncrement {
            get {
                return stepIncrementField;
            } 
            set {
                stepIncrementField = value;
                NotifyPropertyChanged("StepIncrement");
            }
        }

        private RatioGenericMeasure stepIncrementField; 


        /// <summary>
        /// When the log header defines the direction as "Increasing", the startIndex is the starting (minimum) index value at which the first valid data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first valid data point is located. 
        /// </summary>
		[XmlElement("startDateTimeIndex")]

        public DateTime? StartDateTimeIndex {
            get {
                return startDateTimeIndexField;
            } 
            set {
                startDateTimeIndexField = value;
                this.StartDateTimeIndexSpecified = true;
                NotifyPropertyChanged("StartDateTimeIndex");
            }
        }

        private DateTime? startDateTimeIndexField; 


		/// <summary>
        /// startDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean StartDateTimeIndexSpecified {
            get {
                return startDateTimeIndexSpecifiedField;
            } 
            set {
                startDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("StartDateTimeIndexSpecified");
            }
        }

        private Boolean startDateTimeIndexSpecifiedField; 


        /// <summary>
        /// When the log header defines the direction as "Increasing", the endIndex is the ending (maximum) index value at which the last valid data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last valid data point is located. 
        /// </summary>
		[XmlElement("endDateTimeIndex")]

        public DateTime? EndDateTimeIndex {
            get {
                return endDateTimeIndexField;
            } 
            set {
                endDateTimeIndexField = value;
                this.EndDateTimeIndexSpecified = true;
                NotifyPropertyChanged("EndDateTimeIndex");
            }
        }

        private DateTime? endDateTimeIndexField; 


		/// <summary>
        /// endDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean EndDateTimeIndexSpecified {
            get {
                return endDateTimeIndexSpecifiedField;
            } 
            set {
                endDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("EndDateTimeIndexSpecified");
            }
        }

        private Boolean endDateTimeIndexSpecifiedField; 


        /// <summary>
        /// The sort order of the data row index values in the XML instance. For an "Increasing" direction the index value of consecutive data nodes are ascending. For a "Decreasing" direction the index value of consecutive data nodes are descending. The default direction is "Increasing". The direction of a log cannot be changed once it has been created. That is, this value cannot be updated in a server.
        /// </summary>
		[XmlElement("direction")]

        public LogIndexDirection? Direction {
            get {
                return directionField;
            } 
            set {
                directionField = value;
                this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        private LogIndexDirection? directionField; 


		/// <summary>
        /// directionSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DirectionSpecified {
            get {
                return directionSpecifiedField;
            } 
            set {
                directionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }

        private Boolean directionSpecifiedField; 


        /// <summary>
        /// The mnemonic of the index curve plus the column index. A column index of zero indicates an implied trace whose values start at startIndex and increment by stepIncrement for each row.
        /// </summary>
		[XmlElement("indexCurve")]

        public IndexCurve IndexCurve {
            get {
                return indexCurveField;
            } 
            set {
                indexCurveField = value;
                NotifyPropertyChanged("IndexCurve");
            }
        }

        private IndexCurve indexCurveField; 


        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e. when the null value representation is not explicitly defined). If a null value representation is defined for a log, this becomes the default for all curves in that log (but can be overridden at the curve level). An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
		[XmlElement("nullValue")]

        public String NullValue {
            get {
                return nullValueField;
            } 
            set {
                nullValueField = value;
                NotifyPropertyChanged("NullValue");
            }
        }

        private String nullValueField; 


        /// <summary>
        /// Log parameters. 
        /// </summary>
		[XmlElement("logParam")]

        public List<IndexedObject> LogParam {
            get {
                return logParamField;
            } 
            set {
                logParamField = value;
                NotifyPropertyChanged("LogParam");
            }
        }

        private List<IndexedObject> logParamField; 


        /// <summary>
        /// Container element for the log curve information. 
        /// </summary>
		[XmlElement("logCurveInfo")]

        public List<LogCurveInfo> LogCurveInfo {
            get {
                return logCurveInfoField;
            } 
            set {
                logCurveInfoField = value;
                NotifyPropertyChanged("LogCurveInfo");
            }
        }

        private List<LogCurveInfo> logCurveInfoField; 


        /// <summary>
        /// Container for one or more "rows" of log data. 
        /// </summary>
		[XmlArrayItem("data")]
        [XmlArray("logData")]

        public List<String> LogData {
            get {
                return logDataField;
            } 
            set {
                logDataField = value;
                NotifyPropertyChanged("LogData");
            }
        }

        private List<String> logDataField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the indexCurve xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="indexCurve", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the indexCurve xsd type.")]
    public partial class IndexCurve : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IndexCurve class.
        /// </summary>
        public IndexCurve() {}

        /// <summary>
        /// Initializes a new instance of the IndexCurve class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IndexCurve(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


		/// <summary>
        /// The column index of the curve.
        /// </summary>
        [XmlAttribute("columnIndex")]

        public Int16 ColumnIndex {
            get {
                return columnIndexField;
            } 
            set {
                columnIndexField = value;
                NotifyPropertyChanged("ColumnIndex");
            }
        }

        private Int16 columnIndexField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML Log - Curve Information
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_logCurveInfo", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML Log - Curve Information")]
    public partial class LogCurveInfo : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The curve name. This must be unique for all curves in a log.
        /// </summary>
		[XmlElement("mnemonic")]

        public String Mnemonic {
            get {
                return mnemonicField;
            } 
            set {
                mnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private String mnemonicField; 


        /// <summary>
        /// The curve classification obtained from a lookup in the vendors mnemonic catalog. 
        /// </summary>
		[XmlElement("classWitsml")]

        public RealtimeData ClassWitsml {
            get {
                return classWitsmlField;
            } 
            set {
                classWitsmlField = value;
                this.ClassWitsmlSpecified = true;
                NotifyPropertyChanged("ClassWitsml");
            }
        }

        private RealtimeData classWitsmlField; 


		/// <summary>
        /// classWitsmlSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ClassWitsmlSpecified {
            get {
                return classWitsmlSpecifiedField;
            } 
            set {
                classWitsmlSpecifiedField = value;
                NotifyPropertyChanged("ClassWitsmlSpecified");
            }
        }

        private Boolean classWitsmlSpecifiedField; 


        /// <summary>
        /// Unit of measurement of the data values. 
        /// </summary>
		[XmlElement("unit")]

        public String Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private String unitField; 


        /// <summary>
        /// Name alias for this trace. 
        /// </summary>
		[XmlElement("mnemAlias")]

        public String MnemAlias {
            get {
                return mnemAliasField;
            } 
            set {
                mnemAliasField = value;
                NotifyPropertyChanged("MnemAlias");
            }
        }

        private String mnemAliasField; 


        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e. when the null value representation is not explicitly defined). If a null value is defined in the logCurveInfo, it overrides any null value specified at the logHeader level. An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
		[XmlElement("nullValue")]

        public String NullValue {
            get {
                return nullValueField;
            } 
            set {
                nullValueField = value;
                NotifyPropertyChanged("NullValue");
            }
        }

        private String nullValueField; 


        /// <summary>
        /// True (true or 1) if this curve is a candidate to be a primary index. False (false or 0) or not given, indicates otherwise. An index curve should monotonically change when sorted on its own values (i.e., no duplicates). 
        /// </summary>
		[XmlElement("alternateIndex")]

        public Boolean? AlternateIndex {
            get {
                return alternateIndexField;
            } 
            set {
                alternateIndexField = value;
                this.AlternateIndexSpecified = true;
                NotifyPropertyChanged("AlternateIndex");
            }
        }

        private Boolean? alternateIndexField; 


		/// <summary>
        /// alternateIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean AlternateIndexSpecified {
            get {
                return alternateIndexSpecifiedField;
            } 
            set {
                alternateIndexSpecifiedField = value;
                NotifyPropertyChanged("AlternateIndexSpecified");
            }
        }

        private Boolean alternateIndexSpecifiedField; 


        /// <summary>
        /// A pointer to the wellDatum that represents the values of this trace. This is only relevant for measured depths, vertical depths or elevations.
        /// </summary>
		[XmlElement("wellDatum")]

        public RefNameString WellDatum {
            get {
                return wellDatumField;
            } 
            set {
                wellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

        private RefNameString wellDatumField; 


        /// <summary>
        /// The minimum index value at which the first valid data point is located. This value will be properly set by the server to reflect data in the returned document.
        /// </summary>
		[XmlElement("minIndex")]

        public GenericMeasure MinIndex {
            get {
                return minIndexField;
            } 
            set {
                minIndexField = value;
                NotifyPropertyChanged("MinIndex");
            }
        }

        private GenericMeasure minIndexField; 


        /// <summary>
        /// The maximum index value at which the last valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
		[XmlElement("maxIndex")]

        public GenericMeasure MaxIndex {
            get {
                return maxIndexField;
            } 
            set {
                maxIndexField = value;
                NotifyPropertyChanged("MaxIndex");
            }
        }

        private GenericMeasure maxIndexField; 


        /// <summary>
        /// The minimum index value at which the first valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
		[XmlElement("minDateTimeIndex")]

        public DateTime? MinDateTimeIndex {
            get {
                return minDateTimeIndexField;
            } 
            set {
                minDateTimeIndexField = value;
                this.MinDateTimeIndexSpecified = true;
                NotifyPropertyChanged("MinDateTimeIndex");
            }
        }

        private DateTime? minDateTimeIndexField; 


		/// <summary>
        /// minDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MinDateTimeIndexSpecified {
            get {
                return minDateTimeIndexSpecifiedField;
            } 
            set {
                minDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("MinDateTimeIndexSpecified");
            }
        }

        private Boolean minDateTimeIndexSpecifiedField; 


        /// <summary>
        /// The maximum index value at which the last valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
		[XmlElement("maxDateTimeIndex")]

        public DateTime? MaxDateTimeIndex {
            get {
                return maxDateTimeIndexField;
            } 
            set {
                maxDateTimeIndexField = value;
                this.MaxDateTimeIndexSpecified = true;
                NotifyPropertyChanged("MaxDateTimeIndex");
            }
        }

        private DateTime? maxDateTimeIndexField; 


		/// <summary>
        /// maxDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MaxDateTimeIndexSpecified {
            get {
                return maxDateTimeIndexSpecifiedField;
            } 
            set {
                maxDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("MaxDateTimeIndexSpecified");
            }
        }

        private Boolean maxDateTimeIndexSpecifiedField; 


        /// <summary>
        /// A 1-based index of data in the LOGDATA.DATA section. A value of zero indicates an implied curve with no values in the data record.
        /// </summary>
		[XmlElement("columnIndex")]

        public Int16? ColumnIndex {
            get {
                return columnIndexField;
            } 
            set {
                columnIndexField = value;
                NotifyPropertyChanged("ColumnIndex");
            }
        }

        private Int16? columnIndexField; 


        /// <summary>
        /// Description of the curve. 
        /// </summary>
		[XmlElement("curveDescription")]

        public String CurveDescription {
            get {
                return curveDescriptionField;
            } 
            set {
                curveDescriptionField = value;
                NotifyPropertyChanged("CurveDescription");
            }
        }

        private String curveDescriptionField; 


        /// <summary>
        /// Offset of sensor from drill bit. This element is only informative. The measured depth values are at the actual depth (not bit depth from which you must subtract the offset).
        /// </summary>
		[XmlElement("sensorOffset")]

        public LengthMeasure SensorOffset {
            get {
                return sensorOffsetField;
            } 
            set {
                sensorOffsetField = value;
                NotifyPropertyChanged("SensorOffset");
            }
        }

        private LengthMeasure sensorOffsetField; 


        /// <summary>
        /// Data source, could be tool name/id. 
        /// </summary>
		[XmlElement("dataSource")]

        public String DataSource {
            get {
                return dataSourceField;
            } 
            set {
                dataSourceField = value;
                NotifyPropertyChanged("DataSource");
            }
        }

        private String dataSourceField; 


        /// <summary>
        /// Data density of sample in samples per length unit. 
        /// </summary>
		[XmlElement("densData")]

        public PerLengthMeasure DensData {
            get {
                return densDataField;
            } 
            set {
                densDataField = value;
                NotifyPropertyChanged("DensData");
            }
        }

        private PerLengthMeasure densDataField; 


        /// <summary>
        /// State of trace data. 
        /// </summary>
		[XmlElement("traceState")]

        public LogTraceState? TraceState {
            get {
                return traceStateField;
            } 
            set {
                traceStateField = value;
                this.TraceStateSpecified = true;
                NotifyPropertyChanged("TraceState");
            }
        }

        private LogTraceState? traceStateField; 


		/// <summary>
        /// traceStateSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TraceStateSpecified {
            get {
                return traceStateSpecifiedField;
            } 
            set {
                traceStateSpecifiedField = value;
                NotifyPropertyChanged("TraceStateSpecified");
            }
        }

        private Boolean traceStateSpecifiedField; 


        /// <summary>
        /// Origin of trace data. 
        /// </summary>
		[XmlElement("traceOrigin")]

        public LogTraceOrigin? TraceOrigin {
            get {
                return traceOriginField;
            } 
            set {
                traceOriginField = value;
                this.TraceOriginSpecified = true;
                NotifyPropertyChanged("TraceOrigin");
            }
        }

        private LogTraceOrigin? traceOriginField; 


		/// <summary>
        /// traceOriginSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TraceOriginSpecified {
            get {
                return traceOriginSpecifiedField;
            } 
            set {
                traceOriginSpecifiedField = value;
                NotifyPropertyChanged("TraceOriginSpecified");
            }
        }

        private Boolean traceOriginSpecifiedField; 


        /// <summary>
        /// Log data type. 
        /// </summary>
		[XmlElement("typeLogData")]

        public LogDataType? TypeLogData {
            get {
                return typeLogDataField;
            } 
            set {
                typeLogDataField = value;
                this.TypeLogDataSpecified = true;
                NotifyPropertyChanged("TypeLogData");
            }
        }

        private LogDataType? typeLogDataField; 


		/// <summary>
        /// typeLogDataSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeLogDataSpecified {
            get {
                return typeLogDataSpecifiedField;
            } 
            set {
                typeLogDataSpecifiedField = value;
                NotifyPropertyChanged("TypeLogDataSpecified");
            }
        }

        private Boolean typeLogDataSpecifiedField; 


        /// <summary>
        /// Indicates that the curve is an array curve (i.e., multi-valued samples), and provides meta data by which an axis of the array can be understood.
        /// </summary>
		[XmlElement("axisDefinition")]

        public List<AxisDefinition> AxisDefinition {
            get {
                return axisDefinitionField;
            } 
            set {
                axisDefinitionField = value;
                NotifyPropertyChanged("AxisDefinition");
            }
        }

        private List<AxisDefinition> axisDefinitionField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// Metadata by which the array structure of a compound value is defined. This defines one axis of an array. 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_axisDefinition", Namespace="http://www.witsml.org/schemas/131")]

    [Description("Metadata by which the array structure of a compound value is defined. This defines one axis of an array. ")]
    public partial class AxisDefinition : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The order of this axis. The order should begin with one and increment by one for each additional axis. The order indicates how fast the index of the axis varies in the serialized list of values. The index of an axis with an order of one varies the slowest. The index of an axis with an order of two varies the next slowest. And so on. This is the same ordering that is used in the C programming language. For example, the following array: [ x axis ] | z11 z12 z13 y axis: z21 z22 z23 | z31 z32 z33 | z41 z42 z43 may be encoded as follows: axisDefinition[order=1].name='x' axisDefinition[order=1].count='3' axisDefinition[order=2].name='y' axisDefinition[order=2].count='4' { z11 z21 z31 z41 z12 z22 z32 z42 z13 z23 z33 z43 } or alternatively: axisDefinition[order=1].name='y' axisDefinition[order=1].count='4' axisDefinition[order=2].name='x' axisDefinition[order=2].count='3' { z11 z12 z13 z21 z22 z23 z31 z32 z33 z41 z42 z43 } 
        /// </summary>
		[XmlElement("order")]

        public Int16? Order {
            get {
                return orderField;
            } 
            set {
                orderField = value;
                NotifyPropertyChanged("Order");
            }
        }

        private Int16? orderField; 


        /// <summary>
        /// The count of elements along this axis of the array.
        /// </summary>
		[XmlElement("count")]

        public Int16? Count {
            get {
                return countField;
            } 
            set {
                countField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private Int16? countField; 


        /// <summary>
        /// The name of the array axis.
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// The property type by which the array axis is classified.
        /// </summary>
		[XmlElement("propertyType")]

        public String PropertyType {
            get {
                return propertyTypeField;
            } 
            set {
                propertyTypeField = value;
                NotifyPropertyChanged("PropertyType");
            }
        }

        private String propertyTypeField; 


        /// <summary>
        /// A string representing the units of measure of the axis values.
        /// </summary>
		[XmlElement("uom")]

        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 


        /// <summary>
        /// The serialziation of the axis positions of an array as a whitespace-delimited list values of type xsd:double. If the length of this list is less than 'count' then the difference in the last two values represents the increment to be used to fill out the list. For example, the list '2 4' with count=4 represents the list '2 4 6 8'.
        /// </summary>
        [XmlElement("doubleValues")]
        public Double? DoubleValues {
            get {
                return doubleValuesField;
            } 
            set {
                if (value != null && StringValuesSpecified) throw new Exception("Cannot set property DoubleValues when property StringValues is already set");
                doubleValuesField = value;
                DoubleValuesSpecified = (value!=null);
                NotifyPropertyChanged("DoubleValues");
            }
        }

        private Double? doubleValuesField; 
        /// <summary>
        /// Boolean to indicate if DoubleValues has been set. Used for serialization.
        /// </summary>
        private Boolean DoubleValuesSpecified = false; 

        /// <summary>
        /// The serialziation of the axis positions of an array as a whitespace-delimited list values of type xsd:String. Note: the serialization of string elements with embedded whitespace cannot be properly decoded.
        /// </summary>
        [XmlElement("stringValues")]
        public String StringValues {
            get {
                return stringValuesField;
            } 
            set {
                if (value != null && DoubleValuesSpecified) throw new Exception("Cannot set property StringValues when property DoubleValues is already set");
                stringValuesField = value;
                StringValuesSpecified = (value!=null);
                NotifyPropertyChanged("StringValues");
            }
        }

        private String stringValuesField; 
        /// <summary>
        /// Boolean to indicate if StringValues has been set. Used for serialization.
        /// </summary>
        private Boolean StringValuesSpecified = false; 



		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_messages xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("messages", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_messages xsd type.")]
    public partial class MessageList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single message. 
        /// </summary>
		[XmlElement("message")]

        public List<Message> Message {
            get {
                return messageField;
            } 
            set {
                messageField = value;
                NotifyPropertyChanged("Message");
            }
        }

        private List<Message> messageField; 


        /// <summary>
        /// A single message. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Message;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Message object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_message", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Message object.")]
    public partial class Message : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the message. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the risk. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// A reference to an object that is defined within the context of a wellbore.
        /// </summary>
		[XmlElement("objectReference")]

        public RefObjectString ObjectReference {
            get {
                return objectReferenceField;
            } 
            set {
                objectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private RefObjectString objectReferenceField; 


        /// <summary>
        /// A reference to an sub-object that is defined within the context of the object referenced by objectReference. This should only refer to recurring components of a growing object.
        /// </summary>
		[XmlElement("subObjectReference")]

        public RefObjectString SubObjectReference {
            get {
                return subObjectReferenceField;
            } 
            set {
                subObjectReferenceField = value;
                NotifyPropertyChanged("SubObjectReference");
            }
        }

        private RefObjectString subObjectReferenceField; 


        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
		[XmlElement("activityCode")]

        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set {
                activityCodeField = value;
                this.ActivityCodeSpecified = true;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private ActivityCode activityCodeField; 


		/// <summary>
        /// activityCodeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ActivityCodeSpecified {
            get {
                return activityCodeSpecifiedField;
            } 
            set {
                activityCodeSpecifiedField = value;
                NotifyPropertyChanged("ActivityCodeSpecified");
            }
        }

        private Boolean activityCodeSpecifiedField; 


        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
		[XmlElement("detailActivity")]

        public String DetailActivity {
            get {
                return detailActivityField;
            } 
            set {
                detailActivityField = value;
                NotifyPropertyChanged("DetailActivity");
            }
        }

        private String detailActivityField; 


        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[XmlElement("md")]

        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 


        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[XmlElement("mdBit")]

        public MeasuredDepthCoord MDBit {
            get {
                return mdBitField;
            } 
            set {
                mdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord mdBitField; 


        /// <summary>
        /// Message type. 
        /// </summary>
		[XmlElement("typeMessage")]

        public MessageType? TypeMessage {
            get {
                return typeMessageField;
            } 
            set {
                typeMessageField = value;
                NotifyPropertyChanged("TypeMessage");
            }
        }

        private MessageType? typeMessageField; 


        /// <summary>
        /// Message text. 
        /// </summary>
		[XmlElement("messageText")]

        public String MessageText {
            get {
                return messageTextField;
            } 
            set {
                messageTextField = value;
                NotifyPropertyChanged("MessageText");
            }
        }

        private String messageTextField; 


        /// <summary>
        /// Any extra numeric data. 
        /// </summary>
		[XmlElement("param")]

        public List<IndexedObject> Param {
            get {
                return paramField;
            } 
            set {
                paramField = value;
                NotifyPropertyChanged("Param");
            }
        }

        private List<IndexedObject> paramField; 


        /// <summary>
        /// Severity of incident. 
        /// </summary>
		[XmlElement("severity")]

        public MessageSeverity? Severity {
            get {
                return severityField;
            } 
            set {
                severityField = value;
                this.SeveritySpecified = true;
                NotifyPropertyChanged("Severity");
            }
        }

        private MessageSeverity? severityField; 


		/// <summary>
        /// severitySpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean SeveritySpecified {
            get {
                return severitySpecifiedField;
            } 
            set {
                severitySpecifiedField = value;
                NotifyPropertyChanged("SeveritySpecified");
            }
        }

        private Boolean severitySpecifiedField; 


        /// <summary>
        /// A warning probability (applies to warning).
        /// </summary>
		[XmlElement("warnProbability")]

        public MessageProbability? WarnProbability {
            get {
                return warnProbabilityField;
            } 
            set {
                warnProbabilityField = value;
                this.WarnProbabilitySpecified = true;
                NotifyPropertyChanged("WarnProbability");
            }
        }

        private MessageProbability? warnProbabilityField; 


		/// <summary>
        /// warnProbabilitySpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean WarnProbabilitySpecified {
            get {
                return warnProbabilitySpecifiedField;
            } 
            set {
                warnProbabilitySpecifiedField = value;
                NotifyPropertyChanged("WarnProbabilitySpecified");
            }
        }

        private Boolean warnProbabilitySpecifiedField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the refObjectString xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refObjectString", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the refObjectString xsd type.")]
    public partial class RefObjectString : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RefObjectString class.
        /// </summary>
        public RefObjectString() {}

        /// <summary>
        /// Initializes a new instance of the RefObjectString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public RefObjectString(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


		/// <summary>
        /// The name of the singular object being referenced.
        /// </summary>
        [XmlAttribute("object")]

        public String Object {
            get {
                return objectField;
            } 
            set {
                objectField = value;
                NotifyPropertyChanged("Object");
            }
        }

        private String objectField; 


		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the object referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
        [XmlAttribute("uidRef")]

        public String UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private String uidRefField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_mudLogs xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("mudLogs", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_mudLogs xsd type.")]
    public partial class MudLogList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single mud log. 
        /// </summary>
		[XmlElement("mudLog")]

        public List<MudLog> MudLog {
            get {
                return mudLogField;
            } 
            set {
                mudLogField = value;
                NotifyPropertyChanged("MudLog");
            }
        }

        private List<MudLog> mudLogField; 


        /// <summary>
        /// A single mud log. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return MudLog;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Mud Log object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_mudLog", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Mud Log object.")]
    public partial class MudLog : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the mud log. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the mud log. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Whether or not the mudLog is growing. True ("true" or "1") indicates the that the mudLog is still growing in size (that is, geologyInterval or parameter values are still being added). For example, it may be connected to a realtime stream. False ("false" or "0") indicates that the mudLog is closed (that is, no further geologyInterval or parameter values will be added). Not given indicates that the status of the mudLog is not known. This value is only relevant within the context of a server.
        /// </summary>
		[XmlElement("objectGrowing")]

        public Boolean? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set {
                objectGrowingField = value;
                this.ObjectGrowingSpecified = true;
                NotifyPropertyChanged("ObjectGrowing");
            }
        }

        private Boolean? objectGrowingField; 


		/// <summary>
        /// objectGrowingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ObjectGrowingSpecified {
            get {
                return objectGrowingSpecifiedField;
            } 
            set {
                objectGrowingSpecifiedField = value;
                NotifyPropertyChanged("ObjectGrowingSpecified");
            }
        }

        private Boolean objectGrowingSpecifiedField; 


        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


		/// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 


        /// <summary>
        /// Name of the company recording the information. 
        /// </summary>
		[XmlElement("mudLogCompany")]

        public String MudLogCompany {
            get {
                return mudLogCompanyField;
            } 
            set {
                mudLogCompanyField = value;
                NotifyPropertyChanged("MudLogCompany");
            }
        }

        private String mudLogCompanyField; 


        /// <summary>
        /// Concatenated names of mud loggers constructing the log. 
        /// </summary>
		[XmlElement("mudLogEngineers")]

        public String MudLogEngineers {
            get {
                return mudLogEngineersField;
            } 
            set {
                mudLogEngineersField = value;
                NotifyPropertyChanged("MudLogEngineers");
            }
        }

        private String mudLogEngineersField; 


        /// <summary>
        /// The minimum mdTop value in all geologyIntervals for this mud log message. This will be populated by the server to match the values that were returned as a result of a query. Used in a query template for specifying the begining range of logs to be retrieved.
        /// </summary>
		[XmlElement("startMd")]

        public MeasuredDepthCoord StartMD {
            get {
                return startMdField;
            } 
            set {
                startMdField = value;
                NotifyPropertyChanged("StartMD");
            }
        }

        private MeasuredDepthCoord startMdField; 


        /// <summary>
        /// The maximum mdBottom value in all geologyIntervals for this mud log message. This will be populated by the server to match the values that were returned as a result of a query. Used in a query template for specifying the ending range of logs to be retrieved. 
        /// </summary>
		[XmlElement("endMd")]

        public MeasuredDepthCoord EndMD {
            get {
                return endMdField;
            } 
            set {
                endMdField = value;
                NotifyPropertyChanged("EndMD");
            }
        }

        private MeasuredDepthCoord endMdField; 


        /// <summary>
        /// A foreign key to a related Log. This is a pointer to a log that is related to the mud log. The log may or may not have been created as a result of the mudlogging process. The log must represent the same well and wellbore as the mud log.
        /// </summary>
		[XmlElement("relatedLog")]

        public List<RefNameString> RelatedLog {
            get {
                return relatedLogField;
            } 
            set {
                relatedLogField = value;
                NotifyPropertyChanged("RelatedLog");
            }
        }

        private List<RefNameString> relatedLogField; 


        /// <summary>
        /// A single mud log parameter.
        /// </summary>
		[XmlElement("parameter")]

        public List<MudLogParameter> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

        private List<MudLogParameter> parameterField; 


        /// <summary>
        /// Set of geology and drilling information records for the wellbore. 
        /// </summary>
		[XmlElement("geologyInterval")]

        public List<GeologyInterval> GeologyInterval {
            get {
                return geologyIntervalField;
            } 
            set {
                geologyIntervalField = value;
                NotifyPropertyChanged("GeologyInterval");
            }
        }

        private List<GeologyInterval> geologyIntervalField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Mud Log Parameter Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudLogParameter", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Mud Log Parameter Component Schema")]
    public partial class MudLogParameter : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The type of the mud log parameter.
        /// </summary>
		[XmlElement("type")]

        public MudLogParameterType? Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private MudLogParameterType? typeField; 


        /// <summary>
        /// The data and time related to the parameter. At least one of dTime or mdTop must be given. The time refers to the top of the interval. 
        /// </summary>
		[XmlElement("dTime")]

        public DateTime? DTime {
            get {
                return dTimeField;
            } 
            set {
                dTimeField = value;
                this.DTimeSpecified = true;
                NotifyPropertyChanged("DTime");
            }
        }

        private DateTime? dTimeField; 


		/// <summary>
        /// dTimeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DTimeSpecified {
            get {
                return dTimeSpecifiedField;
            } 
            set {
                dTimeSpecifiedField = value;
                NotifyPropertyChanged("DTimeSpecified");
            }
        }

        private Boolean dTimeSpecifiedField; 


        /// <summary>
        /// The measured depth at a point or at the top of an interval. If it represents the top of an interval then bottom measured depth must also be given. At least one of dTime or mdTop must be given.
        /// </summary>
		[XmlElement("mdTop")]

        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 


        /// <summary>
        /// The bottom of an interval along the borehole. The bottom of the interval cannot be given unless the top is also given.
        /// </summary>
		[XmlElement("mdBottom")]

        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 


        /// <summary>
        /// A force value (e.g., hookload) that represents the parameter.
        /// </summary>
        [XmlElement("force")]
        public ForceMeasure Force {
            get {
                return forceField;
            } 
            set {
                if (value != null && EquivalentMudWeightSpecified) throw new Exception("Cannot set property Force when property EquivalentMudWeight is already set");
                if (value != null && ConcentrationSpecified) throw new Exception("Cannot set property Force when property Concentration is already set");
                if (value != null && PressureGradientSpecified) throw new Exception("Cannot set property Force when property PressureGradient is already set");
                forceField = value;
                ForceSpecified = (value!=null);
                NotifyPropertyChanged("Force");
            }
        }

        private ForceMeasure forceField; 
        /// <summary>
        /// Boolean to indicate if Force has been set. Used for serialization.
        /// </summary>
        private Boolean ForceSpecified = false; 

        /// <summary>
        /// A concentration value that represents the parameter.
        /// </summary>
        [XmlElement("concentration")]
        public VolumePerVolumeMeasure Concentration {
            get {
                return concentrationField;
            } 
            set {
                if (value != null && EquivalentMudWeightSpecified) throw new Exception("Cannot set property Concentration when property EquivalentMudWeight is already set");
                if (value != null && ForceSpecified) throw new Exception("Cannot set property Concentration when property Force is already set");
                if (value != null && PressureGradientSpecified) throw new Exception("Cannot set property Concentration when property PressureGradient is already set");
                concentrationField = value;
                ConcentrationSpecified = (value!=null);
                NotifyPropertyChanged("Concentration");
            }
        }

        private VolumePerVolumeMeasure concentrationField; 
        /// <summary>
        /// Boolean to indicate if Concentration has been set. Used for serialization.
        /// </summary>
        private Boolean ConcentrationSpecified = false; 

        /// <summary>
        /// A equivalent mud weight value that represents the parameter. This commonly used for pressure gradient parameters and pressure parameters.
        /// </summary>
        [XmlElement("equivalentMudWeight")]
        public DensityMeasure EquivalentMudWeight {
            get {
                return equivalentMudWeightField;
            } 
            set {
                if (value != null && ForceSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property Force is already set");
                if (value != null && ConcentrationSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property Concentration is already set");
                if (value != null && PressureGradientSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property PressureGradient is already set");
                equivalentMudWeightField = value;
                EquivalentMudWeightSpecified = (value!=null);
                NotifyPropertyChanged("EquivalentMudWeight");
            }
        }

        private DensityMeasure equivalentMudWeightField; 
        /// <summary>
        /// Boolean to indicate if EquivalentMudWeight has been set. Used for serialization.
        /// </summary>
        private Boolean EquivalentMudWeightSpecified = false; 

        /// <summary>
        /// A pressure gradient value that represents the parameter. This is sometimes specified instead of an equivalent mud weight.
        /// </summary>
        [XmlElement("pressureGradient")]
        public ForcePerVolumeMeasure PressureGradient {
            get {
                return pressureGradientField;
            } 
            set {
                if (value != null && EquivalentMudWeightSpecified) throw new Exception("Cannot set property PressureGradient when property EquivalentMudWeight is already set");
                if (value != null && ForceSpecified) throw new Exception("Cannot set property PressureGradient when property Force is already set");
                if (value != null && ConcentrationSpecified) throw new Exception("Cannot set property PressureGradient when property Concentration is already set");
                pressureGradientField = value;
                PressureGradientSpecified = (value!=null);
                NotifyPropertyChanged("PressureGradient");
            }
        }

        private ForcePerVolumeMeasure pressureGradientField; 
        /// <summary>
        /// Boolean to indicate if PressureGradient has been set. Used for serialization.
        /// </summary>
        private Boolean PressureGradientSpecified = false; 



        /// <summary>
        /// A textual parameter value. This value is typically annotation on the log. All spaces, tabs, line feeds and carriage returns are retained in the string. Characters representing line breaks should be replaced by a line feed or carriage return.
        /// </summary>
		[XmlElement("text")]

        public String Text {
            get {
                return textField;
            } 
            set {
                textField = value;
                NotifyPropertyChanged("Text");
            }
        }

        private String textField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_opsReports xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("opsReports", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_opsReports xsd type.")]
    public partial class OpsReportList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single operations report. 
        /// </summary>
		[XmlElement("opsReport")]

        public List<OpsReport> OpsReport {
            get {
                return opsReportField;
            } 
            set {
                opsReportField = value;
                NotifyPropertyChanged("OpsReport");
            }
        }

        private List<OpsReport> opsReportField; 


        /// <summary>
        /// A single operations report. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return OpsReport;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Operations Report object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_opsReport", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Operations Report object.")]
    public partial class OpsReport : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the operations report. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the operations report. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// A pointer to the rig utilized in this reporting period. 
        /// </summary>
		[XmlElement("rig")]

        public RefNameString Rig {
            get {
                return rigField;
            } 
            set {
                rigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private RefNameString rigField; 


        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


        /// <summary>
        /// Time from start of Operations (commonly in days). 
        /// </summary>
		[XmlElement("eTimStart")]

        public TimeMeasure ETimeStart {
            get {
                return eTimStartField;
            } 
            set {
                eTimStartField = value;
                NotifyPropertyChanged("ETimeStart");
            }
        }

        private TimeMeasure eTimStartField; 


        /// <summary>
        /// Time since bit broke ground (commonly in days). 
        /// </summary>
		[XmlElement("eTimSpud")]

        public TimeMeasure ETimeSpud {
            get {
                return eTimSpudField;
            } 
            set {
                eTimSpudField = value;
                NotifyPropertyChanged("ETimeSpud");
            }
        }

        private TimeMeasure eTimSpudField; 


        /// <summary>
        /// Time rig on location (commonly in days). 
        /// </summary>
		[XmlElement("eTimLoc")]

        public TimeMeasure ETimeLoc {
            get {
                return eTimLocField;
            } 
            set {
                eTimLocField = value;
                NotifyPropertyChanged("ETimeLoc");
            }
        }

        private TimeMeasure eTimLocField; 


        /// <summary>
        /// Wellbore Measured Depth. 
        /// </summary>
		[XmlElement("mdReport")]

        public MeasuredDepthCoord MDReport {
            get {
                return mdReportField;
            } 
            set {
                mdReportField = value;
                NotifyPropertyChanged("MDReport");
            }
        }

        private MeasuredDepthCoord mdReportField; 


        /// <summary>
        /// Wellbore True Vertical Depth. 
        /// </summary>
		[XmlElement("tvdReport")]

        public WellVerticalDepthCoord TvdReport {
            get {
                return tvdReportField;
            } 
            set {
                tvdReportField = value;
                NotifyPropertyChanged("TvdReport");
            }
        }

        private WellVerticalDepthCoord tvdReportField; 


        /// <summary>
        /// Distance drilled since last report. 
        /// </summary>
		[XmlElement("distDrill")]

        public LengthMeasure DistDrill {
            get {
                return distDrillField;
            } 
            set {
                distDrillField = value;
                NotifyPropertyChanged("DistDrill");
            }
        }

        private LengthMeasure distDrillField; 


        /// <summary>
        /// Drilling time. 
        /// </summary>
		[XmlElement("eTimDrill")]

        public TimeMeasure ETimeDrill {
            get {
                return eTimDrillField;
            } 
            set {
                eTimDrillField = value;
                NotifyPropertyChanged("ETimeDrill");
            }
        }

        private TimeMeasure eTimDrillField; 


        /// <summary>
        /// Measured depth of plan for this day number. 
        /// </summary>
		[XmlElement("mdPlanned")]

        public MeasuredDepthCoord MDPlanned {
            get {
                return mdPlannedField;
            } 
            set {
                mdPlannedField = value;
                NotifyPropertyChanged("MDPlanned");
            }
        }

        private MeasuredDepthCoord mdPlannedField; 


        /// <summary>
        /// Average Rate of Penetration through Interval. 
        /// </summary>
		[XmlElement("ropAv")]

        public VelocityMeasure RopAverage {
            get {
                return ropAvField;
            } 
            set {
                ropAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private VelocityMeasure ropAvField; 


        /// <summary>
        /// Rate of penetration at report time. 
        /// </summary>
		[XmlElement("ropCurrent")]

        public VelocityMeasure RopCurrent {
            get {
                return ropCurrentField;
            } 
            set {
                ropCurrentField = value;
                NotifyPropertyChanged("RopCurrent");
            }
        }

        private VelocityMeasure ropCurrentField; 


        /// <summary>
        /// Name of operator rig supervisor. 
        /// </summary>
		[XmlElement("supervisor")]

        public String Supervisor {
            get {
                return supervisorField;
            } 
            set {
                supervisorField = value;
                NotifyPropertyChanged("Supervisor");
            }
        }

        private String supervisorField; 


        /// <summary>
        /// Nae of Engineer. 
        /// </summary>
		[XmlElement("engineer")]

        public String Engineer {
            get {
                return engineerField;
            } 
            set {
                engineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private String engineerField; 


        /// <summary>
        /// Name of operator wellsite geologist. 
        /// </summary>
		[XmlElement("geologist")]

        public String Geologist {
            get {
                return geologistField;
            } 
            set {
                geologistField = value;
                NotifyPropertyChanged("Geologist");
            }
        }

        private String geologistField; 


        /// <summary>
        /// Time spent rotary drilling for report interval. 
        /// </summary>
		[XmlElement("eTimDrillRot")]

        public TimeMeasure ETimeDrillRot {
            get {
                return eTimDrillRotField;
            } 
            set {
                eTimDrillRotField = value;
                NotifyPropertyChanged("ETimeDrillRot");
            }
        }

        private TimeMeasure eTimDrillRotField; 


        /// <summary>
        /// Time spent slide drilling from start of bit run. 
        /// </summary>
		[XmlElement("eTimDrillSlid")]

        public TimeMeasure ETimeDrillSlid {
            get {
                return eTimDrillSlidField;
            } 
            set {
                eTimDrillSlidField = value;
                NotifyPropertyChanged("ETimeDrillSlid");
            }
        }

        private TimeMeasure eTimDrillSlidField; 


        /// <summary>
        /// Time spent circulating from start of bit run. 
        /// </summary>
		[XmlElement("eTimCirc")]

        public TimeMeasure ETimeCirc {
            get {
                return eTimCircField;
            } 
            set {
                eTimCircField = value;
                NotifyPropertyChanged("ETimeCirc");
            }
        }

        private TimeMeasure eTimCircField; 


        /// <summary>
        /// Time spent reaming from start of bit run. 
        /// </summary>
		[XmlElement("eTimReam")]

        public TimeMeasure ETimeReam {
            get {
                return eTimReamField;
            } 
            set {
                eTimReamField = value;
                NotifyPropertyChanged("ETimeReam");
            }
        }

        private TimeMeasure eTimReamField; 


        /// <summary>
        /// Time spent with no DD work (commonly in hours). 
        /// </summary>
		[XmlElement("eTimHold")]

        public TimeMeasure ETimeHold {
            get {
                return eTimHoldField;
            } 
            set {
                eTimHoldField = value;
                NotifyPropertyChanged("ETimeHold");
            }
        }

        private TimeMeasure eTimHoldField; 


        /// <summary>
        /// Time spent steering bottom hole assembly (commonly in hours). 
        /// </summary>
		[XmlElement("eTimSteering")]

        public TimeMeasure ETimeSteering {
            get {
                return eTimSteeringField;
            } 
            set {
                eTimSteeringField = value;
                NotifyPropertyChanged("ETimeSteering");
            }
        }

        private TimeMeasure eTimSteeringField; 


        /// <summary>
        /// Distance drilled - rotating. 
        /// </summary>
		[XmlElement("distDrillRot")]

        public LengthMeasure DistDrillRot {
            get {
                return distDrillRotField;
            } 
            set {
                distDrillRotField = value;
                NotifyPropertyChanged("DistDrillRot");
            }
        }

        private LengthMeasure distDrillRotField; 


        /// <summary>
        /// Distance drilled - sliding. 
        /// </summary>
		[XmlElement("distDrillSlid")]

        public LengthMeasure DistDrillSlid {
            get {
                return distDrillSlidField;
            } 
            set {
                distDrillSlidField = value;
                NotifyPropertyChanged("DistDrillSlid");
            }
        }

        private LengthMeasure distDrillSlidField; 


        /// <summary>
        /// Distance reamed. 
        /// </summary>
		[XmlElement("distReam")]

        public LengthMeasure DistReam {
            get {
                return distReamField;
            } 
            set {
                distReamField = value;
                NotifyPropertyChanged("DistReam");
            }
        }

        private LengthMeasure distReamField; 


        /// <summary>
        /// Distance covered while holding angle with a steerable drilling assembly. 
        /// </summary>
		[XmlElement("distHold")]

        public LengthMeasure DistHold {
            get {
                return distHoldField;
            } 
            set {
                distHoldField = value;
                NotifyPropertyChanged("DistHold");
            }
        }

        private LengthMeasure distHoldField; 


        /// <summary>
        /// Distance covered while actively steering with a steerable drilling assembly. 
        /// </summary>
		[XmlElement("distSteering")]

        public LengthMeasure DistSteering {
            get {
                return distSteeringField;
            } 
            set {
                distSteeringField = value;
                NotifyPropertyChanged("DistSteering");
            }
        }

        private LengthMeasure distSteeringField; 


        /// <summary>
        /// Total number of personnel on board. 
        /// </summary>
		[XmlElement("numPob")]

        public Int16? NumPob {
            get {
                return numPobField;
            } 
            set {
                numPobField = value;
                this.NumPobSpecified = true;
                NotifyPropertyChanged("NumPob");
            }
        }

        private Int16? numPobField; 


		/// <summary>
        /// numPobSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumPobSpecified {
            get {
                return numPobSpecifiedField;
            } 
            set {
                numPobSpecifiedField = value;
                NotifyPropertyChanged("NumPobSpecified");
            }
        }

        private Boolean numPobSpecifiedField; 


        /// <summary>
        /// Number of contractor personnel on board. 
        /// </summary>
		[XmlElement("numContract")]

        public Int16? NumContract {
            get {
                return numContractField;
            } 
            set {
                numContractField = value;
                this.NumContractSpecified = true;
                NotifyPropertyChanged("NumContract");
            }
        }

        private Int16? numContractField; 


		/// <summary>
        /// numContractSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumContractSpecified {
            get {
                return numContractSpecifiedField;
            } 
            set {
                numContractSpecifiedField = value;
                NotifyPropertyChanged("NumContractSpecified");
            }
        }

        private Boolean numContractSpecifiedField; 


        /// <summary>
        /// Number of Operator personnel on board. 
        /// </summary>
		[XmlElement("numOperator")]

        public Int16? NumOperator {
            get {
                return numOperatorField;
            } 
            set {
                numOperatorField = value;
                this.NumOperatorSpecified = true;
                NotifyPropertyChanged("NumOperator");
            }
        }

        private Int16? numOperatorField; 


		/// <summary>
        /// numOperatorSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumOperatorSpecified {
            get {
                return numOperatorSpecifiedField;
            } 
            set {
                numOperatorSpecifiedField = value;
                NotifyPropertyChanged("NumOperatorSpecified");
            }
        }

        private Boolean numOperatorSpecifiedField; 


        /// <summary>
        /// Number of service company personnel on board. 
        /// </summary>
		[XmlElement("numService")]

        public Int16? NumService {
            get {
                return numServiceField;
            } 
            set {
                numServiceField = value;
                this.NumServiceSpecified = true;
                NotifyPropertyChanged("NumService");
            }
        }

        private Int16? numServiceField; 


		/// <summary>
        /// numServiceSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumServiceSpecified {
            get {
                return numServiceSpecifiedField;
            } 
            set {
                numServiceSpecifiedField = value;
                NotifyPropertyChanged("NumServiceSpecified");
            }
        }

        private Boolean numServiceSpecifiedField; 


        /// <summary>
        /// Activity breakdown, multiple for many activities. 
        /// </summary>
		[XmlElement("activity")]

        public List<Activity> Activity {
            get {
                return activityField;
            } 
            set {
                activityField = value;
                NotifyPropertyChanged("Activity");
            }
        }

        private List<Activity> activityField; 


        /// <summary>
        /// Average bottom hole assembly parameters for report duration or actual instances of bottom hole assembly operations. 
        /// </summary>
		[XmlElement("drillingParams")]

        public List<DrillingParams> DrillingParams {
            get {
                return drillingParamsField;
            } 
            set {
                drillingParamsField = value;
                NotifyPropertyChanged("DrillingParams");
            }
        }

        private List<DrillingParams> drillingParamsField; 


        /// <summary>
        /// Record of actual hole geometry at report time. 
        /// </summary>
		[XmlElement("wbGeometry")]

        public WellboreGeometry WellboreGeometry {
            get {
                return wbGeometryField;
            } 
            set {
                wbGeometryField = value;
                NotifyPropertyChanged("WellboreGeometry");
            }
        }

        private WellboreGeometry wbGeometryField; 


        /// <summary>
        /// Cost item for the report interval. 
        /// </summary>
		[XmlElement("dayCost")]

        public List<DayCost> DayCost {
            get {
                return dayCostField;
            } 
            set {
                dayCostField = value;
                NotifyPropertyChanged("DayCost");
            }
        }

        private List<DayCost> dayCostField; 


        /// <summary>
        /// Survey station recorded during the report interval. 
        /// </summary>
		[XmlElement("trajectoryStation")]

        public List<TrajectoryStation> TrajectoryStation {
            get {
                return trajectoryStationField;
            } 
            set {
                trajectoryStationField = value;
                NotifyPropertyChanged("TrajectoryStation");
            }
        }

        private List<TrajectoryStation> trajectoryStationField; 


        /// <summary>
        /// One fluid record. 
        /// </summary>
		[XmlElement("fluid")]

        public List<Fluid> Fluid {
            get {
                return fluidField;
            } 
            set {
                fluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

        private List<Fluid> fluidField; 


        /// <summary>
        /// Slow circulation rate pressure test for well control operations. 
        /// </summary>
		[XmlElement("scr")]

        public List<Scr> Scr {
            get {
                return scrField;
            } 
            set {
                scrField = value;
                NotifyPropertyChanged("Scr");
            }
        }

        private List<Scr> scrField; 


        /// <summary>
        /// Pit volume record for the report interval. 
        /// </summary>
		[XmlElement("pitVolume")]

        public List<PitVolume> PitVolume {
            get {
                return pitVolumeField;
            } 
            set {
                pitVolumeField = value;
                NotifyPropertyChanged("PitVolume");
            }
        }

        private List<PitVolume> pitVolumeField; 


        /// <summary>
        /// Description of mud built, received, etc. 
        /// </summary>
		[XmlElement("mudVolume")]

        public MudVolume MudVolume {
            get {
                return mudVolumeField;
            } 
            set {
                mudVolumeField = value;
                NotifyPropertyChanged("MudVolume");
            }
        }

        private MudVolume mudVolumeField; 


        /// <summary>
        /// Mud inventory item and cost for the report interval. 
        /// </summary>
		[XmlElement("mudInventory")]

        public List<Inventory> MudInventory {
            get {
                return mudInventoryField;
            } 
            set {
                mudInventoryField = value;
                NotifyPropertyChanged("MudInventory");
            }
        }

        private List<Inventory> mudInventoryField; 


        /// <summary>
        /// Bulk item usage and cost. 
        /// </summary>
		[XmlElement("bulk")]

        public List<Inventory> Bulk {
            get {
                return bulkField;
            } 
            set {
                bulkField = value;
                NotifyPropertyChanged("Bulk");
            }
        }

        private List<Inventory> bulkField; 


        /// <summary>
        /// Average rig response readings for the day. 
        /// </summary>
		[XmlElement("rigResponse")]

        public RigResponse RigResponse {
            get {
                return rigResponseField;
            } 
            set {
                rigResponseField = value;
                NotifyPropertyChanged("RigResponse");
            }
        }

        private RigResponse rigResponseField; 


        /// <summary>
        /// Pump rate/pressure reading. 
        /// </summary>
		[XmlElement("pumpOp")]

        public List<PumpOp> PumpOperating {
            get {
                return pumpOpField;
            } 
            set {
                pumpOpField = value;
                NotifyPropertyChanged("PumpOperating");
            }
        }

        private List<PumpOp> pumpOpField; 


        /// <summary>
        /// Container element for shaker operation elements. 
        /// </summary>
		[XmlElement("shakerOp")]

        public List<ShakerOp> ShakerOperating {
            get {
                return shakerOpField;
            } 
            set {
                shakerOpField = value;
                NotifyPropertyChanged("ShakerOperating");
            }
        }

        private List<ShakerOp> shakerOpField; 


        /// <summary>
        /// Health, safety and environmental information. 
        /// </summary>
		[XmlElement("hse")]

        public Hse Hse {
            get {
                return hseField;
            } 
            set {
                hseField = value;
                NotifyPropertyChanged("Hse");
            }
        }

        private Hse hseField; 


        /// <summary>
        /// Personnel records. 
        /// </summary>
		[XmlElement("personnel")]

        public List<Personnel> Personnel {
            get {
                return personnelField;
            } 
            set {
                personnelField = value;
                NotifyPropertyChanged("Personnel");
            }
        }

        private List<Personnel> personnelField; 


        /// <summary>
        /// Support craft object container element. 
        /// </summary>
		[XmlElement("supportCraft")]

        public List<SupportCraft> SupportCraft {
            get {
                return supportCraftField;
            } 
            set {
                supportCraftField = value;
                NotifyPropertyChanged("SupportCraft");
            }
        }

        private List<SupportCraft> supportCraftField; 


        /// <summary>
        /// Metrological readings for the day. 
        /// </summary>
		[XmlElement("weather")]

        public List<Weather> Weather {
            get {
                return weatherField;
            } 
            set {
                weatherField = value;
                NotifyPropertyChanged("Weather");
            }
        }

        private List<Weather> weatherField; 


        /// <summary>
        /// AFE (authorization for expenditure) number that this cost item applies to. 
        /// </summary>
		[XmlElement("numAFE")]

        public String NumAFE {
            get {
                return numAFEField;
            } 
            set {
                numAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private String numAFEField; 


        /// <summary>
        /// Daily Cost. 
        /// </summary>
		[XmlElement("costDay")]

        public Cost CostDay {
            get {
                return costDayField;
            } 
            set {
                costDayField = value;
                NotifyPropertyChanged("CostDay");
            }
        }

        private Cost costDayField; 


        /// <summary>
        /// Daily Mud Cost. 
        /// </summary>
		[XmlElement("costDayMud")]

        public Cost CostDayMud {
            get {
                return costDayMudField;
            } 
            set {
                costDayMudField = value;
                NotifyPropertyChanged("CostDayMud");
            }
        }

        private Cost costDayMudField; 


        /// <summary>
        /// Hole diameter. 
        /// </summary>
		[XmlElement("diaHole")]

        public LengthMeasure DiaHole {
            get {
                return diaHoleField;
            } 
            set {
                diaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure diaHoleField; 


        /// <summary>
        /// Hole condition description. 
        /// </summary>
		[XmlElement("conditionHole")]

        public String ConditionHole {
            get {
                return conditionHoleField;
            } 
            set {
                conditionHoleField = value;
                NotifyPropertyChanged("ConditionHole");
            }
        }

        private String conditionHoleField; 


        /// <summary>
        /// Lithology for the Interval. 
        /// </summary>
		[XmlElement("lithology")]

        public String Lithology {
            get {
                return lithologyField;
            } 
            set {
                lithologyField = value;
                NotifyPropertyChanged("Lithology");
            }
        }

        private String lithologyField; 


        /// <summary>
        /// Name of formation. 
        /// </summary>
		[XmlElement("nameFormation")]

        public String NameFormation {
            get {
                return nameFormationField;
            } 
            set {
                nameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private String nameFormationField; 


        /// <summary>
        /// Diameter of last casing. 
        /// </summary>
		[XmlElement("diaCsgLast")]

        public LengthMeasure DiaCsgLast {
            get {
                return diaCsgLastField;
            } 
            set {
                diaCsgLastField = value;
                NotifyPropertyChanged("DiaCsgLast");
            }
        }

        private LengthMeasure diaCsgLastField; 


        /// <summary>
        /// Measured depth of last casing. 
        /// </summary>
		[XmlElement("mdCsgLast")]

        public MeasuredDepthCoord MDCsgLast {
            get {
                return mdCsgLastField;
            } 
            set {
                mdCsgLastField = value;
                NotifyPropertyChanged("MDCsgLast");
            }
        }

        private MeasuredDepthCoord mdCsgLastField; 


        /// <summary>
        /// True vertical depth of last casing. 
        /// </summary>
		[XmlElement("tvdCsgLast")]

        public WellVerticalDepthCoord TvdCsgLast {
            get {
                return tvdCsgLastField;
            } 
            set {
                tvdCsgLastField = value;
                NotifyPropertyChanged("TvdCsgLast");
            }
        }

        private WellVerticalDepthCoord tvdCsgLastField; 


        /// <summary>
        /// True vertical depth of leak off test point. 
        /// </summary>
		[XmlElement("tvdLot")]

        public WellVerticalDepthCoord TvdLot {
            get {
                return tvdLotField;
            } 
            set {
                tvdLotField = value;
                NotifyPropertyChanged("TvdLot");
            }
        }

        private WellVerticalDepthCoord tvdLotField; 


        /// <summary>
        /// Leak off test equivalent mud weight. 
        /// </summary>
		[XmlElement("presLotEmw")]

        public DensityMeasure PresLotEmw {
            get {
                return presLotEmwField;
            } 
            set {
                presLotEmwField = value;
                NotifyPropertyChanged("PresLotEmw");
            }
        }

        private DensityMeasure presLotEmwField; 


        /// <summary>
        /// Kick tolerance pressure. 
        /// </summary>
		[XmlElement("presKickTol")]

        public PressureMeasure PresKickTol {
            get {
                return presKickTolField;
            } 
            set {
                presKickTolField = value;
                NotifyPropertyChanged("PresKickTol");
            }
        }

        private PressureMeasure presKickTolField; 


        /// <summary>
        /// Kick tolerance volume. 
        /// </summary>
		[XmlElement("volKickTol")]

        public VolumeMeasure VolKickTol {
            get {
                return volKickTolField;
            } 
            set {
                volKickTolField = value;
                NotifyPropertyChanged("VolKickTol");
            }
        }

        private VolumeMeasure volKickTolField; 


        /// <summary>
        /// Maximum allowable shut-in casing pressure. 
        /// </summary>
		[XmlElement("maasp")]

        public PressureMeasure Maasp {
            get {
                return maaspField;
            } 
            set {
                maaspField = value;
                NotifyPropertyChanged("Maasp");
            }
        }

        private PressureMeasure maaspField; 


        /// <summary>
        /// A pointer to the tubular (assembly) used in this report period. This represents a foreign key to tubular. 
        /// </summary>
		[XmlElement("tubular")]

        public RefNameString Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private RefNameString tubularField; 


        /// <summary>
        /// 24 hour summary description. 
        /// </summary>
		[XmlElement("sum24Hr")]

        public String Sum24Hr {
            get {
                return sum24HrField;
            } 
            set {
                sum24HrField = value;
                NotifyPropertyChanged("Sum24Hr");
            }
        }

        private String sum24HrField; 


        /// <summary>
        /// Forecast for next 24 hrs. 
        /// </summary>
		[XmlElement("forecast24Hr")]

        public String Forecast24Hr {
            get {
                return forecast24HrField;
            } 
            set {
                forecast24HrField = value;
                NotifyPropertyChanged("Forecast24Hr");
            }
        }

        private String forecast24HrField; 


        /// <summary>
        /// Current status description. 
        /// </summary>
		[XmlElement("statusCurrent")]

        public String StatusCurrent {
            get {
                return statusCurrentField;
            } 
            set {
                statusCurrentField = value;
                NotifyPropertyChanged("StatusCurrent");
            }
        }

        private String statusCurrentField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Activity Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_activity", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Activity Component Schema ")]
    public partial class Activity : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
		[XmlElement("dTimStart")]

        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? dTimStartField; 


		/// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private Boolean dTimStartSpecifiedField; 


        /// <summary>
        /// Date and time that activities were completed. 
        /// </summary>
		[XmlElement("dTimEnd")]

        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? dTimEndField; 


		/// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private Boolean dTimEndSpecifiedField; 


        /// <summary>
        /// The activity duration (commonly in hours). 
        /// </summary>
		[XmlElement("duration")]

        public TimeMeasure Duration {
            get {
                return durationField;
            } 
            set {
                durationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure durationField; 


        /// <summary>
        /// Phase (large activity classification) e.g. Drill Surface Hole. 
        /// </summary>
		[XmlElement("phase")]

        public String Phase {
            get {
                return phaseField;
            } 
            set {
                phaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private String phaseField; 


        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
		[XmlElement("activityCode")]

        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set {
                activityCodeField = value;
                this.ActivityCodeSpecified = true;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private ActivityCode activityCodeField; 


		/// <summary>
        /// activityCodeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ActivityCodeSpecified {
            get {
                return activityCodeSpecifiedField;
            } 
            set {
                activityCodeSpecifiedField = value;
                NotifyPropertyChanged("ActivityCodeSpecified");
            }
        }

        private Boolean activityCodeSpecifiedField; 


        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
		[XmlElement("detailActivity")]

        public String DetailActivity {
            get {
                return detailActivityField;
            } 
            set {
                detailActivityField = value;
                NotifyPropertyChanged("DetailActivity");
            }
        }

        private String detailActivityField; 


        /// <summary>
        /// Classifier (Planned, Unplanned, Downtime). 
        /// </summary>
		[XmlElement("typeActivityClass")]

        public ActivityClassType? TypeActivityClass {
            get {
                return typeActivityClassField;
            } 
            set {
                typeActivityClassField = value;
                this.TypeActivityClassSpecified = true;
                NotifyPropertyChanged("TypeActivityClass");
            }
        }

        private ActivityClassType? typeActivityClassField; 


		/// <summary>
        /// typeActivityClassSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeActivityClassSpecified {
            get {
                return typeActivityClassSpecifiedField;
            } 
            set {
                typeActivityClassSpecifiedField = value;
                NotifyPropertyChanged("TypeActivityClassSpecified");
            }
        }

        private Boolean typeActivityClassSpecifiedField; 


        /// <summary>
        /// Measured Depth at start of activity. 
        /// </summary>
		[XmlElement("mdHoleStart")]

        public MeasuredDepthCoord MDHoleStart {
            get {
                return mdHoleStartField;
            } 
            set {
                mdHoleStartField = value;
                NotifyPropertyChanged("MDHoleStart");
            }
        }

        private MeasuredDepthCoord mdHoleStartField; 


        /// <summary>
        /// True Vertical Depth at start of activity 
        /// </summary>
		[XmlElement("tvdHoleStart")]

        public WellVerticalDepthCoord TvdHoleStart {
            get {
                return tvdHoleStartField;
            } 
            set {
                tvdHoleStartField = value;
                NotifyPropertyChanged("TvdHoleStart");
            }
        }

        private WellVerticalDepthCoord tvdHoleStartField; 


        /// <summary>
        /// Measured Depth at end of activity. 
        /// </summary>
		[XmlElement("mdHoleEnd")]

        public MeasuredDepthCoord MDHoleEnd {
            get {
                return mdHoleEndField;
            } 
            set {
                mdHoleEndField = value;
                NotifyPropertyChanged("MDHoleEnd");
            }
        }

        private MeasuredDepthCoord mdHoleEndField; 


        /// <summary>
        /// True Vertical Depth at end of activity. 
        /// </summary>
		[XmlElement("tvdHoleEnd")]

        public WellVerticalDepthCoord TvdHoleEnd {
            get {
                return tvdHoleEndField;
            } 
            set {
                tvdHoleEndField = value;
                NotifyPropertyChanged("TvdHoleEnd");
            }
        }

        private WellVerticalDepthCoord tvdHoleEndField; 


        /// <summary>
        /// Measured depth of bit at start of activity. 
        /// </summary>
		[XmlElement("mdBitStart")]

        public MeasuredDepthCoord MDBitStart {
            get {
                return mdBitStartField;
            } 
            set {
                mdBitStartField = value;
                NotifyPropertyChanged("MDBitStart");
            }
        }

        private MeasuredDepthCoord mdBitStartField; 


        /// <summary>
        /// Measured depth of bit at end of activity. 
        /// </summary>
		[XmlElement("mdBitEnd")]

        public MeasuredDepthCoord MDBitEnd {
            get {
                return mdBitEndField;
            } 
            set {
                mdBitEndField = value;
                NotifyPropertyChanged("MDBitEnd");
            }
        }

        private MeasuredDepthCoord mdBitEndField; 


        /// <summary>
        /// Finish, interrupted, failed, etc. 
        /// </summary>
		[XmlElement("state")]

        public String State {
            get {
                return stateField;
            } 
            set {
                stateField = value;
                NotifyPropertyChanged("State");
            }
        }

        private String stateField; 


        /// <summary>
        /// Operator company name. 
        /// </summary>
		[XmlElement("operator")]

        public String Operator {
            get {
                return operatorField;
            } 
            set {
                operatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private String operatorField; 


        /// <summary>
        /// A pointer to the tubular related to this activity.
        /// </summary>
		[XmlElement("tubular")]

        public RefNameString Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private RefNameString tubularField; 


        /// <summary>
        /// Is the activity optimum. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("optimum")]

        public Boolean? Optimum {
            get {
                return optimumField;
            } 
            set {
                optimumField = value;
                this.OptimumSpecified = true;
                NotifyPropertyChanged("Optimum");
            }
        }

        private Boolean? optimumField; 


		/// <summary>
        /// optimumSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean OptimumSpecified {
            get {
                return optimumSpecifiedField;
            } 
            set {
                optimumSpecifiedField = value;
                NotifyPropertyChanged("OptimumSpecified");
            }
        }

        private Boolean optimumSpecifiedField; 


        /// <summary>
        /// Does activity bring closer to objective. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("productive")]

        public Boolean? Productive {
            get {
                return productiveField;
            } 
            set {
                productiveField = value;
                this.ProductiveSpecified = true;
                NotifyPropertyChanged("Productive");
            }
        }

        private Boolean? productiveField; 


		/// <summary>
        /// productiveSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ProductiveSpecified {
            get {
                return productiveSpecifiedField;
            } 
            set {
                productiveSpecifiedField = value;
                NotifyPropertyChanged("ProductiveSpecified");
            }
        }

        private Boolean productiveSpecifiedField; 


        /// <summary>
        /// The item state for the data object. 
        /// </summary>
		[XmlElement("itemState")]

        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set {
                itemStateField = value;
                this.ItemStateSpecified = true;
                NotifyPropertyChanged("ItemState");
            }
        }

        private ItemState? itemStateField; 


		/// <summary>
        /// itemStateSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ItemStateSpecified {
            get {
                return itemStateSpecifiedField;
            } 
            set {
                itemStateSpecifiedField = value;
                NotifyPropertyChanged("ItemStateSpecified");
            }
        }

        private Boolean itemStateSpecifiedField; 


        /// <summary>
        /// Comments and Remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Day Cost Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_dayCost", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Day Cost Component Schema ")]
    public partial class DayCost : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// AFE number that this cost item applies to. 
        /// </summary>
		[XmlElement("numAFE")]

        public String NumAFE {
            get {
                return numAFEField;
            } 
            set {
                numAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private String numAFEField; 


        /// <summary>
        /// Cost group code. 
        /// </summary>
		[XmlElement("costGroup")]

        public String CostGroup {
            get {
                return costGroupField;
            } 
            set {
                costGroupField = value;
                NotifyPropertyChanged("CostGroup");
            }
        }

        private String costGroupField; 


        /// <summary>
        /// Cost class code. 
        /// </summary>
		[XmlElement("costClass")]

        public String CostClass {
            get {
                return costClassField;
            } 
            set {
                costClassField = value;
                NotifyPropertyChanged("CostClass");
            }
        }

        private String costClassField; 


        /// <summary>
        /// Cost code. 
        /// </summary>
		[XmlElement("costCode")]

        public String CostCode {
            get {
                return costCodeField;
            } 
            set {
                costCodeField = value;
                NotifyPropertyChanged("CostCode");
            }
        }

        private String costCodeField; 


        /// <summary>
        /// Cost subcode. 
        /// </summary>
		[XmlElement("costSubCode")]

        public String CostSubCode {
            get {
                return costSubCodeField;
            } 
            set {
                costSubCodeField = value;
                NotifyPropertyChanged("CostSubCode");
            }
        }

        private String costSubCodeField; 


        /// <summary>
        /// Description of cost item. 
        /// </summary>
		[XmlElement("costItemDescription")]

        public String CostItemDescription {
            get {
                return costItemDescriptionField;
            } 
            set {
                costItemDescriptionField = value;
                NotifyPropertyChanged("CostItemDescription");
            }
        }

        private String costItemDescriptionField; 


        /// <summary>
        /// Cost per cost item, assume same currency.
        /// </summary>
		[XmlElement("costPerItem")]

        public Cost CostPerItem {
            get {
                return costPerItemField;
            } 
            set {
                costPerItemField = value;
                NotifyPropertyChanged("CostPerItem");
            }
        }

        private Cost costPerItemField; 


        /// <summary>
        /// The kind of cost item specified (e.g., rig dayrate, joints casing). 
        /// </summary>
		[XmlElement("itemKind")]

        public String ItemKind {
            get {
                return itemKindField;
            } 
            set {
                itemKindField = value;
                NotifyPropertyChanged("ItemKind");
            }
        }

        private String itemKindField; 


        /// <summary>
        /// Size of one cost item. 
        /// </summary>
		[XmlElement("itemSize")]

        public Double? ItemSize {
            get {
                return itemSizeField;
            } 
            set {
                itemSizeField = value;
                this.ItemSizeSpecified = true;
                NotifyPropertyChanged("ItemSize");
            }
        }

        private Double? itemSizeField; 


		/// <summary>
        /// itemSizeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ItemSizeSpecified {
            get {
                return itemSizeSpecifiedField;
            } 
            set {
                itemSizeSpecifiedField = value;
                NotifyPropertyChanged("ItemSizeSpecified");
            }
        }

        private Boolean itemSizeSpecifiedField; 


        /// <summary>
        /// Number of cost items used that day e.g. 1 rig dayrate, 30 joints casing. 
        /// </summary>
		[XmlElement("qtyItem")]

        public Int16? QtyItem {
            get {
                return qtyItemField;
            } 
            set {
                qtyItemField = value;
                this.QtyItemSpecified = true;
                NotifyPropertyChanged("QtyItem");
            }
        }

        private Int16? qtyItemField; 


		/// <summary>
        /// qtyItemSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean QtyItemSpecified {
            get {
                return qtyItemSpecifiedField;
            } 
            set {
                qtyItemSpecifiedField = value;
                NotifyPropertyChanged("QtyItemSpecified");
            }
        }

        private Boolean qtyItemSpecifiedField; 


        /// <summary>
        /// Cost for the item for this record. 
        /// </summary>
		[XmlElement("costAmount")]

        public Cost CostAmount {
            get {
                return costAmountField;
            } 
            set {
                costAmountField = value;
                NotifyPropertyChanged("CostAmount");
            }
        }

        private Cost costAmountField; 


        /// <summary>
        /// Invoice number for cost item, bill sent to Operator. 
        /// </summary>
		[XmlElement("numInvoice")]

        public String NumInvoice {
            get {
                return numInvoiceField;
            } 
            set {
                numInvoiceField = value;
                NotifyPropertyChanged("NumInvoice");
            }
        }

        private String numInvoiceField; 


        /// <summary>
        /// Purchase order number, provided by Operator. 
        /// </summary>
		[XmlElement("numPO")]

        public String NumPO {
            get {
                return numPOField;
            } 
            set {
                numPOField = value;
                NotifyPropertyChanged("NumPO");
            }
        }

        private String numPOField; 


        /// <summary>
        /// Field Ticket number, issued by service company on location. 
        /// </summary>
		[XmlElement("numTicket")]

        public String NumTicket {
            get {
                return numTicketField;
            } 
            set {
                numTicketField = value;
                NotifyPropertyChanged("NumTicket");
            }
        }

        private String numTicketField; 


        /// <summary>
        /// Is this item carried from day to day? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("isCarryOver")]

        public Boolean? IsCarryOver {
            get {
                return isCarryOverField;
            } 
            set {
                isCarryOverField = value;
                this.IsCarryOverSpecified = true;
                NotifyPropertyChanged("IsCarryOver");
            }
        }

        private Boolean? isCarryOverField; 


		/// <summary>
        /// isCarryOverSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean IsCarryOverSpecified {
            get {
                return isCarryOverSpecifiedField;
            } 
            set {
                isCarryOverSpecifiedField = value;
                NotifyPropertyChanged("IsCarryOverSpecified");
            }
        }

        private Boolean isCarryOverSpecifiedField; 


        /// <summary>
        /// Is this item a rental? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("isRental")]

        public Boolean? IsRental {
            get {
                return isRentalField;
            } 
            set {
                isRentalField = value;
                this.IsRentalSpecified = true;
                NotifyPropertyChanged("IsRental");
            }
        }

        private Boolean? isRentalField; 


		/// <summary>
        /// isRentalSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean IsRentalSpecified {
            get {
                return isRentalSpecifiedField;
            } 
            set {
                isRentalSpecifiedField = value;
                NotifyPropertyChanged("IsRentalSpecified");
            }
        }

        private Boolean isRentalSpecifiedField; 


        /// <summary>
        /// An identification tag for the item. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[XmlElement("nameTag")]

        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

        private List<NameTag> nameTagField; 


        /// <summary>
        /// Serial number. 
        /// </summary>
		[XmlElement("numSerial")]

        public String NumSerial {
            get {
                return numSerialField;
            } 
            set {
                numSerialField = value;
                NotifyPropertyChanged("NumSerial");
            }
        }

        private String numSerialField; 


        /// <summary>
        /// Name of vendor. 
        /// </summary>
		[XmlElement("nameVendor")]

        public String NameVendor {
            get {
                return nameVendorField;
            } 
            set {
                nameVendorField = value;
                NotifyPropertyChanged("NameVendor");
            }
        }

        private String nameVendorField; 


        /// <summary>
        /// Vendor number. 
        /// </summary>
		[XmlElement("numVendor")]

        public String NumVendor {
            get {
                return numVendorField;
            } 
            set {
                numVendorField = value;
                NotifyPropertyChanged("NumVendor");
            }
        }

        private String numVendorField; 


        /// <summary>
        /// Name of pool/reservoir that this cost item can be accounted to. 
        /// </summary>
		[XmlElement("pool")]

        public String Pool {
            get {
                return poolField;
            } 
            set {
                poolField = value;
                NotifyPropertyChanged("Pool");
            }
        }

        private String poolField; 


        /// <summary>
        /// Is this an estimated cost? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("estimated")]

        public Boolean? Estimated {
            get {
                return estimatedField;
            } 
            set {
                estimatedField = value;
                this.EstimatedSpecified = true;
                NotifyPropertyChanged("Estimated");
            }
        }

        private Boolean? estimatedField; 


		/// <summary>
        /// estimatedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean EstimatedSpecified {
            get {
                return estimatedSpecifiedField;
            } 
            set {
                estimatedSpecifiedField = value;
                NotifyPropertyChanged("EstimatedSpecified");
            }
        }

        private Boolean estimatedSpecifiedField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the cost xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cost", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the cost xsd type.")]
    public partial class Cost : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the Cost class.
        /// </summary>
        public Cost() {}

        /// <summary>
        /// Initializes a new instance of the Cost class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public Cost(Double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


		/// <summary>
        /// currency property
        /// </summary>
        [XmlAttribute("currency")]

        public String Currency {
            get {
                return currencyField;
            } 
            set {
                currencyField = value;
                NotifyPropertyChanged("Currency");
            }
        }

        private String currencyField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Trajectory Station Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_trajectoryStation", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Trajectory Station Component Schema")]
    public partial class TrajectoryStation : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A pointer to the intended target of this station. 
        /// </summary>
		[XmlElement("target")]

        public RefNameString Target {
            get {
                return targetField;
            } 
            set {
                targetField = value;
                NotifyPropertyChanged("Target");
            }
        }

        private RefNameString targetField; 


        /// <summary>
        /// Date and time the station was measured or created. 
        /// </summary>
		[XmlElement("dTimStn")]

        public DateTime? DateTimeStn {
            get {
                return dTimStnField;
            } 
            set {
                dTimStnField = value;
                this.DateTimeStnSpecified = true;
                NotifyPropertyChanged("DateTimeStn");
            }
        }

        private DateTime? dTimStnField; 


		/// <summary>
        /// dTimStnSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeStnSpecified {
            get {
                return dTimStnSpecifiedField;
            } 
            set {
                dTimStnSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStnSpecified");
            }
        }

        private Boolean dTimStnSpecifiedField; 


        /// <summary>
        /// Type of survey station. 
        /// </summary>
		[XmlElement("typeTrajStation")]

        public TrajStationType? TypeTrajStation {
            get {
                return typeTrajStationField;
            } 
            set {
                typeTrajStationField = value;
                NotifyPropertyChanged("TypeTrajStation");
            }
        }

        private TrajStationType? typeTrajStationField; 


        /// <summary>
        /// The type of tool used for the measurements.
        /// </summary>
		[XmlElement("typeSurveyTool")]

        public TypeSurveyTool? TypeSurveyTool {
            get {
                return typeSurveyToolField;
            } 
            set {
                typeSurveyToolField = value;
                this.TypeSurveyToolSpecified = true;
                NotifyPropertyChanged("TypeSurveyTool");
            }
        }

        private TypeSurveyTool? typeSurveyToolField; 


		/// <summary>
        /// typeSurveyToolSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeSurveyToolSpecified {
            get {
                return typeSurveyToolSpecifiedField;
            } 
            set {
                typeSurveyToolSpecifiedField = value;
                NotifyPropertyChanged("TypeSurveyToolSpecified");
            }
        }

        private Boolean typeSurveyToolSpecifiedField; 


        /// <summary>
        /// Measured depth of measurement from the drill datum. 
        /// </summary>
		[XmlElement("md")]

        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 


        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
		[XmlElement("tvd")]

        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 


        /// <summary>
        /// Hole inclination, measured from vertical. 
        /// </summary>
		[XmlElement("incl")]

        public PlaneAngleMeasure Incl {
            get {
                return inclField;
            } 
            set {
                inclField = value;
                NotifyPropertyChanged("Incl");
            }
        }

        private PlaneAngleMeasure inclField; 


        /// <summary>
        /// Hole azimuth. Corrected to wells azimuth reference. 
        /// </summary>
		[XmlElement("azi")]

        public PlaneAngleMeasure Azi {
            get {
                return aziField;
            } 
            set {
                aziField = value;
                NotifyPropertyChanged("Azi");
            }
        }

        private PlaneAngleMeasure aziField; 


        /// <summary>
        /// Toolface angle (magnetic). 
        /// </summary>
		[XmlElement("mtf")]

        public PlaneAngleMeasure Mtf {
            get {
                return mtfField;
            } 
            set {
                mtfField = value;
                NotifyPropertyChanged("Mtf");
            }
        }

        private PlaneAngleMeasure mtfField; 


        /// <summary>
        /// Toolface angle (gravity). 
        /// </summary>
		[XmlElement("gtf")]

        public PlaneAngleMeasure Gtf {
            get {
                return gtfField;
            } 
            set {
                gtfField = value;
                NotifyPropertyChanged("Gtf");
            }
        }

        private PlaneAngleMeasure gtfField; 


        /// <summary>
        /// North-south offset, positive to the North. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.
        /// </summary>
		[XmlElement("dispNs")]

        public LengthMeasure DispNS {
            get {
                return dispNsField;
            } 
            set {
                dispNsField = value;
                NotifyPropertyChanged("DispNS");
            }
        }

        private LengthMeasure dispNsField; 


        /// <summary>
        /// East-west offset, positive to the East. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location. 
        /// </summary>
		[XmlElement("dispEw")]

        public LengthMeasure DispEW {
            get {
                return dispEwField;
            } 
            set {
                dispEwField = value;
                NotifyPropertyChanged("DispEW");
            }
        }

        private LengthMeasure dispEwField; 


        /// <summary>
        /// Distance along vertical section azimuth plane. 
        /// </summary>
		[XmlElement("vertSect")]

        public LengthMeasure VertSect {
            get {
                return vertSectField;
            } 
            set {
                vertSectField = value;
                NotifyPropertyChanged("VertSect");
            }
        }

        private LengthMeasure vertSectField; 


        /// <summary>
        /// Dogleg severity. 
        /// </summary>
		[XmlElement("dls")]

        public AnglePerLengthMeasure DoglegSeverity {
            get {
                return dlsField;
            } 
            set {
                dlsField = value;
                NotifyPropertyChanged("DoglegSeverity");
            }
        }

        private AnglePerLengthMeasure dlsField; 


        /// <summary>
        /// Turn rate, radius of curvature computation. 
        /// </summary>
		[XmlElement("rateTurn")]

        public AnglePerLengthMeasure RateTurn {
            get {
                return rateTurnField;
            } 
            set {
                rateTurnField = value;
                NotifyPropertyChanged("RateTurn");
            }
        }

        private AnglePerLengthMeasure rateTurnField; 


        /// <summary>
        /// Build Rate, radius of curvature computation. 
        /// </summary>
		[XmlElement("rateBuild")]

        public AnglePerLengthMeasure RateBuild {
            get {
                return rateBuildField;
            } 
            set {
                rateBuildField = value;
                NotifyPropertyChanged("RateBuild");
            }
        }

        private AnglePerLengthMeasure rateBuildField; 


        /// <summary>
        /// Delta measured depth from previous station. 
        /// </summary>
		[XmlElement("mdDelta")]

        public MeasuredDepthCoord MDDelta {
            get {
                return mdDeltaField;
            } 
            set {
                mdDeltaField = value;
                NotifyPropertyChanged("MDDelta");
            }
        }

        private MeasuredDepthCoord mdDeltaField; 


        /// <summary>
        /// Delta true vertical depth from previous station. 
        /// </summary>
		[XmlElement("tvdDelta")]

        public WellVerticalDepthCoord TvdDelta {
            get {
                return tvdDeltaField;
            } 
            set {
                tvdDeltaField = value;
                NotifyPropertyChanged("TvdDelta");
            }
        }

        private WellVerticalDepthCoord tvdDeltaField; 


        /// <summary>
        /// Tool error model used to compute covariance matrix. 
        /// </summary>
		[XmlElement("modelToolError")]

        public String ModelToolError {
            get {
                return modelToolErrorField;
            } 
            set {
                modelToolErrorField = value;
                NotifyPropertyChanged("ModelToolError");
            }
        }

        private String modelToolErrorField; 


        /// <summary>
        /// Survey tool gravity uncertainty. 
        /// </summary>
		[XmlElement("gravTotalUncert")]

        public AccelerationLinearMeasure GravTotalUncert {
            get {
                return gravTotalUncertField;
            } 
            set {
                gravTotalUncertField = value;
                NotifyPropertyChanged("GravTotalUncert");
            }
        }

        private AccelerationLinearMeasure gravTotalUncertField; 


        /// <summary>
        /// Survey tool dip uncertainty. 
        /// </summary>
		[XmlElement("dipAngleUncert")]

        public PlaneAngleMeasure DipAngleUncert {
            get {
                return dipAngleUncertField;
            } 
            set {
                dipAngleUncertField = value;
                NotifyPropertyChanged("DipAngleUncert");
            }
        }

        private PlaneAngleMeasure dipAngleUncertField; 


        /// <summary>
        /// Survey tool magnetic uncertainty. 
        /// </summary>
		[XmlElement("magTotalUncert")]

        public MagneticInductionMeasure MagTotalUncert {
            get {
                return magTotalUncertField;
            } 
            set {
                magTotalUncertField = value;
                NotifyPropertyChanged("MagTotalUncert");
            }
        }

        private MagneticInductionMeasure magTotalUncertField; 


        /// <summary>
        /// Was an accelerometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[XmlElement("gravAccelCorUsed")]

        public Boolean? GravAccelCorUsed {
            get {
                return gravAccelCorUsedField;
            } 
            set {
                gravAccelCorUsedField = value;
                this.GravAccelCorUsedSpecified = true;
                NotifyPropertyChanged("GravAccelCorUsed");
            }
        }

        private Boolean? gravAccelCorUsedField; 


		/// <summary>
        /// gravAccelCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean GravAccelCorUsedSpecified {
            get {
                return gravAccelCorUsedSpecifiedField;
            } 
            set {
                gravAccelCorUsedSpecifiedField = value;
                NotifyPropertyChanged("GravAccelCorUsedSpecified");
            }
        }

        private Boolean gravAccelCorUsedSpecifiedField; 


        /// <summary>
        /// Was a magnetometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("magXAxialCorUsed")]

        public Boolean? MagXAxialCorUsed {
            get {
                return magXAxialCorUsedField;
            } 
            set {
                magXAxialCorUsedField = value;
                this.MagXAxialCorUsedSpecified = true;
                NotifyPropertyChanged("MagXAxialCorUsed");
            }
        }

        private Boolean? magXAxialCorUsedField; 


		/// <summary>
        /// magXAxialCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MagXAxialCorUsedSpecified {
            get {
                return magXAxialCorUsedSpecifiedField;
            } 
            set {
                magXAxialCorUsedSpecifiedField = value;
                NotifyPropertyChanged("MagXAxialCorUsedSpecified");
            }
        }

        private Boolean magXAxialCorUsedSpecifiedField; 


        /// <summary>
        /// Was a bottom hole assembly sag correction applied to the survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("sagCorUsed")]

        public Boolean? SagCorUsed {
            get {
                return sagCorUsedField;
            } 
            set {
                sagCorUsedField = value;
                this.SagCorUsedSpecified = true;
                NotifyPropertyChanged("SagCorUsed");
            }
        }

        private Boolean? sagCorUsedField; 


		/// <summary>
        /// sagCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean SagCorUsedSpecified {
            get {
                return sagCorUsedSpecifiedField;
            } 
            set {
                sagCorUsedSpecifiedField = value;
                NotifyPropertyChanged("SagCorUsedSpecified");
            }
        }

        private Boolean sagCorUsedSpecifiedField; 


        /// <summary>
        /// Was a drillstring magnetism correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("magDrlstrCorUsed")]

        public Boolean? MagDrlstrCorUsed {
            get {
                return magDrlstrCorUsedField;
            } 
            set {
                magDrlstrCorUsedField = value;
                this.MagDrlstrCorUsedSpecified = true;
                NotifyPropertyChanged("MagDrlstrCorUsed");
            }
        }

        private Boolean? magDrlstrCorUsedField; 


		/// <summary>
        /// magDrlstrCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MagDrlstrCorUsedSpecified {
            get {
                return magDrlstrCorUsedSpecifiedField;
            } 
            set {
                magDrlstrCorUsedSpecifiedField = value;
                NotifyPropertyChanged("MagDrlstrCorUsedSpecified");
            }
        }

        private Boolean magDrlstrCorUsedSpecifiedField; 


        /// <summary>
        /// Gravitational field theoretical/reference value. 
        /// </summary>
		[XmlElement("gravTotalFieldReference")]

        public AccelerationLinearMeasure GravTotalFieldReference {
            get {
                return gravTotalFieldReferenceField;
            } 
            set {
                gravTotalFieldReferenceField = value;
                NotifyPropertyChanged("GravTotalFieldReference");
            }
        }

        private AccelerationLinearMeasure gravTotalFieldReferenceField; 


        /// <summary>
        /// Geomagnetic field theoretical/reference value. 
        /// </summary>
		[XmlElement("magTotalFieldReference")]

        public MagneticInductionMeasure MagTotalFieldReference {
            get {
                return magTotalFieldReferenceField;
            } 
            set {
                magTotalFieldReferenceField = value;
                NotifyPropertyChanged("MagTotalFieldReference");
            }
        }

        private MagneticInductionMeasure magTotalFieldReferenceField; 


        /// <summary>
        /// Magnetic dip angle theoretical/reference value. 
        /// </summary>
		[XmlElement("magDipAngleReference")]

        public PlaneAngleMeasure MagDipAngleReference {
            get {
                return magDipAngleReferenceField;
            } 
            set {
                magDipAngleReferenceField = value;
                NotifyPropertyChanged("MagDipAngleReference");
            }
        }

        private PlaneAngleMeasure magDipAngleReferenceField; 


        /// <summary>
        /// Geomagnetic model used. 
        /// </summary>
		[XmlElement("magModelUsed")]

        public String MagModelUsed {
            get {
                return magModelUsedField;
            } 
            set {
                magModelUsedField = value;
                NotifyPropertyChanged("MagModelUsed");
            }
        }

        private String magModelUsedField; 


        /// <summary>
        /// Current valid interval for the geomagnetic model used. 
        /// </summary>
		[XmlElement("magModelValid")]

        public String MagModelValid {
            get {
                return magModelValidField;
            } 
            set {
                magModelValidField = value;
                NotifyPropertyChanged("MagModelValid");
            }
        }

        private String magModelValidField; 


        /// <summary>
        /// Gravitational model used. 
        /// </summary>
		[XmlElement("geoModelUsed")]

        public String GeoModelUsed {
            get {
                return geoModelUsedField;
            } 
            set {
                geoModelUsedField = value;
                NotifyPropertyChanged("GeoModelUsed");
            }
        }

        private String geoModelUsedField; 


        /// <summary>
        /// Status of the station. 
        /// </summary>
		[XmlElement("statusTrajStation")]

        public TrajStationStatus? StatusTrajStation {
            get {
                return statusTrajStationField;
            } 
            set {
                statusTrajStationField = value;
                this.StatusTrajStationSpecified = true;
                NotifyPropertyChanged("StatusTrajStation");
            }
        }

        private TrajStationStatus? statusTrajStationField; 


		/// <summary>
        /// statusTrajStationSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean StatusTrajStationSpecified {
            get {
                return statusTrajStationSpecifiedField;
            } 
            set {
                statusTrajStationSpecifiedField = value;
                NotifyPropertyChanged("StatusTrajStationSpecified");
            }
        }

        private Boolean statusTrajStationSpecifiedField; 


        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
		[XmlElement("rawData")]

        public StnTrajRawData RawData {
            get {
                return rawDataField;
            } 
            set {
                rawDataField = value;
                NotifyPropertyChanged("RawData");
            }
        }

        private StnTrajRawData rawDataField; 


        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
		[XmlElement("corUsed")]

        public StnTrajCorUsed CorUsed {
            get {
                return corUsedField;
            } 
            set {
                corUsedField = value;
                NotifyPropertyChanged("CorUsed");
            }
        }

        private StnTrajCorUsed corUsedField; 


        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
		[XmlElement("valid")]

        public StnTrajValid Valid {
            get {
                return validField;
            } 
            set {
                validField = value;
                NotifyPropertyChanged("Valid");
            }
        }

        private StnTrajValid validField; 


        /// <summary>
        /// Covariance matrix for error model. 
        /// </summary>
		[XmlElement("matrixCov")]

        public StnTrajMatrixCov MatrixCov {
            get {
                return matrixCovField;
            } 
            set {
                matrixCovField = value;
                NotifyPropertyChanged("MatrixCov");
            }
        }

        private StnTrajMatrixCov matrixCovField; 


        /// <summary>
        /// The 2D coordinates of the item. Note that within the context of trajectory, the "original" coordinates are inherently local coordinates as defined above.
        /// </summary>
		[XmlElement("location")]

        public List<Location> Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                NotifyPropertyChanged("Location");
            }
        }

        private List<Location> locationField; 


        /// <summary>
        /// A pointer to the trajectoryStation from which this station was derived. The trajectoryStation may be in another wellbore.
        /// </summary>
		[XmlElement("sourceStation")]

        public RefWellboreTrajectoryStation SourceStation {
            get {
                return sourceStationField;
            } 
            set {
                sourceStationField = value;
                NotifyPropertyChanged("SourceStation");
            }
        }

        private RefWellboreTrajectoryStation sourceStationField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML Trajectory Station Raw Data
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajRawData", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML Trajectory Station Raw Data")]
    public partial class StnTrajRawData : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Uncorrected gravitational field strength measured in axial direction. 
        /// </summary>
		[XmlElement("gravAxialRaw")]

        public AccelerationLinearMeasure GravAxialRaw {
            get {
                return gravAxialRawField;
            } 
            set {
                gravAxialRawField = value;
                NotifyPropertyChanged("GravAxialRaw");
            }
        }

        private AccelerationLinearMeasure gravAxialRawField; 


        /// <summary>
        /// Uncorrected gravitational field strength measured in transverse direction. 
        /// </summary>
		[XmlElement("gravTran1Raw")]

        public AccelerationLinearMeasure GravTran1Raw {
            get {
                return gravTran1RawField;
            } 
            set {
                gravTran1RawField = value;
                NotifyPropertyChanged("GravTran1Raw");
            }
        }

        private AccelerationLinearMeasure gravTran1RawField; 


        /// <summary>
        /// Uncorrected gravitational field strength measured in transverse direction, approximately normal to tran1. 
        /// </summary>
		[XmlElement("gravTran2Raw")]

        public AccelerationLinearMeasure GravTran2Raw {
            get {
                return gravTran2RawField;
            } 
            set {
                gravTran2RawField = value;
                NotifyPropertyChanged("GravTran2Raw");
            }
        }

        private AccelerationLinearMeasure gravTran2RawField; 


        /// <summary>
        /// Uncorrected magnetic field strength measured in axial direction. 
        /// </summary>
		[XmlElement("magAxialRaw")]

        public MagneticInductionMeasure MagAxialRaw {
            get {
                return magAxialRawField;
            } 
            set {
                magAxialRawField = value;
                NotifyPropertyChanged("MagAxialRaw");
            }
        }

        private MagneticInductionMeasure magAxialRawField; 


        /// <summary>
        /// Uncorrected magnetic field strength measured in transverse direction. 
        /// </summary>
		[XmlElement("magTran1Raw")]

        public MagneticInductionMeasure MagTran1Raw {
            get {
                return magTran1RawField;
            } 
            set {
                magTran1RawField = value;
                NotifyPropertyChanged("MagTran1Raw");
            }
        }

        private MagneticInductionMeasure magTran1RawField; 


        /// <summary>
        /// Uncorrected magnetic field strength measured in transverse direction, approximately normal to tran1. 
        /// </summary>
		[XmlElement("magTran2Raw")]

        public MagneticInductionMeasure MagTran2Raw {
            get {
                return magTran2RawField;
            } 
            set {
                magTran2RawField = value;
                NotifyPropertyChanged("MagTran2Raw");
            }
        }

        private MagneticInductionMeasure magTran2RawField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML Trajectory Station Corrections Applied
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajCorUsed", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML Trajectory Station Corrections Applied")]
    public partial class StnTrajCorUsed : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Calculated gravitational field strength correction. 
        /// </summary>
		[XmlElement("gravAxialAccelCor")]

        public AccelerationLinearMeasure GravAxialAccelCor {
            get {
                return gravAxialAccelCorField;
            } 
            set {
                gravAxialAccelCorField = value;
                NotifyPropertyChanged("GravAxialAccelCor");
            }
        }

        private AccelerationLinearMeasure gravAxialAccelCorField; 


        /// <summary>
        /// The correction applied to the X cross-axial component of the earths magnetic field. 
        /// </summary>
		[XmlElement("gravTran1AccelCor")]

        public AccelerationLinearMeasure GravTran1AccelCor {
            get {
                return gravTran1AccelCorField;
            } 
            set {
                gravTran1AccelCorField = value;
                NotifyPropertyChanged("GravTran1AccelCor");
            }
        }

        private AccelerationLinearMeasure gravTran1AccelCorField; 


        /// <summary>
        /// The correction applied to the Y cross-axial component of the earths magnetic field. 
        /// </summary>
		[XmlElement("gravTran2AccelCor")]

        public AccelerationLinearMeasure GravTran2AccelCor {
            get {
                return gravTran2AccelCorField;
            } 
            set {
                gravTran2AccelCorField = value;
                NotifyPropertyChanged("GravTran2AccelCor");
            }
        }

        private AccelerationLinearMeasure gravTran2AccelCorField; 


        /// <summary>
        /// Axial magnetic drillstring correction. 
        /// </summary>
		[XmlElement("magAxialDrlstrCor")]

        public MagneticInductionMeasure MagAxialDrlstrCor {
            get {
                return magAxialDrlstrCorField;
            } 
            set {
                magAxialDrlstrCorField = value;
                NotifyPropertyChanged("MagAxialDrlstrCor");
            }
        }

        private MagneticInductionMeasure magAxialDrlstrCorField; 


        /// <summary>
        /// Cross-axial magnetic correction. 
        /// </summary>
		[XmlElement("magTran1DrlstrCor")]

        public MagneticInductionMeasure MagTran1DrlstrCor {
            get {
                return magTran1DrlstrCorField;
            } 
            set {
                magTran1DrlstrCorField = value;
                NotifyPropertyChanged("MagTran1DrlstrCor");
            }
        }

        private MagneticInductionMeasure magTran1DrlstrCorField; 


        /// <summary>
        /// Cross-axial magnetic correction. 
        /// </summary>
		[XmlElement("magTran2DrlstrCor")]

        public MagneticInductionMeasure MagTran2DrlstrCor {
            get {
                return magTran2DrlstrCorField;
            } 
            set {
                magTran2DrlstrCorField = value;
                NotifyPropertyChanged("MagTran2DrlstrCor");
            }
        }

        private MagneticInductionMeasure magTran2DrlstrCorField; 


        /// <summary>
        /// Calculated sag correction to inclination. 
        /// </summary>
		[XmlElement("sagIncCor")]

        public PlaneAngleMeasure SagIncCor {
            get {
                return sagIncCorField;
            } 
            set {
                sagIncCorField = value;
                NotifyPropertyChanged("SagIncCor");
            }
        }

        private PlaneAngleMeasure sagIncCorField; 


        /// <summary>
        /// Calculated sag correction to azimuth. 
        /// </summary>
		[XmlElement("sagAziCor")]

        public PlaneAngleMeasure SagAziCor {
            get {
                return sagAziCorField;
            } 
            set {
                sagAziCorField = value;
                NotifyPropertyChanged("SagAziCor");
            }
        }

        private PlaneAngleMeasure sagAziCorField; 


        /// <summary>
        /// Magnetic declination used to correct a magnetic survey station. 
        /// </summary>
		[XmlElement("stnMagDeclUsed")]

        public PlaneAngleMeasure StnMagDeclUsed {
            get {
                return stnMagDeclUsedField;
            } 
            set {
                stnMagDeclUsedField = value;
                NotifyPropertyChanged("StnMagDeclUsed");
            }
        }

        private PlaneAngleMeasure stnMagDeclUsedField; 


        /// <summary>
        /// Grid Correction (Meridian convergence). The angle between True North and Grid North. Grid Correction is positive when True North is west of Grid North. The correction is added to the raw observation, thus yielding a reduced or corrected observation that can go into the subsequent calculations.
        /// </summary>
		[XmlElement("stnGridCorUsed")]

        public PlaneAngleMeasure StnGridCorUsed {
            get {
                return stnGridCorUsedField;
            } 
            set {
                stnGridCorUsedField = value;
                NotifyPropertyChanged("StnGridCorUsed");
            }
        }

        private PlaneAngleMeasure stnGridCorUsedField; 


        /// <summary>
        /// Offset relative to bit. 
        /// </summary>
		[XmlElement("dirSensorOffset")]

        public LengthMeasure DirSensorOffset {
            get {
                return dirSensorOffsetField;
            } 
            set {
                dirSensorOffsetField = value;
                NotifyPropertyChanged("DirSensorOffset");
            }
        }

        private LengthMeasure dirSensorOffsetField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML Validation Information for Survey
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajValid", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML Validation Information for Survey")]
    public partial class StnTrajValid : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Calculated total intensity of the geomagnetic field as sum of BGGM, IFR and local field. 
        /// </summary>
		[XmlElement("magTotalFieldCalc")]

        public MagneticInductionMeasure MagTotalFieldCalc {
            get {
                return magTotalFieldCalcField;
            } 
            set {
                magTotalFieldCalcField = value;
                NotifyPropertyChanged("MagTotalFieldCalc");
            }
        }

        private MagneticInductionMeasure magTotalFieldCalcField; 


        /// <summary>
        /// Calculated magnetic dip (inclination), the angle between the horizontal and the geomagnetic field (positive down, res .001). 
        /// </summary>
		[XmlElement("magDipAngleCalc")]

        public PlaneAngleMeasure MagDipAngleCalc {
            get {
                return magDipAngleCalcField;
            } 
            set {
                magDipAngleCalcField = value;
                NotifyPropertyChanged("MagDipAngleCalc");
            }
        }

        private PlaneAngleMeasure magDipAngleCalcField; 


        /// <summary>
        /// Calculated total gravitational field. 
        /// </summary>
		[XmlElement("gravTotalFieldCalc")]

        public AccelerationLinearMeasure GravTotalFieldCalc {
            get {
                return gravTotalFieldCalcField;
            } 
            set {
                gravTotalFieldCalcField = value;
                NotifyPropertyChanged("GravTotalFieldCalc");
            }
        }

        private AccelerationLinearMeasure gravTotalFieldCalcField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML Validation Information for Covariance Matrix
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajMatrixCov", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML Validation Information for Covariance Matrix")]
    public partial class StnTrajMatrixCov : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Covariance north north. 
        /// </summary>
		[XmlElement("varianceNN")]

        public AreaMeasure VarianceNN {
            get {
                return varianceNNField;
            } 
            set {
                varianceNNField = value;
                NotifyPropertyChanged("VarianceNN");
            }
        }

        private AreaMeasure varianceNNField; 


        /// <summary>
        /// Crossvariance north east. 
        /// </summary>
		[XmlElement("varianceNE")]

        public AreaMeasure VarianceNE {
            get {
                return varianceNEField;
            } 
            set {
                varianceNEField = value;
                NotifyPropertyChanged("VarianceNE");
            }
        }

        private AreaMeasure varianceNEField; 


        /// <summary>
        /// Crossvariance north vertical. 
        /// </summary>
		[XmlElement("varianceNVert")]

        public AreaMeasure VarianceNVert {
            get {
                return varianceNVertField;
            } 
            set {
                varianceNVertField = value;
                NotifyPropertyChanged("VarianceNVert");
            }
        }

        private AreaMeasure varianceNVertField; 


        /// <summary>
        /// Covariance east east. 
        /// </summary>
		[XmlElement("varianceEE")]

        public AreaMeasure VarianceEE {
            get {
                return varianceEEField;
            } 
            set {
                varianceEEField = value;
                NotifyPropertyChanged("VarianceEE");
            }
        }

        private AreaMeasure varianceEEField; 


        /// <summary>
        /// Crossvariance east vertical. 
        /// </summary>
		[XmlElement("varianceEVert")]

        public AreaMeasure VarianceEVert {
            get {
                return varianceEVertField;
            } 
            set {
                varianceEVertField = value;
                NotifyPropertyChanged("VarianceEVert");
            }
        }

        private AreaMeasure varianceEVertField; 


        /// <summary>
        /// Covariance vertical vertical. 
        /// </summary>
		[XmlElement("varianceVertVert")]

        public AreaMeasure VarianceVertVert {
            get {
                return varianceVertVertField;
            } 
            set {
                varianceVertVertField = value;
                NotifyPropertyChanged("VarianceVertVert");
            }
        }

        private AreaMeasure varianceVertVertField; 


        /// <summary>
        /// Bias north. 
        /// </summary>
		[XmlElement("biasN")]

        public LengthMeasure BiasN {
            get {
                return biasNField;
            } 
            set {
                biasNField = value;
                NotifyPropertyChanged("BiasN");
            }
        }

        private LengthMeasure biasNField; 


        /// <summary>
        /// Bias east. 
        /// </summary>
		[XmlElement("biasE")]

        public LengthMeasure BiasE {
            get {
                return biasEField;
            } 
            set {
                biasEField = value;
                NotifyPropertyChanged("BiasE");
            }
        }

        private LengthMeasure biasEField; 


        /// <summary>
        /// Bias vertical. 
        /// </summary>
		[XmlElement("biasVert")]

        public LengthMeasure BiasVert {
            get {
                return biasVertField;
            } 
            set {
                biasVertField = value;
                NotifyPropertyChanged("BiasVert");
            }
        }

        private LengthMeasure biasVertField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML Location Component Schema This is a location that is expressed in terms of 2D coordinates. In order that the location be understood, the coordinate reference system (CRS) must be known.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_location", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML Location Component Schema This is a location that is expressed in terms of 2D coordinates. In order that the location be understood, the coordinate reference system (CRS) must be known.")]
    public partial class Location : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A pointer to the wellCRS that defines the CRS for the coordinates. While optional, it is strongly recommended that this be specified.
        /// </summary>
		[XmlElement("wellCRS")]

        public RefNameString WellCRS {
            get {
                return wellCRSField;
            } 
            set {
                wellCRSField = value;
                NotifyPropertyChanged("WellCRS");
            }
        }

        private RefNameString wellCRSField; 


        /// <summary>
        /// The latitude with north being positive. If you set this property, you must also set Longitude.
        /// </summary>
        [XmlElement("latitude")]
        public PlaneAngleMeasure Latitude {
            get {
                return latitudeField;
            } 
            set {
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Latitude when property ProjectedY is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Latitude when property LocalY is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Latitude when property ProjectedX is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Latitude when property Northing is already set");
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Latitude when property Easting is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Latitude when property LocalX is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Latitude when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Latitude when property Westing is already set");
                latitudeField = value;
                LatitudeSpecified = (value!=null);
                NotifyPropertyChanged("Latitude");
            }
        }

        private PlaneAngleMeasure latitudeField; 
        /// <summary>
        /// Boolean to indicate if Latitude has been set. Used for serialization.
        /// </summary>
        private Boolean LatitudeSpecified = false; 

        /// <summary>
        /// The longitude with east being positive. If you set this property, you must also set Latitude.
        /// </summary>
        [XmlElement("longitude")]
        public PlaneAngleMeasure Longitude {
            get {
                return longitudeField;
            } 
            set {
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Longitude when property ProjectedY is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Longitude when property LocalY is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Longitude when property ProjectedX is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Longitude when property Northing is already set");
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Longitude when property Easting is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Longitude when property LocalX is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Longitude when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Longitude when property Westing is already set");
                longitudeField = value;
                LongitudeSpecified = (value!=null);
                NotifyPropertyChanged("Longitude");
            }
        }

        private PlaneAngleMeasure longitudeField; 
        /// <summary>
        /// Boolean to indicate if Longitude has been set. Used for serialization.
        /// </summary>
        private Boolean LongitudeSpecified = false; 

        /// <summary>
        /// The projected coordinate with east being positive. This is the most common type of projected coordinates. UTM coordinates are expressed in Easting and Northing. If you set this property, you must also set Northing.
        /// </summary>
        [XmlElement("easting")]
        public LengthMeasure Easting {
            get {
                return eastingField;
            } 
            set {
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Easting when property ProjectedY is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Easting when property LocalY is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Easting when property ProjectedX is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Easting when property LocalX is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Easting when property Longitude is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Easting when property Latitude is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Easting when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Easting when property Westing is already set");
                eastingField = value;
                EastingSpecified = (value!=null);
                NotifyPropertyChanged("Easting");
            }
        }

        private LengthMeasure eastingField; 
        /// <summary>
        /// Boolean to indicate if Easting has been set. Used for serialization.
        /// </summary>
        private Boolean EastingSpecified = false; 

        /// <summary>
        /// The projected coordinate with north being positive. This is the most common type of projected coordinates. UTM coordinates are expressed in Easting and Northing. If you set this property, you must also set Easting.
        /// </summary>
        [XmlElement("northing")]
        public LengthMeasure Northing {
            get {
                return northingField;
            } 
            set {
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Northing when property ProjectedY is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Northing when property LocalY is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Northing when property ProjectedX is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Northing when property LocalX is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Northing when property Longitude is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Northing when property Latitude is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Northing when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Northing when property Westing is already set");
                northingField = value;
                NorthingSpecified = (value!=null);
                NotifyPropertyChanged("Northing");
            }
        }

        private LengthMeasure northingField; 
        /// <summary>
        /// Boolean to indicate if Northing has been set. Used for serialization.
        /// </summary>
        private Boolean NorthingSpecified = false; 

        /// <summary>
        /// The projected coordinate with west being positive. The positive directions are reversed from the usual Easting and Northing values. These values are generally located in the southern hemisphere, most notably in South Africa and Australia. If you set this property, you must also set Southing.
        /// </summary>
        [XmlElement("westing")]
        public LengthMeasure Westing {
            get {
                return westingField;
            } 
            set {
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Westing when property ProjectedY is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Westing when property LocalY is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Westing when property ProjectedX is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Westing when property Northing is already set");
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Westing when property Easting is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Westing when property LocalX is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Westing when property Longitude is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Westing when property Latitude is already set");
                westingField = value;
                WestingSpecified = (value!=null);
                NotifyPropertyChanged("Westing");
            }
        }

        private LengthMeasure westingField; 
        /// <summary>
        /// Boolean to indicate if Westing has been set. Used for serialization.
        /// </summary>
        private Boolean WestingSpecified = false; 

        /// <summary>
        /// The projected coordinate with south being positive. The positive directions are reversed from the usual Easting and Northing values. These values are generally located in the southern hemisphere, most notably in South Africa and Australia. If you set this property, you must also set Westing.
        /// </summary>
        [XmlElement("southing")]
        public LengthMeasure Southing {
            get {
                return southingField;
            } 
            set {
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Southing when property ProjectedY is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Southing when property LocalY is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Southing when property ProjectedX is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Southing when property Northing is already set");
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Southing when property Easting is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Southing when property LocalX is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Southing when property Longitude is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Southing when property Latitude is already set");
                southingField = value;
                SouthingSpecified = (value!=null);
                NotifyPropertyChanged("Southing");
            }
        }

        private LengthMeasure southingField; 
        /// <summary>
        /// Boolean to indicate if Southing has been set. Used for serialization.
        /// </summary>
        private Boolean SouthingSpecified = false; 

        /// <summary>
        /// The projected X coordinate with the positive direction unknown. ProjectedX and ProjectedY are used when it is not known what the meaning of the coordinates is. If the meaning is known, the Easting/Northing or Westing/Southing should be used. Use of this pair implies a lack of knowledge on the part of the sender. If you set this property, you must also set ProjectedY.
        /// </summary>
        [XmlElement("projectedX")]
        public LengthMeasure ProjectedX {
            get {
                return projectedXField;
            } 
            set {
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property ProjectedX when property LocalY is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property ProjectedX when property Northing is already set");
                if (value != null && EastingSpecified) throw new Exception("Cannot set property ProjectedX when property Easting is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property ProjectedX when property LocalX is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property ProjectedX when property Longitude is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property ProjectedX when property Latitude is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property ProjectedX when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property ProjectedX when property Westing is already set");
                projectedXField = value;
                ProjectedXSpecified = (value!=null);
                NotifyPropertyChanged("ProjectedX");
            }
        }

        private LengthMeasure projectedXField; 
        /// <summary>
        /// Boolean to indicate if ProjectedX has been set. Used for serialization.
        /// </summary>
        private Boolean ProjectedXSpecified = false; 

        /// <summary>
        /// The projected Y coordinate with the positive direction unknown. ProjectedX and ProjectedY are used when it is not known what the meaning of the coordinates is. If the meaning is known, the Easting/Northing or Westing/Southing should be used. Use of this pair implies a lack of knowledge on the part of the sender. If you set this property, you must also set ProjectedX.
        /// </summary>
        [XmlElement("projectedY")]
        public LengthMeasure ProjectedY {
            get {
                return projectedYField;
            } 
            set {
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property ProjectedY when property LocalY is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property ProjectedY when property Northing is already set");
                if (value != null && EastingSpecified) throw new Exception("Cannot set property ProjectedY when property Easting is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property ProjectedY when property LocalX is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property ProjectedY when property Longitude is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property ProjectedY when property Latitude is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property ProjectedY when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property ProjectedY when property Westing is already set");
                projectedYField = value;
                ProjectedYSpecified = (value!=null);
                NotifyPropertyChanged("ProjectedY");
            }
        }

        private LengthMeasure projectedYField; 
        /// <summary>
        /// Boolean to indicate if ProjectedY has been set. Used for serialization.
        /// </summary>
        private Boolean ProjectedYSpecified = false; 

        /// <summary>
        /// The local (engineering) X coordinate. The CRS will define the orientation of the axis. If you set this property, you must also set LocalY.
        /// </summary>
        [XmlElement("localX")]
        public LengthMeasure LocalX {
            get {
                return localXField;
            } 
            set {
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property LocalX when property ProjectedY is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property LocalX when property ProjectedX is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property LocalX when property Northing is already set");
                if (value != null && EastingSpecified) throw new Exception("Cannot set property LocalX when property Easting is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property LocalX when property Longitude is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property LocalX when property Latitude is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property LocalX when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property LocalX when property Westing is already set");
                localXField = value;
                LocalXSpecified = (value!=null);
                NotifyPropertyChanged("LocalX");
            }
        }

        private LengthMeasure localXField; 
        /// <summary>
        /// Boolean to indicate if LocalX has been set. Used for serialization.
        /// </summary>
        private Boolean LocalXSpecified = false; 

        /// <summary>
        /// The local (engineering) Y coordinate. The CRS will define the orientation of the axis. If you set this property, you must also set LocalX.
        /// </summary>
        [XmlElement("localY")]
        public LengthMeasure LocalY {
            get {
                return localYField;
            } 
            set {
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property LocalY when property ProjectedY is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property LocalY when property ProjectedX is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property LocalY when property Northing is already set");
                if (value != null && EastingSpecified) throw new Exception("Cannot set property LocalY when property Easting is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property LocalY when property Longitude is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property LocalY when property Latitude is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property LocalY when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property LocalY when property Westing is already set");
                localYField = value;
                LocalYSpecified = (value!=null);
                NotifyPropertyChanged("LocalY");
            }
        }

        private LengthMeasure localYField; 
        /// <summary>
        /// Boolean to indicate if LocalY has been set. Used for serialization.
        /// </summary>
        private Boolean LocalYSpecified = false; 



		/// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public List<ItemsChoiceType> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

        private List<ItemsChoiceType> ItemsElementNameField; 


        /// <summary>
        /// Flag indicating (if "true" or "1") that this pair of values was the original data given for the location. If the pair of values was calculated from an original pair of values, this flag should be "false" (or "0"), or not present.
        /// </summary>
		[XmlElement("original")]

        public Boolean? Original {
            get {
                return originalField;
            } 
            set {
                originalField = value;
                this.OriginalSpecified = true;
                NotifyPropertyChanged("Original");
            }
        }

        private Boolean? originalField; 


		/// <summary>
        /// originalSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean OriginalSpecified {
            get {
                return originalSpecifiedField;
            } 
            set {
                originalSpecifiedField = value;
                NotifyPropertyChanged("OriginalSpecified");
            }
        }

        private Boolean originalSpecifiedField; 


        /// <summary>
        /// A Comment, generally given to help the reader interpret the coordinates if the CRS and the chosen pair do not make them clear.
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the cs_refWellboreTrajectoryStation xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellboreTrajectoryStation", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the cs_refWellboreTrajectoryStation xsd type.")]
    public partial class RefWellboreTrajectoryStation : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A pointer to the trajectoryStation within the parent trajectory. This is a special case where we only use a uid for the pointer. The natural identity of a station is its physical characteristics (e.g., md).
        /// </summary>
		[XmlElement("stationReference")]

        public String StationReference {
            get {
                return stationReferenceField;
            } 
            set {
                stationReferenceField = value;
                NotifyPropertyChanged("StationReference");
            }
        }

        private String stationReferenceField; 


        /// <summary>
        /// A pointer to the trajectory within the parent wellbore. This trajectory contains the trajectoryStation.
        /// </summary>
		[XmlElement("trajectoryParent")]

        public RefNameString TrajectoryParent {
            get {
                return trajectoryParentField;
            } 
            set {
                trajectoryParentField = value;
                NotifyPropertyChanged("TrajectoryParent");
            }
        }

        private RefNameString trajectoryParentField; 


        /// <summary>
        /// A pointer to the wellbore that contains the trajectory. This is not needed unless the trajectory is outside the context of a common parent wellbore.
        /// </summary>
		[XmlElement("wellboreParent")]

        public RefNameString WellboreParent {
            get {
                return wellboreParentField;
            } 
            set {
                wellboreParentField = value;
                NotifyPropertyChanged("WellboreParent");
            }
        }

        private RefNameString wellboreParentField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Slow Circulation Rates (SCR) Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_scr", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Slow Circulation Rates (SCR) Component Schema")]
    public partial class Scr : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


        /// <summary>
        /// This is a pointer to the corresponding pump on the rig.
        /// </summary>
		[XmlElement("pump")]

        public RefPositiveCount Pump {
            get {
                return pumpField;
            } 
            set {
                pumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

        private RefPositiveCount pumpField; 


        /// <summary>
        /// Type of slow circulation rate. 
        /// </summary>
		[XmlElement("typeScr")]

        public ScrType? TypeScr {
            get {
                return typeScrField;
            } 
            set {
                typeScrField = value;
                NotifyPropertyChanged("TypeScr");
            }
        }

        private ScrType? typeScrField; 


        /// <summary>
        /// Pump stroke rate. 
        /// </summary>
		[XmlElement("rateStroke")]

        public AnglePerTimeMeasure RateStroke {
            get {
                return rateStrokeField;
            } 
            set {
                rateStrokeField = value;
                NotifyPropertyChanged("RateStroke");
            }
        }

        private AnglePerTimeMeasure rateStrokeField; 


        /// <summary>
        /// Recorded pump pressure for the stroke rate. 
        /// </summary>
		[XmlElement("presRecorded")]

        public PressureMeasure PresRecorded {
            get {
                return presRecordedField;
            } 
            set {
                presRecordedField = value;
                NotifyPropertyChanged("PresRecorded");
            }
        }

        private PressureMeasure presRecordedField; 


        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[XmlElement("mdBit")]

        public MeasuredDepthCoord MDBit {
            get {
                return mdBitField;
            } 
            set {
                mdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord mdBitField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the refPositiveCount xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refPositiveCount", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the refPositiveCount xsd type.")]
    public partial class RefPositiveCount : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RefPositiveCount class.
        /// </summary>
        public RefPositiveCount() {}

        /// <summary>
        /// Initializes a new instance of the RefPositiveCount class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public RefPositiveCount(Int16 value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the node referenced by the index value. This attribute is required within the context of a WITSML server.
        /// </summary>
        [XmlAttribute("uidRef")]

        public String UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private String uidRefField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public Int16 Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Int16 ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Pit Volume Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pitVolume", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Pit Volume Component Schema")]
    public partial class PitVolume : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// This is a pointer to the corresponding pit on the rig.
        /// </summary>
		[XmlElement("pit")]

        public RefPositiveCount Pit {
            get {
                return pitField;
            } 
            set {
                pitField = value;
                NotifyPropertyChanged("Pit");
            }
        }

        private RefPositiveCount pitField; 


        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


		/// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 


        /// <summary>
        /// Volume of fluid in pit. 
        /// </summary>
		[XmlElement("volPit")]

        public VolumeMeasure VolPit {
            get {
                return volPitField;
            } 
            set {
                volPitField = value;
                NotifyPropertyChanged("VolPit");
            }
        }

        private VolumeMeasure volPitField; 


        /// <summary>
        /// Density of fluid in pit. 
        /// </summary>
		[XmlElement("densFluid")]

        public DensityMeasure DensFluid {
            get {
                return densFluidField;
            } 
            set {
                densFluidField = value;
                NotifyPropertyChanged("DensFluid");
            }
        }

        private DensityMeasure densFluidField; 


        /// <summary>
        /// Fluid description. 
        /// </summary>
		[XmlElement("descFluid")]

        public String DescFluid {
            get {
                return descFluidField;
            } 
            set {
                descFluidField = value;
                NotifyPropertyChanged("DescFluid");
            }
        }

        private String descFluidField; 


        /// <summary>
        /// Funnel viscosity in seconds. 
        /// </summary>
		[XmlElement("visFunnel")]

        public TimeMeasure VisFunnel {
            get {
                return visFunnelField;
            } 
            set {
                visFunnelField = value;
                NotifyPropertyChanged("VisFunnel");
            }
        }

        private TimeMeasure visFunnelField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Mud Volume Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudVolume", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Mud Volume Component Schema")]
    public partial class MudVolume : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Total volume of mud at start of report interval (including pits and hole). 
        /// </summary>
		[XmlElement("volTotMudStart")]

        public VolumeMeasure VolTotMudStart {
            get {
                return volTotMudStartField;
            } 
            set {
                volTotMudStartField = value;
                NotifyPropertyChanged("VolTotMudStart");
            }
        }

        private VolumeMeasure volTotMudStartField; 


        /// <summary>
        /// Volume of mud dumped. 
        /// </summary>
		[XmlElement("volMudDumped")]

        public VolumeMeasure VolMudDumped {
            get {
                return volMudDumpedField;
            } 
            set {
                volMudDumpedField = value;
                NotifyPropertyChanged("VolMudDumped");
            }
        }

        private VolumeMeasure volMudDumpedField; 


        /// <summary>
        /// Volume of mud received from mud warehouse. 
        /// </summary>
		[XmlElement("volMudReceived")]

        public VolumeMeasure VolMudReceived {
            get {
                return volMudReceivedField;
            } 
            set {
                volMudReceivedField = value;
                NotifyPropertyChanged("VolMudReceived");
            }
        }

        private VolumeMeasure volMudReceivedField; 


        /// <summary>
        /// Volume of mud returned to mud warehouse. 
        /// </summary>
		[XmlElement("volMudReturned")]

        public VolumeMeasure VolMudReturned {
            get {
                return volMudReturnedField;
            } 
            set {
                volMudReturnedField = value;
                NotifyPropertyChanged("VolMudReturned");
            }
        }

        private VolumeMeasure volMudReturnedField; 


        /// <summary>
        /// Mud losses detailed breakdown between Surface and Down Hole. 
        /// </summary>
		[XmlElement("mudLosses")]

        public MudLosses MudLosses {
            get {
                return mudLossesField;
            } 
            set {
                mudLossesField = value;
                NotifyPropertyChanged("MudLosses");
            }
        }

        private MudLosses mudLossesField; 


        /// <summary>
        /// Volume of mud built. 
        /// </summary>
		[XmlElement("volMudBuilt")]

        public VolumeMeasure VolMudBuilt {
            get {
                return volMudBuiltField;
            } 
            set {
                volMudBuiltField = value;
                NotifyPropertyChanged("VolMudBuilt");
            }
        }

        private VolumeMeasure volMudBuiltField; 


        /// <summary>
        /// Volume of mud contained within active string. 
        /// </summary>
		[XmlElement("volMudString")]

        public VolumeMeasure VolMudString {
            get {
                return volMudStringField;
            } 
            set {
                volMudStringField = value;
                NotifyPropertyChanged("VolMudString");
            }
        }

        private VolumeMeasure volMudStringField; 


        /// <summary>
        /// Volume of mud contained in casing annulus. 
        /// </summary>
		[XmlElement("volMudCasing")]

        public VolumeMeasure VolMudCasing {
            get {
                return volMudCasingField;
            } 
            set {
                volMudCasingField = value;
                NotifyPropertyChanged("VolMudCasing");
            }
        }

        private VolumeMeasure volMudCasingField; 


        /// <summary>
        /// Volume of mud contained in open hole annulus. 
        /// </summary>
		[XmlElement("volMudHole")]

        public VolumeMeasure VolMudHole {
            get {
                return volMudHoleField;
            } 
            set {
                volMudHoleField = value;
                NotifyPropertyChanged("VolMudHole");
            }
        }

        private VolumeMeasure volMudHoleField; 


        /// <summary>
        /// Volume of mud contained in riser section annulus. 
        /// </summary>
		[XmlElement("volMudRiser")]

        public VolumeMeasure VolMudRiser {
            get {
                return volMudRiserField;
            } 
            set {
                volMudRiserField = value;
                NotifyPropertyChanged("VolMudRiser");
            }
        }

        private VolumeMeasure volMudRiserField; 


        /// <summary>
        /// Total volume of mud at the end of the report interval (including pits and hole). 
        /// </summary>
		[XmlElement("volTotMudEnd")]

        public VolumeMeasure VolTotMudEnd {
            get {
                return volTotMudEndField;
            } 
            set {
                volTotMudEndField = value;
                NotifyPropertyChanged("VolTotMudEnd");
            }
        }

        private VolumeMeasure volTotMudEndField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Mud Losses Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudLosses", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Mud Losses Component Schema")]
    public partial class MudLosses : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Volume of mud lost at shakers (at surface). 
        /// </summary>
		[XmlElement("volLostShakerSurf")]

        public VolumeMeasure VolLostShakerSurf {
            get {
                return volLostShakerSurfField;
            } 
            set {
                volLostShakerSurfField = value;
                NotifyPropertyChanged("VolLostShakerSurf");
            }
        }

        private VolumeMeasure volLostShakerSurfField; 


        /// <summary>
        /// Volume of mud lost in mud cleaning equipment (at surface). 
        /// </summary>
		[XmlElement("volLostMudCleanerSurf")]

        public VolumeMeasure VolLostMudCleanerSurf {
            get {
                return volLostMudCleanerSurfField;
            } 
            set {
                volLostMudCleanerSurfField = value;
                NotifyPropertyChanged("VolLostMudCleanerSurf");
            }
        }

        private VolumeMeasure volLostMudCleanerSurfField; 


        /// <summary>
        /// Volume of mud lost in pit room (at surface). 
        /// </summary>
		[XmlElement("volLostPitsSurf")]

        public VolumeMeasure VolLostPitsSurf {
            get {
                return volLostPitsSurfField;
            } 
            set {
                volLostPitsSurfField = value;
                NotifyPropertyChanged("VolLostPitsSurf");
            }
        }

        private VolumeMeasure volLostPitsSurfField; 


        /// <summary>
        /// Volume of mud lost while tripping (at surface). 
        /// </summary>
		[XmlElement("volLostTrippingSurf")]

        public VolumeMeasure VolLostTrippingSurf {
            get {
                return volLostTrippingSurfField;
            } 
            set {
                volLostTrippingSurfField = value;
                NotifyPropertyChanged("VolLostTrippingSurf");
            }
        }

        private VolumeMeasure volLostTrippingSurfField; 


        /// <summary>
        /// Surface volume lost other location. 
        /// </summary>
		[XmlElement("volLostOtherSurf")]

        public VolumeMeasure VolLostOtherSurf {
            get {
                return volLostOtherSurfField;
            } 
            set {
                volLostOtherSurfField = value;
                NotifyPropertyChanged("VolLostOtherSurf");
            }
        }

        private VolumeMeasure volLostOtherSurfField; 


        /// <summary>
        /// Total volume of mud lost at surface. 
        /// </summary>
		[XmlElement("volTotMudLostSurf")]

        public VolumeMeasure VolTotMudLostSurf {
            get {
                return volTotMudLostSurfField;
            } 
            set {
                volTotMudLostSurfField = value;
                NotifyPropertyChanged("VolTotMudLostSurf");
            }
        }

        private VolumeMeasure volTotMudLostSurfField; 


        /// <summary>
        /// Mud volume lost downhole while circulating. 
        /// </summary>
		[XmlElement("volLostCircHole")]

        public VolumeMeasure VolLostCircHole {
            get {
                return volLostCircHoleField;
            } 
            set {
                volLostCircHoleField = value;
                NotifyPropertyChanged("VolLostCircHole");
            }
        }

        private VolumeMeasure volLostCircHoleField; 


        /// <summary>
        /// Mud volume lost downhole while running casing. 
        /// </summary>
		[XmlElement("volLostCsgHole")]

        public VolumeMeasure VolLostCsgHole {
            get {
                return volLostCsgHoleField;
            } 
            set {
                volLostCsgHoleField = value;
                NotifyPropertyChanged("VolLostCsgHole");
            }
        }

        private VolumeMeasure volLostCsgHoleField; 


        /// <summary>
        /// Mud volume lost downhole while cementing. 
        /// </summary>
		[XmlElement("volLostCmtHole")]

        public VolumeMeasure VolLostCmtHole {
            get {
                return volLostCmtHoleField;
            } 
            set {
                volLostCmtHoleField = value;
                NotifyPropertyChanged("VolLostCmtHole");
            }
        }

        private VolumeMeasure volLostCmtHoleField; 


        /// <summary>
        /// Mud volume lost downhole behind casing. 
        /// </summary>
		[XmlElement("volLostBhdCsgHole")]

        public VolumeMeasure VolLostBhdCsgHole {
            get {
                return volLostBhdCsgHoleField;
            } 
            set {
                volLostBhdCsgHoleField = value;
                NotifyPropertyChanged("VolLostBhdCsgHole");
            }
        }

        private VolumeMeasure volLostBhdCsgHoleField; 


        /// <summary>
        /// Mud volume lost downhole during abandonment. 
        /// </summary>
		[XmlElement("volLostAbandonHole")]

        public VolumeMeasure VolLostAbandonHole {
            get {
                return volLostAbandonHoleField;
            } 
            set {
                volLostAbandonHoleField = value;
                NotifyPropertyChanged("VolLostAbandonHole");
            }
        }

        private VolumeMeasure volLostAbandonHoleField; 


        /// <summary>
        /// Mud volume lost downhole from other location. 
        /// </summary>
		[XmlElement("volLostOtherHole")]

        public VolumeMeasure VolLostOtherHole {
            get {
                return volLostOtherHoleField;
            } 
            set {
                volLostOtherHoleField = value;
                NotifyPropertyChanged("VolLostOtherHole");
            }
        }

        private VolumeMeasure volLostOtherHoleField; 


        /// <summary>
        /// Total volume of mud lost downhole. 
        /// </summary>
		[XmlElement("volTotMudLostHole")]

        public VolumeMeasure VolTotMudLostHole {
            get {
                return volTotMudLostHoleField;
            } 
            set {
                volTotMudLostHoleField = value;
                NotifyPropertyChanged("VolTotMudLostHole");
            }
        }

        private VolumeMeasure volTotMudLostHoleField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Inventory Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_inventory", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Inventory Component Schema ")]
    public partial class Inventory : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Name or type of inventory item. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Weight per item unit. 
        /// </summary>
        [XmlElement("itemWtPerUnit")]
        public MassMeasure ItemWeightPerUnit {
            get {
                return itemWtPerUnitField;
            } 
            set {
                if (value != null && ItemVolPerUnitSpecified) throw new Exception("Cannot set property ItemWeightPerUnit when property ItemVolPerUnit is already set");
                itemWtPerUnitField = value;
                ItemWeightPerUnitSpecified = (value!=null);
                NotifyPropertyChanged("ItemWeightPerUnit");
            }
        }

        private MassMeasure itemWtPerUnitField; 
        /// <summary>
        /// Boolean to indicate if ItemWeightPerUnit has been set. Used for serialization.
        /// </summary>
        private Boolean ItemWeightPerUnitSpecified = false; 

        /// <summary>
        /// Volume per item unit. 
        /// </summary>
        [XmlElement("itemVolPerUnit")]
        public VolumeMeasure ItemVolPerUnit {
            get {
                return itemVolPerUnitField;
            } 
            set {
                if (value != null && ItemWeightPerUnitSpecified) throw new Exception("Cannot set property ItemVolPerUnit when property ItemWeightPerUnit is already set");
                itemVolPerUnitField = value;
                ItemVolPerUnitSpecified = (value!=null);
                NotifyPropertyChanged("ItemVolPerUnit");
            }
        }

        private VolumeMeasure itemVolPerUnitField; 
        /// <summary>
        /// Boolean to indicate if ItemVolPerUnit has been set. Used for serialization.
        /// </summary>
        private Boolean ItemVolPerUnitSpecified = false; 



        /// <summary>
        /// Price per item unit, assume same currency for all items. 
        /// </summary>
		[XmlElement("pricePerUnit")]

        public Cost PricePerUnit {
            get {
                return pricePerUnitField;
            } 
            set {
                pricePerUnitField = value;
                NotifyPropertyChanged("PricePerUnit");
            }
        }

        private Cost pricePerUnitField; 


        /// <summary>
        /// Start quantity for report interval. 
        /// </summary>
		[XmlElement("qtyStart")]

        public Int16? QtyStart {
            get {
                return qtyStartField;
            } 
            set {
                qtyStartField = value;
                this.QtyStartSpecified = true;
                NotifyPropertyChanged("QtyStart");
            }
        }

        private Int16? qtyStartField; 


		/// <summary>
        /// qtyStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean QtyStartSpecified {
            get {
                return qtyStartSpecifiedField;
            } 
            set {
                qtyStartSpecifiedField = value;
                NotifyPropertyChanged("QtyStartSpecified");
            }
        }

        private Boolean qtyStartSpecifiedField; 


        /// <summary>
        /// Daily quantity adjustment/correction. 
        /// </summary>
		[XmlElement("qtyAdjustment")]

        public Int32? QtyAdjustment {
            get {
                return qtyAdjustmentField;
            } 
            set {
                qtyAdjustmentField = value;
                this.QtyAdjustmentSpecified = true;
                NotifyPropertyChanged("QtyAdjustment");
            }
        }

        private Int32? qtyAdjustmentField; 


		/// <summary>
        /// qtyAdjustmentSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean QtyAdjustmentSpecified {
            get {
                return qtyAdjustmentSpecifiedField;
            } 
            set {
                qtyAdjustmentSpecifiedField = value;
                NotifyPropertyChanged("QtyAdjustmentSpecified");
            }
        }

        private Boolean qtyAdjustmentSpecifiedField; 


        /// <summary>
        /// Quantity received at site. 
        /// </summary>
		[XmlElement("qtyReceived")]

        public Int16? QtyReceived {
            get {
                return qtyReceivedField;
            } 
            set {
                qtyReceivedField = value;
                this.QtyReceivedSpecified = true;
                NotifyPropertyChanged("QtyReceived");
            }
        }

        private Int16? qtyReceivedField; 


		/// <summary>
        /// qtyReceivedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean QtyReceivedSpecified {
            get {
                return qtyReceivedSpecifiedField;
            } 
            set {
                qtyReceivedSpecifiedField = value;
                NotifyPropertyChanged("QtyReceivedSpecified");
            }
        }

        private Boolean qtyReceivedSpecifiedField; 


        /// <summary>
        /// Quantity returned to base from site. 
        /// </summary>
		[XmlElement("qtyReturned")]

        public Int16? QtyReturned {
            get {
                return qtyReturnedField;
            } 
            set {
                qtyReturnedField = value;
                this.QtyReturnedSpecified = true;
                NotifyPropertyChanged("QtyReturned");
            }
        }

        private Int16? qtyReturnedField; 


		/// <summary>
        /// qtyReturnedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean QtyReturnedSpecified {
            get {
                return qtyReturnedSpecifiedField;
            } 
            set {
                qtyReturnedSpecifiedField = value;
                NotifyPropertyChanged("QtyReturnedSpecified");
            }
        }

        private Boolean qtyReturnedSpecifiedField; 


        /// <summary>
        /// Quantity used for the report period 
        /// </summary>
		[XmlElement("qtyUsed")]

        public Int16? QtyUsed {
            get {
                return qtyUsedField;
            } 
            set {
                qtyUsedField = value;
                this.QtyUsedSpecified = true;
                NotifyPropertyChanged("QtyUsed");
            }
        }

        private Int16? qtyUsedField; 


		/// <summary>
        /// qtyUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean QtyUsedSpecified {
            get {
                return qtyUsedSpecifiedField;
            } 
            set {
                qtyUsedSpecifiedField = value;
                NotifyPropertyChanged("QtyUsedSpecified");
            }
        }

        private Boolean qtyUsedSpecifiedField; 


        /// <summary>
        /// Cost for the product for the interval. 
        /// </summary>
		[XmlElement("costItem")]

        public Cost CostItem {
            get {
                return costItemField;
            } 
            set {
                costItemField = value;
                NotifyPropertyChanged("CostItem");
            }
        }

        private Cost costItemField; 


        /// <summary>
        /// Amount of item remaining on location after all adjustments for the report interval. 
        /// </summary>
		[XmlElement("qtyOnLocation")]

        public Int16? QtyOnLocation {
            get {
                return qtyOnLocationField;
            } 
            set {
                qtyOnLocationField = value;
                this.QtyOnLocationSpecified = true;
                NotifyPropertyChanged("QtyOnLocation");
            }
        }

        private Int16? qtyOnLocationField; 


		/// <summary>
        /// qtyOnLocationSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean QtyOnLocationSpecified {
            get {
                return qtyOnLocationSpecifiedField;
            } 
            set {
                qtyOnLocationSpecifiedField = value;
                NotifyPropertyChanged("QtyOnLocationSpecified");
            }
        }

        private Boolean qtyOnLocationSpecifiedField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Rig Response Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rigResponse", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Rig Response Component Schema")]
    public partial class RigResponse : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Vector of the tension on anchors #1 to #n. 
        /// </summary>
		[XmlElement("anchorTension")]

        public List<IndexedObject> AnchorTension {
            get {
                return anchorTensionField;
            } 
            set {
                anchorTensionField = value;
                NotifyPropertyChanged("AnchorTension");
            }
        }

        private List<IndexedObject> anchorTensionField; 


        /// <summary>
        /// Vector of the angles of the anchors #1 to #n. 
        /// </summary>
		[XmlElement("anchorAngle")]

        public List<IndexedObject> AnchorAngle {
            get {
                return anchorAngleField;
            } 
            set {
                anchorAngleField = value;
                NotifyPropertyChanged("AnchorAngle");
            }
        }

        private List<IndexedObject> anchorAngleField; 


        /// <summary>
        /// Direction, relative to true north, to which the rig is facing. 
        /// </summary>
		[XmlElement("rigHeading")]

        public PlaneAngleMeasure RigHeading {
            get {
                return rigHeadingField;
            } 
            set {
                rigHeadingField = value;
                NotifyPropertyChanged("RigHeading");
            }
        }

        private PlaneAngleMeasure rigHeadingField; 


        /// <summary>
        /// Maximum amplitude of the vertical motion of the rig. 
        /// </summary>
		[XmlElement("rigHeave")]

        public LengthMeasure RigHeave {
            get {
                return rigHeaveField;
            } 
            set {
                rigHeaveField = value;
                NotifyPropertyChanged("RigHeave");
            }
        }

        private LengthMeasure rigHeaveField; 


        /// <summary>
        /// Measure of the fore-aft rotational movement of the rig due the combined effects of wind and waves; measured as the angle from horizontal 
        /// </summary>
		[XmlElement("rigPitchAngle")]

        public PlaneAngleMeasure RigPitchAngle {
            get {
                return rigPitchAngleField;
            } 
            set {
                rigPitchAngleField = value;
                NotifyPropertyChanged("RigPitchAngle");
            }
        }

        private PlaneAngleMeasure rigPitchAngleField; 


        /// <summary>
        /// Measure of the side-to-side rotational movement of the rig due the combined effects of wind and waves; measured as the angle from vertical 
        /// </summary>
		[XmlElement("rigRollAngle")]

        public PlaneAngleMeasure RigRollAngle {
            get {
                return rigRollAngleField;
            } 
            set {
                rigRollAngleField = value;
                NotifyPropertyChanged("RigRollAngle");
            }
        }

        private PlaneAngleMeasure rigRollAngleField; 


        /// <summary>
        /// Angle of the marine riser with the vertical. 
        /// </summary>
		[XmlElement("riserAngle")]

        public PlaneAngleMeasure RiserAngle {
            get {
                return riserAngleField;
            } 
            set {
                riserAngleField = value;
                NotifyPropertyChanged("RiserAngle");
            }
        }

        private PlaneAngleMeasure riserAngleField; 


        /// <summary>
        /// Direction of the marine riser. 
        /// </summary>
		[XmlElement("riserDirection")]

        public PlaneAngleMeasure RiserDirection {
            get {
                return riserDirectionField;
            } 
            set {
                riserDirectionField = value;
                NotifyPropertyChanged("RiserDirection");
            }
        }

        private PlaneAngleMeasure riserDirectionField; 


        /// <summary>
        /// Tension of the marine riser. 
        /// </summary>
		[XmlElement("riserTension")]

        public ForceMeasure RiserTension {
            get {
                return riserTensionField;
            } 
            set {
                riserTensionField = value;
                NotifyPropertyChanged("RiserTension");
            }
        }

        private ForceMeasure riserTensionField; 


        /// <summary>
        /// Current temporary load on the rig deck. 
        /// </summary>
		[XmlElement("variableDeckLoad")]

        public ForceMeasure VariableDeckLoad {
            get {
                return variableDeckLoadField;
            } 
            set {
                variableDeckLoadField = value;
                NotifyPropertyChanged("VariableDeckLoad");
            }
        }

        private ForceMeasure variableDeckLoadField; 


        /// <summary>
        /// Total deck load. 
        /// </summary>
		[XmlElement("totalDeckLoad")]

        public ForceMeasure TotalDeckLoad {
            get {
                return totalDeckLoadField;
            } 
            set {
                totalDeckLoadField = value;
                NotifyPropertyChanged("TotalDeckLoad");
            }
        }

        private ForceMeasure totalDeckLoadField; 


        /// <summary>
        /// Direction of the guide base. 
        /// </summary>
		[XmlElement("guideBaseAngle")]

        public PlaneAngleMeasure GuideBaseAngle {
            get {
                return guideBaseAngleField;
            } 
            set {
                guideBaseAngleField = value;
                NotifyPropertyChanged("GuideBaseAngle");
            }
        }

        private PlaneAngleMeasure guideBaseAngleField; 


        /// <summary>
        /// Angle between riser and blow out preventer at the flex joint. 
        /// </summary>
		[XmlElement("ballJointAngle")]

        public PlaneAngleMeasure BallJointAngle {
            get {
                return ballJointAngleField;
            } 
            set {
                ballJointAngleField = value;
                NotifyPropertyChanged("BallJointAngle");
            }
        }

        private PlaneAngleMeasure ballJointAngleField; 


        /// <summary>
        /// Direction of the ball joint. 
        /// </summary>
		[XmlElement("ballJointDirection")]

        public PlaneAngleMeasure BallJointDirection {
            get {
                return ballJointDirectionField;
            } 
            set {
                ballJointDirectionField = value;
                NotifyPropertyChanged("BallJointDirection");
            }
        }

        private PlaneAngleMeasure ballJointDirectionField; 


        /// <summary>
        /// Horizontal displacement of the rig relative to the wellhead. 
        /// </summary>
		[XmlElement("offsetRig")]

        public LengthMeasure OffsetRig {
            get {
                return offsetRigField;
            } 
            set {
                offsetRigField = value;
                NotifyPropertyChanged("OffsetRig");
            }
        }

        private LengthMeasure offsetRigField; 


        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
		[XmlElement("loadLeg1")]

        public ForceMeasure LoadLeg1 {
            get {
                return loadLeg1Field;
            } 
            set {
                loadLeg1Field = value;
                NotifyPropertyChanged("LoadLeg1");
            }
        }

        private ForceMeasure loadLeg1Field; 


        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
		[XmlElement("loadLeg2")]

        public ForceMeasure LoadLeg2 {
            get {
                return loadLeg2Field;
            } 
            set {
                loadLeg2Field = value;
                NotifyPropertyChanged("LoadLeg2");
            }
        }

        private ForceMeasure loadLeg2Field; 


        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
		[XmlElement("loadLeg3")]

        public ForceMeasure LoadLeg3 {
            get {
                return loadLeg3Field;
            } 
            set {
                loadLeg3Field = value;
                NotifyPropertyChanged("LoadLeg3");
            }
        }

        private ForceMeasure loadLeg3Field; 


        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
		[XmlElement("loadLeg4")]

        public ForceMeasure LoadLeg4 {
            get {
                return loadLeg4Field;
            } 
            set {
                loadLeg4Field = value;
                NotifyPropertyChanged("LoadLeg4");
            }
        }

        private ForceMeasure loadLeg4Field; 


        /// <summary>
        /// Penetration of leg into seabed. 
        /// </summary>
		[XmlElement("penetrationLeg1")]

        public LengthMeasure PenetrationLeg1 {
            get {
                return penetrationLeg1Field;
            } 
            set {
                penetrationLeg1Field = value;
                NotifyPropertyChanged("PenetrationLeg1");
            }
        }

        private LengthMeasure penetrationLeg1Field; 


        /// <summary>
        /// Penetration of leg into seabed. 
        /// </summary>
		[XmlElement("penetrationLeg2")]

        public LengthMeasure PenetrationLeg2 {
            get {
                return penetrationLeg2Field;
            } 
            set {
                penetrationLeg2Field = value;
                NotifyPropertyChanged("PenetrationLeg2");
            }
        }

        private LengthMeasure penetrationLeg2Field; 


        /// <summary>
        /// Penetration of leg into seabed 
        /// </summary>
		[XmlElement("penetrationLeg3")]

        public LengthMeasure PenetrationLeg3 {
            get {
                return penetrationLeg3Field;
            } 
            set {
                penetrationLeg3Field = value;
                NotifyPropertyChanged("PenetrationLeg3");
            }
        }

        private LengthMeasure penetrationLeg3Field; 


        /// <summary>
        /// Penetration of leg into seabed 
        /// </summary>
		[XmlElement("penetrationLeg4")]

        public LengthMeasure PenetrationLeg4 {
            get {
                return penetrationLeg4Field;
            } 
            set {
                penetrationLeg4Field = value;
                NotifyPropertyChanged("PenetrationLeg4");
            }
        }

        private LengthMeasure penetrationLeg4Field; 


        /// <summary>
        /// Vessel displacement (in water). 
        /// </summary>
		[XmlElement("dispRig")]

        public LengthMeasure DispRig {
            get {
                return dispRigField;
            } 
            set {
                dispRigField = value;
                NotifyPropertyChanged("DispRig");
            }
        }

        private LengthMeasure dispRigField; 


        /// <summary>
        /// Mean draft at mid-section. 
        /// </summary>
		[XmlElement("meanDraft")]

        public LengthMeasure MeanDraft {
            get {
                return meanDraftField;
            } 
            set {
                meanDraftField = value;
                NotifyPropertyChanged("MeanDraft");
            }
        }

        private LengthMeasure meanDraftField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Pump Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pumpOp", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Pump Component Schema")]
    public partial class PumpOp : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


		/// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 


        /// <summary>
        /// This is a pointer to the corresponding pump on the rig. 
        /// </summary>
		[XmlElement("pump")]

        public RefPositiveCount Pump {
            get {
                return pumpField;
            } 
            set {
                pumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

        private RefPositiveCount pumpField; 


        /// <summary>
        /// Type of pump operation. 
        /// </summary>
		[XmlElement("typeOperation")]

        public PumpOpType? TypeOperation {
            get {
                return typeOperationField;
            } 
            set {
                typeOperationField = value;
                this.TypeOperationSpecified = true;
                NotifyPropertyChanged("TypeOperation");
            }
        }

        private PumpOpType? typeOperationField; 


		/// <summary>
        /// typeOperationSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeOperationSpecified {
            get {
                return typeOperationSpecifiedField;
            } 
            set {
                typeOperationSpecifiedField = value;
                NotifyPropertyChanged("TypeOperationSpecified");
            }
        }

        private Boolean typeOperationSpecifiedField; 


        /// <summary>
        /// Liner size. 
        /// </summary>
		[XmlElement("idLiner")]

        public LengthMeasure LinerSize {
            get {
                return idLinerField;
            } 
            set {
                idLinerField = value;
                NotifyPropertyChanged("LinerSize");
            }
        }

        private LengthMeasure idLinerField; 


        /// <summary>
        /// Stroke Length. 
        /// </summary>
		[XmlElement("lenStroke")]

        public LengthMeasure LenStroke {
            get {
                return lenStrokeField;
            } 
            set {
                lenStrokeField = value;
                NotifyPropertyChanged("LenStroke");
            }
        }

        private LengthMeasure lenStrokeField; 


        /// <summary>
        /// Pump rate (Strokes per minute). 
        /// </summary>
		[XmlElement("rateStroke")]

        public AnglePerTimeMeasure RateStroke {
            get {
                return rateStrokeField;
            } 
            set {
                rateStrokeField = value;
                NotifyPropertyChanged("RateStroke");
            }
        }

        private AnglePerTimeMeasure rateStrokeField; 


        /// <summary>
        /// Pump pressure recorded. 
        /// </summary>
		[XmlElement("pressure")]

        public PressureMeasure Pressure {
            get {
                return pressureField;
            } 
            set {
                pressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure pressureField; 


        /// <summary>
        /// Pump efficiency. 
        /// </summary>
		[XmlElement("pcEfficiency")]

        public RelativePowerMeasure PercentEfficiency {
            get {
                return pcEfficiencyField;
            } 
            set {
                pcEfficiencyField = value;
                NotifyPropertyChanged("PercentEfficiency");
            }
        }

        private RelativePowerMeasure pcEfficiencyField; 


        /// <summary>
        /// Pump output (incl. for efficiency). 
        /// </summary>
		[XmlElement("pumpOutput")]

        public VolumeFlowRateMeasure PumpOutput {
            get {
                return pumpOutputField;
            } 
            set {
                pumpOutputField = value;
                NotifyPropertyChanged("PumpOutput");
            }
        }

        private VolumeFlowRateMeasure pumpOutputField; 


        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[XmlElement("mdBit")]

        public MeasuredDepthCoord MDBit {
            get {
                return mdBitField;
            } 
            set {
                mdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord mdBitField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Shaker Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shakerOp", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Shaker Component Schema")]
    public partial class ShakerOp : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A pointer to the shaker that is characterized by this report. 
        /// </summary>
		[XmlElement("shaker")]

        public RefNameString Shaker {
            get {
                return shakerField;
            } 
            set {
                shakerField = value;
                NotifyPropertyChanged("Shaker");
            }
        }

        private RefNameString shakerField; 


        /// <summary>
        /// Hole measured depth at time of measurement. 
        /// </summary>
		[XmlElement("mdHole")]

        public MeasuredDepthCoord MDHole {
            get {
                return mdHoleField;
            } 
            set {
                mdHoleField = value;
                NotifyPropertyChanged("MDHole");
            }
        }

        private MeasuredDepthCoord mdHoleField; 


        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


		/// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 


        /// <summary>
        /// Hours run for this operation. 
        /// </summary>
		[XmlElement("hoursRun")]

        public TimeMeasure HoursRun {
            get {
                return hoursRunField;
            } 
            set {
                hoursRunField = value;
                NotifyPropertyChanged("HoursRun");
            }
        }

        private TimeMeasure hoursRunField; 


        /// <summary>
        /// Percent of screen covered by cuttings. 
        /// </summary>
		[XmlElement("pcScreenCovered")]

        public AreaPerAreaMeasure PercentScreenCovered {
            get {
                return pcScreenCoveredField;
            } 
            set {
                pcScreenCoveredField = value;
                NotifyPropertyChanged("PercentScreenCovered");
            }
        }

        private AreaPerAreaMeasure pcScreenCoveredField; 


        /// <summary>
        /// Set of shaker screen records for the operation. 
        /// </summary>
		[XmlElement("shakerScreen")]

        public ShakerScreen ShakerScreen {
            get {
                return shakerScreenField;
            } 
            set {
                shakerScreenField = value;
                NotifyPropertyChanged("ShakerScreen");
            }
        }

        private ShakerScreen shakerScreenField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Shaker Screen Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shakerScreen", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Shaker Screen Component Schema")]
    public partial class ShakerScreen : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
		[XmlElement("dTimStart")]

        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? dTimStartField; 


		/// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private Boolean dTimStartSpecifiedField; 


        /// <summary>
        /// Date and time activities were completed. 
        /// </summary>
		[XmlElement("dTimEnd")]

        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? dTimEndField; 


		/// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private Boolean dTimEndSpecifiedField; 


        /// <summary>
        /// Deck number mesh installed on. 
        /// </summary>
		[XmlElement("numDeck")]

        public Int16? NumDeck {
            get {
                return numDeckField;
            } 
            set {
                numDeckField = value;
                this.NumDeckSpecified = true;
                NotifyPropertyChanged("NumDeck");
            }
        }

        private Int16? numDeckField; 


		/// <summary>
        /// numDeckSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumDeckSpecified {
            get {
                return numDeckSpecifiedField;
            } 
            set {
                numDeckSpecifiedField = value;
                NotifyPropertyChanged("NumDeckSpecified");
            }
        }

        private Boolean numDeckSpecifiedField; 


        /// <summary>
        /// Mesh size in the X direction. 
        /// </summary>
		[XmlElement("meshX")]

        public LengthMeasure MeshX {
            get {
                return meshXField;
            } 
            set {
                meshXField = value;
                NotifyPropertyChanged("MeshX");
            }
        }

        private LengthMeasure meshXField; 


        /// <summary>
        /// Mesh size in the Y direction. 
        /// </summary>
		[XmlElement("meshY")]

        public LengthMeasure MeshY {
            get {
                return meshYField;
            } 
            set {
                meshYField = value;
                NotifyPropertyChanged("MeshY");
            }
        }

        private LengthMeasure meshYField; 


        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[XmlElement("manufacturer")]

        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 


        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[XmlElement("model")]

        public String Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String modelField; 


        /// <summary>
        /// Shaker screen cut point - the maximum size that will pass through the screen.
        /// </summary>
		[XmlElement("cutPoint")]

        public LengthMeasure CutPoint {
            get {
                return cutPointField;
            } 
            set {
                cutPointField = value;
                NotifyPropertyChanged("CutPoint");
            }
        }

        private LengthMeasure cutPointField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Health, Safety and Environment Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_hse", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Health, Safety and Environment Component Schema")]
    public partial class Hse : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Incident free duration (commonly in days). 
        /// </summary>
		[XmlElement("daysIncFree")]

        public TimeMeasure DaysIncFree {
            get {
                return daysIncFreeField;
            } 
            set {
                daysIncFreeField = value;
                NotifyPropertyChanged("DaysIncFree");
            }
        }

        private TimeMeasure daysIncFreeField; 


        /// <summary>
        /// Incident report occurrences description. 
        /// </summary>
		[XmlElement("incident")]

        public List<Incident> Incident {
            get {
                return incidentField;
            } 
            set {
                incidentField = value;
                NotifyPropertyChanged("Incident");
            }
        }

        private List<Incident> incidentField; 


        /// <summary>
        /// Last casing pressure test date and time. 
        /// </summary>
		[XmlElement("lastCsgPresTest")]

        public DateTime? LastCsgPresTest {
            get {
                return lastCsgPresTestField;
            } 
            set {
                lastCsgPresTestField = value;
                this.LastCsgPresTestSpecified = true;
                NotifyPropertyChanged("LastCsgPresTest");
            }
        }

        private DateTime? lastCsgPresTestField; 


		/// <summary>
        /// lastCsgPresTestSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LastCsgPresTestSpecified {
            get {
                return lastCsgPresTestSpecifiedField;
            } 
            set {
                lastCsgPresTestSpecifiedField = value;
                NotifyPropertyChanged("LastCsgPresTestSpecified");
            }
        }

        private Boolean lastCsgPresTestSpecifiedField; 


        /// <summary>
        /// Last casing pressure test pressure. 
        /// </summary>
		[XmlElement("presLastCsg")]

        public PressureMeasure PresLastCsg {
            get {
                return presLastCsgField;
            } 
            set {
                presLastCsgField = value;
                NotifyPropertyChanged("PresLastCsg");
            }
        }

        private PressureMeasure presLastCsgField; 


        /// <summary>
        /// Last blow out preventer pressure test. 
        /// </summary>
		[XmlElement("lastBopPresTest")]

        public DateTime? LastBopPresTest {
            get {
                return lastBopPresTestField;
            } 
            set {
                lastBopPresTestField = value;
                this.LastBopPresTestSpecified = true;
                NotifyPropertyChanged("LastBopPresTest");
            }
        }

        private DateTime? lastBopPresTestField; 


		/// <summary>
        /// lastBopPresTestSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LastBopPresTestSpecified {
            get {
                return lastBopPresTestSpecifiedField;
            } 
            set {
                lastBopPresTestSpecifiedField = value;
                NotifyPropertyChanged("LastBopPresTestSpecified");
            }
        }

        private Boolean lastBopPresTestSpecifiedField; 


        /// <summary>
        /// Next blow out preventer pressure test. 
        /// </summary>
		[XmlElement("nextBopPresTest")]

        public DateTime? NextBopPresTest {
            get {
                return nextBopPresTestField;
            } 
            set {
                nextBopPresTestField = value;
                this.NextBopPresTestSpecified = true;
                NotifyPropertyChanged("NextBopPresTest");
            }
        }

        private DateTime? nextBopPresTestField; 


		/// <summary>
        /// nextBopPresTestSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NextBopPresTestSpecified {
            get {
                return nextBopPresTestSpecifiedField;
            } 
            set {
                nextBopPresTestSpecifiedField = value;
                NotifyPropertyChanged("NextBopPresTestSpecified");
            }
        }

        private Boolean nextBopPresTestSpecifiedField; 


        /// <summary>
        /// Standpipe manifold pressure tested to. 
        /// </summary>
		[XmlElement("presStdPipe")]

        public PressureMeasure PresStdPipe {
            get {
                return presStdPipeField;
            } 
            set {
                presStdPipeField = value;
                NotifyPropertyChanged("PresStdPipe");
            }
        }

        private PressureMeasure presStdPipeField; 


        /// <summary>
        /// Kelly hose pressure tested to. 
        /// </summary>
		[XmlElement("presKellyHose")]

        public PressureMeasure PresKellyHose {
            get {
                return presKellyHoseField;
            } 
            set {
                presKellyHoseField = value;
                NotifyPropertyChanged("PresKellyHose");
            }
        }

        private PressureMeasure presKellyHoseField; 


        /// <summary>
        /// Blow out preventer diverter pressure tested to. 
        /// </summary>
		[XmlElement("presDiverter")]

        public PressureMeasure PresDiverter {
            get {
                return presDiverterField;
            } 
            set {
                presDiverterField = value;
                NotifyPropertyChanged("PresDiverter");
            }
        }

        private PressureMeasure presDiverterField; 


        /// <summary>
        /// Blow out preventer annular preventer pressure tested to. 
        /// </summary>
		[XmlElement("presAnnular")]

        public PressureMeasure PresAnnular {
            get {
                return presAnnularField;
            } 
            set {
                presAnnularField = value;
                NotifyPropertyChanged("PresAnnular");
            }
        }

        private PressureMeasure presAnnularField; 


        /// <summary>
        /// Blow out preventer ram pressure tested to. 
        /// </summary>
		[XmlElement("presRams")]

        public PressureMeasure PresRams {
            get {
                return presRamsField;
            } 
            set {
                presRamsField = value;
                NotifyPropertyChanged("PresRams");
            }
        }

        private PressureMeasure presRamsField; 


        /// <summary>
        /// Choke line pressure tested to. 
        /// </summary>
		[XmlElement("presChokeLine")]

        public PressureMeasure PresChokeLine {
            get {
                return presChokeLineField;
            } 
            set {
                presChokeLineField = value;
                NotifyPropertyChanged("PresChokeLine");
            }
        }

        private PressureMeasure presChokeLineField; 


        /// <summary>
        /// Choke line manifold pressure tested to. 
        /// </summary>
		[XmlElement("presChokeMan")]

        public PressureMeasure PresChokeMan {
            get {
                return presChokeManField;
            } 
            set {
                presChokeManField = value;
                NotifyPropertyChanged("PresChokeMan");
            }
        }

        private PressureMeasure presChokeManField; 


        /// <summary>
        /// Last fire or boat drill. 
        /// </summary>
		[XmlElement("lastFireBoatDrill")]

        public DateTime? LastFireBoatDrill {
            get {
                return lastFireBoatDrillField;
            } 
            set {
                lastFireBoatDrillField = value;
                this.LastFireBoatDrillSpecified = true;
                NotifyPropertyChanged("LastFireBoatDrill");
            }
        }

        private DateTime? lastFireBoatDrillField; 


		/// <summary>
        /// lastFireBoatDrillSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LastFireBoatDrillSpecified {
            get {
                return lastFireBoatDrillSpecifiedField;
            } 
            set {
                lastFireBoatDrillSpecifiedField = value;
                NotifyPropertyChanged("LastFireBoatDrillSpecified");
            }
        }

        private Boolean lastFireBoatDrillSpecifiedField; 


        /// <summary>
        /// Last abandonment drill. 
        /// </summary>
		[XmlElement("lastAbandonDrill")]

        public DateTime? LastAbandonDrill {
            get {
                return lastAbandonDrillField;
            } 
            set {
                lastAbandonDrillField = value;
                this.LastAbandonDrillSpecified = true;
                NotifyPropertyChanged("LastAbandonDrill");
            }
        }

        private DateTime? lastAbandonDrillField; 


		/// <summary>
        /// lastAbandonDrillSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LastAbandonDrillSpecified {
            get {
                return lastAbandonDrillSpecifiedField;
            } 
            set {
                lastAbandonDrillSpecifiedField = value;
                NotifyPropertyChanged("LastAbandonDrillSpecified");
            }
        }

        private Boolean lastAbandonDrillSpecifiedField; 


        /// <summary>
        /// Last rig inspection/check. 
        /// </summary>
		[XmlElement("lastRigInspection")]

        public DateTime? LastRigInspection {
            get {
                return lastRigInspectionField;
            } 
            set {
                lastRigInspectionField = value;
                this.LastRigInspectionSpecified = true;
                NotifyPropertyChanged("LastRigInspection");
            }
        }

        private DateTime? lastRigInspectionField; 


		/// <summary>
        /// lastRigInspectionSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LastRigInspectionSpecified {
            get {
                return lastRigInspectionSpecifiedField;
            } 
            set {
                lastRigInspectionSpecifiedField = value;
                NotifyPropertyChanged("LastRigInspectionSpecified");
            }
        }

        private Boolean lastRigInspectionSpecifiedField; 


        /// <summary>
        /// Last safety meeting. 
        /// </summary>
		[XmlElement("lastSafetyMeeting")]

        public DateTime? LastSafetyMeeting {
            get {
                return lastSafetyMeetingField;
            } 
            set {
                lastSafetyMeetingField = value;
                this.LastSafetyMeetingSpecified = true;
                NotifyPropertyChanged("LastSafetyMeeting");
            }
        }

        private DateTime? lastSafetyMeetingField; 


		/// <summary>
        /// lastSafetyMeetingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LastSafetyMeetingSpecified {
            get {
                return lastSafetyMeetingSpecifiedField;
            } 
            set {
                lastSafetyMeetingSpecifiedField = value;
                NotifyPropertyChanged("LastSafetyMeetingSpecified");
            }
        }

        private Boolean lastSafetyMeetingSpecifiedField; 


        /// <summary>
        /// Last safety inspection. 
        /// </summary>
		[XmlElement("lastSafetyInspection")]

        public DateTime? LastSafetyInspection {
            get {
                return lastSafetyInspectionField;
            } 
            set {
                lastSafetyInspectionField = value;
                this.LastSafetyInspectionSpecified = true;
                NotifyPropertyChanged("LastSafetyInspection");
            }
        }

        private DateTime? lastSafetyInspectionField; 


		/// <summary>
        /// lastSafetyInspectionSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LastSafetyInspectionSpecified {
            get {
                return lastSafetyInspectionSpecifiedField;
            } 
            set {
                lastSafetyInspectionSpecifiedField = value;
                NotifyPropertyChanged("LastSafetyInspectionSpecified");
            }
        }

        private Boolean lastSafetyInspectionSpecifiedField; 


        /// <summary>
        /// Last trip drill. 
        /// </summary>
		[XmlElement("lastTripDrill")]

        public DateTime? LastTripDrill {
            get {
                return lastTripDrillField;
            } 
            set {
                lastTripDrillField = value;
                this.LastTripDrillSpecified = true;
                NotifyPropertyChanged("LastTripDrill");
            }
        }

        private DateTime? lastTripDrillField; 


		/// <summary>
        /// lastTripDrillSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LastTripDrillSpecified {
            get {
                return lastTripDrillSpecifiedField;
            } 
            set {
                lastTripDrillSpecifiedField = value;
                NotifyPropertyChanged("LastTripDrillSpecified");
            }
        }

        private Boolean lastTripDrillSpecifiedField; 


        /// <summary>
        /// Last diverter drill. 
        /// </summary>
		[XmlElement("lastDiverterDrill")]

        public DateTime? LastDiverterDrill {
            get {
                return lastDiverterDrillField;
            } 
            set {
                lastDiverterDrillField = value;
                this.LastDiverterDrillSpecified = true;
                NotifyPropertyChanged("LastDiverterDrill");
            }
        }

        private DateTime? lastDiverterDrillField; 


		/// <summary>
        /// lastDiverterDrillSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LastDiverterDrillSpecified {
            get {
                return lastDiverterDrillSpecifiedField;
            } 
            set {
                lastDiverterDrillSpecifiedField = value;
                NotifyPropertyChanged("LastDiverterDrillSpecified");
            }
        }

        private Boolean lastDiverterDrillSpecifiedField; 


        /// <summary>
        /// Last blow out preventer drill. 
        /// </summary>
		[XmlElement("lastBopDrill")]

        public DateTime? LastBopDrill {
            get {
                return lastBopDrillField;
            } 
            set {
                lastBopDrillField = value;
                this.LastBopDrillSpecified = true;
                NotifyPropertyChanged("LastBopDrill");
            }
        }

        private DateTime? lastBopDrillField; 


		/// <summary>
        /// lastBopDrillSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LastBopDrillSpecified {
            get {
                return lastBopDrillSpecifiedField;
            } 
            set {
                lastBopDrillSpecifiedField = value;
                NotifyPropertyChanged("LastBopDrillSpecified");
            }
        }

        private Boolean lastBopDrillSpecifiedField; 


        /// <summary>
        /// Governmental regulatory inspection agency inspection? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("regAgencyInsp")]

        public Boolean? RegAgencyInsp {
            get {
                return regAgencyInspField;
            } 
            set {
                regAgencyInspField = value;
                this.RegAgencyInspSpecified = true;
                NotifyPropertyChanged("RegAgencyInsp");
            }
        }

        private Boolean? regAgencyInspField; 


		/// <summary>
        /// regAgencyInspSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean RegAgencyInspSpecified {
            get {
                return regAgencyInspSpecifiedField;
            } 
            set {
                regAgencyInspSpecifiedField = value;
                NotifyPropertyChanged("RegAgencyInspSpecified");
            }
        }

        private Boolean regAgencyInspSpecifiedField; 


        /// <summary>
        /// Inspection non-compliance notice served? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("nonComplianceIssued")]

        public Boolean? NonComplianceIssued {
            get {
                return nonComplianceIssuedField;
            } 
            set {
                nonComplianceIssuedField = value;
                this.NonComplianceIssuedSpecified = true;
                NotifyPropertyChanged("NonComplianceIssued");
            }
        }

        private Boolean? nonComplianceIssuedField; 


		/// <summary>
        /// nonComplianceIssuedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NonComplianceIssuedSpecified {
            get {
                return nonComplianceIssuedSpecifiedField;
            } 
            set {
                nonComplianceIssuedSpecifiedField = value;
                NotifyPropertyChanged("NonComplianceIssuedSpecified");
            }
        }

        private Boolean nonComplianceIssuedSpecifiedField; 


        /// <summary>
        /// Number of Health, Safety and Environment incidents reported. 
        /// </summary>
		[XmlElement("numStopCards")]

        public Int16? NumStopCards {
            get {
                return numStopCardsField;
            } 
            set {
                numStopCardsField = value;
                this.NumStopCardsSpecified = true;
                NotifyPropertyChanged("NumStopCards");
            }
        }

        private Int16? numStopCardsField; 


		/// <summary>
        /// numStopCardsSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumStopCardsSpecified {
            get {
                return numStopCardsSpecifiedField;
            } 
            set {
                numStopCardsSpecifiedField = value;
                NotifyPropertyChanged("NumStopCardsSpecified");
            }
        }

        private Boolean numStopCardsSpecifiedField; 


        /// <summary>
        /// Daily whole mud discarded. 
        /// </summary>
		[XmlElement("fluidDischarged")]

        public VolumeMeasure FluidDischarged {
            get {
                return fluidDischargedField;
            } 
            set {
                fluidDischargedField = value;
                NotifyPropertyChanged("FluidDischarged");
            }
        }

        private VolumeMeasure fluidDischargedField; 


        /// <summary>
        /// Volume of cuttings discharged. 
        /// </summary>
		[XmlElement("volCtgDischarged")]

        public VolumeMeasure VolCtgDischarged {
            get {
                return volCtgDischargedField;
            } 
            set {
                volCtgDischargedField = value;
                NotifyPropertyChanged("VolCtgDischarged");
            }
        }

        private VolumeMeasure volCtgDischargedField; 


        /// <summary>
        /// Oil on cuttings daily discharge. 
        /// </summary>
		[XmlElement("volOilCtgDischarge")]

        public VolumeMeasure VolOilCtgDischarge {
            get {
                return volOilCtgDischargeField;
            } 
            set {
                volOilCtgDischargeField = value;
                NotifyPropertyChanged("VolOilCtgDischarge");
            }
        }

        private VolumeMeasure volOilCtgDischargeField; 


        /// <summary>
        /// Volume of sanitary waste discharged. 
        /// </summary>
		[XmlElement("wasteDischarged")]

        public VolumeMeasure WasteDischarged {
            get {
                return wasteDischargedField;
            } 
            set {
                wasteDischargedField = value;
                NotifyPropertyChanged("WasteDischarged");
            }
        }

        private VolumeMeasure wasteDischargedField; 


        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations HSE Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_incident", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations HSE Component Schema")]
    public partial class Incident : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


        /// <summary>
        /// Name of person who prepared incident report. 
        /// </summary>
		[XmlElement("reporter")]

        public String Reporter {
            get {
                return reporterField;
            } 
            set {
                reporterField = value;
                NotifyPropertyChanged("Reporter");
            }
        }

        private String reporterField; 


        /// <summary>
        /// Number of personnel with minor injuries. 
        /// </summary>
		[XmlElement("numMinorInjury")]

        public Int16? NumMinorInjury {
            get {
                return numMinorInjuryField;
            } 
            set {
                numMinorInjuryField = value;
                this.NumMinorInjurySpecified = true;
                NotifyPropertyChanged("NumMinorInjury");
            }
        }

        private Int16? numMinorInjuryField; 


		/// <summary>
        /// numMinorInjurySpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumMinorInjurySpecified {
            get {
                return numMinorInjurySpecifiedField;
            } 
            set {
                numMinorInjurySpecifiedField = value;
                NotifyPropertyChanged("NumMinorInjurySpecified");
            }
        }

        private Boolean numMinorInjurySpecifiedField; 


        /// <summary>
        /// Number of personnel with major injuries. 
        /// </summary>
		[XmlElement("numMajorInjury")]

        public Int16? NumMajorInjury {
            get {
                return numMajorInjuryField;
            } 
            set {
                numMajorInjuryField = value;
                this.NumMajorInjurySpecified = true;
                NotifyPropertyChanged("NumMajorInjury");
            }
        }

        private Int16? numMajorInjuryField; 


		/// <summary>
        /// numMajorInjurySpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumMajorInjurySpecified {
            get {
                return numMajorInjurySpecifiedField;
            } 
            set {
                numMajorInjurySpecifiedField = value;
                NotifyPropertyChanged("NumMajorInjurySpecified");
            }
        }

        private Boolean numMajorInjurySpecifiedField; 


        /// <summary>
        /// Number of personnel killed in incident. 
        /// </summary>
		[XmlElement("numFatality")]

        public Int16? NumFatality {
            get {
                return numFatalityField;
            } 
            set {
                numFatalityField = value;
                this.NumFatalitySpecified = true;
                NotifyPropertyChanged("NumFatality");
            }
        }

        private Int16? numFatalityField; 


		/// <summary>
        /// numFatalitySpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumFatalitySpecified {
            get {
                return numFatalitySpecifiedField;
            } 
            set {
                numFatalitySpecifiedField = value;
                NotifyPropertyChanged("NumFatalitySpecified");
            }
        }

        private Boolean numFatalitySpecifiedField; 


        /// <summary>
        /// Near miss incident occurrence? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("isNearMiss")]

        public Boolean? IsNearMiss {
            get {
                return isNearMissField;
            } 
            set {
                isNearMissField = value;
                this.IsNearMissSpecified = true;
                NotifyPropertyChanged("IsNearMiss");
            }
        }

        private Boolean? isNearMissField; 


		/// <summary>
        /// isNearMissSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean IsNearMissSpecified {
            get {
                return isNearMissSpecifiedField;
            } 
            set {
                isNearMissSpecifiedField = value;
                NotifyPropertyChanged("IsNearMissSpecified");
            }
        }

        private Boolean isNearMissSpecifiedField; 


        /// <summary>
        /// Location description. 
        /// </summary>
		[XmlElement("descLocation")]

        public String DescLocation {
            get {
                return descLocationField;
            } 
            set {
                descLocationField = value;
                NotifyPropertyChanged("DescLocation");
            }
        }

        private String descLocationField; 


        /// <summary>
        /// Accident description. 
        /// </summary>
		[XmlElement("descAccident")]

        public String DescAccident {
            get {
                return descAccidentField;
            } 
            set {
                descAccidentField = value;
                NotifyPropertyChanged("DescAccident");
            }
        }

        private String descAccidentField; 


        /// <summary>
        /// Remedial action description. 
        /// </summary>
		[XmlElement("remedialActionDesc")]

        public String RemedialActionDesc {
            get {
                return remedialActionDescField;
            } 
            set {
                remedialActionDescField = value;
                NotifyPropertyChanged("RemedialActionDesc");
            }
        }

        private String remedialActionDescField; 


        /// <summary>
        /// Cause description. 
        /// </summary>
		[XmlElement("causeDesc")]

        public String CauseDesc {
            get {
                return causeDescField;
            } 
            set {
                causeDescField = value;
                NotifyPropertyChanged("CauseDesc");
            }
        }

        private String causeDescField; 


        /// <summary>
        /// Number of hours lost due to incident. 
        /// </summary>
		[XmlElement("eTimLostGross")]

        public TimeMeasure ETimeLostGross {
            get {
                return eTimLostGrossField;
            } 
            set {
                eTimLostGrossField = value;
                NotifyPropertyChanged("ETimeLostGross");
            }
        }

        private TimeMeasure eTimLostGrossField; 


        /// <summary>
        /// Gross estimate of cost incurred due to incident. 
        /// </summary>
		[XmlElement("costLostGross")]

        public Cost CostLostGross {
            get {
                return costLostGrossField;
            } 
            set {
                costLostGrossField = value;
                NotifyPropertyChanged("CostLostGross");
            }
        }

        private Cost costLostGrossField; 


        /// <summary>
        /// Name of company that caused incident. 
        /// </summary>
		[XmlElement("responsibleCompany")]

        public String ResponsibleCompany {
            get {
                return responsibleCompanyField;
            } 
            set {
                responsibleCompanyField = value;
                NotifyPropertyChanged("ResponsibleCompany");
            }
        }

        private String responsibleCompanyField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Personnel Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_personnel", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Personnel Component Schema")]
    public partial class Personnel : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Name of company. 
        /// </summary>
		[XmlElement("company")]

        public String Company {
            get {
                return companyField;
            } 
            set {
                companyField = value;
                NotifyPropertyChanged("Company");
            }
        }

        private String companyField; 


        /// <summary>
        /// Service provided by the company. 
        /// </summary>
		[XmlElement("typeService")]

        public String TypeService {
            get {
                return typeServiceField;
            } 
            set {
                typeServiceField = value;
                NotifyPropertyChanged("TypeService");
            }
        }

        private String typeServiceField; 


        /// <summary>
        /// Number of people on board for that company. 
        /// </summary>
		[XmlElement("numPeople")]

        public Int16? NumPeople {
            get {
                return numPeopleField;
            } 
            set {
                numPeopleField = value;
                this.NumPeopleSpecified = true;
                NotifyPropertyChanged("NumPeople");
            }
        }

        private Int16? numPeopleField; 


		/// <summary>
        /// numPeopleSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumPeopleSpecified {
            get {
                return numPeopleSpecifiedField;
            } 
            set {
                numPeopleSpecifiedField = value;
                NotifyPropertyChanged("NumPeopleSpecified");
            }
        }

        private Boolean numPeopleSpecifiedField; 


        /// <summary>
        /// Total time worked by the company (commonly in hours). 
        /// </summary>
		[XmlElement("totalTime")]

        public TimeMeasure TotalTime {
            get {
                return totalTimeField;
            } 
            set {
                totalTimeField = value;
                NotifyPropertyChanged("TotalTime");
            }
        }

        private TimeMeasure totalTimeField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Support Craft Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_supportCraft", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Support Craft Component Schema")]
    public partial class SupportCraft : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for support craft. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Type of support craft. 
        /// </summary>
		[XmlElement("typeSuppCraft")]

        public SupportCraftType? TypeSuppCraft {
            get {
                return typeSuppCraftField;
            } 
            set {
                typeSuppCraftField = value;
                this.TypeSuppCraftSpecified = true;
                NotifyPropertyChanged("TypeSuppCraft");
            }
        }

        private SupportCraftType? typeSuppCraftField; 


		/// <summary>
        /// typeSuppCraftSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeSuppCraftSpecified {
            get {
                return typeSuppCraftSpecifiedField;
            } 
            set {
                typeSuppCraftSpecifiedField = value;
                NotifyPropertyChanged("TypeSuppCraftSpecified");
            }
        }

        private Boolean typeSuppCraftSpecifiedField; 


        /// <summary>
        /// Date and time when vehicle arrived at rig site. 
        /// </summary>
		[XmlElement("dTimArrived")]

        public DateTime? DateTimeArrived {
            get {
                return dTimArrivedField;
            } 
            set {
                dTimArrivedField = value;
                this.DateTimeArrivedSpecified = true;
                NotifyPropertyChanged("DateTimeArrived");
            }
        }

        private DateTime? dTimArrivedField; 


		/// <summary>
        /// dTimArrivedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeArrivedSpecified {
            get {
                return dTimArrivedSpecifiedField;
            } 
            set {
                dTimArrivedSpecifiedField = value;
                NotifyPropertyChanged("DateTimeArrivedSpecified");
            }
        }

        private Boolean dTimArrivedSpecifiedField; 


        /// <summary>
        /// Date and time when vehicle departed rig site. 
        /// </summary>
		[XmlElement("dTimDeparted")]

        public DateTime? DateTimeDeparted {
            get {
                return dTimDepartedField;
            } 
            set {
                dTimDepartedField = value;
                this.DateTimeDepartedSpecified = true;
                NotifyPropertyChanged("DateTimeDeparted");
            }
        }

        private DateTime? dTimDepartedField; 


		/// <summary>
        /// dTimDepartedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeDepartedSpecified {
            get {
                return dTimDepartedSpecifiedField;
            } 
            set {
                dTimDepartedSpecifiedField = value;
                NotifyPropertyChanged("DateTimeDepartedSpecified");
            }
        }

        private Boolean dTimDepartedSpecifiedField; 


        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Operations Weather Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_weather", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Operations Weather Component Schema")]
    public partial class Weather : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


        /// <summary>
        /// Name of company that supplied the data. 
        /// </summary>
		[XmlElement("agency")]

        public String Agency {
            get {
                return agencyField;
            } 
            set {
                agencyField = value;
                NotifyPropertyChanged("Agency");
            }
        }

        private String agencyField; 


        /// <summary>
        /// Atmospheric pressure. 
        /// </summary>
		[XmlElement("barometricPressure")]

        public PressureMeasure BarometricPressure {
            get {
                return barometricPressureField;
            } 
            set {
                barometricPressureField = value;
                NotifyPropertyChanged("BarometricPressure");
            }
        }

        private PressureMeasure barometricPressureField; 


        /// <summary>
        /// The Beaufort wind scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th Century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions. 
        /// </summary>
		[XmlElement("beaufortScaleNumber")]

        public Int16? BeaufortScaleNumber {
            get {
                return beaufortScaleNumberField;
            } 
            set {
                beaufortScaleNumberField = value;
                this.BeaufortScaleNumberSpecified = true;
                NotifyPropertyChanged("BeaufortScaleNumber");
            }
        }

        private Int16? beaufortScaleNumberField; 


		/// <summary>
        /// beaufortScaleNumberSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean BeaufortScaleNumberSpecified {
            get {
                return beaufortScaleNumberSpecifiedField;
            } 
            set {
                beaufortScaleNumberSpecifiedField = value;
                NotifyPropertyChanged("BeaufortScaleNumberSpecified");
            }
        }

        private Boolean beaufortScaleNumberSpecifiedField; 


        /// <summary>
        /// Minimum temperature above ground. Temperature of the atmosphere. 
        /// </summary>
		[XmlElement("tempSurfaceMn")]

        public ThermodynamicTemperatureMeasure TempSurfaceMin {
            get {
                return tempSurfaceMnField;
            } 
            set {
                tempSurfaceMnField = value;
                NotifyPropertyChanged("TempSurfaceMin");
            }
        }

        private ThermodynamicTemperatureMeasure tempSurfaceMnField; 


        /// <summary>
        /// Maximum temperature above ground. 
        /// </summary>
		[XmlElement("tempSurfaceMx")]

        public ThermodynamicTemperatureMeasure TempSurfaceMax {
            get {
                return tempSurfaceMxField;
            } 
            set {
                tempSurfaceMxField = value;
                NotifyPropertyChanged("TempSurfaceMax");
            }
        }

        private ThermodynamicTemperatureMeasure tempSurfaceMxField; 


        /// <summary>
        /// A measure of the combined chilling effect of wind and low temperature on living things, also named chill factor, e.g., according to US weather service table, an air temperature of 30 degF with a 10 mi/h corresponds to a windchill of 22 degF. 
        /// </summary>
		[XmlElement("tempWindChill")]

        public ThermodynamicTemperatureMeasure TempWindChill {
            get {
                return tempWindChillField;
            } 
            set {
                tempWindChillField = value;
                NotifyPropertyChanged("TempWindChill");
            }
        }

        private ThermodynamicTemperatureMeasure tempWindChillField; 


        /// <summary>
        /// Sea temperature. 
        /// </summary>
		[XmlElement("tempsea")]

        public ThermodynamicTemperatureMeasure Tempsea {
            get {
                return tempseaField;
            } 
            set {
                tempseaField = value;
                NotifyPropertyChanged("Tempsea");
            }
        }

        private ThermodynamicTemperatureMeasure tempseaField; 


        /// <summary>
        /// Horizontal visibility. 
        /// </summary>
		[XmlElement("visibility")]

        public LengthMeasure Visibility {
            get {
                return visibilityField;
            } 
            set {
                visibilityField = value;
                NotifyPropertyChanged("Visibility");
            }
        }

        private LengthMeasure visibilityField; 


        /// <summary>
        /// The direction from which the waves are coming, measured from true north. 
        /// </summary>
		[XmlElement("aziWave")]

        public PlaneAngleMeasure AziWave {
            get {
                return aziWaveField;
            } 
            set {
                aziWaveField = value;
                NotifyPropertyChanged("AziWave");
            }
        }

        private PlaneAngleMeasure aziWaveField; 


        /// <summary>
        /// Average height of the waves. 
        /// </summary>
		[XmlElement("htWave")]

        public LengthMeasure HeightWave {
            get {
                return htWaveField;
            } 
            set {
                htWaveField = value;
                NotifyPropertyChanged("HeightWave");
            }
        }

        private LengthMeasure htWaveField; 


        /// <summary>
        /// An average of the higher 1/3 of the wave heights passing during a sample period (typically 20 to 30 minutes). 
        /// </summary>
		[XmlElement("significantWave")]

        public LengthMeasure SignificantWave {
            get {
                return significantWaveField;
            } 
            set {
                significantWaveField = value;
                NotifyPropertyChanged("SignificantWave");
            }
        }

        private LengthMeasure significantWaveField; 


        /// <summary>
        /// The maximum wave height.
        /// </summary>
		[XmlElement("maxWave")]

        public LengthMeasure MaxWave {
            get {
                return maxWaveField;
            } 
            set {
                maxWaveField = value;
                NotifyPropertyChanged("MaxWave");
            }
        }

        private LengthMeasure maxWaveField; 


        /// <summary>
        /// The elapsed time between the passing of two wave tops. 
        /// </summary>
		[XmlElement("periodWave")]

        public TimeMeasure PeriodWave {
            get {
                return periodWaveField;
            } 
            set {
                periodWaveField = value;
                NotifyPropertyChanged("PeriodWave");
            }
        }

        private TimeMeasure periodWaveField; 


        /// <summary>
        /// The direction from which the wind is blowing, measured from true north. 
        /// </summary>
		[XmlElement("aziWind")]

        public PlaneAngleMeasure AziWind {
            get {
                return aziWindField;
            } 
            set {
                aziWindField = value;
                NotifyPropertyChanged("AziWind");
            }
        }

        private PlaneAngleMeasure aziWindField; 


        /// <summary>
        /// Wind speed. 
        /// </summary>
		[XmlElement("velWind")]

        public VelocityMeasure VelWind {
            get {
                return velWindField;
            } 
            set {
                velWindField = value;
                NotifyPropertyChanged("VelWind");
            }
        }

        private VelocityMeasure velWindField; 


        /// <summary>
        /// Type of precipitation. 
        /// </summary>
		[XmlElement("typePrecip")]

        public String TypePrecip {
            get {
                return typePrecipField;
            } 
            set {
                typePrecipField = value;
                NotifyPropertyChanged("TypePrecip");
            }
        }

        private String typePrecipField; 


        /// <summary>
        /// Amount of precipitation. 
        /// </summary>
		[XmlElement("amtPrecip")]

        public LengthMeasure AmtPrecip {
            get {
                return amtPrecipField;
            } 
            set {
                amtPrecipField = value;
                NotifyPropertyChanged("AmtPrecip");
            }
        }

        private LengthMeasure amtPrecipField; 


        /// <summary>
        /// Description of cloud cover. 
        /// </summary>
		[XmlElement("coverCloud")]

        public String CoverCloud {
            get {
                return coverCloudField;
            } 
            set {
                coverCloudField = value;
                NotifyPropertyChanged("CoverCloud");
            }
        }

        private String coverCloudField; 


        /// <summary>
        /// Height of cloud cover. 
        /// </summary>
		[XmlElement("ceilingCloud")]

        public LengthMeasure CeilingCloud {
            get {
                return ceilingCloudField;
            } 
            set {
                ceilingCloudField = value;
                NotifyPropertyChanged("CeilingCloud");
            }
        }

        private LengthMeasure ceilingCloudField; 


        /// <summary>
        /// Current speed. 
        /// </summary>
		[XmlElement("currentSea")]

        public VelocityMeasure CurrentSea {
            get {
                return currentSeaField;
            } 
            set {
                currentSeaField = value;
                NotifyPropertyChanged("CurrentSea");
            }
        }

        private VelocityMeasure currentSeaField; 


        /// <summary>
        /// Azimuth of current. 
        /// </summary>
		[XmlElement("aziCurrentSea")]

        public PlaneAngleMeasure AziCurrentSea {
            get {
                return aziCurrentSeaField;
            } 
            set {
                aziCurrentSeaField = value;
                NotifyPropertyChanged("AziCurrentSea");
            }
        }

        private PlaneAngleMeasure aziCurrentSeaField; 


        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_realtimes xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("realtimes", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_realtimes xsd type.")]
    public partial class RealtimeList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single realtime. 
        /// </summary>
		[XmlElement("realtime")]

        public List<Realtime> Realtime {
            get {
                return realtimeField;
            } 
            set {
                realtimeField = value;
                NotifyPropertyChanged("Realtime");
            }
        }

        private List<Realtime> realtimeField; 


        /// <summary>
        /// A single realtime. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Realtime;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Realtime object. Realtime data is not persistent data.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_realtime", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Realtime object. Realtime data is not persistent data.")]
    public partial class Realtime : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The time index for the realtime object if the interval type is time-based. It is the default time index for all data in the realtime object. Both dTim and md can be overridden at the channel level. This value should be given when "dTim" is given with any channel.
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


		/// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 


        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. It is the default depth index for all data in the realtime object. Both dTim and md can be overridden at the channel level. This value should be given when "md" is given with any channel.
        /// </summary>
		[XmlElement("md")]

        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 


        /// <summary>
        /// The one-based sequence of realtime messages for one subscription. The first message for a subscription should have a sequence number of one and each subsequent message for that subscription should increment by one.
        /// </summary>
		[XmlElement("sequence")]

        public Int32? Sequence {
            get {
                return sequenceField;
            } 
            set {
                sequenceField = value;
                NotifyPropertyChanged("Sequence");
            }
        }

        private Int32? sequenceField; 


        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
		[XmlElement("activityCode")]

        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set {
                activityCodeField = value;
                this.ActivityCodeSpecified = true;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private ActivityCode activityCodeField; 


		/// <summary>
        /// activityCodeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ActivityCodeSpecified {
            get {
                return activityCodeSpecifiedField;
            } 
            set {
                activityCodeSpecifiedField = value;
                NotifyPropertyChanged("ActivityCodeSpecified");
            }
        }

        private Boolean activityCodeSpecifiedField; 


        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
		[XmlElement("detailActivity")]

        public String DetailActivity {
            get {
                return detailActivityField;
            } 
            set {
                detailActivityField = value;
                NotifyPropertyChanged("DetailActivity");
            }
        }

        private String detailActivityField; 


        /// <summary>
        /// The group name of the channels in this realtime. For example, a publisher can publish data from the mudlogger, drilling and MWD systems at the same time. The drilling and mudlogger systems could have channels with the same mnemonic. The group name is used to distinguish between curves from these different source systems.
        /// </summary>
		[XmlElement("dataGroup")]

        public String DataGroup {
            get {
                return dataGroupField;
            } 
            set {
                dataGroupField = value;
                NotifyPropertyChanged("DataGroup");
            }
        }

        private String dataGroupField; 


        /// <summary>
        /// The information which is constant for all realtimes. This will only be sent with the first realtime for a subscription, when a retransmit is requested or when the header is updated (e.g., when more channels are added).
        /// </summary>
		[XmlElement("realtimeHeader")]

        public RealtimeHeader RealtimeHeader {
            get {
                return realtimeHeaderField;
            } 
            set {
                realtimeHeaderField = value;
                NotifyPropertyChanged("RealtimeHeader");
            }
        }

        private RealtimeHeader realtimeHeaderField; 


        /// <summary>
        /// The data associated with a (de-multiplexed) channel.
        /// </summary>
		[XmlElement("channel")]

        public List<Channel> Channel {
            get {
                return channelField;
            } 
            set {
                channelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private List<Channel> channelField; 


        /// <summary>
        /// The multiplexed data associated with a channel.
        /// </summary>
		[XmlElement("record")]

        public List<Record> Record {
            get {
                return recordField;
            } 
            set {
                recordField = value;
                NotifyPropertyChanged("Record");
            }
        }

        private List<Record> recordField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// Unique identifier for the Subscription. This matches the value of the idSub attribute that is returned in the Subscription Request. The value is only optional so that the a realtime can be retrieved using the Store interface (possibly after the subscription has retired). Otherwise, the value must be included when the realtime is returned as a result of a subscription.
        /// </summary>
        [XmlAttribute("idSub")]

        public String IdSub {
            get {
                return idSubField;
            } 
            set {
                idSubField = value;
                NotifyPropertyChanged("IdSub");
            }
        }

        private String idSubField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML realtime header component object. The header is only transmitted with the first realtime, when the header changes or when a retransmit is requested.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_realtimeHeader", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML realtime header component object. The header is only transmitted with the first realtime, when the header changes or when a retransmit is requested.")]
    public partial class RealtimeHeader : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the tubular. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Name of contractor who provided the service.
        /// </summary>
		[XmlElement("serviceCompany")]

        public String ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private String serviceCompanyField; 


        /// <summary>
        /// Log run number. This should normally be a number; however some legacy systems encode other information in this value.
        /// </summary>
		[XmlElement("runNumber")]

        public String RunNumber {
            get {
                return runNumberField;
            } 
            set {
                runNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private String runNumberField; 


        /// <summary>
        /// The bottom hole assembly run number associated with this log.
        /// </summary>
		[XmlElement("bhaRunNumber")]

        public Int16? BhaRunNumber {
            get {
                return bhaRunNumberField;
            } 
            set {
                bhaRunNumberField = value;
                this.BhaRunNumberSpecified = true;
                NotifyPropertyChanged("BhaRunNumber");
            }
        }

        private Int16? bhaRunNumberField; 


		/// <summary>
        /// bhaRunNumberSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean BhaRunNumberSpecified {
            get {
                return bhaRunNumberSpecifiedField;
            } 
            set {
                bhaRunNumberSpecifiedField = value;
                NotifyPropertyChanged("BhaRunNumberSpecified");
            }
        }

        private Boolean bhaRunNumberSpecifiedField; 


        /// <summary>
        /// Identifies the pass within the run.
        /// </summary>
		[XmlElement("pass")]

        public String Pass {
            get {
                return passField;
            } 
            set {
                passField = value;
                NotifyPropertyChanged("Pass");
            }
        }

        private String passField; 


        /// <summary>
        /// Date and time that the realtime was created.
        /// </summary>
		[XmlElement("creationDate")]

        public DateTime? CreationDate {
            get {
                return creationDateField;
            } 
            set {
                creationDateField = value;
                this.CreationDateSpecified = true;
                NotifyPropertyChanged("CreationDate");
            }
        }

        private DateTime? creationDateField; 


		/// <summary>
        /// creationDateSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CreationDateSpecified {
            get {
                return creationDateSpecifiedField;
            } 
            set {
                creationDateSpecifiedField = value;
                NotifyPropertyChanged("CreationDateSpecified");
            }
        }

        private Boolean creationDateSpecifiedField; 


        /// <summary>
        /// Comments about the realtime.
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// The definition of a group of channels.
        /// </summary>
		[XmlElement("groupDefinition")]

        public List<GroupDefinition> GroupDefinition {
            get {
                return groupDefinitionField;
            } 
            set {
                groupDefinitionField = value;
                NotifyPropertyChanged("GroupDefinition");
            }
        }

        private List<GroupDefinition> groupDefinitionField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML realtime group definition component object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_groupDefinition", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML realtime group definition component object.")]
    public partial class GroupDefinition : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The id of this group. The value should match a commonly agreed value.
        /// </summary>
		[XmlElement("id")]

        public String Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private String idField; 


        /// <summary>
        /// True (value of "1" or "true") indicates that this group will be represented by multiplexed data records. False (value of "0" or "false") indicates that this group will be represented by de-multiplexed data channels.
        /// </summary>
		[XmlElement("multiplexed")]

        public Boolean? Multiplexed {
            get {
                return multiplexedField;
            } 
            set {
                multiplexedField = value;
                NotifyPropertyChanged("Multiplexed");
            }
        }

        private Boolean? multiplexedField; 


        /// <summary>
        /// The depth or time interval over which the group data are requested to be derived.
        /// </summary>
		[XmlElement("interval")]

        public Interval Interval {
            get {
                return intervalField;
            } 
            set {
                intervalField = value;
                NotifyPropertyChanged("Interval");
            }
        }

        private Interval intervalField; 


        /// <summary>
        /// A pointer to the log (within the context of the current wellbore) that will be used to persist this data.
        /// </summary>
        [XmlElement("persistedAsLog")]
        public RefNameString PersistedAsLog {
            get {
                return persistedAsLogField;
            } 
            set {
                if (value != null && PersistedAsWellLogSpecified) throw new Exception("Cannot set property PersistedAsLog when property PersistedAsWellLog is already set");
                persistedAsLogField = value;
                PersistedAsLogSpecified = (value!=null);
                NotifyPropertyChanged("PersistedAsLog");
            }
        }

        private RefNameString persistedAsLogField; 
        /// <summary>
        /// Boolean to indicate if PersistedAsLog has been set. Used for serialization.
        /// </summary>
        private Boolean PersistedAsLogSpecified = false; 

        /// <summary>
        /// A pointer to the wellLog (within the context of the current wellbore) that will be used to persist this data.
        /// </summary>
        [XmlElement("persistedAsWellLog")]
        public RefNameString PersistedAsWellLog {
            get {
                return persistedAsWellLogField;
            } 
            set {
                if (value != null && PersistedAsLogSpecified) throw new Exception("Cannot set property PersistedAsWellLog when property PersistedAsLog is already set");
                persistedAsWellLogField = value;
                PersistedAsWellLogSpecified = (value!=null);
                NotifyPropertyChanged("PersistedAsWellLog");
            }
        }

        private RefNameString persistedAsWellLogField; 
        /// <summary>
        /// Boolean to indicate if PersistedAsWellLog has been set. Used for serialization.
        /// </summary>
        private Boolean PersistedAsWellLogSpecified = false; 



		/// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public ItemChoiceType? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        private ItemChoiceType? ItemElementNameField; 


        /// <summary>
        /// A comment or remark about this group.
        /// </summary>
		[XmlElement("comment")]

        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 


        /// <summary>
        /// The definition of a channel.
        /// </summary>
		[XmlElement("channelDefinition")]

        public List<ChannelDefinition> ChannelDefinition {
            get {
                return channelDefinitionField;
            } 
            set {
                channelDefinitionField = value;
                NotifyPropertyChanged("ChannelDefinition");
            }
        }

        private List<ChannelDefinition> channelDefinitionField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Realtime Channel Interval Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_interval", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Realtime Channel Interval Schema ")]
    public partial class Interval : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The type of interval.
        /// </summary>
		[XmlElement("type")]

        public IntervalType? Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private IntervalType? typeField; 


        /// <summary>
        /// The interval method. Not appropriate for a SpotSample.
        /// </summary>
		[XmlElement("method")]

        public IntervalMethod? Method {
            get {
                return methodField;
            } 
            set {
                methodField = value;
                NotifyPropertyChanged("Method");
            }
        }

        private IntervalMethod? methodField; 


        /// <summary>
        /// The time interval associated with the method.
        /// </summary>
        [XmlElement("timeInterval")]
        public TimeMeasure TimeInterval {
            get {
                return timeIntervalField;
            } 
            set {
                if (value != null && DistanceIntervalSpecified) throw new Exception("Cannot set property TimeInterval when property DistanceInterval is already set");
                timeIntervalField = value;
                TimeIntervalSpecified = (value!=null);
                NotifyPropertyChanged("TimeInterval");
            }
        }

        private TimeMeasure timeIntervalField; 
        /// <summary>
        /// Boolean to indicate if TimeInterval has been set. Used for serialization.
        /// </summary>
        private Boolean TimeIntervalSpecified = false; 

        /// <summary>
        /// The distance interval associated with the method.
        /// </summary>
        [XmlElement("distanceInterval")]
        public LengthMeasure DistanceInterval {
            get {
                return distanceIntervalField;
            } 
            set {
                if (value != null && TimeIntervalSpecified) throw new Exception("Cannot set property DistanceInterval when property TimeInterval is already set");
                distanceIntervalField = value;
                DistanceIntervalSpecified = (value!=null);
                NotifyPropertyChanged("DistanceInterval");
            }
        }

        private LengthMeasure distanceIntervalField; 
        /// <summary>
        /// Boolean to indicate if DistanceInterval has been set. Used for serialization.
        /// </summary>
        private Boolean DistanceIntervalSpecified = false; 




        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Realtime Channel Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_channelDefinition", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Realtime Channel Component Schema ")]
    public partial class ChannelDefinition : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Used to differentiate between multiples of same sensor type. The mnemonic must be unique within the context of each group definition. 
        /// </summary>
		[XmlElement("mnemonic")]

        public String Mnemonic {
            get {
                return mnemonicField;
            } 
            set {
                mnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private String mnemonicField; 


        /// <summary>
        /// Specifies the data encoding of a "value". If this value is not supplied, the data type is assumed to be double.
        /// </summary>
		[XmlElement("dataType")]

        public LogDataType? DataType {
            get {
                return dataTypeField;
            } 
            set {
                dataTypeField = value;
                this.DataTypeSpecified = true;
                NotifyPropertyChanged("DataType");
            }
        }

        private LogDataType? dataTypeField; 


		/// <summary>
        /// dataTypeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DataTypeSpecified {
            get {
                return dataTypeSpecifiedField;
            } 
            set {
                dataTypeSpecifiedField = value;
                NotifyPropertyChanged("DataTypeSpecified");
            }
        }

        private Boolean dataTypeSpecifiedField; 


        /// <summary>
        /// Name of channel from realtime catalog. Although this is optional, it is strongly recommended that it be included. This defines the underlying meaning of the curve (e.g., a porosity). Mnemonic allows multiple channels of the same class to exist in one realtime.
        /// </summary>
		[XmlElement("classWitsml")]

        public RealtimeData ClassWitsml {
            get {
                return classWitsmlField;
            } 
            set {
                classWitsmlField = value;
                this.ClassWitsmlSpecified = true;
                NotifyPropertyChanged("ClassWitsml");
            }
        }

        private RealtimeData classWitsmlField; 


		/// <summary>
        /// classWitsmlSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ClassWitsmlSpecified {
            get {
                return classWitsmlSpecifiedField;
            } 
            set {
                classWitsmlSpecifiedField = value;
                NotifyPropertyChanged("ClassWitsmlSpecified");
            }
        }

        private Boolean classWitsmlSpecifiedField; 


        /// <summary>
        /// A 1-based index of curve data in the data records. This can only be specified if multiplexed is true in the group definition.
        /// </summary>
		[XmlElement("columnIndex")]

        public Int16? ColumnIndex {
            get {
                return columnIndexField;
            } 
            set {
                columnIndexField = value;
                this.ColumnIndexSpecified = true;
                NotifyPropertyChanged("ColumnIndex");
            }
        }

        private Int16? columnIndexField; 


		/// <summary>
        /// columnIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ColumnIndexSpecified {
            get {
                return columnIndexSpecifiedField;
            } 
            set {
                columnIndexSpecifiedField = value;
                NotifyPropertyChanged("ColumnIndexSpecified");
            }
        }

        private Boolean columnIndexSpecifiedField; 


        /// <summary>
        /// The unit of measure for a quantity value. This can only be specified if multiplexed is true in the group definition. For demultiplexed values the unit is carried by each individual value.
        /// </summary>
		[XmlElement("unit")]

        public String Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private String unitField; 


        /// <summary>
        /// A description of the channel.
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// Name alias for this trace. 
        /// </summary>
		[XmlElement("mnemAlias")]

        public String MnemAlias {
            get {
                return mnemAliasField;
            } 
            set {
                mnemAliasField = value;
                NotifyPropertyChanged("MnemAlias");
            }
        }

        private String mnemAliasField; 


        /// <summary>
        /// Offset of sensor from a downhole equipment vertical reference (the drill bit, for MWD logs; the tool zero reference for wireline logs). This element is only informative (log values are presented at actual depth, not requiring subtraction of an offset).
        /// </summary>
		[XmlElement("sensorOffset")]

        public LengthMeasure SensorOffset {
            get {
                return sensorOffsetField;
            } 
            set {
                sensorOffsetField = value;
                NotifyPropertyChanged("SensorOffset");
            }
        }

        private LengthMeasure sensorOffsetField; 


        /// <summary>
        /// Data source, could be tool name/id. 
        /// </summary>
		[XmlElement("dataSource")]

        public String DataSource {
            get {
                return dataSourceField;
            } 
            set {
                dataSourceField = value;
                NotifyPropertyChanged("DataSource");
            }
        }

        private String dataSourceField; 


        /// <summary>
        /// A container element that describes how data was gathered, computed, and sampled. This can only be specified if multiplexed is false in the group definition. That is, this can only be specified for a de-multiplexed representation.
        /// </summary>
		[XmlElement("interval")]

        public Interval Interval {
            get {
                return intervalField;
            } 
            set {
                intervalField = value;
                NotifyPropertyChanged("Interval");
            }
        }

        private Interval intervalField; 


        /// <summary>
        /// Indicates that the channel is an array channel (i.e., multi-valued samples), and provides meta data by which an axis of the array can be understood.
        /// </summary>
		[XmlElement("axisDefinition")]

        public List<AxisDefinition> AxisDefinition {
            get {
                return axisDefinitionField;
            } 
            set {
                axisDefinitionField = value;
                NotifyPropertyChanged("AxisDefinition");
            }
        }

        private List<AxisDefinition> axisDefinitionField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Realtime Channel Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_channel", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Realtime Channel Component Schema ")]
    public partial class Channel : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The id of the group that this channel represents.
        /// </summary>
		[XmlElement("id")]

        public String Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private String idField; 


        /// <summary>
        /// The mnemonic assigned to the channel. This must match a mnemonic of a channel definition in the header and represents the unique key of the channel. Multiple (de-multiplexed) channels with the same mnemonic cannot exist in the same realtime.
        /// </summary>
		[XmlElement("mnemonic")]

        public String Mnemonic {
            get {
                return mnemonicField;
            } 
            set {
                mnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private String mnemonicField; 


        /// <summary>
        /// The time index for the realtime channel if the interval type is time-based. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


		/// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 


        /// <summary>
        /// Along hole measured depth of measurement from the drill datum.
        /// </summary>
		[XmlElement("md")]

        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 


        /// <summary>
        /// Value of the channel. The encoding of the value is defined by "dataType" in the header. For array channels, this will be a space delimited list of values. 
        /// </summary>
		[XmlElement("value")]

        public EncodedArrayString Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private EncodedArrayString valueField; 


        /// <summary>
        /// Data density of sample in samples per length unit 
        /// </summary>
		[XmlElement("densData")]

        public PerLengthMeasure DensData {
            get {
                return densDataField;
            } 
            set {
                densDataField = value;
                NotifyPropertyChanged("DensData");
            }
        }

        private PerLengthMeasure densDataField; 


        /// <summary>
        /// Data quality indicator. 
        /// </summary>
		[XmlElement("qualData")]

        public String QualData {
            get {
                return qualDataField;
            } 
            set {
                qualDataField = value;
                NotifyPropertyChanged("QualData");
            }
        }

        private String qualDataField; 


        /// <summary>
        /// Formation exposure time. 
        /// </summary>
		[XmlElement("fet")]

        public TimeMeasure Fet {
            get {
                return fetField;
            } 
            set {
                fetField = value;
                NotifyPropertyChanged("Fet");
            }
        }

        private TimeMeasure fetField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the encodedArrayString xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="encodedArrayString", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the encodedArrayString xsd type.")]
    public partial class EncodedArrayString : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EncodedArrayString class.
        /// </summary>
        public EncodedArrayString() {}

        /// <summary>
        /// Initializes a new instance of the EncodedArrayString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public EncodedArrayString(String value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }


		/// <summary>
        /// uom property
        /// </summary>
        [XmlAttribute("uom")]

        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Realtime Record Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_record", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Realtime Record Component Schema ")]
    public partial class Record : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The id of the group that this record represents. The combination of id and seq should be unique within a subscription.
        /// </summary>
		[XmlElement("id")]

        public String Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private String idField; 


        /// <summary>
        /// The one-based sequence of records for one group in this subscription. The first record for a group should have a sequence number of one and each subsequent record for that group should increment by one.
        /// </summary>
		[XmlElement("seq")]

        public Int16? Seq {
            get {
                return seqField;
            } 
            set {
                seqField = value;
                NotifyPropertyChanged("Seq");
            }
        }

        private Int16? seqField; 


        /// <summary>
        /// The time index for the record if the interval type is time-based. 
        /// </summary>
		[XmlElement("dTim")]

        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 


		/// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 


        /// <summary>
        /// Along hole measured depth of measurement from the drill datum.
        /// </summary>
		[XmlElement("md")]

        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 


        /// <summary>
        /// The data values for the record. A comma delimited list of data values with one value for each channel in the group (e.g., "xxx,yyy, zzz"). For array channels, the value of the array channel will be a space delimited list of values that are contained within the commas that delimit the value for that curve (e.g., "xxx,aa bb cc,zzz"). This essentially represents one row of a table where the channel mnemonics represent the column headings. 
        /// </summary>
		[XmlElement("value")]

        public EncodedArrayString Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private EncodedArrayString valueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_rigs xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("rigs", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_rigs xsd type.")]
    public partial class RigList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single rig. 
        /// </summary>
		[XmlElement("rig")]

        public List<Rig> Rig {
            get {
                return rigField;
            } 
            set {
                rigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private List<Rig> rigField; 


        /// <summary>
        /// A single rig. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Rig;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Rig object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_rig", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Rig object.")]
    public partial class Rig : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the rig. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the rig. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[XmlElement("owner")]

        public String Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String ownerField; 


        /// <summary>
        /// Rig type. 
        /// </summary>
		[XmlElement("typeRig")]

        public RigType? TypeRig {
            get {
                return typeRigField;
            } 
            set {
                typeRigField = value;
                this.TypeRigSpecified = true;
                NotifyPropertyChanged("TypeRig");
            }
        }

        private RigType? typeRigField; 


		/// <summary>
        /// typeRigSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeRigSpecified {
            get {
                return typeRigSpecifiedField;
            } 
            set {
                typeRigSpecifiedField = value;
                NotifyPropertyChanged("TypeRigSpecified");
            }
        }

        private Boolean typeRigSpecifiedField; 


        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[XmlElement("manufacturer")]

        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 


        /// <summary>
        /// Year entered service (CCYY). 
        /// </summary>
		[XmlElement("yearEntService", DataType="gYear")]

        public String YearEntService {
            get {
                return yearEntServiceField;
            } 
            set {
                yearEntServiceField = value;
                NotifyPropertyChanged("YearEntService");
            }
        }

        private String yearEntServiceField; 


        /// <summary>
        /// Rig classification. 
        /// </summary>
		[XmlElement("classRig")]

        public String ClassRig {
            get {
                return classRigField;
            } 
            set {
                classRigField = value;
                NotifyPropertyChanged("ClassRig");
            }
        }

        private String classRigField; 


        /// <summary>
        /// Rig approvals/certification. 
        /// </summary>
		[XmlElement("approvals")]

        public String Approvals {
            get {
                return approvalsField;
            } 
            set {
                approvalsField = value;
                NotifyPropertyChanged("Approvals");
            }
        }

        private String approvalsField; 


        /// <summary>
        /// Rig registration location. 
        /// </summary>
		[XmlElement("registration")]

        public String Registration {
            get {
                return registrationField;
            } 
            set {
                registrationField = value;
                NotifyPropertyChanged("Registration");
            }
        }

        private String registrationField; 


        /// <summary>
        /// Rig telephone number. 
        /// </summary>
		[XmlElement("telNumber")]

        public String TelNumber {
            get {
                return telNumberField;
            } 
            set {
                telNumberField = value;
                NotifyPropertyChanged("TelNumber");
            }
        }

        private String telNumberField; 


        /// <summary>
        /// Rig fax number. 
        /// </summary>
		[XmlElement("faxNumber")]

        public String FaxNumber {
            get {
                return faxNumberField;
            } 
            set {
                faxNumberField = value;
                NotifyPropertyChanged("FaxNumber");
            }
        }

        private String faxNumberField; 


        /// <summary>
        /// Rig Email address. 
        /// </summary>
		[XmlElement("emailAddress")]

        public String EmailAddress {
            get {
                return emailAddressField;
            } 
            set {
                emailAddressField = value;
                NotifyPropertyChanged("EmailAddress");
            }
        }

        private String emailAddressField; 


        /// <summary>
        /// Name of contact person. 
        /// </summary>
		[XmlElement("nameContact")]

        public String NameContact {
            get {
                return nameContactField;
            } 
            set {
                nameContactField = value;
                NotifyPropertyChanged("NameContact");
            }
        }

        private String nameContactField; 


        /// <summary>
        /// Maximum hole depth rating for the rig. 
        /// </summary>
		[XmlElement("ratingDrillDepth")]

        public LengthMeasure RatingDrillDepth {
            get {
                return ratingDrillDepthField;
            } 
            set {
                ratingDrillDepthField = value;
                NotifyPropertyChanged("RatingDrillDepth");
            }
        }

        private LengthMeasure ratingDrillDepthField; 


        /// <summary>
        /// Working water depth capability of rig. 
        /// </summary>
		[XmlElement("ratingWaterDepth")]

        public LengthMeasure RatingWaterDepth {
            get {
                return ratingWaterDepthField;
            } 
            set {
                ratingWaterDepthField = value;
                NotifyPropertyChanged("RatingWaterDepth");
            }
        }

        private LengthMeasure ratingWaterDepthField; 


        /// <summary>
        /// Flag to indicate that rig is an offshore rig (Drill Ship, Semi, Jack-up, Platform, TADU). Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("isOffshore")]

        public Boolean? IsOffshore {
            get {
                return isOffshoreField;
            } 
            set {
                isOffshoreField = value;
                this.IsOffshoreSpecified = true;
                NotifyPropertyChanged("IsOffshore");
            }
        }

        private Boolean? isOffshoreField; 


		/// <summary>
        /// isOffshoreSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean IsOffshoreSpecified {
            get {
                return isOffshoreSpecifiedField;
            } 
            set {
                isOffshoreSpecifiedField = value;
                NotifyPropertyChanged("IsOffshoreSpecified");
            }
        }

        private Boolean isOffshoreSpecifiedField; 


        /// <summary>
        /// Air gap from Rig Floor to ground or mean sea level depending on location. 
        /// </summary>
		[XmlElement("airGap")]

        public LengthMeasure AirGap {
            get {
                return airGapField;
            } 
            set {
                airGapField = value;
                NotifyPropertyChanged("AirGap");
            }
        }

        private LengthMeasure airGapField; 


        /// <summary>
        /// Date and time rig operations started, or date and time object created. 
        /// </summary>
		[XmlElement("dTimStartOp")]

        public DateTime? DateTimeStartOperating {
            get {
                return dTimStartOpField;
            } 
            set {
                dTimStartOpField = value;
                this.DateTimeStartOperatingSpecified = true;
                NotifyPropertyChanged("DateTimeStartOperating");
            }
        }

        private DateTime? dTimStartOpField; 


		/// <summary>
        /// dTimStartOpSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeStartOperatingSpecified {
            get {
                return dTimStartOpSpecifiedField;
            } 
            set {
                dTimStartOpSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartOperatingSpecified");
            }
        }

        private Boolean dTimStartOpSpecifiedField; 


        /// <summary>
        /// Date and time rig operations ended (May be NULL for active rig). 
        /// </summary>
		[XmlElement("dTimEndOp")]

        public DateTime? DateTimeEndOperating {
            get {
                return dTimEndOpField;
            } 
            set {
                dTimEndOpField = value;
                this.DateTimeEndOperatingSpecified = true;
                NotifyPropertyChanged("DateTimeEndOperating");
            }
        }

        private DateTime? dTimEndOpField; 


		/// <summary>
        /// dTimEndOpSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeEndOperatingSpecified {
            get {
                return dTimEndOpSpecifiedField;
            } 
            set {
                dTimEndOpSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndOperatingSpecified");
            }
        }

        private Boolean dTimEndOpSpecifiedField; 


        /// <summary>
        /// Blow out preventer description and components. 
        /// </summary>
		[XmlElement("bop")]

        public Bop Bop {
            get {
                return bopField;
            } 
            set {
                bopField = value;
                NotifyPropertyChanged("Bop");
            }
        }

        private Bop bopField; 


        /// <summary>
        /// Pit equipment for the rig. 
        /// </summary>
		[XmlElement("pit")]

        public List<Pit> Pit {
            get {
                return pitField;
            } 
            set {
                pitField = value;
                NotifyPropertyChanged("Pit");
            }
        }

        private List<Pit> pitField; 


        /// <summary>
        /// Drilling fluid (mud/cement) pumping units for the rig. 
        /// </summary>
		[XmlElement("pump")]

        public List<Pump> Pump {
            get {
                return pumpField;
            } 
            set {
                pumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

        private List<Pump> pumpField; 


        /// <summary>
        /// Mud cleaning shaker equipment for the rig. 
        /// </summary>
		[XmlElement("shaker")]

        public List<Shaker> Shaker {
            get {
                return shakerField;
            } 
            set {
                shakerField = value;
                NotifyPropertyChanged("Shaker");
            }
        }

        private List<Shaker> shakerField; 


        /// <summary>
        /// Mud cleaning centrifuge equipment for the rig. 
        /// </summary>
		[XmlElement("centrifuge")]

        public List<Centrifuge> Centrifuge {
            get {
                return centrifugeField;
            } 
            set {
                centrifugeField = value;
                NotifyPropertyChanged("Centrifuge");
            }
        }

        private List<Centrifuge> centrifugeField; 


        /// <summary>
        /// Mud cleaning hydrocyclone equipment for the rig. 
        /// </summary>
		[XmlElement("hydrocyclone")]

        public List<Hydrocyclone> Hydrocyclone {
            get {
                return hydrocycloneField;
            } 
            set {
                hydrocycloneField = value;
                NotifyPropertyChanged("Hydrocyclone");
            }
        }

        private List<Hydrocyclone> hydrocycloneField; 


        /// <summary>
        /// Mud de-gasser equipment for the rig. 
        /// </summary>
		[XmlElement("degasser")]

        public List<Degasser> Degasser {
            get {
                return degasserField;
            } 
            set {
                degasserField = value;
                NotifyPropertyChanged("Degasser");
            }
        }

        private List<Degasser> degasserField; 


        /// <summary>
        /// Coiled tubing specific equipment configuration. 
        /// </summary>
		[XmlElement("surfaceEquipment")]

        public SurfaceEquipment SurfaceEquipment {
            get {
                return surfaceEquipmentField;
            } 
            set {
                surfaceEquipmentField = value;
                NotifyPropertyChanged("SurfaceEquipment");
            }
        }

        private SurfaceEquipment surfaceEquipmentField; 


        /// <summary>
        /// Number of derricks on the rig. 
        /// </summary>
		[XmlElement("numDerricks")]

        public Int16? NumDerricks {
            get {
                return numDerricksField;
            } 
            set {
                numDerricksField = value;
                this.NumDerricksSpecified = true;
                NotifyPropertyChanged("NumDerricks");
            }
        }

        private Int16? numDerricksField; 


		/// <summary>
        /// numDerricksSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumDerricksSpecified {
            get {
                return numDerricksSpecifiedField;
            } 
            set {
                numDerricksSpecifiedField = value;
                NotifyPropertyChanged("NumDerricksSpecified");
            }
        }

        private Boolean numDerricksSpecifiedField; 


        /// <summary>
        /// Derrick type. 
        /// </summary>
		[XmlElement("typeDerrick")]

        public DerrickType? TypeDerrick {
            get {
                return typeDerrickField;
            } 
            set {
                typeDerrickField = value;
                this.TypeDerrickSpecified = true;
                NotifyPropertyChanged("TypeDerrick");
            }
        }

        private DerrickType? typeDerrickField; 


		/// <summary>
        /// typeDerrickSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeDerrickSpecified {
            get {
                return typeDerrickSpecifiedField;
            } 
            set {
                typeDerrickSpecifiedField = value;
                NotifyPropertyChanged("TypeDerrickSpecified");
            }
        }

        private Boolean typeDerrickSpecifiedField; 


        /// <summary>
        /// Maximum support load applied to derrick structure. 
        /// </summary>
		[XmlElement("ratingDerrick")]

        public ForceMeasure RatingDerrick {
            get {
                return ratingDerrickField;
            } 
            set {
                ratingDerrickField = value;
                NotifyPropertyChanged("RatingDerrick");
            }
        }

        private ForceMeasure ratingDerrickField; 


        /// <summary>
        /// Height of derrick. 
        /// </summary>
		[XmlElement("htDerrick")]

        public LengthMeasure HeightDerrick {
            get {
                return htDerrickField;
            } 
            set {
                htDerrickField = value;
                NotifyPropertyChanged("HeightDerrick");
            }
        }

        private LengthMeasure htDerrickField; 


        /// <summary>
        /// Maximum hookload rating. 
        /// </summary>
		[XmlElement("ratingHkld")]

        public ForceMeasure RatingHookload {
            get {
                return ratingHkldField;
            } 
            set {
                ratingHkldField = value;
                NotifyPropertyChanged("RatingHookload");
            }
        }

        private ForceMeasure ratingHkldField; 


        /// <summary>
        /// Derrick wind capacity. 
        /// </summary>
		[XmlElement("capWindDerrick")]

        public VelocityMeasure CapWindDerrick {
            get {
                return capWindDerrickField;
            } 
            set {
                capWindDerrickField = value;
                NotifyPropertyChanged("CapWindDerrick");
            }
        }

        private VelocityMeasure capWindDerrickField; 


        /// <summary>
        /// Block weight. 
        /// </summary>
		[XmlElement("wtBlock")]

        public ForceMeasure WeightBlock {
            get {
                return wtBlockField;
            } 
            set {
                wtBlockField = value;
                NotifyPropertyChanged("WeightBlock");
            }
        }

        private ForceMeasure wtBlockField; 


        /// <summary>
        /// Weight rating of the travelling block. 
        /// </summary>
		[XmlElement("ratingBlock")]

        public ForceMeasure RatingBlock {
            get {
                return ratingBlockField;
            } 
            set {
                ratingBlockField = value;
                NotifyPropertyChanged("RatingBlock");
            }
        }

        private ForceMeasure ratingBlockField; 


        /// <summary>
        /// Number of block lines. 
        /// </summary>
		[XmlElement("numBlockLines")]

        public Int16? NumBlockLines {
            get {
                return numBlockLinesField;
            } 
            set {
                numBlockLinesField = value;
                this.NumBlockLinesSpecified = true;
                NotifyPropertyChanged("NumBlockLines");
            }
        }

        private Int16? numBlockLinesField; 


		/// <summary>
        /// numBlockLinesSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumBlockLinesSpecified {
            get {
                return numBlockLinesSpecifiedField;
            } 
            set {
                numBlockLinesSpecifiedField = value;
                NotifyPropertyChanged("NumBlockLinesSpecified");
            }
        }

        private Boolean numBlockLinesSpecifiedField; 


        /// <summary>
        /// Type of hook. 
        /// </summary>
		[XmlElement("typeHook")]

        public String TypeHook {
            get {
                return typeHookField;
            } 
            set {
                typeHookField = value;
                NotifyPropertyChanged("TypeHook");
            }
        }

        private String typeHookField; 


        /// <summary>
        /// Weight rating of the hook. 
        /// </summary>
		[XmlElement("ratingHook")]

        public ForceMeasure RatingHook {
            get {
                return ratingHookField;
            } 
            set {
                ratingHookField = value;
                NotifyPropertyChanged("RatingHook");
            }
        }

        private ForceMeasure ratingHookField; 


        /// <summary>
        /// Drill line diameter. 
        /// </summary>
		[XmlElement("sizeDrillLine")]

        public LengthMeasure SizeDrillLine {
            get {
                return sizeDrillLineField;
            } 
            set {
                sizeDrillLineField = value;
                NotifyPropertyChanged("SizeDrillLine");
            }
        }

        private LengthMeasure sizeDrillLineField; 


        /// <summary>
        /// Draw-works type. 
        /// </summary>
		[XmlElement("typeDrawWorks")]

        public DrawWorksType? TypeDrawWorks {
            get {
                return typeDrawWorksField;
            } 
            set {
                typeDrawWorksField = value;
                this.TypeDrawWorksSpecified = true;
                NotifyPropertyChanged("TypeDrawWorks");
            }
        }

        private DrawWorksType? typeDrawWorksField; 


		/// <summary>
        /// typeDrawWorksSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeDrawWorksSpecified {
            get {
                return typeDrawWorksSpecifiedField;
            } 
            set {
                typeDrawWorksSpecifiedField = value;
                NotifyPropertyChanged("TypeDrawWorksSpecified");
            }
        }

        private Boolean typeDrawWorksSpecifiedField; 


        /// <summary>
        /// Draw works horse power. 
        /// </summary>
		[XmlElement("powerDrawWorks")]

        public PowerMeasure PowerDrawWorks {
            get {
                return powerDrawWorksField;
            } 
            set {
                powerDrawWorksField = value;
                NotifyPropertyChanged("PowerDrawWorks");
            }
        }

        private PowerMeasure powerDrawWorksField; 


        /// <summary>
        /// Weight rating of the drawworks. 
        /// </summary>
		[XmlElement("ratingDrawWorks")]

        public ForceMeasure RatingDrawWorks {
            get {
                return ratingDrawWorksField;
            } 
            set {
                ratingDrawWorksField = value;
                NotifyPropertyChanged("RatingDrawWorks");
            }
        }

        private ForceMeasure ratingDrawWorksField; 


        /// <summary>
        /// Description of the drawworks motor. 
        /// </summary>
		[XmlElement("motorDrawWorks")]

        public String MotorDrawWorks {
            get {
                return motorDrawWorksField;
            } 
            set {
                motorDrawWorksField = value;
                NotifyPropertyChanged("MotorDrawWorks");
            }
        }

        private String motorDrawWorksField; 


        /// <summary>
        /// Rig brake description. 
        /// </summary>
		[XmlElement("descBrake")]

        public String DescBrake {
            get {
                return descBrakeField;
            } 
            set {
                descBrakeField = value;
                NotifyPropertyChanged("DescBrake");
            }
        }

        private String descBrakeField; 


        /// <summary>
        /// Type of Swivel. 
        /// </summary>
		[XmlElement("typeSwivel")]

        public String TypeSwivel {
            get {
                return typeSwivelField;
            } 
            set {
                typeSwivelField = value;
                NotifyPropertyChanged("TypeSwivel");
            }
        }

        private String typeSwivelField; 


        /// <summary>
        /// Maximum swivel rating. 
        /// </summary>
		[XmlElement("ratingSwivel")]

        public ForceMeasure RatingSwivel {
            get {
                return ratingSwivelField;
            } 
            set {
                ratingSwivelField = value;
                NotifyPropertyChanged("RatingSwivel");
            }
        }

        private ForceMeasure ratingSwivelField; 


        /// <summary>
        /// Work string drive type. 
        /// </summary>
		[XmlElement("rotSystem")]

        public DriveType? RotSystem {
            get {
                return rotSystemField;
            } 
            set {
                rotSystemField = value;
                this.RotSystemSpecified = true;
                NotifyPropertyChanged("RotSystem");
            }
        }

        private DriveType? rotSystemField; 


		/// <summary>
        /// rotSystemSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean RotSystemSpecified {
            get {
                return rotSystemSpecifiedField;
            } 
            set {
                rotSystemSpecifiedField = value;
                NotifyPropertyChanged("RotSystemSpecified");
            }
        }

        private Boolean rotSystemSpecifiedField; 


        /// <summary>
        /// Description of rotating system. 
        /// </summary>
		[XmlElement("descRotSystem")]

        public String DescRotSystem {
            get {
                return descRotSystemField;
            } 
            set {
                descRotSystemField = value;
                NotifyPropertyChanged("DescRotSystem");
            }
        }

        private String descRotSystemField; 


        /// <summary>
        /// Work string rotational torque rating. 
        /// </summary>
		[XmlElement("ratingTqRotSys")]

        public MomentOfForceMeasure RatingTorqueRotSys {
            get {
                return ratingTqRotSysField;
            } 
            set {
                ratingTqRotSysField = value;
                NotifyPropertyChanged("RatingTorqueRotSys");
            }
        }

        private MomentOfForceMeasure ratingTqRotSysField; 


        /// <summary>
        /// Rotary size opening. 
        /// </summary>
		[XmlElement("rotSizeOpening")]

        public LengthMeasure RotSizeOpening {
            get {
                return rotSizeOpeningField;
            } 
            set {
                rotSizeOpeningField = value;
                NotifyPropertyChanged("RotSizeOpening");
            }
        }

        private LengthMeasure rotSizeOpeningField; 


        /// <summary>
        /// Work string rotational torque rating. 
        /// </summary>
		[XmlElement("ratingRotSystem")]

        public ForceMeasure RatingRotSystem {
            get {
                return ratingRotSystemField;
            } 
            set {
                ratingRotSystemField = value;
                NotifyPropertyChanged("RatingRotSystem");
            }
        }

        private ForceMeasure ratingRotSystemField; 


        /// <summary>
        /// Description of slow circulation rates system. 
        /// </summary>
		[XmlElement("scrSystem")]

        public String ScrSystem {
            get {
                return scrSystemField;
            } 
            set {
                scrSystemField = value;
                NotifyPropertyChanged("ScrSystem");
            }
        }

        private String scrSystemField; 


        /// <summary>
        /// Name of pipe handling system. 
        /// </summary>
		[XmlElement("pipeHandlingSystem")]

        public String PipeHandlingSystem {
            get {
                return pipeHandlingSystemField;
            } 
            set {
                pipeHandlingSystemField = value;
                NotifyPropertyChanged("PipeHandlingSystem");
            }
        }

        private String pipeHandlingSystemField; 


        /// <summary>
        /// Bulk/dry mud storage capacity. 
        /// </summary>
		[XmlElement("capBulkMud")]

        public VolumeMeasure CapBulkMud {
            get {
                return capBulkMudField;
            } 
            set {
                capBulkMudField = value;
                NotifyPropertyChanged("CapBulkMud");
            }
        }

        private VolumeMeasure capBulkMudField; 


        /// <summary>
        /// Liquid mud storage capacity. 
        /// </summary>
		[XmlElement("capLiquidMud")]

        public VolumeMeasure CapLiquidMud {
            get {
                return capLiquidMudField;
            } 
            set {
                capLiquidMudField = value;
                NotifyPropertyChanged("CapLiquidMud");
            }
        }

        private VolumeMeasure capLiquidMudField; 


        /// <summary>
        /// Drill water capacity. 
        /// </summary>
		[XmlElement("capDrillWater")]

        public VolumeMeasure CapDrillWater {
            get {
                return capDrillWaterField;
            } 
            set {
                capDrillWaterField = value;
                NotifyPropertyChanged("CapDrillWater");
            }
        }

        private VolumeMeasure capDrillWaterField; 


        /// <summary>
        /// Potable water capacity. 
        /// </summary>
		[XmlElement("capPotableWater")]

        public VolumeMeasure CapPotableWater {
            get {
                return capPotableWaterField;
            } 
            set {
                capPotableWaterField = value;
                NotifyPropertyChanged("CapPotableWater");
            }
        }

        private VolumeMeasure capPotableWaterField; 


        /// <summary>
        /// Fuel capacity. 
        /// </summary>
		[XmlElement("capFuel")]

        public VolumeMeasure CapFuel {
            get {
                return capFuelField;
            } 
            set {
                capFuelField = value;
                NotifyPropertyChanged("CapFuel");
            }
        }

        private VolumeMeasure capFuelField; 


        /// <summary>
        /// Capacity of builk cement. 
        /// </summary>
		[XmlElement("capBulkCement")]

        public VolumeMeasure CapBulkCement {
            get {
                return capBulkCementField;
            } 
            set {
                capBulkCementField = value;
                NotifyPropertyChanged("CapBulkCement");
            }
        }

        private VolumeMeasure capBulkCementField; 


        /// <summary>
        /// Power system. 
        /// </summary>
		[XmlElement("mainEngine")]

        public String MainEngine {
            get {
                return mainEngineField;
            } 
            set {
                mainEngineField = value;
                NotifyPropertyChanged("MainEngine");
            }
        }

        private String mainEngineField; 


        /// <summary>
        /// Description of the electrical power generating system. 
        /// </summary>
		[XmlElement("generator")]

        public String Generator {
            get {
                return generatorField;
            } 
            set {
                generatorField = value;
                NotifyPropertyChanged("Generator");
            }
        }

        private String generatorField; 


        /// <summary>
        /// Name of cement unit on the rig. 
        /// </summary>
		[XmlElement("cementUnit")]

        public String CementUnit {
            get {
                return cementUnitField;
            } 
            set {
                cementUnitField = value;
                NotifyPropertyChanged("CementUnit");
            }
        }

        private String cementUnitField; 


        /// <summary>
        /// Number of beds available on the rig. 
        /// </summary>
		[XmlElement("numBunks")]

        public Int16? NumBunks {
            get {
                return numBunksField;
            } 
            set {
                numBunksField = value;
                this.NumBunksSpecified = true;
                NotifyPropertyChanged("NumBunks");
            }
        }

        private Int16? numBunksField; 


		/// <summary>
        /// numBunksSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumBunksSpecified {
            get {
                return numBunksSpecifiedField;
            } 
            set {
                numBunksSpecifiedField = value;
                NotifyPropertyChanged("NumBunksSpecified");
            }
        }

        private Boolean numBunksSpecifiedField; 


        /// <summary>
        /// Number of bunks per room. 
        /// </summary>
		[XmlElement("bunksPerRoom")]

        public Int16? BunksPerRoom {
            get {
                return bunksPerRoomField;
            } 
            set {
                bunksPerRoomField = value;
                this.BunksPerRoomSpecified = true;
                NotifyPropertyChanged("BunksPerRoom");
            }
        }

        private Int16? bunksPerRoomField; 


		/// <summary>
        /// bunksPerRoomSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean BunksPerRoomSpecified {
            get {
                return bunksPerRoomSpecifiedField;
            } 
            set {
                bunksPerRoomSpecifiedField = value;
                NotifyPropertyChanged("BunksPerRoomSpecified");
            }
        }

        private Boolean bunksPerRoomSpecifiedField; 


        /// <summary>
        /// Number of cranes on the rig. 
        /// </summary>
		[XmlElement("numCranes")]

        public Int16? NumCranes {
            get {
                return numCranesField;
            } 
            set {
                numCranesField = value;
                this.NumCranesSpecified = true;
                NotifyPropertyChanged("NumCranes");
            }
        }

        private Int16? numCranesField; 


		/// <summary>
        /// numCranesSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumCranesSpecified {
            get {
                return numCranesSpecifiedField;
            } 
            set {
                numCranesSpecifiedField = value;
                NotifyPropertyChanged("NumCranesSpecified");
            }
        }

        private Boolean numCranesSpecifiedField; 


        /// <summary>
        /// Number of anchors. 
        /// </summary>
		[XmlElement("numAnch")]

        public Int16? NumAnch {
            get {
                return numAnchField;
            } 
            set {
                numAnchField = value;
                this.NumAnchSpecified = true;
                NotifyPropertyChanged("NumAnch");
            }
        }

        private Int16? numAnchField; 


		/// <summary>
        /// numAnchSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumAnchSpecified {
            get {
                return numAnchSpecifiedField;
            } 
            set {
                numAnchSpecifiedField = value;
                NotifyPropertyChanged("NumAnchSpecified");
            }
        }

        private Boolean numAnchSpecifiedField; 


        /// <summary>
        /// Mooring type. 
        /// </summary>
		[XmlElement("moorType")]

        public String MoorType {
            get {
                return moorTypeField;
            } 
            set {
                moorTypeField = value;
                NotifyPropertyChanged("MoorType");
            }
        }

        private String moorTypeField; 


        /// <summary>
        /// Number of guideline tensioners. 
        /// </summary>
		[XmlElement("numGuideTens")]

        public Int16? NumGuideTens {
            get {
                return numGuideTensField;
            } 
            set {
                numGuideTensField = value;
                this.NumGuideTensSpecified = true;
                NotifyPropertyChanged("NumGuideTens");
            }
        }

        private Int16? numGuideTensField; 


		/// <summary>
        /// numGuideTensSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumGuideTensSpecified {
            get {
                return numGuideTensSpecifiedField;
            } 
            set {
                numGuideTensSpecifiedField = value;
                NotifyPropertyChanged("NumGuideTensSpecified");
            }
        }

        private Boolean numGuideTensSpecifiedField; 


        /// <summary>
        /// Number of riser tensioners. 
        /// </summary>
		[XmlElement("numRiserTens")]

        public Int16? NumRiserTens {
            get {
                return numRiserTensField;
            } 
            set {
                numRiserTensField = value;
                this.NumRiserTensSpecified = true;
                NotifyPropertyChanged("NumRiserTens");
            }
        }

        private Int16? numRiserTensField; 


		/// <summary>
        /// numRiserTensSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumRiserTensSpecified {
            get {
                return numRiserTensSpecifiedField;
            } 
            set {
                numRiserTensSpecifiedField = value;
                NotifyPropertyChanged("NumRiserTensSpecified");
            }
        }

        private Boolean numRiserTensSpecifiedField; 


        /// <summary>
        /// Variable deck load maximum (offshore rigs only). 
        /// </summary>
		[XmlElement("varDeckLdMx")]

        public ForceMeasure VarDeckLoadMax {
            get {
                return varDeckLdMxField;
            } 
            set {
                varDeckLdMxField = value;
                NotifyPropertyChanged("VarDeckLoadMax");
            }
        }

        private ForceMeasure varDeckLdMxField; 


        /// <summary>
        /// Variable deck load storm rating (offshore rigs only). 
        /// </summary>
		[XmlElement("vdlStorm")]

        public ForceMeasure VdlStorm {
            get {
                return vdlStormField;
            } 
            set {
                vdlStormField = value;
                NotifyPropertyChanged("VdlStorm");
            }
        }

        private ForceMeasure vdlStormField; 


        /// <summary>
        /// Number of thrusters. 
        /// </summary>
		[XmlElement("numThrusters")]

        public Int16? NumThrusters {
            get {
                return numThrustersField;
            } 
            set {
                numThrustersField = value;
                this.NumThrustersSpecified = true;
                NotifyPropertyChanged("NumThrusters");
            }
        }

        private Int16? numThrustersField; 


		/// <summary>
        /// numThrustersSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumThrustersSpecified {
            get {
                return numThrustersSpecifiedField;
            } 
            set {
                numThrustersSpecifiedField = value;
                NotifyPropertyChanged("NumThrustersSpecified");
            }
        }

        private Boolean numThrustersSpecifiedField; 


        /// <summary>
        /// Are the thrusters azimuth. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("azimuthing")]

        public Boolean? Azimuthing {
            get {
                return azimuthingField;
            } 
            set {
                azimuthingField = value;
                this.AzimuthingSpecified = true;
                NotifyPropertyChanged("Azimuthing");
            }
        }

        private Boolean? azimuthingField; 


		/// <summary>
        /// azimuthingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean AzimuthingSpecified {
            get {
                return azimuthingSpecifiedField;
            } 
            set {
                azimuthingSpecifiedField = value;
                NotifyPropertyChanged("AzimuthingSpecified");
            }
        }

        private Boolean azimuthingSpecifiedField; 


        /// <summary>
        /// Minimum motion compensation. 
        /// </summary>
		[XmlElement("motionCompensationMn")]

        public ForceMeasure MotionCompensationMin {
            get {
                return motionCompensationMnField;
            } 
            set {
                motionCompensationMnField = value;
                NotifyPropertyChanged("MotionCompensationMin");
            }
        }

        private ForceMeasure motionCompensationMnField; 


        /// <summary>
        /// Maximum motion compensation. 
        /// </summary>
		[XmlElement("motionCompensationMx")]

        public ForceMeasure MotionCompensationMax {
            get {
                return motionCompensationMxField;
            } 
            set {
                motionCompensationMxField = value;
                NotifyPropertyChanged("MotionCompensationMax");
            }
        }

        private ForceMeasure motionCompensationMxField; 


        /// <summary>
        /// Length of motion compensation provided by equipment. 
        /// </summary>
		[XmlElement("strokeMotionCompensation")]

        public LengthMeasure StrokeMotionCompensation {
            get {
                return strokeMotionCompensationField;
            } 
            set {
                strokeMotionCompensationField = value;
                NotifyPropertyChanged("StrokeMotionCompensation");
            }
        }

        private LengthMeasure strokeMotionCompensationField; 


        /// <summary>
        /// Riser angle limit. 
        /// </summary>
		[XmlElement("riserAngleLimit")]

        public PlaneAngleMeasure RiserAngleLimit {
            get {
                return riserAngleLimitField;
            } 
            set {
                riserAngleLimitField = value;
                NotifyPropertyChanged("RiserAngleLimit");
            }
        }

        private PlaneAngleMeasure riserAngleLimitField; 


        /// <summary>
        /// Maximum allowable heave. 
        /// </summary>
		[XmlElement("heaveMx")]

        public LengthMeasure HeaveMax {
            get {
                return heaveMxField;
            } 
            set {
                heaveMxField = value;
                NotifyPropertyChanged("HeaveMax");
            }
        }

        private LengthMeasure heaveMxField; 


        /// <summary>
        /// Description of gantry. 
        /// </summary>
		[XmlElement("gantry")]

        public String Gantry {
            get {
                return gantryField;
            } 
            set {
                gantryField = value;
                NotifyPropertyChanged("Gantry");
            }
        }

        private String gantryField; 


        /// <summary>
        /// Description of flare. 
        /// </summary>
		[XmlElement("flares")]

        public String Flares {
            get {
                return flaresField;
            } 
            set {
                flaresField = value;
                NotifyPropertyChanged("Flares");
            }
        }

        private String flaresField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Rig BOP Component Schema.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bop", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Rig BOP Component Schema.")]
    public partial class Bop : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[XmlElement("manufacturer")]

        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 


        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[XmlElement("model")]

        public String Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String modelField; 


        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[XmlElement("dTimInstall")]

        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private DateTime? dTimInstallField; 


		/// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private Boolean dTimInstallSpecifiedField; 


        /// <summary>
        /// Removal Date. 
        /// </summary>
		[XmlElement("dTimRemove")]

        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private DateTime? dTimRemoveField; 


		/// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private Boolean dTimRemoveSpecifiedField; 


        /// <summary>
        /// An identification tag for the blow out preventer. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[XmlElement("nameTag")]

        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

        private List<NameTag> nameTagField; 


        /// <summary>
        /// Type of connection to Blow Out Preventer. 
        /// </summary>
		[XmlElement("typeConnectionBop")]

        public String TypeConnectionBop {
            get {
                return typeConnectionBopField;
            } 
            set {
                typeConnectionBopField = value;
                NotifyPropertyChanged("TypeConnectionBop");
            }
        }

        private String typeConnectionBopField; 


        /// <summary>
        /// Size of connection to Blow Out Preventer. 
        /// </summary>
		[XmlElement("sizeConnectionBop")]

        public LengthMeasure SizeConnectionBop {
            get {
                return sizeConnectionBopField;
            } 
            set {
                sizeConnectionBopField = value;
                NotifyPropertyChanged("SizeConnectionBop");
            }
        }

        private LengthMeasure sizeConnectionBopField; 


        /// <summary>
        /// Maximum Pressure rating of Blow Out Preventer. 
        /// </summary>
		[XmlElement("presBopRating")]

        public PressureMeasure PresBopRating {
            get {
                return presBopRatingField;
            } 
            set {
                presBopRatingField = value;
                NotifyPropertyChanged("PresBopRating");
            }
        }

        private PressureMeasure presBopRatingField; 


        /// <summary>
        /// Maximum tubulars passable through Blow Out Preventer. 
        /// </summary>
		[XmlElement("sizeBopSys")]

        public LengthMeasure SizeBopSys {
            get {
                return sizeBopSysField;
            } 
            set {
                sizeBopSysField = value;
                NotifyPropertyChanged("SizeBopSys");
            }
        }

        private LengthMeasure sizeBopSysField; 


        /// <summary>
        /// Is this a Rotating Blow Out Preventer? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[XmlElement("rotBop")]

        public Boolean? RotBop {
            get {
                return rotBopField;
            } 
            set {
                rotBopField = value;
                this.RotBopSpecified = true;
                NotifyPropertyChanged("RotBop");
            }
        }

        private Boolean? rotBopField; 


		/// <summary>
        /// rotBopSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean RotBopSpecified {
            get {
                return rotBopSpecifiedField;
            } 
            set {
                rotBopSpecifiedField = value;
                NotifyPropertyChanged("RotBopSpecified");
            }
        }

        private Boolean rotBopSpecifiedField; 


        /// <summary>
        /// Inner diameter of Booster Line. 
        /// </summary>
		[XmlElement("idBoosterLine")]

        public LengthMeasure InnerDiameterBoosterLine {
            get {
                return idBoosterLineField;
            } 
            set {
                idBoosterLineField = value;
                NotifyPropertyChanged("InnerDiameterBoosterLine");
            }
        }

        private LengthMeasure idBoosterLineField; 


        /// <summary>
        /// Outer diameter of Booster Line. 
        /// </summary>
		[XmlElement("odBoosterLine")]

        public LengthMeasure OuterDiameterBoosterLine {
            get {
                return odBoosterLineField;
            } 
            set {
                odBoosterLineField = value;
                NotifyPropertyChanged("OuterDiameterBoosterLine");
            }
        }

        private LengthMeasure odBoosterLineField; 


        /// <summary>
        /// Length of Booster Line along riser. 
        /// </summary>
		[XmlElement("lenBoosterLine")]

        public LengthMeasure LenBoosterLine {
            get {
                return lenBoosterLineField;
            } 
            set {
                lenBoosterLineField = value;
                NotifyPropertyChanged("LenBoosterLine");
            }
        }

        private LengthMeasure lenBoosterLineField; 


        /// <summary>
        /// Inner diameter of Surface Line. 
        /// </summary>
		[XmlElement("idSurfLine")]

        public LengthMeasure InnerDiameterSurfLine {
            get {
                return idSurfLineField;
            } 
            set {
                idSurfLineField = value;
                NotifyPropertyChanged("InnerDiameterSurfLine");
            }
        }

        private LengthMeasure idSurfLineField; 


        /// <summary>
        /// Outer diameter of Surface Line. 
        /// </summary>
		[XmlElement("odSurfLine")]

        public LengthMeasure OuterDiameterSurfLine {
            get {
                return odSurfLineField;
            } 
            set {
                odSurfLineField = value;
                NotifyPropertyChanged("OuterDiameterSurfLine");
            }
        }

        private LengthMeasure odSurfLineField; 


        /// <summary>
        /// Length of Choke Line along riser. 
        /// </summary>
		[XmlElement("lenSurfLine")]

        public LengthMeasure LenSurfLine {
            get {
                return lenSurfLineField;
            } 
            set {
                lenSurfLineField = value;
                NotifyPropertyChanged("LenSurfLine");
            }
        }

        private LengthMeasure lenSurfLineField; 


        /// <summary>
        /// Inner diameter of Choke Line. 
        /// </summary>
		[XmlElement("idChkLine")]

        public LengthMeasure InnerDiameterChkLine {
            get {
                return idChkLineField;
            } 
            set {
                idChkLineField = value;
                NotifyPropertyChanged("InnerDiameterChkLine");
            }
        }

        private LengthMeasure idChkLineField; 


        /// <summary>
        /// Outer diameter of Choke Line. 
        /// </summary>
		[XmlElement("odChkLine")]

        public LengthMeasure OuterDiameterChkLine {
            get {
                return odChkLineField;
            } 
            set {
                odChkLineField = value;
                NotifyPropertyChanged("OuterDiameterChkLine");
            }
        }

        private LengthMeasure odChkLineField; 


        /// <summary>
        /// Length of Choke Line along riser. 
        /// </summary>
		[XmlElement("lenChkLine")]

        public LengthMeasure LenChkLine {
            get {
                return lenChkLineField;
            } 
            set {
                lenChkLineField = value;
                NotifyPropertyChanged("LenChkLine");
            }
        }

        private LengthMeasure lenChkLineField; 


        /// <summary>
        /// Inner diameter of Kill Line. 
        /// </summary>
		[XmlElement("idKillLine")]

        public LengthMeasure InnerDiameterKillLine {
            get {
                return idKillLineField;
            } 
            set {
                idKillLineField = value;
                NotifyPropertyChanged("InnerDiameterKillLine");
            }
        }

        private LengthMeasure idKillLineField; 


        /// <summary>
        /// Outer diameter of Kill Line. 
        /// </summary>
		[XmlElement("odKillLine")]

        public LengthMeasure OuterDiameterKillLine {
            get {
                return odKillLineField;
            } 
            set {
                odKillLineField = value;
                NotifyPropertyChanged("OuterDiameterKillLine");
            }
        }

        private LengthMeasure odKillLineField; 


        /// <summary>
        /// Length of Kill Line. 
        /// </summary>
		[XmlElement("lenKillLine")]

        public LengthMeasure LenKillLine {
            get {
                return lenKillLineField;
            } 
            set {
                lenKillLineField = value;
                NotifyPropertyChanged("LenKillLine");
            }
        }

        private LengthMeasure lenKillLineField; 


        /// <summary>
        /// Container element for Blow Out Preventer component schema elements. 
        /// </summary>
		[XmlElement("bopComponent")]

        public List<BopComponent> BopComponent {
            get {
                return bopComponentField;
            } 
            set {
                bopComponentField = value;
                NotifyPropertyChanged("BopComponent");
            }
        }

        private List<BopComponent> bopComponentField; 


        /// <summary>
        /// Diverter description. 
        /// </summary>
		[XmlElement("typeDiverter")]

        public String TypeDiverter {
            get {
                return typeDiverterField;
            } 
            set {
                typeDiverterField = value;
                NotifyPropertyChanged("TypeDiverter");
            }
        }

        private String typeDiverterField; 


        /// <summary>
        /// Diameter of diverter. 
        /// </summary>
		[XmlElement("diaDiverter")]

        public LengthMeasure DiaDiverter {
            get {
                return diaDiverterField;
            } 
            set {
                diaDiverterField = value;
                NotifyPropertyChanged("DiaDiverter");
            }
        }

        private LengthMeasure diaDiverterField; 


        /// <summary>
        /// Working rating pressure of the component. 
        /// </summary>
		[XmlElement("presWorkDiverter")]

        public PressureMeasure PresWorkDiverter {
            get {
                return presWorkDiverterField;
            } 
            set {
                presWorkDiverterField = value;
                NotifyPropertyChanged("PresWorkDiverter");
            }
        }

        private PressureMeasure presWorkDiverterField; 


        /// <summary>
        /// Type of accumulator/description. 
        /// </summary>
		[XmlElement("accumulator")]

        public String Accumulator {
            get {
                return accumulatorField;
            } 
            set {
                accumulatorField = value;
                NotifyPropertyChanged("Accumulator");
            }
        }

        private String accumulatorField; 


        /// <summary>
        /// Accumulator fluid capacity. 
        /// </summary>
		[XmlElement("capAccFluid")]

        public VolumeMeasure CapAccFluid {
            get {
                return capAccFluidField;
            } 
            set {
                capAccFluidField = value;
                NotifyPropertyChanged("CapAccFluid");
            }
        }

        private VolumeMeasure capAccFluidField; 


        /// <summary>
        /// Accumulator pre-charge pressure. 
        /// </summary>
		[XmlElement("presAccPreCharge")]

        public PressureMeasure PresAccPreCharge {
            get {
                return presAccPreChargeField;
            } 
            set {
                presAccPreChargeField = value;
                NotifyPropertyChanged("PresAccPreCharge");
            }
        }

        private PressureMeasure presAccPreChargeField; 


        /// <summary>
        /// Accumulator pre-charge volume
        /// </summary>
		[XmlElement("volAccPreCharge")]

        public VolumeMeasure VolAccPreCharge {
            get {
                return volAccPreChargeField;
            } 
            set {
                volAccPreChargeField = value;
                NotifyPropertyChanged("VolAccPreCharge");
            }
        }

        private VolumeMeasure volAccPreChargeField; 


        /// <summary>
        /// Accumulator operating pressure rating. 
        /// </summary>
		[XmlElement("presAccOpRating")]

        public PressureMeasure PresAccOperatingRating {
            get {
                return presAccOpRatingField;
            } 
            set {
                presAccOpRatingField = value;
                NotifyPropertyChanged("PresAccOperatingRating");
            }
        }

        private PressureMeasure presAccOpRatingField; 


        /// <summary>
        /// Blow Out Preventer Control System. 
        /// </summary>
		[XmlElement("typeControlManifold")]

        public String TypeControlManifold {
            get {
                return typeControlManifoldField;
            } 
            set {
                typeControlManifoldField = value;
                NotifyPropertyChanged("TypeControlManifold");
            }
        }

        private String typeControlManifoldField; 


        /// <summary>
        /// Description of control system. 
        /// </summary>
		[XmlElement("descControlManifold")]

        public String DescControlManifold {
            get {
                return descControlManifoldField;
            } 
            set {
                descControlManifoldField = value;
                NotifyPropertyChanged("DescControlManifold");
            }
        }

        private String descControlManifoldField; 


        /// <summary>
        /// Type of choke manifold. 
        /// </summary>
		[XmlElement("typeChokeManifold")]

        public String TypeChokeManifold {
            get {
                return typeChokeManifoldField;
            } 
            set {
                typeChokeManifoldField = value;
                NotifyPropertyChanged("TypeChokeManifold");
            }
        }

        private String typeChokeManifoldField; 


        /// <summary>
        /// Choke manifold pressure. 
        /// </summary>
		[XmlElement("presChokeManifold")]

        public PressureMeasure PresChokeManifold {
            get {
                return presChokeManifoldField;
            } 
            set {
                presChokeManifoldField = value;
                NotifyPropertyChanged("PresChokeManifold");
            }
        }

        private PressureMeasure presChokeManifoldField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Blow Out Preventer Component Schema.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bopComponent", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Blow Out Preventer Component Schema.")]
    public partial class BopComponent : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Type of ram/preventer. 
        /// </summary>
		[XmlElement("typeBopComp")]

        public BopType? TypeBopComp {
            get {
                return typeBopCompField;
            } 
            set {
                typeBopCompField = value;
                this.TypeBopCompSpecified = true;
                NotifyPropertyChanged("TypeBopComp");
            }
        }

        private BopType? typeBopCompField; 


		/// <summary>
        /// typeBopCompSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeBopCompSpecified {
            get {
                return typeBopCompSpecifiedField;
            } 
            set {
                typeBopCompSpecifiedField = value;
                NotifyPropertyChanged("TypeBopCompSpecified");
            }
        }

        private Boolean typeBopCompSpecifiedField; 


        /// <summary>
        /// Description of component. 
        /// </summary>
		[XmlElement("descComp")]

        public String DescComp {
            get {
                return descCompField;
            } 
            set {
                descCompField = value;
                NotifyPropertyChanged("DescComp");
            }
        }

        private String descCompField; 


        /// <summary>
        /// Inner diameter that tubulars can pass thru. 
        /// </summary>
		[XmlElement("idPassThru")]

        public LengthMeasure InnerDiameterPassThru {
            get {
                return idPassThruField;
            } 
            set {
                idPassThruField = value;
                NotifyPropertyChanged("InnerDiameterPassThru");
            }
        }

        private LengthMeasure idPassThruField; 


        /// <summary>
        /// Working rating pressure of the component. 
        /// </summary>
		[XmlElement("presWork")]

        public PressureMeasure PresWork {
            get {
                return presWorkField;
            } 
            set {
                presWorkField = value;
                NotifyPropertyChanged("PresWork");
            }
        }

        private PressureMeasure presWorkField; 


        /// <summary>
        /// Minimum diameter of component it will seal. 
        /// </summary>
		[XmlElement("diaCloseMn")]

        public LengthMeasure DiaCloseMin {
            get {
                return diaCloseMnField;
            } 
            set {
                diaCloseMnField = value;
                NotifyPropertyChanged("DiaCloseMin");
            }
        }

        private LengthMeasure diaCloseMnField; 


        /// <summary>
        /// Maximum diameter of component it will seal. 
        /// </summary>
		[XmlElement("diaCloseMx")]

        public LengthMeasure DiaCloseMax {
            get {
                return diaCloseMxField;
            } 
            set {
                diaCloseMxField = value;
                NotifyPropertyChanged("DiaCloseMax");
            }
        }

        private LengthMeasure diaCloseMxField; 


        /// <summary>
        /// Arrangement nomenclature for the Blow Out Preventer stack (e.g. S, R, A).
        /// </summary>
		[XmlElement("nomenclature")]

        public String Nomenclature {
            get {
                return nomenclatureField;
            } 
            set {
                nomenclatureField = value;
                NotifyPropertyChanged("Nomenclature");
            }
        }

        private String nomenclatureField; 


        /// <summary>
        /// Is Ram bore variable or single size? Defaults to false. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("isVariable")]

        public Boolean? IsVariable {
            get {
                return isVariableField;
            } 
            set {
                isVariableField = value;
                this.IsVariableSpecified = true;
                NotifyPropertyChanged("IsVariable");
            }
        }

        private Boolean? isVariableField; 


		/// <summary>
        /// isVariableSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean IsVariableSpecified {
            get {
                return isVariableSpecifiedField;
            } 
            set {
                isVariableSpecifiedField = value;
                NotifyPropertyChanged("IsVariableSpecified");
            }
        }

        private Boolean isVariableSpecifiedField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Rig Pit Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pit", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Rig Pit Component Schema ")]
    public partial class Pit : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Relative pit number of all pits on the rig. One-based. 
        /// </summary>
		[XmlElement("index")]

        public Int16? Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private Int16? indexField; 


        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[XmlElement("dTimInstall")]

        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private DateTime? dTimInstallField; 


		/// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private Boolean dTimInstallSpecifiedField; 


        /// <summary>
        /// Removal date and time. 
        /// </summary>
		[XmlElement("dTimRemove")]

        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private DateTime? dTimRemoveField; 


		/// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private Boolean dTimRemoveSpecifiedField; 


        /// <summary>
        /// Maximum pit capacity. 
        /// </summary>
		[XmlElement("capMx")]

        public VolumeMeasure CapMax {
            get {
                return capMxField;
            } 
            set {
                capMxField = value;
                NotifyPropertyChanged("CapMax");
            }
        }

        private VolumeMeasure capMxField; 


        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[XmlElement("owner")]

        public String Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String ownerField; 


        /// <summary>
        /// The type of pit. 
        /// </summary>
		[XmlElement("typePit")]

        public PitType? TypePit {
            get {
                return typePitField;
            } 
            set {
                typePitField = value;
                this.TypePitSpecified = true;
                NotifyPropertyChanged("TypePit");
            }
        }

        private PitType? typePitField; 


		/// <summary>
        /// typePitSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypePitSpecified {
            get {
                return typePitSpecifiedField;
            } 
            set {
                typePitSpecifiedField = value;
                NotifyPropertyChanged("TypePitSpecified");
            }
        }

        private Boolean typePitSpecifiedField; 


        /// <summary>
        /// Flag to indicate if Pit is part of the active system. Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[XmlElement("isActive")]

        public Boolean? IsActive {
            get {
                return isActiveField;
            } 
            set {
                isActiveField = value;
                this.IsActiveSpecified = true;
                NotifyPropertyChanged("IsActive");
            }
        }

        private Boolean? isActiveField; 


		/// <summary>
        /// isActiveSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean IsActiveSpecified {
            get {
                return isActiveSpecifiedField;
            } 
            set {
                isActiveSpecifiedField = value;
                NotifyPropertyChanged("IsActiveSpecified");
            }
        }

        private Boolean isActiveSpecifiedField; 


        /// <summary>
        /// An identification tag for the pit. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[XmlElement("nameTag")]

        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

        private List<NameTag> nameTagField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Rig Pump Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pump", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Rig Pump Component Schema ")]
    public partial class Pump : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Relative pump number. One-based. 
        /// </summary>
		[XmlElement("index")]

        public Int16? Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private Int16? indexField; 


        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[XmlElement("manufacturer")]

        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 


        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[XmlElement("model")]

        public String Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String modelField; 


        /// <summary>
        /// Date and time of pump installation. 
        /// </summary>
		[XmlElement("dTimInstall")]

        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private DateTime? dTimInstallField; 


		/// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private Boolean dTimInstallSpecifiedField; 


        /// <summary>
        /// Date and time the pump was removed.
        /// </summary>
		[XmlElement("dTimRemove")]

        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private DateTime? dTimRemoveField; 


		/// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private Boolean dTimRemoveSpecifiedField; 


        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[XmlElement("owner")]

        public String Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String ownerField; 


        /// <summary>
        /// Pump type reference list. 
        /// </summary>
		[XmlElement("typePump")]

        public PumpType? TypePump {
            get {
                return typePumpField;
            } 
            set {
                typePumpField = value;
                this.TypePumpSpecified = true;
                NotifyPropertyChanged("TypePump");
            }
        }

        private PumpType? typePumpField; 


		/// <summary>
        /// typePumpSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypePumpSpecified {
            get {
                return typePumpSpecifiedField;
            } 
            set {
                typePumpSpecifiedField = value;
                NotifyPropertyChanged("TypePumpSpecified");
            }
        }

        private Boolean typePumpSpecifiedField; 


        /// <summary>
        /// Number of cylinders (3=single acting, 2 = double acting) 
        /// </summary>
		[XmlElement("numCyl")]

        public Int16? NumCyl {
            get {
                return numCylField;
            } 
            set {
                numCylField = value;
                this.NumCylSpecified = true;
                NotifyPropertyChanged("NumCyl");
            }
        }

        private Int16? numCylField; 


		/// <summary>
        /// numCylSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumCylSpecified {
            get {
                return numCylSpecifiedField;
            } 
            set {
                numCylSpecifiedField = value;
                NotifyPropertyChanged("NumCylSpecified");
            }
        }

        private Boolean numCylSpecifiedField; 


        /// <summary>
        /// Rod outer diameter. 
        /// </summary>
		[XmlElement("odRod")]

        public LengthMeasure OuterDiameterRod {
            get {
                return odRodField;
            } 
            set {
                odRodField = value;
                NotifyPropertyChanged("OuterDiameterRod");
            }
        }

        private LengthMeasure odRodField; 


        /// <summary>
        /// Inner diameter of the pump liner. 
        /// </summary>
		[XmlElement("idLiner")]

        public LengthMeasure LinerSize {
            get {
                return idLinerField;
            } 
            set {
                idLinerField = value;
                NotifyPropertyChanged("LinerSize");
            }
        }

        private LengthMeasure idLinerField; 


        /// <summary>
        /// Pump action. 1 = Single acting, 2 = double acting. 
        /// </summary>
		[XmlElement("pumpAction")]

        public Int16? PumpAction {
            get {
                return pumpActionField;
            } 
            set {
                pumpActionField = value;
                this.PumpActionSpecified = true;
                NotifyPropertyChanged("PumpAction");
            }
        }

        private Int16? pumpActionField; 


		/// <summary>
        /// pumpActionSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PumpActionSpecified {
            get {
                return pumpActionSpecifiedField;
            } 
            set {
                pumpActionSpecifiedField = value;
                NotifyPropertyChanged("PumpActionSpecified");
            }
        }

        private Boolean pumpActionSpecifiedField; 


        /// <summary>
        /// Efficiency of the pump. 
        /// </summary>
		[XmlElement("eff")]

        public RelativePowerMeasure Eff {
            get {
                return effField;
            } 
            set {
                effField = value;
                NotifyPropertyChanged("Eff");
            }
        }

        private RelativePowerMeasure effField; 


        /// <summary>
        /// Stroke length. 
        /// </summary>
		[XmlElement("lenStroke")]

        public LengthMeasure LenStroke {
            get {
                return lenStrokeField;
            } 
            set {
                lenStrokeField = value;
                NotifyPropertyChanged("LenStroke");
            }
        }

        private LengthMeasure lenStrokeField; 


        /// <summary>
        /// Maximum pump pressure. 
        /// </summary>
		[XmlElement("presMx")]

        public PressureMeasure PresMax {
            get {
                return presMxField;
            } 
            set {
                presMxField = value;
                NotifyPropertyChanged("PresMax");
            }
        }

        private PressureMeasure presMxField; 


        /// <summary>
        /// Maximum hydraulics horsepower. 
        /// </summary>
		[XmlElement("powHydMx")]

        public PowerMeasure PowHydMax {
            get {
                return powHydMxField;
            } 
            set {
                powHydMxField = value;
                NotifyPropertyChanged("PowHydMax");
            }
        }

        private PowerMeasure powHydMxField; 


        /// <summary>
        /// Maximum Speed. 
        /// </summary>
		[XmlElement("spmMx")]

        public AnglePerTimeMeasure SpmMax {
            get {
                return spmMxField;
            } 
            set {
                spmMxField = value;
                NotifyPropertyChanged("SpmMax");
            }
        }

        private AnglePerTimeMeasure spmMxField; 


        /// <summary>
        ///  Pump displacement.
        /// </summary>
		[XmlElement("displacement")]

        public VolumeMeasure Displacement {
            get {
                return displacementField;
            } 
            set {
                displacementField = value;
                NotifyPropertyChanged("Displacement");
            }
        }

        private VolumeMeasure displacementField; 


        /// <summary>
        /// Pulsation dampener pressure. 
        /// </summary>
		[XmlElement("presDamp")]

        public PressureMeasure PresDamp {
            get {
                return presDampField;
            } 
            set {
                presDampField = value;
                NotifyPropertyChanged("PresDamp");
            }
        }

        private PressureMeasure presDampField; 


        /// <summary>
        /// Pulsation dampener volume. 
        /// </summary>
		[XmlElement("volDamp")]

        public VolumeMeasure VolDamp {
            get {
                return volDampField;
            } 
            set {
                volDampField = value;
                NotifyPropertyChanged("VolDamp");
            }
        }

        private VolumeMeasure volDampField; 


        /// <summary>
        /// Maximum mechanical power. 
        /// </summary>
		[XmlElement("powMechMx")]

        public PowerMeasure PowMechMax {
            get {
                return powMechMxField;
            } 
            set {
                powMechMxField = value;
                NotifyPropertyChanged("PowMechMax");
            }
        }

        private PowerMeasure powMechMxField; 


        /// <summary>
        /// An identification tag for the pump. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[XmlElement("nameTag")]

        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

        private List<NameTag> nameTagField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Rig Shaker Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shaker", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Rig Shaker Component Schema ")]
    public partial class Shaker : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the shaker.
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[XmlElement("manufacturer")]

        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 


        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[XmlElement("model")]

        public String Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String modelField; 


        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[XmlElement("dTimInstall")]

        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private DateTime? dTimInstallField; 


		/// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private Boolean dTimInstallSpecifiedField; 


        /// <summary>
        /// Removal date and time. 
        /// </summary>
		[XmlElement("dTimRemove")]

        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private DateTime? dTimRemoveField; 


		/// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private Boolean dTimRemoveSpecifiedField; 


        /// <summary>
        /// Description for the type of object. 
        /// </summary>
		[XmlElement("type")]

        public String Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String typeField; 


        /// <summary>
        /// Shaker location on rig. 
        /// </summary>
		[XmlElement("locationShaker")]

        public String LocationShaker {
            get {
                return locationShakerField;
            } 
            set {
                locationShakerField = value;
                NotifyPropertyChanged("LocationShaker");
            }
        }

        private String locationShakerField; 


        /// <summary>
        /// Number of decks. 
        /// </summary>
		[XmlElement("numDecks")]

        public Int16? NumDecks {
            get {
                return numDecksField;
            } 
            set {
                numDecksField = value;
                this.NumDecksSpecified = true;
                NotifyPropertyChanged("NumDecks");
            }
        }

        private Int16? numDecksField; 


		/// <summary>
        /// numDecksSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumDecksSpecified {
            get {
                return numDecksSpecifiedField;
            } 
            set {
                numDecksSpecifiedField = value;
                NotifyPropertyChanged("NumDecksSpecified");
            }
        }

        private Boolean numDecksSpecifiedField; 


        /// <summary>
        /// Number of cascade levels. 
        /// </summary>
		[XmlElement("numCascLevel")]

        public Int16? NumCascLevel {
            get {
                return numCascLevelField;
            } 
            set {
                numCascLevelField = value;
                this.NumCascLevelSpecified = true;
                NotifyPropertyChanged("NumCascLevel");
            }
        }

        private Int16? numCascLevelField; 


		/// <summary>
        /// numCascLevelSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumCascLevelSpecified {
            get {
                return numCascLevelSpecifiedField;
            } 
            set {
                numCascLevelSpecifiedField = value;
                NotifyPropertyChanged("NumCascLevelSpecified");
            }
        }

        private Boolean numCascLevelSpecifiedField; 


        /// <summary>
        /// Is part of mud cleaning assembly as opposed to discrete Shale Shaker. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("mudCleaner")]

        public Boolean? MudCleaner {
            get {
                return mudCleanerField;
            } 
            set {
                mudCleanerField = value;
                this.MudCleanerSpecified = true;
                NotifyPropertyChanged("MudCleaner");
            }
        }

        private Boolean? mudCleanerField; 


		/// <summary>
        /// mudCleanerSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MudCleanerSpecified {
            get {
                return mudCleanerSpecifiedField;
            } 
            set {
                mudCleanerSpecifiedField = value;
                NotifyPropertyChanged("MudCleanerSpecified");
            }
        }

        private Boolean mudCleanerSpecifiedField; 


        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
		[XmlElement("capFlow")]

        public VolumeFlowRateMeasure CapFlow {
            get {
                return capFlowField;
            } 
            set {
                capFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumeFlowRateMeasure capFlowField; 


        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[XmlElement("owner")]

        public String Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String ownerField; 


        /// <summary>
        /// Minimum mesh size. 
        /// </summary>
		[XmlElement("sizeMeshMn")]

        public LengthMeasure SizeMeshMin {
            get {
                return sizeMeshMnField;
            } 
            set {
                sizeMeshMnField = value;
                NotifyPropertyChanged("SizeMeshMin");
            }
        }

        private LengthMeasure sizeMeshMnField; 


        /// <summary>
        /// An identification tag for the shaker. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[XmlElement("nameTag")]

        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

        private List<NameTag> nameTagField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Rig Centrifuge Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_centrifuge", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Rig Centrifuge Component Schema ")]
    public partial class Centrifuge : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[XmlElement("manufacturer")]

        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 


        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[XmlElement("model")]

        public String Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String modelField; 


        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[XmlElement("dTimInstall")]

        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private DateTime? dTimInstallField; 


		/// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private Boolean dTimInstallSpecifiedField; 


        /// <summary>
        /// Removal date and time. 
        /// </summary>
		[XmlElement("dTimRemove")]

        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private DateTime? dTimRemoveField; 


		/// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private Boolean dTimRemoveSpecifiedField; 


        /// <summary>
        /// Description for the type of object. 
        /// </summary>
		[XmlElement("type")]

        public String Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String typeField; 


        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
		[XmlElement("capFlow")]

        public VolumeFlowRateMeasure CapFlow {
            get {
                return capFlowField;
            } 
            set {
                capFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumeFlowRateMeasure capFlowField; 


        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[XmlElement("owner")]

        public String Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String ownerField; 


        /// <summary>
        /// An identification tag for the centrifuge. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[XmlElement("nameTag")]

        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

        private List<NameTag> nameTagField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Rig HydroCyclones Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_hydrocyclone", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Rig HydroCyclones Component Schema ")]
    public partial class Hydrocyclone : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[XmlElement("manufacturer")]

        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 


        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[XmlElement("model")]

        public String Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String modelField; 


        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[XmlElement("dTimInstall")]

        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private DateTime? dTimInstallField; 


		/// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private Boolean dTimInstallSpecifiedField; 


        /// <summary>
        /// Removal date and time. 
        /// </summary>
		[XmlElement("dTimRemove")]

        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private DateTime? dTimRemoveField; 


		/// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private Boolean dTimRemoveSpecifiedField; 


        /// <summary>
        /// Description for the type of object. 
        /// </summary>
		[XmlElement("type")]

        public String Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String typeField; 


        /// <summary>
        /// Cones description. 
        /// </summary>
		[XmlElement("descCone")]

        public String DescCone {
            get {
                return descConeField;
            } 
            set {
                descConeField = value;
                NotifyPropertyChanged("DescCone");
            }
        }

        private String descConeField; 


        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[XmlElement("owner")]

        public String Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String ownerField; 


        /// <summary>
        /// An identification tag for the hydrocyclone. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[XmlElement("nameTag")]

        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

        private List<NameTag> nameTagField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Rig Degasser Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_degasser", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Rig Degasser Component Schema ")]
    public partial class Degasser : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[XmlElement("manufacturer")]

        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 


        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[XmlElement("model")]

        public String Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String modelField; 


        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[XmlElement("dTimInstall")]

        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private DateTime? dTimInstallField; 


		/// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private Boolean dTimInstallSpecifiedField; 


        /// <summary>
        /// Removal date and time. 
        /// </summary>
		[XmlElement("dTimRemove")]

        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private DateTime? dTimRemoveField; 


		/// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private Boolean dTimRemoveSpecifiedField; 


        /// <summary>
        /// Description for the type of object. 
        /// </summary>
		[XmlElement("type")]

        public String Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String typeField; 


        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[XmlElement("owner")]

        public String Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String ownerField; 


        /// <summary>
        /// Height of separator. 
        /// </summary>
		[XmlElement("height")]

        public LengthMeasure Height {
            get {
                return heightField;
            } 
            set {
                heightField = value;
                NotifyPropertyChanged("Height");
            }
        }

        private LengthMeasure heightField; 


        /// <summary>
        /// Length of separator. 
        /// </summary>
		[XmlElement("len")]

        public LengthMeasure Len {
            get {
                return lenField;
            } 
            set {
                lenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure lenField; 


        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
		[XmlElement("id")]

        public LengthMeasure InnerDiameter {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("InnerDiameter");
            }
        }

        private LengthMeasure idField; 


        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
		[XmlElement("capFlow")]

        public VolumeFlowRateMeasure CapFlow {
            get {
                return capFlowField;
            } 
            set {
                capFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumeFlowRateMeasure capFlowField; 


        /// <summary>
        /// Flow area of separator. 
        /// </summary>
		[XmlElement("areaSeparatorFlow")]

        public AreaMeasure AreaSeparatorFlow {
            get {
                return areaSeparatorFlowField;
            } 
            set {
                areaSeparatorFlowField = value;
                NotifyPropertyChanged("AreaSeparatorFlow");
            }
        }

        private AreaMeasure areaSeparatorFlowField; 


        /// <summary>
        /// Depth of trip-tank fluid level to provide back pressure against separator flow. 
        /// </summary>
		[XmlElement("htMudSeal")]

        public LengthMeasure HeightMudSeal {
            get {
                return htMudSealField;
            } 
            set {
                htMudSealField = value;
                NotifyPropertyChanged("HeightMudSeal");
            }
        }

        private LengthMeasure htMudSealField; 


        /// <summary>
        /// Internal diameter of inlet line. 
        /// </summary>
		[XmlElement("idInlet")]

        public LengthMeasure InnerDiameterInlet {
            get {
                return idInletField;
            } 
            set {
                idInletField = value;
                NotifyPropertyChanged("InnerDiameterInlet");
            }
        }

        private LengthMeasure idInletField; 


        /// <summary>
        /// Internal diameter of vent line. 
        /// </summary>
		[XmlElement("idVentLine")]

        public LengthMeasure InnerDiameterVentLine {
            get {
                return idVentLineField;
            } 
            set {
                idVentLineField = value;
                NotifyPropertyChanged("InnerDiameterVentLine");
            }
        }

        private LengthMeasure idVentLineField; 


        /// <summary>
        /// Length of vent line. 
        /// </summary>
		[XmlElement("lenVentLine")]

        public LengthMeasure LenVentLine {
            get {
                return lenVentLineField;
            } 
            set {
                lenVentLineField = value;
                NotifyPropertyChanged("LenVentLine");
            }
        }

        private LengthMeasure lenVentLineField; 


        /// <summary>
        /// Safe gas separating capacity. 
        /// </summary>
		[XmlElement("capGasSep")]

        public VolumeFlowRateMeasure CapGasSep {
            get {
                return capGasSepField;
            } 
            set {
                capGasSepField = value;
                NotifyPropertyChanged("CapGasSep");
            }
        }

        private VolumeFlowRateMeasure capGasSepField; 


        /// <summary>
        /// Gas vent rate at which the vent line pressure drop exceeds the hydrostatic head due to the mud seal. 
        /// </summary>
		[XmlElement("capBlowdown")]

        public VolumeFlowRateMeasure CapBlowdown {
            get {
                return capBlowdownField;
            } 
            set {
                capBlowdownField = value;
                NotifyPropertyChanged("CapBlowdown");
            }
        }

        private VolumeFlowRateMeasure capBlowdownField; 


        /// <summary>
        /// Pressure rating of the item. 
        /// </summary>
		[XmlElement("presRating")]

        public PressureMeasure PresRating {
            get {
                return presRatingField;
            } 
            set {
                presRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure presRatingField; 


        /// <summary>
        /// Temperature rating of separator. 
        /// </summary>
		[XmlElement("tempRating")]

        public ThermodynamicTemperatureMeasure TempRating {
            get {
                return tempRatingField;
            } 
            set {
                tempRatingField = value;
                NotifyPropertyChanged("TempRating");
            }
        }

        private ThermodynamicTemperatureMeasure tempRatingField; 


        /// <summary>
        /// An identification tag for the degasser. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[XmlElement("nameTag")]

        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

        private List<NameTag> nameTagField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Rig Surface Equipment Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_surfaceEquipment", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Rig Surface Equipment Component Schema ")]
    public partial class SurfaceEquipment : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// Pressure rating of the item. 
        /// </summary>
		[XmlElement("presRating")]

        public PressureMeasure PresRating {
            get {
                return presRatingField;
            } 
            set {
                presRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure presRatingField; 


        /// <summary>
        /// Surface equipment type (IADC1-4,Custom, Coiled Tubing). 
        /// </summary>
		[XmlElement("typeSurfEquip")]

        public SurfEquipType? TypeSurfEquip {
            get {
                return typeSurfEquipField;
            } 
            set {
                typeSurfEquipField = value;
                NotifyPropertyChanged("TypeSurfEquip");
            }
        }

        private SurfEquipType? typeSurfEquipField; 


        /// <summary>
        /// Use pump discharge Line. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("usePumpDischarge")]

        public Boolean? UsePumpDischarge {
            get {
                return usePumpDischargeField;
            } 
            set {
                usePumpDischargeField = value;
                this.UsePumpDischargeSpecified = true;
                NotifyPropertyChanged("UsePumpDischarge");
            }
        }

        private Boolean? usePumpDischargeField; 


		/// <summary>
        /// usePumpDischargeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean UsePumpDischargeSpecified {
            get {
                return usePumpDischargeSpecifiedField;
            } 
            set {
                usePumpDischargeSpecifiedField = value;
                NotifyPropertyChanged("UsePumpDischargeSpecified");
            }
        }

        private Boolean usePumpDischargeSpecifiedField; 


        /// <summary>
        /// Use standpipe geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("useStandpipe")]

        public Boolean? UseStandpipe {
            get {
                return useStandpipeField;
            } 
            set {
                useStandpipeField = value;
                this.UseStandpipeSpecified = true;
                NotifyPropertyChanged("UseStandpipe");
            }
        }

        private Boolean? useStandpipeField; 


		/// <summary>
        /// useStandpipeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean UseStandpipeSpecified {
            get {
                return useStandpipeSpecifiedField;
            } 
            set {
                useStandpipeSpecifiedField = value;
                NotifyPropertyChanged("UseStandpipeSpecified");
            }
        }

        private Boolean useStandpipeSpecifiedField; 


        /// <summary>
        /// Use kelly hose geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("useHose")]

        public Boolean? UseHose {
            get {
                return useHoseField;
            } 
            set {
                useHoseField = value;
                this.UseHoseSpecified = true;
                NotifyPropertyChanged("UseHose");
            }
        }

        private Boolean? useHoseField; 


		/// <summary>
        /// useHoseSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean UseHoseSpecified {
            get {
                return useHoseSpecifiedField;
            } 
            set {
                useHoseSpecifiedField = value;
                NotifyPropertyChanged("UseHoseSpecified");
            }
        }

        private Boolean useHoseSpecifiedField; 


        /// <summary>
        /// Use swivel geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("useSwivel")]

        public Boolean? UseSwivel {
            get {
                return useSwivelField;
            } 
            set {
                useSwivelField = value;
                this.UseSwivelSpecified = true;
                NotifyPropertyChanged("UseSwivel");
            }
        }

        private Boolean? useSwivelField; 


		/// <summary>
        /// useSwivelSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean UseSwivelSpecified {
            get {
                return useSwivelSpecifiedField;
            } 
            set {
                useSwivelSpecifiedField = value;
                NotifyPropertyChanged("UseSwivelSpecified");
            }
        }

        private Boolean useSwivelSpecifiedField; 


        /// <summary>
        /// Use kelly geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("useKelly")]

        public Boolean? UseKelly {
            get {
                return useKellyField;
            } 
            set {
                useKellyField = value;
                this.UseKellySpecified = true;
                NotifyPropertyChanged("UseKelly");
            }
        }

        private Boolean? useKellyField; 


		/// <summary>
        /// useKellySpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean UseKellySpecified {
            get {
                return useKellySpecifiedField;
            } 
            set {
                useKellySpecifiedField = value;
                NotifyPropertyChanged("UseKellySpecified");
            }
        }

        private Boolean useKellySpecifiedField; 


        /// <summary>
        /// Use top stack height. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("useTopStack")]

        public Boolean? UseTopStack {
            get {
                return useTopStackField;
            } 
            set {
                useTopStackField = value;
                this.UseTopStackSpecified = true;
                NotifyPropertyChanged("UseTopStack");
            }
        }

        private Boolean? useTopStackField; 


		/// <summary>
        /// useTopStackSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean UseTopStackSpecified {
            get {
                return useTopStackSpecifiedField;
            } 
            set {
                useTopStackSpecifiedField = value;
                NotifyPropertyChanged("UseTopStackSpecified");
            }
        }

        private Boolean useTopStackSpecifiedField; 


        /// <summary>
        /// Use injector stack height. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("useInjStack")]

        public Boolean? UseInjStack {
            get {
                return useInjStackField;
            } 
            set {
                useInjStackField = value;
                this.UseInjStackSpecified = true;
                NotifyPropertyChanged("UseInjStack");
            }
        }

        private Boolean? useInjStackField; 


		/// <summary>
        /// useInjStackSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean UseInjStackSpecified {
            get {
                return useInjStackSpecifiedField;
            } 
            set {
                useInjStackSpecifiedField = value;
                NotifyPropertyChanged("UseInjStackSpecified");
            }
        }

        private Boolean useInjStackSpecifiedField; 


        /// <summary>
        /// Use surface iron description. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("useSurfaceIron")]

        public Boolean? UseSurfaceIron {
            get {
                return useSurfaceIronField;
            } 
            set {
                useSurfaceIronField = value;
                this.UseSurfaceIronSpecified = true;
                NotifyPropertyChanged("UseSurfaceIron");
            }
        }

        private Boolean? useSurfaceIronField; 


		/// <summary>
        /// useSurfaceIronSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean UseSurfaceIronSpecified {
            get {
                return useSurfaceIronSpecifiedField;
            } 
            set {
                useSurfaceIronSpecifiedField = value;
                NotifyPropertyChanged("UseSurfaceIronSpecified");
            }
        }

        private Boolean useSurfaceIronSpecifiedField; 


        /// <summary>
        /// Inner diameter of standpipe. 
        /// </summary>
		[XmlElement("idStandpipe")]

        public LengthMeasure InnerDiameterStandpipe {
            get {
                return idStandpipeField;
            } 
            set {
                idStandpipeField = value;
                NotifyPropertyChanged("InnerDiameterStandpipe");
            }
        }

        private LengthMeasure idStandpipeField; 


        /// <summary>
        /// Length of standpipe. 
        /// </summary>
		[XmlElement("lenStandpipe")]

        public LengthMeasure LenStandpipe {
            get {
                return lenStandpipeField;
            } 
            set {
                lenStandpipeField = value;
                NotifyPropertyChanged("LenStandpipe");
            }
        }

        private LengthMeasure lenStandpipeField; 


        /// <summary>
        /// Inner diameter of kelly hose. 
        /// </summary>
		[XmlElement("idHose")]

        public LengthMeasure InnerDiameterHose {
            get {
                return idHoseField;
            } 
            set {
                idHoseField = value;
                NotifyPropertyChanged("InnerDiameterHose");
            }
        }

        private LengthMeasure idHoseField; 


        /// <summary>
        /// Length of kelly hose. 
        /// </summary>
		[XmlElement("lenHose")]

        public LengthMeasure LenHose {
            get {
                return lenHoseField;
            } 
            set {
                lenHoseField = value;
                NotifyPropertyChanged("LenHose");
            }
        }

        private LengthMeasure lenHoseField; 


        /// <summary>
        /// Inner diameter of swivel. 
        /// </summary>
		[XmlElement("idSwivel")]

        public LengthMeasure InnerDiameterSwivel {
            get {
                return idSwivelField;
            } 
            set {
                idSwivelField = value;
                NotifyPropertyChanged("InnerDiameterSwivel");
            }
        }

        private LengthMeasure idSwivelField; 


        /// <summary>
        /// Length of swivel. 
        /// </summary>
		[XmlElement("lenSwivel")]

        public LengthMeasure LenSwivel {
            get {
                return lenSwivelField;
            } 
            set {
                lenSwivelField = value;
                NotifyPropertyChanged("LenSwivel");
            }
        }

        private LengthMeasure lenSwivelField; 


        /// <summary>
        /// Inner diameter of kelly hose. 
        /// </summary>
		[XmlElement("idKelly")]

        public LengthMeasure InnerDiameterKelly {
            get {
                return idKellyField;
            } 
            set {
                idKellyField = value;
                NotifyPropertyChanged("InnerDiameterKelly");
            }
        }

        private LengthMeasure idKellyField; 


        /// <summary>
        /// Length of kelly. 
        /// </summary>
		[XmlElement("lenKelly")]

        public LengthMeasure LenKelly {
            get {
                return lenKellyField;
            } 
            set {
                lenKellyField = value;
                NotifyPropertyChanged("LenKelly");
            }
        }

        private LengthMeasure lenKellyField; 


        /// <summary>
        /// Inner diameter of surface iron. 
        /// </summary>
		[XmlElement("idSurfaceIron")]

        public LengthMeasure InnerDiameterSurfaceIron {
            get {
                return idSurfaceIronField;
            } 
            set {
                idSurfaceIronField = value;
                NotifyPropertyChanged("InnerDiameterSurfaceIron");
            }
        }

        private LengthMeasure idSurfaceIronField; 


        /// <summary>
        /// Length of surface iron. 
        /// </summary>
		[XmlElement("lenSurfaceIron")]

        public LengthMeasure LenSurfaceIron {
            get {
                return lenSurfaceIronField;
            } 
            set {
                lenSurfaceIronField = value;
                NotifyPropertyChanged("LenSurfaceIron");
            }
        }

        private LengthMeasure lenSurfaceIronField; 


        /// <summary>
        /// Height of surface iron. 
        /// </summary>
		[XmlElement("htSurfaceIron")]

        public LengthMeasure HeightSurfaceIron {
            get {
                return htSurfaceIronField;
            } 
            set {
                htSurfaceIronField = value;
                NotifyPropertyChanged("HeightSurfaceIron");
            }
        }

        private LengthMeasure htSurfaceIronField; 


        /// <summary>
        /// Coiled tubing - Inner diameter of pump discharge line. 
        /// </summary>
		[XmlElement("idDischargeLine")]

        public LengthMeasure InnerDiameterDischargeLine {
            get {
                return idDischargeLineField;
            } 
            set {
                idDischargeLineField = value;
                NotifyPropertyChanged("InnerDiameterDischargeLine");
            }
        }

        private LengthMeasure idDischargeLineField; 


        /// <summary>
        /// Coiled tubing - Length of pump discharge line. 
        /// </summary>
		[XmlElement("lenDischargeLine")]

        public LengthMeasure LenDischargeLine {
            get {
                return lenDischargeLineField;
            } 
            set {
                lenDischargeLineField = value;
                NotifyPropertyChanged("LenDischargeLine");
            }
        }

        private LengthMeasure lenDischargeLineField; 


        /// <summary>
        /// Coiled tubing - Coiled tubing wrap type. 
        /// </summary>
		[XmlElement("ctWrapType")]

        public String CTWrapType {
            get {
                return ctWrapTypeField;
            } 
            set {
                ctWrapTypeField = value;
                NotifyPropertyChanged("CTWrapType");
            }
        }

        private String ctWrapTypeField; 


        /// <summary>
        /// Coiled tubing - Specifies the OD of the coiled tubing reel. 
        /// </summary>
		[XmlElement("odReel")]

        public LengthMeasure OuterDiameterReel {
            get {
                return odReelField;
            } 
            set {
                odReelField = value;
                NotifyPropertyChanged("OuterDiameterReel");
            }
        }

        private LengthMeasure odReelField; 


        /// <summary>
        /// Coiled tubing - Outer diameter of the reel core that the coiled tubing is wrapped around. 
        /// </summary>
		[XmlElement("odCore")]

        public LengthMeasure OuterDiameterCore {
            get {
                return odCoreField;
            } 
            set {
                odCoreField = value;
                NotifyPropertyChanged("OuterDiameterCore");
            }
        }

        private LengthMeasure odCoreField; 


        /// <summary>
        /// Coiled tubing - Width of the reel core. This is the inside dimension. 
        /// </summary>
		[XmlElement("widReelWrap")]

        public LengthMeasure WidReelWrap {
            get {
                return widReelWrapField;
            } 
            set {
                widReelWrapField = value;
                NotifyPropertyChanged("WidReelWrap");
            }
        }

        private LengthMeasure widReelWrapField; 


        /// <summary>
        /// Coiled tubing - Length of the coiled tubing remaining on the reel. 
        /// </summary>
		[XmlElement("lenReel")]

        public LengthMeasure LenReel {
            get {
                return lenReelField;
            } 
            set {
                lenReelField = value;
                NotifyPropertyChanged("LenReel");
            }
        }

        private LengthMeasure lenReelField; 


        /// <summary>
        /// Coiled tubing - Injector Stack Up. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("injStkUp")]

        public Boolean? InjStkUp {
            get {
                return injStkUpField;
            } 
            set {
                injStkUpField = value;
                this.InjStkUpSpecified = true;
                NotifyPropertyChanged("InjStkUp");
            }
        }

        private Boolean? injStkUpField; 


		/// <summary>
        /// injStkUpSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean InjStkUpSpecified {
            get {
                return injStkUpSpecifiedField;
            } 
            set {
                injStkUpSpecifiedField = value;
                NotifyPropertyChanged("InjStkUpSpecified");
            }
        }

        private Boolean injStkUpSpecifiedField; 


        /// <summary>
        /// Coiled tubing -The length of tubing from the end of the coil reel to the rotary kelly bushing. Basically we define what is in the hole and on the reel. This measurement takes into account the 20 or so feet of tubing that is being straightened and shoved through the injector head. 
        /// </summary>
		[XmlElement("htInjStk")]

        public LengthMeasure HeightInjStk {
            get {
                return htInjStkField;
            } 
            set {
                htInjStkField = value;
                NotifyPropertyChanged("HeightInjStk");
            }
        }

        private LengthMeasure htInjStkField; 


        /// <summary>
        /// Coiled tubing - Umbilical inside, true/false check box so that you can account for the wireline inside the coiled tubing. With this pressure loss calculation, you can calculate for the strings used for logging, wire line coring, etc. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("umbInside")]

        public Boolean? UmbInside {
            get {
                return umbInsideField;
            } 
            set {
                umbInsideField = value;
                this.UmbInsideSpecified = true;
                NotifyPropertyChanged("UmbInside");
            }
        }

        private Boolean? umbInsideField; 


		/// <summary>
        /// umbInsideSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean UmbInsideSpecified {
            get {
                return umbInsideSpecifiedField;
            } 
            set {
                umbInsideSpecifiedField = value;
                NotifyPropertyChanged("UmbInsideSpecified");
            }
        }

        private Boolean umbInsideSpecifiedField; 


        /// <summary>
        /// Coiled tubing - Outer diameter of the umbilical. 
        /// </summary>
		[XmlElement("odUmbilical")]

        public LengthMeasure OuterDiameterUmbilical {
            get {
                return odUmbilicalField;
            } 
            set {
                odUmbilicalField = value;
                NotifyPropertyChanged("OuterDiameterUmbilical");
            }
        }

        private LengthMeasure odUmbilicalField; 


        /// <summary>
        /// Coiled tubing - Length of the umbilical. 
        /// </summary>
		[XmlElement("lenUmbilical")]

        public LengthMeasure LenUmbilical {
            get {
                return lenUmbilicalField;
            } 
            set {
                lenUmbilicalField = value;
                NotifyPropertyChanged("LenUmbilical");
            }
        }

        private LengthMeasure lenUmbilicalField; 


        /// <summary>
        /// Top drive - Inner diameter of top stack. 
        /// </summary>
		[XmlElement("idTopStk")]

        public LengthMeasure InnerDiameterTopStk {
            get {
                return idTopStkField;
            } 
            set {
                idTopStkField = value;
                NotifyPropertyChanged("InnerDiameterTopStk");
            }
        }

        private LengthMeasure idTopStkField; 


        /// <summary>
        /// Top drive - The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. We are measuring the distance that the mud will flow through the top drive. 
        /// </summary>
		[XmlElement("htTopStk")]

        public LengthMeasure HeightTopStk {
            get {
                return htTopStkField;
            } 
            set {
                htTopStkField = value;
                NotifyPropertyChanged("HeightTopStk");
            }
        }

        private LengthMeasure htTopStkField; 


        /// <summary>
        /// Height of flange. If you select Top Drive Stackup Height, Swivel and Kelly are disabled so that you can specify the top-drive rotary system. 
        /// </summary>
		[XmlElement("htFlange")]

        public LengthMeasure HeightFlange {
            get {
                return htFlangeField;
            } 
            set {
                htFlangeField = value;
                NotifyPropertyChanged("HeightFlange");
            }
        }

        private LengthMeasure htFlangeField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_risks xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("risks", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_risks xsd type.")]
    public partial class RiskList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single risk. 
        /// </summary>
		[XmlElement("risk")]

        public List<Risk> Risk {
            get {
                return riskField;
            } 
            set {
                riskField = value;
                NotifyPropertyChanged("Risk");
            }
        }

        private List<Risk> riskField; 


        /// <summary>
        /// A single risk. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Risk;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Risk object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_risk", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Risk object.")]
    public partial class Risk : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the risk. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the risk. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// A reference to an object that is defined within the context of a wellbore.
        /// </summary>
		[XmlElement("objectReference")]

        public RefObjectString ObjectReference {
            get {
                return objectReferenceField;
            } 
            set {
                objectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private RefObjectString objectReferenceField; 


        /// <summary>
        /// The type of risk.
        /// </summary>
		[XmlElement("type")]

        public RiskType? Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private RiskType? typeField; 


        /// <summary>
        /// The category of risk.
        /// </summary>
		[XmlElement("category")]

        public RiskCategory? Category {
            get {
                return categoryField;
            } 
            set {
                categoryField = value;
                NotifyPropertyChanged("Category");
            }
        }

        private RiskCategory? categoryField; 


        /// <summary>
        /// The sub category of risk.
        /// </summary>
		[XmlElement("subCategory")]

        public RiskSubCategory? SubCategory {
            get {
                return subCategoryField;
            } 
            set {
                subCategoryField = value;
                this.SubCategorySpecified = true;
                NotifyPropertyChanged("SubCategory");
            }
        }

        private RiskSubCategory? subCategoryField; 


		/// <summary>
        /// subCategorySpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean SubCategorySpecified {
            get {
                return subCategorySpecifiedField;
            } 
            set {
                subCategorySpecifiedField = value;
                NotifyPropertyChanged("SubCategorySpecified");
            }
        }

        private Boolean subCategorySpecifiedField; 


        /// <summary>
        /// Custom string to further categorize the risk.
        /// </summary>
		[XmlElement("extendCategory")]

        public String ExtendCategory {
            get {
                return extendCategoryField;
            } 
            set {
                extendCategoryField = value;
                NotifyPropertyChanged("ExtendCategory");
            }
        }

        private String extendCategoryField; 


        /// <summary>
        /// The personnel afected by the risk.
        /// </summary>
		[XmlElement("affectedPersonnel")]

        public List<RiskAffectedPersonnel> AffectedPersonnel {
            get {
                return affectedPersonnelField;
            } 
            set {
                affectedPersonnelField = value;
                NotifyPropertyChanged("AffectedPersonnel");
            }
        }

        private List<RiskAffectedPersonnel> affectedPersonnelField; 


        /// <summary>
        /// Date and time that activities started.
        /// </summary>
		[XmlElement("dTimStart")]

        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? dTimStartField; 


		/// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private Boolean dTimStartSpecifiedField; 


        /// <summary>
        /// Date and time that activities were completed.
        /// </summary>
		[XmlElement("dTimEnd")]

        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? dTimEndField; 


		/// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private Boolean dTimEndSpecifiedField; 


        /// <summary>
        /// Measured Depth at start of activity.
        /// </summary>
		[XmlElement("mdHoleStart")]

        public MeasuredDepthCoord MDHoleStart {
            get {
                return mdHoleStartField;
            } 
            set {
                mdHoleStartField = value;
                NotifyPropertyChanged("MDHoleStart");
            }
        }

        private MeasuredDepthCoord mdHoleStartField; 


        /// <summary>
        /// Measured Depth at end of activity.
        /// </summary>
		[XmlElement("mdHoleEnd")]

        public MeasuredDepthCoord MDHoleEnd {
            get {
                return mdHoleEndField;
            } 
            set {
                mdHoleEndField = value;
                NotifyPropertyChanged("MDHoleEnd");
            }
        }

        private MeasuredDepthCoord mdHoleEndField; 


        /// <summary>
        /// True Vertical Depth at start of activity.
        /// </summary>
		[XmlElement("tvdHoleStart")]

        public WellVerticalDepthCoord TvdHoleStart {
            get {
                return tvdHoleStartField;
            } 
            set {
                tvdHoleStartField = value;
                NotifyPropertyChanged("TvdHoleStart");
            }
        }

        private WellVerticalDepthCoord tvdHoleStartField; 


        /// <summary>
        /// True Vertical Depth at end of activity.
        /// </summary>
		[XmlElement("tvdHoleEnd")]

        public WellVerticalDepthCoord TvdHoleEnd {
            get {
                return tvdHoleEndField;
            } 
            set {
                tvdHoleEndField = value;
                NotifyPropertyChanged("TvdHoleEnd");
            }
        }

        private WellVerticalDepthCoord tvdHoleEndField; 


        /// <summary>
        /// Measured depth of bit at start of activity.
        /// </summary>
		[XmlElement("mdBitStart")]

        public MeasuredDepthCoord MDBitStart {
            get {
                return mdBitStartField;
            } 
            set {
                mdBitStartField = value;
                NotifyPropertyChanged("MDBitStart");
            }
        }

        private MeasuredDepthCoord mdBitStartField; 


        /// <summary>
        /// Measured depth of bit at end of activity.
        /// </summary>
		[XmlElement("mdBitEnd")]

        public MeasuredDepthCoord MDBitEnd {
            get {
                return mdBitEndField;
            } 
            set {
                mdBitEndField = value;
                NotifyPropertyChanged("MDBitEnd");
            }
        }

        private MeasuredDepthCoord mdBitEndField; 


        /// <summary>
        /// Hole diameter. 
        /// </summary>
		[XmlElement("diaHole")]

        public LengthMeasure DiaHole {
            get {
                return diaHoleField;
            } 
            set {
                diaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure diaHoleField; 


        /// <summary>
        /// Severity Level of the Risk. Values of 1 through 5 with 1 being the lowest.
        /// </summary>
		[XmlElement("severityLevel")]

        public Int16? SeverityLevel {
            get {
                return severityLevelField;
            } 
            set {
                severityLevelField = value;
                this.SeverityLevelSpecified = true;
                NotifyPropertyChanged("SeverityLevel");
            }
        }

        private Int16? severityLevelField; 


		/// <summary>
        /// severityLevelSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean SeverityLevelSpecified {
            get {
                return severityLevelSpecifiedField;
            } 
            set {
                severityLevelSpecifiedField = value;
                NotifyPropertyChanged("SeverityLevelSpecified");
            }
        }

        private Boolean severityLevelSpecifiedField; 


        /// <summary>
        /// Probability Level of the Risk. Values of 1 through 5 with 1 being the lowest.
        /// </summary>
		[XmlElement("probabilityLevel")]

        public Int16? ProbabilityLevel {
            get {
                return probabilityLevelField;
            } 
            set {
                probabilityLevelField = value;
                this.ProbabilityLevelSpecified = true;
                NotifyPropertyChanged("ProbabilityLevel");
            }
        }

        private Int16? probabilityLevelField; 


		/// <summary>
        /// probabilityLevelSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ProbabilityLevelSpecified {
            get {
                return probabilityLevelSpecifiedField;
            } 
            set {
                probabilityLevelSpecifiedField = value;
                NotifyPropertyChanged("ProbabilityLevelSpecified");
            }
        }

        private Boolean probabilityLevelSpecifiedField; 


        /// <summary>
        /// summary description of risk.
        /// </summary>
		[XmlElement("summary")]

        public String Summary {
            get {
                return summaryField;
            } 
            set {
                summaryField = value;
                NotifyPropertyChanged("Summary");
            }
        }

        private String summaryField; 


        /// <summary>
        /// Complete description of Risk.
        /// </summary>
		[XmlElement("details")]

        public String Details {
            get {
                return detailsField;
            } 
            set {
                detailsField = value;
                NotifyPropertyChanged("Details");
            }
        }

        private String detailsField; 


        /// <summary>
        /// Details for identifing the Risk.
        /// </summary>
		[XmlElement("identification")]

        public String Identification {
            get {
                return identificationField;
            } 
            set {
                identificationField = value;
                NotifyPropertyChanged("Identification");
            }
        }

        private String identificationField; 


        /// <summary>
        /// Plan of action if the Risk materializes.
        /// </summary>
		[XmlElement("contingency")]

        public String Contingency {
            get {
                return contingencyField;
            } 
            set {
                contingencyField = value;
                NotifyPropertyChanged("Contingency");
            }
        }

        private String contingencyField; 


        /// <summary>
        /// Plan of action to ensure the risk does not materialize.
        /// </summary>
		[XmlElement("mitigation")]

        public List<String> Mitigation {
            get {
                return mitigationField;
            } 
            set {
                mitigationField = value;
                NotifyPropertyChanged("Mitigation");
            }
        }

        private List<String> mitigationField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_sidewallCores xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("sidewallCores", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_sidewallCores xsd type.")]
    public partial class SidewallCoreList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single sidewall core. 
        /// </summary>
		[XmlElement("sidewallCore")]

        public List<SidewallCore> SidewallCore {
            get {
                return sidewallCoreField;
            } 
            set {
                sidewallCoreField = value;
                NotifyPropertyChanged("SidewallCore");
            }
        }

        private List<SidewallCore> sidewallCoreField; 


        /// <summary>
        /// A single sidewall core. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return SidewallCore;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Sidewall Core object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_sidewallCore", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Sidewall Core object.")]
    public partial class SidewallCore : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the sidewall core. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the sidewall core. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Date and time logging suite run in the hole. 
        /// </summary>
		[XmlElement("dTimToolRun")]

        public DateTime? DateTimeToolRun {
            get {
                return dTimToolRunField;
            } 
            set {
                dTimToolRunField = value;
                this.DateTimeToolRunSpecified = true;
                NotifyPropertyChanged("DateTimeToolRun");
            }
        }

        private DateTime? dTimToolRunField; 


		/// <summary>
        /// dTimToolRunSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeToolRunSpecified {
            get {
                return dTimToolRunSpecifiedField;
            } 
            set {
                dTimToolRunSpecifiedField = value;
                NotifyPropertyChanged("DateTimeToolRunSpecified");
            }
        }

        private Boolean dTimToolRunSpecifiedField; 


        /// <summary>
        /// Date and time logging suite pulled out of the hole. 
        /// </summary>
		[XmlElement("dTimToolPull")]

        public DateTime? DateTimeToolPull {
            get {
                return dTimToolPullField;
            } 
            set {
                dTimToolPullField = value;
                this.DateTimeToolPullSpecified = true;
                NotifyPropertyChanged("DateTimeToolPull");
            }
        }

        private DateTime? dTimToolPullField; 


		/// <summary>
        /// dTimToolPullSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeToolPullSpecified {
            get {
                return dTimToolPullSpecifiedField;
            } 
            set {
                dTimToolPullSpecifiedField = value;
                NotifyPropertyChanged("DateTimeToolPullSpecified");
            }
        }

        private Boolean dTimToolPullSpecifiedField; 


        /// <summary>
        /// Tool reference measured depth. 
        /// </summary>
		[XmlElement("mdToolReference")]

        public MeasuredDepthCoord MDToolReference {
            get {
                return mdToolReferenceField;
            } 
            set {
                mdToolReferenceField = value;
                NotifyPropertyChanged("MDToolReference");
            }
        }

        private MeasuredDepthCoord mdToolReferenceField; 


        /// <summary>
        /// Reference log information. 
        /// </summary>
		[XmlElement("coreReferenceLog")]

        public String CoreReferenceLog {
            get {
                return coreReferenceLogField;
            } 
            set {
                coreReferenceLogField = value;
                NotifyPropertyChanged("CoreReferenceLog");
            }
        }

        private String coreReferenceLogField; 


        /// <summary>
        /// Measured depth of core. 
        /// </summary>
		[XmlElement("mdCore")]

        public MeasuredDepthCoord MDCore {
            get {
                return mdCoreField;
            } 
            set {
                mdCoreField = value;
                NotifyPropertyChanged("MDCore");
            }
        }

        private MeasuredDepthCoord mdCoreField; 


        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
		[XmlElement("serviceCompany")]

        public String ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private String serviceCompanyField; 


        /// <summary>
        /// Analysis company 
        /// </summary>
		[XmlElement("analysisContractor")]

        public String AnalysisContractor {
            get {
                return analysisContractorField;
            } 
            set {
                analysisContractorField = value;
                NotifyPropertyChanged("AnalysisContractor");
            }
        }

        private String analysisContractorField; 


        /// <summary>
        /// Name of engineer analyzing sidewall core samples. 
        /// </summary>
		[XmlElement("analysisBy")]

        public String AnalysisBy {
            get {
                return analysisByField;
            } 
            set {
                analysisByField = value;
                NotifyPropertyChanged("AnalysisBy");
            }
        }

        private String analysisByField; 


        /// <summary>
        /// Sidewall coring tool description. 
        /// </summary>
		[XmlElement("sidewallCoringTool")]

        public String SidewallCoringTool {
            get {
                return sidewallCoringToolField;
            } 
            set {
                sidewallCoringToolField = value;
                NotifyPropertyChanged("SidewallCoringTool");
            }
        }

        private String sidewallCoringToolField; 


        /// <summary>
        /// Hole diameter. 
        /// </summary>
		[XmlElement("diaHole")]

        public LengthMeasure DiaHole {
            get {
                return diaHoleField;
            } 
            set {
                diaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure diaHoleField; 


        /// <summary>
        /// Diameter of plugs. 
        /// </summary>
		[XmlElement("diaPlug")]

        public LengthMeasure DiaPlug {
            get {
                return diaPlugField;
            } 
            set {
                diaPlugField = value;
                NotifyPropertyChanged("DiaPlug");
            }
        }

        private LengthMeasure diaPlugField; 


        /// <summary>
        /// Number of shots fired. 
        /// </summary>
		[XmlElement("numPlugsShot")]

        public Int16? NumPlugsShot {
            get {
                return numPlugsShotField;
            } 
            set {
                numPlugsShotField = value;
                this.NumPlugsShotSpecified = true;
                NotifyPropertyChanged("NumPlugsShot");
            }
        }

        private Int16? numPlugsShotField; 


		/// <summary>
        /// numPlugsShotSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumPlugsShotSpecified {
            get {
                return numPlugsShotSpecifiedField;
            } 
            set {
                numPlugsShotSpecifiedField = value;
                NotifyPropertyChanged("NumPlugsShotSpecified");
            }
        }

        private Boolean numPlugsShotSpecifiedField; 


        /// <summary>
        /// Number of recovered plugs. 
        /// </summary>
		[XmlElement("numRecPlugs")]

        public Int16? NumRecPlugs {
            get {
                return numRecPlugsField;
            } 
            set {
                numRecPlugsField = value;
                this.NumRecPlugsSpecified = true;
                NotifyPropertyChanged("NumRecPlugs");
            }
        }

        private Int16? numRecPlugsField; 


		/// <summary>
        /// numRecPlugsSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumRecPlugsSpecified {
            get {
                return numRecPlugsSpecifiedField;
            } 
            set {
                numRecPlugsSpecifiedField = value;
                NotifyPropertyChanged("NumRecPlugsSpecified");
            }
        }

        private Boolean numRecPlugsSpecifiedField; 


        /// <summary>
        /// Number of plugs that misfired. 
        /// </summary>
		[XmlElement("numMisfiredPlugs")]

        public Int16? NumMisfiredPlugs {
            get {
                return numMisfiredPlugsField;
            } 
            set {
                numMisfiredPlugsField = value;
                this.NumMisfiredPlugsSpecified = true;
                NotifyPropertyChanged("NumMisfiredPlugs");
            }
        }

        private Int16? numMisfiredPlugsField; 


		/// <summary>
        /// numMisfiredPlugsSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumMisfiredPlugsSpecified {
            get {
                return numMisfiredPlugsSpecifiedField;
            } 
            set {
                numMisfiredPlugsSpecifiedField = value;
                NotifyPropertyChanged("NumMisfiredPlugsSpecified");
            }
        }

        private Boolean numMisfiredPlugsSpecifiedField; 


        /// <summary>
        /// Number of plugs that fired OK but were empty. 
        /// </summary>
		[XmlElement("numEmptyPlugs")]

        public Int16? NumEmptyPlugs {
            get {
                return numEmptyPlugsField;
            } 
            set {
                numEmptyPlugsField = value;
                this.NumEmptyPlugsSpecified = true;
                NotifyPropertyChanged("NumEmptyPlugs");
            }
        }

        private Int16? numEmptyPlugsField; 


		/// <summary>
        /// numEmptyPlugsSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumEmptyPlugsSpecified {
            get {
                return numEmptyPlugsSpecifiedField;
            } 
            set {
                numEmptyPlugsSpecifiedField = value;
                NotifyPropertyChanged("NumEmptyPlugsSpecified");
            }
        }

        private Boolean numEmptyPlugsSpecifiedField; 


        /// <summary>
        /// Number of lost plugs. 
        /// </summary>
		[XmlElement("numLostPlugs")]

        public Int16? NumLostPlugs {
            get {
                return numLostPlugsField;
            } 
            set {
                numLostPlugsField = value;
                this.NumLostPlugsSpecified = true;
                NotifyPropertyChanged("NumLostPlugs");
            }
        }

        private Int16? numLostPlugsField; 


		/// <summary>
        /// numLostPlugsSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumLostPlugsSpecified {
            get {
                return numLostPlugsSpecifiedField;
            } 
            set {
                numLostPlugsSpecifiedField = value;
                NotifyPropertyChanged("NumLostPlugsSpecified");
            }
        }

        private Boolean numLostPlugsSpecifiedField; 


        /// <summary>
        /// Number of plugs paid for by client. 
        /// </summary>
		[XmlElement("numPaidPlugs")]

        public Int16? NumPaidPlugs {
            get {
                return numPaidPlugsField;
            } 
            set {
                numPaidPlugsField = value;
                this.NumPaidPlugsSpecified = true;
                NotifyPropertyChanged("NumPaidPlugs");
            }
        }

        private Int16? numPaidPlugsField; 


		/// <summary>
        /// numPaidPlugsSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumPaidPlugsSpecified {
            get {
                return numPaidPlugsSpecifiedField;
            } 
            set {
                numPaidPlugsSpecifiedField = value;
                NotifyPropertyChanged("NumPaidPlugsSpecified");
            }
        }

        private Boolean numPaidPlugsSpecifiedField; 


        /// <summary>
        /// Set of plug sample descriptions. 
        /// </summary>
		[XmlElement("swcSample")]

        public List<SwcSample> SwcSample {
            get {
                return swcSampleField;
            } 
            set {
                swcSampleField = value;
                NotifyPropertyChanged("SwcSample");
            }
        }

        private List<SwcSample> swcSampleField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Sidewall Core Sample Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_swcSample", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Sidewall Core Sample Component Schema")]
    public partial class SwcSample : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[XmlElement("md")]

        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 


        /// <summary>
        /// Set of Lithology records for the Interval 
        /// </summary>
		[XmlElement("lithology")]

        public Lithology Lithology {
            get {
                return lithologyField;
            } 
            set {
                lithologyField = value;
                NotifyPropertyChanged("Lithology");
            }
        }

        private Lithology lithologyField; 


        /// <summary>
        /// Show description for the plug. 
        /// </summary>
		[XmlElement("show")]

        public Show Show {
            get {
                return showField;
            } 
            set {
                showField = value;
                NotifyPropertyChanged("Show");
            }
        }

        private Show showField; 


        /// <summary>
        /// Name of formation penetrated. 
        /// </summary>
		[XmlElement("nameFormation")]

        public String NameFormation {
            get {
                return nameFormationField;
            } 
            set {
                nameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private String nameFormationField; 


        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_surveyPrograms xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("surveyPrograms", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_surveyPrograms xsd type.")]
    public partial class SurveyProgramList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single survey program . 
        /// </summary>
		[XmlElement("surveyProgram")]

        public List<SurveyProgram> SurveyProgram {
            get {
                return surveyProgramField;
            } 
            set {
                surveyProgramField = value;
                NotifyPropertyChanged("SurveyProgram");
            }
        }

        private List<SurveyProgram> surveyProgramField; 


        /// <summary>
        /// A single survey program . 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return SurveyProgram;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Survey Program object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_surveyProgram", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Survey Program object.")]
    public partial class SurveyProgram : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the survey program. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the survey program. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Survey version number, incremented every time the program is modified. 
        /// </summary>
		[XmlElement("surveyVer")]

        public Int16? SurveyVer {
            get {
                return surveyVerField;
            } 
            set {
                surveyVerField = value;
                NotifyPropertyChanged("SurveyVer");
            }
        }

        private Int16? surveyVerField; 


        /// <summary>
        /// Date and time trajectory program was created or edited. 
        /// </summary>
		[XmlElement("dTimTrajProg")]

        public DateTime? DateTimeTrajProg {
            get {
                return dTimTrajProgField;
            } 
            set {
                dTimTrajProgField = value;
                this.DateTimeTrajProgSpecified = true;
                NotifyPropertyChanged("DateTimeTrajProg");
            }
        }

        private DateTime? dTimTrajProgField; 


		/// <summary>
        /// dTimTrajProgSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeTrajProgSpecified {
            get {
                return dTimTrajProgSpecifiedField;
            } 
            set {
                dTimTrajProgSpecifiedField = value;
                NotifyPropertyChanged("DateTimeTrajProgSpecified");
            }
        }

        private Boolean dTimTrajProgSpecifiedField; 


        /// <summary>
        /// Name of engineer. 
        /// </summary>
		[XmlElement("engineer")]

        public String Engineer {
            get {
                return engineerField;
            } 
            set {
                engineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private String engineerField; 


        /// <summary>
        /// Is program a final or intermediate/preliminary? 
        /// </summary>
		[XmlElement("final")]

        public String Final {
            get {
                return finalField;
            } 
            set {
                finalField = value;
                NotifyPropertyChanged("Final");
            }
        }

        private String finalField; 


        /// <summary>
        /// Survey section object. 
        /// </summary>
		[XmlElement("surveySection")]

        public List<SurveySection> SurveySection {
            get {
                return surveySectionField;
            } 
            set {
                surveySectionField = value;
                NotifyPropertyChanged("SurveySection");
            }
        }

        private List<SurveySection> surveySectionField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Survey Section Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_surveySection", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Survey Section Component Schema ")]
    public partial class SurveySection : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Order in which program sections will be executed / were executed. 
        /// </summary>
		[XmlElement("sequence")]

        public Int16? Sequence {
            get {
                return sequenceField;
            } 
            set {
                sequenceField = value;
                NotifyPropertyChanged("Sequence");
            }
        }

        private Int16? sequenceField; 


        /// <summary>
        /// Name of survey program section. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Hole measured depth at which the survey run will begin/began. 
        /// </summary>
		[XmlElement("mdStart")]

        public MeasuredDepthCoord MDStart {
            get {
                return mdStartField;
            } 
            set {
                mdStartField = value;
                NotifyPropertyChanged("MDStart");
            }
        }

        private MeasuredDepthCoord mdStartField; 


        /// <summary>
        /// Hole measured depth at which the survey run will end/ended. 
        /// </summary>
		[XmlElement("mdEnd")]

        public MeasuredDepthCoord MDEnd {
            get {
                return mdEndField;
            } 
            set {
                mdEndField = value;
                NotifyPropertyChanged("MDEnd");
            }
        }

        private MeasuredDepthCoord mdEndField; 


        /// <summary>
        /// Company who will run / has run sruvey tool. 
        /// </summary>
		[XmlElement("nameSurveyCompany")]

        public String NameSurveyCompany {
            get {
                return nameSurveyCompanyField;
            } 
            set {
                nameSurveyCompanyField = value;
                NotifyPropertyChanged("NameSurveyCompany");
            }
        }

        private String nameSurveyCompanyField; 


        /// <summary>
        /// Name of survey tool to be used / used for this section. 
        /// </summary>
		[XmlElement("nameTool")]

        public String NameTool {
            get {
                return nameToolField;
            } 
            set {
                nameToolField = value;
                NotifyPropertyChanged("NameTool");
            }
        }

        private String nameToolField; 


        /// <summary>
        /// Type of tool used. 
        /// </summary>
		[XmlElement("typeTool")]

        public String TypeTool {
            get {
                return typeToolField;
            } 
            set {
                typeToolField = value;
                NotifyPropertyChanged("TypeTool");
            }
        }

        private String typeToolField; 


        /// <summary>
        /// Error model used to calculate ellipses of uncertainty. 
        /// </summary>
		[XmlElement("modelError")]

        public String ModelError {
            get {
                return modelErrorField;
            } 
            set {
                modelErrorField = value;
                NotifyPropertyChanged("ModelError");
            }
        }

        private String modelErrorField; 


        /// <summary>
        /// Normally true, higher index trajectory takes precedence over overlapping section of previous trajectory. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("overwrite")]

        public Boolean? Overwrite {
            get {
                return overwriteField;
            } 
            set {
                overwriteField = value;
                this.OverwriteSpecified = true;
                NotifyPropertyChanged("Overwrite");
            }
        }

        private Boolean? overwriteField; 


		/// <summary>
        /// overwriteSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean OverwriteSpecified {
            get {
                return overwriteSpecifiedField;
            } 
            set {
                overwriteSpecifiedField = value;
                NotifyPropertyChanged("OverwriteSpecified");
            }
        }

        private Boolean overwriteSpecifiedField; 


        /// <summary>
        /// Maximum allowable depth frequency for survey stations for this survey run. 
        /// </summary>
		[XmlElement("frequencyMx")]

        public LengthMeasure FrequencyMax {
            get {
                return frequencyMxField;
            } 
            set {
                frequencyMxField = value;
                NotifyPropertyChanged("FrequencyMax");
            }
        }

        private LengthMeasure frequencyMxField; 


        /// <summary>
        /// The item state for the data object. 
        /// </summary>
		[XmlElement("itemState")]

        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set {
                itemStateField = value;
                this.ItemStateSpecified = true;
                NotifyPropertyChanged("ItemState");
            }
        }

        private ItemState? itemStateField; 


		/// <summary>
        /// itemStateSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ItemStateSpecified {
            get {
                return itemStateSpecifiedField;
            } 
            set {
                itemStateSpecifiedField = value;
                NotifyPropertyChanged("ItemStateSpecified");
            }
        }

        private Boolean itemStateSpecifiedField; 


        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_targets xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("targets", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_targets xsd type.")]
    public partial class TargetList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single target. 
        /// </summary>
		[XmlElement("target")]

        public List<Target> Target {
            get {
                return targetField;
            } 
            set {
                targetField = value;
                NotifyPropertyChanged("Target");
            }
        }

        private List<Target> targetField; 


        /// <summary>
        /// A single target. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Target;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Target object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_target", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Target object.")]
    public partial class Target : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the target. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the target. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// A pointer to the parent target. This represents a relationship between a drillers and geological target. 
        /// </summary>
		[XmlElement("parentTarget")]

        public RefNameString ParentTarget {
            get {
                return parentTargetField;
            } 
            set {
                parentTargetField = value;
                NotifyPropertyChanged("ParentTarget");
            }
        }

        private RefNameString parentTargetField; 


        /// <summary>
        /// Northing of target center point in map coordinates. 
        /// </summary>
		[XmlElement("dispNsCenter")]

        public LengthMeasure DispNSCenter {
            get {
                return dispNsCenterField;
            } 
            set {
                dispNsCenterField = value;
                NotifyPropertyChanged("DispNSCenter");
            }
        }

        private LengthMeasure dispNsCenterField; 


        /// <summary>
        /// Easting of target center point in map coordinates. 
        /// </summary>
		[XmlElement("dispEwCenter")]

        public LengthMeasure DispEWCenter {
            get {
                return dispEwCenterField;
            } 
            set {
                dispEwCenterField = value;
                NotifyPropertyChanged("DispEWCenter");
            }
        }

        private LengthMeasure dispEwCenterField; 


        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
		[XmlElement("tvd")]

        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 


        /// <summary>
        /// North-south offset of target intercept point from shape center. 
        /// </summary>
		[XmlElement("dispNsOffset")]

        public LengthMeasure DispNSOffset {
            get {
                return dispNsOffsetField;
            } 
            set {
                dispNsOffsetField = value;
                NotifyPropertyChanged("DispNSOffset");
            }
        }

        private LengthMeasure dispNsOffsetField; 


        /// <summary>
        /// East-west offset of target intercept point from shape center. 
        /// </summary>
		[XmlElement("dispEwOffset")]

        public LengthMeasure DispEWOffset {
            get {
                return dispEwOffsetField;
            } 
            set {
                dispEwOffsetField = value;
                NotifyPropertyChanged("DispEWOffset");
            }
        }

        private LengthMeasure dispEwOffsetField; 


        /// <summary>
        /// Height of target above center point. 
        /// </summary>
		[XmlElement("thickAbove")]

        public LengthMeasure ThickAbove {
            get {
                return thickAboveField;
            } 
            set {
                thickAboveField = value;
                NotifyPropertyChanged("ThickAbove");
            }
        }

        private LengthMeasure thickAboveField; 


        /// <summary>
        /// Depth of target below center point. 
        /// </summary>
		[XmlElement("thickBelow")]

        public LengthMeasure ThickBelow {
            get {
                return thickBelowField;
            } 
            set {
                thickBelowField = value;
                NotifyPropertyChanged("ThickBelow");
            }
        }

        private LengthMeasure thickBelowField; 


        /// <summary>
        /// Angle of dip with respect to horizontal. 
        /// </summary>
		[XmlElement("dip")]

        public PlaneAngleMeasure Dip {
            get {
                return dipField;
            } 
            set {
                dipField = value;
                NotifyPropertyChanged("Dip");
            }
        }

        private PlaneAngleMeasure dipField; 


        /// <summary>
        /// Direction of dip with respect to north azimuth reference. 
        /// </summary>
		[XmlElement("strike")]

        public PlaneAngleMeasure Strike {
            get {
                return strikeField;
            } 
            set {
                strikeField = value;
                NotifyPropertyChanged("Strike");
            }
        }

        private PlaneAngleMeasure strikeField; 


        /// <summary>
        /// Direction of target geometry with respect to north azimuth reference. 
        /// </summary>
		[XmlElement("rotation")]

        public PlaneAngleMeasure Rotation {
            get {
                return rotationField;
            } 
            set {
                rotationField = value;
                NotifyPropertyChanged("Rotation");
            }
        }

        private PlaneAngleMeasure rotationField; 


        /// <summary>
        /// Distance from center to perimeter in rotation direction. This may be ignored depending on the value of typeTargetScope.
        /// </summary>
		[XmlElement("lenMajorAxis")]

        public LengthMeasure LenMajorAxis {
            get {
                return lenMajorAxisField;
            } 
            set {
                lenMajorAxisField = value;
                NotifyPropertyChanged("LenMajorAxis");
            }
        }

        private LengthMeasure lenMajorAxisField; 


        /// <summary>
        /// Distance from center to perimeter at 90 deg to rotation direction. This may be ignored depending on the value of typeTargetScope. 
        /// </summary>
		[XmlElement("widMinorAxis")]

        public LengthMeasure WidMinorAxis {
            get {
                return widMinorAxisField;
            } 
            set {
                widMinorAxisField = value;
                NotifyPropertyChanged("WidMinorAxis");
            }
        }

        private LengthMeasure widMinorAxisField; 


        /// <summary>
        /// The type of scope of the drilling target.
        /// </summary>
		[XmlElement("typeTargetScope")]

        public TargetScope? TypeTargetScope {
            get {
                return typeTargetScopeField;
            } 
            set {
                typeTargetScopeField = value;
                this.TypeTargetScopeSpecified = true;
                NotifyPropertyChanged("TypeTargetScope");
            }
        }

        private TargetScope? typeTargetScopeField; 


		/// <summary>
        /// typeTargetScopeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeTargetScopeSpecified {
            get {
                return typeTargetScopeSpecifiedField;
            } 
            set {
                typeTargetScopeSpecifiedField = value;
                NotifyPropertyChanged("TypeTargetScopeSpecified");
            }
        }

        private Boolean typeTargetScopeSpecifiedField; 


        /// <summary>
        /// Origin north-south used as starting point for sections, mandatory parameter when sections are used.. 
        /// </summary>
		[XmlElement("dispNsSectOrig")]

        public LengthMeasure DispNSSectOrig {
            get {
                return dispNsSectOrigField;
            } 
            set {
                dispNsSectOrigField = value;
                NotifyPropertyChanged("DispNSSectOrig");
            }
        }

        private LengthMeasure dispNsSectOrigField; 


        /// <summary>
        /// Origin east-west used as starting point for sections, mandatory parameter when sections are used. 
        /// </summary>
		[XmlElement("dispEwSectOrig")]

        public LengthMeasure DispEWSectOrig {
            get {
                return dispEwSectOrigField;
            } 
            set {
                dispEwSectOrigField = value;
                NotifyPropertyChanged("DispEWSectOrig");
            }
        }

        private LengthMeasure dispEwSectOrigField; 


        /// <summary>
        /// Specifies the definition of north. 
        /// </summary>
		[XmlElement("aziRef")]

        public AziRef? AziRef {
            get {
                return aziRefField;
            } 
            set {
                aziRefField = value;
                this.AziRefSpecified = true;
                NotifyPropertyChanged("AziRef");
            }
        }

        private AziRef? aziRefField; 


		/// <summary>
        /// aziRefSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean AziRefSpecified {
            get {
                return aziRefSpecifiedField;
            } 
            set {
                aziRefSpecifiedField = value;
                NotifyPropertyChanged("AziRefSpecified");
            }
        }

        private Boolean aziRefSpecifiedField; 


        /// <summary>
        /// Geological or drillers target. 
        /// </summary>
		[XmlElement("catTarg")]

        public TargetCategory? CatTarg {
            get {
                return catTargField;
            } 
            set {
                catTargField = value;
                this.CatTargSpecified = true;
                NotifyPropertyChanged("CatTarg");
            }
        }

        private TargetCategory? catTargField; 


		/// <summary>
        /// catTargSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CatTargSpecified {
            get {
                return catTargSpecifiedField;
            } 
            set {
                catTargSpecifiedField = value;
                NotifyPropertyChanged("CatTargSpecified");
            }
        }

        private Boolean catTargSpecifiedField; 


        /// <summary>
        /// The 2D coordinates of the item at the start of the section. The location object is mandatory for the first section starting point. 
        /// </summary>
		[XmlElement("location")]

        public List<Location> Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                NotifyPropertyChanged("Location");
            }
        }

        private List<Location> locationField; 


        /// <summary>
        /// Sections describing target. These may be ignored depending on the value of typeTargetScope. 
        /// </summary>
		[XmlElement("targetSection")]

        public List<TargetSection> TargetSection {
            get {
                return targetSectionField;
            } 
            set {
                targetSectionField = value;
                NotifyPropertyChanged("TargetSection");
            }
        }

        private List<TargetSection> targetSectionField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML Element Types
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_targetSection", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML Element Types")]
    public partial class TargetSection : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Sequence number of section, 1,2,3. 
        /// </summary>
		[XmlElement("sectNumber")]

        public Int16? SectNumber {
            get {
                return sectNumberField;
            } 
            set {
                sectNumberField = value;
                NotifyPropertyChanged("SectNumber");
            }
        }

        private Int16? sectNumberField; 


        /// <summary>
        /// Section scope: Line or Arc. 
        /// </summary>
		[XmlElement("typeTargetSectionScope")]

        public TargetSectionScope? TypeTargetSectionScope {
            get {
                return typeTargetSectionScopeField;
            } 
            set {
                typeTargetSectionScopeField = value;
                NotifyPropertyChanged("TypeTargetSectionScope");
            }
        }

        private TargetSectionScope? typeTargetSectionScopeField; 


        /// <summary>
        /// Length of straight line section or radius of arc for continuous curve section. 
        /// </summary>
		[XmlElement("lenRadius")]

        public LengthMeasure LenRadius {
            get {
                return lenRadiusField;
            } 
            set {
                lenRadiusField = value;
                NotifyPropertyChanged("LenRadius");
            }
        }

        private LengthMeasure lenRadiusField; 


        /// <summary>
        /// Direction of straight line section or radius of arc for continuous curve section. 
        /// </summary>
		[XmlElement("angleArc")]

        public PlaneAngleMeasure AngleArc {
            get {
                return angleArcField;
            } 
            set {
                angleArcField = value;
                NotifyPropertyChanged("AngleArc");
            }
        }

        private PlaneAngleMeasure angleArcField; 


        /// <summary>
        /// Height of target above center point at the start of the section. In the case of an arc, the thickness above should vary linearly with the arc length. 
        /// </summary>
		[XmlElement("thickAbove")]

        public LengthMeasure ThickAbove {
            get {
                return thickAboveField;
            } 
            set {
                thickAboveField = value;
                NotifyPropertyChanged("ThickAbove");
            }
        }

        private LengthMeasure thickAboveField; 


        /// <summary>
        /// Depth of target below center point at the start of the section. In the case of an arc, the thickness below should vary linearly with the arc length. 
        /// </summary>
		[XmlElement("thickBelow")]

        public LengthMeasure ThickBelow {
            get {
                return thickBelowField;
            } 
            set {
                thickBelowField = value;
                NotifyPropertyChanged("ThickBelow");
            }
        }

        private LengthMeasure thickBelowField; 


        /// <summary>
        /// The 2D coordinates of the item at the start of the section. This is redundant information and can be computed by starting at the section origin and applying the sequence of angleArcs and lenRadius. 
        /// </summary>
		[XmlElement("location")]

        public List<Location> Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                NotifyPropertyChanged("Location");
            }
        }

        private List<Location> locationField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_trajectorys xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("trajectorys", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_trajectorys xsd type.")]
    public partial class TrajectoryList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single trajectory. 
        /// </summary>
		[XmlElement("trajectory")]

        public List<Trajectory> Trajectory {
            get {
                return trajectoryField;
            } 
            set {
                trajectoryField = value;
                NotifyPropertyChanged("Trajectory");
            }
        }

        private List<Trajectory> trajectoryField; 


        /// <summary>
        /// A single trajectory. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Trajectory;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Trajectory object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_trajectory", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Trajectory object.")]
    public partial class Trajectory : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the trajectory. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the trajectory. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Whether or not the trajectory is growing. True ("true" or "1") indicates the that the trajectory is still growing in size (that is, trajectoryStation values are still being added). For example, it may be connected to a realtime stream. False ("false" or "0") indicates that the trajectory is closed (that is, no further trajectoryStation values will be added). Not given indicates that the status of the trajectory is not known. This value is only relevant within the context of a server.
        /// </summary>
		[XmlElement("objectGrowing")]

        public Boolean? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set {
                objectGrowingField = value;
                this.ObjectGrowingSpecified = true;
                NotifyPropertyChanged("ObjectGrowing");
            }
        }

        private Boolean? objectGrowingField; 


		/// <summary>
        /// objectGrowingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ObjectGrowingSpecified {
            get {
                return objectGrowingSpecifiedField;
            } 
            set {
                objectGrowingSpecifiedField = value;
                NotifyPropertyChanged("ObjectGrowingSpecified");
            }
        }

        private Boolean objectGrowingSpecifiedField; 


        /// <summary>
        /// If a trajectory is tied into another trajectory, a pointer to the parent trajectory. The trajectory may be in another wellbore.
        /// </summary>
		[XmlElement("parentTrajectory")]

        public RefWellboreTrajectory ParentTrajectory {
            get {
                return parentTrajectoryField;
            } 
            set {
                parentTrajectoryField = value;
                NotifyPropertyChanged("ParentTrajectory");
            }
        }

        private RefWellboreTrajectory parentTrajectoryField; 


        /// <summary>
        /// Start date and time of trajectory station measurements. Note that this is NOT a server query parameter.
        /// </summary>
		[XmlElement("dTimTrajStart")]

        public DateTime? DateTimeTrajStart {
            get {
                return dTimTrajStartField;
            } 
            set {
                dTimTrajStartField = value;
                this.DateTimeTrajStartSpecified = true;
                NotifyPropertyChanged("DateTimeTrajStart");
            }
        }

        private DateTime? dTimTrajStartField; 


		/// <summary>
        /// dTimTrajStartSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeTrajStartSpecified {
            get {
                return dTimTrajStartSpecifiedField;
            } 
            set {
                dTimTrajStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeTrajStartSpecified");
            }
        }

        private Boolean dTimTrajStartSpecifiedField; 


        /// <summary>
        /// End date and time of trajectory station measurements. Note that this is NOT a server query parameter.
        /// </summary>
		[XmlElement("dTimTrajEnd")]

        public DateTime? DateTimeTrajEnd {
            get {
                return dTimTrajEndField;
            } 
            set {
                dTimTrajEndField = value;
                this.DateTimeTrajEndSpecified = true;
                NotifyPropertyChanged("DateTimeTrajEnd");
            }
        }

        private DateTime? dTimTrajEndField; 


		/// <summary>
        /// dTimTrajEndSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeTrajEndSpecified {
            get {
                return dTimTrajEndSpecifiedField;
            } 
            set {
                dTimTrajEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeTrajEndSpecified");
            }
        }

        private Boolean dTimTrajEndSpecifiedField; 


        /// <summary>
        /// Minimum measured depth of trajectory. This is a query parameter. It's value will be populated by the server to reflect the values of md in the returned trajectoryStations.
        /// </summary>
		[XmlElement("mdMn")]

        public MeasuredDepthCoord MDMin {
            get {
                return mdMnField;
            } 
            set {
                mdMnField = value;
                NotifyPropertyChanged("MDMin");
            }
        }

        private MeasuredDepthCoord mdMnField; 


        /// <summary>
        /// Maximum measured depth of trajectory. This is a query parameter. It's value will be populated by the server to reflect the values of md in the returned trajectoryStations.
        /// </summary>
		[XmlElement("mdMx")]

        public MeasuredDepthCoord MDMax {
            get {
                return mdMxField;
            } 
            set {
                mdMxField = value;
                NotifyPropertyChanged("MDMax");
            }
        }

        private MeasuredDepthCoord mdMxField; 


        /// <summary>
        /// Name of contractor who provided the service.
        /// </summary>
		[XmlElement("serviceCompany")]

        public String ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private String serviceCompanyField; 


        /// <summary>
        /// Magnetic declination used to correct a magnetic survey. Starting value if stations have individual values. 
        /// </summary>
		[XmlElement("magDeclUsed")]

        public PlaneAngleMeasure MagDeclUsed {
            get {
                return magDeclUsedField;
            } 
            set {
                magDeclUsedField = value;
                NotifyPropertyChanged("MagDeclUsed");
            }
        }

        private PlaneAngleMeasure magDeclUsedField; 


        /// <summary>
        /// Grid correction used to correct a survey. Starting value if stations have individual values.
        /// </summary>
		[XmlElement("gridCorUsed")]

        public PlaneAngleMeasure GridCorUsed {
            get {
                return gridCorUsedField;
            } 
            set {
                gridCorUsedField = value;
                NotifyPropertyChanged("GridCorUsed");
            }
        }

        private PlaneAngleMeasure gridCorUsedField; 


        /// <summary>
        /// Azimuth used for vertical section plot/computations.
        /// </summary>
		[XmlElement("aziVertSect")]

        public PlaneAngleMeasure AziVertSect {
            get {
                return aziVertSectField;
            } 
            set {
                aziVertSectField = value;
                NotifyPropertyChanged("AziVertSect");
            }
        }

        private PlaneAngleMeasure aziVertSectField; 


        /// <summary>
        /// Origin north-south used for vertical section plot/computations.
        /// </summary>
		[XmlElement("dispNsVertSectOrig")]

        public LengthMeasure DispNSVertSectOrig {
            get {
                return dispNsVertSectOrigField;
            } 
            set {
                dispNsVertSectOrigField = value;
                NotifyPropertyChanged("DispNSVertSectOrig");
            }
        }

        private LengthMeasure dispNsVertSectOrigField; 


        /// <summary>
        /// Origin east-west used for vertical section plot/computations.
        /// </summary>
		[XmlElement("dispEwVertSectOrig")]

        public LengthMeasure DispEWVertSectOrig {
            get {
                return dispEwVertSectOrigField;
            } 
            set {
                dispEwVertSectOrigField = value;
                NotifyPropertyChanged("DispEWVertSectOrig");
            }
        }

        private LengthMeasure dispEwVertSectOrigField; 


        /// <summary>
        /// True ("true" or "1") indicates that this trajectory is definitive for this wellbore. False ("false" or "0") or not given indicates otherwise. There can only be one trajectory per wellbore with definitive=true and it must define the geometry of the whole wellbore (surface to bottom). The definitive trajectory may represent a composite of information in many other trajectories. A query requesting a subset of the possible information can provide a simplistic view of the geometry of the wellbore.
        /// </summary>
		[XmlElement("definitive")]

        public Boolean? Definitive {
            get {
                return definitiveField;
            } 
            set {
                definitiveField = value;
                this.DefinitiveSpecified = true;
                NotifyPropertyChanged("Definitive");
            }
        }

        private Boolean? definitiveField; 


		/// <summary>
        /// definitiveSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DefinitiveSpecified {
            get {
                return definitiveSpecifiedField;
            } 
            set {
                definitiveSpecifiedField = value;
                NotifyPropertyChanged("DefinitiveSpecified");
            }
        }

        private Boolean definitiveSpecifiedField; 


        /// <summary>
        /// Is trajectory a result of a memory dump from a tool? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("memory")]

        public Boolean? Memory {
            get {
                return memoryField;
            } 
            set {
                memoryField = value;
                this.MemorySpecified = true;
                NotifyPropertyChanged("Memory");
            }
        }

        private Boolean? memoryField; 


		/// <summary>
        /// memorySpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MemorySpecified {
            get {
                return memorySpecifiedField;
            } 
            set {
                memorySpecifiedField = value;
                NotifyPropertyChanged("MemorySpecified");
            }
        }

        private Boolean memorySpecifiedField; 


        /// <summary>
        /// Is trajectory a final or intermediate/preliminary? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("finalTraj")]

        public Boolean? FinalTraj {
            get {
                return finalTrajField;
            } 
            set {
                finalTrajField = value;
                this.FinalTrajSpecified = true;
                NotifyPropertyChanged("FinalTraj");
            }
        }

        private Boolean? finalTrajField; 


		/// <summary>
        /// finalTrajSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean FinalTrajSpecified {
            get {
                return finalTrajSpecifiedField;
            } 
            set {
                finalTrajSpecifiedField = value;
                NotifyPropertyChanged("FinalTrajSpecified");
            }
        }

        private Boolean finalTrajSpecifiedField; 


        /// <summary>
        /// Specifies the definition of north. While this is optional because of legacy data, it is strongly recommended that this always be specified.
        /// </summary>
		[XmlElement("aziRef")]

        public AziRef? AziRef {
            get {
                return aziRefField;
            } 
            set {
                aziRefField = value;
                this.AziRefSpecified = true;
                NotifyPropertyChanged("AziRef");
            }
        }

        private AziRef? aziRefField; 


		/// <summary>
        /// aziRefSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean AziRefSpecified {
            get {
                return aziRefSpecifiedField;
            } 
            set {
                aziRefSpecifiedField = value;
                NotifyPropertyChanged("AziRefSpecified");
            }
        }

        private Boolean aziRefSpecifiedField; 


        /// <summary>
        /// Container element for trajectory station elements.
        /// </summary>
		[XmlElement("trajectoryStation")]

        public List<TrajectoryStation> TrajectoryStation {
            get {
                return trajectoryStationField;
            } 
            set {
                trajectoryStationField = value;
                NotifyPropertyChanged("TrajectoryStation");
            }
        }

        private List<TrajectoryStation> trajectoryStationField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the cs_refWellboreTrajectory xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellboreTrajectory", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the cs_refWellboreTrajectory xsd type.")]
    public partial class RefWellboreTrajectory : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A pointer to the trajectory within the wellbore.
        /// </summary>
		[XmlElement("trajectoryReference")]

        public RefNameString TrajectoryReference {
            get {
                return trajectoryReferenceField;
            } 
            set {
                trajectoryReferenceField = value;
                NotifyPropertyChanged("TrajectoryReference");
            }
        }

        private RefNameString trajectoryReferenceField; 


        /// <summary>
        /// A pointer to the wellbore that contains the trajectoryReference. This is not needed unless the trajectory is outside the context of a common parent wellbore.
        /// </summary>
		[XmlElement("wellboreParent")]

        public RefNameString WellboreParent {
            get {
                return wellboreParentField;
            } 
            set {
                wellboreParentField = value;
                NotifyPropertyChanged("WellboreParent");
            }
        }

        private RefNameString wellboreParentField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_trajectoryStations xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("trajectoryStations", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_trajectoryStations xsd type.")]
    public partial class TrajectoryStationList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single trajectory station. 
        /// </summary>
		[XmlElement("trajectoryStation")]

        public List<StandAloneTrajectoryStation> TrajectoryStation {
            get {
                return trajectoryStationField;
            } 
            set {
                trajectoryStationField = value;
                NotifyPropertyChanged("TrajectoryStation");
            }
        }

        private List<StandAloneTrajectoryStation> trajectoryStationField; 


        /// <summary>
        /// A single trajectory station. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return TrajectoryStation;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// WITSML - Trajectory Station Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_trajectoryStation", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Trajectory Station Component Schema")]
    public partial class StandAloneTrajectoryStation : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the trajectory.
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the trajectory that contains the trajectory station.
        /// </summary>
		[XmlElement("nameTrajectory")]

        public String NameTrajectory {
            get {
                return nameTrajectoryField;
            } 
            set {
                nameTrajectoryField = value;
                NotifyPropertyChanged("NameTrajectory");
            }
        }

        private String nameTrajectoryField; 


        /// <summary>
        /// A pointer to the intended target of this station. 
        /// </summary>
		[XmlElement("target")]

        public RefNameString Target {
            get {
                return targetField;
            } 
            set {
                targetField = value;
                NotifyPropertyChanged("Target");
            }
        }

        private RefNameString targetField; 


        /// <summary>
        /// Date and time the station was measured or created. 
        /// </summary>
		[XmlElement("dTimStn")]

        public DateTime? DateTimeStn {
            get {
                return dTimStnField;
            } 
            set {
                dTimStnField = value;
                this.DateTimeStnSpecified = true;
                NotifyPropertyChanged("DateTimeStn");
            }
        }

        private DateTime? dTimStnField; 


		/// <summary>
        /// dTimStnSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeStnSpecified {
            get {
                return dTimStnSpecifiedField;
            } 
            set {
                dTimStnSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStnSpecified");
            }
        }

        private Boolean dTimStnSpecifiedField; 


        /// <summary>
        /// Type of survey station. 
        /// </summary>
		[XmlElement("typeTrajStation")]

        public TrajStationType? TypeTrajStation {
            get {
                return typeTrajStationField;
            } 
            set {
                typeTrajStationField = value;
                NotifyPropertyChanged("TypeTrajStation");
            }
        }

        private TrajStationType? typeTrajStationField; 


        /// <summary>
        /// The type of tool used for the measurements.
        /// </summary>
		[XmlElement("typeSurveyTool")]

        public TypeSurveyTool? TypeSurveyTool {
            get {
                return typeSurveyToolField;
            } 
            set {
                typeSurveyToolField = value;
                this.TypeSurveyToolSpecified = true;
                NotifyPropertyChanged("TypeSurveyTool");
            }
        }

        private TypeSurveyTool? typeSurveyToolField; 


		/// <summary>
        /// typeSurveyToolSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeSurveyToolSpecified {
            get {
                return typeSurveyToolSpecifiedField;
            } 
            set {
                typeSurveyToolSpecifiedField = value;
                NotifyPropertyChanged("TypeSurveyToolSpecified");
            }
        }

        private Boolean typeSurveyToolSpecifiedField; 


        /// <summary>
        /// Measured depth of measurement from the drill datum. 
        /// </summary>
		[XmlElement("md")]

        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 


        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
		[XmlElement("tvd")]

        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 


        /// <summary>
        /// Hole inclination, measured from vertical. 
        /// </summary>
		[XmlElement("incl")]

        public PlaneAngleMeasure Incl {
            get {
                return inclField;
            } 
            set {
                inclField = value;
                NotifyPropertyChanged("Incl");
            }
        }

        private PlaneAngleMeasure inclField; 


        /// <summary>
        /// Hole azimuth. Corrected to wells azimuth reference. 
        /// </summary>
		[XmlElement("azi")]

        public PlaneAngleMeasure Azi {
            get {
                return aziField;
            } 
            set {
                aziField = value;
                NotifyPropertyChanged("Azi");
            }
        }

        private PlaneAngleMeasure aziField; 


        /// <summary>
        /// Toolface angle (magnetic). 
        /// </summary>
		[XmlElement("mtf")]

        public PlaneAngleMeasure Mtf {
            get {
                return mtfField;
            } 
            set {
                mtfField = value;
                NotifyPropertyChanged("Mtf");
            }
        }

        private PlaneAngleMeasure mtfField; 


        /// <summary>
        /// Toolface angle (gravity). 
        /// </summary>
		[XmlElement("gtf")]

        public PlaneAngleMeasure Gtf {
            get {
                return gtfField;
            } 
            set {
                gtfField = value;
                NotifyPropertyChanged("Gtf");
            }
        }

        private PlaneAngleMeasure gtfField; 


        /// <summary>
        /// North-south offset, positive to the North. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.
        /// </summary>
		[XmlElement("dispNs")]

        public LengthMeasure DispNS {
            get {
                return dispNsField;
            } 
            set {
                dispNsField = value;
                NotifyPropertyChanged("DispNS");
            }
        }

        private LengthMeasure dispNsField; 


        /// <summary>
        /// East-west offset, positive to the East. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location. 
        /// </summary>
		[XmlElement("dispEw")]

        public LengthMeasure DispEW {
            get {
                return dispEwField;
            } 
            set {
                dispEwField = value;
                NotifyPropertyChanged("DispEW");
            }
        }

        private LengthMeasure dispEwField; 


        /// <summary>
        /// Distance along vertical section azimuth plane. 
        /// </summary>
		[XmlElement("vertSect")]

        public LengthMeasure VertSect {
            get {
                return vertSectField;
            } 
            set {
                vertSectField = value;
                NotifyPropertyChanged("VertSect");
            }
        }

        private LengthMeasure vertSectField; 


        /// <summary>
        /// Dogleg severity. 
        /// </summary>
		[XmlElement("dls")]

        public AnglePerLengthMeasure DoglegSeverity {
            get {
                return dlsField;
            } 
            set {
                dlsField = value;
                NotifyPropertyChanged("DoglegSeverity");
            }
        }

        private AnglePerLengthMeasure dlsField; 


        /// <summary>
        /// Turn rate, radius of curvature computation. 
        /// </summary>
		[XmlElement("rateTurn")]

        public AnglePerLengthMeasure RateTurn {
            get {
                return rateTurnField;
            } 
            set {
                rateTurnField = value;
                NotifyPropertyChanged("RateTurn");
            }
        }

        private AnglePerLengthMeasure rateTurnField; 


        /// <summary>
        /// Build Rate, radius of curvature computation. 
        /// </summary>
		[XmlElement("rateBuild")]

        public AnglePerLengthMeasure RateBuild {
            get {
                return rateBuildField;
            } 
            set {
                rateBuildField = value;
                NotifyPropertyChanged("RateBuild");
            }
        }

        private AnglePerLengthMeasure rateBuildField; 


        /// <summary>
        /// Delta measured depth from previous station. 
        /// </summary>
		[XmlElement("mdDelta")]

        public MeasuredDepthCoord MDDelta {
            get {
                return mdDeltaField;
            } 
            set {
                mdDeltaField = value;
                NotifyPropertyChanged("MDDelta");
            }
        }

        private MeasuredDepthCoord mdDeltaField; 


        /// <summary>
        /// Delta true vertical depth from previous station. 
        /// </summary>
		[XmlElement("tvdDelta")]

        public WellVerticalDepthCoord TvdDelta {
            get {
                return tvdDeltaField;
            } 
            set {
                tvdDeltaField = value;
                NotifyPropertyChanged("TvdDelta");
            }
        }

        private WellVerticalDepthCoord tvdDeltaField; 


        /// <summary>
        /// Tool error model used to compute covariance matrix. 
        /// </summary>
		[XmlElement("modelToolError")]

        public String ModelToolError {
            get {
                return modelToolErrorField;
            } 
            set {
                modelToolErrorField = value;
                NotifyPropertyChanged("ModelToolError");
            }
        }

        private String modelToolErrorField; 


        /// <summary>
        /// Survey tool gravity uncertainty. 
        /// </summary>
		[XmlElement("gravTotalUncert")]

        public AccelerationLinearMeasure GravTotalUncert {
            get {
                return gravTotalUncertField;
            } 
            set {
                gravTotalUncertField = value;
                NotifyPropertyChanged("GravTotalUncert");
            }
        }

        private AccelerationLinearMeasure gravTotalUncertField; 


        /// <summary>
        /// Survey tool dip uncertainty. 
        /// </summary>
		[XmlElement("dipAngleUncert")]

        public PlaneAngleMeasure DipAngleUncert {
            get {
                return dipAngleUncertField;
            } 
            set {
                dipAngleUncertField = value;
                NotifyPropertyChanged("DipAngleUncert");
            }
        }

        private PlaneAngleMeasure dipAngleUncertField; 


        /// <summary>
        /// Survey tool magnetic uncertainty. 
        /// </summary>
		[XmlElement("magTotalUncert")]

        public MagneticInductionMeasure MagTotalUncert {
            get {
                return magTotalUncertField;
            } 
            set {
                magTotalUncertField = value;
                NotifyPropertyChanged("MagTotalUncert");
            }
        }

        private MagneticInductionMeasure magTotalUncertField; 


        /// <summary>
        /// Was an accelerometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[XmlElement("gravAccelCorUsed")]

        public Boolean? GravAccelCorUsed {
            get {
                return gravAccelCorUsedField;
            } 
            set {
                gravAccelCorUsedField = value;
                this.GravAccelCorUsedSpecified = true;
                NotifyPropertyChanged("GravAccelCorUsed");
            }
        }

        private Boolean? gravAccelCorUsedField; 


		/// <summary>
        /// gravAccelCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean GravAccelCorUsedSpecified {
            get {
                return gravAccelCorUsedSpecifiedField;
            } 
            set {
                gravAccelCorUsedSpecifiedField = value;
                NotifyPropertyChanged("GravAccelCorUsedSpecified");
            }
        }

        private Boolean gravAccelCorUsedSpecifiedField; 


        /// <summary>
        /// Was a magnetometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("magXAxialCorUsed")]

        public Boolean? MagXAxialCorUsed {
            get {
                return magXAxialCorUsedField;
            } 
            set {
                magXAxialCorUsedField = value;
                this.MagXAxialCorUsedSpecified = true;
                NotifyPropertyChanged("MagXAxialCorUsed");
            }
        }

        private Boolean? magXAxialCorUsedField; 


		/// <summary>
        /// magXAxialCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MagXAxialCorUsedSpecified {
            get {
                return magXAxialCorUsedSpecifiedField;
            } 
            set {
                magXAxialCorUsedSpecifiedField = value;
                NotifyPropertyChanged("MagXAxialCorUsedSpecified");
            }
        }

        private Boolean magXAxialCorUsedSpecifiedField; 


        /// <summary>
        /// Was a bottom hole assembly sag correction applied to the survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("sagCorUsed")]

        public Boolean? SagCorUsed {
            get {
                return sagCorUsedField;
            } 
            set {
                sagCorUsedField = value;
                this.SagCorUsedSpecified = true;
                NotifyPropertyChanged("SagCorUsed");
            }
        }

        private Boolean? sagCorUsedField; 


		/// <summary>
        /// sagCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean SagCorUsedSpecified {
            get {
                return sagCorUsedSpecifiedField;
            } 
            set {
                sagCorUsedSpecifiedField = value;
                NotifyPropertyChanged("SagCorUsedSpecified");
            }
        }

        private Boolean sagCorUsedSpecifiedField; 


        /// <summary>
        /// Was a drillstring magnetism correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("magDrlstrCorUsed")]

        public Boolean? MagDrlstrCorUsed {
            get {
                return magDrlstrCorUsedField;
            } 
            set {
                magDrlstrCorUsedField = value;
                this.MagDrlstrCorUsedSpecified = true;
                NotifyPropertyChanged("MagDrlstrCorUsed");
            }
        }

        private Boolean? magDrlstrCorUsedField; 


		/// <summary>
        /// magDrlstrCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MagDrlstrCorUsedSpecified {
            get {
                return magDrlstrCorUsedSpecifiedField;
            } 
            set {
                magDrlstrCorUsedSpecifiedField = value;
                NotifyPropertyChanged("MagDrlstrCorUsedSpecified");
            }
        }

        private Boolean magDrlstrCorUsedSpecifiedField; 


        /// <summary>
        /// Gravitational field theoretical/reference value. 
        /// </summary>
		[XmlElement("gravTotalFieldReference")]

        public AccelerationLinearMeasure GravTotalFieldReference {
            get {
                return gravTotalFieldReferenceField;
            } 
            set {
                gravTotalFieldReferenceField = value;
                NotifyPropertyChanged("GravTotalFieldReference");
            }
        }

        private AccelerationLinearMeasure gravTotalFieldReferenceField; 


        /// <summary>
        /// Geomagnetic field theoretical/reference value. 
        /// </summary>
		[XmlElement("magTotalFieldReference")]

        public MagneticInductionMeasure MagTotalFieldReference {
            get {
                return magTotalFieldReferenceField;
            } 
            set {
                magTotalFieldReferenceField = value;
                NotifyPropertyChanged("MagTotalFieldReference");
            }
        }

        private MagneticInductionMeasure magTotalFieldReferenceField; 


        /// <summary>
        /// Magnetic dip angle theoretical/reference value. 
        /// </summary>
		[XmlElement("magDipAngleReference")]

        public PlaneAngleMeasure MagDipAngleReference {
            get {
                return magDipAngleReferenceField;
            } 
            set {
                magDipAngleReferenceField = value;
                NotifyPropertyChanged("MagDipAngleReference");
            }
        }

        private PlaneAngleMeasure magDipAngleReferenceField; 


        /// <summary>
        /// Geomagnetic model used. 
        /// </summary>
		[XmlElement("magModelUsed")]

        public String MagModelUsed {
            get {
                return magModelUsedField;
            } 
            set {
                magModelUsedField = value;
                NotifyPropertyChanged("MagModelUsed");
            }
        }

        private String magModelUsedField; 


        /// <summary>
        /// Current valid interval for the geomagnetic model used. 
        /// </summary>
		[XmlElement("magModelValid")]

        public String MagModelValid {
            get {
                return magModelValidField;
            } 
            set {
                magModelValidField = value;
                NotifyPropertyChanged("MagModelValid");
            }
        }

        private String magModelValidField; 


        /// <summary>
        /// Gravitational model used. 
        /// </summary>
		[XmlElement("geoModelUsed")]

        public String GeoModelUsed {
            get {
                return geoModelUsedField;
            } 
            set {
                geoModelUsedField = value;
                NotifyPropertyChanged("GeoModelUsed");
            }
        }

        private String geoModelUsedField; 


        /// <summary>
        /// Status of the station. 
        /// </summary>
		[XmlElement("statusTrajStation")]

        public TrajStationStatus? StatusTrajStation {
            get {
                return statusTrajStationField;
            } 
            set {
                statusTrajStationField = value;
                this.StatusTrajStationSpecified = true;
                NotifyPropertyChanged("StatusTrajStation");
            }
        }

        private TrajStationStatus? statusTrajStationField; 


		/// <summary>
        /// statusTrajStationSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean StatusTrajStationSpecified {
            get {
                return statusTrajStationSpecifiedField;
            } 
            set {
                statusTrajStationSpecifiedField = value;
                NotifyPropertyChanged("StatusTrajStationSpecified");
            }
        }

        private Boolean statusTrajStationSpecifiedField; 


        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
		[XmlElement("rawData")]

        public StnTrajRawData RawData {
            get {
                return rawDataField;
            } 
            set {
                rawDataField = value;
                NotifyPropertyChanged("RawData");
            }
        }

        private StnTrajRawData rawDataField; 


        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
		[XmlElement("corUsed")]

        public StnTrajCorUsed CorUsed {
            get {
                return corUsedField;
            } 
            set {
                corUsedField = value;
                NotifyPropertyChanged("CorUsed");
            }
        }

        private StnTrajCorUsed corUsedField; 


        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
		[XmlElement("valid")]

        public StnTrajValid Valid {
            get {
                return validField;
            } 
            set {
                validField = value;
                NotifyPropertyChanged("Valid");
            }
        }

        private StnTrajValid validField; 


        /// <summary>
        /// Covariance matrix for error model. 
        /// </summary>
		[XmlElement("matrixCov")]

        public StnTrajMatrixCov MatrixCov {
            get {
                return matrixCovField;
            } 
            set {
                matrixCovField = value;
                NotifyPropertyChanged("MatrixCov");
            }
        }

        private StnTrajMatrixCov matrixCovField; 


        /// <summary>
        /// The 2D coordinates of the item. Note that within the context of trajectory, the "original" coordinates are inherently local coordinates as defined above.
        /// </summary>
		[XmlElement("location")]

        public List<Location> Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                NotifyPropertyChanged("Location");
            }
        }

        private List<Location> locationField; 


        /// <summary>
        /// A pointer to the trajectoryStation from which this station was derived. The trajectoryStation may be in another wellbore.
        /// </summary>
		[XmlElement("sourceStation")]

        public RefWellboreTrajectoryStation SourceStation {
            get {
                return sourceStationField;
            } 
            set {
                sourceStationField = value;
                NotifyPropertyChanged("SourceStation");
            }
        }

        private RefWellboreTrajectoryStation sourceStationField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// Unique identifier for the trajectory. This uniquely represents the trajectory referenced by the (possibly non-unique) nameTraj. 
        /// </summary>
        [XmlAttribute("uidTrajectory")]

        public String UidTrajectory {
            get {
                return uidTrajectoryField;
            } 
            set {
                uidTrajectoryField = value;
                NotifyPropertyChanged("UidTrajectory");
            }
        }

        private String uidTrajectoryField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_tubulars xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("tubulars", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_tubulars xsd type.")]
    public partial class TubularList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single tubular (assembly). This represents the "transient" assemblies used in drilling a well as opposed to the "fixed" assemblies (see wbGeometry).
        /// </summary>
		[XmlElement("tubular")]

        public List<Tubular> Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private List<Tubular> tubularField; 


        /// <summary>
        /// A single tubular (assembly). This represents the "transient" assemblies used in drilling a well as opposed to the "fixed" assemblies (see wbGeometry).
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Tubular;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML tubular object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_tubular", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML tubular object.")]
    public partial class Tubular : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the tubular. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the tubular (assembly). 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Type of tubular assembly. 
        /// </summary>
		[XmlElement("typeTubularAssy")]

        public TubularAssembly? TypeTubularAssy {
            get {
                return typeTubularAssyField;
            } 
            set {
                typeTubularAssyField = value;
                NotifyPropertyChanged("TypeTubularAssy");
            }
        }

        private TubularAssembly? typeTubularAssyField; 


        /// <summary>
        /// Is float valve present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("valveFloat")]

        public Boolean? ValveFloat {
            get {
                return valveFloatField;
            } 
            set {
                valveFloatField = value;
                this.ValveFloatSpecified = true;
                NotifyPropertyChanged("ValveFloat");
            }
        }

        private Boolean? valveFloatField; 


		/// <summary>
        /// valveFloatSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ValveFloatSpecified {
            get {
                return valveFloatSpecifiedField;
            } 
            set {
                valveFloatSpecifiedField = value;
                NotifyPropertyChanged("ValveFloatSpecified");
            }
        }

        private Boolean valveFloatSpecifiedField; 


        /// <summary>
        /// Is nuclear tool present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("sourceNuclear")]

        public Boolean? SourceNuclear {
            get {
                return sourceNuclearField;
            } 
            set {
                sourceNuclearField = value;
                this.SourceNuclearSpecified = true;
                NotifyPropertyChanged("SourceNuclear");
            }
        }

        private Boolean? sourceNuclearField; 


		/// <summary>
        /// sourceNuclearSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean SourceNuclearSpecified {
            get {
                return sourceNuclearSpecifiedField;
            } 
            set {
                sourceNuclearSpecifiedField = value;
                NotifyPropertyChanged("SourceNuclearSpecified");
            }
        }

        private Boolean sourceNuclearSpecifiedField; 


        /// <summary>
        /// Maximum hole size generated by assembly. 
        /// </summary>
		[XmlElement("diaHoleAssy")]

        public LengthMeasure DiaHoleAssy {
            get {
                return diaHoleAssyField;
            } 
            set {
                diaHoleAssyField = value;
                NotifyPropertyChanged("DiaHoleAssy");
            }
        }

        private LengthMeasure diaHoleAssyField; 


        /// <summary>
        /// Container element for the tubular component elements. 
        /// </summary>
		[XmlElement("tubularComponent")]

        public List<TubularComponent> TubularComponent {
            get {
                return tubularComponentField;
            } 
            set {
                tubularComponentField = value;
                NotifyPropertyChanged("TubularComponent");
            }
        }

        private List<TubularComponent> tubularComponentField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - tubular component - component schema. The order of the components in the XML instance is significant. The components are list in the order that they enter the hole. That is, the first component is closest to the bit.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_tubularComponent", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - tubular component - component schema. The order of the components in the XML instance is significant. The components are list in the order that they enter the hole. That is, the first component is closest to the bit.")]
    public partial class TubularComponent : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Type of component. 
        /// </summary>
		[XmlElement("typeTubularComp")]

        public TubularComponentType? TypeTubularComp {
            get {
                return typeTubularCompField;
            } 
            set {
                typeTubularCompField = value;
                NotifyPropertyChanged("TypeTubularComp");
            }
        }

        private TubularComponentType? typeTubularCompField; 


        /// <summary>
        /// The sequence within which the components entered the hole. That is, a sequence number of 1 entered first, 2 entered next, etc. 
        /// </summary>
		[XmlElement("sequence")]

        public Int16? Sequence {
            get {
                return sequenceField;
            } 
            set {
                sequenceField = value;
                NotifyPropertyChanged("Sequence");
            }
        }

        private Int16? sequenceField; 


        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
		[XmlElement("id")]

        public LengthMeasure InnerDiameter {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("InnerDiameter");
            }
        }

        private LengthMeasure idField; 


        /// <summary>
        /// Outside diameter of the body of the item. 
        /// </summary>
		[XmlElement("od")]

        public LengthMeasure OuterDiameter {
            get {
                return odField;
            } 
            set {
                odField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure odField; 


        /// <summary>
        /// Maximum outside diameter.
        /// </summary>
		[XmlElement("odMx")]

        public LengthMeasure OuterDiameterMax {
            get {
                return odMxField;
            } 
            set {
                odMxField = value;
                NotifyPropertyChanged("OuterDiameterMax");
            }
        }

        private LengthMeasure odMxField; 


        /// <summary>
        /// Length of the item. 
        /// </summary>
		[XmlElement("len")]

        public LengthMeasure Len {
            get {
                return lenField;
            } 
            set {
                lenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure lenField; 


        /// <summary>
        /// Average length of joint for tubulars. 
        /// </summary>
		[XmlElement("lenJointAv")]

        public LengthMeasure LenJointAverage {
            get {
                return lenJointAvField;
            } 
            set {
                lenJointAvField = value;
                NotifyPropertyChanged("LenJointAverage");
            }
        }

        private LengthMeasure lenJointAvField; 


        /// <summary>
        /// Number of joints per stand of tubular. 
        /// </summary>
		[XmlElement("numJointStand")]

        public Int16? NumJointStand {
            get {
                return numJointStandField;
            } 
            set {
                numJointStandField = value;
                this.NumJointStandSpecified = true;
                NotifyPropertyChanged("NumJointStand");
            }
        }

        private Int16? numJointStandField; 


		/// <summary>
        /// numJointStandSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumJointStandSpecified {
            get {
                return numJointStandSpecifiedField;
            } 
            set {
                numJointStandSpecifiedField = value;
                NotifyPropertyChanged("NumJointStandSpecified");
            }
        }

        private Boolean numJointStandSpecifiedField; 


        /// <summary>
        /// Weight per unit length. 
        /// </summary>
		[XmlElement("wtPerLen")]

        public MassPerLengthMeasure WeightPerLen {
            get {
                return wtPerLenField;
            } 
            set {
                wtPerLenField = value;
                NotifyPropertyChanged("WeightPerLen");
            }
        }

        private MassPerLengthMeasure wtPerLenField; 


        /// <summary>
        /// Material grade for the tubular section. 
        /// </summary>
		[XmlElement("grade")]

        public String Grade {
            get {
                return gradeField;
            } 
            set {
                gradeField = value;
                NotifyPropertyChanged("Grade");
            }
        }

        private String gradeField; 


        /// <summary>
        /// Minimum pass through diameter. 
        /// </summary>
		[XmlElement("odDrift")]

        public LengthMeasure OuterDiameterDrift {
            get {
                return odDriftField;
            } 
            set {
                odDriftField = value;
                NotifyPropertyChanged("OuterDiameterDrift");
            }
        }

        private LengthMeasure odDriftField; 


        /// <summary>
        /// Yield stress of steel - worn stress. 
        /// </summary>
		[XmlElement("tensYield")]

        public PressureMeasure TensYield {
            get {
                return tensYieldField;
            } 
            set {
                tensYieldField = value;
                NotifyPropertyChanged("TensYield");
            }
        }

        private PressureMeasure tensYieldField; 


        /// <summary>
        /// Torque yield stress - worn stress. 
        /// </summary>
		[XmlElement("tqYield")]

        public PressureMeasure TorqueYield {
            get {
                return tqYieldField;
            } 
            set {
                tqYieldField = value;
                NotifyPropertyChanged("TorqueYield");
            }
        }

        private PressureMeasure tqYieldField; 


        /// <summary>
        /// Fatigue endurance limit. 
        /// </summary>
		[XmlElement("stressFatig")]

        public PressureMeasure StressFatig {
            get {
                return stressFatigField;
            } 
            set {
                stressFatigField = value;
                NotifyPropertyChanged("StressFatig");
            }
        }

        private PressureMeasure stressFatigField; 


        /// <summary>
        /// Fish neck length. 
        /// </summary>
		[XmlElement("lenFishneck")]

        public LengthMeasure LenFishneck {
            get {
                return lenFishneckField;
            } 
            set {
                lenFishneckField = value;
                NotifyPropertyChanged("LenFishneck");
            }
        }

        private LengthMeasure lenFishneckField; 


        /// <summary>
        /// Fish neck inside diameter. 
        /// </summary>
		[XmlElement("idFishneck")]

        public LengthMeasure InnerDiameterFishneck {
            get {
                return idFishneckField;
            } 
            set {
                idFishneckField = value;
                NotifyPropertyChanged("InnerDiameterFishneck");
            }
        }

        private LengthMeasure idFishneckField; 


        /// <summary>
        /// Fish neck outside diameter. 
        /// </summary>
		[XmlElement("odFishneck")]

        public LengthMeasure OuterDiameterFishneck {
            get {
                return odFishneckField;
            } 
            set {
                odFishneckField = value;
                NotifyPropertyChanged("OuterDiameterFishneck");
            }
        }

        private LengthMeasure odFishneckField; 


        /// <summary>
        /// Closed end displacement. 
        /// </summary>
		[XmlElement("disp")]

        public VolumeMeasure Disp {
            get {
                return dispField;
            } 
            set {
                dispField = value;
                NotifyPropertyChanged("Disp");
            }
        }

        private VolumeMeasure dispField; 


        /// <summary>
        /// Burst pressure. 
        /// </summary>
		[XmlElement("presBurst")]

        public PressureMeasure PresBurst {
            get {
                return presBurstField;
            } 
            set {
                presBurstField = value;
                NotifyPropertyChanged("PresBurst");
            }
        }

        private PressureMeasure presBurstField; 


        /// <summary>
        /// Collapse pressure. 
        /// </summary>
		[XmlElement("presCollapse")]

        public PressureMeasure PresCollapse {
            get {
                return presCollapseField;
            } 
            set {
                presCollapseField = value;
                NotifyPropertyChanged("PresCollapse");
            }
        }

        private PressureMeasure presCollapseField; 


        /// <summary>
        /// Service class. 
        /// </summary>
		[XmlElement("classService")]

        public String ClassService {
            get {
                return classServiceField;
            } 
            set {
                classServiceField = value;
                NotifyPropertyChanged("ClassService");
            }
        }

        private String classServiceField; 


        /// <summary>
        /// Wall thickness wear (commonly in percent). 
        /// </summary>
		[XmlElement("wearWall")]

        public LengthPerLengthMeasure WearWall {
            get {
                return wearWallField;
            } 
            set {
                wearWallField = value;
                NotifyPropertyChanged("WearWall");
            }
        }

        private LengthPerLengthMeasure wearWallField; 


        /// <summary>
        /// Wall thickness. 
        /// </summary>
		[XmlElement("thickWall")]

        public LengthMeasure ThickWall {
            get {
                return thickWallField;
            } 
            set {
                thickWallField = value;
                NotifyPropertyChanged("ThickWall");
            }
        }

        private LengthMeasure thickWallField; 


        /// <summary>
        /// Box/Pin configuration. 
        /// </summary>
		[XmlElement("configCon")]

        public BoxPinConfig? ConfigCon {
            get {
                return configConField;
            } 
            set {
                configConField = value;
                this.ConfigConSpecified = true;
                NotifyPropertyChanged("ConfigCon");
            }
        }

        private BoxPinConfig? configConField; 


		/// <summary>
        /// configConSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ConfigConSpecified {
            get {
                return configConSpecifiedField;
            } 
            set {
                configConSpecifiedField = value;
                NotifyPropertyChanged("ConfigConSpecified");
            }
        }

        private Boolean configConSpecifiedField; 


        /// <summary>
        /// Bending stiffness of tubular. 
        /// </summary>
		[XmlElement("bendStiffness")]

        public ForcePerLengthMeasure BendStiffness {
            get {
                return bendStiffnessField;
            } 
            set {
                bendStiffnessField = value;
                NotifyPropertyChanged("BendStiffness");
            }
        }

        private ForcePerLengthMeasure bendStiffnessField; 


        /// <summary>
        /// Axial stiffness of tubular. 
        /// </summary>
		[XmlElement("axialStiffness")]

        public ForcePerLengthMeasure AxialStiffness {
            get {
                return axialStiffnessField;
            } 
            set {
                axialStiffnessField = value;
                NotifyPropertyChanged("AxialStiffness");
            }
        }

        private ForcePerLengthMeasure axialStiffnessField; 


        /// <summary>
        /// Torsional stiffness of tubular. 
        /// </summary>
		[XmlElement("torsionalStiffness")]

        public ForcePerLengthMeasure TorsionalStiffness {
            get {
                return torsionalStiffnessField;
            } 
            set {
                torsionalStiffnessField = value;
                NotifyPropertyChanged("TorsionalStiffness");
            }
        }

        private ForcePerLengthMeasure torsionalStiffnessField; 


        /// <summary>
        /// Type of material. 
        /// </summary>
		[XmlElement("typeMaterial")]

        public MaterialType? TypeMaterial {
            get {
                return typeMaterialField;
            } 
            set {
                typeMaterialField = value;
                this.TypeMaterialSpecified = true;
                NotifyPropertyChanged("TypeMaterial");
            }
        }

        private MaterialType? typeMaterialField; 


		/// <summary>
        /// typeMaterialSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeMaterialSpecified {
            get {
                return typeMaterialSpecifiedField;
            } 
            set {
                typeMaterialSpecifiedField = value;
                NotifyPropertyChanged("TypeMaterialSpecified");
            }
        }

        private Boolean typeMaterialSpecifiedField; 


        /// <summary>
        /// Maximum dogleg severity. 
        /// </summary>
		[XmlElement("doglegMx")]

        public AnglePerLengthMeasure DoglegMax {
            get {
                return doglegMxField;
            } 
            set {
                doglegMxField = value;
                NotifyPropertyChanged("DoglegMax");
            }
        }

        private AnglePerLengthMeasure doglegMxField; 


        /// <summary>
        /// Name of vendor. 
        /// </summary>
		[XmlElement("vendor")]

        public String Vendor {
            get {
                return vendorField;
            } 
            set {
                vendorField = value;
                NotifyPropertyChanged("Vendor");
            }
        }

        private String vendorField; 


        /// <summary>
        /// Component name from manufacturer. 
        /// </summary>
		[XmlElement("model")]

        public String Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String modelField; 


        /// <summary>
        /// An identification tag for the component tool. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[XmlElement("nameTag")]

        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

        private List<NameTag> nameTagField; 


        /// <summary>
        /// Bit object. 
        /// </summary>
		[XmlElement("bitRecord")]

        public BitRecord BitRecord {
            get {
                return bitRecordField;
            } 
            set {
                bitRecordField = value;
                NotifyPropertyChanged("BitRecord");
            }
        }

        private BitRecord bitRecordField; 


        /// <summary>
        /// Total area of nozzles. 
        /// </summary>
		[XmlElement("areaNozzleFlow")]

        public AreaMeasure AreaNozzleFlow {
            get {
                return areaNozzleFlowField;
            } 
            set {
                areaNozzleFlowField = value;
                NotifyPropertyChanged("AreaNozzleFlow");
            }
        }

        private AreaMeasure areaNozzleFlowField; 


        /// <summary>
        /// Set of nozzle objects. Examples of items that have nozzles are bit, hole opener, circulation sub, jetting sub, pressure relief sub. 
        /// </summary>
		[XmlElement("nozzle")]

        public List<Nozzle> Nozzle {
            get {
                return nozzleField;
            } 
            set {
                nozzleField = value;
                NotifyPropertyChanged("Nozzle");
            }
        }

        private List<Nozzle> nozzleField; 


        /// <summary>
        /// Connection object. 
        /// </summary>
		[XmlElement("connection")]

        public List<Connection> Connection {
            get {
                return connectionField;
            } 
            set {
                connectionField = value;
                NotifyPropertyChanged("Connection");
            }
        }

        private List<Connection> connectionField; 


        /// <summary>
        /// Jar object. 
        /// </summary>
		[XmlElement("jar")]

        public Jar Jar {
            get {
                return jarField;
            } 
            set {
                jarField = value;
                NotifyPropertyChanged("Jar");
            }
        }

        private Jar jarField; 


        /// <summary>
        /// MWD (measurement while drilling) tool object. 
        /// </summary>
		[XmlElement("mwdTool")]

        public MwdTool MwdTool {
            get {
                return mwdToolField;
            } 
            set {
                mwdToolField = value;
                NotifyPropertyChanged("MwdTool");
            }
        }

        private MwdTool mwdToolField; 


        /// <summary>
        /// Motor object. 
        /// </summary>
		[XmlElement("motor")]

        public Motor Motor {
            get {
                return motorField;
            } 
            set {
                motorField = value;
                NotifyPropertyChanged("Motor");
            }
        }

        private Motor motorField; 


        /// <summary>
        /// Stabilizer object. 
        /// </summary>
		[XmlElement("stabilizer")]

        public List<Stabilizer> Stabilizer {
            get {
                return stabilizerField;
            } 
            set {
                stabilizerField = value;
                NotifyPropertyChanged("Stabilizer");
            }
        }

        private List<Stabilizer> stabilizerField; 


        /// <summary>
        /// Bend object. 
        /// </summary>
		[XmlElement("bend")]

        public List<Bend> Bend {
            get {
                return bendField;
            } 
            set {
                bendField = value;
                NotifyPropertyChanged("Bend");
            }
        }

        private List<Bend> bendField; 


        /// <summary>
        /// Hole opener object. 
        /// </summary>
		[XmlElement("holeOpener")]

        public HoleOpener HoleOpener {
            get {
                return holeOpenerField;
            } 
            set {
                holeOpenerField = value;
                NotifyPropertyChanged("HoleOpener");
            }
        }

        private HoleOpener holeOpenerField; 


        /// <summary>
        /// Rotary Steerable Tool. 
        /// </summary>
		[XmlElement("rotarySteerableTool")]

        public RotarySteerableTool RotarySteerableTool {
            get {
                return rotarySteerableToolField;
            } 
            set {
                rotarySteerableToolField = value;
                NotifyPropertyChanged("RotarySteerableTool");
            }
        }

        private RotarySteerableTool rotarySteerableToolField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Bit Record Component Schema.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bitRecord", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Bit Record Component Schema.")]
    public partial class BitRecord : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Bit number and rerun number e.g. "4.1" for the first rerun of bit 4. 
        /// </summary>
		[XmlElement("numBit")]

        public String NumBit {
            get {
                return numBitField;
            } 
            set {
                numBitField = value;
                NotifyPropertyChanged("NumBit");
            }
        }

        private String numBitField; 


        /// <summary>
        /// Diameter of drilled hole. 
        /// </summary>
		[XmlElement("diaBit")]

        public LengthMeasure DiaBit {
            get {
                return diaBitField;
            } 
            set {
                diaBitField = value;
                NotifyPropertyChanged("DiaBit");
            }
        }

        private LengthMeasure diaBitField; 


        /// <summary>
        /// Minimum hole or tubing which bit will pass through (for bi-center bits). 
        /// </summary>
		[XmlElement("diaPassThru")]

        public LengthMeasure DiaPassThru {
            get {
                return diaPassThruField;
            } 
            set {
                diaPassThruField = value;
                NotifyPropertyChanged("DiaPassThru");
            }
        }

        private LengthMeasure diaPassThruField; 


        /// <summary>
        /// Diameter of pilot bit (for bi-center bits). 
        /// </summary>
		[XmlElement("diaPilot")]

        public LengthMeasure DiaPilot {
            get {
                return diaPilotField;
            } 
            set {
                diaPilotField = value;
                NotifyPropertyChanged("DiaPilot");
            }
        }

        private LengthMeasure diaPilotField; 


        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[XmlElement("manufacturer")]

        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 


        /// <summary>
        /// Type of bit. 
        /// </summary>
		[XmlElement("typeBit")]

        public BitType? TypeBit {
            get {
                return typeBitField;
            } 
            set {
                typeBitField = value;
                this.TypeBitSpecified = true;
                NotifyPropertyChanged("TypeBit");
            }
        }

        private BitType? typeBitField; 


		/// <summary>
        /// typeBitSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeBitSpecified {
            get {
                return typeBitSpecifiedField;
            } 
            set {
                typeBitSpecifiedField = value;
                NotifyPropertyChanged("TypeBitSpecified");
            }
        }

        private Boolean typeBitSpecifiedField; 


        /// <summary>
        /// Bit cost in local currency. 
        /// </summary>
		[XmlElement("cost")]

        public Cost Cost {
            get {
                return costField;
            } 
            set {
                costField = value;
                NotifyPropertyChanged("Cost");
            }
        }

        private Cost costField; 


        /// <summary>
        /// IADC bit code. 
        /// </summary>
		[XmlElement("codeIADC")]

        public String CodeIADC {
            get {
                return codeIADCField;
            } 
            set {
                codeIADCField = value;
                NotifyPropertyChanged("CodeIADC");
            }
        }

        private String codeIADCField; 


        /// <summary>
        /// Condition of inner tooth rows (inner 2/3 of bit) (0-8). 
        /// </summary>
		[XmlElement("condInitInner")]

        public Int16? CondInitInner {
            get {
                return condInitInnerField;
            } 
            set {
                condInitInnerField = value;
                this.CondInitInnerSpecified = true;
                NotifyPropertyChanged("CondInitInner");
            }
        }

        private Int16? condInitInnerField; 


		/// <summary>
        /// condInitInnerSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CondInitInnerSpecified {
            get {
                return condInitInnerSpecifiedField;
            } 
            set {
                condInitInnerSpecifiedField = value;
                NotifyPropertyChanged("CondInitInnerSpecified");
            }
        }

        private Boolean condInitInnerSpecifiedField; 


        /// <summary>
        /// Condition of outer tooth rows (outer 1/3 of bit) (0-8). 
        /// </summary>
		[XmlElement("condInitOuter")]

        public Int16? CondInitOuter {
            get {
                return condInitOuterField;
            } 
            set {
                condInitOuterField = value;
                this.CondInitOuterSpecified = true;
                NotifyPropertyChanged("CondInitOuter");
            }
        }

        private Int16? condInitOuterField; 


		/// <summary>
        /// condInitOuterSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CondInitOuterSpecified {
            get {
                return condInitOuterSpecifiedField;
            } 
            set {
                condInitOuterSpecifiedField = value;
                NotifyPropertyChanged("CondInitOuterSpecified");
            }
        }

        private Boolean condInitOuterSpecifiedField; 


        /// <summary>
        /// Overall dull condition from IADC bit wear 2 character codes. 
        /// </summary>
		[XmlElement("condInitDull")]

        public BitDullCode? CondInitDull {
            get {
                return condInitDullField;
            } 
            set {
                condInitDullField = value;
                this.CondInitDullSpecified = true;
                NotifyPropertyChanged("CondInitDull");
            }
        }

        private BitDullCode? condInitDullField; 


		/// <summary>
        /// condInitDullSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CondInitDullSpecified {
            get {
                return condInitDullSpecifiedField;
            } 
            set {
                condInitDullSpecifiedField = value;
                NotifyPropertyChanged("CondInitDullSpecified");
            }
        }

        private Boolean condInitDullSpecifiedField; 


        /// <summary>
        /// Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc). 
        /// </summary>
		[XmlElement("condInitLocation")]

        public String CondInitLocation {
            get {
                return condInitLocationField;
            } 
            set {
                condInitLocationField = value;
                NotifyPropertyChanged("CondInitLocation");
            }
        }

        private String condInitLocationField; 


        /// <summary>
        /// Condition of bit bearings (integer 0-8 or E, F, N or X)). 
        /// </summary>
		[XmlElement("condInitBearing")]

        public String CondInitBearing {
            get {
                return condInitBearingField;
            } 
            set {
                condInitBearingField = value;
                NotifyPropertyChanged("CondInitBearing");
            }
        }

        private String condInitBearingField; 


        /// <summary>
        /// Condition of bit gauge in 1/16 of an inch. I = in gauge, else number of 16ths out of gauge. 
        /// </summary>
		[XmlElement("condInitGauge")]

        public String CondInitGauge {
            get {
                return condInitGaugeField;
            } 
            set {
                condInitGaugeField = value;
                NotifyPropertyChanged("CondInitGauge");
            }
        }

        private String condInitGaugeField; 


        /// <summary>
        /// Other comments on bit condition from IADC list (BitDullCode in standard list). 
        /// </summary>
		[XmlElement("condInitOther")]

        public String CondInitOther {
            get {
                return condInitOtherField;
            } 
            set {
                condInitOtherField = value;
                NotifyPropertyChanged("CondInitOther");
            }
        }

        private String condInitOtherField; 


        /// <summary>
        /// Reason bit was pulled from IADC codes. 
        /// </summary>
		[XmlElement("condInitReason")]

        public BitReasonPulled? CondInitReason {
            get {
                return condInitReasonField;
            } 
            set {
                condInitReasonField = value;
                this.CondInitReasonSpecified = true;
                NotifyPropertyChanged("CondInitReason");
            }
        }

        private BitReasonPulled? condInitReasonField; 


		/// <summary>
        /// condInitReasonSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CondInitReasonSpecified {
            get {
                return condInitReasonSpecifiedField;
            } 
            set {
                condInitReasonSpecifiedField = value;
                NotifyPropertyChanged("CondInitReasonSpecified");
            }
        }

        private Boolean condInitReasonSpecifiedField; 


        /// <summary>
        /// Condition of inner tooth rows (inner 2/3 of bit) (0-8). 
        /// </summary>
		[XmlElement("condFinalInner")]

        public Int16? CondFinalInner {
            get {
                return condFinalInnerField;
            } 
            set {
                condFinalInnerField = value;
                this.CondFinalInnerSpecified = true;
                NotifyPropertyChanged("CondFinalInner");
            }
        }

        private Int16? condFinalInnerField; 


		/// <summary>
        /// condFinalInnerSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CondFinalInnerSpecified {
            get {
                return condFinalInnerSpecifiedField;
            } 
            set {
                condFinalInnerSpecifiedField = value;
                NotifyPropertyChanged("CondFinalInnerSpecified");
            }
        }

        private Boolean condFinalInnerSpecifiedField; 


        /// <summary>
        /// Condition of outer tooth rows (outer 1/3 of bit) (0-8). 
        /// </summary>
		[XmlElement("condFinalOuter")]

        public Int16? CondFinalOuter {
            get {
                return condFinalOuterField;
            } 
            set {
                condFinalOuterField = value;
                this.CondFinalOuterSpecified = true;
                NotifyPropertyChanged("CondFinalOuter");
            }
        }

        private Int16? condFinalOuterField; 


		/// <summary>
        /// condFinalOuterSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CondFinalOuterSpecified {
            get {
                return condFinalOuterSpecifiedField;
            } 
            set {
                condFinalOuterSpecifiedField = value;
                NotifyPropertyChanged("CondFinalOuterSpecified");
            }
        }

        private Boolean condFinalOuterSpecifiedField; 


        /// <summary>
        /// Overall dull condition from IADC bit wear 2 character codes. 
        /// </summary>
		[XmlElement("condFinalDull")]

        public BitDullCode? CondFinalDull {
            get {
                return condFinalDullField;
            } 
            set {
                condFinalDullField = value;
                this.CondFinalDullSpecified = true;
                NotifyPropertyChanged("CondFinalDull");
            }
        }

        private BitDullCode? condFinalDullField; 


		/// <summary>
        /// condFinalDullSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CondFinalDullSpecified {
            get {
                return condFinalDullSpecifiedField;
            } 
            set {
                condFinalDullSpecifiedField = value;
                NotifyPropertyChanged("CondFinalDullSpecified");
            }
        }

        private Boolean condFinalDullSpecifiedField; 


        /// <summary>
        /// Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc). 
        /// </summary>
		[XmlElement("condFinalLocation")]

        public String CondFinalLocation {
            get {
                return condFinalLocationField;
            } 
            set {
                condFinalLocationField = value;
                NotifyPropertyChanged("CondFinalLocation");
            }
        }

        private String condFinalLocationField; 


        /// <summary>
        /// Condition of bit bearings (integer 0-8 or E, F, N or X). 
        /// </summary>
		[XmlElement("condFinalBearing")]

        public String CondFinalBearing {
            get {
                return condFinalBearingField;
            } 
            set {
                condFinalBearingField = value;
                NotifyPropertyChanged("CondFinalBearing");
            }
        }

        private String condFinalBearingField; 


        /// <summary>
        /// Condition of bit gauge in 1/16 of a inch. I = in gauge, else number of 16ths out of gauge. 
        /// </summary>
		[XmlElement("condFinalGauge")]

        public String CondFinalGauge {
            get {
                return condFinalGaugeField;
            } 
            set {
                condFinalGaugeField = value;
                NotifyPropertyChanged("CondFinalGauge");
            }
        }

        private String condFinalGaugeField; 


        /// <summary>
        /// Other comments on bit condition from IADC list (BitDullCode in Standard LISTS). 
        /// </summary>
		[XmlElement("condFinalOther")]

        public String CondFinalOther {
            get {
                return condFinalOtherField;
            } 
            set {
                condFinalOtherField = value;
                NotifyPropertyChanged("CondFinalOther");
            }
        }

        private String condFinalOtherField; 


        /// <summary>
        /// Reason bit was pulled from IADC codes. 
        /// </summary>
		[XmlElement("condFinalReason")]

        public BitReasonPulled? CondFinalReason {
            get {
                return condFinalReasonField;
            } 
            set {
                condFinalReasonField = value;
                this.CondFinalReasonSpecified = true;
                NotifyPropertyChanged("CondFinalReason");
            }
        }

        private BitReasonPulled? condFinalReasonField; 


		/// <summary>
        /// condFinalReasonSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CondFinalReasonSpecified {
            get {
                return condFinalReasonSpecifiedField;
            } 
            set {
                condFinalReasonSpecifiedField = value;
                NotifyPropertyChanged("CondFinalReasonSpecified");
            }
        }

        private Boolean condFinalReasonSpecifiedField; 


        /// <summary>
        /// Bit drive type (Motor, rotary table etc). 
        /// </summary>
		[XmlElement("drive")]

        public String Drive {
            get {
                return driveField;
            } 
            set {
                driveField = value;
                NotifyPropertyChanged("Drive");
            }
        }

        private String driveField; 


        /// <summary>
        /// N = new, U = used. 
        /// </summary>
		[XmlElement("bitClass")]

        public String BitClass {
            get {
                return bitClassField;
            } 
            set {
                bitClassField = value;
                NotifyPropertyChanged("BitClass");
            }
        }

        private String bitClassField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Nozzle Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_nozzle", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Nozzle Component Schema")]
    public partial class Nozzle : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Index if this is an indexed object. 
        /// </summary>
		[XmlElement("index")]

        public Int16? Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private Int16? indexField; 


		/// <summary>
        /// indexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean IndexSpecified {
            get {
                return indexSpecifiedField;
            } 
            set {
                indexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private Boolean indexSpecifiedField; 


        /// <summary>
        /// Nozzle diameter. 
        /// </summary>
		[XmlElement("diaNozzle")]

        public LengthMeasure DiaNozzle {
            get {
                return diaNozzleField;
            } 
            set {
                diaNozzleField = value;
                NotifyPropertyChanged("DiaNozzle");
            }
        }

        private LengthMeasure diaNozzleField; 


        /// <summary>
        /// Nozzle type. 
        /// </summary>
		[XmlElement("typeNozzle")]

        public NozzleType? TypeNozzle {
            get {
                return typeNozzleField;
            } 
            set {
                typeNozzleField = value;
                this.TypeNozzleSpecified = true;
                NotifyPropertyChanged("TypeNozzle");
            }
        }

        private NozzleType? typeNozzleField; 


		/// <summary>
        /// typeNozzleSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeNozzleSpecified {
            get {
                return typeNozzleSpecifiedField;
            } 
            set {
                typeNozzleSpecifiedField = value;
                NotifyPropertyChanged("TypeNozzleSpecified");
            }
        }

        private Boolean typeNozzleSpecifiedField; 


        /// <summary>
        /// Length of the nozzle. 
        /// </summary>
		[XmlElement("len")]

        public LengthMeasure Len {
            get {
                return lenField;
            } 
            set {
                lenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure lenField; 


        /// <summary>
        /// Nozzle orientation. 
        /// </summary>
		[XmlElement("orientation")]

        public String Orientation {
            get {
                return orientationField;
            } 
            set {
                orientationField = value;
                NotifyPropertyChanged("Orientation");
            }
        }

        private String orientationField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Tubular Connection Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_connection", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Tubular Connection Component Schema ")]
    public partial class Connection : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
		[XmlElement("id")]

        public LengthMeasure InnerDiameter {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("InnerDiameter");
            }
        }

        private LengthMeasure idField; 


        /// <summary>
        /// Outside diameter of the body of the item. 
        /// </summary>
		[XmlElement("od")]

        public LengthMeasure OuterDiameter {
            get {
                return odField;
            } 
            set {
                odField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure odField; 


        /// <summary>
        /// Length of the item. 
        /// </summary>
		[XmlElement("len")]

        public LengthMeasure Len {
            get {
                return lenField;
            } 
            set {
                lenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure lenField; 


        /// <summary>
        /// Thread type from API RP7G, 5CT. 
        /// </summary>
		[XmlElement("typeThread")]

        public String TypeThread {
            get {
                return typeThreadField;
            } 
            set {
                typeThreadField = value;
                NotifyPropertyChanged("TypeThread");
            }
        }

        private String typeThreadField; 


        /// <summary>
        /// Thread size. 
        /// </summary>
		[XmlElement("sizeThread")]

        public LengthMeasure SizeThread {
            get {
                return sizeThreadField;
            } 
            set {
                sizeThreadField = value;
                NotifyPropertyChanged("SizeThread");
            }
        }

        private LengthMeasure sizeThreadField; 


        /// <summary>
        /// Yield stress of steel - worn stress. 
        /// </summary>
		[XmlElement("tensYield")]

        public PressureMeasure TensYield {
            get {
                return tensYieldField;
            } 
            set {
                tensYieldField = value;
                NotifyPropertyChanged("TensYield");
            }
        }

        private PressureMeasure tensYieldField; 


        /// <summary>
        /// Torque yield stress. 
        /// </summary>
		[XmlElement("tqYield")]

        public PressureMeasure TorqueYield {
            get {
                return tqYieldField;
            } 
            set {
                tqYieldField = value;
                NotifyPropertyChanged("TorqueYield");
            }
        }

        private PressureMeasure tqYieldField; 


        /// <summary>
        /// Where connected. 
        /// </summary>
		[XmlElement("position")]

        public ConnectionPosition? Position {
            get {
                return positionField;
            } 
            set {
                positionField = value;
                this.PositionSpecified = true;
                NotifyPropertyChanged("Position");
            }
        }

        private ConnectionPosition? positionField; 


		/// <summary>
        /// positionSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PositionSpecified {
            get {
                return positionSpecifiedField;
            } 
            set {
                positionSpecifiedField = value;
                NotifyPropertyChanged("PositionSpecified");
            }
        }

        private Boolean positionSpecifiedField; 


        /// <summary>
        /// For bending stiffness ratio. 
        /// </summary>
		[XmlElement("criticalCrossSection")]

        public AreaMeasure CriticalCrossSection {
            get {
                return criticalCrossSectionField;
            } 
            set {
                criticalCrossSectionField = value;
                NotifyPropertyChanged("CriticalCrossSection");
            }
        }

        private AreaMeasure criticalCrossSectionField; 


        /// <summary>
        /// Leak pressure rating. 
        /// </summary>
		[XmlElement("presLeak")]

        public PressureMeasure PresLeak {
            get {
                return presLeakField;
            } 
            set {
                presLeakField = value;
                NotifyPropertyChanged("PresLeak");
            }
        }

        private PressureMeasure presLeakField; 


        /// <summary>
        /// Make up torque. 
        /// </summary>
		[XmlElement("tqMakeup")]

        public MomentOfForceMeasure TorqueMakeup {
            get {
                return tqMakeupField;
            } 
            set {
                tqMakeupField = value;
                NotifyPropertyChanged("TorqueMakeup");
            }
        }

        private MomentOfForceMeasure tqMakeupField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Tubular Jar Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_jar", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Tubular Jar Component Schema")]
    public partial class Jar : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Up set force. 
        /// </summary>
		[XmlElement("forUpSet")]

        public ForceMeasure ForUpSet {
            get {
                return forUpSetField;
            } 
            set {
                forUpSetField = value;
                NotifyPropertyChanged("ForUpSet");
            }
        }

        private ForceMeasure forUpSetField; 


        /// <summary>
        /// Down set force. 
        /// </summary>
		[XmlElement("forDownSet")]

        public ForceMeasure ForDownSet {
            get {
                return forDownSetField;
            } 
            set {
                forDownSetField = value;
                NotifyPropertyChanged("ForDownSet");
            }
        }

        private ForceMeasure forDownSetField; 


        /// <summary>
        /// Up trip force. 
        /// </summary>
		[XmlElement("forUpTrip")]

        public ForceMeasure ForUpTrip {
            get {
                return forUpTripField;
            } 
            set {
                forUpTripField = value;
                NotifyPropertyChanged("ForUpTrip");
            }
        }

        private ForceMeasure forUpTripField; 


        /// <summary>
        /// Down trip force. 
        /// </summary>
		[XmlElement("forDownTrip")]

        public ForceMeasure ForDownTrip {
            get {
                return forDownTripField;
            } 
            set {
                forDownTripField = value;
                NotifyPropertyChanged("ForDownTrip");
            }
        }

        private ForceMeasure forDownTripField; 


        /// <summary>
        /// Pump open force. 
        /// </summary>
		[XmlElement("forPmpOpen")]

        public ForceMeasure ForPmpOpen {
            get {
                return forPmpOpenField;
            } 
            set {
                forPmpOpenField = value;
                NotifyPropertyChanged("ForPmpOpen");
            }
        }

        private ForceMeasure forPmpOpenField; 


        /// <summary>
        /// Seal friction force. 
        /// </summary>
		[XmlElement("forSealFric")]

        public ForceMeasure ForSealFric {
            get {
                return forSealFricField;
            } 
            set {
                forSealFricField = value;
                NotifyPropertyChanged("ForSealFric");
            }
        }

        private ForceMeasure forSealFricField; 


        /// <summary>
        /// The kind of jar. 
        /// </summary>
		[XmlElement("typeJar")]

        public JarType? TypeJar {
            get {
                return typeJarField;
            } 
            set {
                typeJarField = value;
                this.TypeJarSpecified = true;
                NotifyPropertyChanged("TypeJar");
            }
        }

        private JarType? typeJarField; 


		/// <summary>
        /// typeJarSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeJarSpecified {
            get {
                return typeJarSpecifiedField;
            } 
            set {
                typeJarSpecifiedField = value;
                NotifyPropertyChanged("TypeJarSpecified");
            }
        }

        private Boolean typeJarSpecifiedField; 


        /// <summary>
        /// The jar action. 
        /// </summary>
		[XmlElement("jarAction")]

        public JarAction? JarAction {
            get {
                return jarActionField;
            } 
            set {
                jarActionField = value;
                this.JarActionSpecified = true;
                NotifyPropertyChanged("JarAction");
            }
        }

        private JarAction? jarActionField; 


		/// <summary>
        /// jarActionSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean JarActionSpecified {
            get {
                return jarActionSpecifiedField;
            } 
            set {
                jarActionSpecifiedField = value;
                NotifyPropertyChanged("JarActionSpecified");
            }
        }

        private Boolean jarActionSpecifiedField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Tubular MWD Tool Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mwdTool", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Tubular MWD Tool Component Schema")]
    public partial class MwdTool : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Minimum flow rate. 
        /// </summary>
		[XmlElement("flowrateMn")]

        public VolumeFlowRateMeasure FlowrateMin {
            get {
                return flowrateMnField;
            } 
            set {
                flowrateMnField = value;
                NotifyPropertyChanged("FlowrateMin");
            }
        }

        private VolumeFlowRateMeasure flowrateMnField; 


        /// <summary>
        /// Maximum flow rate. 
        /// </summary>
		[XmlElement("flowrateMx")]

        public VolumeFlowRateMeasure FlowrateMax {
            get {
                return flowrateMxField;
            } 
            set {
                flowrateMxField = value;
                NotifyPropertyChanged("FlowrateMax");
            }
        }

        private VolumeFlowRateMeasure flowrateMxField; 


        /// <summary>
        /// Maximum Temperature. 
        /// </summary>
		[XmlElement("tempMx")]

        public ThermodynamicTemperatureMeasure TempMax {
            get {
                return tempMxField;
            } 
            set {
                tempMxField = value;
                NotifyPropertyChanged("TempMax");
            }
        }

        private ThermodynamicTemperatureMeasure tempMxField; 


        /// <summary>
        /// Equivalent inner diameter. 
        /// </summary>
		[XmlElement("idEquv")]

        public LengthMeasure IdEquv {
            get {
                return idEquvField;
            } 
            set {
                idEquvField = value;
                NotifyPropertyChanged("IdEquv");
            }
        }

        private LengthMeasure idEquvField; 


        /// <summary>
        /// Sensor object. 
        /// </summary>
		[XmlElement("sensor")]

        public List<Sensor> Sensor {
            get {
                return sensorField;
            } 
            set {
                sensorField = value;
                NotifyPropertyChanged("Sensor");
            }
        }

        private List<Sensor> sensorField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Tubular Sensor Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_sensor", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Tubular Sensor Component Schema")]
    public partial class Sensor : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Type from POSC. 
        /// </summary>
		[XmlElement("typeMeasurement")]

        public MeasurementType? TypeMeasurement {
            get {
                return typeMeasurementField;
            } 
            set {
                typeMeasurementField = value;
                this.TypeMeasurementSpecified = true;
                NotifyPropertyChanged("TypeMeasurement");
            }
        }

        private MeasurementType? typeMeasurementField; 


		/// <summary>
        /// typeMeasurementSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeMeasurementSpecified {
            get {
                return typeMeasurementSpecifiedField;
            } 
            set {
                typeMeasurementSpecifiedField = value;
                NotifyPropertyChanged("TypeMeasurementSpecified");
            }
        }

        private Boolean typeMeasurementSpecifiedField; 


        /// <summary>
        /// Offset from bottom of measurement while drilling tool. 
        /// </summary>
		[XmlElement("offsetBot")]

        public LengthMeasure OffsetBot {
            get {
                return offsetBotField;
            } 
            set {
                offsetBotField = value;
                NotifyPropertyChanged("OffsetBot");
            }
        }

        private LengthMeasure offsetBotField; 


        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[XmlElement("comments")]

        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Tubular Motor Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_motor", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Tubular Motor Component Schema")]
    public partial class Motor : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Tool offset from bottom. 
        /// </summary>
		[XmlElement("offsetTool")]

        public LengthMeasure OffsetTool {
            get {
                return offsetToolField;
            } 
            set {
                offsetToolField = value;
                NotifyPropertyChanged("OffsetTool");
            }
        }

        private LengthMeasure offsetToolField; 


        /// <summary>
        /// Pressure loss factor. 
        /// </summary>
		[XmlElement("presLossFact")]

        public Double? PresLossFact {
            get {
                return presLossFactField;
            } 
            set {
                presLossFactField = value;
                this.PresLossFactSpecified = true;
                NotifyPropertyChanged("PresLossFact");
            }
        }

        private Double? presLossFactField; 


		/// <summary>
        /// presLossFactSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PresLossFactSpecified {
            get {
                return presLossFactSpecifiedField;
            } 
            set {
                presLossFactSpecifiedField = value;
                NotifyPropertyChanged("PresLossFactSpecified");
            }
        }

        private Boolean presLossFactSpecifiedField; 


        /// <summary>
        /// Minimum flow rate. 
        /// </summary>
		[XmlElement("flowrateMn")]

        public VolumeFlowRateMeasure FlowrateMin {
            get {
                return flowrateMnField;
            } 
            set {
                flowrateMnField = value;
                NotifyPropertyChanged("FlowrateMin");
            }
        }

        private VolumeFlowRateMeasure flowrateMnField; 


        /// <summary>
        /// Maximum flow rate. 
        /// </summary>
		[XmlElement("flowrateMx")]

        public VolumeFlowRateMeasure FlowrateMax {
            get {
                return flowrateMxField;
            } 
            set {
                flowrateMxField = value;
                NotifyPropertyChanged("FlowrateMax");
            }
        }

        private VolumeFlowRateMeasure flowrateMxField; 


        /// <summary>
        /// Diameter of rotor at nozzle. 
        /// </summary>
		[XmlElement("diaRotorNozzle")]

        public LengthMeasure DiaRotorNozzle {
            get {
                return diaRotorNozzleField;
            } 
            set {
                diaRotorNozzleField = value;
                NotifyPropertyChanged("DiaRotorNozzle");
            }
        }

        private LengthMeasure diaRotorNozzleField; 


        /// <summary>
        /// Clearance inside bearing box. 
        /// </summary>
		[XmlElement("clearanceBearBox")]

        public LengthMeasure ClearanceBearBox {
            get {
                return clearanceBearBoxField;
            } 
            set {
                clearanceBearBoxField = value;
                NotifyPropertyChanged("ClearanceBearBox");
            }
        }

        private LengthMeasure clearanceBearBoxField; 


        /// <summary>
        /// Number of rotor lobes. 
        /// </summary>
		[XmlElement("lobesRotor")]

        public Int16? LobesRotor {
            get {
                return lobesRotorField;
            } 
            set {
                lobesRotorField = value;
                this.LobesRotorSpecified = true;
                NotifyPropertyChanged("LobesRotor");
            }
        }

        private Int16? lobesRotorField; 


		/// <summary>
        /// lobesRotorSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LobesRotorSpecified {
            get {
                return lobesRotorSpecifiedField;
            } 
            set {
                lobesRotorSpecifiedField = value;
                NotifyPropertyChanged("LobesRotorSpecified");
            }
        }

        private Boolean lobesRotorSpecifiedField; 


        /// <summary>
        /// Number of stator lobes. 
        /// </summary>
		[XmlElement("lobesStator")]

        public Int16? LobesStator {
            get {
                return lobesStatorField;
            } 
            set {
                lobesStatorField = value;
                this.LobesStatorSpecified = true;
                NotifyPropertyChanged("LobesStator");
            }
        }

        private Int16? lobesStatorField; 


		/// <summary>
        /// lobesStatorSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean LobesStatorSpecified {
            get {
                return lobesStatorSpecifiedField;
            } 
            set {
                lobesStatorSpecifiedField = value;
                NotifyPropertyChanged("LobesStatorSpecified");
            }
        }

        private Boolean lobesStatorSpecifiedField; 


        /// <summary>
        /// Type of bearing. 
        /// </summary>
		[XmlElement("typeBearing")]

        public BearingType? TypeBearing {
            get {
                return typeBearingField;
            } 
            set {
                typeBearingField = value;
                this.TypeBearingSpecified = true;
                NotifyPropertyChanged("TypeBearing");
            }
        }

        private BearingType? typeBearingField; 


		/// <summary>
        /// typeBearingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeBearingSpecified {
            get {
                return typeBearingSpecifiedField;
            } 
            set {
                typeBearingSpecifiedField = value;
                NotifyPropertyChanged("TypeBearingSpecified");
            }
        }

        private Boolean typeBearingSpecifiedField; 


        /// <summary>
        /// Maximum operating temperature. 
        /// </summary>
		[XmlElement("tempOpMx")]

        public ThermodynamicTemperatureMeasure TempOperatingMax {
            get {
                return tempOpMxField;
            } 
            set {
                tempOpMxField = value;
                NotifyPropertyChanged("TempOperatingMax");
            }
        }

        private ThermodynamicTemperatureMeasure tempOpMxField; 


        /// <summary>
        /// Is rotor catcher present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("rotorCatcher")]

        public Boolean? RotorCatcher {
            get {
                return rotorCatcherField;
            } 
            set {
                rotorCatcherField = value;
                this.RotorCatcherSpecified = true;
                NotifyPropertyChanged("RotorCatcher");
            }
        }

        private Boolean? rotorCatcherField; 


		/// <summary>
        /// rotorCatcherSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean RotorCatcherSpecified {
            get {
                return rotorCatcherSpecifiedField;
            } 
            set {
                rotorCatcherSpecifiedField = value;
                NotifyPropertyChanged("RotorCatcherSpecified");
            }
        }

        private Boolean rotorCatcherSpecifiedField; 


        /// <summary>
        /// Is dump valve present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("dumpValve")]

        public Boolean? DumpValve {
            get {
                return dumpValveField;
            } 
            set {
                dumpValveField = value;
                this.DumpValveSpecified = true;
                NotifyPropertyChanged("DumpValve");
            }
        }

        private Boolean? dumpValveField; 


		/// <summary>
        /// dumpValveSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DumpValveSpecified {
            get {
                return dumpValveSpecifiedField;
            } 
            set {
                dumpValveSpecifiedField = value;
                NotifyPropertyChanged("DumpValveSpecified");
            }
        }

        private Boolean dumpValveSpecifiedField; 


        /// <summary>
        /// Nozzle diameter. 
        /// </summary>
		[XmlElement("diaNozzle")]

        public LengthMeasure DiaNozzle {
            get {
                return diaNozzleField;
            } 
            set {
                diaNozzleField = value;
                NotifyPropertyChanged("DiaNozzle");
            }
        }

        private LengthMeasure diaNozzleField; 


        /// <summary>
        /// Is motor rotatable? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[XmlElement("rotatable")]

        public Boolean? Rotatable {
            get {
                return rotatableField;
            } 
            set {
                rotatableField = value;
                this.RotatableSpecified = true;
                NotifyPropertyChanged("Rotatable");
            }
        }

        private Boolean? rotatableField; 


		/// <summary>
        /// rotatableSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean RotatableSpecified {
            get {
                return rotatableSpecifiedField;
            } 
            set {
                rotatableSpecifiedField = value;
                NotifyPropertyChanged("RotatableSpecified");
            }
        }

        private Boolean rotatableSpecifiedField; 


        /// <summary>
        /// Minimum bend angle setting. 
        /// </summary>
		[XmlElement("bendSettingsMn")]

        public PlaneAngleMeasure BendSettingsMin {
            get {
                return bendSettingsMnField;
            } 
            set {
                bendSettingsMnField = value;
                NotifyPropertyChanged("BendSettingsMin");
            }
        }

        private PlaneAngleMeasure bendSettingsMnField; 


        /// <summary>
        /// Maximum bend angle setting. 
        /// </summary>
		[XmlElement("bendSettingsMx")]

        public PlaneAngleMeasure BendSettingsMax {
            get {
                return bendSettingsMxField;
            } 
            set {
                bendSettingsMxField = value;
                NotifyPropertyChanged("BendSettingsMax");
            }
        }

        private PlaneAngleMeasure bendSettingsMxField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Stablizer Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stabilizer", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Stablizer Component Schema")]
    public partial class Stabilizer : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Length of blade. 
        /// </summary>
		[XmlElement("lenBlade")]

        public LengthMeasure LenBlade {
            get {
                return lenBladeField;
            } 
            set {
                lenBladeField = value;
                NotifyPropertyChanged("LenBlade");
            }
        }

        private LengthMeasure lenBladeField; 


        /// <summary>
        /// Gauge Length of blade. That is, the length of the blade which measures at the odBladeMx.
        /// </summary>
		[XmlElement("lenBladeGauge")]

        public LengthMeasure LenBladeGauge {
            get {
                return lenBladeGaugeField;
            } 
            set {
                lenBladeGaugeField = value;
                NotifyPropertyChanged("LenBladeGauge");
            }
        }

        private LengthMeasure lenBladeGaugeField; 


        /// <summary>
        /// Maximum outer diameter of blade. 
        /// </summary>
		[XmlElement("odBladeMx")]

        public LengthMeasure OuterDiameterBladeMax {
            get {
                return odBladeMxField;
            } 
            set {
                odBladeMxField = value;
                NotifyPropertyChanged("OuterDiameterBladeMax");
            }
        }

        private LengthMeasure odBladeMxField; 


        /// <summary>
        /// Minimum outer diameter of blade. 
        /// </summary>
		[XmlElement("odBladeMn")]

        public LengthMeasure OuterDiameterBladeMin {
            get {
                return odBladeMnField;
            } 
            set {
                odBladeMnField = value;
                NotifyPropertyChanged("OuterDiameterBladeMin");
            }
        }

        private LengthMeasure odBladeMnField; 


        /// <summary>
        /// Distance of blade bottom from bottom of component. 
        /// </summary>
		[XmlElement("distBladeBot")]

        public LengthMeasure DistBladeBot {
            get {
                return distBladeBotField;
            } 
            set {
                distBladeBotField = value;
                NotifyPropertyChanged("DistBladeBot");
            }
        }

        private LengthMeasure distBladeBotField; 


        /// <summary>
        /// Blade shape. 
        /// </summary>
		[XmlElement("shapeBlade")]

        public BladeShapeType? ShapeBlade {
            get {
                return shapeBladeField;
            } 
            set {
                shapeBladeField = value;
                this.ShapeBladeSpecified = true;
                NotifyPropertyChanged("ShapeBlade");
            }
        }

        private BladeShapeType? shapeBladeField; 


		/// <summary>
        /// shapeBladeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ShapeBladeSpecified {
            get {
                return shapeBladeSpecifiedField;
            } 
            set {
                shapeBladeSpecifiedField = value;
                NotifyPropertyChanged("ShapeBladeSpecified");
            }
        }

        private Boolean shapeBladeSpecifiedField; 


        /// <summary>
        /// Friction factor. 
        /// </summary>
		[XmlElement("factFric")]

        public Double? FactFric {
            get {
                return factFricField;
            } 
            set {
                factFricField = value;
                this.FactFricSpecified = true;
                NotifyPropertyChanged("FactFric");
            }
        }

        private Double? factFricField; 


		/// <summary>
        /// factFricSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean FactFricSpecified {
            get {
                return factFricSpecifiedField;
            } 
            set {
                factFricSpecifiedField = value;
                NotifyPropertyChanged("FactFricSpecified");
            }
        }

        private Boolean factFricSpecifiedField; 


        /// <summary>
        /// Blade type. 
        /// </summary>
		[XmlElement("typeBlade")]

        public BladeType? TypeBlade {
            get {
                return typeBladeField;
            } 
            set {
                typeBladeField = value;
                this.TypeBladeSpecified = true;
                NotifyPropertyChanged("TypeBlade");
            }
        }

        private BladeType? typeBladeField; 


		/// <summary>
        /// typeBladeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeBladeSpecified {
            get {
                return typeBladeSpecifiedField;
            } 
            set {
                typeBladeSpecifiedField = value;
                NotifyPropertyChanged("TypeBladeSpecified");
            }
        }

        private Boolean typeBladeSpecifiedField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Tubular Bend Component Schema.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bend", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Tubular Bend Component Schema.")]
    public partial class Bend : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Angle of the bend. 
        /// </summary>
		[XmlElement("angle")]

        public PlaneAngleMeasure Angle {
            get {
                return angleField;
            } 
            set {
                angleField = value;
                NotifyPropertyChanged("Angle");
            }
        }

        private PlaneAngleMeasure angleField; 


        /// <summary>
        /// Distance of bend from bottom of component. 
        /// </summary>
		[XmlElement("distBendBot")]

        public LengthMeasure DistBendBot {
            get {
                return distBendBotField;
            } 
            set {
                distBendBotField = value;
                NotifyPropertyChanged("DistBendBot");
            }
        }

        private LengthMeasure distBendBotField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Hole Opener Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_holeOpener", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Hole Opener Component Schema")]
    public partial class HoleOpener : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Under reamer or fixed blade. 
        /// </summary>
		[XmlElement("typeHoleOpener")]

        public HoleOpenerType? TypeHoleOpener {
            get {
                return typeHoleOpenerField;
            } 
            set {
                typeHoleOpenerField = value;
                this.TypeHoleOpenerSpecified = true;
                NotifyPropertyChanged("TypeHoleOpener");
            }
        }

        private HoleOpenerType? typeHoleOpenerField; 


		/// <summary>
        /// typeHoleOpenerSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeHoleOpenerSpecified {
            get {
                return typeHoleOpenerSpecifiedField;
            } 
            set {
                typeHoleOpenerSpecifiedField = value;
                NotifyPropertyChanged("TypeHoleOpenerSpecified");
            }
        }

        private Boolean typeHoleOpenerSpecifiedField; 


        /// <summary>
        /// Number of cutters. 
        /// </summary>
		[XmlElement("numCutter")]

        public Int16? NumCutter {
            get {
                return numCutterField;
            } 
            set {
                numCutterField = value;
                this.NumCutterSpecified = true;
                NotifyPropertyChanged("NumCutter");
            }
        }

        private Int16? numCutterField; 


		/// <summary>
        /// numCutterSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NumCutterSpecified {
            get {
                return numCutterSpecifiedField;
            } 
            set {
                numCutterSpecifiedField = value;
                NotifyPropertyChanged("NumCutterSpecified");
            }
        }

        private Boolean numCutterSpecifiedField; 


        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[XmlElement("manufacturer")]

        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 


        /// <summary>
        /// Diameter of the reamer. 
        /// </summary>
		[XmlElement("diaHoleOpener")]

        public LengthMeasure DiaHoleOpener {
            get {
                return diaHoleOpenerField;
            } 
            set {
                diaHoleOpenerField = value;
                NotifyPropertyChanged("DiaHoleOpener");
            }
        }

        private LengthMeasure diaHoleOpenerField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Rotary Steerable Tool Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rotarySteerableTool", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Rotary Steerable Tool Component Schema ")]
    public partial class RotarySteerableTool : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Method used to direct the deviation of the trajectory: PointBit or PushBit.
        /// </summary>
		[XmlElement("deflectionMethod")]

        public DeflectionMethod? DeflectionMethod {
            get {
                return deflectionMethodField;
            } 
            set {
                deflectionMethodField = value;
                NotifyPropertyChanged("DeflectionMethod");
            }
        }

        private DeflectionMethod? deflectionMethodField; 


        /// <summary>
        /// Used with PointTheBit type RSS tools, describes the angle of the bit.
        /// </summary>
        [XmlElement("bendAngle")]
        public PlaneAngleMeasure BendAngle {
            get {
                return bendAngleField;
            } 
            set {
                if (value != null && BendOffsetSpecified) throw new Exception("Cannot set property BendAngle when property BendOffset is already set");
                bendAngleField = value;
                BendAngleSpecified = (value!=null);
                NotifyPropertyChanged("BendAngle");
            }
        }

        private PlaneAngleMeasure bendAngleField; 
        /// <summary>
        /// Boolean to indicate if BendAngle has been set. Used for serialization.
        /// </summary>
        private Boolean BendAngleSpecified = false; 

        /// <summary>
        /// Offset from bottom connection to bend.
        /// </summary>
        [XmlElement("bendOffset")]
        public LengthMeasure BendOffset {
            get {
                return bendOffsetField;
            } 
            set {
                if (value != null && BendAngleSpecified) throw new Exception("Cannot set property BendOffset when property BendAngle is already set");
                bendOffsetField = value;
                BendOffsetSpecified = (value!=null);
                NotifyPropertyChanged("BendOffset");
            }
        }

        private LengthMeasure bendOffsetField; 
        /// <summary>
        /// Boolean to indicate if BendOffset has been set. Used for serialization.
        /// </summary>
        private Boolean BendOffsetSpecified = false; 



        /// <summary>
        /// Minimum size of hole in which the tool can operate.
        /// </summary>
		[XmlElement("holeSizeMn")]

        public LengthMeasure HoleSizeMin {
            get {
                return holeSizeMnField;
            } 
            set {
                holeSizeMnField = value;
                NotifyPropertyChanged("HoleSizeMin");
            }
        }

        private LengthMeasure holeSizeMnField; 


        /// <summary>
        /// Maximum size of hole in which the tool can operate.
        /// </summary>
		[XmlElement("holeSizeMx")]

        public LengthMeasure HoleSizeMax {
            get {
                return holeSizeMxField;
            } 
            set {
                holeSizeMxField = value;
                NotifyPropertyChanged("HoleSizeMax");
            }
        }

        private LengthMeasure holeSizeMxField; 


        /// <summary>
        /// Maximum weight on the bit.
        /// </summary>
		[XmlElement("wobMx")]

        public ForceMeasure WobMax {
            get {
                return wobMxField;
            } 
            set {
                wobMxField = value;
                NotifyPropertyChanged("WobMax");
            }
        }

        private ForceMeasure wobMxField; 


        /// <summary>
        /// Suggested operating speed.
        /// </summary>
		[XmlElement("operatingSpeed")]

        public AnglePerTimeMeasure OperatingSpeed {
            get {
                return operatingSpeedField;
            } 
            set {
                operatingSpeedField = value;
                NotifyPropertyChanged("OperatingSpeed");
            }
        }

        private AnglePerTimeMeasure operatingSpeedField; 


        /// <summary>
        /// Maximum rotation speed.
        /// </summary>
		[XmlElement("speedMx")]

        public AnglePerTimeMeasure SpeedMax {
            get {
                return speedMxField;
            } 
            set {
                speedMxField = value;
                NotifyPropertyChanged("SpeedMax");
            }
        }

        private AnglePerTimeMeasure speedMxField; 


        /// <summary>
        /// Minimum flow rate for tool operation.
        /// </summary>
		[XmlElement("flowRateMn")]

        public VolumeFlowRateMeasure FlowRateMin {
            get {
                return flowRateMnField;
            } 
            set {
                flowRateMnField = value;
                NotifyPropertyChanged("FlowRateMin");
            }
        }

        private VolumeFlowRateMeasure flowRateMnField; 


        /// <summary>
        /// Maximum flow rate for tool operation.
        /// </summary>
		[XmlElement("flowRateMx")]

        public VolumeFlowRateMeasure FlowRateMax {
            get {
                return flowRateMxField;
            } 
            set {
                flowRateMxField = value;
                NotifyPropertyChanged("FlowRateMax");
            }
        }

        private VolumeFlowRateMeasure flowRateMxField; 


        /// <summary>
        /// Minimum flow rate for programming tool.
        /// </summary>
		[XmlElement("downLinkFlowRateMn")]

        public VolumeFlowRateMeasure DownLinkFlowRateMin {
            get {
                return downLinkFlowRateMnField;
            } 
            set {
                downLinkFlowRateMnField = value;
                NotifyPropertyChanged("DownLinkFlowRateMin");
            }
        }

        private VolumeFlowRateMeasure downLinkFlowRateMnField; 


        /// <summary>
        /// Maximum flow rate for programming tool.
        /// </summary>
		[XmlElement("downLinkFlowRateMx")]

        public VolumeFlowRateMeasure DownLinkFlowRateMax {
            get {
                return downLinkFlowRateMxField;
            } 
            set {
                downLinkFlowRateMxField = value;
                NotifyPropertyChanged("DownLinkFlowRateMax");
            }
        }

        private VolumeFlowRateMeasure downLinkFlowRateMxField; 


        /// <summary>
        /// Pressure drop across tool.
        /// </summary>
		[XmlElement("pressLossFact")]

        public Double? PressLossFact {
            get {
                return pressLossFactField;
            } 
            set {
                pressLossFactField = value;
                this.PressLossFactSpecified = true;
                NotifyPropertyChanged("PressLossFact");
            }
        }

        private Double? pressLossFactField; 


		/// <summary>
        /// pressLossFactSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PressLossFactSpecified {
            get {
                return pressLossFactSpecifiedField;
            } 
            set {
                pressLossFactSpecifiedField = value;
                NotifyPropertyChanged("PressLossFactSpecified");
            }
        }

        private Boolean pressLossFactSpecifiedField; 


        /// <summary>
        /// The number of contact pads.
        /// </summary>
		[XmlElement("padCount")]

        public Int16? PadCount {
            get {
                return padCountField;
            } 
            set {
                padCountField = value;
                this.PadCountSpecified = true;
                NotifyPropertyChanged("PadCount");
            }
        }

        private Int16? padCountField; 


		/// <summary>
        /// padCountSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PadCountSpecified {
            get {
                return padCountSpecifiedField;
            } 
            set {
                padCountSpecifiedField = value;
                NotifyPropertyChanged("PadCountSpecified");
            }
        }

        private Boolean padCountSpecifiedField; 


        /// <summary>
        /// Length of contact pad.
        /// </summary>
		[XmlElement("padLen")]

        public LengthMeasure PadLen {
            get {
                return padLenField;
            } 
            set {
                padLenField = value;
                NotifyPropertyChanged("PadLen");
            }
        }

        private LengthMeasure padLenField; 


        /// <summary>
        /// Width of contact pad.
        /// </summary>
		[XmlElement("padWidth")]

        public LengthMeasure PadWidth {
            get {
                return padWidthField;
            } 
            set {
                padWidthField = value;
                NotifyPropertyChanged("PadWidth");
            }
        }

        private LengthMeasure padWidthField; 


        /// <summary>
        /// Offset from bottom of pad to bottom connector.
        /// </summary>
		[XmlElement("padOffset")]

        public LengthMeasure PadOffset {
            get {
                return padOffsetField;
            } 
            set {
                padOffsetField = value;
                NotifyPropertyChanged("PadOffset");
            }
        }

        private LengthMeasure padOffsetField; 


        /// <summary>
        /// Outside diameter of tool when pads are activated.
        /// </summary>
		[XmlElement("openPadOd")]

        public LengthMeasure OpenPadOuterDiameter {
            get {
                return openPadOdField;
            } 
            set {
                openPadOdField = value;
                NotifyPropertyChanged("OpenPadOuterDiameter");
            }
        }

        private LengthMeasure openPadOdField; 


        /// <summary>
        /// Outiside diameter of tool when pads are closed.
        /// </summary>
		[XmlElement("closePadOd")]

        public LengthMeasure ClosePadOuterDiameter {
            get {
                return closePadOdField;
            } 
            set {
                closePadOdField = value;
                NotifyPropertyChanged("ClosePadOuterDiameter");
            }
        }

        private LengthMeasure closePadOdField; 


        /// <summary>
        /// A sensor.
        /// </summary>
		[XmlElement("sensor")]

        public List<Sensor> Sensor {
            get {
                return sensorField;
            } 
            set {
                sensorField = value;
                NotifyPropertyChanged("Sensor");
            }
        }

        private List<Sensor> sensorField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_wbGeometrys xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("wbGeometrys", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_wbGeometrys xsd type.")]
    public partial class WellboreGeometryList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single wellbore geometry. 
        /// </summary>
		[XmlElement("wbGeometry")]

        public List<StandAloneWellboreGeometry> WellboreGeometry {
            get {
                return wbGeometryField;
            } 
            set {
                wbGeometryField = value;
                NotifyPropertyChanged("WellboreGeometry");
            }
        }

        private List<StandAloneWellboreGeometry> wbGeometryField; 


        /// <summary>
        /// A single wellbore geometry. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellboreGeometry;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// WITSML - Wellbore Geometry Component Schema 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wbGeometry", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Wellbore Geometry Component Schema ")]
    public partial class StandAloneWellboreGeometry : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the wellbore geometry. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the wellbore geometry. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Time report generated. 
        /// </summary>
		[XmlElement("dTimReport")]

        public DateTime? DateTimeReport {
            get {
                return dTimReportField;
            } 
            set {
                dTimReportField = value;
                NotifyPropertyChanged("DateTimeReport");
            }
        }

        private DateTime? dTimReportField; 


        /// <summary>
        /// Measured depth at bottom. 
        /// </summary>
		[XmlElement("mdBottom")]

        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 


        /// <summary>
        /// Air gap. 
        /// </summary>
		[XmlElement("gapAir")]

        public LengthMeasure GapAir {
            get {
                return gapAirField;
            } 
            set {
                gapAirField = value;
                NotifyPropertyChanged("GapAir");
            }
        }

        private LengthMeasure gapAirField; 


        /// <summary>
        /// Water depth. 
        /// </summary>
		[XmlElement("depthWaterMean")]

        public LengthMeasure DepthWaterMean {
            get {
                return depthWaterMeanField;
            } 
            set {
                depthWaterMeanField = value;
                NotifyPropertyChanged("DepthWaterMean");
            }
        }

        private LengthMeasure depthWaterMeanField; 


        /// <summary>
        /// Wellbore geometry section object. 
        /// </summary>
		[XmlElement("wbGeometrySection")]

        public List<WellboreGeometrySection> WellboreGeometrySection {
            get {
                return wbGeometrySectionField;
            } 
            set {
                wbGeometrySectionField = value;
                NotifyPropertyChanged("WellboreGeometrySection");
            }
        }

        private List<WellboreGeometrySection> wbGeometrySectionField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_wells xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("wells", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_wells xsd type.")]
    public partial class WellList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// Information about a single well. A well is a unique surface location from which wellbores are drilled into the Earth for the purpose of either (1) finding or producing underground resources; or (2) providing services related to the production of underground resources. 
        /// </summary>
		[XmlElement("well")]

        public List<Well> Well {
            get {
                return wellField;
            } 
            set {
                wellField = value;
                NotifyPropertyChanged("Well");
            }
        }

        private List<Well> wellField; 


        /// <summary>
        /// Information about a single well. A well is a unique surface location from which wellbores are drilled into the Earth for the purpose of either (1) finding or producing underground resources; or (2) providing services related to the production of underground resources. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Well;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Well object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_well", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Well object.")]
    public partial class Well : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Legal name of the well. 
        /// </summary>
		[XmlElement("nameLegal")]

        public String NameLegal {
            get {
                return nameLegalField;
            } 
            set {
                nameLegalField = value;
                NotifyPropertyChanged("NameLegal");
            }
        }

        private String nameLegalField; 


        /// <summary>
        /// License number of the well. 
        /// </summary>
		[XmlElement("numLicense")]

        public String NumLicense {
            get {
                return numLicenseField;
            } 
            set {
                numLicenseField = value;
                NotifyPropertyChanged("NumLicense");
            }
        }

        private String numLicenseField; 


        /// <summary>
        /// Government assigned well number. 
        /// </summary>
		[XmlElement("numGovt")]

        public String NumGovt {
            get {
                return numGovtField;
            } 
            set {
                numGovtField = value;
                NotifyPropertyChanged("NumGovt");
            }
        }

        private String numGovtField; 


        /// <summary>
        /// Date and time license was issued. 
        /// </summary>
		[XmlElement("dTimLicense")]

        public DateTime? DateTimeLicense {
            get {
                return dTimLicenseField;
            } 
            set {
                dTimLicenseField = value;
                this.DateTimeLicenseSpecified = true;
                NotifyPropertyChanged("DateTimeLicense");
            }
        }

        private DateTime? dTimLicenseField; 


		/// <summary>
        /// dTimLicenseSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeLicenseSpecified {
            get {
                return dTimLicenseSpecifiedField;
            } 
            set {
                dTimLicenseSpecifiedField = value;
                NotifyPropertyChanged("DateTimeLicenseSpecified");
            }
        }

        private Boolean dTimLicenseSpecifiedField; 


        /// <summary>
        /// Name of the field in which the well is located. 
        /// </summary>
		[XmlElement("field")]

        public String Field {
            get {
                return fieldField;
            } 
            set {
                fieldField = value;
                NotifyPropertyChanged("Field");
            }
        }

        private String fieldField; 


        /// <summary>
        /// Country in which well is located. 
        /// </summary>
		[XmlElement("country")]

        public String Country {
            get {
                return countryField;
            } 
            set {
                countryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private String countryField; 


        /// <summary>
        /// State or province in which well is located. 
        /// </summary>
		[XmlElement("state")]

        public String State {
            get {
                return stateField;
            } 
            set {
                stateField = value;
                NotifyPropertyChanged("State");
            }
        }

        private String stateField; 


        /// <summary>
        /// County in which the well is located. 
        /// </summary>
		[XmlElement("county")]

        public String County {
            get {
                return countyField;
            } 
            set {
                countyField = value;
                NotifyPropertyChanged("County");
            }
        }

        private String countyField; 


        /// <summary>
        /// Geo-political region. 
        /// </summary>
		[XmlElement("region")]

        public String Region {
            get {
                return regionField;
            } 
            set {
                regionField = value;
                NotifyPropertyChanged("Region");
            }
        }

        private String regionField; 


        /// <summary>
        /// Geo-political district name. 
        /// </summary>
		[XmlElement("district")]

        public String District {
            get {
                return districtField;
            } 
            set {
                districtField = value;
                NotifyPropertyChanged("District");
            }
        }

        private String districtField; 


        /// <summary>
        /// Block name in which well is located. 
        /// </summary>
		[XmlElement("block")]

        public String Block {
            get {
                return blockField;
            } 
            set {
                blockField = value;
                NotifyPropertyChanged("Block");
            }
        }

        private String blockField; 


        /// <summary>
        /// The time zone in which well is located. It is the deviation in hours and minutes from UTC. This should be the normal time zone at the well and not a seasonally adjusted value such as daylight savings time. While the time zone is optional in a date time value, it is strongly advised that the zone always be specified in each date time value. The time zone in a date time value may use seasonally adjusted values.
        /// </summary>
		[XmlElement("timeZone")]

        public String TimeZone {
            get {
                return timeZoneField;
            } 
            set {
                timeZoneField = value;
                NotifyPropertyChanged("TimeZone");
            }
        }

        private String timeZoneField; 


        /// <summary>
        /// Operator company name. 
        /// </summary>
		[XmlElement("operator")]

        public String Operator {
            get {
                return operatorField;
            } 
            set {
                operatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private String operatorField; 


        /// <summary>
        /// Division of operator company. 
        /// </summary>
		[XmlElement("operatorDiv")]

        public String OperatorDivision {
            get {
                return operatorDivField;
            } 
            set {
                operatorDivField = value;
                NotifyPropertyChanged("OperatorDivision");
            }
        }

        private String operatorDivField; 


        /// <summary>
        /// Interest for Operator. Commonly in percent. 
        /// </summary>
		[XmlElement("pcInterest")]

        public DimensionlessMeasure PercentInterest {
            get {
                return pcInterestField;
            } 
            set {
                pcInterestField = value;
                NotifyPropertyChanged("PercentInterest");
            }
        }

        private DimensionlessMeasure pcInterestField; 


        /// <summary>
        /// American Petroleum Institute well number. 
        /// </summary>
		[XmlElement("numAPI")]

        public String NumAPI {
            get {
                return numAPIField;
            } 
            set {
                numAPIField = value;
                NotifyPropertyChanged("NumAPI");
            }
        }

        private String numAPIField; 


        /// <summary>
        /// POSC Well status. 
        /// </summary>
		[XmlElement("statusWell")]

        public WellStatus? StatusWell {
            get {
                return statusWellField;
            } 
            set {
                statusWellField = value;
                this.StatusWellSpecified = true;
                NotifyPropertyChanged("StatusWell");
            }
        }

        private WellStatus? statusWellField; 


		/// <summary>
        /// statusWellSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean StatusWellSpecified {
            get {
                return statusWellSpecifiedField;
            } 
            set {
                statusWellSpecifiedField = value;
                NotifyPropertyChanged("StatusWellSpecified");
            }
        }

        private Boolean statusWellSpecifiedField; 


        /// <summary>
        /// POSC well purpose. 
        /// </summary>
		[XmlElement("purposeWell")]

        public WellPurpose? PurposeWell {
            get {
                return purposeWellField;
            } 
            set {
                purposeWellField = value;
                this.PurposeWellSpecified = true;
                NotifyPropertyChanged("PurposeWell");
            }
        }

        private WellPurpose? purposeWellField; 


		/// <summary>
        /// purposeWellSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PurposeWellSpecified {
            get {
                return purposeWellSpecifiedField;
            } 
            set {
                purposeWellSpecifiedField = value;
                NotifyPropertyChanged("PurposeWellSpecified");
            }
        }

        private Boolean purposeWellSpecifiedField; 


        /// <summary>
        /// POSC well fluid. The type of fluid being produced from or injected into a well facility. 
        /// </summary>
		[XmlElement("fluidWell")]

        public WellFluid? FluidWell {
            get {
                return fluidWellField;
            } 
            set {
                fluidWellField = value;
                this.FluidWellSpecified = true;
                NotifyPropertyChanged("FluidWell");
            }
        }

        private WellFluid? fluidWellField; 


		/// <summary>
        /// fluidWellSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean FluidWellSpecified {
            get {
                return fluidWellSpecifiedField;
            } 
            set {
                fluidWellSpecifiedField = value;
                NotifyPropertyChanged("FluidWellSpecified");
            }
        }

        private Boolean fluidWellSpecifiedField; 


        /// <summary>
        /// POSC well direction. The direction of flow of the fluids in a well facility (generally, injected or produced, or some combination). 
        /// </summary>
		[XmlElement("directionWell")]

        public WellDirection? DirectionWell {
            get {
                return directionWellField;
            } 
            set {
                directionWellField = value;
                this.DirectionWellSpecified = true;
                NotifyPropertyChanged("DirectionWell");
            }
        }

        private WellDirection? directionWellField; 


		/// <summary>
        /// directionWellSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DirectionWellSpecified {
            get {
                return directionWellSpecifiedField;
            } 
            set {
                directionWellSpecifiedField = value;
                NotifyPropertyChanged("DirectionWellSpecified");
            }
        }

        private Boolean directionWellSpecifiedField; 


        /// <summary>
        /// Date and time at which well was spudded. 
        /// </summary>
		[XmlElement("dTimSpud")]

        public DateTime? DateTimeSpud {
            get {
                return dTimSpudField;
            } 
            set {
                dTimSpudField = value;
                this.DateTimeSpudSpecified = true;
                NotifyPropertyChanged("DateTimeSpud");
            }
        }

        private DateTime? dTimSpudField; 


		/// <summary>
        /// dTimSpudSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeSpudSpecified {
            get {
                return dTimSpudSpecifiedField;
            } 
            set {
                dTimSpudSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpudSpecified");
            }
        }

        private Boolean dTimSpudSpecifiedField; 


        /// <summary>
        /// Date and time at which well was plugged and abandoned. 
        /// </summary>
		[XmlElement("dTimPa")]

        public DateTime? DateTimePluggedAndAbandoned {
            get {
                return dTimPaField;
            } 
            set {
                dTimPaField = value;
                this.DateTimePluggedAndAbandonedSpecified = true;
                NotifyPropertyChanged("DateTimePluggedAndAbandoned");
            }
        }

        private DateTime? dTimPaField; 


		/// <summary>
        /// dTimPaSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimePluggedAndAbandonedSpecified {
            get {
                return dTimPaSpecifiedField;
            } 
            set {
                dTimPaSpecifiedField = value;
                NotifyPropertyChanged("DateTimePluggedAndAbandonedSpecified");
            }
        }

        private Boolean dTimPaSpecifiedField; 


        /// <summary>
        /// Elevation of wellhead relative to a wellDatum. 
        /// </summary>
		[XmlElement("wellheadElevation")]

        public WellElevationCoord WellheadElevation {
            get {
                return wellheadElevationField;
            } 
            set {
                wellheadElevationField = value;
                NotifyPropertyChanged("WellheadElevation");
            }
        }

        private WellElevationCoord wellheadElevationField; 


        /// <summary>
        /// A datum to which elevations and depths are referenced. 
        /// </summary>
		[XmlElement("wellDatum")]

        public List<WellDatum> WellDatum {
            get {
                return wellDatumField;
            } 
            set {
                wellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

        private List<WellDatum> wellDatumField; 


        /// <summary>
        /// Elevation of ground level (land rigs). 
        /// </summary>
		[XmlElement("groundElevation")]

        public WellElevationCoord GroundElevation {
            get {
                return groundElevationField;
            } 
            set {
                groundElevationField = value;
                NotifyPropertyChanged("GroundElevation");
            }
        }

        private WellElevationCoord groundElevationField; 


        /// <summary>
        /// Depth of water (not land rigs). 
        /// </summary>
		[XmlElement("waterDepth")]

        public WellVerticalDepthCoord WaterDepth {
            get {
                return waterDepthField;
            } 
            set {
                waterDepthField = value;
                NotifyPropertyChanged("WaterDepth");
            }
        }

        private WellVerticalDepthCoord waterDepthField; 


        /// <summary>
        /// the 2D coordinates of the well surface point in one coordinate reference system. This is where the well crosses ground level on land and crosses the platform offshore. 
        /// </summary>
		[XmlElement("wellLocation")]

        public List<Location> WellLocation {
            get {
                return wellLocationField;
            } 
            set {
                wellLocationField = value;
                NotifyPropertyChanged("WellLocation");
            }
        }

        private List<Location> wellLocationField; 


        /// <summary>
        /// Defines a reference point within the context of the well. 
        /// </summary>
		[XmlElement("referencePoint")]

        public List<ReferencePoint> ReferencePoint {
            get {
                return referencePointField;
            } 
            set {
                referencePointField = value;
                NotifyPropertyChanged("ReferencePoint");
            }
        }

        private List<ReferencePoint> referencePointField; 


        /// <summary>
        /// A coordinate reference system that was used within the context of this well. 
        /// </summary>
		[XmlElement("wellCRS")]

        public List<WellCRS> WellCRS {
            get {
                return wellCRSField;
            } 
            set {
                wellCRSField = value;
                NotifyPropertyChanged("WellCRS");
            }
        }

        private List<WellCRS> wellCRSField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// Defines the datums associated with elevation, vertical depth and measured depth coordinates within the context of a well. 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellDatum", Namespace="http://www.witsml.org/schemas/131")]

    [Description("Defines the datums associated with elevation, vertical depth and measured depth coordinates within the context of a well. ")]
    public partial class WellDatum : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The human understandable contextual name of the reference datum.
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// The code value that represents the type of reference datum. This may represent a point on a device (e.g., kelly bushing) or it may represent a vertical reference datum (e.g., mean sea level).
        /// </summary>
		[XmlElement("code")]

        public ElevCodeEnum? Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                this.CodeSpecified = true;
                NotifyPropertyChanged("Code");
            }
        }

        private ElevCodeEnum? codeField; 


		/// <summary>
        /// codeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CodeSpecified {
            get {
                return codeSpecifiedField;
            } 
            set {
                codeSpecifiedField = value;
                NotifyPropertyChanged("CodeSpecified");
            }
        }

        private Boolean codeSpecifiedField; 


        /// <summary>
        /// The name of the vertical reference datum in a particular naming system. This should only be specified if the above 'code' represents some variation of sea level. An optional short name (code) can also be specified. Specifying a well known datum is highly desired if the above code is a variant of sea level because sea level varies over time and space. An example would be to specify a name of 'Caspian Sea' with a code of '5106' in the 'EPSG' naming system.
        /// </summary>
		[XmlElement("datumName")]

        public WellKnownNameStruct DatumName {
            get {
                return datumNameField;
            } 
            set {
                datumNameField = value;
                NotifyPropertyChanged("DatumName");
            }
        }

        private WellKnownNameStruct datumNameField; 


        /// <summary>
        /// Since various activities may use different points as measurement datums, it is useful to characterize the point based on its usage. A well reference datum may have more than one such characterization. For example, it may be the datum used by the driller and logger for measuring their depths. Example usage values would be 'permanent','driller', 'logger' 'WRP' (well reference point) and 'SRP' (site reference point).
        /// </summary>
		[XmlElement("kind")]

        public List<String> Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private List<String> kindField; 


        /// <summary>
        /// A pointer to the wellbore that contains the reference datum. This should be specified if a measured depth is given.
        /// </summary>
		[XmlElement("wellbore")]

        public RefWellWellbore Wellbore {
            get {
                return wellboreField;
            } 
            set {
                wellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private RefWellWellbore wellboreField; 


        /// <summary>
        /// A pointer to the rig that contains the device used as a reference datum. The rig may be associated with a wellbore in another well (e.g., pattern drilling using a rig on a track).
        /// </summary>
		[XmlElement("rig")]

        public RefWellWellboreRig Rig {
            get {
                return rigField;
            } 
            set {
                rigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private RefWellWellboreRig rigField; 


        /// <summary>
        /// The gravity based elevation coordinate of this reference datum as measured from another datum. Positive moving upward from the elevation datum. An elevation should be given unless this is a vertical reference datum (e.g., sea level). 
        /// </summary>
		[XmlElement("elevation")]

        public WellElevationCoord Elevation {
            get {
                return elevationField;
            } 
            set {
                elevationField = value;
                NotifyPropertyChanged("Elevation");
            }
        }

        private WellElevationCoord elevationField; 


        /// <summary>
        /// The measured depth coordinate of this reference datum as measured from another datum. The measured depth datum should either be the same as the elevation datum or it should be relatable to the elevation datum through other datums. Positive moving toward the bottomhole from the measured depth datum. This should be given when a local reference is "downhole", such as a kickoff point or ocean bottom template, and the borehole may not be vertical. If a Depth is given then an Elevation should also be given.
        /// </summary>
		[XmlElement("measuredDepth")]

        public MeasuredDepthCoord MeasuredDepth {
            get {
                return measuredDepthField;
            } 
            set {
                measuredDepthField = value;
                NotifyPropertyChanged("MeasuredDepth");
            }
        }

        private MeasuredDepthCoord measuredDepthField; 


        /// <summary>
        /// A contextual description of the well reference datum.
        /// </summary>
		[XmlElement("comment")]

        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 


		/// <summary>
        /// True indicates that this is the default reference datum for measured depth coordinates. False or not given indicates that this is not the default reference datum. Measured depth coordinates that do not specify a datum reference should be assumed to be measured relative to this default reference datum. Only one reference datum may be designated as the default measured depth datum for each well. Values are "true" (or "1") and "false" ( or "0").
        /// </summary>
        [XmlAttribute("defaultMeasuredDepth")]

        public Boolean DefaultMeasuredDepth {
            get {
                return defaultMeasuredDepthField;
            } 
            set {
                defaultMeasuredDepthField = value;
                this.DefaultMeasuredDepthSpecified = true;
                NotifyPropertyChanged("DefaultMeasuredDepth");
            }
        }

        private Boolean defaultMeasuredDepthField; 


		/// <summary>
        /// defaultMeasuredDepthSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DefaultMeasuredDepthSpecified {
            get {
                return defaultMeasuredDepthSpecifiedField;
            } 
            set {
                defaultMeasuredDepthSpecifiedField = value;
                NotifyPropertyChanged("DefaultMeasuredDepthSpecified");
            }
        }

        private Boolean defaultMeasuredDepthSpecifiedField; 


		/// <summary>
        /// True indicates that this is the default reference datum for vertical depth coordinates. False or not given indicates that this is not the default reference datum. Vertical depth coordinates that do not specify a datum reference should be assumed to be measured relative to the default reference datum. Only one reference datum may be designated as the default vertical depth datum for each well. Values are "true" (or "1") and "false" ( or "0").
        /// </summary>
        [XmlAttribute("defaultVerticalDepth")]

        public Boolean DefaultVerticalDepth {
            get {
                return defaultVerticalDepthField;
            } 
            set {
                defaultVerticalDepthField = value;
                this.DefaultVerticalDepthSpecified = true;
                NotifyPropertyChanged("DefaultVerticalDepth");
            }
        }

        private Boolean defaultVerticalDepthField; 


		/// <summary>
        /// defaultVerticalDepthSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DefaultVerticalDepthSpecified {
            get {
                return defaultVerticalDepthSpecifiedField;
            } 
            set {
                defaultVerticalDepthSpecifiedField = value;
                NotifyPropertyChanged("DefaultVerticalDepthSpecified");
            }
        }

        private Boolean defaultVerticalDepthSpecifiedField; 


		/// <summary>
        /// True indicates that this is the default reference datum for elevation coordinates. False or not given indicates that this is not the default reference datum. Elevation coordinates that do not specify a datum reference should be assumed to be measured relative to the default reference datum. Only one reference datum may be designated as the default elevation datum for each well. Values are "true" (or "1") and "false" ( or "0").
        /// </summary>
        [XmlAttribute("defaultElevation")]

        public Boolean DefaultElevation {
            get {
                return defaultElevationField;
            } 
            set {
                defaultElevationField = value;
                this.DefaultElevationSpecified = true;
                NotifyPropertyChanged("DefaultElevation");
            }
        }

        private Boolean defaultElevationField; 


		/// <summary>
        /// defaultElevationSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DefaultElevationSpecified {
            get {
                return defaultElevationSpecifiedField;
            } 
            set {
                defaultElevationSpecifiedField = value;
                NotifyPropertyChanged("DefaultElevationSpecified");
            }
        }

        private Boolean defaultElevationSpecifiedField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the wellKnownNameStruct xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellKnownNameStruct", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the wellKnownNameStruct xsd type.")]
    public partial class WellKnownNameStruct : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellKnownNameStruct class.
        /// </summary>
        public WellKnownNameStruct() {}

        /// <summary>
        /// Initializes a new instance of the WellKnownNameStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public WellKnownNameStruct(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


		/// <summary>
        /// The naming system within the name is unique.
        /// </summary>
        [XmlAttribute("namingSystem")]

        public String NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private String namingSystemField; 


		/// <summary>
        /// A unique (short) code associated with the name.
        /// </summary>
        [XmlAttribute("code")]

        public String Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                NotifyPropertyChanged("Code");
            }
        }

        private String codeField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// Data that represents a foreign key to a wellbore. The wellbore may be defined within the context of another well.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellWellbore", Namespace="http://www.witsml.org/schemas/131")]

    [Description("Data that represents a foreign key to a wellbore. The wellbore may be defined within the context of another well.")]
    public partial class RefWellWellbore : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A pointer the wellbore with which there is a relationship.
        /// </summary>
		[XmlElement("wellboreReference")]

        public RefNameString WellboreReference {
            get {
                return wellboreReferenceField;
            } 
            set {
                wellboreReferenceField = value;
                NotifyPropertyChanged("WellboreReference");
            }
        }

        private RefNameString wellboreReferenceField; 


        /// <summary>
        /// A pointer to the well that contains the wellboreReference. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
		[XmlElement("wellParent")]

        public RefNameString WellParent {
            get {
                return wellParentField;
            } 
            set {
                wellParentField = value;
                NotifyPropertyChanged("WellParent");
            }
        }

        private RefNameString wellParentField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// A reference to a rig within a wellbore. The wellbore may be defined within the context of another well. This value represents a foreign key from one node to another.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellWellboreRig", Namespace="http://www.witsml.org/schemas/131")]

    [Description("A reference to a rig within a wellbore. The wellbore may be defined within the context of another well. This value represents a foreign key from one node to another.")]
    public partial class RefWellWellboreRig : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A pointer to the rig with which there is a relationship.
        /// </summary>
		[XmlElement("rigReference")]

        public RefNameString RigReference {
            get {
                return rigReferenceField;
            } 
            set {
                rigReferenceField = value;
                NotifyPropertyChanged("RigReference");
            }
        }

        private RefNameString rigReferenceField; 


        /// <summary>
        /// A pointer to the wellbore that contains the rigReference. This is not needed unless the referenced rig is outside the context of a common parent wellbore.
        /// </summary>
		[XmlElement("wellboreParent")]

        public RefNameString WellboreParent {
            get {
                return wellboreParentField;
            } 
            set {
                wellboreParentField = value;
                NotifyPropertyChanged("WellboreParent");
            }
        }

        private RefNameString wellboreParentField; 


        /// <summary>
        /// A pointer to the well that contains the wellboreParent. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
		[XmlElement("wellParent")]

        public RefNameString WellParent {
            get {
                return wellParentField;
            } 
            set {
                wellParentField = value;
                NotifyPropertyChanged("WellParent");
            }
        }

        private RefNameString wellParentField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Reference Point Component Schema.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_referencePoint", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Reference Point Component Schema.")]
    public partial class ReferencePoint : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the point. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// The kind of point. For example, 'well reference point', 'platform reference point', 'sea surface', 'sea bottom'. 
        /// </summary>
		[XmlElement("type")]

        public String Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String typeField; 


        /// <summary>
        /// The gravity based elevation coordinate of this point as measured from a datum. Positive moving upward from the elevation datum. 
        /// </summary>
		[XmlElement("elevation")]

        public WellElevationCoord Elevation {
            get {
                return elevationField;
            } 
            set {
                elevationField = value;
                NotifyPropertyChanged("Elevation");
            }
        }

        private WellElevationCoord elevationField; 


        /// <summary>
        /// The measured depth coordinate of this reference point. Positive moving toward the bottomhole from the measured depth datum. This should be given when the reference is "downhole", such as an ocean bottom template, or when the reference point is also used as a vertical well datum. The measured depth value can be used to determine if the reference point and a vertical well datum are at the same point.
        /// </summary>
		[XmlElement("measuredDepth")]

        public MeasuredDepthCoord MeasuredDepth {
            get {
                return measuredDepthField;
            } 
            set {
                measuredDepthField = value;
                NotifyPropertyChanged("MeasuredDepth");
            }
        }

        private MeasuredDepthCoord measuredDepthField; 


        /// <summary>
        /// Two dimensional coordinates that locate the point. 
        /// </summary>
		[XmlElement("location")]

        public List<Location> Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                NotifyPropertyChanged("Location");
            }
        }

        private List<Location> locationField; 


        /// <summary>
        /// A textual description of the point. 
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    ///  WITSML - Well Coordinate Reference System Component Schema. Note that this is intended for use with two dimensional coordinates. That does not prevent the use of a three dimensional CRS. It just means that only two coordinates will be specified in that 3D system. The veritcal coordinates are specified separately and, for 3D systems, one of the linked wellDatums should represent the vertical datum of that 3D system so that the height in the 3d system can be determined. 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellCRS", Namespace="http://www.witsml.org/schemas/131")]

    [Description(" WITSML - Well Coordinate Reference System Component Schema. Note that this is intended for use with two dimensional coordinates. That does not prevent the use of a three dimensional CRS. It just means that only two coordinates will be specified in that 3D system. The veritcal coordinates are specified separately and, for 3D systems, one of the linked wellDatums should represent the vertical datum of that 3D system so that the height in the 3d system can be determined. ")]
    public partial class WellCRS : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the system. For a geographic system this is commonly the name of the datum. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Map projection system. 
        /// </summary>
        [XmlElement("mapProjection")]
        public Projectionx MapProjection {
            get {
                return mapProjectionField;
            } 
            set {
                if (value != null && GeographicSpecified) throw new Exception("Cannot set property MapProjection when property Geographic is already set");
                if (value != null && LocalCRSSpecified) throw new Exception("Cannot set property MapProjection when property LocalCRS is already set");
                mapProjectionField = value;
                MapProjectionSpecified = (value!=null);
                NotifyPropertyChanged("MapProjection");
            }
        }

        private Projectionx mapProjectionField; 
        /// <summary>
        /// Boolean to indicate if MapProjection has been set. Used for serialization.
        /// </summary>
        private Boolean MapProjectionSpecified = false; 

        /// <summary>
        /// Geographic system. 
        /// </summary>
        [XmlElement("geographic")]
        public GeodeticModel Geographic {
            get {
                return geographicField;
            } 
            set {
                if (value != null && LocalCRSSpecified) throw new Exception("Cannot set property Geographic when property LocalCRS is already set");
                if (value != null && MapProjectionSpecified) throw new Exception("Cannot set property Geographic when property MapProjection is already set");
                geographicField = value;
                GeographicSpecified = (value!=null);
                NotifyPropertyChanged("Geographic");
            }
        }

        private GeodeticModel geographicField; 
        /// <summary>
        /// Boolean to indicate if Geographic has been set. Used for serialization.
        /// </summary>
        private Boolean GeographicSpecified = false; 

        /// <summary>
        /// Local (engineering) system. 
        /// </summary>
        [XmlElement("localCRS")]
        public LocalCRS LocalCRS {
            get {
                return localCRSField;
            } 
            set {
                if (value != null && GeographicSpecified) throw new Exception("Cannot set property LocalCRS when property Geographic is already set");
                if (value != null && MapProjectionSpecified) throw new Exception("Cannot set property LocalCRS when property MapProjection is already set");
                localCRSField = value;
                LocalCRSSpecified = (value!=null);
                NotifyPropertyChanged("LocalCRS");
            }
        }

        private LocalCRS localCRSField; 
        /// <summary>
        /// Boolean to indicate if LocalCRS has been set. Used for serialization.
        /// </summary>
        private Boolean LocalCRSSpecified = false; 



        /// <summary>
        /// A textual description of the system. 
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML - Geodetic Model Component Schema
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_geodeticModel", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML - Geodetic Model Component Schema")]
    public partial class GeodeticModel : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'ED50' with a code of '4230' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is also true for any other naming system. If in doubt, contact your local geodesist.
        /// </summary>
		[XmlElement("nameCRS")]

        public WellKnownNameStruct NameCRS {
            get {
                return nameCRSField;
            } 
            set {
                nameCRSField = value;
                NotifyPropertyChanged("NameCRS");
            }
        }

        private WellKnownNameStruct nameCRSField; 


        /// <summary>
        /// Geodetic datum code. This defines a system in the Geoshare naming system and should probably not be used with CRSName. 
        /// </summary>
		[XmlElement("geodeticDatumCode")]

        public GeodeticDatum? GeodeticDatumCode {
            get {
                return geodeticDatumCodeField;
            } 
            set {
                geodeticDatumCodeField = value;
                this.GeodeticDatumCodeSpecified = true;
                NotifyPropertyChanged("GeodeticDatumCode");
            }
        }

        private GeodeticDatum? geodeticDatumCodeField; 


		/// <summary>
        /// geodeticDatumCodeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean GeodeticDatumCodeSpecified {
            get {
                return geodeticDatumCodeSpecifiedField;
            } 
            set {
                geodeticDatumCodeSpecifiedField = value;
                NotifyPropertyChanged("GeodeticDatumCodeSpecified");
            }
        }

        private Boolean geodeticDatumCodeSpecifiedField; 


        /// <summary>
        /// Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
		[XmlElement("xTranslation")]

        public LengthMeasure XTranslation {
            get {
                return xTranslationField;
            } 
            set {
                xTranslationField = value;
                NotifyPropertyChanged("XTranslation");
            }
        }

        private LengthMeasure xTranslationField; 


        /// <summary>
        /// Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
		[XmlElement("yTranslation")]

        public LengthMeasure YTranslation {
            get {
                return yTranslationField;
            } 
            set {
                yTranslationField = value;
                NotifyPropertyChanged("YTranslation");
            }
        }

        private LengthMeasure yTranslationField; 


        /// <summary>
        /// Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
		[XmlElement("zTranslation")]

        public LengthMeasure ZTranslation {
            get {
                return zTranslationField;
            } 
            set {
                zTranslationField = value;
                NotifyPropertyChanged("ZTranslation");
            }
        }

        private LengthMeasure zTranslationField; 


        /// <summary>
        /// Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
		[XmlElement("xRotation")]

        public PlaneAngleMeasure XRotation {
            get {
                return xRotationField;
            } 
            set {
                xRotationField = value;
                NotifyPropertyChanged("XRotation");
            }
        }

        private PlaneAngleMeasure xRotationField; 


        /// <summary>
        /// Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
		[XmlElement("yRotation")]

        public PlaneAngleMeasure YRotation {
            get {
                return yRotationField;
            } 
            set {
                yRotationField = value;
                NotifyPropertyChanged("YRotation");
            }
        }

        private PlaneAngleMeasure yRotationField; 


        /// <summary>
        /// Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
		[XmlElement("zRotation")]

        public PlaneAngleMeasure ZRotation {
            get {
                return zRotationField;
            } 
            set {
                zRotationField = value;
                NotifyPropertyChanged("ZRotation");
            }
        }

        private PlaneAngleMeasure zRotationField; 


        /// <summary>
        /// Ellipsoid scale factor. 
        /// </summary>
		[XmlElement("scaleFactor")]

        public Double? ScaleFactor {
            get {
                return scaleFactorField;
            } 
            set {
                scaleFactorField = value;
                this.ScaleFactorSpecified = true;
                NotifyPropertyChanged("ScaleFactor");
            }
        }

        private Double? scaleFactorField; 


		/// <summary>
        /// scaleFactorSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ScaleFactorSpecified {
            get {
                return scaleFactorSpecifiedField;
            } 
            set {
                scaleFactorSpecifiedField = value;
                NotifyPropertyChanged("ScaleFactorSpecified");
            }
        }

        private Boolean scaleFactorSpecifiedField; 


        /// <summary>
        /// Ellipsoid code (spheroid) defining geographic or planar coordinates. Implied if geodeticDatumCode is specified (and is not user defined). 
        /// </summary>
		[XmlElement("ellipsoidCode")]

        public Ellipsoid? EllipsoidCode {
            get {
                return ellipsoidCodeField;
            } 
            set {
                ellipsoidCodeField = value;
                this.EllipsoidCodeSpecified = true;
                NotifyPropertyChanged("EllipsoidCode");
            }
        }

        private Ellipsoid? ellipsoidCodeField; 


		/// <summary>
        /// ellipsoidCodeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean EllipsoidCodeSpecified {
            get {
                return ellipsoidCodeSpecifiedField;
            } 
            set {
                ellipsoidCodeSpecifiedField = value;
                NotifyPropertyChanged("EllipsoidCodeSpecified");
            }
        }

        private Boolean ellipsoidCodeSpecifiedField; 


        /// <summary>
        /// Ellipsoid semi-major axis size. Implied if geodeticDatumCode or ellipsoidCode specified. 
        /// </summary>
		[XmlElement("ellipsoidSemiMajorAxis")]

        public LengthMeasure EllipsoidSemiMajorAxis {
            get {
                return ellipsoidSemiMajorAxisField;
            } 
            set {
                ellipsoidSemiMajorAxisField = value;
                NotifyPropertyChanged("EllipsoidSemiMajorAxis");
            }
        }

        private LengthMeasure ellipsoidSemiMajorAxisField; 


        /// <summary>
        /// Ellipsoid inverse flattening value (ie. 1/x). Implied if geodeticDatumCode or ellipsoidCode specified. 
        /// </summary>
		[XmlElement("ellipsoidInverseFlattening")]

        public Double? EllipsoidInverseFlattening {
            get {
                return ellipsoidInverseFlatteningField;
            } 
            set {
                ellipsoidInverseFlatteningField = value;
                this.EllipsoidInverseFlatteningSpecified = true;
                NotifyPropertyChanged("EllipsoidInverseFlattening");
            }
        }

        private Double? ellipsoidInverseFlatteningField; 


		/// <summary>
        /// ellipsoidInverseFlatteningSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean EllipsoidInverseFlatteningSpecified {
            get {
                return ellipsoidInverseFlatteningSpecifiedField;
            } 
            set {
                ellipsoidInverseFlatteningSpecifiedField = value;
                NotifyPropertyChanged("EllipsoidInverseFlatteningSpecified");
            }
        }

        private Boolean ellipsoidInverseFlatteningSpecifiedField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the cs_localCRS xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_localCRS", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the cs_localCRS xsd type.")]
    public partial class LocalCRS : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// True ("true" or "1") indicates that the well surface point is the origin of this CRS. False ("false" or "0") or not given indicates otherwise.
        /// </summary>
        [XmlElement("usesWellAsOrigin")]
        public Boolean? UsesWellAsOrigin {
            get {
                return usesWellAsOriginField;
            } 
            set {
                if (value != null && OriginSpecified) throw new Exception("Cannot set property UsesWellAsOrigin when property Origin is already set");
                if (value != null && OriginDescriptionSpecified) throw new Exception("Cannot set property UsesWellAsOrigin when property OriginDescription is already set");
                usesWellAsOriginField = value;
                UsesWellAsOriginSpecified = (value!=null);
                NotifyPropertyChanged("UsesWellAsOrigin");
            }
        }

        private Boolean? usesWellAsOriginField; 
        /// <summary>
        /// Boolean to indicate if UsesWellAsOrigin has been set. Used for serialization.
        /// </summary>
        private Boolean UsesWellAsOriginSpecified = false; 

        /// <summary>
        /// A pointer to the reference point that is the origin of this CRS.
        /// </summary>
        [XmlElement("origin")]
        public RefNameString Origin {
            get {
                return originField;
            } 
            set {
                if (value != null && UsesWellAsOriginSpecified) throw new Exception("Cannot set property Origin when property UsesWellAsOrigin is already set");
                if (value != null && OriginDescriptionSpecified) throw new Exception("Cannot set property Origin when property OriginDescription is already set");
                originField = value;
                OriginSpecified = (value!=null);
                NotifyPropertyChanged("Origin");
            }
        }

        private RefNameString originField; 
        /// <summary>
        /// Boolean to indicate if Origin has been set. Used for serialization.
        /// </summary>
        private Boolean OriginSpecified = false; 

        /// <summary>
        /// A textual description of the origin.
        /// </summary>
        [XmlElement("originDescription")]
        public String OriginDescription {
            get {
                return originDescriptionField;
            } 
            set {
                if (value != null && UsesWellAsOriginSpecified) throw new Exception("Cannot set property OriginDescription when property UsesWellAsOrigin is already set");
                if (value != null && OriginSpecified) throw new Exception("Cannot set property OriginDescription when property Origin is already set");
                originDescriptionField = value;
                OriginDescriptionSpecified = (value!=null);
                NotifyPropertyChanged("OriginDescription");
            }
        }

        private String originDescriptionField; 
        /// <summary>
        /// Boolean to indicate if OriginDescription has been set. Used for serialization.
        /// </summary>
        private Boolean OriginDescriptionSpecified = false; 



        /// <summary>
        /// The angle of the Y axis from North (as described in attribute northDirection). Defaults to zero. Positive clockwise.
        /// </summary>
		[XmlElement("yAxisAzimuth")]

        public YAxisAzimuth YAxisAzimuth {
            get {
                return yAxisAzimuthField;
            } 
            set {
                yAxisAzimuthField = value;
                NotifyPropertyChanged("YAxisAzimuth");
            }
        }

        private YAxisAzimuth yAxisAzimuthField; 


        /// <summary>
        /// A free-form description of the Y axis. Examples would be 'parallel to the west side of the platform', or 'along the main entry road'.
        /// </summary>
		[XmlElement("yAxisDescription")]

        public String YAxisDescription {
            get {
                return yAxisDescriptionField;
            } 
            set {
                yAxisDescriptionField = value;
                NotifyPropertyChanged("YAxisDescription");
            }
        }

        private String yAxisDescriptionField; 


        /// <summary>
        /// True ("true" or "1") indicates that the X axis is rotated counter-clockwise from the Y axis when viewed from above the earth looking down. False ("false" or "0") or not given indicates a clockwise rotation. Generally the X axis is rotated clockwise.
        /// </summary>
		[XmlElement("xRotationCounterClockwise")]

        public Boolean? XRotationCounterClockwise {
            get {
                return xRotationCounterClockwiseField;
            } 
            set {
                xRotationCounterClockwiseField = value;
                this.XRotationCounterClockwiseSpecified = true;
                NotifyPropertyChanged("XRotationCounterClockwise");
            }
        }

        private Boolean? xRotationCounterClockwiseField; 


		/// <summary>
        /// xRotationCounterClockwiseSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean XRotationCounterClockwiseSpecified {
            get {
                return xRotationCounterClockwiseSpecifiedField;
            } 
            set {
                xRotationCounterClockwiseSpecifiedField = value;
                NotifyPropertyChanged("XRotationCounterClockwiseSpecified");
            }
        }

        private Boolean xRotationCounterClockwiseSpecifiedField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML Element Types
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_projectionx", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML Element Types")]
    public partial class Projectionx : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'WGS 84 / UTM zone 10N' with a code of '32610' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is also true for any other naming system. If in doubt, contact your local geodesist.
        /// </summary>
		[XmlElement("nameCRS")]

        public WellKnownNameStruct NameCRS {
            get {
                return nameCRSField;
            } 
            set {
                nameCRSField = value;
                NotifyPropertyChanged("NameCRS");
            }
        }

        private WellKnownNameStruct nameCRSField; 


        /// <summary>
        /// A code to identify the type of projection. 
        /// </summary>
		[XmlElement("projectionCode")]

        public Projection? ProjectionCode {
            get {
                return projectionCodeField;
            } 
            set {
                projectionCodeField = value;
                this.ProjectionCodeSpecified = true;
                NotifyPropertyChanged("ProjectionCode");
            }
        }

        private Projection? projectionCodeField; 


		/// <summary>
        /// projectionCodeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ProjectionCodeSpecified {
            get {
                return projectionCodeSpecifiedField;
            } 
            set {
                projectionCodeSpecifiedField = value;
                NotifyPropertyChanged("ProjectionCodeSpecified");
            }
        }

        private Boolean projectionCodeSpecifiedField; 


        /// <summary>
        /// A pointer to the wellCRS that represents the geographic system from which this system was projected.
        /// </summary>
		[XmlElement("projectedFrom")]

        public RefNameString ProjectedFrom {
            get {
                return projectedFromField;
            } 
            set {
                projectedFromField = value;
                NotifyPropertyChanged("ProjectedFrom");
            }
        }

        private RefNameString projectedFromField; 


        /// <summary>
        /// Latitude of first standard parallel. 
        /// </summary>
		[XmlElement("stdParallel1")]

        public PlaneAngleMeasure StdParallel1 {
            get {
                return stdParallel1Field;
            } 
            set {
                stdParallel1Field = value;
                NotifyPropertyChanged("StdParallel1");
            }
        }

        private PlaneAngleMeasure stdParallel1Field; 


        /// <summary>
        /// Latitude of second standard parallel, if used. 
        /// </summary>
		[XmlElement("stdParallel2")]

        public PlaneAngleMeasure StdParallel2 {
            get {
                return stdParallel2Field;
            } 
            set {
                stdParallel2Field = value;
                NotifyPropertyChanged("StdParallel2");
            }
        }

        private PlaneAngleMeasure stdParallel2Field; 


        /// <summary>
        /// Longitude of the Y axis of the resulting map. 
        /// </summary>
		[XmlElement("centralMeridian")]

        public PlaneAngleMeasure CentralMeridian {
            get {
                return centralMeridianField;
            } 
            set {
                centralMeridianField = value;
                NotifyPropertyChanged("CentralMeridian");
            }
        }

        private PlaneAngleMeasure centralMeridianField; 


        /// <summary>
        /// Latitude at which the X axis intersects the central meridian. 
        /// </summary>
		[XmlElement("originLatitude")]

        public PlaneAngleMeasure OriginLatitude {
            get {
                return originLatitudeField;
            } 
            set {
                originLatitudeField = value;
                NotifyPropertyChanged("OriginLatitude");
            }
        }

        private PlaneAngleMeasure originLatitudeField; 


        /// <summary>
        /// Longitude of the central meridian. 
        /// </summary>
		[XmlElement("originLongitude")]

        public PlaneAngleMeasure OriginLongitude {
            get {
                return originLongitudeField;
            } 
            set {
                originLongitudeField = value;
                NotifyPropertyChanged("OriginLongitude");
            }
        }

        private PlaneAngleMeasure originLongitudeField; 


        /// <summary>
        /// Latitude of the first point if the two-point specification of the central line is used. 
        /// </summary>
		[XmlElement("latitude1")]

        public PlaneAngleMeasure Latitude1 {
            get {
                return latitude1Field;
            } 
            set {
                latitude1Field = value;
                NotifyPropertyChanged("Latitude1");
            }
        }

        private PlaneAngleMeasure latitude1Field; 


        /// <summary>
        /// Longitude of the first point if the two-point specification of the central line is used. 
        /// </summary>
		[XmlElement("longitude1")]

        public PlaneAngleMeasure Longitude1 {
            get {
                return longitude1Field;
            } 
            set {
                longitude1Field = value;
                NotifyPropertyChanged("Longitude1");
            }
        }

        private PlaneAngleMeasure longitude1Field; 


        /// <summary>
        /// Latitude of the second point if the two-point specification of the central line is used. 
        /// </summary>
		[XmlElement("latitude2")]

        public PlaneAngleMeasure Latitude2 {
            get {
                return latitude2Field;
            } 
            set {
                latitude2Field = value;
                NotifyPropertyChanged("Latitude2");
            }
        }

        private PlaneAngleMeasure latitude2Field; 


        /// <summary>
        /// Longitude of the second point if the two-point specification of the central line is used. 
        /// </summary>
		[XmlElement("longitude2")]

        public PlaneAngleMeasure Longitude2 {
            get {
                return longitude2Field;
            } 
            set {
                longitude2Field = value;
                NotifyPropertyChanged("Longitude2");
            }
        }

        private PlaneAngleMeasure longitude2Field; 


        /// <summary>
        /// Latitude of a point for which the scale factor is specified exactly. Default to origin. 
        /// </summary>
		[XmlElement("latitudeForScale")]

        public PlaneAngleMeasure LatitudeForScale {
            get {
                return latitudeForScaleField;
            } 
            set {
                latitudeForScaleField = value;
                NotifyPropertyChanged("LatitudeForScale");
            }
        }

        private PlaneAngleMeasure latitudeForScaleField; 


        /// <summary>
        /// Longitude of a point for which the scale factor is specified exactly. Default to origin. 
        /// </summary>
		[XmlElement("longitudeForScale")]

        public PlaneAngleMeasure LongitudeForScale {
            get {
                return longitudeForScaleField;
            } 
            set {
                longitudeForScaleField = value;
                NotifyPropertyChanged("LongitudeForScale");
            }
        }

        private PlaneAngleMeasure longitudeForScaleField; 


        /// <summary>
        /// Latitude at which the scale on the map is exact. If none is provided, scale is assumed to be exact at the equator. 
        /// </summary>
		[XmlElement("trueScaleLatitude")]

        public PlaneAngleMeasure TrueScaleLatitude {
            get {
                return trueScaleLatitudeField;
            } 
            set {
                trueScaleLatitudeField = value;
                NotifyPropertyChanged("TrueScaleLatitude");
            }
        }

        private PlaneAngleMeasure trueScaleLatitudeField; 


        /// <summary>
        /// Spheroid radius. 
        /// </summary>
		[XmlElement("spheroidRadius")]

        public LengthMeasure SpheroidRadius {
            get {
                return spheroidRadiusField;
            } 
            set {
                spheroidRadiusField = value;
                NotifyPropertyChanged("SpheroidRadius");
            }
        }

        private LengthMeasure spheroidRadiusField; 


        /// <summary>
        /// Ellipsoid scale factor. 
        /// </summary>
		[XmlElement("scaleFactor")]

        public Double? ScaleFactor {
            get {
                return scaleFactorField;
            } 
            set {
                scaleFactorField = value;
                this.ScaleFactorSpecified = true;
                NotifyPropertyChanged("ScaleFactor");
            }
        }

        private Double? scaleFactorField; 


		/// <summary>
        /// scaleFactorSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ScaleFactorSpecified {
            get {
                return scaleFactorSpecifiedField;
            } 
            set {
                scaleFactorSpecifiedField = value;
                NotifyPropertyChanged("ScaleFactorSpecified");
            }
        }

        private Boolean scaleFactorSpecifiedField; 


        /// <summary>
        /// Projection method variant - establishes minor variations of the projection. Geoshare proposal. 
        /// </summary>
		[XmlElement("methodVariant")]

        public ProjectionVariantsObliqueMercator? MethodVariant {
            get {
                return methodVariantField;
            } 
            set {
                methodVariantField = value;
                this.MethodVariantSpecified = true;
                NotifyPropertyChanged("MethodVariant");
            }
        }

        private ProjectionVariantsObliqueMercator? methodVariantField; 


		/// <summary>
        /// methodVariantSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MethodVariantSpecified {
            get {
                return methodVariantSpecifiedField;
            } 
            set {
                methodVariantSpecifiedField = value;
                NotifyPropertyChanged("MethodVariantSpecified");
            }
        }

        private Boolean methodVariantSpecifiedField; 


        /// <summary>
        /// Height above the surface origin location from which the perspective is taken. 
        /// </summary>
		[XmlElement("perspectiveHeight")]

        public LengthMeasure PerspectiveHeight {
            get {
                return perspectiveHeightField;
            } 
            set {
                perspectiveHeightField = value;
                NotifyPropertyChanged("PerspectiveHeight");
            }
        }

        private LengthMeasure perspectiveHeightField; 


        /// <summary>
        /// Zone for the type of projection. Zones have values from 1 to 60 with a required direction of "N" (North) or "S" (South). For example, "21N". 
        /// </summary>
		[XmlElement("zone")]

        public String Zone {
            get {
                return zoneField;
            } 
            set {
                zoneField = value;
                NotifyPropertyChanged("Zone");
            }
        }

        private String zoneField; 


        /// <summary>
        /// North American Datum type. 
        /// </summary>
		[XmlElement("NADType")]

        public NADTypeList? NADType {
            get {
                return NADTypeField;
            } 
            set {
                NADTypeField = value;
                this.NADTypeSpecified = true;
                NotifyPropertyChanged("NADType");
            }
        }

        private NADTypeList? NADTypeField; 


		/// <summary>
        /// NADTypeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean NADTypeSpecified {
            get {
                return NADTypeSpecifiedField;
            } 
            set {
                NADTypeSpecifiedField = value;
                NotifyPropertyChanged("NADTypeSpecified");
            }
        }

        private Boolean NADTypeSpecifiedField; 


        /// <summary>
        /// Artificial value added to the X axis. 
        /// </summary>
		[XmlElement("falseEasting")]

        public LengthMeasure FalseEasting {
            get {
                return falseEastingField;
            } 
            set {
                falseEastingField = value;
                NotifyPropertyChanged("FalseEasting");
            }
        }

        private LengthMeasure falseEastingField; 


        /// <summary>
        /// Artificial value added to the Y axis. 
        /// </summary>
		[XmlElement("falseNorthing")]

        public LengthMeasure FalseNorthing {
            get {
                return falseNorthingField;
            } 
            set {
                falseNorthingField = value;
                NotifyPropertyChanged("FalseNorthing");
            }
        }

        private LengthMeasure falseNorthingField; 


        /// <summary>
        /// Bearing angle of the great circle with respect to north at the central point. 
        /// </summary>
		[XmlElement("bearing")]

        public PlaneAngleMeasure Bearing {
            get {
                return bearingField;
            } 
            set {
                bearingField = value;
                NotifyPropertyChanged("Bearing");
            }
        }

        private PlaneAngleMeasure bearingField; 


        /// <summary>
        /// Is the projection in the northern hemisphere or the southern hemisphere. 
        /// </summary>
		[XmlElement("hemisphere")]

        public HemisphereList? Hemisphere {
            get {
                return hemisphereField;
            } 
            set {
                hemisphereField = value;
                this.HemisphereSpecified = true;
                NotifyPropertyChanged("Hemisphere");
            }
        }

        private HemisphereList? hemisphereField; 


		/// <summary>
        /// hemisphereSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean HemisphereSpecified {
            get {
                return hemisphereSpecifiedField;
            } 
            set {
                hemisphereSpecifiedField = value;
                NotifyPropertyChanged("HemisphereSpecified");
            }
        }

        private Boolean hemisphereSpecifiedField; 


        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// Parameter describing the user-defined projection. 
        /// </summary>
		[XmlElement("parameter")]

        public List<IndexedObject> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

        private List<IndexedObject> parameterField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    /// <summary>
    /// This class represents the obj_wellbores xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("wellbores", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_wellbores xsd type.")]
    public partial class WellboreList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// Information about a single wellbore. A wellbore is a unique, oriented path from the bottom of a drilled borehole to the surface of the Earth. The path must not overlap or cross itself. 
        /// </summary>
		[XmlElement("wellbore")]

        public List<Wellbore> Wellbore {
            get {
                return wellboreField;
            } 
            set {
                wellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private List<Wellbore> wellboreField; 


        /// <summary>
        /// Information about a single wellbore. A wellbore is a unique, oriented path from the bottom of a drilled borehole to the surface of the Earth. The path must not overlap or cross itself. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Wellbore;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Wellbore object.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellbore", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Wellbore object.")]
    public partial class Wellbore : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// This is a pointer to the parent wellbore. No parent = starts from top. 
        /// </summary>
		[XmlElement("parentWellbore")]

        public RefNameString ParentWellbore {
            get {
                return parentWellboreField;
            } 
            set {
                parentWellboreField = value;
                NotifyPropertyChanged("ParentWellbore");
            }
        }

        private RefNameString parentWellboreField; 


        /// <summary>
        /// Operator borehole number. 
        /// </summary>
		[XmlElement("number")]

        public String Number {
            get {
                return numberField;
            } 
            set {
                numberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private String numberField; 


        /// <summary>
        /// API suffix. 
        /// </summary>
		[XmlElement("suffixAPI")]

        public String SuffixAPI {
            get {
                return suffixAPIField;
            } 
            set {
                suffixAPIField = value;
                NotifyPropertyChanged("SuffixAPI");
            }
        }

        private String suffixAPIField; 


        /// <summary>
        /// Government assigned number. 
        /// </summary>
		[XmlElement("numGovt")]

        public String NumGovt {
            get {
                return numGovtField;
            } 
            set {
                numGovtField = value;
                NotifyPropertyChanged("NumGovt");
            }
        }

        private String numGovtField; 


        /// <summary>
        /// POSC wellbore status. 
        /// </summary>
		[XmlElement("statusWellbore")]

        public WellStatus? StatusWellbore {
            get {
                return statusWellboreField;
            } 
            set {
                statusWellboreField = value;
                this.StatusWellboreSpecified = true;
                NotifyPropertyChanged("StatusWellbore");
            }
        }

        private WellStatus? statusWellboreField; 


		/// <summary>
        /// statusWellboreSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean StatusWellboreSpecified {
            get {
                return statusWellboreSpecifiedField;
            } 
            set {
                statusWellboreSpecifiedField = value;
                NotifyPropertyChanged("StatusWellboreSpecified");
            }
        }

        private Boolean statusWellboreSpecifiedField; 


        /// <summary>
        /// POSC wellbore purpose. 
        /// </summary>
		[XmlElement("purposeWellbore")]

        public WellPurpose? PurposeWellbore {
            get {
                return purposeWellboreField;
            } 
            set {
                purposeWellboreField = value;
                this.PurposeWellboreSpecified = true;
                NotifyPropertyChanged("PurposeWellbore");
            }
        }

        private WellPurpose? purposeWellboreField; 


		/// <summary>
        /// purposeWellboreSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean PurposeWellboreSpecified {
            get {
                return purposeWellboreSpecifiedField;
            } 
            set {
                purposeWellboreSpecifiedField = value;
                NotifyPropertyChanged("PurposeWellboreSpecified");
            }
        }

        private Boolean purposeWellboreSpecifiedField; 


        /// <summary>
        /// Type of wellbore. 
        /// </summary>
		[XmlElement("typeWellbore")]

        public WellboreType? TypeWellbore {
            get {
                return typeWellboreField;
            } 
            set {
                typeWellboreField = value;
                this.TypeWellboreSpecified = true;
                NotifyPropertyChanged("TypeWellbore");
            }
        }

        private WellboreType? typeWellboreField; 


		/// <summary>
        /// typeWellboreSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TypeWellboreSpecified {
            get {
                return typeWellboreSpecifiedField;
            } 
            set {
                typeWellboreSpecifiedField = value;
                NotifyPropertyChanged("TypeWellboreSpecified");
            }
        }

        private Boolean typeWellboreSpecifiedField; 


        /// <summary>
        /// POSC wellbore trajectory shape. 
        /// </summary>
		[XmlElement("shape")]

        public WellboreShape? Shape {
            get {
                return shapeField;
            } 
            set {
                shapeField = value;
                this.ShapeSpecified = true;
                NotifyPropertyChanged("Shape");
            }
        }

        private WellboreShape? shapeField; 


		/// <summary>
        /// shapeSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ShapeSpecified {
            get {
                return shapeSpecifiedField;
            } 
            set {
                shapeSpecifiedField = value;
                NotifyPropertyChanged("ShapeSpecified");
            }
        }

        private Boolean shapeSpecifiedField; 


        /// <summary>
        /// Date and time of wellbore kickoff. 
        /// </summary>
		[XmlElement("dTimKickoff")]

        public DateTime? DateTimeKickoff {
            get {
                return dTimKickoffField;
            } 
            set {
                dTimKickoffField = value;
                this.DateTimeKickoffSpecified = true;
                NotifyPropertyChanged("DateTimeKickoff");
            }
        }

        private DateTime? dTimKickoffField; 


		/// <summary>
        /// dTimKickoffSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DateTimeKickoffSpecified {
            get {
                return dTimKickoffSpecifiedField;
            } 
            set {
                dTimKickoffSpecifiedField = value;
                NotifyPropertyChanged("DateTimeKickoffSpecified");
            }
        }

        private Boolean dTimKickoffSpecifiedField; 


        /// <summary>
        /// True ("true" of "1") indicates that the wellbore has acheieved total depth. That is, drilling has completed. False ("false" or "0") indicates otherwise. Not given indicates that it is not known whether total depth has been reached.
        /// </summary>
		[XmlElement("achievedTD")]

        public Boolean? AchievedTD {
            get {
                return achievedTDField;
            } 
            set {
                achievedTDField = value;
                this.AchievedTDSpecified = true;
                NotifyPropertyChanged("AchievedTD");
            }
        }

        private Boolean? achievedTDField; 


		/// <summary>
        /// achievedTDSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean AchievedTDSpecified {
            get {
                return achievedTDSpecifiedField;
            } 
            set {
                achievedTDSpecifiedField = value;
                NotifyPropertyChanged("AchievedTDSpecified");
            }
        }

        private Boolean achievedTDSpecifiedField; 


        /// <summary>
        /// The current measured depth of the borehole. If status is plugged, indicates the maximum depth reached before plugging. 
        /// </summary>
		[XmlElement("mdCurrent")]

        public MeasuredDepthCoord MDCurrent {
            get {
                return mdCurrentField;
            } 
            set {
                mdCurrentField = value;
                NotifyPropertyChanged("MDCurrent");
            }
        }

        private MeasuredDepthCoord mdCurrentField; 


        /// <summary>
        /// The current true vertical depth of the borehole. If status is plugged, indicates the maximum depth reached before plugging. 
        /// </summary>
		[XmlElement("tvdCurrent")]

        public WellVerticalDepthCoord TvdCurrent {
            get {
                return tvdCurrentField;
            } 
            set {
                tvdCurrentField = value;
                NotifyPropertyChanged("TvdCurrent");
            }
        }

        private WellVerticalDepthCoord tvdCurrentField; 


        /// <summary>
        /// Kickoff measured depth of the wellbore. 
        /// </summary>
		[XmlElement("mdKickoff")]

        public MeasuredDepthCoord MDKickoff {
            get {
                return mdKickoffField;
            } 
            set {
                mdKickoffField = value;
                NotifyPropertyChanged("MDKickoff");
            }
        }

        private MeasuredDepthCoord mdKickoffField; 


        /// <summary>
        /// Kickoff true vertical depth of the wellbore. 
        /// </summary>
		[XmlElement("tvdKickoff")]

        public WellVerticalDepthCoord TvdKickoff {
            get {
                return tvdKickoffField;
            } 
            set {
                tvdKickoffField = value;
                NotifyPropertyChanged("TvdKickoff");
            }
        }

        private WellVerticalDepthCoord tvdKickoffField; 


        /// <summary>
        /// Planned measured depth for the wellbore total depth. 
        /// </summary>
		[XmlElement("mdPlanned")]

        public MeasuredDepthCoord MDPlanned {
            get {
                return mdPlannedField;
            } 
            set {
                mdPlannedField = value;
                NotifyPropertyChanged("MDPlanned");
            }
        }

        private MeasuredDepthCoord mdPlannedField; 


        /// <summary>
        /// Planned true vertical depth for the wellbore total depth. 
        /// </summary>
		[XmlElement("tvdPlanned")]

        public WellVerticalDepthCoord TvdPlanned {
            get {
                return tvdPlannedField;
            } 
            set {
                tvdPlannedField = value;
                NotifyPropertyChanged("TvdPlanned");
            }
        }

        private WellVerticalDepthCoord tvdPlannedField; 


        /// <summary>
        /// Planned measured for the wellbore total depth - with respect to seabed. 
        /// </summary>
		[XmlElement("mdSubSeaPlanned")]

        public MeasuredDepthCoord MDSubSeaPlanned {
            get {
                return mdSubSeaPlannedField;
            } 
            set {
                mdSubSeaPlannedField = value;
                NotifyPropertyChanged("MDSubSeaPlanned");
            }
        }

        private MeasuredDepthCoord mdSubSeaPlannedField; 


        /// <summary>
        /// Planned true vertical depth for the wellbore total depth - with respect to seabed. 
        /// </summary>
		[XmlElement("tvdSubSeaPlanned")]

        public WellVerticalDepthCoord TvdSubSeaPlanned {
            get {
                return tvdSubSeaPlannedField;
            } 
            set {
                tvdSubSeaPlannedField = value;
                NotifyPropertyChanged("TvdSubSeaPlanned");
            }
        }

        private WellVerticalDepthCoord tvdSubSeaPlannedField; 


        /// <summary>
        /// Target days for drilling wellbore. 
        /// </summary>
		[XmlElement("dayTarget")]

        public TimeMeasure DayTarget {
            get {
                return dayTargetField;
            } 
            set {
                dayTargetField = value;
                NotifyPropertyChanged("DayTarget");
            }
        }

        private TimeMeasure dayTargetField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// This class represents the obj_wellLogs xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
    [System.Xml.Serialization.XmlRootAttribute("wellLogs", Namespace="http://www.witsml.org/schemas/131", IsNullable=false)]

    [Description("This class represents the obj_wellLogs xsd type.")]
    public partial class WellLogList : Object , IEnergisticsCollection, INotifyPropertyChanged
    {


        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[XmlElement("documentInfo")]

        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 


        /// <summary>
        /// A single well log. 
        /// </summary>
		[XmlElement("wellLog")]

        public List<WellLog> WellLog {
            get {
                return wellLogField;
            } 
            set {
                wellLogField = value;
                NotifyPropertyChanged("WellLog");
            }
        }

        private List<WellLog> wellLogField; 


        /// <summary>
        /// A single well log. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellLog;
			}
        }

		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]

        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.3.1.1"; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    /// <summary>
    /// The non-contextual content of a WITSML Well Log.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellLog", Namespace="http://www.witsml.org/schemas/131")]

    [Description("The non-contextual content of a WITSML Well Log.")]
    public partial class WellLog : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[XmlElement("nameWell")]

        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 


        /// <summary>
        /// Human recognizable context for the wellbore that contains the log. 
        /// </summary>
		[XmlElement("nameWellbore")]

        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 


        /// <summary>
        /// Human recognizable context for the well log. 
        /// </summary>
		[XmlElement("name")]

        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 


        /// <summary>
        /// Whether or not the wellLog is growing. True ("true" or "1") indicates the that the wellLog is still growing in size (that is, logData values are still being added). For example, it may be connected to a realtime stream. False ("false" or "0") indicates that the wellLog is closed (that is, no further logData values will be added). Not given indicates that the status of the wellLog is not known. This value is only relevant within the context of a server.
        /// </summary>
		[XmlElement("objectGrowing")]

        public Boolean? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set {
                objectGrowingField = value;
                this.ObjectGrowingSpecified = true;
                NotifyPropertyChanged("ObjectGrowing");
            }
        }

        private Boolean? objectGrowingField; 


		/// <summary>
        /// objectGrowingSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ObjectGrowingSpecified {
            get {
                return objectGrowingSpecifiedField;
            } 
            set {
                objectGrowingSpecifiedField = value;
                NotifyPropertyChanged("ObjectGrowingSpecified");
            }
        }

        private Boolean objectGrowingSpecifiedField; 


        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
		[XmlElement("serviceCompany")]

        public String ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private String serviceCompanyField; 


        /// <summary>
        /// Log run number. This should normally be a number; however some legacy systems encode other information in this value.
        /// </summary>
		[XmlElement("runNumber")]

        public String RunNumber {
            get {
                return runNumberField;
            } 
            set {
                runNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private String runNumberField; 


        /// <summary>
        /// The bottom hole assembly run number associated with this log.
        /// </summary>
		[XmlElement("bhaRunNumber")]

        public Int16? BhaRunNumber {
            get {
                return bhaRunNumberField;
            } 
            set {
                bhaRunNumberField = value;
                this.BhaRunNumberSpecified = true;
                NotifyPropertyChanged("BhaRunNumber");
            }
        }

        private Int16? bhaRunNumberField; 


		/// <summary>
        /// bhaRunNumberSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean BhaRunNumberSpecified {
            get {
                return bhaRunNumberSpecifiedField;
            } 
            set {
                bhaRunNumberSpecifiedField = value;
                NotifyPropertyChanged("BhaRunNumberSpecified");
            }
        }

        private Boolean bhaRunNumberSpecifiedField; 


        /// <summary>
        /// Date and time that the log was created. 
        /// </summary>
		[XmlElement("creationDate")]

        public DateTime? CreationDate {
            get {
                return creationDateField;
            } 
            set {
                creationDateField = value;
                this.CreationDateSpecified = true;
                NotifyPropertyChanged("CreationDate");
            }
        }

        private DateTime? creationDateField; 


		/// <summary>
        /// creationDateSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean CreationDateSpecified {
            get {
                return creationDateSpecifiedField;
            } 
            set {
                creationDateSpecifiedField = value;
                NotifyPropertyChanged("CreationDateSpecified");
            }
        }

        private Boolean creationDateSpecifiedField; 


        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// Primary index type. If the log is comprised of both DEPTH- and TIME-indexed passes, the primary index type of the log should be DEPTH. 
        /// </summary>
		[XmlElement("indexType")]

        public LogIndexType? IndexType {
            get {
                return indexTypeField;
            } 
            set {
                indexTypeField = value;
                NotifyPropertyChanged("IndexType");
            }
        }

        private LogIndexType? indexTypeField; 


        /// <summary>
        /// A bounding primary index value for the data records of the log. The minimum indexType value for all data records of the log.
        /// </summary>
		[XmlElement("minIndex")]

        public GenericMeasure MinIndex {
            get {
                return minIndexField;
            } 
            set {
                minIndexField = value;
                NotifyPropertyChanged("MinIndex");
            }
        }

        private GenericMeasure minIndexField; 


        /// <summary>
        /// A bounding primary index value for the data records of the log. The maximum indexType value for all data records of the log.
        /// </summary>
		[XmlElement("maxIndex")]

        public GenericMeasure MaxIndex {
            get {
                return maxIndexField;
            } 
            set {
                maxIndexField = value;
                NotifyPropertyChanged("MaxIndex");
            }
        }

        private GenericMeasure maxIndexField; 


        /// <summary>
        /// A bounding (date time) index value for the data records of the log. The minimum date time index value for all data records of the log. If an index is elapsed time and a start date time is specified then the corresponding date time should be calculated. 
        /// </summary>
		[XmlElement("minDateTimeIndex")]

        public DateTime? MinDateTimeIndex {
            get {
                return minDateTimeIndexField;
            } 
            set {
                minDateTimeIndexField = value;
                this.MinDateTimeIndexSpecified = true;
                NotifyPropertyChanged("MinDateTimeIndex");
            }
        }

        private DateTime? minDateTimeIndexField; 


		/// <summary>
        /// minDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MinDateTimeIndexSpecified {
            get {
                return minDateTimeIndexSpecifiedField;
            } 
            set {
                minDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("MinDateTimeIndexSpecified");
            }
        }

        private Boolean minDateTimeIndexSpecifiedField; 


        /// <summary>
        /// A bounding (date time) index value for the data records of the log. The maximum date time index value for all data records of the log. If an index is elapsed time and a start date time is specified then the corresponding date time should be calculated. 
        /// </summary>
		[XmlElement("maxDateTimeIndex")]

        public DateTime? MaxDateTimeIndex {
            get {
                return maxDateTimeIndexField;
            } 
            set {
                maxDateTimeIndexField = value;
                this.MaxDateTimeIndexSpecified = true;
                NotifyPropertyChanged("MaxDateTimeIndex");
            }
        }

        private DateTime? maxDateTimeIndexField; 


		/// <summary>
        /// maxDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MaxDateTimeIndexSpecified {
            get {
                return maxDateTimeIndexSpecifiedField;
            } 
            set {
                maxDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("MaxDateTimeIndexSpecified");
            }
        }

        private Boolean maxDateTimeIndexSpecifiedField; 


        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e. when the null value representation is not explicitly defined). If a null value representation is defined for a log, this becomes the default for all curves in that log (but can be overridden at the block and curve level). An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited or base64 encoded array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
		[XmlElement("nullValue")]

        public String NullValue {
            get {
                return nullValueField;
            } 
            set {
                nullValueField = value;
                NotifyPropertyChanged("NullValue");
            }
        }

        private String nullValueField; 


        /// <summary>
        /// Log parameters that apply to the overall log. 
        /// </summary>
		[XmlElement("logParam")]

        public List<IndexedObject> LogParam {
            get {
                return logParamField;
            } 
            set {
                logParamField = value;
                NotifyPropertyChanged("LogParam");
            }
        }

        private List<IndexedObject> logParamField; 


        /// <summary>
        /// Information about a curve mnemonic. This defines curve information whose data can be recorded into many blocks. 
        /// </summary>
		[XmlElement("logCurveInfo")]

        public List<WellLogCurveInfo> LogCurveInfo {
            get {
                return logCurveInfoField;
            } 
            set {
                logCurveInfoField = value;
                NotifyPropertyChanged("LogCurveInfo");
            }
        }

        private List<WellLogCurveInfo> logCurveInfoField; 


        /// <summary>
        /// The description of a data block. 
        /// </summary>
		[XmlElement("blockInfo")]

        public List<BlockInfo> BlockInfo {
            get {
                return blockInfoField;
            } 
            set {
                blockInfoField = value;
                NotifyPropertyChanged("BlockInfo");
            }
        }

        private List<BlockInfo> blockInfoField; 


        /// <summary>
        /// Container for one or more blocks of well log data. 
        /// </summary>
		[XmlArrayItem("")]
        [XmlArray("logData")]

        public List<LogCurveInfoData> LogData {
            get {
                return logDataField;
            } 
            set {
                logDataField = value;
                NotifyPropertyChanged("LogData");
            }
        }

        private List<LogCurveInfoData> logDataField; 


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[XmlElement("commonData")]

        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[XmlElement("customData")]

        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]

        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 


		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]

        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here



    namespace ComponentSchemas 
    {

    /// <summary>
    /// WITSML Well Log - Curve Information
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellLogCurveInfo", Namespace="http://www.witsml.org/schemas/131")]

    [Description("WITSML Well Log - Curve Information")]
    public partial class WellLogCurveInfo : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The curve name. More than one curve can have the same mnemonic but something like the array definition should be different between them.
        /// </summary>
		[XmlElement("mnemonic")]

        public String Mnemonic {
            get {
                return mnemonicField;
            } 
            set {
                mnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private String mnemonicField; 


        /// <summary>
        /// The curve classification obtained from a lookup in the vendors mnemonic catalog. 
        /// </summary>
		[XmlElement("classWitsml")]

        public RealtimeData ClassWitsml {
            get {
                return classWitsmlField;
            } 
            set {
                classWitsmlField = value;
                this.ClassWitsmlSpecified = true;
                NotifyPropertyChanged("ClassWitsml");
            }
        }

        private RealtimeData classWitsmlField; 


		/// <summary>
        /// classWitsmlSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean ClassWitsmlSpecified {
            get {
                return classWitsmlSpecifiedField;
            } 
            set {
                classWitsmlSpecifiedField = value;
                NotifyPropertyChanged("ClassWitsmlSpecified");
            }
        }

        private Boolean classWitsmlSpecifiedField; 


        /// <summary>
        /// Unit of measurement for the data values. 
        /// </summary>
		[XmlElement("unit")]

        public String Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private String unitField; 


        /// <summary>
        /// Name alias for this trace. 
        /// </summary>
		[XmlElement("mnemAlias")]

        public String MnemAlias {
            get {
                return mnemAliasField;
            } 
            set {
                mnemAliasField = value;
                NotifyPropertyChanged("MnemAlias");
            }
        }

        private String mnemAliasField; 


        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e., when the null value representation is not explicitly defined). If a null value is defined in the logCurveInfo, it overrides any null value specified at the logHeader level. An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited or base64 encoded array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data.
        /// </summary>
		[XmlElement("nullValue")]

        public String NullValue {
            get {
                return nullValueField;
            } 
            set {
                nullValueField = value;
                NotifyPropertyChanged("NullValue");
            }
        }

        private String nullValueField; 


        /// <summary>
        /// True (true or 1) if this curve is a candidate to be a primary index. False (false or 0) or not given, indicates otherwise. An index curve should monotonically change when sorted on its own values (i.e., no duplicates). 
        /// </summary>
		[XmlElement("alternateIndex")]

        public Boolean? AlternateIndex {
            get {
                return alternateIndexField;
            } 
            set {
                alternateIndexField = value;
                this.AlternateIndexSpecified = true;
                NotifyPropertyChanged("AlternateIndex");
            }
        }

        private Boolean? alternateIndexField; 


		/// <summary>
        /// alternateIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean AlternateIndexSpecified {
            get {
                return alternateIndexSpecifiedField;
            } 
            set {
                alternateIndexSpecifiedField = value;
                NotifyPropertyChanged("AlternateIndexSpecified");
            }
        }

        private Boolean alternateIndexSpecifiedField; 


        /// <summary>
        /// A pointer to the wellDatum that represents the values of this trace. This is only relevant for measured depths, vertical depths or elevations.
        /// </summary>
		[XmlElement("wellDatum")]

        public RefNameString WellDatum {
            get {
                return wellDatumField;
            } 
            set {
                wellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

        private RefNameString wellDatumField; 


        /// <summary>
        /// Description of the curve. 
        /// </summary>
		[XmlElement("curveDescription")]

        public String CurveDescription {
            get {
                return curveDescriptionField;
            } 
            set {
                curveDescriptionField = value;
                NotifyPropertyChanged("CurveDescription");
            }
        }

        private String curveDescriptionField; 


        /// <summary>
        /// Offset of sensor from a downhole equipment vertical reference (the drill bit, for MWD logs; the tool zero reference for wireline logs). This element is only informative (log values are presented at actual depth, not requiring subtraction of an offset).
        /// </summary>
		[XmlElement("sensorOffset")]

        public LengthMeasure SensorOffset {
            get {
                return sensorOffsetField;
            } 
            set {
                sensorOffsetField = value;
                NotifyPropertyChanged("SensorOffset");
            }
        }

        private LengthMeasure sensorOffsetField; 


        /// <summary>
        /// Data source, could be tool name/id. 
        /// </summary>
		[XmlElement("dataSource")]

        public String DataSource {
            get {
                return dataSourceField;
            } 
            set {
                dataSourceField = value;
                NotifyPropertyChanged("DataSource");
            }
        }

        private String dataSourceField; 


        /// <summary>
        /// Data density of sample in samples per length unit. 
        /// </summary>
		[XmlElement("densData")]

        public PerLengthMeasure DensData {
            get {
                return densDataField;
            } 
            set {
                densDataField = value;
                NotifyPropertyChanged("DensData");
            }
        }

        private PerLengthMeasure densDataField; 


        /// <summary>
        /// State of trace data. 
        /// </summary>
		[XmlElement("traceState")]

        public LogTraceState? TraceState {
            get {
                return traceStateField;
            } 
            set {
                traceStateField = value;
                this.TraceStateSpecified = true;
                NotifyPropertyChanged("TraceState");
            }
        }

        private LogTraceState? traceStateField; 


		/// <summary>
        /// traceStateSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TraceStateSpecified {
            get {
                return traceStateSpecifiedField;
            } 
            set {
                traceStateSpecifiedField = value;
                NotifyPropertyChanged("TraceStateSpecified");
            }
        }

        private Boolean traceStateSpecifiedField; 


        /// <summary>
        /// Origin of trace data. 
        /// </summary>
		[XmlElement("traceOrigin")]

        public LogTraceOrigin? TraceOrigin {
            get {
                return traceOriginField;
            } 
            set {
                traceOriginField = value;
                this.TraceOriginSpecified = true;
                NotifyPropertyChanged("TraceOrigin");
            }
        }

        private LogTraceOrigin? traceOriginField; 


		/// <summary>
        /// traceOriginSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean TraceOriginSpecified {
            get {
                return traceOriginSpecifiedField;
            } 
            set {
                traceOriginSpecifiedField = value;
                NotifyPropertyChanged("TraceOriginSpecified");
            }
        }

        private Boolean traceOriginSpecifiedField; 


        /// <summary>
        /// Curve data type. For simple (non-array) traces, the data type of the curve data. For array curves (except Base64-encoded array curves), the data type of curve array element. For Base64-encoded arrays, the element data type is defined by encodingDef. If neither typeLogData nor encodingDef are given then 'Double' is assumed.
        /// </summary>
        [XmlElement("typeLogData")]
        public LogDataType? TypeLogData {
            get {
                return typeLogDataField;
            } 
            set {
                if (value != null && EncodingDefSpecified) throw new Exception("Cannot set property TypeLogData when property EncodingDef is already set");
                typeLogDataField = value;
                TypeLogDataSpecified = (value!=null);
                NotifyPropertyChanged("TypeLogData");
            }
        }

        private LogDataType? typeLogDataField; 
        /// <summary>
        /// Boolean to indicate if TypeLogData has been set. Used for serialization.
        /// </summary>
        private Boolean TypeLogDataSpecified = false; 

        /// <summary>
        /// Indicates that the channel is encoded using a Base64 representation of binary values, and defines the binary type of elements of the array. If absent and axisDefinition is given, implies space delimited values, whose elemental data type is given by typeLogData.
        /// </summary>
        [XmlElement("encodingDef")]
        public ArrayElementDataType? EncodingDef {
            get {
                return encodingDefField;
            } 
            set {
                if (value != null && TypeLogDataSpecified) throw new Exception("Cannot set property EncodingDef when property TypeLogData is already set");
                encodingDefField = value;
                EncodingDefSpecified = (value!=null);
                NotifyPropertyChanged("EncodingDef");
            }
        }

        private ArrayElementDataType? encodingDefField; 
        /// <summary>
        /// Boolean to indicate if EncodingDef has been set. Used for serialization.
        /// </summary>
        private Boolean EncodingDefSpecified = false; 



        /// <summary>
        /// Indicates that the curve is an array curve (i.e., multi-valued samples), and provides meta data by which an axis of the array can be understood. A separate definition is required for each axis of an N-dimensional array.
        /// </summary>
		[XmlElement("axisDefinition")]

        public List<AxisDefinition> AxisDefinition {
            get {
                return axisDefinitionField;
            } 
            set {
                axisDefinitionField = value;
                NotifyPropertyChanged("AxisDefinition");
            }
        }

        private List<AxisDefinition> axisDefinitionField; 


		/// <summary>
        /// Unique identifier for the curve. This value must be unique within the context of the wellLog. This value will be referenced by block curve descriptors.
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// Describes a well log data block. 
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_blockInfo", Namespace="http://www.witsml.org/schemas/131")]

    [Description("Describes a well log data block. ")]
    public partial class BlockInfo : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// The number of data rows in the persistent block. If a value is specified for this element in a query then the server will limit the number of data rows in the result but the return value will still be the number of data rows in the persistent block.
        /// </summary>
		[XmlElement("dataRowCount")]

        public Int32? DataRowCount {
            get {
                return dataRowCountField;
            } 
            set {
                dataRowCountField = value;
                this.DataRowCountSpecified = true;
                NotifyPropertyChanged("DataRowCount");
            }
        }

        private Int32? dataRowCountField; 


		/// <summary>
        /// dataRowCountSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DataRowCountSpecified {
            get {
                return dataRowCountSpecifiedField;
            } 
            set {
                dataRowCountSpecifiedField = value;
                NotifyPropertyChanged("DataRowCountSpecified");
            }
        }

        private Boolean dataRowCountSpecifiedField; 


        /// <summary>
        /// Identifies the pass within the run.
        /// </summary>
		[XmlElement("pass")]

        public String Pass {
            get {
                return passField;
            } 
            set {
                passField = value;
                NotifyPropertyChanged("Pass");
            }
        }

        private String passField; 


        /// <summary>
        /// A description of the block. For example, 'main log section', 'repeat section', 'logged going in hole' 'main log section, curve group 1', 'composite'.
        /// </summary>
		[XmlElement("description")]

        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        /// <summary>
        /// Primary index type. The index may be a quantity type or it may be a dateTime type. At least one of the index sets must be given. If both are given then "indexType" and "indexCurve" must represent an elapsed time from "startDateTimeIndex". The start and end indexes are server query parameters and will be populated with valid values in a GetFromStore result.
        /// </summary>
		[XmlElement("indexType")]

        public LogIndexType? IndexType {
            get {
                return indexTypeField;
            } 
            set {
                indexTypeField = value;
                NotifyPropertyChanged("IndexType");
            }
        }

        private LogIndexType? indexTypeField; 


        /// <summary>
        /// When the direction is defined as "Increasing", the startIndex is the starting (minimum) index value at which the first data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first data point is located. 
        /// </summary>
		[XmlElement("startIndex")]

        public GenericMeasure StartIndex {
            get {
                return startIndexField;
            } 
            set {
                startIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private GenericMeasure startIndexField; 


        /// <summary>
        /// When the direction is defined as "Increasing", the endIndex is the ending (maximum) index value at which the last data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last data point is located.
        /// </summary>
		[XmlElement("endIndex")]

        public GenericMeasure EndIndex {
            get {
                return endIndexField;
            } 
            set {
                endIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private GenericMeasure endIndexField; 


        /// <summary>
        /// The sampling increment. Set to zero for unequal sampling. For curves that are originally sampled at a constant increment, this value should be retained because calculated values may have cumulative errors.
        /// </summary>
		[XmlElement("stepIncrement")]

        public RatioGenericMeasure StepIncrement {
            get {
                return stepIncrementField;
            } 
            set {
                stepIncrementField = value;
                NotifyPropertyChanged("StepIncrement");
            }
        }

        private RatioGenericMeasure stepIncrementField; 


        /// <summary>
        /// When the direction is defined as "Increasing", the startIndex is the starting (minimum) index value at which the first data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first data point is located. 
        /// </summary>
		[XmlElement("startDateTimeIndex")]

        public DateTime? StartDateTimeIndex {
            get {
                return startDateTimeIndexField;
            } 
            set {
                startDateTimeIndexField = value;
                this.StartDateTimeIndexSpecified = true;
                NotifyPropertyChanged("StartDateTimeIndex");
            }
        }

        private DateTime? startDateTimeIndexField; 


		/// <summary>
        /// startDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean StartDateTimeIndexSpecified {
            get {
                return startDateTimeIndexSpecifiedField;
            } 
            set {
                startDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("StartDateTimeIndexSpecified");
            }
        }

        private Boolean startDateTimeIndexSpecifiedField; 


        /// <summary>
        /// When the direction is defined as "Increasing", the endIndex is the ending (maximum) index value at which the last data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last data point is located. This value is optional when startDateTimeIndex represents a reference for elapsed times. Otherwise, it should be defined when startDateTimeIndex is defined. 
        /// </summary>
		[XmlElement("endDateTimeIndex")]

        public DateTime? EndDateTimeIndex {
            get {
                return endDateTimeIndexField;
            } 
            set {
                endDateTimeIndexField = value;
                this.EndDateTimeIndexSpecified = true;
                NotifyPropertyChanged("EndDateTimeIndex");
            }
        }

        private DateTime? endDateTimeIndexField; 


		/// <summary>
        /// endDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean EndDateTimeIndexSpecified {
            get {
                return endDateTimeIndexSpecifiedField;
            } 
            set {
                endDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("EndDateTimeIndexSpecified");
            }
        }

        private Boolean endDateTimeIndexSpecifiedField; 


        /// <summary>
        /// The polarity of change in index values associated with successive data records. Increasing or Decreasing. Mixed is not a valid value.
        /// </summary>
		[XmlElement("direction")]

        public LogIndexDirection? Direction {
            get {
                return directionField;
            } 
            set {
                directionField = value;
                this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        private LogIndexDirection? directionField; 


		/// <summary>
        /// directionSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean DirectionSpecified {
            get {
                return directionSpecifiedField;
            } 
            set {
                directionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }

        private Boolean directionSpecifiedField; 


        /// <summary>
        /// The mnemonic of the index curve plus the column index. A column index of zero indicates an implied trace whose values start at startIndex and increment by stepIncrement for each row.
        /// </summary>
		[XmlElement("indexCurve")]

        public IndexCurve IndexCurve {
            get {
                return indexCurveField;
            } 
            set {
                indexCurveField = value;
                NotifyPropertyChanged("IndexCurve");
            }
        }

        private IndexCurve indexCurveField; 


        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e. when the null value representation is not explicitly defined). If a null value representation is defined for a log, this becomes the default for all curves in that log (but can be overridden at the block or curve level). An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited or base64 encoded array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
		[XmlElement("nullValue")]

        public String NullValue {
            get {
                return nullValueField;
            } 
            set {
                nullValueField = value;
                NotifyPropertyChanged("NullValue");
            }
        }

        private String nullValueField; 


        /// <summary>
        /// Log parameters that apply to this block.
        /// </summary>
		[XmlElement("logParam")]

        public List<IndexedObject> LogParam {
            get {
                return logParamField;
            } 
            set {
                logParamField = value;
                NotifyPropertyChanged("LogParam");
            }
        }

        private List<IndexedObject> logParamField; 


        /// <summary>
        /// A curve occurring in data records defined by this block, and its position within the data record. Each curve in the block must have a different mnemonic.
        /// </summary>
		[XmlElement("blockCurveInfo")]

        public List<BlockCurveInfo> BlockCurveInfo {
            get {
                return blockCurveInfoField;
            } 
            set {
                blockCurveInfoField = value;
                NotifyPropertyChanged("BlockCurveInfo");
            }
        }

        private List<BlockCurveInfo> blockCurveInfoField; 


		/// <summary>
        /// Unique identifier for the block. This value must be unique within the context of the wellLog. This value will be pointed to by data levels that are associated with this block.
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// Descriptor of a curve associated with a block. This captures the representational aspects of the curve. The data semantics is defined by logCurveInfo.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_blockCurveInfo", Namespace="http://www.witsml.org/schemas/131")]

    [Description("Descriptor of a curve associated with a block. This captures the representational aspects of the curve. The data semantics is defined by logCurveInfo.")]
    public partial class BlockCurveInfo : Object , INotifyPropertyChanged
    {


        /// <summary>
        /// A pointer to the curveInfo's curveId that this curve represents.
        /// </summary>
		[XmlElement("curveId")]

        public String CurveId {
            get {
                return curveIdField;
            } 
            set {
                curveIdField = value;
                NotifyPropertyChanged("CurveId");
            }
        }

        private String curveIdField; 


        /// <summary>
        /// A 1-based index of curve data in the data records. A value of zero indicates an implied curve with no values in the data record.
        /// </summary>
		[XmlElement("columnIndex")]

        public Int16? ColumnIndex {
            get {
                return columnIndexField;
            } 
            set {
                columnIndexField = value;
                NotifyPropertyChanged("ColumnIndex");
            }
        }

        private Int16? columnIndexField; 


        /// <summary>
        /// The minimum index value at which the first valid data point is located. This value will be properly set by the server to reflect data in the returned document.
        /// </summary>
		[XmlElement("minIndex")]

        public GenericMeasure MinIndex {
            get {
                return minIndexField;
            } 
            set {
                minIndexField = value;
                NotifyPropertyChanged("MinIndex");
            }
        }

        private GenericMeasure minIndexField; 


        /// <summary>
        /// The maximum index value at which the last valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
		[XmlElement("maxIndex")]

        public GenericMeasure MaxIndex {
            get {
                return maxIndexField;
            } 
            set {
                maxIndexField = value;
                NotifyPropertyChanged("MaxIndex");
            }
        }

        private GenericMeasure maxIndexField; 


        /// <summary>
        /// The minimum index value at which the first valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
		[XmlElement("minDateTimeIndex")]

        public DateTime? MinDateTimeIndex {
            get {
                return minDateTimeIndexField;
            } 
            set {
                minDateTimeIndexField = value;
                this.MinDateTimeIndexSpecified = true;
                NotifyPropertyChanged("MinDateTimeIndex");
            }
        }

        private DateTime? minDateTimeIndexField; 


		/// <summary>
        /// minDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MinDateTimeIndexSpecified {
            get {
                return minDateTimeIndexSpecifiedField;
            } 
            set {
                minDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("MinDateTimeIndexSpecified");
            }
        }

        private Boolean minDateTimeIndexSpecifiedField; 


        /// <summary>
        /// The maximum index value at which the last valid data point is located. This value will be properly set by the server to reflect data in the returned document. 
        /// </summary>
		[XmlElement("maxDateTimeIndex")]

        public DateTime? MaxDateTimeIndex {
            get {
                return maxDateTimeIndexField;
            } 
            set {
                maxDateTimeIndexField = value;
                this.MaxDateTimeIndexSpecified = true;
                NotifyPropertyChanged("MaxDateTimeIndex");
            }
        }

        private DateTime? maxDateTimeIndexField; 


		/// <summary>
        /// maxDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
		[Browsable(false)]

        public Boolean MaxDateTimeIndexSpecified {
            get {
                return maxDateTimeIndexSpecifiedField;
            } 
            set {
                maxDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("MaxDateTimeIndexSpecified");
            }
        }

        private Boolean maxDateTimeIndexSpecifiedField; 


		/// <summary>
        /// uid property
        /// </summary>
        [XmlAttribute("uid")]

        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    namespace ComponentSchemas 
    {

    /// <summary>
    /// This class represents the data xsd type.
    /// </summary>

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]

    [System.Xml.Serialization.XmlTypeAttribute(TypeName="data", Namespace="http://www.witsml.org/schemas/131")]

    [Description("This class represents the data xsd type.")]
    public partial class LogCurveInfoData : Object , INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LogCurveInfoData class.
        /// </summary>
        public LogCurveInfoData() {}

        /// <summary>
        /// Initializes a new instance of the LogCurveInfoData class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public LogCurveInfoData(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


		/// <summary>
        /// A pointer to the block descriptor's uid that this level represents. If more than one block descriptor is specified then this attribute is required.
        /// </summary>
        [XmlAttribute("id")]

        public String Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private String idField; 


		/// <summary>
        /// Value property
        /// </summary>
        [XmlText]

        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members

    } //here

    }



    #endregion

    #region Enumerations
    namespace ReferenceData {

        /// <summary>
        /// This class represents the SubscriptionAction xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/api/131")]
        [Description("This class represents the SubscriptionAction xsd enumeration.")]
        public enum SubscriptionAction 
        {
        /// <summary>
        /// add property
        /// </summary>
          add,
        /// <summary>
        /// modify property
        /// </summary>
          modify,
        /// <summary>
        /// cancel property
        /// </summary>
          cancel,
        /// <summary>
        /// verify property
        /// </summary>
          verify

        }

        /// <summary>
        /// This class represents the anglePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the anglePerLengthUom xsd enumeration.")]
        public enum AnglePerLengthUom 
        {
        /// <summary>
        /// radm property
        /// </summary>
          [XmlEnum("rad/m")]
          radm,
        /// <summary>
        /// dega30ft property
        /// </summary>
          [XmlEnum("dega/30ft")]
          dega30ft,
        /// <summary>
        /// degaft property
        /// </summary>
          [XmlEnum("dega/ft")]
          degaft,
        /// <summary>
        /// dega100ft property
        /// </summary>
          [XmlEnum("dega/100ft")]
          dega100ft,
        /// <summary>
        /// degam property
        /// </summary>
          [XmlEnum("dega/m")]
          degam,
        /// <summary>
        /// dega30m property
        /// </summary>
          [XmlEnum("dega/30m")]
          dega30m,
        /// <summary>
        /// radft property
        /// </summary>
          [XmlEnum("rad/ft")]
          radft

        }

        /// <summary>
        /// This class represents the WellVerticalCoordinateUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellVerticalCoordinateUom xsd enumeration.")]
        public enum WellVerticalCoordinateUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ftBr(65)")]
          ftBr65

        }

        /// <summary>
        /// This class represents the MeasuredDepthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MeasuredDepthUom xsd enumeration.")]
        public enum MeasuredDepthUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS

        }

        /// <summary>
        /// This class represents the PercentUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the PercentUom xsd enumeration.")]
        public enum PercentUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item

        }

        /// <summary>
        /// This class represents the planeAngleUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the planeAngleUom xsd enumeration.")]
        public enum PlaneAngleUom 
        {
        /// <summary>
        /// rad property
        /// </summary>
          rad,
        /// <summary>
        /// c property
        /// </summary>
          c,
        /// <summary>
        /// ccgr property
        /// </summary>
          ccgr,
        /// <summary>
        /// cgr property
        /// </summary>
          cgr,
        /// <summary>
        /// dega property
        /// </summary>
          dega,
        /// <summary>
        /// gon property
        /// </summary>
          gon,
        /// <summary>
        /// gr property
        /// </summary>
          gr,
        /// <summary>
        /// Grad property
        /// </summary>
          Grad,
        /// <summary>
        /// krad property
        /// </summary>
          krad,
        /// <summary>
        /// mila property
        /// </summary>
          mila,
        /// <summary>
        /// mina property
        /// </summary>
          mina,
        /// <summary>
        /// mrad property
        /// </summary>
          mrad,
        /// <summary>
        /// Mrad property
        /// </summary>
          Mrad,
        /// <summary>
        /// mseca property
        /// </summary>
          mseca,
        /// <summary>
        /// seca property
        /// </summary>
          seca,
        /// <summary>
        /// urad property
        /// </summary>
          urad

        }

        /// <summary>
        /// This class represents the AziRef xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the AziRef xsd enumeration.")]
        public enum AziRef 
        {
        /// <summary>
        /// magneticnorth property
        /// </summary>
          [XmlEnum("magnetic north")]
          magneticnorth,
        /// <summary>
        /// gridnorth property
        /// </summary>
          [XmlEnum("grid north")]
          gridnorth,
        /// <summary>
        /// truenorth property
        /// </summary>
          [XmlEnum("true north")]
          truenorth,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the volumePerVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the volumePerVolumeUom xsd enumeration.")]
        public enum VolumePerVolumeUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// permil property
        /// </summary>
          permil,
        /// <summary>
        /// ppdk property
        /// </summary>
          ppdk,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// bblacreft property
        /// </summary>
          [XmlEnum("bbl/acre.ft")]
          bblacreft,
        /// <summary>
        /// bblbbl property
        /// </summary>
          [XmlEnum("bbl/bbl")]
          bblbbl,
        /// <summary>
        /// bblft3 property
        /// </summary>
          [XmlEnum("bbl/ft3")]
          bblft3,
        /// <summary>
        /// bbl100bbl property
        /// </summary>
          [XmlEnum("bbl/100bbl")]
          bbl100bbl,
        /// <summary>
        /// bblkft3 property
        /// </summary>
          [XmlEnum("bbl/k(ft3)")]
          bblkft3,
        /// <summary>
        /// bblMft3 property
        /// </summary>
          [XmlEnum("bbl/M(ft3)")]
          bblMft3,
        /// <summary>
        /// cm3cm3 property
        /// </summary>
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        /// <summary>
        /// cm3m3 property
        /// </summary>
          [XmlEnum("cm3/m3")]
          cm3m3,
        /// <summary>
        /// dm3m3 property
        /// </summary>
          [XmlEnum("dm3/m3")]
          dm3m3,
        /// <summary>
        /// ft3bbl property
        /// </summary>
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        /// <summary>
        /// ft3ft3 property
        /// </summary>
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        /// <summary>
        /// galUSkgalUS property
        /// </summary>
          [XmlEnum("galUS/kgalUS")]
          galUSkgalUS,
        /// <summary>
        /// galUKkgalUK property
        /// </summary>
          [XmlEnum("galUK/kgalUK")]
          galUKkgalUK,
        /// <summary>
        /// galUKft3 property
        /// </summary>
          [XmlEnum("galUK/ft3")]
          galUKft3,
        /// <summary>
        /// galUKMbbl property
        /// </summary>
          [XmlEnum("galUK/Mbbl")]
          galUKMbbl,
        /// <summary>
        /// galUSbbl property
        /// </summary>
          [XmlEnum("galUS/bbl")]
          galUSbbl,
        /// <summary>
        /// galUS10bbl property
        /// </summary>
          [XmlEnum("galUS/10bbl")]
          galUS10bbl,
        /// <summary>
        /// galUSft3 property
        /// </summary>
          [XmlEnum("galUS/ft3")]
          galUSft3,
        /// <summary>
        /// galUSMbbl property
        /// </summary>
          [XmlEnum("galUS/Mbbl")]
          galUSMbbl,
        /// <summary>
        /// Item1000ft3bbl property
        /// </summary>
          [XmlEnum("1000ft3/bbl")]
          Item1000ft3bbl,
        /// <summary>
        /// ksm3sm3 property
        /// </summary>
          [XmlEnum("ksm3/sm3")]
          ksm3sm3,
        /// <summary>
        /// L10bbl property
        /// </summary>
          [XmlEnum("L/10bbl")]
          L10bbl,
        /// <summary>
        /// Lm3 property
        /// </summary>
          [XmlEnum("L/m3")]
          Lm3,
        /// <summary>
        /// m3ham property
        /// </summary>
          [XmlEnum("m3/ha.m")]
          m3ham,
        /// <summary>
        /// m3m3 property
        /// </summary>
          [XmlEnum("m3/m3")]
          m3m3,
        /// <summary>
        /// Mft3acreft property
        /// </summary>
          [XmlEnum("M(ft3)/acre.ft")]
          Mft3acreft,
        /// <summary>
        /// mLgalUK property
        /// </summary>
          [XmlEnum("mL/galUK")]
          mLgalUK,
        /// <summary>
        /// mLgalUS property
        /// </summary>
          [XmlEnum("mL/galUS")]
          mLgalUS,
        /// <summary>
        /// mLmL property
        /// </summary>
          [XmlEnum("mL/mL")]
          mLmL,
        /// <summary>
        /// MMbblacreft property
        /// </summary>
          [XmlEnum("MMbbl/acre.ft")]
          MMbblacreft,
        /// <summary>
        /// MMscf60stb60 property
        /// </summary>
          [XmlEnum("MMscf60/stb60")]
          MMscf60stb60,
        /// <summary>
        /// Mscf60stb60 property
        /// </summary>
          [XmlEnum("Mscf60/stb60")]
          Mscf60stb60,
        /// <summary>
        /// ptUKMbbl property
        /// </summary>
          [XmlEnum("ptUK/Mbbl")]
          ptUKMbbl,
        /// <summary>
        /// ptUS10bbl property
        /// </summary>
          [XmlEnum("ptUS/10bbl")]
          ptUS10bbl,
        /// <summary>
        /// pu property
        /// </summary>
          pu,
        /// <summary>
        /// scm15stb60 property
        /// </summary>
          [XmlEnum("scm15/stb60")]
          scm15stb60,
        /// <summary>
        /// sm3ksm3 property
        /// </summary>
          [XmlEnum("sm3/ksm3")]
          sm3ksm3,
        /// <summary>
        /// sm3sm3 property
        /// </summary>
          [XmlEnum("sm3/sm3")]
          sm3sm3,
        /// <summary>
        /// stb60MMscf60 property
        /// </summary>
          [XmlEnum("stb60/MMscf60")]
          stb60MMscf60,
        /// <summary>
        /// stb60MMscm15 property
        /// </summary>
          [XmlEnum("stb60/MMscm15")]
          stb60MMscm15,
        /// <summary>
        /// stb60Mscf60 property
        /// </summary>
          [XmlEnum("stb60/Mscf60")]
          stb60Mscf60,
        /// <summary>
        /// stb60Mscm15 property
        /// </summary>
          [XmlEnum("stb60/Mscm15")]
          stb60Mscm15,
        /// <summary>
        /// stb60scm15 property
        /// </summary>
          [XmlEnum("stb60/scm15")]
          stb60scm15

        }

        /// <summary>
        /// This class represents the volumeFlowRateUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the volumeFlowRateUom xsd enumeration.")]
        public enum VolumeFlowRateUom 
        {
        /// <summary>
        /// m3s property
        /// </summary>
          [XmlEnum("m3/s")]
          m3s,
        /// <summary>
        /// bbld property
        /// </summary>
          [XmlEnum("bbl/d")]
          bbld,
        /// <summary>
        /// bblhr property
        /// </summary>
          [XmlEnum("bbl/hr")]
          bblhr,
        /// <summary>
        /// bblmin property
        /// </summary>
          [XmlEnum("bbl/min")]
          bblmin,
        /// <summary>
        /// cm330min property
        /// </summary>
          [XmlEnum("cm3/30min")]
          cm330min,
        /// <summary>
        /// cm3h property
        /// </summary>
          [XmlEnum("cm3/h")]
          cm3h,
        /// <summary>
        /// cm3min property
        /// </summary>
          [XmlEnum("cm3/min")]
          cm3min,
        /// <summary>
        /// cm3s property
        /// </summary>
          [XmlEnum("cm3/s")]
          cm3s,
        /// <summary>
        /// dm3s property
        /// </summary>
          [XmlEnum("dm3/s")]
          dm3s,
        /// <summary>
        /// ft3d property
        /// </summary>
          [XmlEnum("ft3/d")]
          ft3d,
        /// <summary>
        /// ft3h property
        /// </summary>
          [XmlEnum("ft3/h")]
          ft3h,
        /// <summary>
        /// ft3min property
        /// </summary>
          [XmlEnum("ft3/min")]
          ft3min,
        /// <summary>
        /// ft3s property
        /// </summary>
          [XmlEnum("ft3/s")]
          ft3s,
        /// <summary>
        /// galUKd property
        /// </summary>
          [XmlEnum("galUK/d")]
          galUKd,
        /// <summary>
        /// galUKhr property
        /// </summary>
          [XmlEnum("galUK/hr")]
          galUKhr,
        /// <summary>
        /// galUKmin property
        /// </summary>
          [XmlEnum("galUK/min")]
          galUKmin,
        /// <summary>
        /// galUSd property
        /// </summary>
          [XmlEnum("galUS/d")]
          galUSd,
        /// <summary>
        /// galUShr property
        /// </summary>
          [XmlEnum("galUS/hr")]
          galUShr,
        /// <summary>
        /// galUSmin property
        /// </summary>
          [XmlEnum("galUS/min")]
          galUSmin,
        /// <summary>
        /// kbbld property
        /// </summary>
          [XmlEnum("kbbl/d")]
          kbbld,
        /// <summary>
        /// Item1000ft3d property
        /// </summary>
          [XmlEnum("1000ft3/d")]
          Item1000ft3d,
        /// <summary>
        /// Item1000m3d property
        /// </summary>
          [XmlEnum("1000m3/d")]
          Item1000m3d,
        /// <summary>
        /// Item1000m3h property
        /// </summary>
          [XmlEnum("1000m3/h")]
          Item1000m3h,
        /// <summary>
        /// Lh property
        /// </summary>
          [XmlEnum("L/h")]
          Lh,
        /// <summary>
        /// Lmin property
        /// </summary>
          [XmlEnum("L/min")]
          Lmin,
        /// <summary>
        /// Ls property
        /// </summary>
          [XmlEnum("L/s")]
          Ls,
        /// <summary>
        /// m3d property
        /// </summary>
          [XmlEnum("m3/d")]
          m3d,
        /// <summary>
        /// m3h property
        /// </summary>
          [XmlEnum("m3/h")]
          m3h,
        /// <summary>
        /// m3min property
        /// </summary>
          [XmlEnum("m3/min")]
          m3min,
        /// <summary>
        /// Mbbld property
        /// </summary>
          [XmlEnum("Mbbl/d")]
          Mbbld,
        /// <summary>
        /// Mft3d property
        /// </summary>
          [XmlEnum("M(ft3)/d")]
          Mft3d,
        /// <summary>
        /// Mm3d property
        /// </summary>
          [XmlEnum("M(m3)/d")]
          Mm3d

        }

        /// <summary>
        /// This class represents the volumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the volumeUom xsd enumeration.")]
        public enum VolumeUom 
        {
        /// <summary>
        /// m3 property
        /// </summary>
          m3,
        /// <summary>
        /// acreft property
        /// </summary>
          [XmlEnum("acre.ft")]
          acreft,
        /// <summary>
        /// bbl property
        /// </summary>
          bbl,
        /// <summary>
        /// bcf property
        /// </summary>
          bcf,
        /// <summary>
        /// cm3 property
        /// </summary>
          cm3,
        /// <summary>
        /// dm3 property
        /// </summary>
          dm3,
        /// <summary>
        /// flozUK property
        /// </summary>
          flozUK,
        /// <summary>
        /// flozUS property
        /// </summary>
          flozUS,
        /// <summary>
        /// ft3 property
        /// </summary>
          ft3,
        /// <summary>
        /// galUK property
        /// </summary>
          galUK,
        /// <summary>
        /// galUS property
        /// </summary>
          galUS,
        /// <summary>
        /// ham property
        /// </summary>
          [XmlEnum("ha.m")]
          ham,
        /// <summary>
        /// hL property
        /// </summary>
          hL,
        /// <summary>
        /// in3 property
        /// </summary>
          in3,
        /// <summary>
        /// Item1000ft3 property
        /// </summary>
          [XmlEnum("1000ft3")]
          Item1000ft3,
        /// <summary>
        /// km3 property
        /// </summary>
          km3,
        /// <summary>
        /// L property
        /// </summary>
          L,
        /// <summary>
        /// Mbbl property
        /// </summary>
          Mbbl,
        /// <summary>
        /// Mcf property
        /// </summary>
          Mcf,
        /// <summary>
        /// Mft3 property
        /// </summary>
          [XmlEnum("M(ft3)")]
          Mft3,
        /// <summary>
        /// mi3 property
        /// </summary>
          mi3,
        /// <summary>
        /// mL property
        /// </summary>
          mL,
        /// <summary>
        /// Mm3 property
        /// </summary>
          [XmlEnum("M(m3)")]
          Mm3,
        /// <summary>
        /// mm3 property
        /// </summary>
          mm3,
        /// <summary>
        /// MMbbl property
        /// </summary>
          MMbbl,
        /// <summary>
        /// ptUK property
        /// </summary>
          ptUK,
        /// <summary>
        /// ptUS property
        /// </summary>
          ptUS,
        /// <summary>
        /// qtUK property
        /// </summary>
          qtUK,
        /// <summary>
        /// qtUS property
        /// </summary>
          qtUS,
        /// <summary>
        /// tcf property
        /// </summary>
          tcf,
        /// <summary>
        /// um2m property
        /// </summary>
          [XmlEnum("um2.m")]
          um2m,
        /// <summary>
        /// yd3 property
        /// </summary>
          yd3

        }

        /// <summary>
        /// This class represents the velocityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the velocityUom xsd enumeration.")]
        public enum VelocityUom 
        {
        /// <summary>
        /// ms property
        /// </summary>
          [XmlEnum("m/s")]
          ms,
        /// <summary>
        /// cma property
        /// </summary>
          [XmlEnum("cm/a")]
          cma,
        /// <summary>
        /// cms property
        /// </summary>
          [XmlEnum("cm/s")]
          cms,
        /// <summary>
        /// dms property
        /// </summary>
          [XmlEnum("dm/s")]
          dms,
        /// <summary>
        /// ftd property
        /// </summary>
          [XmlEnum("ft/d")]
          ftd,
        /// <summary>
        /// fth property
        /// </summary>
          [XmlEnum("ft/h")]
          fth,
        /// <summary>
        /// ftmin property
        /// </summary>
          [XmlEnum("ft/min")]
          ftmin,
        /// <summary>
        /// ftms property
        /// </summary>
          [XmlEnum("ft/ms")]
          ftms,
        /// <summary>
        /// fts property
        /// </summary>
          [XmlEnum("ft/s")]
          fts,
        /// <summary>
        /// ftus property
        /// </summary>
          [XmlEnum("ft/us")]
          ftus,
        /// <summary>
        /// ina property
        /// </summary>
          [XmlEnum("in/a")]
          ina,
        /// <summary>
        /// inmin property
        /// </summary>
          [XmlEnum("in/min")]
          inmin,
        /// <summary>
        /// ins property
        /// </summary>
          [XmlEnum("in/s")]
          ins,
        /// <summary>
        /// kfth property
        /// </summary>
          [XmlEnum("kft/h")]
          kfth,
        /// <summary>
        /// kfts property
        /// </summary>
          [XmlEnum("kft/s")]
          kfts,
        /// <summary>
        /// kmh property
        /// </summary>
          [XmlEnum("km/h")]
          kmh,
        /// <summary>
        /// kms property
        /// </summary>
          [XmlEnum("km/s")]
          kms,
        /// <summary>
        /// knot property
        /// </summary>
          knot,
        /// <summary>
        /// md property
        /// </summary>
          [XmlEnum("m/d")]
          md,
        /// <summary>
        /// mh property
        /// </summary>
          [XmlEnum("m/h")]
          mh,
        /// <summary>
        /// mmin property
        /// </summary>
          [XmlEnum("m/min")]
          mmin,
        /// <summary>
        /// mms property
        /// </summary>
          [XmlEnum("m/ms")]
          mms,
        /// <summary>
        /// mih property
        /// </summary>
          [XmlEnum("mi/h")]
          mih,
        /// <summary>
        /// milyr property
        /// </summary>
          [XmlEnum("mil/yr")]
          milyr,
        /// <summary>
        /// mma property
        /// </summary>
          [XmlEnum("mm/a")]
          mma,
        /// <summary>
        /// mms1 property
        /// </summary>
          [XmlEnum("mm/s")]
          mms1,
        /// <summary>
        /// nms property
        /// </summary>
          [XmlEnum("nm/s")]
          nms,
        /// <summary>
        /// ums property
        /// </summary>
          [XmlEnum("um/s")]
          ums

        }

        /// <summary>
        /// This class represents the timeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the timeUom xsd enumeration.")]
        public enum TimeUom 
        {
        /// <summary>
        /// s property
        /// </summary>
          s,
        /// <summary>
        /// a property
        /// </summary>
          a,
        /// <summary>
        /// cs property
        /// </summary>
          cs,
        /// <summary>
        /// d property
        /// </summary>
          d,
        /// <summary>
        /// Ga property
        /// </summary>
          Ga,
        /// <summary>
        /// h property
        /// </summary>
          h,
        /// <summary>
        /// Item100s property
        /// </summary>
          [XmlEnum("100s")]
          Item100s,
        /// <summary>
        /// Ma property
        /// </summary>
          Ma,
        /// <summary>
        /// min property
        /// </summary>
          min,
        /// <summary>
        /// ms property
        /// </summary>
          ms,
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("ms/2")]
          ms2,
        /// <summary>
        /// ns property
        /// </summary>
          ns,
        /// <summary>
        /// ps property
        /// </summary>
          ps,
        /// <summary>
        /// us property
        /// </summary>
          us,
        /// <summary>
        /// wk property
        /// </summary>
          wk,
        /// <summary>
        /// Item100ka property
        /// </summary>
          [XmlEnum("100ka")]
          Item100ka

        }

        /// <summary>
        /// This class represents the thermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the thermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperatureUom 
        {
        /// <summary>
        /// K property
        /// </summary>
          K,
        /// <summary>
        /// degC property
        /// </summary>
          degC,
        /// <summary>
        /// degF property
        /// </summary>
          degF,
        /// <summary>
        /// degR property
        /// </summary>
          degR

        }

        /// <summary>
        /// This class represents the specificVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the specificVolumeUom xsd enumeration.")]
        public enum SpecificVolumeUom 
        {
        /// <summary>
        /// m3kg property
        /// </summary>
          [XmlEnum("m3/kg")]
          m3kg,
        /// <summary>
        /// bbltonUK property
        /// </summary>
          [XmlEnum("bbl/tonUK")]
          bbltonUK,
        /// <summary>
        /// bbltonUS property
        /// </summary>
          [XmlEnum("bbl/tonUS")]
          bbltonUS,
        /// <summary>
        /// cm3g property
        /// </summary>
          [XmlEnum("cm3/g")]
          cm3g,
        /// <summary>
        /// dm3kg property
        /// </summary>
          [XmlEnum("dm3/kg")]
          dm3kg,
        /// <summary>
        /// dm3t property
        /// </summary>
          [XmlEnum("dm3/t")]
          dm3t,
        /// <summary>
        /// ft3kg property
        /// </summary>
          [XmlEnum("ft3/kg")]
          ft3kg,
        /// <summary>
        /// ft3lbm property
        /// </summary>
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        /// <summary>
        /// ft3sack94 property
        /// </summary>
          [XmlEnum("ft3/sack94")]
          ft3sack94,
        /// <summary>
        /// galUSsack94 property
        /// </summary>
          [XmlEnum("galUS/sack94")]
          galUSsack94,
        /// <summary>
        /// galUKlbm property
        /// </summary>
          [XmlEnum("galUK/lbm")]
          galUKlbm,
        /// <summary>
        /// galUSlbm property
        /// </summary>
          [XmlEnum("galUS/lbm")]
          galUSlbm,
        /// <summary>
        /// galUStonUK property
        /// </summary>
          [XmlEnum("galUS/tonUK")]
          galUStonUK,
        /// <summary>
        /// galUStonUS property
        /// </summary>
          [XmlEnum("galUS/tonUS")]
          galUStonUS,
        /// <summary>
        /// L100kg property
        /// </summary>
          [XmlEnum("L/100kg")]
          L100kg,
        /// <summary>
        /// Lkg property
        /// </summary>
          [XmlEnum("L/kg")]
          Lkg,
        /// <summary>
        /// Lt property
        /// </summary>
          [XmlEnum("L/t")]
          Lt,
        /// <summary>
        /// LtonUK property
        /// </summary>
          [XmlEnum("L/tonUK")]
          LtonUK,
        /// <summary>
        /// m3g property
        /// </summary>
          [XmlEnum("m3/g")]
          m3g,
        /// <summary>
        /// m3t property
        /// </summary>
          [XmlEnum("m3/t")]
          m3t,
        /// <summary>
        /// m3tonUK property
        /// </summary>
          [XmlEnum("m3/tonUK")]
          m3tonUK,
        /// <summary>
        /// m3tonUS property
        /// </summary>
          [XmlEnum("m3/tonUS")]
          m3tonUS

        }

        /// <summary>
        /// This class represents the relativePowerUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the relativePowerUom xsd enumeration.")]
        public enum RelativePowerUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Btubhphr property
        /// </summary>
          [XmlEnum("Btu/bhp.hr")]
          Btubhphr,
        /// <summary>
        /// WkW property
        /// </summary>
          [XmlEnum("W/kW")]
          WkW,
        /// <summary>
        /// WW property
        /// </summary>
          [XmlEnum("W/W")]
          WW

        }

        /// <summary>
        /// This class represents the pressureUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the pressureUom xsd enumeration.")]
        public enum PressureUom 
        {
        /// <summary>
        /// Pa property
        /// </summary>
          Pa,
        /// <summary>
        /// at property
        /// </summary>
          at,
        /// <summary>
        /// atm property
        /// </summary>
          atm,
        /// <summary>
        /// bar property
        /// </summary>
          bar,
        /// <summary>
        /// cmH2O4degC property
        /// </summary>
          [XmlEnum("cmH2O(4degC)")]
          cmH2O4degC,
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne/cm2")]
          dynecm2,
        /// <summary>
        /// GPa property
        /// </summary>
          GPa,
        /// <summary>
        /// hbar property
        /// </summary>
          hbar,
        /// <summary>
        /// inH2O392F property
        /// </summary>
          [XmlEnum("inH2O(39.2F)")]
          inH2O392F,
        /// <summary>
        /// inH2O60F property
        /// </summary>
          [XmlEnum("inH2O(60F)")]
          inH2O60F,
        /// <summary>
        /// inHg32F property
        /// </summary>
          [XmlEnum("inHg(32F)")]
          inHg32F,
        /// <summary>
        /// inHg60F property
        /// </summary>
          [XmlEnum("inHg(60F)")]
          inHg60F,
        /// <summary>
        /// kgfcm2 property
        /// </summary>
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        /// <summary>
        /// kgfmm2 property
        /// </summary>
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN/m2")]
          kNm2,
        /// <summary>
        /// kPa property
        /// </summary>
          kPa,
        /// <summary>
        /// kpsi property
        /// </summary>
          kpsi,
        /// <summary>
        /// lbfft2 property
        /// </summary>
          [XmlEnum("lbf/ft2")]
          lbfft2,
        /// <summary>
        /// lbf100ft2 property
        /// </summary>
          [XmlEnum("lbf/100ft2")]
          lbf100ft2,
        /// <summary>
        /// lbfin2 property
        /// </summary>
          [XmlEnum("lbf/in2")]
          lbfin2,
        /// <summary>
        /// mbar property
        /// </summary>
          mbar,
        /// <summary>
        /// mmHg0C property
        /// </summary>
          [XmlEnum("mmHg(0C)")]
          mmHg0C,
        /// <summary>
        /// mPa property
        /// </summary>
          mPa,
        /// <summary>
        /// MPa property
        /// </summary>
          MPa,
        /// <summary>
        /// Mpsi property
        /// </summary>
          Mpsi,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N/m2")]
          Nm2,
        /// <summary>
        /// Nmm2 property
        /// </summary>
          [XmlEnum("N/mm2")]
          Nmm2,
        /// <summary>
        /// Pag property
        /// </summary>
          [XmlEnum("Pa(g)")]
          Pag,
        /// <summary>
        /// pPa property
        /// </summary>
          pPa,
        /// <summary>
        /// psi property
        /// </summary>
          psi,
        /// <summary>
        /// psia property
        /// </summary>
          psia,
        /// <summary>
        /// psig property
        /// </summary>
          psig,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonfUS/ft2")]
          tonfUSft2,
        /// <summary>
        /// tonfUSin2 property
        /// </summary>
          [XmlEnum("tonfUS/in2")]
          tonfUSin2,
        /// <summary>
        /// torr property
        /// </summary>
          torr,
        /// <summary>
        /// ubar property
        /// </summary>
          ubar,
        /// <summary>
        /// umHg0C property
        /// </summary>
          [XmlEnum("umHg(0C)")]
          umHg0C,
        /// <summary>
        /// uPa property
        /// </summary>
          uPa,
        /// <summary>
        /// upsi property
        /// </summary>
          upsi

        }

        /// <summary>
        /// This class represents the powerUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the powerUom xsd enumeration.")]
        public enum PowerUom 
        {
        /// <summary>
        /// W property
        /// </summary>
          W,
        /// <summary>
        /// ch property
        /// </summary>
          ch,
        /// <summary>
        /// CV property
        /// </summary>
          CV,
        /// <summary>
        /// ehp property
        /// </summary>
          ehp,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// hhp property
        /// </summary>
          hhp,
        /// <summary>
        /// hp property
        /// </summary>
          hp,
        /// <summary>
        /// kcalh property
        /// </summary>
          [XmlEnum("kcal/h")]
          kcalh,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// MJa property
        /// </summary>
          [XmlEnum("MJ/a")]
          MJa,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// tonofrefrig property
        /// </summary>
          [XmlEnum("ton of refrig")]
          tonofrefrig,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// uW property
        /// </summary>
          uW

        }

        /// <summary>
        /// This class represents the perLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the perLengthUom xsd enumeration.")]
        public enum PerLengthUom 
        {
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// Item1angstrom property
        /// </summary>
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        /// <summary>
        /// Item1cm property
        /// </summary>
          [XmlEnum("1/cm")]
          Item1cm,
        /// <summary>
        /// Item1ft property
        /// </summary>
          [XmlEnum("1/ft")]
          Item1ft,
        /// <summary>
        /// Item1in property
        /// </summary>
          [XmlEnum("1/in")]
          Item1in,
        /// <summary>
        /// Item1mi property
        /// </summary>
          [XmlEnum("1/mi")]
          Item1mi,
        /// <summary>
        /// Item1mm property
        /// </summary>
          [XmlEnum("1/mm")]
          Item1mm,
        /// <summary>
        /// Item1nm property
        /// </summary>
          [XmlEnum("1/nm")]
          Item1nm,
        /// <summary>
        /// Item1yd property
        /// </summary>
          [XmlEnum("1/yd")]
          Item1yd

        }

        /// <summary>
        /// This class represents the momentOfForceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the momentOfForceUom xsd enumeration.")]
        public enum MomentOfForceUom 
        {
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// dNm property
        /// </summary>
          [XmlEnum("dN.m")]
          dNm,
        /// <summary>
        /// daNm property
        /// </summary>
          [XmlEnum("daN.m")]
          daNm,
        /// <summary>
        /// ftlbf property
        /// </summary>
          [XmlEnum("ft.lbf")]
          ftlbf,
        /// <summary>
        /// kftlbf property
        /// </summary>
          [XmlEnum("kft.lbf")]
          kftlbf,
        /// <summary>
        /// kgfm property
        /// </summary>
          [XmlEnum("kgf.m")]
          kgfm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN.m")]
          kNm,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf.ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf.in")]
          lbfin,
        /// <summary>
        /// lbmft2s2 property
        /// </summary>
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N.m")]
          Nm,
        /// <summary>
        /// pdlft property
        /// </summary>
          [XmlEnum("pdl.ft")]
          pdlft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonfUS.ft")]
          tonfUSft,
        /// <summary>
        /// tonfUSmi property
        /// </summary>
          [XmlEnum("tonfUS.mi")]
          tonfUSmi

        }

        /// <summary>
        /// This class represents the massPerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the massPerLengthUom xsd enumeration.")]
        public enum MassPerLengthUom 
        {
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg/m")]
          kgm,
        /// <summary>
        /// klbmin property
        /// </summary>
          [XmlEnum("klbm/in")]
          klbmin,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm/ft")]
          lbmft,
        /// <summary>
        /// Mgin property
        /// </summary>
          [XmlEnum("Mg/in")]
          Mgin,
        /// <summary>
        /// kgmcm2 property
        /// </summary>
          [XmlEnum("kg.m/cm2")]
          kgmcm2

        }

        /// <summary>
        /// This class represents the massUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the massUom xsd enumeration.")]
        public enum MassUom 
        {
        /// <summary>
        /// kg property
        /// </summary>
          kg,
        /// <summary>
        /// ag property
        /// </summary>
          ag,
        /// <summary>
        /// ct property
        /// </summary>
          ct,
        /// <summary>
        /// cwtUK property
        /// </summary>
          cwtUK,
        /// <summary>
        /// cwtUS property
        /// </summary>
          cwtUS,
        /// <summary>
        /// g property
        /// </summary>
          g,
        /// <summary>
        /// grain property
        /// </summary>
          grain,
        /// <summary>
        /// klbm property
        /// </summary>
          klbm,
        /// <summary>
        /// lbm property
        /// </summary>
          lbm,
        /// <summary>
        /// Mg property
        /// </summary>
          Mg,
        /// <summary>
        /// mg property
        /// </summary>
          mg,
        /// <summary>
        /// ozav property
        /// </summary>
          [XmlEnum("oz(av)")]
          ozav,
        /// <summary>
        /// oztroy property
        /// </summary>
          [XmlEnum("oz(troy)")]
          oztroy,
        /// <summary>
        /// ozm property
        /// </summary>
          ozm,
        /// <summary>
        /// sack94 property
        /// </summary>
          sack94,
        /// <summary>
        /// t property
        /// </summary>
          t,
        /// <summary>
        /// tonUK property
        /// </summary>
          tonUK,
        /// <summary>
        /// tonUS property
        /// </summary>
          tonUS,
        /// <summary>
        /// ug property
        /// </summary>
          ug

        }

        /// <summary>
        /// This class represents the massConcentrationUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the massConcentrationUom xsd enumeration.")]
        public enum MassConcentrationUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// gkg property
        /// </summary>
          [XmlEnum("g/kg")]
          gkg,
        /// <summary>
        /// kgkg property
        /// </summary>
          [XmlEnum("kg/kg")]
          kgkg,
        /// <summary>
        /// kgsack94 property
        /// </summary>
          [XmlEnum("kg/sack94")]
          kgsack94,
        /// <summary>
        /// mgkg property
        /// </summary>
          [XmlEnum("mg/kg")]
          mgkg,
        /// <summary>
        /// permil property
        /// </summary>
          permil,
        /// <summary>
        /// ppdk property
        /// </summary>
          ppdk,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm

        }

        /// <summary>
        /// This class represents the magneticInductionUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the magneticInductionUom xsd enumeration.")]
        public enum MagneticInductionUom 
        {
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// gauss property
        /// </summary>
          gauss,
        /// <summary>
        /// mT property
        /// </summary>
          mT,
        /// <summary>
        /// mgauss property
        /// </summary>
          mgauss,
        /// <summary>
        /// nT property
        /// </summary>
          nT,
        /// <summary>
        /// uT property
        /// </summary>
          uT

        }

        /// <summary>
        /// This class represents the magneticFieldStrengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the magneticFieldStrengthUom xsd enumeration.")]
        public enum MagneticFieldStrengthUom 
        {
        /// <summary>
        /// Am property
        /// </summary>
          [XmlEnum("A/m")]
          Am,
        /// <summary>
        /// Amm property
        /// </summary>
          [XmlEnum("A/mm")]
          Amm,
        /// <summary>
        /// gamma property
        /// </summary>
          gamma,
        /// <summary>
        /// Oe property
        /// </summary>
          Oe

        }

        /// <summary>
        /// This class represents the lengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the lengthPerLengthUom xsd enumeration.")]
        public enum LengthPerLengthUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// ft100ft property
        /// </summary>
          [XmlEnum("ft/100ft")]
          ft100ft,
        /// <summary>
        /// ftft property
        /// </summary>
          [XmlEnum("ft/ft")]
          ftft,
        /// <summary>
        /// ftin property
        /// </summary>
          [XmlEnum("ft/in")]
          ftin,
        /// <summary>
        /// ftm property
        /// </summary>
          [XmlEnum("ft/m")]
          ftm,
        /// <summary>
        /// ftmi property
        /// </summary>
          [XmlEnum("ft/mi")]
          ftmi,
        /// <summary>
        /// kmcm property
        /// </summary>
          [XmlEnum("km/cm")]
          kmcm,
        /// <summary>
        /// m30m property
        /// </summary>
          [XmlEnum("m/30m")]
          m30m,
        /// <summary>
        /// mcm property
        /// </summary>
          [XmlEnum("m/cm")]
          mcm,
        /// <summary>
        /// mkm property
        /// </summary>
          [XmlEnum("m/km")]
          mkm,
        /// <summary>
        /// mm property
        /// </summary>
          [XmlEnum("m/m")]
          mm,
        /// <summary>
        /// miin property
        /// </summary>
          [XmlEnum("mi/in")]
          miin

        }

        /// <summary>
        /// This class represents the lengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the lengthUom xsd enumeration.")]
        public enum LengthUom 
        {
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// angstrom property
        /// </summary>
          angstrom,
        /// <summary>
        /// chBnA property
        /// </summary>
          chBnA,
        /// <summary>
        /// chBnB property
        /// </summary>
          chBnB,
        /// <summary>
        /// chCla property
        /// </summary>
          chCla,
        /// <summary>
        /// chSe property
        /// </summary>
          chSe,
        /// <summary>
        /// chUS property
        /// </summary>
          chUS,
        /// <summary>
        /// cm property
        /// </summary>
          cm,
        /// <summary>
        /// dm property
        /// </summary>
          dm,
        /// <summary>
        /// fathom property
        /// </summary>
          fathom,
        /// <summary>
        /// fm property
        /// </summary>
          fm,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// ftBnA property
        /// </summary>
          ftBnA,
        /// <summary>
        /// ftBnB property
        /// </summary>
          ftBnB,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ftBr(65)")]
          ftBr65,
        /// <summary>
        /// ftCla property
        /// </summary>
          ftCla,
        /// <summary>
        /// ftGC property
        /// </summary>
          ftGC,
        /// <summary>
        /// ftInd property
        /// </summary>
          ftInd,
        /// <summary>
        /// ftInd37 property
        /// </summary>
          [XmlEnum("ftInd(37)")]
          ftInd37,
        /// <summary>
        /// ftInd62 property
        /// </summary>
          [XmlEnum("ftInd(62)")]
          ftInd62,
        /// <summary>
        /// ftInd75 property
        /// </summary>
          [XmlEnum("ftInd(75)")]
          ftInd75,
        /// <summary>
        /// ftMA property
        /// </summary>
          ftMA,
        /// <summary>
        /// ftSe property
        /// </summary>
          ftSe,
        /// <summary>
        /// ftUS property
        /// </summary>
          ftUS,
        /// <summary>
        /// in property
        /// </summary>
          @in,
        /// <summary>
        /// in10 property
        /// </summary>
          [XmlEnum("in/10")]
          in10,
        /// <summary>
        /// in16 property
        /// </summary>
          [XmlEnum("in/16")]
          in16,
        /// <summary>
        /// in32 property
        /// </summary>
          [XmlEnum("in/32")]
          in32,
        /// <summary>
        /// in64 property
        /// </summary>
          [XmlEnum("in/64")]
          in64,
        /// <summary>
        /// inUS property
        /// </summary>
          inUS,
        /// <summary>
        /// km property
        /// </summary>
          km,
        /// <summary>
        /// lkBnA property
        /// </summary>
          lkBnA,
        /// <summary>
        /// lkBnB property
        /// </summary>
          lkBnB,
        /// <summary>
        /// lkCla property
        /// </summary>
          lkCla,
        /// <summary>
        /// lkSe property
        /// </summary>
          lkSe,
        /// <summary>
        /// lkUS property
        /// </summary>
          lkUS,
        /// <summary>
        /// mGer property
        /// </summary>
          mGer,
        /// <summary>
        /// mi property
        /// </summary>
          mi,
        /// <summary>
        /// mil property
        /// </summary>
          mil,
        /// <summary>
        /// miUS property
        /// </summary>
          miUS,
        /// <summary>
        /// mm property
        /// </summary>
          mm,
        /// <summary>
        /// Mm property
        /// </summary>
          Mm,
        /// <summary>
        /// nautmi property
        /// </summary>
          nautmi,
        /// <summary>
        /// nm property
        /// </summary>
          nm,
        /// <summary>
        /// pm property
        /// </summary>
          pm,
        /// <summary>
        /// um property
        /// </summary>
          um,
        /// <summary>
        /// yd property
        /// </summary>
          yd,
        /// <summary>
        /// ydBnA property
        /// </summary>
          ydBnA,
        /// <summary>
        /// ydBnB property
        /// </summary>
          ydBnB,
        /// <summary>
        /// ydCla property
        /// </summary>
          ydCla,
        /// <summary>
        /// ydIm property
        /// </summary>
          ydIm,
        /// <summary>
        /// ydInd property
        /// </summary>
          ydInd,
        /// <summary>
        /// ydInd37 property
        /// </summary>
          [XmlEnum("ydInd(37)")]
          ydInd37,
        /// <summary>
        /// ydInd62 property
        /// </summary>
          [XmlEnum("ydInd(62)")]
          ydInd62,
        /// <summary>
        /// ydInd75 property
        /// </summary>
          [XmlEnum("ydInd(75)")]
          ydInd75,
        /// <summary>
        /// ydSe property
        /// </summary>
          ydSe

        }

        /// <summary>
        /// This class represents the illuminanceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the illuminanceUom xsd enumeration.")]
        public enum IlluminanceUom 
        {
        /// <summary>
        /// lx property
        /// </summary>
          lx,
        /// <summary>
        /// lmm2 property
        /// </summary>
          [XmlEnum("lm/m2")]
          lmm2,
        /// <summary>
        /// footcandle property
        /// </summary>
          footcandle,
        /// <summary>
        /// klx property
        /// </summary>
          klx

        }

        /// <summary>
        /// This class represents the frequencyUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the frequencyUom xsd enumeration.")]
        public enum FrequencyUom 
        {
        /// <summary>
        /// Hz property
        /// </summary>
          Hz,
        /// <summary>
        /// cs property
        /// </summary>
          [XmlEnum("c/s")]
          cs,
        /// <summary>
        /// GHz property
        /// </summary>
          GHz,
        /// <summary>
        /// kHz property
        /// </summary>
          kHz,
        /// <summary>
        /// mHz property
        /// </summary>
          mHz,
        /// <summary>
        /// MHz property
        /// </summary>
          MHz,
        /// <summary>
        /// uHz property
        /// </summary>
          uHz,
        /// <summary>
        /// Item1s property
        /// </summary>
          [XmlEnum("1/s")]
          Item1s,
        /// <summary>
        /// Item1a property
        /// </summary>
          [XmlEnum("1/a")]
          Item1a,
        /// <summary>
        /// Item1d property
        /// </summary>
          [XmlEnum("1/d")]
          Item1d,
        /// <summary>
        /// Item1h property
        /// </summary>
          [XmlEnum("1/h")]
          Item1h,
        /// <summary>
        /// Item1min property
        /// </summary>
          [XmlEnum("1/min")]
          Item1min,
        /// <summary>
        /// Item1wk property
        /// </summary>
          [XmlEnum("1/wk")]
          Item1wk,
        /// <summary>
        /// kEucs property
        /// </summary>
          [XmlEnum("kEuc/s")]
          kEucs

        }

        /// <summary>
        /// This class represents the forcePerVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the forcePerVolumeUom xsd enumeration.")]
        public enum ForcePerVolumeUom 
        {
        /// <summary>
        /// Nm3 property
        /// </summary>
          [XmlEnum("N/m3")]
          Nm3,
        /// <summary>
        /// atm100m property
        /// </summary>
          [XmlEnum("atm/100m")]
          atm100m,
        /// <summary>
        /// atmm property
        /// </summary>
          [XmlEnum("atm/m")]
          atmm,
        /// <summary>
        /// barkm property
        /// </summary>
          [XmlEnum("bar/km")]
          barkm,
        /// <summary>
        /// barm property
        /// </summary>
          [XmlEnum("bar/m")]
          barm,
        /// <summary>
        /// GPacm property
        /// </summary>
          [XmlEnum("GPa/cm")]
          GPacm,
        /// <summary>
        /// kPa100m property
        /// </summary>
          [XmlEnum("kPa/100m")]
          kPa100m,
        /// <summary>
        /// kPam property
        /// </summary>
          [XmlEnum("kPa/m")]
          kPam,
        /// <summary>
        /// lbfft3 property
        /// </summary>
          [XmlEnum("lbf/ft3")]
          lbfft3,
        /// <summary>
        /// lbfgalUS property
        /// </summary>
          [XmlEnum("lbf/galUS")]
          lbfgalUS,
        /// <summary>
        /// MPam property
        /// </summary>
          [XmlEnum("MPa/m")]
          MPam,
        /// <summary>
        /// psift property
        /// </summary>
          [XmlEnum("psi/ft")]
          psift,
        /// <summary>
        /// psi100ft property
        /// </summary>
          [XmlEnum("psi/100ft")]
          psi100ft,
        /// <summary>
        /// psikft property
        /// </summary>
          [XmlEnum("psi/kft")]
          psikft,
        /// <summary>
        /// psim property
        /// </summary>
          [XmlEnum("psi/m")]
          psim,
        /// <summary>
        /// Pam property
        /// </summary>
          [XmlEnum("Pa/m")]
          Pam,
        /// <summary>
        /// atmft property
        /// </summary>
          [XmlEnum("atm/ft")]
          atmft

        }

        /// <summary>
        /// This class represents the forcePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the forcePerLengthUom xsd enumeration.")]
        public enum ForcePerLengthUom 
        {
        /// <summary>
        /// N30m property
        /// </summary>
          [XmlEnum("N/30m")]
          N30m,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N/m")]
          Nm,
        /// <summary>
        /// dynecm property
        /// </summary>
          [XmlEnum("dyne/cm")]
          dynecm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN/m")]
          kNm,
        /// <summary>
        /// kgfcm property
        /// </summary>
          [XmlEnum("kgf/cm")]
          kgfcm,
        /// <summary>
        /// lbf100ft property
        /// </summary>
          [XmlEnum("lbf/100ft")]
          lbf100ft,
        /// <summary>
        /// lbf30m property
        /// </summary>
          [XmlEnum("lbf/30m")]
          lbf30m,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf/ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf/in")]
          lbfin,
        /// <summary>
        /// mNkm property
        /// </summary>
          [XmlEnum("mN/km")]
          mNkm,
        /// <summary>
        /// mNm property
        /// </summary>
          [XmlEnum("mN/m")]
          mNm,
        /// <summary>
        /// pdlcm property
        /// </summary>
          [XmlEnum("pdl/cm")]
          pdlcm,
        /// <summary>
        /// tonfUKft property
        /// </summary>
          [XmlEnum("tonfUK/ft")]
          tonfUKft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonfUS/ft")]
          tonfUSft

        }

        /// <summary>
        /// This class represents the forceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the forceUom xsd enumeration.")]
        public enum ForceUom 
        {
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// daN property
        /// </summary>
          daN,
        /// <summary>
        /// dyne property
        /// </summary>
          dyne,
        /// <summary>
        /// gf property
        /// </summary>
          gf,
        /// <summary>
        /// kdyne property
        /// </summary>
          kdyne,
        /// <summary>
        /// kgf property
        /// </summary>
          kgf,
        /// <summary>
        /// klbf property
        /// </summary>
          klbf,
        /// <summary>
        /// kN property
        /// </summary>
          kN,
        /// <summary>
        /// lbf property
        /// </summary>
          lbf,
        /// <summary>
        /// Mgf property
        /// </summary>
          Mgf,
        /// <summary>
        /// mN property
        /// </summary>
          mN,
        /// <summary>
        /// MN property
        /// </summary>
          MN,
        /// <summary>
        /// ozf property
        /// </summary>
          ozf,
        /// <summary>
        /// pdl property
        /// </summary>
          pdl,
        /// <summary>
        /// tonfUK property
        /// </summary>
          tonfUK,
        /// <summary>
        /// tonfUS property
        /// </summary>
          tonfUS,
        /// <summary>
        /// uN property
        /// </summary>
          uN

        }

        /// <summary>
        /// This class represents the equivalentPerMassUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the equivalentPerMassUom xsd enumeration.")]
        public enum EquivalentPerMassUom 
        {
        /// <summary>
        /// eqkg property
        /// </summary>
          [XmlEnum("eq/kg")]
          eqkg,
        /// <summary>
        /// meqg property
        /// </summary>
          [XmlEnum("meq/g")]
          meqg,
        /// <summary>
        /// meq100g property
        /// </summary>
          [XmlEnum("meq/100g")]
          meq100g

        }

        /// <summary>
        /// This class represents the energyPerAreaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the energyPerAreaUom xsd enumeration.")]
        public enum EnergyPerAreaUom 
        {
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N/m")]
          Nm,
        /// <summary>
        /// ergcm2 property
        /// </summary>
          [XmlEnum("erg/cm2")]
          ergcm2,
        /// <summary>
        /// Jcm2 property
        /// </summary>
          [XmlEnum("J/cm2")]
          Jcm2,
        /// <summary>
        /// Jm2 property
        /// </summary>
          [XmlEnum("J/m2")]
          Jm2,
        /// <summary>
        /// kgfmcm2 property
        /// </summary>
          [XmlEnum("kgf.m/cm2")]
          kgfmcm2,
        /// <summary>
        /// lbfftin2 property
        /// </summary>
          [XmlEnum("lbf.ft/in2")]
          lbfftin2,
        /// <summary>
        /// mJcm2 property
        /// </summary>
          [XmlEnum("mJ/cm2")]
          mJcm2,
        /// <summary>
        /// mJm2 property
        /// </summary>
          [XmlEnum("mJ/m2")]
          mJm2

        }

        /// <summary>
        /// This class represents the electricPotentialUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the electricPotentialUom xsd enumeration.")]
        public enum ElectricPotentialUom 
        {
        /// <summary>
        /// V property
        /// </summary>
          V,
        /// <summary>
        /// kV property
        /// </summary>
          kV,
        /// <summary>
        /// mV property
        /// </summary>
          mV,
        /// <summary>
        /// MV property
        /// </summary>
          MV,
        /// <summary>
        /// uV property
        /// </summary>
          uV

        }

        /// <summary>
        /// This class represents the electricCurrentUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the electricCurrentUom xsd enumeration.")]
        public enum ElectricCurrentUom 
        {
        /// <summary>
        /// A property
        /// </summary>
          A,
        /// <summary>
        /// MA property
        /// </summary>
          MA,
        /// <summary>
        /// kA property
        /// </summary>
          kA,
        /// <summary>
        /// mA property
        /// </summary>
          mA,
        /// <summary>
        /// nA property
        /// </summary>
          nA,
        /// <summary>
        /// pA property
        /// </summary>
          pA,
        /// <summary>
        /// uA property
        /// </summary>
          uA

        }

        /// <summary>
        /// This class represents the dynamicViscosityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the dynamicViscosityUom xsd enumeration.")]
        public enum DynamicViscosityUom 
        {
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas,
        /// <summary>
        /// cP property
        /// </summary>
          cP,
        /// <summary>
        /// P property
        /// </summary>
          P,
        /// <summary>
        /// psis property
        /// </summary>
          [XmlEnum("psi.s")]
          psis,
        /// <summary>
        /// dynescm2 property
        /// </summary>
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        /// <summary>
        /// kgfsm2 property
        /// </summary>
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        /// <summary>
        /// lbfsft2 property
        /// </summary>
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        /// <summary>
        /// lbfsin2 property
        /// </summary>
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        /// <summary>
        /// mPas property
        /// </summary>
          [XmlEnum("mPa.s")]
          mPas,
        /// <summary>
        /// Nsm2 property
        /// </summary>
          [XmlEnum("N.s/m2")]
          Nsm2

        }

        /// <summary>
        /// This class represents the dimensionlessUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the dimensionlessUom xsd enumeration.")]
        public enum DimensionlessUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// mEuc property
        /// </summary>
          mEuc,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// uEuc property
        /// </summary>
          uEuc

        }

        /// <summary>
        /// This class represents the densityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the densityUom xsd enumeration.")]
        public enum DensityUom 
        {
        /// <summary>
        /// kgm3 property
        /// </summary>
          [XmlEnum("kg/m3")]
          kgm3,
        /// <summary>
        /// Item10Mgm3 property
        /// </summary>
          [XmlEnum("10Mg/m3")]
          Item10Mgm3,
        /// <summary>
        /// dAPI property
        /// </summary>
          dAPI,
        /// <summary>
        /// gcm3 property
        /// </summary>
          [XmlEnum("g/cm3")]
          gcm3,
        /// <summary>
        /// gdm3 property
        /// </summary>
          [XmlEnum("g/dm3")]
          gdm3,
        /// <summary>
        /// ggalUK property
        /// </summary>
          [XmlEnum("g/galUK")]
          ggalUK,
        /// <summary>
        /// ggalUS property
        /// </summary>
          [XmlEnum("g/galUS")]
          ggalUS,
        /// <summary>
        /// gL property
        /// </summary>
          [XmlEnum("g/L")]
          gL,
        /// <summary>
        /// gm3 property
        /// </summary>
          [XmlEnum("g/m3")]
          gm3,
        /// <summary>
        /// grainft3 property
        /// </summary>
          [XmlEnum("grain/ft3")]
          grainft3,
        /// <summary>
        /// graingalUS property
        /// </summary>
          [XmlEnum("grain/galUS")]
          graingalUS,
        /// <summary>
        /// grain100ft3 property
        /// </summary>
          [XmlEnum("grain/100ft3")]
          grain100ft3,
        /// <summary>
        /// kgdm3 property
        /// </summary>
          [XmlEnum("kg/dm3")]
          kgdm3,
        /// <summary>
        /// kgL property
        /// </summary>
          [XmlEnum("kg/L")]
          kgL,
        /// <summary>
        /// Mgm3 property
        /// </summary>
          [XmlEnum("Mg/m3")]
          Mgm3,
        /// <summary>
        /// lbm10bbl property
        /// </summary>
          [XmlEnum("lbm/10bbl")]
          lbm10bbl,
        /// <summary>
        /// lbmbbl property
        /// </summary>
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        /// <summary>
        /// lbmft3 property
        /// </summary>
          [XmlEnum("lbm/ft3")]
          lbmft3,
        /// <summary>
        /// lbmgalUK property
        /// </summary>
          [XmlEnum("lbm/galUK")]
          lbmgalUK,
        /// <summary>
        /// lbm1000galUK property
        /// </summary>
          [XmlEnum("lbm/1000galUK")]
          lbm1000galUK,
        /// <summary>
        /// lbmgalUS property
        /// </summary>
          [XmlEnum("lbm/galUS")]
          lbmgalUS,
        /// <summary>
        /// lbm1000galUS property
        /// </summary>
          [XmlEnum("lbm/1000galUS")]
          lbm1000galUS,
        /// <summary>
        /// lbmin3 property
        /// </summary>
          [XmlEnum("lbm/in3")]
          lbmin3,
        /// <summary>
        /// lbmMbbl property
        /// </summary>
          [XmlEnum("lbm/Mbbl")]
          lbmMbbl,
        /// <summary>
        /// mgdm3 property
        /// </summary>
          [XmlEnum("mg/dm3")]
          mgdm3,
        /// <summary>
        /// mggalUS property
        /// </summary>
          [XmlEnum("mg/galUS")]
          mggalUS,
        /// <summary>
        /// mgL property
        /// </summary>
          [XmlEnum("mg/L")]
          mgL,
        /// <summary>
        /// mgm3 property
        /// </summary>
          [XmlEnum("mg/m3")]
          mgm3,
        /// <summary>
        /// ugcm3 property
        /// </summary>
          [XmlEnum("ug/cm3")]
          ugcm3

        }

        /// <summary>
        /// This class represents the areaPerAreaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the areaPerAreaUom xsd enumeration.")]
        public enum AreaPerAreaUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// in2ft2 property
        /// </summary>
          [XmlEnum("in2/ft2")]
          in2ft2,
        /// <summary>
        /// in2in2 property
        /// </summary>
          [XmlEnum("in2/in2")]
          in2in2,
        /// <summary>
        /// m2m2 property
        /// </summary>
          [XmlEnum("m2/m2")]
          m2m2,
        /// <summary>
        /// mm2mm2 property
        /// </summary>
          [XmlEnum("mm2/mm2")]
          mm2mm2

        }

        /// <summary>
        /// This class represents the areaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the areaUom xsd enumeration.")]
        public enum AreaUom 
        {
        /// <summary>
        /// m2 property
        /// </summary>
          m2,
        /// <summary>
        /// acre property
        /// </summary>
          acre,
        /// <summary>
        /// b property
        /// </summary>
          b,
        /// <summary>
        /// cm2 property
        /// </summary>
          cm2,
        /// <summary>
        /// ft2 property
        /// </summary>
          ft2,
        /// <summary>
        /// ha property
        /// </summary>
          ha,
        /// <summary>
        /// in2 property
        /// </summary>
          in2,
        /// <summary>
        /// km2 property
        /// </summary>
          km2,
        /// <summary>
        /// mi2 property
        /// </summary>
          mi2,
        /// <summary>
        /// miUS2 property
        /// </summary>
          miUS2,
        /// <summary>
        /// mm2 property
        /// </summary>
          mm2,
        /// <summary>
        /// um2 property
        /// </summary>
          um2,
        /// <summary>
        /// yd2 property
        /// </summary>
          yd2

        }

        /// <summary>
        /// This class represents the anglePerTimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the anglePerTimeUom xsd enumeration.")]
        public enum AnglePerTimeUom 
        {
        /// <summary>
        /// rads property
        /// </summary>
          [XmlEnum("rad/s")]
          rads,
        /// <summary>
        /// cs property
        /// </summary>
          [XmlEnum("c/s")]
          cs,
        /// <summary>
        /// degah property
        /// </summary>
          [XmlEnum("dega/h")]
          degah,
        /// <summary>
        /// degamin property
        /// </summary>
          [XmlEnum("dega/min")]
          degamin,
        /// <summary>
        /// degas property
        /// </summary>
          [XmlEnum("dega/s")]
          degas,
        /// <summary>
        /// revs property
        /// </summary>
          [XmlEnum("rev/s")]
          revs,
        /// <summary>
        /// rpm property
        /// </summary>
          rpm

        }

        /// <summary>
        /// This class represents the accelerationLinearUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the accelerationLinearUom xsd enumeration.")]
        public enum AccelerationLinearUom 
        {
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("m/s2")]
          ms2,
        /// <summary>
        /// cms2 property
        /// </summary>
          [XmlEnum("cm/s2")]
          cms2,
        /// <summary>
        /// fts2 property
        /// </summary>
          [XmlEnum("ft/s2")]
          fts2,
        /// <summary>
        /// Gal property
        /// </summary>
          Gal,
        /// <summary>
        /// mgn property
        /// </summary>
          mgn,
        /// <summary>
        /// gn property
        /// </summary>
          gn,
        /// <summary>
        /// mGal property
        /// </summary>
          mGal

        }

        /// <summary>
        /// This class represents the BhaStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BhaStatus xsd enumeration.")]
        public enum BhaStatus 
        {
        /// <summary>
        /// 
        /// </summary>
          final,
        /// <summary>
        /// 
        /// </summary>
          progress,
        /// <summary>
        /// 
        /// </summary>
          plan,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ItemState xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ItemState xsd enumeration.")]
        public enum ItemState 
        {
        /// <summary>
        /// Actual data measured or entered at the well site.
        /// </summary>
          actual,
        /// <summary>
        /// Model data used for "what if" calculations.
        /// </summary>
          model,
        /// <summary>
        /// A planned object. That is, one which is expected to be executed in the future.
        /// </summary>
          plan,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the CementJobType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the CementJobType xsd enumeration.")]
        public enum CementJobType 
        {
        /// <summary>
        /// 
        /// </summary>
          primary,
        /// <summary>
        /// 
        /// </summary>
          plug,
        /// <summary>
        /// 
        /// </summary>
          squeeze,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the HoleCasingType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the HoleCasingType xsd enumeration.")]
        public enum HoleCasingType 
        {
        /// <summary>
        /// blowoutpreventer property
        /// </summary>
          [XmlEnum("blow out preventer")]
          blowoutpreventer,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// 
        /// </summary>
          conductor,
        /// <summary>
        /// curvedconductor property
        /// </summary>
          [XmlEnum("curved conductor")]
          curvedconductor,
        /// <summary>
        /// 
        /// </summary>
          liner,
        /// <summary>
        /// openhole property
        /// </summary>
          [XmlEnum("open hole")]
          openhole,
        /// <summary>
        /// 
        /// </summary>
          riser,
        /// <summary>
        /// 
        /// </summary>
          tubing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the LithologySource xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LithologySource xsd enumeration.")]
        public enum LithologySource 
        {
        /// <summary>
        /// The lithology has one overall interpretation based on several sources such as logs and cuttings or cores.
        /// </summary>
          interpreted,
        /// <summary>
        /// The lithology as based on a visual inspection of the core. A percentage is commonly assigned to each portion of the lithology.
        /// </summary>
          core,
        /// <summary>
        /// The lithology as based on a visual inspection of the cuttings. A percentage is commonly assigned to each portion of the lithology.
        /// </summary>
          cuttings,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ShowRating xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ShowRating xsd enumeration.")]
        public enum ShowRating 
        {
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// verypoor property
        /// </summary>
          [XmlEnum("very poor")]
          verypoor,
        /// <summary>
        /// 
        /// </summary>
          poor,
        /// <summary>
        /// 
        /// </summary>
          fair,
        /// <summary>
        /// 
        /// </summary>
          good,
        /// <summary>
        /// verygood property
        /// </summary>
          [XmlEnum("very good")]
          verygood,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ShowFluorescence xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ShowFluorescence xsd enumeration.")]
        public enum ShowFluorescence 
        {
        /// <summary>
        /// 
        /// </summary>
          faint,
        /// <summary>
        /// 
        /// </summary>
          bright,
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ShowSpeed xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ShowSpeed xsd enumeration.")]
        public enum ShowSpeed 
        {
        /// <summary>
        /// 
        /// </summary>
          slow,
        /// <summary>
        /// moderatelyfast property
        /// </summary>
          [XmlEnum("moderately fast")]
          moderatelyfast,
        /// <summary>
        /// 
        /// </summary>
          fast,
        /// <summary>
        /// 
        /// </summary>
          instantaneous,
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ShowLevel xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ShowLevel xsd enumeration.")]
        public enum ShowLevel 
        {
        /// <summary>
        /// 
        /// </summary>
          blooming,
        /// <summary>
        /// 
        /// </summary>
          streaming,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the GasPeakType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the GasPeakType xsd enumeration.")]
        public enum GasPeakType 
        {
        /// <summary>
        /// circulatingbackgroundgas property
        /// </summary>
          [XmlEnum("circulating background gas")]
          circulatingbackgroundgas,
        /// <summary>
        /// connectiongas property
        /// </summary>
          [XmlEnum("connection gas")]
          connectiongas,
        /// <summary>
        /// drillingbackgroundgas property
        /// </summary>
          [XmlEnum("drilling background gas")]
          drillingbackgroundgas,
        /// <summary>
        /// drillinggaspeak property
        /// </summary>
          [XmlEnum("drilling gas peak")]
          drillinggaspeak,
        /// <summary>
        /// flowcheckgas property
        /// </summary>
          [XmlEnum("flow check gas")]
          flowcheckgas,
        /// <summary>
        /// noreadings property
        /// </summary>
          [XmlEnum("no readings")]
          noreadings,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// shutdowngas property
        /// </summary>
          [XmlEnum("shut down gas")]
          shutdowngas,
        /// <summary>
        /// tripgas property
        /// </summary>
          [XmlEnum("trip gas")]
          tripgas,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the FiberMode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the FiberMode xsd enumeration.")]
        public enum FiberMode 
        {
        /// <summary>
        /// A single, narrow, core of constant refractive index, surrounded by glass cladding. The core diameter is comparable to a wave length of the light (about 5 um).
        /// </summary>
          singlemode,
        /// <summary>
        /// The core has a graded refractive index. The core is generally about 50um in diameter.
        /// </summary>
          multimode,
        /// <summary>
        /// The fiber mode is neither singlemode or multimode.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the InstalledFiberPoint xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the InstalledFiberPoint xsd enumeration.")]
        public enum InstalledFiberPoint 
        {
        /// <summary>
        /// A point at which a fiber is physically, and semi-permanently, connected to another length of fiber.
        /// </summary>
          splice,
        /// <summary>
        /// A point at which a cable connector is installed, which allows the fiber to be connected to another instrument or fiber length.
        /// </summary>
          connector,
        /// <summary>
        /// endoffiber property
        /// </summary>
          [XmlEnum("end of fiber")]
          endoffiber,
        /// <summary>
        /// baseoffiber property
        /// </summary>
          [XmlEnum("base of fiber")]
          baseoffiber,
        /// <summary>
        /// turnaroundpoint property
        /// </summary>
          [XmlEnum("turn around point")]
          turnaroundpoint,
        /// <summary>
        /// startoffiber property
        /// </summary>
          [XmlEnum("start of fiber")]
          startoffiber,
        /// <summary>
        /// ovenentrypoint property
        /// </summary>
          [XmlEnum("oven entry point")]
          ovenentrypoint,
        /// <summary>
        /// ovenexitpoint property
        /// </summary>
          [XmlEnum("oven exit point")]
          ovenexitpoint,
        /// <summary>
        /// downholegauge property
        /// </summary>
          [XmlEnum("downhole gauge")]
          downholegauge,
        /// <summary>
        /// DTSlaserhead property
        /// </summary>
          [XmlEnum("DTS laser head")]
          DTSlaserhead,
        /// <summary>
        /// DTSreferenceoven property
        /// </summary>
          [XmlEnum("DTS reference oven")]
          DTSreferenceoven,
        /// <summary>
        /// splicebox property
        /// </summary>
          [XmlEnum("splice box")]
          splicebox,
        /// <summary>
        /// wellheadjunctionbox property
        /// </summary>
          [XmlEnum("wellhead junction box")]
          wellheadjunctionbox,
        /// <summary>
        /// basetubinghangerflange property
        /// </summary>
          [XmlEnum("base tubing hanger flange")]
          basetubinghangerflange,
        /// <summary>
        /// PBRwetconnect property
        /// </summary>
          [XmlEnum("PBR wet connect")]
          PBRwetconnect,
        /// <summary>
        /// topESPpump property
        /// </summary>
          [XmlEnum("top ESP pump")]
          topESPpump,
        /// <summary>
        /// baseESPpump property
        /// </summary>
          [XmlEnum("base ESP pump")]
          baseESPpump,
        /// <summary>
        /// wellheadtemperaturegauge property
        /// </summary>
          [XmlEnum("wellhead temperature gauge")]
          wellheadtemperaturegauge,
        /// <summary>
        /// topcompletionzone property
        /// </summary>
          [XmlEnum("top completion zone")]
          topcompletionzone,
        /// <summary>
        /// basecompletionzone property
        /// </summary>
          [XmlEnum("base completion zone")]
          basecompletionzone,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the OTDRReason xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the OTDRReason xsd enumeration.")]
        public enum OTDRReason 
        {
        /// <summary>
        /// preinstallation property
        /// </summary>
          [XmlEnum("pre-installation")]
          preinstallation,
        /// <summary>
        /// postinstallation property
        /// </summary>
          [XmlEnum("post-installation")]
          postinstallation,
        /// <summary>
        /// DTSrun property
        /// </summary>
          [XmlEnum("DTS run")]
          DTSrun,
        /// <summary>
        /// The OTDR was run for another reason.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the LogIndexType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LogIndexType xsd enumeration.")]
        public enum LogIndexType 
        {
        /// <summary>
        /// datetime property
        /// </summary>
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// elapsedtime property
        /// </summary>
          [XmlEnum("elapsed time")]
          elapsedtime,
        /// <summary>
        /// Log is indexed on length (not a depth).
        /// </summary>
          length,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// verticaldepth property
        /// </summary>
          [XmlEnum("vertical depth")]
          verticaldepth,
        /// <summary>
        /// Any other index type for a log.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the LogIndexDirection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LogIndexDirection xsd enumeration.")]
        public enum LogIndexDirection 
        {
        /// <summary>
        /// Log items are in order of decreasing index values (e.g. wireline log logging while pulling out of hole)
        /// </summary>
          decreasing,
        /// <summary>
        /// Log items are in order of increasing index values (e.g. increasing depths or times)
        /// </summary>
          increasing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the LogTraceState xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LogTraceState xsd enumeration.")]
        public enum LogTraceState 
        {
        /// <summary>
        /// depthadjusted property
        /// </summary>
          [XmlEnum("depth adjusted")]
          depthadjusted,
        /// <summary>
        /// 
        /// </summary>
          edited,
        /// <summary>
        /// 
        /// </summary>
          joined,
        /// <summary>
        /// 
        /// </summary>
          processed,
        /// <summary>
        /// 
        /// </summary>
          raw,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the LogTraceOrigin xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LogTraceOrigin xsd enumeration.")]
        public enum LogTraceOrigin 
        {
        /// <summary>
        /// The data were read from a realtime sensor stream.
        /// </summary>
          realtime,
        /// <summary>
        /// The data are synthetic.
        /// </summary>
          modeled,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the LogDataType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the LogDataType xsd enumeration.")]
        public enum LogDataType 
        {
        /// <summary>
        /// datetime property
        /// </summary>
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// Double precision floating point value.
        /// </summary>
          @double,
        /// <summary>
        /// Long integer data value.
        /// </summary>
          @long,
        /// <summary>
        /// Character string data.
        /// </summary>
          @string,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the MessageType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MessageType xsd enumeration.")]
        public enum MessageType 
        {
        /// <summary>
        /// An alarm condition when something has exceeded specified limits
        /// </summary>
          alarm,
        /// <summary>
        /// Information about a specific event
        /// </summary>
          @event,
        /// <summary>
        /// General information message
        /// </summary>
          informational,
        /// <summary>
        /// A cautionary message
        /// </summary>
          warning,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the MessageSeverity xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MessageSeverity xsd enumeration.")]
        public enum MessageSeverity 
        {
        /// <summary>
        /// 
        /// </summary>
          catastrophic,
        /// <summary>
        /// 
        /// </summary>
          major,
        /// <summary>
        /// 
        /// </summary>
          minor,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the MessageProbability xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MessageProbability xsd enumeration.")]
        public enum MessageProbability 
        {
        /// <summary>
        /// 
        /// </summary>
          low,
        /// <summary>
        /// 
        /// </summary>
          medium,
        /// <summary>
        /// 
        /// </summary>
          high,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the MudLogParameterType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MudLogParameterType xsd enumeration.")]
        public enum MudLogParameterType 
        {
        /// <summary>
        /// bitparameters property
        /// </summary>
          [XmlEnum("bit parameters")]
          bitparameters,
        /// <summary>
        /// bittypecomment property
        /// </summary>
          [XmlEnum("bit type comment")]
          bittypecomment,
        /// <summary>
        /// casingpointcomment property
        /// </summary>
          [XmlEnum("casing point comment")]
          casingpointcomment,
        /// <summary>
        /// chromatographcomment property
        /// </summary>
          [XmlEnum("chromatograph comment")]
          chromatographcomment,
        /// <summary>
        /// circulationsystemcomment property
        /// </summary>
          [XmlEnum("circulation system comment")]
          circulationsystemcomment,
        /// <summary>
        /// coreintervalcomment property
        /// </summary>
          [XmlEnum("core interval comment")]
          coreintervalcomment,
        /// <summary>
        /// cuttingsgas property
        /// </summary>
          [XmlEnum("cuttings gas")]
          cuttingsgas,
        /// <summary>
        /// directfracturepressure property
        /// </summary>
          [XmlEnum("direct fracture pressure")]
          directfracturepressure,
        /// <summary>
        /// directporepressuremeasurements property
        /// </summary>
          [XmlEnum("direct pore pressure measurements")]
          directporepressuremeasurements,
        /// <summary>
        /// drillingdatacomment property
        /// </summary>
          [XmlEnum("drilling data comment")]
          drillingdatacomment,
        /// <summary>
        /// fracturePGestimatemostlikely property
        /// </summary>
          [XmlEnum("fracture PG estimate most likely")]
          fracturePGestimatemostlikely,
        /// <summary>
        /// gaspeakscomment property
        /// </summary>
          [XmlEnum("gas peaks comment")]
          gaspeakscomment,
        /// <summary>
        /// gasratiocomment property
        /// </summary>
          [XmlEnum("gas ratio comment")]
          gasratiocomment,
        /// <summary>
        /// generalengineeringcomment property
        /// </summary>
          [XmlEnum("general engineering comment")]
          generalengineeringcomment,
        /// <summary>
        /// kicksandflows property
        /// </summary>
          [XmlEnum("kicks and flows")]
          kicksandflows,
        /// <summary>
        /// lithlogcomment property
        /// </summary>
          [XmlEnum("lithlog comment")]
          lithlogcomment,
        /// <summary>
        /// lostreturns property
        /// </summary>
          [XmlEnum("lost returns")]
          lostreturns,
        /// <summary>
        /// LWDcomment property
        /// </summary>
          [XmlEnum("LWD comment")]
          LWDcomment,
        /// <summary>
        /// markerorformationtopcomment property
        /// </summary>
          [XmlEnum("marker or formation top comment")]
          markerorformationtopcomment,
        /// <summary>
        /// midnightdepthdate property
        /// </summary>
          [XmlEnum("midnight depth date")]
          midnightdepthdate,
        /// <summary>
        /// mudcheckcomment property
        /// </summary>
          [XmlEnum("mud check comment")]
          mudcheckcomment,
        /// <summary>
        /// muddatacomment property
        /// </summary>
          [XmlEnum("mud data comment")]
          muddatacomment,
        /// <summary>
        /// mudlogcomment property
        /// </summary>
          [XmlEnum("mudlog comment")]
          mudlogcomment,
        /// <summary>
        /// overburdengradient property
        /// </summary>
          [XmlEnum("overburden gradient")]
          overburdengradient,
        /// <summary>
        /// overpullonconnection property
        /// </summary>
          [XmlEnum("overpull on connection")]
          overpullonconnection,
        /// <summary>
        /// overpullontrip property
        /// </summary>
          [XmlEnum("overpull on trip")]
          overpullontrip,
        /// <summary>
        /// porePGestimatemostlikely property
        /// </summary>
          [XmlEnum("pore PG estimate most likely")]
          porePGestimatemostlikely,
        /// <summary>
        /// porepressureestimatewhiledrilling property
        /// </summary>
          [XmlEnum("pore pressure estimate while drilling")]
          porepressureestimatewhiledrilling,
        /// <summary>
        /// pressuredatacomment property
        /// </summary>
          [XmlEnum("pressure data comment")]
          pressuredatacomment,
        /// <summary>
        /// shaledensitycomment property
        /// </summary>
          [XmlEnum("shale density comment")]
          shaledensitycomment,
        /// <summary>
        /// shorttripcomment property
        /// </summary>
          [XmlEnum("short trip comment")]
          shorttripcomment,
        /// <summary>
        /// showreportcomment property
        /// </summary>
          [XmlEnum("show report comment")]
          showreportcomment,
        /// <summary>
        /// sidewallcorecomment property
        /// </summary>
          [XmlEnum("sidewall core comment")]
          sidewallcorecomment,
        /// <summary>
        /// slidingInterval property
        /// </summary>
          [XmlEnum("sliding Interval")]
          slidingInterval,
        /// <summary>
        /// steamstillresultscomment property
        /// </summary>
          [XmlEnum("steam still results comment")]
          steamstillresultscomment,
        /// <summary>
        /// surveycomment property
        /// </summary>
          [XmlEnum("survey comment")]
          surveycomment,
        /// <summary>
        /// temperaturedatacomment property
        /// </summary>
          [XmlEnum("temperature data comment")]
          temperaturedatacomment,
        /// <summary>
        /// temperaturetrendcomment property
        /// </summary>
          [XmlEnum("temperature trend comment")]
          temperaturetrendcomment,
        /// <summary>
        /// wirelinelogcomment property
        /// </summary>
          [XmlEnum("wireline log comment")]
          wirelinelogcomment,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ActivityClassType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ActivityClassType xsd enumeration.")]
        public enum ActivityClassType 
        {
        /// <summary>
        /// 
        /// </summary>
          planned,
        /// <summary>
        /// 
        /// </summary>
          unplanned,
        /// <summary>
        /// 
        /// </summary>
          downtime,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the TrajStationType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TrajStationType xsd enumeration.")]
        public enum TrajStationType 
        {
        /// <summary>
        /// azimuthonplane property
        /// </summary>
          [XmlEnum("azimuth on plane")]
          azimuthonplane,
        /// <summary>
        /// buildratetodeltaMD property
        /// </summary>
          [XmlEnum("buildrate to delta-MD")]
          buildratetodeltaMD,
        /// <summary>
        /// buildratetoINCL property
        /// </summary>
          [XmlEnum("buildrate to INCL")]
          buildratetoINCL,
        /// <summary>
        /// buildratetoMD property
        /// </summary>
          [XmlEnum("buildrate to MD")]
          buildratetoMD,
        /// <summary>
        /// buildrateandturnratetoAZI property
        /// </summary>
          [XmlEnum("buildrate and turnrate to AZI")]
          buildrateandturnratetoAZI,
        /// <summary>
        /// buildrateandturnratetodeltaMD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to delta-MD")]
          buildrateandturnratetodeltaMD,
        /// <summary>
        /// buildrateandturnratetoINCL property
        /// </summary>
          [XmlEnum("buildrate and turnrate to INCL")]
          buildrateandturnratetoINCL,
        /// <summary>
        /// buildrateandturnratetoINCLandAZI property
        /// </summary>
          [XmlEnum("buildrate and turnrate to INCL and AZI")]
          buildrateandturnratetoINCLandAZI,
        /// <summary>
        /// buildrateandturnratetoMD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to MD")]
          buildrateandturnratetoMD,
        /// <summary>
        /// buildrateandturnratetoTVD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to TVD")]
          buildrateandturnratetoTVD,
        /// <summary>
        /// buildrateTVD property
        /// </summary>
          [XmlEnum("buildrate TVD")]
          buildrateTVD,
        /// <summary>
        /// casingMD property
        /// </summary>
          [XmlEnum("casing MD")]
          casingMD,
        /// <summary>
        /// casingTVD property
        /// </summary>
          [XmlEnum("casing TVD")]
          casingTVD,
        /// <summary>
        /// Section follows a given dogleg severity 
        /// </summary>
          DLS,
        /// <summary>
        /// DLStoAZIandMD property
        /// </summary>
          [XmlEnum("DLS to AZI and MD")]
          DLStoAZIandMD,
        /// <summary>
        /// DLStoAZITVD property
        /// </summary>
          [XmlEnum("DLS to AZI-TVD")]
          DLStoAZITVD,
        /// <summary>
        /// DLStoINCL property
        /// </summary>
          [XmlEnum("DLS to INCL")]
          DLStoINCL,
        /// <summary>
        /// DLStoINCLandAZI property
        /// </summary>
          [XmlEnum("DLS to INCL and AZI")]
          DLStoINCLandAZI,
        /// <summary>
        /// DLStoINCLandMD property
        /// </summary>
          [XmlEnum("DLS to INCL and MD")]
          DLStoINCLandMD,
        /// <summary>
        /// DLStoINCLandTVD property
        /// </summary>
          [XmlEnum("DLS to INCL and TVD")]
          DLStoINCLandTVD,
        /// <summary>
        /// DLStoNSEWandTVD property
        /// </summary>
          [XmlEnum("DLS to NS, EW and TVD")]
          DLStoNSEWandTVD,
        /// <summary>
        /// DLSandtoolfacetoAZI property
        /// </summary>
          [XmlEnum("DLS and toolface to AZI")]
          DLSandtoolfacetoAZI,
        /// <summary>
        /// DLSandtoolfacetodeltaMD property
        /// </summary>
          [XmlEnum("DLS and toolface to delta-MD")]
          DLSandtoolfacetodeltaMD,
        /// <summary>
        /// DLSandtoolfacetoINCL property
        /// </summary>
          [XmlEnum("DLS and toolface to INCL")]
          DLSandtoolfacetoINCL,
        /// <summary>
        /// DLSandtoolfacetoINCLAZI property
        /// </summary>
          [XmlEnum("DLS and toolface to INCL-AZI")]
          DLSandtoolfacetoINCLAZI,
        /// <summary>
        /// DLSandtoolfacetoMD property
        /// </summary>
          [XmlEnum("DLS and toolface to MD")]
          DLSandtoolfacetoMD,
        /// <summary>
        /// DLSandtoolfacetoTVD property
        /// </summary>
          [XmlEnum("DLS and toolface to TVD")]
          DLSandtoolfacetoTVD,
        /// <summary>
        /// formationMD property
        /// </summary>
          [XmlEnum("formation MD")]
          formationMD,
        /// <summary>
        /// formationTVD property
        /// </summary>
          [XmlEnum("formation TVD")]
          formationTVD,
        /// <summary>
        /// gyroinertial property
        /// </summary>
          [XmlEnum("gyro inertial")]
          gyroinertial,
        /// <summary>
        /// gyroMWD property
        /// </summary>
          [XmlEnum("gyro MWD")]
          gyroMWD,
        /// <summary>
        /// gyronorthseeking property
        /// </summary>
          [XmlEnum("gyro north seeking")]
          gyronorthseeking,
        /// <summary>
        /// holdtodeltaMD property
        /// </summary>
          [XmlEnum("hold to delta-MD")]
          holdtodeltaMD,
        /// <summary>
        /// holdtoMD property
        /// </summary>
          [XmlEnum("hold to MD")]
          holdtoMD,
        /// <summary>
        /// holdtoTVD property
        /// </summary>
          [XmlEnum("hold to TVD")]
          holdtoTVD,
        /// <summary>
        /// INCLAZIandTVD property
        /// </summary>
          [XmlEnum("INCL, AZI and TVD")]
          INCLAZIandTVD,
        /// <summary>
        /// magneticmultishot property
        /// </summary>
          [XmlEnum("magnetic multi-shot")]
          magneticmultishot,
        /// <summary>
        /// magneticMWD property
        /// </summary>
          [XmlEnum("magnetic MWD")]
          magneticMWD,
        /// <summary>
        /// magneticsingleshot property
        /// </summary>
          [XmlEnum("magnetic single shot")]
          magneticsingleshot,
        /// <summary>
        /// markerMD property
        /// </summary>
          [XmlEnum("marker MD")]
          markerMD,
        /// <summary>
        /// markerTVD property
        /// </summary>
          [XmlEnum("marker TVD")]
          markerTVD,
        /// <summary>
        /// NSEWandTVD property
        /// </summary>
          [XmlEnum("NS, EW and TVD")]
          NSEWandTVD,
        /// <summary>
        /// targetcenter property
        /// </summary>
          [XmlEnum("target center")]
          targetcenter,
        /// <summary>
        /// targetoffset property
        /// </summary>
          [XmlEnum("target offset")]
          targetoffset,
        /// <summary>
        /// tieinpoint property
        /// </summary>
          [XmlEnum("tie in point")]
          tieinpoint,
        /// <summary>
        /// turnratetoAZI property
        /// </summary>
          [XmlEnum("turnrate to AZI")]
          turnratetoAZI,
        /// <summary>
        /// turnratetodeltaMD property
        /// </summary>
          [XmlEnum("turnrate to delta-MD")]
          turnratetodeltaMD,
        /// <summary>
        /// turnratetoMD property
        /// </summary>
          [XmlEnum("turnrate to MD")]
          turnratetoMD,
        /// <summary>
        /// turnratetoTVD property
        /// </summary>
          [XmlEnum("turnrate to TVD")]
          turnratetoTVD,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the TypeSurveyTool xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TypeSurveyTool xsd enumeration.")]
        public enum TypeSurveyTool 
        {
        /// <summary>
        /// magneticMWD property
        /// </summary>
          [XmlEnum("magnetic MWD")]
          magneticMWD,
        /// <summary>
        /// gyroscopicMWD property
        /// </summary>
          [XmlEnum("gyroscopic  MWD")]
          gyroscopicMWD,
        /// <summary>
        /// gyroscopicnorthseeking property
        /// </summary>
          [XmlEnum("gyroscopic north seeking")]
          gyroscopicnorthseeking,
        /// <summary>
        /// gyroscopicinertial property
        /// </summary>
          [XmlEnum("gyroscopic inertial")]
          gyroscopicinertial,
        /// <summary>
        /// magneticsingleshot property
        /// </summary>
          [XmlEnum("magnetic single-shot")]
          magneticsingleshot,
        /// <summary>
        /// magneticmultipleshot property
        /// </summary>
          [XmlEnum("magnetic multiple-shot")]
          magneticmultipleshot,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the TrajStationStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TrajStationStatus xsd enumeration.")]
        public enum TrajStationStatus 
        {
        /// <summary>
        /// 
        /// </summary>
          locked,
        /// <summary>
        /// 
        /// </summary>
          open,
        /// <summary>
        /// 
        /// </summary>
          rejected,
        /// <summary>
        /// 
        /// </summary>
          valid,
        /// <summary>
        /// 
        /// </summary>
          position,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ItemsChoiceType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ItemsChoiceType xsd enumeration.")]
        public enum ItemsChoiceType 
        {
        /// <summary>
        /// easting property
        /// </summary>
          easting,
        /// <summary>
        /// latitude property
        /// </summary>
          latitude,
        /// <summary>
        /// localX property
        /// </summary>
          localX,
        /// <summary>
        /// localY property
        /// </summary>
          localY,
        /// <summary>
        /// longitude property
        /// </summary>
          longitude,
        /// <summary>
        /// northing property
        /// </summary>
          northing,
        /// <summary>
        /// projectedX property
        /// </summary>
          projectedX,
        /// <summary>
        /// projectedY property
        /// </summary>
          projectedY,
        /// <summary>
        /// southing property
        /// </summary>
          southing,
        /// <summary>
        /// westing property
        /// </summary>
          westing

        }

        /// <summary>
        /// This class represents the ScrType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ScrType xsd enumeration.")]
        public enum ScrType 
        {
        /// <summary>
        /// stringannulus property
        /// </summary>
          [XmlEnum("string annulus")]
          stringannulus,
        /// <summary>
        /// stringkillline property
        /// </summary>
          [XmlEnum("string kill line")]
          stringkillline,
        /// <summary>
        /// stringchokeline property
        /// </summary>
          [XmlEnum("string choke line")]
          stringchokeline,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the PumpOpType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the PumpOpType xsd enumeration.")]
        public enum PumpOpType 
        {
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// 
        /// </summary>
          reaming,
        /// <summary>
        /// 
        /// </summary>
          circulating,
        /// <summary>
        /// slowpump property
        /// </summary>
          [XmlEnum("slow pump")]
          slowpump,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the SupportCraft xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the SupportCraft xsd enumeration.")]
        public enum SupportCraftType 
        {
        /// <summary>
        /// 
        /// </summary>
          barge,
        /// <summary>
        /// standbyboat property
        /// </summary>
          [XmlEnum("standby boat")]
          standbyboat,
        /// <summary>
        /// 
        /// </summary>
          helicopter,
        /// <summary>
        /// supplyboat property
        /// </summary>
          [XmlEnum("supply boat")]
          supplyboat,
        /// <summary>
        /// 
        /// </summary>
          truck,
        /// <summary>
        /// crewvehicle property
        /// </summary>
          [XmlEnum("crew vehicle")]
          crewvehicle,
        /// <summary>
        /// tugboat property
        /// </summary>
          [XmlEnum("tug boat")]
          tugboat,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the IntervalType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the IntervalType xsd enumeration.")]
        public enum IntervalType 
        {
        /// <summary>
        /// 
        /// </summary>
          time,
        /// <summary>
        /// 
        /// </summary>
          depth,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the IntervalMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the IntervalMethod xsd enumeration.")]
        public enum IntervalMethod 
        {
        /// <summary>
        /// 
        /// </summary>
          average,
        /// <summary>
        /// 
        /// </summary>
          maximum,
        /// <summary>
        /// 
        /// </summary>
          minimum,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// spotsample property
        /// </summary>
          [XmlEnum("spot sample")]
          spotsample,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ItemChoiceType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ItemChoiceType xsd enumeration.")]
        public enum ItemChoiceType 
        {
        /// <summary>
        /// persistedAsLog property
        /// </summary>
          persistedAsLog,
        /// <summary>
        /// persistedAsWellLog property
        /// </summary>
          persistedAsWellLog

        }

        /// <summary>
        /// This class represents the RigType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the RigType xsd enumeration.")]
        public enum RigType 
        {
        /// <summary>
        /// Barge rig
        /// </summary>
          barge,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// Floating rig
        /// </summary>
          floater,
        /// <summary>
        /// Jackup rig
        /// </summary>
          jackup,
        /// <summary>
        /// Land rig
        /// </summary>
          land,
        /// <summary>
        /// Fixed platform
        /// </summary>
          platform,
        /// <summary>
        /// semisubmersible property
        /// </summary>
          [XmlEnum("semi-submersible")]
          semisubmersible,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the BopType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BopType xsd enumeration.")]
        public enum BopType 
        {
        /// <summary>
        /// annularpreventer property
        /// </summary>
          [XmlEnum("annular preventer")]
          annularpreventer,
        /// <summary>
        /// shearram property
        /// </summary>
          [XmlEnum("shear ram")]
          shearram,
        /// <summary>
        /// blindram property
        /// </summary>
          [XmlEnum("blind ram")]
          blindram,
        /// <summary>
        /// piperam property
        /// </summary>
          [XmlEnum("pipe ram")]
          piperam,
        /// <summary>
        /// drillingspool property
        /// </summary>
          [XmlEnum("drilling spool")]
          drillingspool,
        /// <summary>
        /// flexiblejoint property
        /// </summary>
          [XmlEnum("flexible joint")]
          flexiblejoint,
        /// <summary>
        /// 
        /// </summary>
          connector,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the PitType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the PitType xsd enumeration.")]
        public enum PitType 
        {
        /// <summary>
        /// 
        /// </summary>
          bulk,
        /// <summary>
        /// 
        /// </summary>
          chemical,
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// 
        /// </summary>
          mix,
        /// <summary>
        /// mudcleaning property
        /// </summary>
          [XmlEnum("mud cleaning")]
          mudcleaning,
        /// <summary>
        /// sandtrap property
        /// </summary>
          [XmlEnum("sand trap")]
          sandtrap,
        /// <summary>
        /// That pit in the active pit system located immediately downstream of the shale shakers, whose primary purpose is to allow the settling and disposal of the larger drilled cuttings not removed by the shale shakers. It is occasionally also called a settling tank.
        /// </summary>
          slug,
        /// <summary>
        /// 
        /// </summary>
          storage,
        /// <summary>
        /// surgetank property
        /// </summary>
          [XmlEnum("surge tank")]
          surgetank,
        /// <summary>
        /// triptank property
        /// </summary>
          [XmlEnum("trip tank")]
          triptank,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the PumpType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the PumpType xsd enumeration.")]
        public enum PumpType 
        {
        /// <summary>
        /// Centrifugal mud pump
        /// </summary>
          centrifugal,
        /// <summary>
        /// Duplex mud mump, 2 cylinders
        /// </summary>
          duplex,
        /// <summary>
        /// Triplex mud pump, three cylinders
        /// </summary>
          triplex,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the SurfEquipType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the SurfEquipType xsd enumeration.")]
        public enum SurfEquipType 
        {
        /// <summary>
        /// 
        /// </summary>
          IADC,
        /// <summary>
        /// 
        /// </summary>
          custom,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the DerrickType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the DerrickType xsd enumeration.")]
        public enum DerrickType 
        {
        /// <summary>
        /// 2 stand capacity derrick
        /// </summary>
          @double,
        /// <summary>
        /// 4 stand capacity derrick
        /// </summary>
          quadruple,
        /// <summary>
        /// Slant derrick
        /// </summary>
          slant,
        /// <summary>
        /// 3 stand capacity derrick
        /// </summary>
          triple,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the DrawWorksType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the DrawWorksType xsd enumeration.")]
        public enum DrawWorksType 
        {
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// standardelectric property
        /// </summary>
          [XmlEnum("standard electric")]
          standardelectric,
        /// <summary>
        /// dieselelectric property
        /// </summary>
          [XmlEnum("diesel electric")]
          dieselelectric,
        /// <summary>
        /// ramrig property
        /// </summary>
          [XmlEnum("ram rig")]
          ramrig,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the DriveType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the DriveType xsd enumeration.")]
        public enum DriveType 
        {
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// rotarykellydrive property
        /// </summary>
          [XmlEnum("rotary kelly drive")]
          rotarykellydrive,
        /// <summary>
        /// topdrive property
        /// </summary>
          [XmlEnum("top drive")]
          topdrive,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the RiskType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the RiskType xsd enumeration.")]
        public enum RiskType 
        {
        /// <summary>
        /// 
        /// </summary>
          risk,
        /// <summary>
        /// 
        /// </summary>
          @event,
        /// <summary>
        /// nearmiss property
        /// </summary>
          [XmlEnum("near miss")]
          nearmiss,
        /// <summary>
        /// bestpractice property
        /// </summary>
          [XmlEnum("best practice")]
          bestpractice,
        /// <summary>
        /// lessonslearned property
        /// </summary>
          [XmlEnum("lessons learned")]
          lessonslearned,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the RiskCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the RiskCategory xsd enumeration.")]
        public enum RiskCategory 
        {
        /// <summary>
        /// 
        /// </summary>
          hydraulics,
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// timerelated property
        /// </summary>
          [XmlEnum("time related")]
          timerelated,
        /// <summary>
        /// wellborestability property
        /// </summary>
          [XmlEnum("wellbore stability")]
          wellborestability,
        /// <summary>
        /// directionaldrilling property
        /// </summary>
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// 
        /// </summary>
          bit,
        /// <summary>
        /// equipmentfailure property
        /// </summary>
          [XmlEnum("equipment failure")]
          equipmentfailure,
        /// <summary>
        /// 
        /// </summary>
          completion,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the RiskSubCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the RiskSubCategory xsd enumeration.")]
        public enum RiskSubCategory 
        {
        /// <summary>
        /// gaskick property
        /// </summary>
          [XmlEnum("gas kick")]
          gaskick,
        /// <summary>
        /// shallowwaterinflux property
        /// </summary>
          [XmlEnum("shallow water influx")]
          shallowwaterinflux,
        /// <summary>
        /// otherinfluxorkicks property
        /// </summary>
          [XmlEnum("other influx or kicks")]
          otherinfluxorkicks,
        /// <summary>
        /// losscirculation property
        /// </summary>
          [XmlEnum("loss circulation")]
          losscirculation,
        /// <summary>
        /// poorholecleaning property
        /// </summary>
          [XmlEnum("poor hole cleaning")]
          poorholecleaning,
        /// <summary>
        /// goodholecleaningathighROP property
        /// </summary>
          [XmlEnum("good hole cleaning at high ROP")]
          goodholecleaningathighROP,
        /// <summary>
        /// highmudweight property
        /// </summary>
          [XmlEnum("high mud weight")]
          highmudweight,
        /// <summary>
        /// specialadditivesneeded property
        /// </summary>
          [XmlEnum("special additives needed")]
          specialadditivesneeded,
        /// <summary>
        /// gumboproblems property
        /// </summary>
          [XmlEnum("gumbo problems")]
          gumboproblems,
        /// <summary>
        /// highECDrheologyrelated property
        /// </summary>
          [XmlEnum("high ECD - rheology related")]
          highECDrheologyrelated,
        /// <summary>
        /// excessivecirculation property
        /// </summary>
          [XmlEnum("excessive circulation")]
          excessivecirculation,
        /// <summary>
        /// performingakill property
        /// </summary>
          [XmlEnum("performing a kill")]
          performingakill,
        /// <summary>
        /// mudweightchange property
        /// </summary>
          [XmlEnum("mud weight change")]
          mudweightchange,
        /// <summary>
        /// excessivepipecementscaling property
        /// </summary>
          [XmlEnum("excessive pipe cement scaling")]
          excessivepipecementscaling,
        /// <summary>
        /// pitgainorloss property
        /// </summary>
          [XmlEnum("pit gain or loss")]
          pitgainorloss,
        /// <summary>
        /// mudstabilityproblems property
        /// </summary>
          [XmlEnum("mud stability problems")]
          mudstabilityproblems,
        /// <summary>
        /// shallowgasflow property
        /// </summary>
          [XmlEnum("shallow gas flow")]
          shallowgasflow,
        /// <summary>
        /// twistoff property
        /// </summary>
          [XmlEnum("twist off")]
          twistoff,
        /// <summary>
        /// stuckpipe property
        /// </summary>
          [XmlEnum("stuck pipe")]
          stuckpipe,
        /// <summary>
        /// wirelinestuckinhole property
        /// </summary>
          [XmlEnum("wireline stuck in hole")]
          wirelinestuckinhole,
        /// <summary>
        /// stickandslip property
        /// </summary>
          [XmlEnum("stick and slip")]
          stickandslip,
        /// <summary>
        /// vibrationaxial property
        /// </summary>
          [XmlEnum("vibration - axial")]
          vibrationaxial,
        /// <summary>
        /// vibrationtorsional property
        /// </summary>
          [XmlEnum("vibration - torsional")]
          vibrationtorsional,
        /// <summary>
        /// vibrationtransverse property
        /// </summary>
          [XmlEnum("vibration - transverse")]
          vibrationtransverse,
        /// <summary>
        /// vibrationunknownorroughdrilling property
        /// </summary>
          [XmlEnum("vibration unknown or rough drilling")]
          vibrationunknownorroughdrilling,
        /// <summary>
        /// unevenwearofBHA property
        /// </summary>
          [XmlEnum("uneven wear of BHA")]
          unevenwearofBHA,
        /// <summary>
        /// unevenwearofdrillstring property
        /// </summary>
          [XmlEnum("uneven wear of drillstring")]
          unevenwearofdrillstring,
        /// <summary>
        /// excessivetorque property
        /// </summary>
          [XmlEnum("excessive torque")]
          excessivetorque,
        /// <summary>
        /// excessivedrag property
        /// </summary>
          [XmlEnum("excessive drag")]
          excessivedrag,
        /// <summary>
        /// reaminggreaterthan2hours property
        /// </summary>
          [XmlEnum("reaming greater than 2 hours")]
          reaminggreaterthan2hours,
        /// <summary>
        /// 
        /// </summary>
          washouts,
        /// <summary>
        /// tightholeoroverPull property
        /// </summary>
          [XmlEnum("tight hole or overPull")]
          tightholeoroverPull,
        /// <summary>
        /// failedinspectionsorfatiguewear property
        /// </summary>
          [XmlEnum("failed inspections or fatigue wear")]
          failedinspectionsorfatiguewear,
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// drillinggreaterthan1000feetday property
        /// </summary>
          [XmlEnum("drilling greater than 1000 feet/day")]
          drillinggreaterthan1000feetday,
        /// <summary>
        /// drillinggreaterthan2000feetday property
        /// </summary>
          [XmlEnum("drilling greater than 2000 feet/day")]
          drillinggreaterthan2000feetday,
        /// <summary>
        /// drillinglessthan20feetday property
        /// </summary>
          [XmlEnum("drilling less than 20 feet/day")]
          drillinglessthan20feetday,
        /// <summary>
        /// tripsgreaterthan24hours property
        /// </summary>
          [XmlEnum("trips greater than 24 hours")]
          tripsgreaterthan24hours,
        /// <summary>
        /// excessivetimeforBHAmakeup property
        /// </summary>
          [XmlEnum("excessive time for BHA makeup")]
          excessivetimeforBHAmakeup,
        /// <summary>
        /// waitingondecisions property
        /// </summary>
          [XmlEnum("waiting on decisions")]
          waitingondecisions,
        /// <summary>
        /// waitingonweather property
        /// </summary>
          [XmlEnum("waiting on weather")]
          waitingonweather,
        /// <summary>
        /// waitingontools property
        /// </summary>
          [XmlEnum("waiting on tools")]
          waitingontools,
        /// <summary>
        /// sloughingorpackoffs property
        /// </summary>
          [XmlEnum("sloughing or packoffs")]
          sloughingorpackoffs,
        /// <summary>
        /// 
        /// </summary>
          ballooning,
        /// <summary>
        /// fractureproblems property
        /// </summary>
          [XmlEnum("fracture problems")]
          fractureproblems,
        /// <summary>
        /// unstablezones property
        /// </summary>
          [XmlEnum("unstable zones")]
          unstablezones,
        /// <summary>
        /// formationintegritytest property
        /// </summary>
          [XmlEnum("formation integrity test")]
          formationintegritytest,
        /// <summary>
        /// leakofftest property
        /// </summary>
          [XmlEnum("leak-off test")]
          leakofftest,
        /// <summary>
        /// 
        /// </summary>
          tectonics,
        /// <summary>
        /// porepressure property
        /// </summary>
          [XmlEnum("pore pressure")]
          porepressure,
        /// <summary>
        /// 
        /// </summary>
          breakouts,
        /// <summary>
        /// bedparallel property
        /// </summary>
          [XmlEnum("bed parallel")]
          bedparallel,
        /// <summary>
        /// wellborestability property
        /// </summary>
          [XmlEnum("wellbore stability")]
          wellborestability,
        /// <summary>
        /// excessivedoglegs property
        /// </summary>
          [XmlEnum("excessive doglegs")]
          excessivedoglegs,
        /// <summary>
        /// 
        /// </summary>
          sidetrack,
        /// <summary>
        /// BHAchangefordirectional property
        /// </summary>
          [XmlEnum("BHA change for directional")]
          BHAchangefordirectional,
        /// <summary>
        /// wrongtotalflowarea property
        /// </summary>
          [XmlEnum("wrong total flow area")]
          wrongtotalflowarea,
        /// <summary>
        /// wellcollisionactual property
        /// </summary>
          [XmlEnum("well collision - actual")]
          wellcollisionactual,
        /// <summary>
        /// wellcollisiontechnical property
        /// </summary>
          [XmlEnum("well collision - technical")]
          wellcollisiontechnical,
        /// <summary>
        /// 
        /// </summary>
          geosteering,
        /// <summary>
        /// abnormaltendencychanges property
        /// </summary>
          [XmlEnum("abnormal tendency changes")]
          abnormaltendencychanges,
        /// <summary>
        /// 
        /// </summary>
          resurveying,
        /// <summary>
        /// infieldreferencingIFRactions property
        /// </summary>
          [XmlEnum("in-field referencing (IFR) actions")]
          infieldreferencingIFRactions,
        /// <summary>
        /// bitorBHAperformance property
        /// </summary>
          [XmlEnum("bit or BHA performance")]
          bitorBHAperformance,
        /// <summary>
        /// drillingoptimization property
        /// </summary>
          [XmlEnum("drilling optimization")]
          drillingoptimization,
        /// <summary>
        /// bitballing property
        /// </summary>
          [XmlEnum("bit balling")]
          bitballing,
        /// <summary>
        /// lostconesorbrokencutters property
        /// </summary>
          [XmlEnum("lost cones or broken cutters")]
          lostconesorbrokencutters,
        /// <summary>
        /// excessivebitwearorgauge property
        /// </summary>
          [XmlEnum("excessive bit wear or gauge")]
          excessivebitwearorgauge,
        /// <summary>
        /// lowrateofbitpenetration property
        /// </summary>
          [XmlEnum("low rate of bit penetration")]
          lowrateofbitpenetration,
        /// <summary>
        /// highrateofbitpenetration property
        /// </summary>
          [XmlEnum("high rate of bit penetration")]
          highrateofbitpenetration,
        /// <summary>
        /// downholetool property
        /// </summary>
          [XmlEnum("downhole tool")]
          downholetool,
        /// <summary>
        /// surfacesystem property
        /// </summary>
          [XmlEnum("surface system")]
          surfacesystem,
        /// <summary>
        /// motororrotarysteerablesystemfailure property
        /// </summary>
          [XmlEnum("motor or rotary steerable system failure")]
          motororrotarysteerablesystemfailure,
        /// <summary>
        /// topdrivefailure property
        /// </summary>
          [XmlEnum("topdrive failure")]
          topdrivefailure,
        /// <summary>
        /// hoistingequipmentfailure property
        /// </summary>
          [XmlEnum("hoisting equipment failure")]
          hoistingequipmentfailure,
        /// <summary>
        /// circulatingequipmentfailure property
        /// </summary>
          [XmlEnum("circulating equipment failure")]
          circulatingequipmentfailure,
        /// <summary>
        /// electricalsystemfailure property
        /// </summary>
          [XmlEnum("electrical system failure")]
          electricalsystemfailure,
        /// <summary>
        /// blowoutpreventerevents property
        /// </summary>
          [XmlEnum("blow out preventer events")]
          blowoutpreventerevents,
        /// <summary>
        /// surfaceinstrumentationproblems property
        /// </summary>
          [XmlEnum("surface instrumentation problems")]
          surfaceinstrumentationproblems,
        /// <summary>
        /// rigcommunications property
        /// </summary>
          [XmlEnum("rig communications")]
          rigcommunications,
        /// <summary>
        /// completionequipmentfailure property
        /// </summary>
          [XmlEnum("completion equipment failure")]
          completionequipmentfailure,
        /// <summary>
        /// miscellaneousrigequipment property
        /// </summary>
          [XmlEnum("miscellaneous rig equipment")]
          miscellaneousrigequipment,
        /// <summary>
        /// toolorequipmentfailure property
        /// </summary>
          [XmlEnum("tool or equipment failure")]
          toolorequipmentfailure,
        /// <summary>
        /// squeezejobs property
        /// </summary>
          [XmlEnum("squeeze jobs")]
          squeezejobs,
        /// <summary>
        /// casingsurgelosses property
        /// </summary>
          [XmlEnum("casing surge losses")]
          casingsurgelosses,
        /// <summary>
        /// stuckcasingorcompletion property
        /// </summary>
          [XmlEnum("stuck casing or completion")]
          stuckcasingorcompletion,
        /// <summary>
        /// shoefailures property
        /// </summary>
          [XmlEnum("shoe failures")]
          shoefailures,
        /// <summary>
        /// earlycementsetup property
        /// </summary>
          [XmlEnum("early cement setup")]
          earlycementsetup,
        /// <summary>
        /// casingcollapse property
        /// </summary>
          [XmlEnum("casing collapse")]
          casingcollapse,
        /// <summary>
        /// 
        /// </summary>
          milling,
        /// <summary>
        /// excessivecasingwearorcuttings property
        /// </summary>
          [XmlEnum("excessive casing wear or cuttings")]
          excessivecasingwearorcuttings,
        /// <summary>
        /// excessiveformationdamageorskin property
        /// </summary>
          [XmlEnum("excessive formation damage or skin")]
          excessiveformationdamageorskin,
        /// <summary>
        /// casingrotationorreciprocationrqd property
        /// </summary>
          [XmlEnum("casing rotation or reciprocation rqd")]
          casingrotationorreciprocationrqd,
        /// <summary>
        /// 
        /// </summary>
          broaching,
        /// <summary>
        /// completionorcasing property
        /// </summary>
          [XmlEnum("completion or casing")]
          completionorcasing,
        /// <summary>
        /// 
        /// </summary>
          stratigraphy,
        /// <summary>
        /// 
        /// </summary>
          fishing,
        /// <summary>
        /// junkinhole property
        /// </summary>
          [XmlEnum("junk in hole")]
          junkinhole,
        /// <summary>
        /// delayduetopoliticalunrest property
        /// </summary>
          [XmlEnum("delay due to political unrest")]
          delayduetopoliticalunrest,
        /// <summary>
        /// rigmove property
        /// </summary>
          [XmlEnum("rig move")]
          rigmove,
        /// <summary>
        /// gashydrates property
        /// </summary>
          [XmlEnum("gas hydrates")]
          gashydrates,
        /// <summary>
        /// pendinganalysis property
        /// </summary>
          [XmlEnum("pending analysis")]
          pendinganalysis,
        /// <summary>
        /// riserdisconnect property
        /// </summary>
          [XmlEnum("riser disconnect")]
          riserdisconnect,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// 
        /// </summary>
          personnel,
        /// <summary>
        /// 
        /// </summary>
          environmental,
        /// <summary>
        /// 
        /// </summary>
          automotive,
        /// <summary>
        /// 
        /// </summary>
          asset,
        /// <summary>
        /// 
        /// </summary>
          information,
        /// <summary>
        /// 
        /// </summary>
          time,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE

        }

        /// <summary>
        /// This class represents the RiskAffectedPersonnel xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the RiskAffectedPersonnel xsd enumeration.")]
        public enum RiskAffectedPersonnel 
        {
        /// <summary>
        /// 
        /// </summary>
          cementer,
        /// <summary>
        /// companyman property
        /// </summary>
          [XmlEnum("company man")]
          companyman,
        /// <summary>
        /// 
        /// </summary>
          contractor,
        /// <summary>
        /// directionaldriller property
        /// </summary>
          [XmlEnum("directional driller")]
          directionaldriller,
        /// <summary>
        /// 
        /// </summary>
          driller,
        /// <summary>
        /// drillingengineer property
        /// </summary>
          [XmlEnum("drilling engineer")]
          drillingengineer,
        /// <summary>
        /// drillingsuperintendent property
        /// </summary>
          [XmlEnum("drilling superintendent")]
          drillingsuperintendent,
        /// <summary>
        /// drillingteam property
        /// </summary>
          [XmlEnum("drilling team")]
          drillingteam,
        /// <summary>
        /// facilityengineer property
        /// </summary>
          [XmlEnum("facility engineer")]
          facilityengineer,
        /// <summary>
        /// fieldservicemanager property
        /// </summary>
          [XmlEnum("field service manager")]
          fieldservicemanager,
        /// <summary>
        /// 
        /// </summary>
          foreman,
        /// <summary>
        /// generalservicesupervisor property
        /// </summary>
          [XmlEnum("general service supervisor")]
          generalservicesupervisor,
        /// <summary>
        /// 
        /// </summary>
          geologist,
        /// <summary>
        /// 
        /// </summary>
          member,
        /// <summary>
        /// mudengineer property
        /// </summary>
          [XmlEnum("mud engineer")]
          mudengineer,
        /// <summary>
        /// mudlogger property
        /// </summary>
          [XmlEnum("mud logger")]
          mudlogger,
        /// <summary>
        /// MWDorLWDengineer property
        /// </summary>
          [XmlEnum("MWD or LWD engineer")]
          MWDorLWDengineer,
        /// <summary>
        /// performengineer property
        /// </summary>
          [XmlEnum("perform engineer")]
          performengineer,
        /// <summary>
        /// 
        /// </summary>
          petrophysicist,
        /// <summary>
        /// productionengineer property
        /// </summary>
          [XmlEnum("production engineer")]
          productionengineer,
        /// <summary>
        /// remotelyoperatedvehicleengineer property
        /// </summary>
          [XmlEnum("remotely operated vehicle engineer")]
          remotelyoperatedvehicleengineer,
        /// <summary>
        /// safetymanger property
        /// </summary>
          [XmlEnum("safety manger")]
          safetymanger,
        /// <summary>
        /// salesengineer property
        /// </summary>
          [XmlEnum("sales engineer")]
          salesengineer,
        /// <summary>
        /// servicesupervisor property
        /// </summary>
          [XmlEnum("service supervisor")]
          servicesupervisor,
        /// <summary>
        /// technicalsupport property
        /// </summary>
          [XmlEnum("technical support")]
          technicalsupport,
        /// <summary>
        /// toolpusher property
        /// </summary>
          [XmlEnum("tool pusher")]
          toolpusher,
        /// <summary>
        /// wirelineengineer property
        /// </summary>
          [XmlEnum("wireline engineer")]
          wirelineengineer

        }

        /// <summary>
        /// This class represents the TargetScope xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TargetScope xsd enumeration.")]
        public enum TargetScope 
        {
        /// <summary>
        /// Item3Dvolume property
        /// </summary>
          [XmlEnum("3D volume")]
          Item3Dvolume,
        /// <summary>
        /// 
        /// </summary>
          ellipsoid,
        /// <summary>
        /// Elliptical targets. Includes circle (semi-major = semi-minor axis). Any sections present are ignored.
        /// </summary>
          elliptical,
        /// <summary>
        /// Boundary Conditions. Use sections to describe, length and width ignore.
        /// </summary>
          hardLine,
        /// <summary>
        /// Includes half circle and polygon. Use sections to describe, length and width ignored. 
        /// </summary>
          irregular,
        /// <summary>
        /// leaseline property
        /// </summary>
          [XmlEnum("lease line")]
          leaseline,
        /// <summary>
        /// Line target
        /// </summary>
          line,
        /// <summary>
        /// Plane target. Used for horizontal wells. Any sections present are ignored.
        /// </summary>
          plane,
        /// <summary>
        /// Point Target. Any sections present are ignored.
        /// </summary>
          point,
        /// <summary>
        /// Rectangular Targets. Includes square (length = width). Any sections present are ignored.
        /// </summary>
          rectangular,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the TargetCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TargetCategory xsd enumeration.")]
        public enum TargetCategory 
        {
        /// <summary>
        /// 
        /// </summary>
          geological,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the TargetSectionScope xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TargetSectionScope xsd enumeration.")]
        public enum TargetSectionScope 
        {
        /// <summary>
        /// continuous curve
        /// </summary>
          arc,
        /// <summary>
        /// straight line
        /// </summary>
          line,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the TubularAssembly xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TubularAssembly xsd enumeration.")]
        public enum TubularAssembly 
        {
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// directionaldrilling property
        /// </summary>
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// 
        /// </summary>
          fishing,
        /// <summary>
        /// conditionmud property
        /// </summary>
          [XmlEnum("condition mud")]
          conditionmud,
        /// <summary>
        /// tubingconveyedlogging property
        /// </summary>
          [XmlEnum("tubing conveyed logging")]
          tubingconveyedlogging,
        /// <summary>
        /// 
        /// </summary>
          cementing,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// cleanout property
        /// </summary>
          [XmlEnum("clean out")]
          cleanout,
        /// <summary>
        /// completionortesting property
        /// </summary>
          [XmlEnum("completion or testing")]
          completionortesting,
        /// <summary>
        /// 
        /// </summary>
          coring,
        /// <summary>
        /// holeopeningorunderreaming property
        /// </summary>
          [XmlEnum("hole opening or underreaming")]
          holeopeningorunderreaming,
        /// <summary>
        /// millingordressingorcutting property
        /// </summary>
          [XmlEnum("milling or dressing or cutting")]
          millingordressingorcutting,
        /// <summary>
        /// wiperorcheckorreaming property
        /// </summary>
          [XmlEnum("wiper or check or reaming")]
          wiperorcheckorreaming,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the TubularComponent xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the TubularComponent xsd enumeration.")]
        public enum TubularComponentType 
        {
        /// <summary>
        /// nonmagneticstabilizer property
        /// </summary>
          [XmlEnum("non-magnetic stabilizer")]
          nonmagneticstabilizer,
        /// <summary>
        /// nonmagneticcollar property
        /// </summary>
          [XmlEnum("non-magnetic collar")]
          nonmagneticcollar,
        /// <summary>
        /// Drill string component with blades that help keep the drill string away from the sides of the hole.
        /// </summary>
          stabilizer,
        /// <summary>
        /// adjustablekickoff property
        /// </summary>
          [XmlEnum("adjustable kickoff")]
          adjustablekickoff,
        /// <summary>
        /// A downhole tool used in conjunction with a jar that stores energy for rapid release when the jar is fired. Depending on the operating mode, the energy in tension or compression is stored by means of a mechanical spring or compressible fluid such as nitrogen gas.
        /// </summary>
          accelerator,
        /// <summary>
        /// rotarysteeringtool property
        /// </summary>
          [XmlEnum("rotary steering tool")]
          rotarysteeringtool,
        /// <summary>
        /// subbarcatcher property
        /// </summary>
          [XmlEnum("sub-bar catcher")]
          subbarcatcher,
        /// <summary>
        /// subbent property
        /// </summary>
          [XmlEnum("sub-bent")]
          subbent,
        /// <summary>
        /// bitcorediamond property
        /// </summary>
          [XmlEnum("bit core diamond")]
          bitcorediamond,
        /// <summary>
        /// bitcorePDC property
        /// </summary>
          [XmlEnum("bit core PDC")]
          bitcorePDC,
        /// <summary>
        /// bitdiamondfixedcut property
        /// </summary>
          [XmlEnum("bit diamond fixed cut")]
          bitdiamondfixedcut,
        /// <summary>
        /// bitinsertrollercone property
        /// </summary>
          [XmlEnum("bit insert roller cone")]
          bitinsertrollercone,
        /// <summary>
        /// bitmilltoothrollercone property
        /// </summary>
          [XmlEnum("bit mill tooth roller cone")]
          bitmilltoothrollercone,
        /// <summary>
        /// bitPDCfixedcutter property
        /// </summary>
          [XmlEnum("bit PDC fixed cutter")]
          bitPDCfixedcutter,
        /// <summary>
        /// subbit property
        /// </summary>
          [XmlEnum("sub-bit")]
          subbit,
        /// <summary>
        /// bridgeplug property
        /// </summary>
          [XmlEnum("bridge plug")]
          bridgeplug,
        /// <summary>
        /// A blank end component substituting for a bit, when re entering an already existing hole to guide the BHA, to avoid inadvertent sidetracks, such as when run below a hole opener in an existing hole.
        /// </summary>
          bullnose,
        /// <summary>
        /// bullplug property
        /// </summary>
          [XmlEnum("bull plug")]
          bullplug,
        /// <summary>
        /// subbumper property
        /// </summary>
          [XmlEnum("sub-bumper")]
          subbumper,
        /// <summary>
        /// Tubing used to line the wellbore and protect against pressure differences between the wellbore fluids and the formation.
        /// </summary>
          casing,
        /// <summary>
        /// casingcutter property
        /// </summary>
          [XmlEnum("casing cutter")]
          casingcutter,
        /// <summary>
        /// hangercasingsubsea property
        /// </summary>
          [XmlEnum("hanger casing subsea")]
          hangercasingsubsea,
        /// <summary>
        /// hangercasingsurface property
        /// </summary>
          [XmlEnum("hanger casing surface")]
          hangercasingsurface,
        /// <summary>
        /// casinghead property
        /// </summary>
          [XmlEnum("casing head")]
          casinghead,
        /// <summary>
        /// catchassembly property
        /// </summary>
          [XmlEnum("catch assembly")]
          catchassembly,
        /// <summary>
        /// subcatcher property
        /// </summary>
          [XmlEnum("sub-catcher")]
          subcatcher,
        /// <summary>
        /// subcirculation property
        /// </summary>
          [XmlEnum("sub-circulation")]
          subcirculation,
        /// <summary>
        /// coiledtubinginhole property
        /// </summary>
          [XmlEnum("coiled tubing in hole")]
          coiledtubinginhole,
        /// <summary>
        /// coiledtubingoncoil property
        /// </summary>
          [XmlEnum("coiled tubing on coil")]
          coiledtubingoncoil,
        /// <summary>
        /// drillpipecompressive property
        /// </summary>
          [XmlEnum("drill pipe compressive")]
          drillpipecompressive,
        /// <summary>
        /// subcone property
        /// </summary>
          [XmlEnum("sub-cone")]
          subcone,
        /// <summary>
        /// corebarrel property
        /// </summary>
          [XmlEnum("core barrel")]
          corebarrel,
        /// <summary>
        /// coreorientationbarrel property
        /// </summary>
          [XmlEnum("core orientation barrel")]
          coreorientationbarrel,
        /// <summary>
        /// subcrossover property
        /// </summary>
          [XmlEnum("sub-crossover")]
          subcrossover,
        /// <summary>
        /// casingcrossover property
        /// </summary>
          [XmlEnum("casing crossover")]
          casingcrossover,
        /// <summary>
        /// subdart property
        /// </summary>
          [XmlEnum("sub-dart")]
          subdart,
        /// <summary>
        /// diecollar property
        /// </summary>
          [XmlEnum("die collar")]
          diecollar,
        /// <summary>
        /// diecollarLH property
        /// </summary>
          [XmlEnum("die collar LH")]
          diecollarLH,
        /// <summary>
        /// directionalguidancesystem property
        /// </summary>
          [XmlEnum("directional guidance system")]
          directionalguidancesystem,
        /// <summary>
        /// drillcollar property
        /// </summary>
          [XmlEnum("drill collar")]
          drillcollar,
        /// <summary>
        /// drillpipe property
        /// </summary>
          [XmlEnum("drill pipe")]
          drillpipe,
        /// <summary>
        /// drillpipeLH property
        /// </summary>
          [XmlEnum("drill pipe LH")]
          drillpipeLH,
        /// <summary>
        /// drillstemtestBHA property
        /// </summary>
          [XmlEnum("drill stem test BHA")]
          drillstemtestBHA,
        /// <summary>
        /// drivepipe property
        /// </summary>
          [XmlEnum("drive pipe")]
          drivepipe,
        /// <summary>
        /// dualcatchassembly property
        /// </summary>
          [XmlEnum("dual catch assembly")]
          dualcatchassembly,
        /// <summary>
        /// extensionbowlovershot property
        /// </summary>
          [XmlEnum("extension bowl overshot")]
          extensionbowlovershot,
        /// <summary>
        /// extensionsubovershot property
        /// </summary>
          [XmlEnum("extension sub-overshot")]
          extensionsubovershot,
        /// <summary>
        /// floatcollar property
        /// </summary>
          [XmlEnum("float collar")]
          floatcollar,
        /// <summary>
        /// floatshoe property
        /// </summary>
          [XmlEnum("float shoe")]
          floatshoe,
        /// <summary>
        /// subfloat property
        /// </summary>
          [XmlEnum("sub-float")]
          subfloat,
        /// <summary>
        /// flowhead property
        /// </summary>
          [XmlEnum("flow head")]
          flowhead,
        /// <summary>
        /// guideshoe property
        /// </summary>
          [XmlEnum("guide shoe")]
          guideshoe,
        /// <summary>
        /// MWDhangoffsub property
        /// </summary>
          [XmlEnum("MWD hang off sub")]
          MWDhangoffsub,
        /// <summary>
        /// heavyweightdrillpipe property
        /// </summary>
          [XmlEnum("heavy weight drill pipe")]
          heavyweightdrillpipe,
        /// <summary>
        /// heavyweightdrillpipeLH property
        /// </summary>
          [XmlEnum("heavy weight drill pipe LH")]
          heavyweightdrillpipeLH,
        /// <summary>
        /// riserhighpressure property
        /// </summary>
          [XmlEnum("riser high pressure")]
          riserhighpressure,
        /// <summary>
        /// bitholeopener property
        /// </summary>
          [XmlEnum("bit hole opener")]
          bitholeopener,
        /// <summary>
        /// casinginflatablepacker property
        /// </summary>
          [XmlEnum("casing inflatable packer")]
          casinginflatablepacker,
        /// <summary>
        /// motorinstrumented property
        /// </summary>
          [XmlEnum("motor instrumented")]
          motorinstrumented,
        /// <summary>
        /// Hydraulic or spring-loaded component used to free stuck pipe.
        /// </summary>
          jar,
        /// <summary>
        /// subjetting property
        /// </summary>
          [XmlEnum("sub-jetting")]
          subjetting,
        /// <summary>
        /// junkbasket property
        /// </summary>
          [XmlEnum("junk basket")]
          junkbasket,
        /// <summary>
        /// junkbasketreversecirculation property
        /// </summary>
          [XmlEnum("junk basket reverse circulation")]
          junkbasketreversecirculation,
        /// <summary>
        /// subjunk property
        /// </summary>
          [XmlEnum("sub-junk")]
          subjunk,
        /// <summary>
        /// Hexagonal or square pipe used to rotate the drill string from the rig floor.
        /// </summary>
          kelly,
        /// <summary>
        /// keyseatwipertool property
        /// </summary>
          [XmlEnum("keyseat wiper tool")]
          keyseatwipertool,
        /// <summary>
        /// landingfloatcollar property
        /// </summary>
          [XmlEnum("landing float collar")]
          landingfloatcollar,
        /// <summary>
        /// leadimpressionblock property
        /// </summary>
          [XmlEnum("lead impression block")]
          leadimpressionblock,
        /// <summary>
        /// Casing or tubing that is hung from the inside of existing casing rather than from the sea bed or surface.
        /// </summary>
          liner,
        /// <summary>
        /// hangerliner property
        /// </summary>
          [XmlEnum("hanger liner")]
          hangerliner,
        /// <summary>
        /// Magnet used to retrieve magnetic debris from the hole.
        /// </summary>
          magnet,
        /// <summary>
        /// risermarine property
        /// </summary>
          [XmlEnum("riser marine")]
          risermarine,
        /// <summary>
        /// milldress property
        /// </summary>
          [XmlEnum("mill dress")]
          milldress,
        /// <summary>
        /// millflatbottom property
        /// </summary>
          [XmlEnum("mill flat bottom")]
          millflatbottom,
        /// <summary>
        /// millhollow property
        /// </summary>
          [XmlEnum("mill hollow")]
          millhollow,
        /// <summary>
        /// millpolish property
        /// </summary>
          [XmlEnum("mill polish")]
          millpolish,
        /// <summary>
        /// millsection property
        /// </summary>
          [XmlEnum("mill section")]
          millsection,
        /// <summary>
        /// milltaper property
        /// </summary>
          [XmlEnum("mill taper")]
          milltaper,
        /// <summary>
        /// millwashover property
        /// </summary>
          [XmlEnum("mill washover")]
          millwashover,
        /// <summary>
        /// millpackerpickerassembly property
        /// </summary>
          [XmlEnum("mill packer picker assembly")]
          millpackerpickerassembly,
        /// <summary>
        /// milloutextension property
        /// </summary>
          [XmlEnum("millout extension")]
          milloutextension,
        /// <summary>
        /// multilateralhangerrunningtool property
        /// </summary>
          [XmlEnum("multilateral hanger running tool")]
          multilateralhangerrunningtool,
        /// <summary>
        /// hangermudline property
        /// </summary>
          [XmlEnum("hanger mud line")]
          hangermudline,
        /// <summary>
        /// Downhole tool, usually powered by fluid flow, that rotates the drill bit.
        /// </summary>
          motor,
        /// <summary>
        /// muleshoe property
        /// </summary>
          [XmlEnum("mule shoe")]
          muleshoe,
        /// <summary>
        /// loggingwhiledrillingtool property
        /// </summary>
          [XmlEnum("logging while drilling tool")]
          loggingwhiledrillingtool,
        /// <summary>
        /// stabilizernearbitrollerreamer property
        /// </summary>
          [XmlEnum("stabilizer near bit roller reamer")]
          stabilizernearbitrollerreamer,
        /// <summary>
        /// stabilizernearbit property
        /// </summary>
          [XmlEnum("stabilizer near bit")]
          stabilizernearbit,
        /// <summary>
        /// stabilizernonrotating property
        /// </summary>
          [XmlEnum("stabilizer non-rotating")]
          stabilizernonrotating,
        /// <summary>
        /// suborienting property
        /// </summary>
          [XmlEnum("sub-orienting")]
          suborienting,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// Tool used for retrieving pipe that has been lost in the hole.
        /// </summary>
          overshot,
        /// <summary>
        /// overshotLH property
        /// </summary>
          [XmlEnum("overshot LH")]
          overshotLH,
        /// <summary>
        /// oversizelipguideovershot property
        /// </summary>
          [XmlEnum("oversize lip guide overshot")]
          oversizelipguideovershot,
        /// <summary>
        /// Component that can be inflated so that it seals off a section of the wellbore, typically for formation testing.
        /// </summary>
          packer,
        /// <summary>
        /// polishedborereceptacle property
        /// </summary>
          [XmlEnum("polished bore receptacle")]
          polishedborereceptacle,
        /// <summary>
        /// millpilot property
        /// </summary>
          [XmlEnum("mill pilot")]
          millpilot,
        /// <summary>
        /// pipecutter property
        /// </summary>
          [XmlEnum("pipe cutter")]
          pipecutter,
        /// <summary>
        /// portedstinger property
        /// </summary>
          [XmlEnum("ported stinger")]
          portedstinger,
        /// <summary>
        /// subported property
        /// </summary>
          [XmlEnum("sub-ported")]
          subported,
        /// <summary>
        /// prepackedscreens property
        /// </summary>
          [XmlEnum("prepacked screens")]
          prepackedscreens,
        /// <summary>
        /// subpressurerelief property
        /// </summary>
          [XmlEnum("sub-pressure relief")]
          subpressurerelief,
        /// <summary>
        /// riserproduction property
        /// </summary>
          [XmlEnum("riser production")]
          riserproduction,
        /// <summary>
        /// MWDpulser property
        /// </summary>
          [XmlEnum("MWD pulser")]
          MWDpulser,
        /// <summary>
        /// subpumpout property
        /// </summary>
          [XmlEnum("sub-pump out")]
          subpumpout,
        /// <summary>
        /// subrestrictor property
        /// </summary>
          [XmlEnum("sub-restrictor")]
          subrestrictor,
        /// <summary>
        /// packerretrieveTTsqueeze property
        /// </summary>
          [XmlEnum("packer retrieve TT squeeze")]
          packerretrieveTTsqueeze,
        /// <summary>
        /// reversingtool property
        /// </summary>
          [XmlEnum("reversing tool")]
          reversingtool,
        /// <summary>
        /// stabilizerstringrollerreamer property
        /// </summary>
          [XmlEnum("stabilizer string roller reamer")]
          stabilizerstringrollerreamer,
        /// <summary>
        /// packerRTTS property
        /// </summary>
          [XmlEnum("packer RTTS")]
          packerRTTS,
        /// <summary>
        /// runningtool property
        /// </summary>
          [XmlEnum("running tool")]
          runningtool,
        /// <summary>
        /// safetyjoint property
        /// </summary>
          [XmlEnum("safety joint")]
          safetyjoint,
        /// <summary>
        /// safetyjointLH property
        /// </summary>
          [XmlEnum("safety joint LH")]
          safetyjointLH,
        /// <summary>
        /// subsaver property
        /// </summary>
          [XmlEnum("sub-saver")]
          subsaver,
        /// <summary>
        /// scablinerbitguide property
        /// </summary>
          [XmlEnum("scab liner bit guide")]
          scablinerbitguide,
        /// <summary>
        /// 
        /// </summary>
          scraper,
        /// <summary>
        /// A device for cleaning mud and mud filter cake off of the wellbore wall when cementing casing in the hole to ensure good contact and bonding between the cement and the wellbore wall.
        /// </summary>
          scratchers,
        /// <summary>
        /// casingshoescrewin property
        /// </summary>
          [XmlEnum("casing shoe screw-in")]
          casingshoescrewin,
        /// <summary>
        /// subshock property
        /// </summary>
          [XmlEnum("sub-shock")]
          subshock,
        /// <summary>
        /// drillcollarshort property
        /// </summary>
          [XmlEnum("drill collar short")]
          drillcollarshort,
        /// <summary>
        /// subsideentry property
        /// </summary>
          [XmlEnum("sub-side entry")]
          subsideentry,
        /// <summary>
        /// slottedliner property
        /// </summary>
          [XmlEnum("slotted liner")]
          slottedliner,
        /// <summary>
        /// Fishing tool that attaches to the inside of the stuck pipe by threads or grapples.
        /// </summary>
          spear,
        /// <summary>
        /// stagecementcollar property
        /// </summary>
          [XmlEnum("stage cement collar")]
          stagecementcollar,
        /// <summary>
        /// motorsteerable property
        /// </summary>
          [XmlEnum("motor steerable")]
          motorsteerable,
        /// <summary>
        /// packerstormvalveRTTS property
        /// </summary>
          [XmlEnum("packer storm valve RTTS")]
          packerstormvalveRTTS,
        /// <summary>
        /// stabilizerstring property
        /// </summary>
          [XmlEnum("stabilizer string")]
          stabilizerstring,
        /// <summary>
        /// surfacepipe property
        /// </summary>
          [XmlEnum("surface pipe")]
          surfacepipe,
        /// <summary>
        /// tapertap property
        /// </summary>
          [XmlEnum("taper tap")]
          tapertap,
        /// <summary>
        /// tapertapLH property
        /// </summary>
          [XmlEnum("taper tap LH")]
          tapertapLH,
        /// <summary>
        /// tubingconveyedperforatinggun property
        /// </summary>
          [XmlEnum("tubing-conveyed perforating gun")]
          tubingconveyedperforatinggun,
        /// <summary>
        /// Drilling tool used to maintain weight on bit.
        /// </summary>
          thruster,
        /// <summary>
        /// tiebackpolishedborereceptacle property
        /// </summary>
          [XmlEnum("tieback polished bore receptacle")]
          tiebackpolishedborereceptacle,
        /// <summary>
        /// tiebackstinger property
        /// </summary>
          [XmlEnum("tieback stinger")]
          tiebackstinger,
        /// <summary>
        /// Small diameter pipe that is run inside casing or tubing as part of the well completion.
        /// </summary>
          tubing,
        /// <summary>
        /// hangertubing property
        /// </summary>
          [XmlEnum("hanger tubing")]
          hangertubing,
        /// <summary>
        /// Downhole device used for directional drilling, powered by mud circulation that rotates the drill bit while the drill string remains non-rotating
        /// </summary>
          turbine,
        /// <summary>
        /// bitunderreamer property
        /// </summary>
          [XmlEnum("bit under reamer")]
          bitunderreamer,
        /// <summary>
        /// stabilizervariableblade property
        /// </summary>
          [XmlEnum("stabilizer variable blade")]
          stabilizervariableblade,
        /// <summary>
        /// washoverpipe property
        /// </summary>
          [XmlEnum("washover pipe")]
          washoverpipe,
        /// <summary>
        /// millwatermelon property
        /// </summary>
          [XmlEnum("mill watermelon")]
          millwatermelon,
        /// <summary>
        /// Wedge shaped tool used to drill off in a different direction.
        /// </summary>
          whipstock,
        /// <summary>
        /// whipstockanchor property
        /// </summary>
          [XmlEnum("whipstock anchor")]
          whipstockanchor,
        /// <summary>
        /// stabilizerturboback property
        /// </summary>
          [XmlEnum("stabilizer turbo back")]
          stabilizerturboback,
        /// <summary>
        /// stabilizerinline property
        /// </summary>
          [XmlEnum("stabilizer inline")]
          stabilizerinline,
        /// <summary>
        /// stabilizersteerable property
        /// </summary>
          [XmlEnum("stabilizer steerable")]
          stabilizersteerable,
        /// <summary>
        /// substop property
        /// </summary>
          [XmlEnum("sub-stop")]
          substop,
        /// <summary>
        /// subfilter property
        /// </summary>
          [XmlEnum("sub-filter")]
          subfilter,
        /// <summary>
        /// millcasingcutting property
        /// </summary>
          [XmlEnum("mill casing cutting")]
          millcasingcutting,
        /// <summary>
        /// Tool used to enlarge the hole.
        /// </summary>
          reamer,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the BoxPinConfig xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BoxPinConfig xsd enumeration.")]
        public enum BoxPinConfig 
        {
        /// <summary>
        /// bottomboxtopbox property
        /// </summary>
          [XmlEnum("bottom box, top box")]
          bottomboxtopbox,
        /// <summary>
        /// bottomboxtoppin property
        /// </summary>
          [XmlEnum("bottom box, top pin")]
          bottomboxtoppin,
        /// <summary>
        /// bottompintopbox property
        /// </summary>
          [XmlEnum("bottom pin top box")]
          bottompintopbox,
        /// <summary>
        /// bottompin property
        /// </summary>
          [XmlEnum("bottom pin")]
          bottompin,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the MaterialType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MaterialType xsd enumeration.")]
        public enum MaterialType 
        {
        /// <summary>
        /// 
        /// </summary>
          aluminum,
        /// <summary>
        /// berylliumcopper property
        /// </summary>
          [XmlEnum("beryllium copper")]
          berylliumcopper,
        /// <summary>
        /// chromealloy property
        /// </summary>
          [XmlEnum("chrome alloy")]
          chromealloy,
        /// <summary>
        /// 
        /// </summary>
          composite,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// nonmagneticsteel property
        /// </summary>
          [XmlEnum("non-magnetic steel")]
          nonmagneticsteel,
        /// <summary>
        /// 
        /// </summary>
          plastic,
        /// <summary>
        /// 
        /// </summary>
          steel,
        /// <summary>
        /// steelalloy property
        /// </summary>
          [XmlEnum("steel alloy")]
          steelalloy,
        /// <summary>
        /// 
        /// </summary>
          titanium,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the BitType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BitType xsd enumeration.")]
        public enum BitType 
        {
        /// <summary>
        /// Diamond bit
        /// </summary>
          diamond,
        /// <summary>
        /// diamondcore property
        /// </summary>
          [XmlEnum("diamond core")]
          diamondcore,
        /// <summary>
        /// insertrollercone property
        /// </summary>
          [XmlEnum("insert roller cone")]
          insertrollercone,
        /// <summary>
        /// polycrystalline diamond compact fixed cutter bit
        /// </summary>
          PDC,
        /// <summary>
        /// PDCcore property
        /// </summary>
          [XmlEnum("PDC core")]
          PDCcore,
        /// <summary>
        /// rollercone property
        /// </summary>
          [XmlEnum("roller cone")]
          rollercone,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the BitDullCode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BitDullCode xsd enumeration.")]
        public enum BitDullCode 
        {
        /// <summary>
        /// Broken Cone
        /// </summary>
          BC,
        /// <summary>
        /// Broken teeth/cutters
        /// </summary>
          BT,
        /// <summary>
        /// Balled Up
        /// </summary>
          BU,
        /// <summary>
        /// Cracked Cone
        /// </summary>
          CC,
        /// <summary>
        /// Cone Dragged
        /// </summary>
          CD,
        /// <summary>
        /// Cone Interference
        /// </summary>
          CI,
        /// <summary>
        /// Cored
        /// </summary>
          CR,
        /// <summary>
        /// Chipped Teeth
        /// </summary>
          CT,
        /// <summary>
        /// Erosion
        /// </summary>
          ER,
        /// <summary>
        /// Flat Crested Wear
        /// </summary>
          FC,
        /// <summary>
        /// Heat Checking
        /// </summary>
          HC,
        /// <summary>
        /// Junk Damage
        /// </summary>
          JD,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LC,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LN,
        /// <summary>
        /// Lost Teeth/Cutters
        /// </summary>
          LT,
        /// <summary>
        /// No Dull/No Other Wear
        /// </summary>
          NO,
        /// <summary>
        /// Off-Center Wear
        /// </summary>
          OC,
        /// <summary>
        /// Pinched Bit
        /// </summary>
          PB,
        /// <summary>
        /// Plugged Nozzle
        /// </summary>
          PN,
        /// <summary>
        /// Rounded Gauge
        /// </summary>
          RG,
        /// <summary>
        /// Ring Out
        /// </summary>
          RO,
        /// <summary>
        /// Shirttail Damage
        /// </summary>
          SD,
        /// <summary>
        /// Self-Sharpening Wear
        /// </summary>
          SS,
        /// <summary>
        /// Tracking
        /// </summary>
          TR,
        /// <summary>
        /// WashOut on Bit
        /// </summary>
          WO,
        /// <summary>
        /// Worn Teeth/Cutters
        /// </summary>
          WT,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the BitReasonPulled xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BitReasonPulled xsd enumeration.")]
        public enum BitReasonPulled 
        {
        /// <summary>
        /// Change Bottom Hole Assembly
        /// </summary>
          BHA,
        /// <summary>
        /// Condition Mud
        /// </summary>
          CM,
        /// <summary>
        /// Core Point
        /// </summary>
          CP,
        /// <summary>
        /// Downhole Motor Failure
        /// </summary>
          DMF,
        /// <summary>
        /// Drill Plug
        /// </summary>
          DP,
        /// <summary>
        /// Drill Stem Test
        /// </summary>
          DST,
        /// <summary>
        /// Downhole Tool Failure
        /// </summary>
          DTF,
        /// <summary>
        /// Formation Change
        /// </summary>
          FM,
        /// <summary>
        /// Hole Problems
        /// </summary>
          HP,
        /// <summary>
        /// Hours on Bit
        /// </summary>
          HR,
        /// <summary>
        /// Run Logs
        /// </summary>
          LOG,
        /// <summary>
        /// Pump Pressure
        /// </summary>
          PP,
        /// <summary>
        /// Penetration Rate
        /// </summary>
          PR,
        /// <summary>
        /// Rig Repairs
        /// </summary>
          RIG,
        /// <summary>
        /// Total Depth/Casing Depth
        /// </summary>
          TD,
        /// <summary>
        /// Torque
        /// </summary>
          TQ,
        /// <summary>
        /// Twist Off
        /// </summary>
          TW,
        /// <summary>
        /// Weather Conditions
        /// </summary>
          WC,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the NozzleType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the NozzleType xsd enumeration.")]
        public enum NozzleType 
        {
        /// <summary>
        /// 
        /// </summary>
          extended,
        /// <summary>
        /// 
        /// </summary>
          normal,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ConnectionPosition xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ConnectionPosition xsd enumeration.")]
        public enum ConnectionPosition 
        {
        /// <summary>
        /// The connection is the same at both ends of the component
        /// </summary>
          both,
        /// <summary>
        /// This connection is only at the bottom of the component
        /// </summary>
          bottom,
        /// <summary>
        /// This connection is only at the top of the component
        /// </summary>
          top,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the JarType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the JarType xsd enumeration.")]
        public enum JarType 
        {
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// 
        /// </summary>
          hydraulic,
        /// <summary>
        /// hydromechanical property
        /// </summary>
          [XmlEnum("hydro mechanical")]
          hydromechanical,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the JarAction xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the JarAction xsd enumeration.")]
        public enum JarAction 
        {
        /// <summary>
        /// 
        /// </summary>
          up,
        /// <summary>
        /// 
        /// </summary>
          down,
        /// <summary>
        /// 
        /// </summary>
          both,
        /// <summary>
        /// 
        /// </summary>
          vibrating,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the MeasurementType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the MeasurementType xsd enumeration.")]
        public enum MeasurementType 
        {
        /// <summary>
        /// Output from an accelerometer on a logging tool.
        /// </summary>
          acceleration,
        /// <summary>
        /// acousticcaliper property
        /// </summary>
          [XmlEnum("acoustic caliper")]
          acousticcaliper,
        /// <summary>
        /// acousticcasingcollarlocator property
        /// </summary>
          [XmlEnum("acoustic casing collar locator")]
          acousticcasingcollarlocator,
        /// <summary>
        /// acousticimpedance property
        /// </summary>
          [XmlEnum("acoustic impedance")]
          acousticimpedance,
        /// <summary>
        /// acousticporosity property
        /// </summary>
          [XmlEnum("acoustic porosity")]
          acousticporosity,
        /// <summary>
        /// acousticvelocity property
        /// </summary>
          [XmlEnum("acoustic velocity")]
          acousticvelocity,
        /// <summary>
        /// acousticwavematrixtraveltime property
        /// </summary>
          [XmlEnum("acoustic wave matrix travel time")]
          acousticwavematrixtraveltime,
        /// <summary>
        /// acousticwavetraveltime property
        /// </summary>
          [XmlEnum("acoustic wave travel time")]
          acousticwavetraveltime,
        /// <summary>
        /// Any measurement of the maximum departure of a wave from an average value.
        /// </summary>
          amplitude,
        /// <summary>
        /// amplitudeofacousticwave property
        /// </summary>
          [XmlEnum("amplitude of acoustic wave")]
          amplitudeofacousticwave,
        /// <summary>
        /// amplitudeofEMwave property
        /// </summary>
          [XmlEnum("amplitude of E-M wave")]
          amplitudeofEMwave,
        /// <summary>
        /// amplituderatio property
        /// </summary>
          [XmlEnum("amplitude ratio")]
          amplituderatio,
        /// <summary>
        /// A particular extent of space or surface.
        /// </summary>
          area,
        /// <summary>
        /// The amount of reduction in the amplitude of a wave.
        /// </summary>
          attenuation,
        /// <summary>
        /// attenuationofacousticwave property
        /// </summary>
          [XmlEnum("attenuation of acoustic wave")]
          attenuationofacousticwave,
        /// <summary>
        /// attenuationofEMwave property
        /// </summary>
          [XmlEnum("attenuation of E-M wave")]
          attenuationofEMwave,
        /// <summary>
        /// A general classification for measurements which are very specialized and not normally accessed by petrophysicists.
        /// </summary>
          auxiliary,
        /// <summary>
        /// averageporosity property
        /// </summary>
          [XmlEnum("average porosity")]
          averageporosity,
        /// <summary>
        /// In the horizontal plane, it is the clockwise angle of departure from magnetic north (while looking down hole).
        /// </summary>
          azimuth,
        /// <summary>
        /// baritemudcorrection property
        /// </summary>
          [XmlEnum("barite mud correction")]
          baritemudcorrection,
        /// <summary>
        /// bedthicknesscorrection property
        /// </summary>
          [XmlEnum("bed thickness correction")]
          bedthicknesscorrection,
        /// <summary>
        /// bitsize property
        /// </summary>
          [XmlEnum("bit size")]
          bitsize,
        /// <summary>
        /// A well log trace which has been edited to reflect sharp bed boundaries. The trace has a square wave appearance.
        /// </summary>
          blocked,
        /// <summary>
        /// boreholeenvironmentcorrection property
        /// </summary>
          [XmlEnum("borehole environment correction")]
          boreholeenvironmentcorrection,
        /// <summary>
        /// boreholefluidcompositioncorrection property
        /// </summary>
          [XmlEnum("borehole fluid composition correction")]
          boreholefluidcompositioncorrection,
        /// <summary>
        /// boreholefluidcorrection property
        /// </summary>
          [XmlEnum("borehole fluid correction")]
          boreholefluidcorrection,
        /// <summary>
        /// boreholesizecorrection property
        /// </summary>
          [XmlEnum("borehole size correction")]
          boreholesizecorrection,
        /// <summary>
        /// bromidemudcorrection property
        /// </summary>
          [XmlEnum("bromide mud correction")]
          bromidemudcorrection,
        /// <summary>
        /// bulkcompressibility property
        /// </summary>
          [XmlEnum("bulk compressibility")]
          bulkcompressibility,
        /// <summary>
        /// bulkdensity property
        /// </summary>
          [XmlEnum("bulk density")]
          bulkdensity,
        /// <summary>
        /// bulkvolume property
        /// </summary>
          [XmlEnum("bulk volume")]
          bulkvolume,
        /// <summary>
        /// bulkvolumegas property
        /// </summary>
          [XmlEnum("bulk volume gas")]
          bulkvolumegas,
        /// <summary>
        /// bulkvolumehydrocarbon property
        /// </summary>
          [XmlEnum("bulk volume hydrocarbon")]
          bulkvolumehydrocarbon,
        /// <summary>
        /// bulkvolumeoil property
        /// </summary>
          [XmlEnum("bulk volume oil")]
          bulkvolumeoil,
        /// <summary>
        /// bulkvolumewater property
        /// </summary>
          [XmlEnum("bulk volume water")]
          bulkvolumewater,
        /// <summary>
        /// COratio property
        /// </summary>
          [XmlEnum("C/O ratio")]
          COratio,
        /// <summary>
        /// A well log used to record hole diameter (open or cased).
        /// </summary>
          caliper,
        /// <summary>
        /// casedholecorrection property
        /// </summary>
          [XmlEnum("cased hole correction")]
          casedholecorrection,
        /// <summary>
        /// casingcollarlocator property
        /// </summary>
          [XmlEnum("casing collar locator")]
          casingcollarlocator,
        /// <summary>
        /// casingcorrection property
        /// </summary>
          [XmlEnum("casing correction")]
          casingcorrection,
        /// <summary>
        /// casingdiametercorrection property
        /// </summary>
          [XmlEnum("casing diameter correction")]
          casingdiametercorrection,
        /// <summary>
        /// casinginspection property
        /// </summary>
          [XmlEnum("casing inspection")]
          casinginspection,
        /// <summary>
        /// casingthicknesscorrection property
        /// </summary>
          [XmlEnum("casing thickness correction")]
          casingthicknesscorrection,
        /// <summary>
        /// casingweightcorrection property
        /// </summary>
          [XmlEnum("casing weight correction")]
          casingweightcorrection,
        /// <summary>
        /// cementcorrection property
        /// </summary>
          [XmlEnum("cement correction")]
          cementcorrection,
        /// <summary>
        /// cementdensitycorrection property
        /// </summary>
          [XmlEnum("cement density correction")]
          cementdensitycorrection,
        /// <summary>
        /// cementevaluation property
        /// </summary>
          [XmlEnum("cement evaluation")]
          cementevaluation,
        /// <summary>
        /// cementthicknesscorrection property
        /// </summary>
          [XmlEnum("cement thickness correction")]
          cementthicknesscorrection,
        /// <summary>
        /// cementtypecorrection property
        /// </summary>
          [XmlEnum("cement type correction")]
          cementtypecorrection,
        /// <summary>
        /// CHdensityporosity property
        /// </summary>
          [XmlEnum("CH density porosity")]
          CHdensityporosity,
        /// <summary>
        /// CHdolomitedensityporosity property
        /// </summary>
          [XmlEnum("CH dolomite density porosity")]
          CHdolomitedensityporosity,
        /// <summary>
        /// CHdolomiteneutronporosity property
        /// </summary>
          [XmlEnum("CH dolomite neutron porosity")]
          CHdolomiteneutronporosity,
        /// <summary>
        /// CHlimestonedensityporosity property
        /// </summary>
          [XmlEnum("CH limestone density porosity")]
          CHlimestonedensityporosity,
        /// <summary>
        /// CHlimestoneneutronporosity property
        /// </summary>
          [XmlEnum("CH limestone neutron porosity")]
          CHlimestoneneutronporosity,
        /// <summary>
        /// CHneutronporosity property
        /// </summary>
          [XmlEnum("CH neutron porosity")]
          CHneutronporosity,
        /// <summary>
        /// CHsandstonedensityporosity property
        /// </summary>
          [XmlEnum("CH sandstone density porosity")]
          CHsandstonedensityporosity,
        /// <summary>
        /// CHsandstoneneutronporosity property
        /// </summary>
          [XmlEnum("CH sandstone neutron porosity")]
          CHsandstoneneutronporosity,
        /// <summary>
        /// compressionalwavedolomiteporosity property
        /// </summary>
          [XmlEnum("compressional wave dolomite porosity")]
          compressionalwavedolomiteporosity,
        /// <summary>
        /// compressionalwavelimestoneporosity property
        /// </summary>
          [XmlEnum("compressional wave limestone porosity")]
          compressionalwavelimestoneporosity,
        /// <summary>
        /// compressionalwavematrixtraveltime property
        /// </summary>
          [XmlEnum("compressional wave matrix travel time")]
          compressionalwavematrixtraveltime,
        /// <summary>
        /// compressionalwavesandstoneporosity property
        /// </summary>
          [XmlEnum("compressional wave sandstone porosity")]
          compressionalwavesandstoneporosity,
        /// <summary>
        /// compressionalwavetraveltime property
        /// </summary>
          [XmlEnum("compressional wave travel time")]
          compressionalwavetraveltime,
        /// <summary>
        /// The property of a medium (solid or fluid) which allows the medium to conduct a form of energy; e.g., electrical conductivity or thermal conductivity.
        /// </summary>
          conductivity,
        /// <summary>
        /// conductivityfromattenuation property
        /// </summary>
          [XmlEnum("conductivity from attenuation")]
          conductivityfromattenuation,
        /// <summary>
        /// conductivityfromphaseshift property
        /// </summary>
          [XmlEnum("conductivity from phase shift")]
          conductivityfromphaseshift,
        /// <summary>
        /// connatewaterconductivity property
        /// </summary>
          [XmlEnum("connate water conductivity")]
          connatewaterconductivity,
        /// <summary>
        /// connatewaterresistivity property
        /// </summary>
          [XmlEnum("connate water resistivity")]
          connatewaterresistivity,
        /// <summary>
        /// conventionalcoreporosity property
        /// </summary>
          [XmlEnum("conventional core porosity")]
          conventionalcoreporosity,
        /// <summary>
        /// corematrixdensity property
        /// </summary>
          [XmlEnum("core matrix density")]
          corematrixdensity,
        /// <summary>
        /// corepermeability property
        /// </summary>
          [XmlEnum("core permeability")]
          corepermeability,
        /// <summary>
        /// coreporosity property
        /// </summary>
          [XmlEnum("core porosity")]
          coreporosity,
        /// <summary>
        /// A trace which has had corrections applied; e.g. environmental corrections.
        /// </summary>
          corrected,
        /// <summary>
        /// countrate property
        /// </summary>
          [XmlEnum("count rate")]
          countrate,
        /// <summary>
        /// countrateratio property
        /// </summary>
          [XmlEnum("count rate ratio")]
          countrateratio,
        /// <summary>
        /// crossplotporosity property
        /// </summary>
          [XmlEnum("cross plot porosity")]
          crossplotporosity,
        /// <summary>
        /// decaytime property
        /// </summary>
          [XmlEnum("decay time")]
          decaytime,
        /// <summary>
        /// deepconductivity property
        /// </summary>
          [XmlEnum("deep conductivity")]
          deepconductivity,
        /// <summary>
        /// deepinductionconductivity property
        /// </summary>
          [XmlEnum("deep induction conductivity")]
          deepinductionconductivity,
        /// <summary>
        /// deepinductionresistivity property
        /// </summary>
          [XmlEnum("deep induction resistivity")]
          deepinductionresistivity,
        /// <summary>
        /// deeplaterologconductivity property
        /// </summary>
          [XmlEnum("deep laterolog conductivity")]
          deeplaterologconductivity,
        /// <summary>
        /// deeplaterologresistivity property
        /// </summary>
          [XmlEnum("deep laterolog resistivity")]
          deeplaterologresistivity,
        /// <summary>
        /// deepresistivity property
        /// </summary>
          [XmlEnum("deep resistivity")]
          deepresistivity,
        /// <summary>
        /// Mass per unit Volume - well logging units are usually gm/cc.
        /// </summary>
          density,
        /// <summary>
        /// densityporosity property
        /// </summary>
          [XmlEnum("density porosity")]
          densityporosity,
        /// <summary>
        /// The distance to a point in a wellbore.
        /// </summary>
          depth,
        /// <summary>
        /// depthadjusted property
        /// </summary>
          [XmlEnum("depth adjusted")]
          depthadjusted,
        /// <summary>
        /// depthderivedfromvelocity property
        /// </summary>
          [XmlEnum("depth derived from velocity")]
          depthderivedfromvelocity,
        /// <summary>
        /// Departure of a borehole from vertical. Also, the angle measured between the tool axis and vertical.
        /// </summary>
          deviation,
        /// <summary>
        /// Relative permittivity.
        /// </summary>
          dielectric,
        /// <summary>
        /// diffusioncorrection property
        /// </summary>
          [XmlEnum("diffusion correction")]
          diffusioncorrection,
        /// <summary>
        /// The angle that a structural surface, e.g. a bedding or fault plane, makes with the horizontal, measured perpendicular to the strike of the structure.
        /// </summary>
          dip,
        /// <summary>
        /// Any of a number of measurements produced by a tool designed to measure formation dip and borehole characteristics through direct and indirect measurements.
        /// </summary>
          dipmeter,
        /// <summary>
        /// dipmeterconductivity property
        /// </summary>
          [XmlEnum("dipmeter conductivity")]
          dipmeterconductivity,
        /// <summary>
        /// dipmeterresistivity property
        /// </summary>
          [XmlEnum("dipmeter resistivity")]
          dipmeterresistivity,
        /// <summary>
        /// dolomiteacousticporosity property
        /// </summary>
          [XmlEnum("dolomite acoustic porosity")]
          dolomiteacousticporosity,
        /// <summary>
        /// dolomitedensityporosity property
        /// </summary>
          [XmlEnum("dolomite density porosity")]
          dolomitedensityporosity,
        /// <summary>
        /// dolomiteneutronporosity property
        /// </summary>
          [XmlEnum("dolomite neutron porosity")]
          dolomiteneutronporosity,
        /// <summary>
        /// A well log trace which has been corrected or adjusted through an editing process.
        /// </summary>
          edited,
        /// <summary>
        /// effectiveporosity property
        /// </summary>
          [XmlEnum("effective porosity")]
          effectiveporosity,
        /// <summary>
        /// electriccurrent property
        /// </summary>
          [XmlEnum("electric current")]
          electriccurrent,
        /// <summary>
        /// electricpotential property
        /// </summary>
          [XmlEnum("electric potential")]
          electricpotential,
        /// <summary>
        /// electromagneticwavematrixtraveltime property
        /// </summary>
          [XmlEnum("electromagnetic wave matrix travel time")]
          electromagneticwavematrixtraveltime,
        /// <summary>
        /// electromagneticwavetraveltime property
        /// </summary>
          [XmlEnum("electromagnetic wave travel time")]
          electromagneticwavetraveltime,
        /// <summary>
        /// The elemental composition, generally in weight percent, of a formation as calculated from information obtained from a geochemical logging pass; e.g., weight percent of Al, Si, Ca, Fe, etc.
        /// </summary>
          element,
        /// <summary>
        /// elementalratio property
        /// </summary>
          [XmlEnum("elemental ratio")]
          elementalratio,
        /// <summary>
        /// A well log trace which has been filtered to improve its value; e.g. inverse filtering for better resolution.
        /// </summary>
          enhanced,
        /// <summary>
        /// A well log trace which has had a filter applied to it.
        /// </summary>
          filtered,
        /// <summary>
        /// A logging tool to measure the rate and/or direction of fluid flow in a wellbore.
        /// </summary>
          flowmeter,
        /// <summary>
        /// fluiddensity property
        /// </summary>
          [XmlEnum("fluid density")]
          fluiddensity,
        /// <summary>
        /// fluidvelocity property
        /// </summary>
          [XmlEnum("fluid velocity")]
          fluidvelocity,
        /// <summary>
        /// fluidviscosity property
        /// </summary>
          [XmlEnum("fluid viscosity")]
          fluidviscosity,
        /// <summary>
        /// flushedzoneconductivity property
        /// </summary>
          [XmlEnum("flushed zone conductivity")]
          flushedzoneconductivity,
        /// <summary>
        /// flushedzoneresistivity property
        /// </summary>
          [XmlEnum("flushed zone resistivity")]
          flushedzoneresistivity,
        /// <summary>
        /// flushedzonesaturation property
        /// </summary>
          [XmlEnum("flushed zone saturation")]
          flushedzonesaturation,
        /// <summary>
        /// Energy exerted or brought to bear.
        /// </summary>
          force,
        /// <summary>
        /// formationdensitycorrection property
        /// </summary>
          [XmlEnum("formation density correction")]
          formationdensitycorrection,
        /// <summary>
        /// formationpropertiescorrection property
        /// </summary>
          [XmlEnum("formation properties correction")]
          formationpropertiescorrection,
        /// <summary>
        /// formationsalinitycorrection property
        /// </summary>
          [XmlEnum("formation salinity correction")]
          formationsalinitycorrection,
        /// <summary>
        /// formationsaturationcorrection property
        /// </summary>
          [XmlEnum("formation saturation correction")]
          formationsaturationcorrection,
        /// <summary>
        /// formationvolumefactorcorrection property
        /// </summary>
          [XmlEnum("formation volume factor correction")]
          formationvolumefactorcorrection,
        /// <summary>
        /// formationwaterdensitycorrection property
        /// </summary>
          [XmlEnum("formation water density correction")]
          formationwaterdensitycorrection,
        /// <summary>
        /// formationwatersaturationcorrection property
        /// </summary>
          [XmlEnum("formation water saturation correction")]
          formationwatersaturationcorrection,
        /// <summary>
        /// freefluidindex property
        /// </summary>
          [XmlEnum("free fluid index")]
          freefluidindex,
        /// <summary>
        /// frictioneffectcorrection property
        /// </summary>
          [XmlEnum("friction effect correction")]
          frictioneffectcorrection,
        /// <summary>
        /// gammaray property
        /// </summary>
          [XmlEnum("gamma ray")]
          gammaray,
        /// <summary>
        /// gammarayminusuranium property
        /// </summary>
          [XmlEnum("gamma ray minus uranium")]
          gammarayminusuranium,
        /// <summary>
        /// gassaturation property
        /// </summary>
          [XmlEnum("gas saturation")]
          gassaturation,
        /// <summary>
        /// The measurement of the average density of fluids in a wellbore.
        /// </summary>
          gradiomanometer,
        /// <summary>
        /// highfrequencyconductivity property
        /// </summary>
          [XmlEnum("high frequency conductivity")]
          highfrequencyconductivity,
        /// <summary>
        /// highfrequencyelectromagnetic property
        /// </summary>
          [XmlEnum("high frequency electromagnetic")]
          highfrequencyelectromagnetic,
        /// <summary>
        /// highfrequencyelectromagneticporosity property
        /// </summary>
          [XmlEnum("high frequency electromagnetic porosity")]
          highfrequencyelectromagneticporosity,
        /// <summary>
        /// highfrequencyEMphaseshift property
        /// </summary>
          [XmlEnum("high frequency E-M phase shift")]
          highfrequencyEMphaseshift,
        /// <summary>
        /// highfrequencyresistivity property
        /// </summary>
          [XmlEnum("high frequency resistivity")]
          highfrequencyresistivity,
        /// <summary>
        /// hydrocarboncorrection property
        /// </summary>
          [XmlEnum("hydrocarbon correction")]
          hydrocarboncorrection,
        /// <summary>
        /// hydrocarbondensitycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon density correction")]
          hydrocarbondensitycorrection,
        /// <summary>
        /// hydrocarbongravitycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon gravity correction")]
          hydrocarbongravitycorrection,
        /// <summary>
        /// hydrocarbonsaturation property
        /// </summary>
          [XmlEnum("hydrocarbon saturation")]
          hydrocarbonsaturation,
        /// <summary>
        /// hydrocarbonviscositycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon viscosity correction")]
          hydrocarbonviscositycorrection,
        /// <summary>
        /// The likeness of an object produced by an electrical device.
        /// </summary>
          image,
        /// <summary>
        /// interpretationvariable property
        /// </summary>
          [XmlEnum("interpretation variable")]
          interpretationvariable,
        /// <summary>
        /// ironmudcorrection property
        /// </summary>
          [XmlEnum("iron mud correction")]
          ironmudcorrection,
        /// <summary>
        /// A well log trace which has had two or more runs spliced together to make a single trace.
        /// </summary>
          joined,
        /// <summary>
        /// KClmudcorrection property
        /// </summary>
          [XmlEnum("KCl mud correction")]
          KClmudcorrection,
        /// <summary>
        /// A measured distance or dimension.
        /// </summary>
          length,
        /// <summary>
        /// limestoneacousticporosity property
        /// </summary>
          [XmlEnum("limestone acoustic porosity")]
          limestoneacousticporosity,
        /// <summary>
        /// limestonedensityporosity property
        /// </summary>
          [XmlEnum("limestone density porosity")]
          limestonedensityporosity,
        /// <summary>
        /// limestoneneutronporosity property
        /// </summary>
          [XmlEnum("limestone neutron porosity")]
          limestoneneutronporosity,
        /// <summary>
        /// lithologycorrection property
        /// </summary>
          [XmlEnum("lithology correction")]
          lithologycorrection,
        /// <summary>
        /// logderivedpermeability property
        /// </summary>
          [XmlEnum("log derived permeability")]
          logderivedpermeability,
        /// <summary>
        /// logmatrixdensity property
        /// </summary>
          [XmlEnum("log matrix density")]
          logmatrixdensity,
        /// <summary>
        /// magneticcasingcollarlocator property
        /// </summary>
          [XmlEnum("magnetic casing collar locator")]
          magneticcasingcollarlocator,
        /// <summary>
        /// matrixdensity property
        /// </summary>
          [XmlEnum("matrix density")]
          matrixdensity,
        /// <summary>
        /// matrixtraveltime property
        /// </summary>
          [XmlEnum("matrix travel time")]
          matrixtraveltime,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// mechanicalcaliper property
        /// </summary>
          [XmlEnum("mechanical caliper")]
          mechanicalcaliper,
        /// <summary>
        /// mechanicalcasingcollarlocator property
        /// </summary>
          [XmlEnum("mechanical casing collar locator")]
          mechanicalcasingcollarlocator,
        /// <summary>
        /// mediumconductivity property
        /// </summary>
          [XmlEnum("medium conductivity")]
          mediumconductivity,
        /// <summary>
        /// mediuminductionconductivity property
        /// </summary>
          [XmlEnum("medium induction conductivity")]
          mediuminductionconductivity,
        /// <summary>
        /// mediuminductionresistivity property
        /// </summary>
          [XmlEnum("medium induction resistivity")]
          mediuminductionresistivity,
        /// <summary>
        /// mediumlaterologconductivity property
        /// </summary>
          [XmlEnum("medium laterolog conductivity")]
          mediumlaterologconductivity,
        /// <summary>
        /// mediumlaterologresistivity property
        /// </summary>
          [XmlEnum("medium laterolog resistivity")]
          mediumlaterologresistivity,
        /// <summary>
        /// mediumresistivity property
        /// </summary>
          [XmlEnum("medium resistivity")]
          mediumresistivity,
        /// <summary>
        /// microconductivity property
        /// </summary>
          [XmlEnum("micro conductivity")]
          microconductivity,
        /// <summary>
        /// microinverseconductivity property
        /// </summary>
          [XmlEnum("micro inverse conductivity")]
          microinverseconductivity,
        /// <summary>
        /// microinverseresistivity property
        /// </summary>
          [XmlEnum("micro inverse resistivity")]
          microinverseresistivity,
        /// <summary>
        /// microlaterologconductivity property
        /// </summary>
          [XmlEnum("micro laterolog conductivity")]
          microlaterologconductivity,
        /// <summary>
        /// microlaterologresistivity property
        /// </summary>
          [XmlEnum("micro laterolog resistivity")]
          microlaterologresistivity,
        /// <summary>
        /// micronormalconductivity property
        /// </summary>
          [XmlEnum("micro normal conductivity")]
          micronormalconductivity,
        /// <summary>
        /// micronormalresistivity property
        /// </summary>
          [XmlEnum("micro normal resistivity")]
          micronormalresistivity,
        /// <summary>
        /// microresistivity property
        /// </summary>
          [XmlEnum("micro resistivity")]
          microresistivity,
        /// <summary>
        /// microsphericallyfocusedconductivity property
        /// </summary>
          [XmlEnum("micro spherically focused conductivity")]
          microsphericallyfocusedconductivity,
        /// <summary>
        /// microsphericallyfocusedresistivity property
        /// </summary>
          [XmlEnum("micro spherically focused resistivity")]
          microsphericallyfocusedresistivity,
        /// <summary>
        /// The mineral composition, generally in weight percent, of a formation as calculated from elemental information obtained from a geochemical logging pass; e.g., weight percent of dolomite, calcite, illite, quartzite, etc.
        /// </summary>
          mineral,
        /// <summary>
        /// mudcakeconductivity property
        /// </summary>
          [XmlEnum("mud cake conductivity")]
          mudcakeconductivity,
        /// <summary>
        /// mudcakecorrection property
        /// </summary>
          [XmlEnum("mud cake correction")]
          mudcakecorrection,
        /// <summary>
        /// mudcakedensitycorrection property
        /// </summary>
          [XmlEnum("mud cake density correction")]
          mudcakedensitycorrection,
        /// <summary>
        /// mudcakeresistivity property
        /// </summary>
          [XmlEnum("mud cake resistivity")]
          mudcakeresistivity,
        /// <summary>
        /// mudcakeresistivitycorrection property
        /// </summary>
          [XmlEnum("mud cake resistivity correction")]
          mudcakeresistivitycorrection,
        /// <summary>
        /// mudcakethicknesscorrection property
        /// </summary>
          [XmlEnum("mud cake thickness correction")]
          mudcakethicknesscorrection,
        /// <summary>
        /// mudcompositioncorrection property
        /// </summary>
          [XmlEnum("mud composition correction")]
          mudcompositioncorrection,
        /// <summary>
        /// mudconductivity property
        /// </summary>
          [XmlEnum("mud conductivity")]
          mudconductivity,
        /// <summary>
        /// mudfiltrateconductivity property
        /// </summary>
          [XmlEnum("mud filtrate conductivity")]
          mudfiltrateconductivity,
        /// <summary>
        /// mudfiltratecorrection property
        /// </summary>
          [XmlEnum("mud filtrate correction")]
          mudfiltratecorrection,
        /// <summary>
        /// mudfiltratedensitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate density correction")]
          mudfiltratedensitycorrection,
        /// <summary>
        /// mudfiltrateresistivity property
        /// </summary>
          [XmlEnum("mud filtrate resistivity")]
          mudfiltrateresistivity,
        /// <summary>
        /// mudfiltrateresistivitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate resistivity correction")]
          mudfiltrateresistivitycorrection,
        /// <summary>
        /// mudfiltratesalinitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate salinity correction")]
          mudfiltratesalinitycorrection,
        /// <summary>
        /// mudresistivity property
        /// </summary>
          [XmlEnum("mud resistivity")]
          mudresistivity,
        /// <summary>
        /// mudsalinitycorrection property
        /// </summary>
          [XmlEnum("mud salinity correction")]
          mudsalinitycorrection,
        /// <summary>
        /// mudviscositycorrection property
        /// </summary>
          [XmlEnum("mud viscosity correction")]
          mudviscositycorrection,
        /// <summary>
        /// mudweightcorrection property
        /// </summary>
          [XmlEnum("mud weight correction")]
          mudweightcorrection,
        /// <summary>
        /// neutrondieawaytime property
        /// </summary>
          [XmlEnum("neutron die away time")]
          neutrondieawaytime,
        /// <summary>
        /// neutronporosity property
        /// </summary>
          [XmlEnum("neutron porosity")]
          neutronporosity,
        /// <summary>
        /// nuclearcaliper property
        /// </summary>
          [XmlEnum("nuclear caliper")]
          nuclearcaliper,
        /// <summary>
        /// nuclearmagneticdecaytime property
        /// </summary>
          [XmlEnum("nuclear magnetic decay time")]
          nuclearmagneticdecaytime,
        /// <summary>
        /// nuclearmagnetismlogpermeability property
        /// </summary>
          [XmlEnum("nuclear magnetism log permeability")]
          nuclearmagnetismlogpermeability,
        /// <summary>
        /// nuclearmagnetismporosity property
        /// </summary>
          [XmlEnum("nuclear magnetism porosity")]
          nuclearmagnetismporosity,
        /// <summary>
        /// OHdensityporosity property
        /// </summary>
          [XmlEnum("OH density porosity")]
          OHdensityporosity,
        /// <summary>
        /// OHdolomitedensityporosity property
        /// </summary>
          [XmlEnum("OH dolomite density porosity")]
          OHdolomitedensityporosity,
        /// <summary>
        /// OHdolomiteneutronporosity property
        /// </summary>
          [XmlEnum("OH dolomite neutron porosity")]
          OHdolomiteneutronporosity,
        /// <summary>
        /// OHlimestonedensityporosity property
        /// </summary>
          [XmlEnum("OH limestone density porosity")]
          OHlimestonedensityporosity,
        /// <summary>
        /// OHlimestoneneutronporosity property
        /// </summary>
          [XmlEnum("OH limestone neutron porosity")]
          OHlimestoneneutronporosity,
        /// <summary>
        /// OHneutronporosity property
        /// </summary>
          [XmlEnum("OH neutron porosity")]
          OHneutronporosity,
        /// <summary>
        /// OHsandstonedensityporosity property
        /// </summary>
          [XmlEnum("OH sandstone density porosity")]
          OHsandstonedensityporosity,
        /// <summary>
        /// OHsandstoneneutronporosity property
        /// </summary>
          [XmlEnum("OH sandstone neutron porosity")]
          OHsandstoneneutronporosity,
        /// <summary>
        /// oilbasedmudcorrection property
        /// </summary>
          [XmlEnum("oil based mud correction")]
          oilbasedmudcorrection,
        /// <summary>
        /// oilsaturation property
        /// </summary>
          [XmlEnum("oil saturation")]
          oilsaturation,
        /// <summary>
        /// The procedure for introducing holes through casing into a formation so that formation fluids can enter into the casing.
        /// </summary>
          perforating,
        /// <summary>
        /// The permeability of the surrounding formation.
        /// </summary>
          permeability,
        /// <summary>
        /// phaseshift property
        /// </summary>
          [XmlEnum("phase shift")]
          phaseshift,
        /// <summary>
        /// photoelectricabsorption property
        /// </summary>
          [XmlEnum("photoelectric absorption")]
          photoelectricabsorption,
        /// <summary>
        /// photoelectricabsorptioncorrection property
        /// </summary>
          [XmlEnum("photoelectric absorption correction")]
          photoelectricabsorptioncorrection,
        /// <summary>
        /// physicalmeasurementcorrection property
        /// </summary>
          [XmlEnum("physical measurement correction")]
          physicalmeasurementcorrection,
        /// <summary>
        /// planeangle property
        /// </summary>
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// The total pore volume occupied by fluid in a rock. Includes isolated nonconnecting pores and volume occupied by absorbed, immobile fluid.
        /// </summary>
          porosity,
        /// <summary>
        /// porositycorrection property
        /// </summary>
          [XmlEnum("porosity correction")]
          porositycorrection,
        /// <summary>
        /// The measurement of gamma radiation emitted by potassium.
        /// </summary>
          potassium,
        /// <summary>
        /// The force or thrust exerted upon a surface divided by the area of the surface.
        /// </summary>
          pressure,
        /// <summary>
        /// pressurecorrection property
        /// </summary>
          [XmlEnum("pressure correction")]
          pressurecorrection,
        /// <summary>
        /// A well log trace which has been processed in some way; e.g., depth adjusted or environmentally corrected.
        /// </summary>
          processed,
        /// <summary>
        /// pulsedneutronporosity property
        /// </summary>
          [XmlEnum("pulsed neutron porosity")]
          pulsedneutronporosity,
        /// <summary>
        /// Degree of excellence.
        /// </summary>
          quality,
        /// <summary>
        /// A relationship between two values usually expressed as a fraction.
        /// </summary>
          ratio,
        /// <summary>
        /// A well log trace which has not had any processing. In other words, a trace which has not been depth adjusted or environmentally corrected.
        /// </summary>
          raw,
        /// <summary>
        /// relativebearing property
        /// </summary>
          [XmlEnum("relative bearing")]
          relativebearing,
        /// <summary>
        /// The property measuring the resistance to flow of an electrical current.
        /// </summary>
          resistivity,
        /// <summary>
        /// resistivityfactorcorrection property
        /// </summary>
          [XmlEnum("resistivity factor correction")]
          resistivityfactorcorrection,
        /// <summary>
        /// resistivityfromattenuation property
        /// </summary>
          [XmlEnum("resistivity from attenuation")]
          resistivityfromattenuation,
        /// <summary>
        /// resistivityfromphaseshift property
        /// </summary>
          [XmlEnum("resistivity from phase shift")]
          resistivityfromphaseshift,
        /// <summary>
        /// resistivityphaseshift property
        /// </summary>
          [XmlEnum("resistivity phase shift")]
          resistivityphaseshift,
        /// <summary>
        /// resistivityratio property
        /// </summary>
          [XmlEnum("resistivity ratio")]
          resistivityratio,
        /// <summary>
        /// The concentration of ions in solution.
        /// </summary>
          salinity,
        /// <summary>
        /// To take a sample of or from something.
        /// </summary>
          sampling,
        /// <summary>
        /// sandstoneacousticporosity property
        /// </summary>
          [XmlEnum("sandstone acoustic porosity")]
          sandstoneacousticporosity,
        /// <summary>
        /// sandstonedensityporosity property
        /// </summary>
          [XmlEnum("sandstone density porosity")]
          sandstonedensityporosity,
        /// <summary>
        /// sandstoneneutronporosity property
        /// </summary>
          [XmlEnum("sandstone neutron porosity")]
          sandstoneneutronporosity,
        /// <summary>
        /// The fraction or percentage of the pore volume of a rock.
        /// </summary>
          saturation,
        /// <summary>
        /// shalevolume property
        /// </summary>
          [XmlEnum("shale volume")]
          shalevolume,
        /// <summary>
        /// shallowconductivity property
        /// </summary>
          [XmlEnum("shallow conductivity")]
          shallowconductivity,
        /// <summary>
        /// shallowinductionconductivity property
        /// </summary>
          [XmlEnum("shallow induction conductivity")]
          shallowinductionconductivity,
        /// <summary>
        /// shallowinductionresistivity property
        /// </summary>
          [XmlEnum("shallow induction resistivity")]
          shallowinductionresistivity,
        /// <summary>
        /// shallowlaterologconductivity property
        /// </summary>
          [XmlEnum("shallow laterolog conductivity")]
          shallowlaterologconductivity,
        /// <summary>
        /// shallowlaterologresistivity property
        /// </summary>
          [XmlEnum("shallow laterolog resistivity")]
          shallowlaterologresistivity,
        /// <summary>
        /// shallowresistivity property
        /// </summary>
          [XmlEnum("shallow resistivity")]
          shallowresistivity,
        /// <summary>
        /// shearwavedolomiteporosity property
        /// </summary>
          [XmlEnum("shear wave dolomite porosity")]
          shearwavedolomiteporosity,
        /// <summary>
        /// shearwavelimestoneporosity property
        /// </summary>
          [XmlEnum("shear wave limestone porosity")]
          shearwavelimestoneporosity,
        /// <summary>
        /// shearwavematrixtraveltime property
        /// </summary>
          [XmlEnum("shear wave matrix travel time")]
          shearwavematrixtraveltime,
        /// <summary>
        /// shearwavesandstoneporosity property
        /// </summary>
          [XmlEnum("shear wave sandstone porosity")]
          shearwavesandstoneporosity,
        /// <summary>
        /// shearwavetraveltime property
        /// </summary>
          [XmlEnum("shear wave travel time")]
          shearwavetraveltime,
        /// <summary>
        /// A well log trace which has had its original values shifted by some factor; e.g., added or multiplied by a constant.
        /// </summary>
          shifted,
        /// <summary>
        /// sidewallcoreporosity property
        /// </summary>
          [XmlEnum("sidewall core porosity")]
          sidewallcoreporosity,
        /// <summary>
        /// The macroscopic capture cross section, i.e. the effective cross-sectional area per unit volume for the capture of neutrons.
        /// </summary>
          sigma,
        /// <summary>
        /// sigmaformation property
        /// </summary>
          [XmlEnum("sigma formation")]
          sigmaformation,
        /// <summary>
        /// sigmagas property
        /// </summary>
          [XmlEnum("sigma gas")]
          sigmagas,
        /// <summary>
        /// sigmahydrocarbon property
        /// </summary>
          [XmlEnum("sigma hydrocarbon")]
          sigmahydrocarbon,
        /// <summary>
        /// sigmamatrix property
        /// </summary>
          [XmlEnum("sigma matrix")]
          sigmamatrix,
        /// <summary>
        /// sigmaoil property
        /// </summary>
          [XmlEnum("sigma oil")]
          sigmaoil,
        /// <summary>
        /// sigmawater property
        /// </summary>
          [XmlEnum("sigma water")]
          sigmawater,
        /// <summary>
        /// slippagevelocitycorrection property
        /// </summary>
          [XmlEnum("slippage velocity correction")]
          slippagevelocitycorrection,
        /// <summary>
        /// A well log trace which has been filtered to smooth, or average the trace.
        /// </summary>
          smoothed,
        /// <summary>
        /// spectralgammaray property
        /// </summary>
          [XmlEnum("spectral gamma ray")]
          spectralgammaray,
        /// <summary>
        /// sphericallyfocusedconductivity property
        /// </summary>
          [XmlEnum("spherically focused conductivity")]
          sphericallyfocusedconductivity,
        /// <summary>
        /// sphericallyfocusedresistivity property
        /// </summary>
          [XmlEnum("spherically focused resistivity")]
          sphericallyfocusedresistivity,
        /// <summary>
        /// spontaneouspotential property
        /// </summary>
          [XmlEnum("spontaneous potential")]
          spontaneouspotential,
        /// <summary>
        /// spreadinglosscorrection property
        /// </summary>
          [XmlEnum("spreading loss correction")]
          spreadinglosscorrection,
        /// <summary>
        /// syntheticwelllogtrace property
        /// </summary>
          [XmlEnum("synthetic well log trace")]
          syntheticwelllogtrace,
        /// <summary>
        /// A temperature measurement.
        /// </summary>
          temperature,
        /// <summary>
        /// temperaturecorrection property
        /// </summary>
          [XmlEnum("temperature correction")]
          temperaturecorrection,
        /// <summary>
        /// The tension on the wireline cable while logging.
        /// </summary>
          tension,
        /// <summary>
        /// ThKratio property
        /// </summary>
          [XmlEnum("Th/K ratio")]
          ThKratio,
        /// <summary>
        /// The measurement of gamma radiation emitted by thorium.
        /// </summary>
          thorium,
        /// <summary>
        /// A measured or measurable period.
        /// </summary>
          time,
        /// <summary>
        /// tooldiametercorrection property
        /// </summary>
          [XmlEnum("tool diameter correction")]
          tooldiametercorrection,
        /// <summary>
        /// tooleccentricitycorrection property
        /// </summary>
          [XmlEnum("tool eccentricity correction")]
          tooleccentricitycorrection,
        /// <summary>
        /// totalgammaray property
        /// </summary>
          [XmlEnum("total gamma ray")]
          totalgammaray,
        /// <summary>
        /// totalporosity property
        /// </summary>
          [XmlEnum("total porosity")]
          totalporosity,
        /// <summary>
        /// tracersurvey property
        /// </summary>
          [XmlEnum("tracer survey")]
          tracersurvey,
        /// <summary>
        /// traveltime property
        /// </summary>
          [XmlEnum("travel time")]
          traveltime,
        /// <summary>
        /// trueconductivity property
        /// </summary>
          [XmlEnum("true conductivity")]
          trueconductivity,
        /// <summary>
        /// trueresistivity property
        /// </summary>
          [XmlEnum("true resistivity")]
          trueresistivity,
        /// <summary>
        /// trueverticaldepth property
        /// </summary>
          [XmlEnum("true vertical depth")]
          trueverticaldepth,
        /// <summary>
        /// tubewavedolomiteporosity property
        /// </summary>
          [XmlEnum("tube wave dolomite porosity")]
          tubewavedolomiteporosity,
        /// <summary>
        /// tubewavelimestoneporosity property
        /// </summary>
          [XmlEnum("tube wave limestone porosity")]
          tubewavelimestoneporosity,
        /// <summary>
        /// tubewavematrixtraveltime property
        /// </summary>
          [XmlEnum("tube wave matrix travel time")]
          tubewavematrixtraveltime,
        /// <summary>
        /// tubewavesandstoneporosity property
        /// </summary>
          [XmlEnum("tube wave sandstone porosity")]
          tubewavesandstoneporosity,
        /// <summary>
        /// tubewavetraveltime property
        /// </summary>
          [XmlEnum("tube wave travel time")]
          tubewavetraveltime,
        /// <summary>
        /// The measurement of gamma radiation emitted by uranium.
        /// </summary>
          uranium,
        /// <summary>
        /// directional speed
        /// </summary>
          velocity,
        /// <summary>
        /// cubic capacity
        /// </summary>
          volume,
        /// <summary>
        /// waterbasedfluidcorrection property
        /// </summary>
          [XmlEnum("water based fluid correction")]
          waterbasedfluidcorrection,
        /// <summary>
        /// waterholdupcorrection property
        /// </summary>
          [XmlEnum("water holdup correction")]
          waterholdupcorrection,
        /// <summary>
        /// watersaturatedconductivity property
        /// </summary>
          [XmlEnum("water saturated conductivity")]
          watersaturatedconductivity,
        /// <summary>
        /// watersaturatedresistivity property
        /// </summary>
          [XmlEnum("water saturated resistivity")]
          watersaturatedresistivity,
        /// <summary>
        /// watersaturation property
        /// </summary>
          [XmlEnum("water saturation")]
          watersaturation,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the BearingType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BearingType xsd enumeration.")]
        public enum BearingType 
        {
        /// <summary>
        /// oilseal property
        /// </summary>
          [XmlEnum("oil seal")]
          oilseal,
        /// <summary>
        /// mudlube property
        /// </summary>
          [XmlEnum("mud lube")]
          mudlube,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the BladeShapeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BladeShapeType xsd enumeration.")]
        public enum BladeShapeType 
        {
        /// <summary>
        /// 
        /// </summary>
          dynamic,
        /// <summary>
        /// 
        /// </summary>
          melon,
        /// <summary>
        /// 
        /// </summary>
          spiral,
        /// <summary>
        /// 
        /// </summary>
          straight,
        /// <summary>
        /// 
        /// </summary>
          variable,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the BladeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the BladeType xsd enumeration.")]
        public enum BladeType 
        {
        /// <summary>
        /// clampon property
        /// </summary>
          [XmlEnum("clamp-on")]
          clampon,
        /// <summary>
        /// 
        /// </summary>
          integral,
        /// <summary>
        /// 
        /// </summary>
          sleeve,
        /// <summary>
        /// 
        /// </summary>
          welded,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the HoleOpenerType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the HoleOpenerType xsd enumeration.")]
        public enum HoleOpenerType 
        {
        /// <summary>
        /// underreamer property
        /// </summary>
          [XmlEnum("under-reamer")]
          underreamer,
        /// <summary>
        /// fixedblade property
        /// </summary>
          [XmlEnum("fixed blade")]
          fixedblade,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the DeflectionMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the DeflectionMethod xsd enumeration.")]
        public enum DeflectionMethod 
        {
        /// <summary>
        /// pointbit property
        /// </summary>
          [XmlEnum("point bit")]
          pointbit,
        /// <summary>
        /// pushbit property
        /// </summary>
          [XmlEnum("push bit")]
          pushbit

        }

        /// <summary>
        /// This class represents the WellStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellStatus xsd enumeration.")]
        public enum WellStatus 
        {
        /// <summary>
        /// The status of a facility in which drilling, completion, and production operations have been permanently terminated.
        /// </summary>
          abandoned,
        /// <summary>
        /// For a well to be active, at least one of its wellbores must be active. For a wellbore to be active, at least one of its completions must be actively producing or injecting fluids.
        /// </summary>
          active,
        /// <summary>
        /// activeinjecting property
        /// </summary>
          [XmlEnum("active -- injecting")]
          activeinjecting,
        /// <summary>
        /// activeproducing property
        /// </summary>
          [XmlEnum("active -- producing")]
          activeproducing,
        /// <summary>
        /// The completion has been installed, but the facility is not yet active. This status is appropriate only before the initial producing or injecting activity.
        /// </summary>
          completed,
        /// <summary>
        /// The status of a well or wellbore in which drilling operations have begun, but are not yet completed. The status ends when another status becomes appropriate.
        /// </summary>
          drilling,
        /// <summary>
        /// partiallyplugged property
        /// </summary>
          [XmlEnum("partially plugged")]
          partiallyplugged,
        /// <summary>
        /// The facility has received regulatory approvel, but drilling has not yet commenced. For a well, it has been spudded. For a subsequent wellbore, the whipstock or similar device has not yet been set.
        /// </summary>
          permitted,
        /// <summary>
        /// pluggedandabandoned property
        /// </summary>
          [XmlEnum("plugged and abandoned")]
          pluggedandabandoned,
        /// <summary>
        /// The status of a well or wellbore from conception to either regulatory approval or commencement of drilling.
        /// </summary>
          proposed,
        /// <summary>
        /// The facility has been sold, so it is no longer appropriate to keep a close internal status value. Status values may be added at later times without changing the sold status.
        /// </summary>
          sold,
        /// <summary>
        /// Production or injection has been temporarily suspended in a manner that will allow immediate resumption of activities.
        /// </summary>
          suspended,
        /// <summary>
        /// temporarilyabandoned property
        /// </summary>
          [XmlEnum("temporarily abandoned")]
          temporarilyabandoned,
        /// <summary>
        /// The facility operations are suspended while tests are being conducted to determine formation and/or reservoir properties. For example, a drillstem test. This status also includes extended testing.
        /// </summary>
          testing,
        /// <summary>
        /// Information about the status of the well is confidential. This is more explicit than unknown, since it gives the reason that the status value is unknown.
        /// </summary>
          tight,
        /// <summary>
        /// workingover property
        /// </summary>
          [XmlEnum("working over")]
          workingover,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the WellPurpose xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellPurpose xsd enumeration.")]
        public enum WellPurpose 
        {
        /// <summary>
        /// A well drilled into a formation shown to be potentially productive of oil or gas by an earlier well for the purpose of obtaining more information about the reservoir. Also known as a delineation well.
        /// </summary>
          appraisal,
        /// <summary>
        /// appraisalconfirmationappraisal property
        /// </summary>
          [XmlEnum("appraisal -- confirmation appraisal")]
          appraisalconfirmationappraisal,
        /// <summary>
        /// appraisalexploratoryappraisal property
        /// </summary>
          [XmlEnum("appraisal -- exploratory appraisal")]
          appraisalexploratoryappraisal,
        /// <summary>
        /// An exploratory well drilled in an unproved area to test for a new field, a new pay, a deeper reservoir, or a shallower reservoir. Also known as a wildcat.
        /// </summary>
          exploration,
        /// <summary>
        /// explorationdeeperpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- deeper-pool wildcat")]
          explorationdeeperpoolwildcat,
        /// <summary>
        /// explorationnewfieldwildcat property
        /// </summary>
          [XmlEnum("exploration -- new-field wildcat")]
          explorationnewfieldwildcat,
        /// <summary>
        /// explorationnewpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- new-pool wildcat")]
          explorationnewpoolwildcat,
        /// <summary>
        /// explorationoutpostwildcat property
        /// </summary>
          [XmlEnum("exploration -- outpost wildcat")]
          explorationoutpostwildcat,
        /// <summary>
        /// explorationshallowerpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- shallower-pool wildcat")]
          explorationshallowerpoolwildcat,
        /// <summary>
        /// A well drilled in a zone in an area already proved productive.
        /// </summary>
          development,
        /// <summary>
        /// developmentinfilldevelopment property
        /// </summary>
          [XmlEnum("development -- infill development")]
          developmentinfilldevelopment,
        /// <summary>
        /// developmentinjector property
        /// </summary>
          [XmlEnum("development -- injector")]
          developmentinjector,
        /// <summary>
        /// developmentproducer property
        /// </summary>
          [XmlEnum("development -- producer")]
          developmentproducer,
        /// <summary>
        /// fluidstorage property
        /// </summary>
          [XmlEnum("fluid storage")]
          fluidstorage,
        /// <summary>
        /// fluidstoragegasstorage property
        /// </summary>
          [XmlEnum("fluid storage -- gas storage")]
          fluidstoragegasstorage,
        /// <summary>
        /// generalsrvc property
        /// </summary>
          [XmlEnum("general srvc")]
          generalsrvc,
        /// <summary>
        /// generalsrvcboreholereacquisition property
        /// </summary>
          [XmlEnum("general srvc -- borehole re-acquisition")]
          generalsrvcboreholereacquisition,
        /// <summary>
        /// generalsrvcobservation property
        /// </summary>
          [XmlEnum("general srvc -- observation")]
          generalsrvcobservation,
        /// <summary>
        /// generalsrvcrelief property
        /// </summary>
          [XmlEnum("general srvc -- relief")]
          generalsrvcrelief,
        /// <summary>
        /// generalsrvcresearch property
        /// </summary>
          [XmlEnum("general srvc -- research")]
          generalsrvcresearch,
        /// <summary>
        /// generalsrvcresearchdrilltest property
        /// </summary>
          [XmlEnum("general srvc -- research -- drill test")]
          generalsrvcresearchdrilltest,
        /// <summary>
        /// generalsrvcresearchstrattest property
        /// </summary>
          [XmlEnum("general srvc -- research -- strat test")]
          generalsrvcresearchstrattest,
        /// <summary>
        /// generalsrvcwastedisposal property
        /// </summary>
          [XmlEnum("general srvc -- waste disposal")]
          generalsrvcwastedisposal,
        /// <summary>
        /// A non-oil and gas E and P well drilled for the purpose of locating and/or extracting a mineral from the subsurface, usually through the injection and/or extraction of mineral-bearing fluids.
        /// </summary>
          mineral,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the WellFluid xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellFluid xsd enumeration.")]
        public enum WellFluid 
        {
        /// <summary>
        /// This is generally an injected fluid.
        /// </summary>
          air,
        /// <summary>
        /// Liquid hydrocarbons produced with natural gas that are separated from the gas by cooling and various other means. Condensate generally has an API gravity of 50 degrees to 120 degrees and is water white, straw, or bluish in color. It is the liquid recovery from a well classified as a gas well. It is generally dissolved in the gaseous state under reservoir conditions but separates as a liquid either in passing up the hole or at the surface. These hydrocarbons, from associated and nonassociated gas well gas, normally are recovered from lease separators or field facilities by mechanical separation.
        /// </summary>
          condensate,
        /// <summary>
        /// The well facility is classified as a dry well. It has not been, nor will it be used to produce or inject any fluids.
        /// </summary>
          dry,
        /// <summary>
        /// The well is classified as a gas well, producing or injecting a hydrocarbon gas. The gas is generally methane, but may have a mixture of other gases also.
        /// </summary>
          gas,
        /// <summary>
        /// gaswater property
        /// </summary>
          [XmlEnum("gas-water")]
          gaswater,
        /// <summary>
        /// nonHCgas property
        /// </summary>
          [XmlEnum("non HC gas")]
          nonHCgas,
        /// <summary>
        /// nonHCgasCO2 property
        /// </summary>
          [XmlEnum("non HC gas -- CO2")]
          nonHCgasCO2,
        /// <summary>
        /// The liquid hydrocarbon, generally referred to as crude oil.
        /// </summary>
          oil,
        /// <summary>
        /// oilgas property
        /// </summary>
          [XmlEnum("oil-gas")]
          oilgas,
        /// <summary>
        /// oilwater property
        /// </summary>
          [XmlEnum("oil-water")]
          oilwater,
        /// <summary>
        /// The gaseous state of water. This is generally an injected fluid, but it is possible that some hydrothermal wells produce steam.
        /// </summary>
          steam,
        /// <summary>
        /// The well is classified as a water well without distinguishing between brine or fresh water.
        /// </summary>
          water,
        /// <summary>
        /// waterbrine property
        /// </summary>
          [XmlEnum("water -- brine")]
          waterbrine,
        /// <summary>
        /// waterfreshwater property
        /// </summary>
          [XmlEnum("water -- fresh water")]
          waterfreshwater,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the WellDirection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellDirection xsd enumeration.")]
        public enum WellDirection 
        {
        /// <summary>
        /// huffnpuff property
        /// </summary>
          [XmlEnum("huff-n-puff")]
          huffnpuff,
        /// <summary>
        /// The well facility is injecting fluids into the subsurface.
        /// </summary>
          injector,
        /// <summary>
        /// The well facility is producing fluids from the subsurface.
        /// </summary>
          producer,
        /// <summary>
        /// The flow direction of the fluids is variable, but not on a regular basis as is the case with the huff-n-puff flow.
        /// </summary>
          uncertain,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ElevCodeEnum xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ElevCodeEnum xsd enumeration.")]
        public enum ElevCodeEnum 
        {
        /// <summary>
        /// casing flange: A flange affixed to the top of the casing string used to attach production equipment.
        /// </summary>
          CF,
        /// <summary>
        /// crown valve
        /// </summary>
          CV,
        /// <summary>
        /// derrick floor
        /// </summary>
          DF,
        /// <summary>
        /// ground level
        /// </summary>
          GL,
        /// <summary>
        /// kelly bushing
        /// </summary>
          KB,
        /// <summary>
        /// rotary bushing
        /// </summary>
          RB,
        /// <summary>
        /// rotary table
        /// </summary>
          RT,
        /// <summary>
        /// sea floor
        /// </summary>
          SF,
        /// <summary>
        /// Lowest Astronomical Tide. The lowest tide level over the duration of the National Tidal Datum Epoch (19 years).
        /// </summary>
          LAT,
        /// <summary>
        /// Mean Sea Level - A tidal datum. The arithmetic mean of hourly heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          SL,
        /// <summary>
        /// Mean Higher High Water - A tidal datum. The average of the higher high water height of each tidal day observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHHW,
        /// <summary>
        /// Mean High Water - A tidal datum. The average of all the high water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHW,
        /// <summary>
        /// Mean Lower Low Water - A tidal datum. The average of the lower low water height of each tidal day observed over the National Tidal Datum Epoch (19 years ).
        /// </summary>
          MLLW,
        /// <summary>
        /// Mean Low Water - A tidal datum. The average of all the low water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MLW,
        /// <summary>
        /// Mean Tide Level - A tidal datum. The arithmetic mean of mean high water and mean low water. Same as half-tide level.
        /// </summary>
          MTL,
        /// <summary>
        /// kickoff point
        /// </summary>
          KO,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the GeodeticDatum xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the GeodeticDatum xsd enumeration.")]
        public enum GeodeticDatum 
        {
        /// <summary>
        /// Adindian ellipsoid=CL80 region="Sudan, Ethiopia"
        /// </summary>
          ADND,
        /// <summary>
        /// ARC 1950 ellipsoid=CL80B region="Southern Africa"
        /// </summary>
          ARC50,
        /// <summary>
        /// Australian ellipsoid=GRS67 region="Australia Geodetic"
        /// </summary>
          AUSG,
        /// <summary>
        /// Camp Area Astro ellipsoid=INT24 region=Antarctica 
        /// </summary>
          CAA,
        /// <summary>
        /// Chau Astro ellipsoid=INT24 region=Paraguay 
        /// </summary>
          CHAS,
        /// <summary>
        /// Corrego Alegre ellipsoid=INT24 region=INT24 
        /// </summary>
          CORAL,
        /// <summary>
        /// European 1950 ellipsoid=INT24 region="Europe, Middle East, North Africa"
        /// </summary>
          ED50,
        /// <summary>
        /// European 1987 ellipsoid=INT24 region="Europe, Middle East, North Africa"
        /// </summary>
          ED87,
        /// <summary>
        /// Ireland 1965 ellipsoid=AIRY_MOD region=Ireland 
        /// </summary>
          ERIN65,
        /// <summary>
        /// Geodetic Datum 1949 ellipsoid=INT24 region="New Zealand"
        /// </summary>
          GD49,
        /// <summary>
        /// Ghana ellipsoid=WAR24 region=Ghana 
        /// </summary>
          GHANA,
        /// <summary>
        /// Guam 1963 ellipsoid=CL66 region="Marianas Islands"
        /// </summary>
          GUAM63,
        /// <summary>
        /// Hjorsey 1955 ellipsoid=INT24 region=Iceland 
        /// </summary>
          HJRS55,
        /// <summary>
        /// Hu-Tzu-Shan ellipsoid=INT24 region=Taiwan 
        /// </summary>
          HTS,
        /// <summary>
        /// Campo Inchauspe ellipsoid=INT24 region=Argentina 
        /// </summary>
          INCH,
        /// <summary>
        /// Indian 'Kalimpur' ellipsoid=EVER region=India 
        /// </summary>
          INDIA1,
        /// <summary>
        /// Indian 'Kalimpur' ellipsoid=INT24 region=India 
        /// </summary>
          INDIA2,
        /// <summary>
        /// Indonesia 1974 ellipsoid=GRS67 region=Indonesia 
        /// </summary>
          INDNS74,
        /// <summary>
        /// Liberia 1964 ellipsoid=CL80 region=Liberia 
        /// </summary>
          LIB64,
        /// <summary>
        /// Luzon ellipsoid=CL66 region=Philippines 
        /// </summary>
          LUZON,
        /// <summary>
        /// Merchich ellipsoid=CL80A region=Morocco 
        /// </summary>
          MRCH,
        /// <summary>
        /// North American 'Meades Ranch' ellipsoid=CL66 region="North America"
        /// </summary>
          NAD27,
        /// <summary>
        /// North American Datum of 1983 ellipsoid=GRS80 region="Canada, Cuba, U.S., Caribbean"
        /// </summary>
          NAD83,
        /// <summary>
        /// Nigeria ellipsoid=CL80 region=Nigeria 
        /// </summary>
          NGRA,
        /// <summary>
        /// 
        /// </summary>
          None,
        /// <summary>
        /// Naparima ellipsoid=INT24 region="Trinidad and Tobago"
        /// </summary>
          NPRM,
        /// <summary>
        /// Ordnance Survey of Great Britain 1936 ellipsoid=AIRY region="Great Britain, Northern Ireland"
        /// </summary>
          OSGB36,
        /// <summary>
        /// European 'Pelmert Tower, Potsdam' ellipsoid=INT24 region="Most of Eurasia, Africa"
        /// </summary>
          POTS1,
        /// <summary>
        /// Russian 'Pulkovo' ellipsoid=BESS41 
        /// </summary>
          PULK1,
        /// <summary>
        /// Russian 'Pulkovo' ellipsoid=KRSV 
        /// </summary>
          PULK2,
        /// <summary>
        /// Qornoq ellipsoid=INT24 region=Greenland 
        /// </summary>
          QRNQ,
        /// <summary>
        /// Provisional South American, 1956 ellipsoid=INT24 region="Bolivia, Chile, Colombia, Ecuador, Peru, Venezuela, the Guianas"
        /// </summary>
          SA56,
        /// <summary>
        /// Sierra Leone 1960 ellipsoid=CL80 region="Sierra Leone"
        /// </summary>
          SRL60,
        /// <summary>
        /// Tananarive (Antananarivo) Obsv. 1925T ellipsoid=INT24 region="Malagasy Republic"
        /// </summary>
          TNRV25,
        /// <summary>
        /// Tokyo ellipsoid=BESS41 region=Japan
        /// </summary>
          TOKYO,
        /// <summary>
        /// Datum defined elsewhere
        /// </summary>
          UserDefined,
        /// <summary>
        /// Voirol ellipsoid=CL80 region="Algeria, Tunisia"
        /// </summary>
          VROL,
        /// <summary>
        /// World Geodetic System 1972 ellipsoid=WGS72
        /// </summary>
          WGS72,
        /// <summary>
        /// World Geodetic System 1984 ellipsoid=WGS84 region="Sino-Soviet Bloc, SW Asia, Hydrographic, Aeronautical"
        /// </summary>
          WGS84,
        /// <summary>
        /// Yacare ellipsoid=INT24 region=Uruguay
        /// </summary>
          YACR,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the Ellipsoid xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the Ellipsoid xsd enumeration.")]
        public enum Ellipsoid 
        {
        /// <summary>
        /// Australian Old
        /// </summary>
          AGD66,
        /// <summary>
        /// Modified Airy
        /// </summary>
          AIRY_MOD,
        /// <summary>
        /// Airy 1830
        /// </summary>
          AIRY30,
        /// <summary>
        /// Airy 1849
        /// </summary>
          AIRY49,
        /// <summary>
        /// Australian National Same as KAU63 and SA69
        /// </summary>
          AUST_NAT,
        /// <summary>
        /// BESLDHD property
        /// </summary>
          [XmlEnum("BESL-DHD")]
          BESLDHD,
        /// <summary>
        /// BESLNGL property
        /// </summary>
          [XmlEnum("BESL-NGL")]
          BESLNGL,
        /// <summary>
        /// BESLRT9 property
        /// </summary>
          [XmlEnum("BESL-RT9")]
          BESLRT9,
        /// <summary>
        /// Bessel 1841
        /// </summary>
          BESS41,
        /// <summary>
        /// Bessel 1841 for Namibia
        /// </summary>
          BESSNAM,
        /// <summary>
        /// BOGOTA (International 1924)
        /// </summary>
          BOGOTA,
        /// <summary>
        /// Clarke 1858
        /// </summary>
          CL58,
        /// <summary>
        /// CL581 property
        /// </summary>
          [XmlEnum("CL58-1")]
          CL581,
        /// <summary>
        /// Clarke 1866
        /// </summary>
          CL66,
        /// <summary>
        /// CL66M property
        /// </summary>
          [XmlEnum("CL66-M")]
          CL66M,
        /// <summary>
        /// Clarke 1880
        /// </summary>
          CL80,
        /// <summary>
        /// CL80A property
        /// </summary>
          [XmlEnum("CL80-A")]
          CL80A,
        /// <summary>
        /// CL80B property
        /// </summary>
          [XmlEnum("CL80-B")]
          CL80B,
        /// <summary>
        /// CL80I property
        /// </summary>
          [XmlEnum("CL80-I")]
          CL80I,
        /// <summary>
        /// CL80J property
        /// </summary>
          [XmlEnum("CL80-J")]
          CL80J,
        /// <summary>
        /// CL80M property
        /// </summary>
          [XmlEnum("CL80-M")]
          CL80M,
        /// <summary>
        /// CL80P property
        /// </summary>
          [XmlEnum("CL80-P")]
          CL80P,
        /// <summary>
        /// CAMPO INCH (International 1924)
        /// </summary>
          CMPOINCH,
        /// <summary>
        /// Danish
        /// </summary>
          DAN,
        /// <summary>
        /// DELAMBRE 1810 
        /// </summary>
          DELA,
        /// <summary>
        /// ED50 (International 1924)
        /// </summary>
          ED50,
        /// <summary>
        /// EGYPT07 (Helmert 1906)
        /// </summary>
          EGYPT07,
        /// <summary>
        /// Everest 1830 - Indian
        /// </summary>
          EVER,
        /// <summary>
        /// Everest 1948
        /// </summary>
          EVER48,
        /// <summary>
        /// Everest 1956
        /// </summary>
          EVER56,
        /// <summary>
        /// Everest 1969
        /// </summary>
          EVER69,
        /// <summary>
        /// EVERBR property
        /// </summary>
          [XmlEnum("EVER-BR")]
          EVERBR,
        /// <summary>
        /// Modified Everest
        /// </summary>
          EVERMOD,
        /// <summary>
        /// EVERP property
        /// </summary>
          [XmlEnum("EVER-P")]
          EVERP,
        /// <summary>
        /// EVERTM property
        /// </summary>
          [XmlEnum("EVER-TM")]
          EVERTM,
        /// <summary>
        /// Everest - Timbali 
        /// </summary>
          EVTM,
        /// <summary>
        /// "Fischer 1960 aka ""Mercury"""
        /// </summary>
          FISC60,
        /// <summary>
        /// Fischer 1960 Modified
        /// </summary>
          FISC60MOD,
        /// <summary>
        /// "Fischer 1968 aka ""Modified Mercury"""
        /// </summary>
          FISC68,
        /// <summary>
        /// "Modified Fischer 1960 aka ""South Asia"""
        /// </summary>
          FISCMOD,
        /// <summary>
        /// GDA94 - Australia
        /// </summary>
          GDA94,
        /// <summary>
        /// Geodetic Reference System 1967
        /// </summary>
          GRS67,
        /// <summary>
        /// Geodetic Reference System 1980
        /// </summary>
          GRS80,
        /// <summary>
        /// Hayford 1909
        /// </summary>
          HAY09,
        /// <summary>
        /// Heiskanen 1929
        /// </summary>
          HEIS,
        /// <summary>
        /// Helmert 1906
        /// </summary>
          HEL06,
        /// <summary>
        /// Helmert 1907 
        /// </summary>
          HEL07,
        /// <summary>
        /// Hough 1956 
        /// </summary>
          HOUG,
        /// <summary>
        /// IAG75 property
        /// </summary>
          [XmlEnum("IAG-75")]
          IAG75,
        /// <summary>
        /// INDIAN75 (Everest 1930)
        /// </summary>
          INDIAN75,
        /// <summary>
        /// INDO74 property
        /// </summary>
          [XmlEnum("INDO-74")]
          INDO74,
        /// <summary>
        /// International 1924
        /// </summary>
          INT24,
        /// <summary>
        /// IUGG 1967
        /// </summary>
          IUGG67,
        /// <summary>
        /// IUGG 1975
        /// </summary>
          IUGG75,
        /// <summary>
        /// Jeffreys 1948
        /// </summary>
          JEFF48,
        /// <summary>
        /// Kaula 1963 Same as AUST_NAT and SA69
        /// </summary>
          KAU63,
        /// <summary>
        /// Krassovsky
        /// </summary>
          KRSV,
        /// <summary>
        /// MERIT83
        /// </summary>
          MERIT83,
        /// <summary>
        /// NAD27 (Clarke 1866)
        /// </summary>
          NAD27,
        /// <summary>
        /// NAHRAN (Clarke 1880)
        /// </summary>
          NAHRAN,
        /// <summary>
        /// New International 1967
        /// </summary>
          NEWINT67,
        /// <summary>
        /// NWL10D property
        /// </summary>
          [XmlEnum("NWL-10D")]
          NWL10D,
        /// <summary>
        /// NWL9D property
        /// </summary>
          [XmlEnum("NWL-9D")]
          NWL9D,
        /// <summary>
        /// OSGB36 (Airy 1830)
        /// </summary>
          OSGB36,
        /// <summary>
        /// OSU86F
        /// </summary>
          OSU86F,
        /// <summary>
        /// OSU91A
        /// </summary>
          OSU91A,
        /// <summary>
        /// PLESSIS1817 property
        /// </summary>
          [XmlEnum("PLESSIS-1817")]
          PLESSIS1817,
        /// <summary>
        /// PSAD56 (International 1924)
        /// </summary>
          PSAD56,
        /// <summary>
        /// Pointe Noire 1948
        /// </summary>
          PTNOIRE,
        /// <summary>
        /// South American 1969
        /// </summary>
          SA69,
        /// <summary>
        /// Sphere of radius 6370997
        /// </summary>
          SPHR,
        /// <summary>
        /// Struve 1860
        /// </summary>
          STRU,
        /// <summary>
        /// Walbeck
        /// </summary>
          WALB,
        /// <summary>
        /// War Office 1924
        /// </summary>
          WAR24,
        /// <summary>
        /// World Geodetic System 1960
        /// </summary>
          WGS60,
        /// <summary>
        /// World Geodetic System 1966
        /// </summary>
          WGS66,
        /// <summary>
        /// World Geodetic System 1972
        /// </summary>
          WGS72,
        /// <summary>
        /// World Geodetic System 1984
        /// </summary>
          WGS84,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the Projection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the Projection xsd enumeration.")]
        public enum Projection 
        {
        /// <summary>
        /// Albersequalarea property
        /// </summary>
          [XmlEnum("Albers equal area")]
          Albersequalarea,
        /// <summary>
        /// azimuthalequidistant property
        /// </summary>
          [XmlEnum("azimuthal equidistant")]
          azimuthalequidistant,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-CASSINI
        /// </summary>
          Cassini,
        /// <summary>
        /// equidistantconic property
        /// </summary>
          [XmlEnum("equidistant conic")]
          equidistantconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-EQUIRECTANGULAR
        /// </summary>
          equirectangular,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-GNOMONIC
        /// </summary>
          gnomonic,
        /// <summary>
        /// Lambertazimuthal property
        /// </summary>
          [XmlEnum("Lambert azimuthal")]
          Lambertazimuthal,
        /// <summary>
        /// Lambertconformalconic property
        /// </summary>
          [XmlEnum("Lambert conformal conic")]
          Lambertconformalconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-MERCATOR
        /// </summary>
          Mercator,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-MILLER
        /// </summary>
          Miller,
        /// <summary>
        /// obliqueMercator property
        /// </summary>
          [XmlEnum("oblique Mercator")]
          obliqueMercator,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-ORTHO
        /// </summary>
          orthographic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-PERSPECTIVE
        /// </summary>
          perspective,
        /// <summary>
        /// polarstereographic property
        /// </summary>
          [XmlEnum("polar stereographic")]
          polarstereographic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-POLYCONIC
        /// </summary>
          polyconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-SINUSOIDAL
        /// </summary>
          sinusoidal,
        /// <summary>
        /// stateplane property
        /// </summary>
          [XmlEnum("state plane")]
          stateplane,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-STEREO
        /// </summary>
          stereographic,
        /// <summary>
        /// transverseMercator property
        /// </summary>
          [XmlEnum("transverse Mercator")]
          transverseMercator,
        /// <summary>
        /// universaltransverseMercator property
        /// </summary>
          [XmlEnum("universal transverse Mercator")]
          universaltransverseMercator,
        /// <summary>
        /// userdefined property
        /// </summary>
          [XmlEnum("user defined")]
          userdefined,
        /// <summary>
        /// VanderGrinten property
        /// </summary>
          [XmlEnum("Van der Grinten")]
          VanderGrinten,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ProjectionVariantsObliqueMercator xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ProjectionVariantsObliqueMercator xsd enumeration.")]
        public enum ProjectionVariantsObliqueMercator 
        {
        /// <summary>
        /// 
        /// </summary>
          @default,
        /// <summary>
        /// 
        /// </summary>
          rectified,
        /// <summary>
        /// rectifiedskew property
        /// </summary>
          [XmlEnum("rectified skew")]
          rectifiedskew,
        /// <summary>
        /// rectifiedskewcenterorigin property
        /// </summary>
          [XmlEnum("rectified skew center origin")]
          rectifiedskewcenterorigin,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the NADTypes xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the NADTypes xsd enumeration.")]
        public enum NADTypeList 
        {
        /// <summary>
        /// 
        /// </summary>
          NAD27,
        /// <summary>
        /// 
        /// </summary>
          NAD83,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the Hemispheres xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the Hemispheres xsd enumeration.")]
        public enum HemisphereList 
        {
        /// <summary>
        /// Northern hemisphere.
        /// </summary>
          northern,
        /// <summary>
        /// Southern hemisphere.
        /// </summary>
          southern,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the WellboreType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellboreType xsd enumeration.")]
        public enum WellboreType 
        {
        /// <summary>
        /// The original wellbore had to be abandoned before its final usage. This wellbore is being drilled as a different wellbore, but one which has the same target as the one that was abandoned.
        /// </summary>
          bypass,
        /// <summary>
        /// This is the first wellbore that has been drilled, or attempted, in a given well.
        /// </summary>
          initial,
        /// <summary>
        /// The wellbore is being redrilled.
        /// </summary>
          redrill,
        /// <summary>
        /// The wellbore is being reentered after a period of abandonment.
        /// </summary>
          reentry,
        /// <summary>
        /// The wellbore is part of an existing regulatory well. The original borehole did not reach the target depth. This borehole required the well to be respudded (drilled from a different surface position).
        /// </summary>
          respud,
        /// <summary>
        /// The wellbore is a deviation from a given wellbore, that produces a different borehole from the others, and whose bottomhole differs from any previously extisting wellbore bottomholes.
        /// </summary>
          sidetrack,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the WellboreShape xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the WellboreShape xsd enumeration.")]
        public enum WellboreShape 
        {
        /// <summary>
        /// buildandhold property
        /// </summary>
          [XmlEnum("build and hold")]
          buildandhold,
        /// <summary>
        /// A wellbore that significantly departs from vertical with respect to the surface location.
        /// </summary>
          deviated,
        /// <summary>
        /// doublekickoff property
        /// </summary>
          [XmlEnum("double kickoff")]
          doublekickoff,
        /// <summary>
        /// A wellbore whose path deviates from the vertical by at least 75 degrees.
        /// </summary>
          horizontal,
        /// <summary>
        /// Sshaped property
        /// </summary>
          [XmlEnum("S-shaped")]
          Sshaped,
        /// <summary>
        /// A wellbore that is nearly vertical with respect to the surface location.
        /// </summary>
          vertical,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown

        }

        /// <summary>
        /// This class represents the ArrayElementDataType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/131")]
        [Description("This class represents the ArrayElementDataType xsd enumeration.")]
        public enum ArrayElementDataType 
        {
        /// <summary>
        /// boolean property
        /// </summary>
          boolean,
        /// <summary>
        /// integer8bit property
        /// </summary>
          [XmlEnum("integer 8 bit")]
          integer8bit,
        /// <summary>
        /// integer16bit property
        /// </summary>
          [XmlEnum("integer 16 bit")]
          integer16bit,
        /// <summary>
        /// integer32bit property
        /// </summary>
          [XmlEnum("integer 32 bit")]
          integer32bit,
        /// <summary>
        /// integer64bit property
        /// </summary>
          [XmlEnum("integer 64 bit")]
          integer64bit,
        /// <summary>
        /// IEEEfloat32bit property
        /// </summary>
          [XmlEnum("IEEE float 32 bit")]
          IEEEfloat32bit,
        /// <summary>
        /// IEEEfloat64bit property
        /// </summary>
          [XmlEnum("IEEE float 64 bit")]
          IEEEfloat64bit

        }

    }
    #endregion
}