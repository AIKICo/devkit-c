
//This code was generated using the Energistics Generator tool.  Direct changes to this code will be lost
//during regeneration.

using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

using Energistics.DataAccess.COMPLETION100.ComponentSchemas;
using Energistics.DataAccess.COMPLETION100.ReferenceData;
using Energistics.DataAccess.Reflection;
using Energistics.DataAccess.Validation;

namespace Energistics.DataAccess.COMPLETION100
{
    #region Classes
    /// <summary>
    /// This class represents the abstractObject xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellCompletionList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellCMLedgerList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreCompletionList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DownholeComponentList))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/schemas/abstract")]
    [System.Xml.Serialization.XmlRootAttribute("abstractDataObject", Namespace="http://www.energistics.org/schemas/abstract", IsNullable=false)]
	[Description("This class represents the abstractObject xsd type.")]
    public abstract partial class AbstractObject : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// The non-contextual content of a well completion object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellCompletion", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.COMPLETION, "1.0")]
    [Description("The non-contextual content of a well completion object.")]
    public partial class WellCompletion : Object, ICommonDataObject, IWellObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the completion. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the completion.")]
		[XmlElement("nameWell")]
        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 

        /// <summary>
        /// Human recognizable context for the completion. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the completion.")]
		[XmlElement("name")]
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

        /// <summary>
        /// fieldID property
        /// </summary>
		[StringLength(64)]
        [Description("Field ID.")]
		[XmlElement("fieldID")]
        public String FieldID {
            get {
                return fieldIDField;
            } 
            set {
                fieldIDField = value;
                NotifyPropertyChanged("FieldID");
            }
        }

        private String fieldIDField; 

        /// <summary>
        /// fieldCode property
        /// </summary>
		[StringLength(64)]
        [Description("Field code.")]
		[XmlElement("fieldCode")]
        public String FieldCode {
            get {
                return fieldCodeField;
            } 
            set {
                fieldCodeField = value;
                NotifyPropertyChanged("FieldCode");
            }
        }

        private String fieldCodeField; 

        /// <summary>
        /// fieldType property
        /// </summary>
		[StringLength(64)]
        [Description("Field type.")]
		[XmlElement("fieldType")]
        public String FieldType {
            get {
                return fieldTypeField;
            } 
            set {
                fieldTypeField = value;
                NotifyPropertyChanged("FieldType");
            }
        }

        private String fieldTypeField; 

        /// <summary>
        /// effectiveDate property
        /// </summary>
		[Description("Field date.")]
		[XmlElement("effectiveDate")]
        public Timestamp? EffectiveDate {
            get {
                return effectiveDateField;
            } 
            set {
                effectiveDateField = value;
                 this.EffectiveDateSpecified = true;
                NotifyPropertyChanged("EffectiveDate");
            }
        }

        private Timestamp? effectiveDateField; 

        /// <summary>
        /// effectiveDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EffectiveDateSpecified {
            get {
                return effectiveDateSpecifiedField;
            } 
            set {
                effectiveDateSpecifiedField = value;
                NotifyPropertyChanged("EffectiveDateSpecified");
            }
        }

        private Boolean effectiveDateSpecifiedField; 

        /// <summary>
        /// expiredDate property
        /// </summary>
		[Description("Expiration date")]
		[XmlElement("expiredDate")]
        public Timestamp? ExpiredDate {
            get {
                return expiredDateField;
            } 
            set {
                expiredDateField = value;
                 this.ExpiredDateSpecified = true;
                NotifyPropertyChanged("ExpiredDate");
            }
        }

        private Timestamp? expiredDateField; 

        /// <summary>
        /// expiredDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ExpiredDateSpecified {
            get {
                return expiredDateSpecifiedField;
            } 
            set {
                expiredDateSpecifiedField = value;
                NotifyPropertyChanged("ExpiredDateSpecified");
            }
        }

        private Boolean expiredDateSpecifiedField; 

        /// <summary>
        /// E_P_RightsID property
        /// </summary>
		[StringLength(64)]
        [Description("Documents exploration and production rights")]
		[XmlElement("E_P_RightsID")]
        public String E_P_RightsID {
            get {
                return E_P_RightsIDField;
            } 
            set {
                E_P_RightsIDField = value;
                NotifyPropertyChanged("E_P_RightsID");
            }
        }

        private String E_P_RightsIDField; 

        /// <summary>
        /// currentStatus property
        /// </summary>
		
		[XmlElement("currentStatus")]
        public CompletionStatus? CurrentStatus {
            get {
                return currentStatusField;
            } 
            set {
                currentStatusField = value;
                 this.CurrentStatusSpecified = true;
                NotifyPropertyChanged("CurrentStatus");
            }
        }

        private CompletionStatus? currentStatusField; 

        /// <summary>
        /// currentStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CurrentStatusSpecified {
            get {
                return currentStatusSpecifiedField;
            } 
            set {
                currentStatusSpecifiedField = value;
                NotifyPropertyChanged("CurrentStatusSpecified");
            }
        }

        private Boolean currentStatusSpecifiedField; 

        /// <summary>
        /// statusDate property
        /// </summary>
		
		[XmlElement("statusDate")]
        public Timestamp? StatusDate {
            get {
                return statusDateField;
            } 
            set {
                statusDateField = value;
                 this.StatusDateSpecified = true;
                NotifyPropertyChanged("StatusDate");
            }
        }

        private Timestamp? statusDateField; 

        /// <summary>
        /// statusDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StatusDateSpecified {
            get {
                return statusDateSpecifiedField;
            } 
            set {
                statusDateSpecifiedField = value;
                NotifyPropertyChanged("StatusDateSpecified");
            }
        }

        private Boolean statusDateSpecifiedField; 

        /// <summary>
        /// statusHistory property
        /// </summary>
		[RecurringElement]
		[XmlElement("statusHistory")]
        public List<CompletionStatusHistory> StatusHistory {
            get {
                return statusHistoryField;
            } 
            set {
                statusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if StatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StatusHistorySpecified
         {
             get {
             if(statusHistoryField!=null)
                 return statusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<CompletionStatusHistory> statusHistoryField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [XmlAttribute("uidWell")]
		
        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CompletionStatusHistory xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CompletionStatusHistory", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the CompletionStatusHistory xsd type.")]
    public partial class CompletionStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Completion status
        /// </summary>
		[Description("Completion status")]
		[XmlElement("status")]
        public CompletionStatus? Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private CompletionStatus? statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private Boolean statusSpecifiedField; 

        /// <summary>
        /// the start date of status
        /// </summary>
		[Description("the start date of status")]
		[XmlElement("startDate")]
        public Timestamp? StartDate {
            get {
                return startDateField;
            } 
            set {
                startDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private Timestamp? startDateField; 

        /// <summary>
        /// startDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StartDateSpecified {
            get {
                return startDateSpecifiedField;
            } 
            set {
                startDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private Boolean startDateSpecifiedField; 

        /// <summary>
        /// the end date of status
        /// </summary>
		[Description("the end date of status")]
		[XmlElement("endDate")]
        public Timestamp? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private Timestamp? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private Boolean endDateSpecifiedField; 

        /// <summary>
        /// The measured bottom of perforation
        /// </summary>
		[Description("The measured bottom of perforation")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// The measured top of perforation
        /// </summary>
		[Description("The measured top of perforation")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// The description about the status
        /// </summary>
		[StringLength(4000)]
        [Description("The description about the status")]
		[XmlElement("comment")]
        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the measuredDepthCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="measuredDepthCoord", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the measuredDepthCoord xsd type.")]
    public partial class MeasuredDepthCoord : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        public MeasuredDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasuredDepthCoord(Double value, MeasuredDepthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value.
        /// </summary>
		[Required]
        [Description("The unit of measure of the quantity value.")]
        [XmlAttribute("uom")]
		
        public MeasuredDepthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MeasuredDepthUom uomField; 

		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. This value is assumed to match the uid value in a WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A pointer to the reference datum for this coordinate  value as defined in WellDatum. This value is assumed to match the uid value in a WellDatum. If not given then the default WellDatum must be assumed.")]
        [XmlAttribute("datum")]
		
        public String Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private String datumField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the abstractMeasure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FootageEastWest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FootageNorthSouth))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellElevationCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellVerticalDepthCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasuredDepthCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RatioGenericMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GenericMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasureOrQuantity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasurePercent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(YAxisAzimuth))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeFlowRateMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VelocityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermodynamicTemperatureMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermalVolumetricExpansionMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermalConductivityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandardVolumePerTimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandardVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecificVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecificHeatCapacityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelativePowerMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PressureMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PowerMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaneAngleMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PermeabilityRockMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MomentOfForceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassPerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassConcentrationMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MagneticInductionMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthPerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IlluminanceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForcePerVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForcePerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentPerMassMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectricPotentialMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectricCurrentMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DynamicViscosityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DimensionlessMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DensityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompressibilityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaPerAreaMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnglePerTimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnglePerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AccelerationLinearMeasure))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="abstractMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the abstractMeasure xsd type.")]
    public abstract partial class AbstractMeasure : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the footageEastWest xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="footageEastWest", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the footageEastWest xsd type.")]
    public partial class FootageEastWest : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FootageEastWest class.
        /// </summary>
        public FootageEastWest() {}

        /// <summary>
        /// Initializes a new instance of the FootageEastWest class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public FootageEastWest(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the distance value.
        /// </summary>
		[Required]
        [Description("The unit of measure of the distance value.")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

		/// <summary>
        /// Specifies the reference line that is the origin of the distance.
        /// </summary>
		[Required]
        [Description("Specifies the reference line that is the origin of the distance.")]
        [XmlAttribute("ref")]
		
        public EastOrWest Ref {
            get {
                return refField;
            } 
            set {
                refField = value;
                NotifyPropertyChanged("Ref");
            }
        }

        private EastOrWest refField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the footageNorthSouth xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="footageNorthSouth", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the footageNorthSouth xsd type.")]
    public partial class FootageNorthSouth : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FootageNorthSouth class.
        /// </summary>
        public FootageNorthSouth() {}

        /// <summary>
        /// Initializes a new instance of the FootageNorthSouth class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public FootageNorthSouth(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the distance value.
        /// </summary>
		[Required]
        [Description("The unit of measure of the distance value.")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

		/// <summary>
        /// Specifies the reference line that is the origin of the distance.
        /// </summary>
		[Required]
        [Description("Specifies the reference line that is the origin of the distance.")]
        [XmlAttribute("ref")]
		
        public NorthOrSouth Ref {
            get {
                return refField;
            } 
            set {
                refField = value;
                NotifyPropertyChanged("Ref");
            }
        }

        private NorthOrSouth refField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellElevationCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellElevationCoord", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the wellElevationCoord xsd type.")]
    public partial class WellElevationCoord : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        public WellElevationCoord() {}

        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WellElevationCoord(Double value, WellVerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value. If not given then the default unit of measure of the explicitly or implicitly given datum must be assumed.
        /// </summary>
		[Required]
        [Description("The unit of measure of the quantity value. If not given then the default unit of measure of the explicitly or implicitly given datum must be assumed.")]
        [XmlAttribute("uom")]
		
        public WellVerticalCoordinateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private WellVerticalCoordinateUom uomField; 

		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A pointer to the reference datum for this coordinate  value as defined in WellDatum.  If not given then the default WellDatum must be assumed.")]
        [XmlAttribute("datum")]
		
        public String Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private String datumField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellVerticalDepthCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellVerticalDepthCoord", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the wellVerticalDepthCoord xsd type.")]
    public partial class WellVerticalDepthCoord : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellVerticalDepthCoord class.
        /// </summary>
        public WellVerticalDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the WellVerticalDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WellVerticalDepthCoord(Double value, WellVerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value.
        /// </summary>
		[Required]
        [Description("The unit of measure of the quantity value.")]
        [XmlAttribute("uom")]
		
        public WellVerticalCoordinateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private WellVerticalCoordinateUom uomField; 

		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A pointer to the reference datum for this coordinate  value as defined in WellDatum.  If not given then the default WellDatum must be assumed.")]
        [XmlAttribute("datum")]
		
        public String Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private String datumField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ratioGenericMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ratioGenericMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the ratioGenericMeasure xsd type.")]
    public partial class RatioGenericMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RatioGenericMeasure class.
        /// </summary>
        public RatioGenericMeasure() {}

        /// <summary>
        /// Initializes a new instance of the RatioGenericMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public RatioGenericMeasure(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [StringLength(24)]
        [Description("The unit of measure for the quantity. If for some reason a uom is not appropriate for the quantity, a unit of \"Euc\" should be used.")]
        [XmlAttribute("uom")]
		
        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 

		/// <summary>
        /// numerator property
        /// </summary>
		
        [XmlAttribute("numerator")]
		
        public Double Numerator {
            get {
                return numeratorField;
            } 
            set {
                numeratorField = value;
                 this.NumeratorSpecified = true;
                NotifyPropertyChanged("Numerator");
            }
        }

        private Double numeratorField; 

        /// <summary>
        /// numeratorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumeratorSpecified {
            get {
                return numeratorSpecifiedField;
            } 
            set {
                numeratorSpecifiedField = value;
                NotifyPropertyChanged("NumeratorSpecified");
            }
        }

        private Boolean numeratorSpecifiedField; 

		/// <summary>
        /// denominator property
        /// </summary>
		
        [XmlAttribute("denominator")]
		
        public Double Denominator {
            get {
                return denominatorField;
            } 
            set {
                denominatorField = value;
                 this.DenominatorSpecified = true;
                NotifyPropertyChanged("Denominator");
            }
        }

        private Double denominatorField; 

        /// <summary>
        /// denominatorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DenominatorSpecified {
            get {
                return denominatorSpecifiedField;
            } 
            set {
                denominatorSpecifiedField = value;
                NotifyPropertyChanged("DenominatorSpecified");
            }
        }

        private Boolean denominatorSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the genericMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="genericMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the genericMeasure xsd type.")]
    public partial class GenericMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the GenericMeasure class.
        /// </summary>
        public GenericMeasure() {}

        /// <summary>
        /// Initializes a new instance of the GenericMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public GenericMeasure(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the quantity.
        /// </summary>
		[Required]
        [StringLength(24)]
        [Description("The unit of measure for the quantity.")]
        [XmlAttribute("uom")]
		
        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the measureOrQuantity xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="measureOrQuantity", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the measureOrQuantity xsd type.")]
    public partial class MeasureOrQuantity : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        public MeasureOrQuantity() {}

        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasureOrQuantity(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the quantity. This value must conform to the values allowed by a measure class. If the value is a measure then the uom must be specified.
        /// </summary>
		[StringLength(24)]
        [Description("The unit of measure for the quantity. This value must conform to the values allowed by a measure class.  If the value is a measure then the uom must be specified.")]
        [XmlAttribute("uom")]
		
        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerVolumeMeasurePercent xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasurePercent", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the volumePerVolumeMeasurePercent xsd type.")]
    public partial class VolumePerVolumeMeasurePercent : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasurePercent class.
        /// </summary>
        public VolumePerVolumeMeasurePercent() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasurePercent class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasurePercent(Double value, PercentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PercentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PercentUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the yAxisAzimuth xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="yAxisAzimuth", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the yAxisAzimuth xsd type.")]
    public partial class YAxisAzimuth : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the YAxisAzimuth class.
        /// </summary>
        public YAxisAzimuth() {}

        /// <summary>
        /// Initializes a new instance of the YAxisAzimuth class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public YAxisAzimuth(Double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the azimuth value.
        /// </summary>
		[Required]
        [Description("The unit of measure of the azimuth value.")]
        [XmlAttribute("uom")]
		
        public PlaneAngleUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PlaneAngleUom uomField; 

		/// <summary>
        /// Specifies the direction to be considered North for the y axis.
        /// </summary>
		[Description("Specifies the direction to be considered North for the y axis.")]
        [XmlAttribute("northDirection")]
		
        public AziRef NorthDirection {
            get {
                return northDirectionField;
            } 
            set {
                northDirectionField = value;
                 this.NorthDirectionSpecified = true;
                NotifyPropertyChanged("NorthDirection");
            }
        }

        private AziRef northDirectionField; 

        /// <summary>
        /// northDirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NorthDirectionSpecified {
            get {
                return northDirectionSpecifiedField;
            } 
            set {
                northDirectionSpecifiedField = value;
                NotifyPropertyChanged("NorthDirectionSpecified");
            }
        }

        private Boolean northDirectionSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the volumePerVolumeMeasure xsd type.")]
    public partial class VolumePerVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        public VolumePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasure(Double value, VolumePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public VolumePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the volumePerLengthMeasure xsd type.")]
    public partial class VolumePerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerLengthMeasure class.
        /// </summary>
        public VolumePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerLengthMeasure(Double value, VolumePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public VolumePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeFlowRateMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeFlowRateMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the volumeFlowRateMeasure xsd type.")]
    public partial class VolumeFlowRateMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeFlowRateMeasure class.
        /// </summary>
        public VolumeFlowRateMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeFlowRateMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeFlowRateMeasure(Double value, VolumeFlowRateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public VolumeFlowRateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeFlowRateUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the volumeMeasure xsd type.")]
    public partial class VolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        public VolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeMeasure(Double value, VolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public VolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the velocityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="velocityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the velocityMeasure xsd type.")]
    public partial class VelocityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VelocityMeasure class.
        /// </summary>
        public VelocityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VelocityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VelocityMeasure(Double value, VelocityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public VelocityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VelocityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the timeMeasure xsd type.")]
    public partial class TimeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        public TimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public TimeMeasure(Double value, TimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public TimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private TimeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermodynamicTemperatureMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermodynamicTemperatureMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the thermodynamicTemperatureMeasure xsd type.")]
    public partial class ThermodynamicTemperatureMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        public ThermodynamicTemperatureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermodynamicTemperatureMeasure(Double value, ThermodynamicTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ThermodynamicTemperatureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermodynamicTemperatureUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermalVolumetricExpansionMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermalVolumetricExpansionMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the thermalVolumetricExpansionMeasure xsd type.")]
    public partial class ThermalVolumetricExpansionMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermalVolumetricExpansionMeasure class.
        /// </summary>
        public ThermalVolumetricExpansionMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermalVolumetricExpansionMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermalVolumetricExpansionMeasure(Double value, ThermalVolumetricExpansionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ThermalVolumetricExpansionUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermalVolumetricExpansionUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermalConductivityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermalConductivityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the thermalConductivityMeasure xsd type.")]
    public partial class ThermalConductivityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermalConductivityMeasure class.
        /// </summary>
        public ThermalConductivityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermalConductivityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermalConductivityMeasure(Double value, ThermalConductivityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ThermalConductivityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermalConductivityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the standardVolumePerTimeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="standardVolumePerTimeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the standardVolumePerTimeMeasure xsd type.")]
    public partial class StandardVolumePerTimeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StandardVolumePerTimeMeasure class.
        /// </summary>
        public StandardVolumePerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the StandardVolumePerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public StandardVolumePerTimeMeasure(Double value, StandardVolumePerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public StandardVolumePerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private StandardVolumePerTimeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the standardVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="standardVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the standardVolumeMeasure xsd type.")]
    public partial class StandardVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StandardVolumeMeasure class.
        /// </summary>
        public StandardVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the StandardVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public StandardVolumeMeasure(Double value, StandardVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public StandardVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private StandardVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the specificVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="specificVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the specificVolumeMeasure xsd type.")]
    public partial class SpecificVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the SpecificVolumeMeasure class.
        /// </summary>
        public SpecificVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the SpecificVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public SpecificVolumeMeasure(Double value, SpecificVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public SpecificVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private SpecificVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the specificHeatCapacityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="specificHeatCapacityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the specificHeatCapacityMeasure xsd type.")]
    public partial class SpecificHeatCapacityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the SpecificHeatCapacityMeasure class.
        /// </summary>
        public SpecificHeatCapacityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the SpecificHeatCapacityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public SpecificHeatCapacityMeasure(Double value, SpecificHeatCapacityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public SpecificHeatCapacityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private SpecificHeatCapacityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the relativePowerMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="relativePowerMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the relativePowerMeasure xsd type.")]
    public partial class RelativePowerMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RelativePowerMeasure class.
        /// </summary>
        public RelativePowerMeasure() {}

        /// <summary>
        /// Initializes a new instance of the RelativePowerMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public RelativePowerMeasure(Double value, RelativePowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public RelativePowerUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private RelativePowerUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the pressureMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="pressureMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the pressureMeasure xsd type.")]
    public partial class PressureMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        public PressureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PressureMeasure(Double value, PressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PressureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PressureUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the powerMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="powerMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the powerMeasure xsd type.")]
    public partial class PowerMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PowerMeasure class.
        /// </summary>
        public PowerMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PowerMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PowerMeasure(Double value, PowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PowerUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PowerUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the planeAngleMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="planeAngleMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the planeAngleMeasure xsd type.")]
    public partial class PlaneAngleMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        public PlaneAngleMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PlaneAngleMeasure(Double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PlaneAngleUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PlaneAngleUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the permeabilityRockMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="permeabilityRockMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the permeabilityRockMeasure xsd type.")]
    public partial class PermeabilityRockMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PermeabilityRockMeasure class.
        /// </summary>
        public PermeabilityRockMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PermeabilityRockMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PermeabilityRockMeasure(Double value, PermeabilityRockUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PermeabilityRockUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PermeabilityRockUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the perLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="perLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the perLengthMeasure xsd type.")]
    public partial class PerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PerLengthMeasure class.
        /// </summary>
        public PerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PerLengthMeasure(Double value, PerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the momentOfForceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="momentOfForceMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the momentOfForceMeasure xsd type.")]
    public partial class MomentOfForceMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MomentOfForceMeasure class.
        /// </summary>
        public MomentOfForceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MomentOfForceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MomentOfForceMeasure(Double value, MomentOfForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MomentOfForceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MomentOfForceUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massPerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massPerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the massPerLengthMeasure xsd type.")]
    public partial class MassPerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerLengthMeasure class.
        /// </summary>
        public MassPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerLengthMeasure(Double value, MassPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MassPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the massMeasure xsd type.")]
    public partial class MassMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        public MassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassMeasure(Double value, MassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massConcentrationMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massConcentrationMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the massConcentrationMeasure xsd type.")]
    public partial class MassConcentrationMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassConcentrationMeasure class.
        /// </summary>
        public MassConcentrationMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassConcentrationMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassConcentrationMeasure(Double value, MassConcentrationUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MassConcentrationUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassConcentrationUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the magneticInductionMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="magneticInductionMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the magneticInductionMeasure xsd type.")]
    public partial class MagneticInductionMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MagneticInductionMeasure class.
        /// </summary>
        public MagneticInductionMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MagneticInductionMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MagneticInductionMeasure(Double value, MagneticInductionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MagneticInductionUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MagneticInductionUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lengthPerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthPerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the lengthPerLengthMeasure xsd type.")]
    public partial class LengthPerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        public LengthPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthPerLengthMeasure(Double value, LengthPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public LengthPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthPerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the lengthMeasure xsd type.")]
    public partial class LengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        public LengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthMeasure(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the illuminanceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="illuminanceMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the illuminanceMeasure xsd type.")]
    public partial class IlluminanceMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IlluminanceMeasure class.
        /// </summary>
        public IlluminanceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the IlluminanceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IlluminanceMeasure(Double value, IlluminanceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public IlluminanceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private IlluminanceUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forcePerVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forcePerVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the forcePerVolumeMeasure xsd type.")]
    public partial class ForcePerVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasure class.
        /// </summary>
        public ForcePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerVolumeMeasure(Double value, ForcePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ForcePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForcePerVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forcePerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forcePerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the forcePerLengthMeasure xsd type.")]
    public partial class ForcePerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        public ForcePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerLengthMeasure(Double value, ForcePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ForcePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForcePerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forceMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the forceMeasure xsd type.")]
    public partial class ForceMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForceMeasure class.
        /// </summary>
        public ForceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForceMeasure(Double value, ForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ForceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForceUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the equivalentPerMassMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="equivalentPerMassMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the equivalentPerMassMeasure xsd type.")]
    public partial class EquivalentPerMassMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EquivalentPerMassMeasure class.
        /// </summary>
        public EquivalentPerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the EquivalentPerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public EquivalentPerMassMeasure(Double value, EquivalentPerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public EquivalentPerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private EquivalentPerMassUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the electricPotentialMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="electricPotentialMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the electricPotentialMeasure xsd type.")]
    public partial class ElectricPotentialMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricPotentialMeasure class.
        /// </summary>
        public ElectricPotentialMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricPotentialMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricPotentialMeasure(Double value, ElectricPotentialUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ElectricPotentialUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricPotentialUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the electricCurrentMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="electricCurrentMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the electricCurrentMeasure xsd type.")]
    public partial class ElectricCurrentMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        public ElectricCurrentMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricCurrentMeasure(Double value, ElectricCurrentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ElectricCurrentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricCurrentUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the dynamicViscosityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dynamicViscosityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the dynamicViscosityMeasure xsd type.")]
    public partial class DynamicViscosityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        public DynamicViscosityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DynamicViscosityMeasure(Double value, DynamicViscosityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public DynamicViscosityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DynamicViscosityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the dimensionlessMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dimensionlessMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the dimensionlessMeasure xsd type.")]
    public partial class DimensionlessMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        public DimensionlessMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DimensionlessMeasure(Double value, DimensionlessUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public DimensionlessUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DimensionlessUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the densityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="densityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the densityMeasure xsd type.")]
    public partial class DensityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DensityMeasure class.
        /// </summary>
        public DensityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DensityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DensityMeasure(Double value, DensityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public DensityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DensityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the compressibilityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="compressibilityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the compressibilityMeasure xsd type.")]
    public partial class CompressibilityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CompressibilityMeasure class.
        /// </summary>
        public CompressibilityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the CompressibilityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public CompressibilityMeasure(Double value, CompressibilityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public CompressibilityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private CompressibilityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the areaPerAreaMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="areaPerAreaMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the areaPerAreaMeasure xsd type.")]
    public partial class AreaPerAreaMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaPerAreaMeasure class.
        /// </summary>
        public AreaPerAreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaPerAreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaPerAreaMeasure(Double value, AreaPerAreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public AreaPerAreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaPerAreaUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the areaMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="areaMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the areaMeasure xsd type.")]
    public partial class AreaMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        public AreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaMeasure(Double value, AreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public AreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the anglePerTimeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="anglePerTimeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the anglePerTimeMeasure xsd type.")]
    public partial class AnglePerTimeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AnglePerTimeMeasure class.
        /// </summary>
        public AnglePerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AnglePerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AnglePerTimeMeasure(Double value, AnglePerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public AnglePerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AnglePerTimeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the anglePerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="anglePerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the anglePerLengthMeasure xsd type.")]
    public partial class AnglePerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AnglePerLengthMeasure class.
        /// </summary>
        public AnglePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AnglePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AnglePerLengthMeasure(Double value, AnglePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public AnglePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AnglePerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the accelerationLinearMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="accelerationLinearMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the accelerationLinearMeasure xsd type.")]
    public partial class AccelerationLinearMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AccelerationLinearMeasure class.
        /// </summary>
        public AccelerationLinearMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AccelerationLinearMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AccelerationLinearMeasure(Double value, AccelerationLinearUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public AccelerationLinearUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AccelerationLinearUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Common Data Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_commonData", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Common Data Component Schema ")]
    public partial class CommonData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// An identifier to indicate the data originator. This identifies the server that originally created the object and thus most of the uids in the object (but not necessarily the uids of the parents). This is typically a url. 
        /// </summary>
		[StringLength(64)]
        [Description("An identifier to indicate the data originator. This identifies the server that originally created  the object and thus most of the uids in the object (but not  necessarily the uids of the parents). This is typically a url.")]
		[XmlElement("sourceName")]
        public String SourceName {
            get {
                return sourceNameField;
            } 
            set {
                sourceNameField = value;
                NotifyPropertyChanged("SourceName");
            }
        }

        private String sourceNameField; 

        /// <summary>
        /// When the data was created at the persistent data store. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
		[Description("When the data was created at the persistent data store.  This is an API server parameter releted to the \"Special Handling of Change Information\" within a server.  See the relevant API specification for the  behavior related to this element.")]
		[XmlElement("dTimCreation")]
        public Timestamp? DateTimeCreation {
            get {
                return dTimCreationField;
            } 
            set {
                dTimCreationField = value;
                 this.DateTimeCreationSpecified = true;
                NotifyPropertyChanged("DateTimeCreation");
            }
        }

        private Timestamp? dTimCreationField; 

        /// <summary>
        /// dTimCreationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DateTimeCreationSpecified {
            get {
                return dTimCreationSpecifiedField;
            } 
            set {
                dTimCreationSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCreationSpecified");
            }
        }

        private Boolean dTimCreationSpecifiedField; 

        /// <summary>
        /// Last change of any element of the data at the persistent data store. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
		[Description("Last change of any element of the data at the persistent data store. This is an API server parameter releted to the \"Special Handling of Change Information\" within a server.  See the relevant API specification for the  behavior related to this element.")]
		[XmlElement("dTimLastChange")]
        public Timestamp? DateTimeLastChange {
            get {
                return dTimLastChangeField;
            } 
            set {
                dTimLastChangeField = value;
                 this.DateTimeLastChangeSpecified = true;
                NotifyPropertyChanged("DateTimeLastChange");
            }
        }

        private Timestamp? dTimLastChangeField; 

        /// <summary>
        /// dTimLastChangeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DateTimeLastChangeSpecified {
            get {
                return dTimLastChangeSpecifiedField;
            } 
            set {
                dTimLastChangeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeLastChangeSpecified");
            }
        }

        private Boolean dTimLastChangeSpecifiedField; 

        /// <summary>
        /// The item state for the data object. 
        /// </summary>
		[Description("The item state for the data object.")]
		[XmlElement("itemState")]
        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set {
                itemStateField = value;
                 this.ItemStateSpecified = true;
                NotifyPropertyChanged("ItemState");
            }
        }

        private ItemState? itemStateField; 

        /// <summary>
        /// itemStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ItemStateSpecified {
            get {
                return itemStateSpecifiedField;
            } 
            set {
                itemStateSpecifiedField = value;
                NotifyPropertyChanged("ItemStateSpecified");
            }
        }

        private Boolean itemStateSpecifiedField; 

        /// <summary>
        /// The category of the service related to the creation of the object. For example, "mud log service", "cement service", "LWD service", "rig service", "drilling service". 
        /// </summary>
		[StringLength(40)]
        [Description("The category of the service related to the creation of the object.  For example, \"mud log service\", \"cement service\", \"LWD service\", \"rig service\", \"drilling service\".")]
		[XmlElement("serviceCategory")]
        public String ServiceCategory {
            get {
                return serviceCategoryField;
            } 
            set {
                serviceCategoryField = value;
                NotifyPropertyChanged("ServiceCategory");
            }
        }

        private String serviceCategoryField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
		[XmlElement("comments")]
        public String Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String commentsField; 

        /// <summary>
        /// The local time zone of the original acquisition date-time values. It is the deviation in hours and minutes from UTC. The first occurrence should be the actual local time zone at the start of acquisition and may represent a seasonally adjusted value such as daylight savings. The dTim attribute must be populated in the second and subsequent occurrences if the local time zone changes during acquisition. This knowledge is required because the original time zone in a dateTime value may be lost when software converts to a different time zone.
        /// </summary>
		[Description("The local time zone of the original acquisition date-time values.  It is the deviation in hours and minutes from UTC. The first occurrence should be the actual local time zone at the start of acquisition and may represent a seasonally adjusted value such as daylight savings. The dTim attribute must be populated in the second and subsequent occurrences  if the local time zone changes during acquisition. This knowledge is required because the original time zone in a dateTime value may be lost when software converts to a different time zone.")]
        [RecurringElement]
		[XmlElement("acquisitionTimeZone")]
        public List<TimestampedTimeZone> AcquisitionTimeZone {
            get {
                return acquisitionTimeZoneField;
            } 
            set {
                acquisitionTimeZoneField = value;
                NotifyPropertyChanged("AcquisitionTimeZone");
            }
        }

         /// <summary>
         /// bool to indicate if AcquisitionTimeZone has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AcquisitionTimeZoneSpecified
         {
             get {
             if(acquisitionTimeZoneField!=null)
                 return acquisitionTimeZoneField.Count>0?true:false;
             else return false;
             }
         }
        private List<TimestampedTimeZone> acquisitionTimeZoneField; 

        /// <summary>
        /// A pointer to the default wellDatum for measured depth coordinates, vertical depth coordinates and elevation coordinates in this object. Depth coordinates that do not specify a datum attribute shall be assumed to be measured relative to this default vertical datum. The referenced wellDatum must be defined within the well object associated with this object.
        /// </summary>
		[Description("A pointer to the default wellDatum for measured depth coordinates, vertical depth coordinates and elevation coordinates in this object.  Depth coordinates that do not specify a datum attribute shall be  assumed to be measured relative to this default vertical datum. The referenced wellDatum must be defined within the well object associated with this object.")]
        [ComponentElement]
		[XmlElement("defaultDatum")]
        public RefNameString DefaultDatum {
            get {
                return defaultDatumField;
            } 
            set {
                defaultDatumField = value;
                NotifyPropertyChanged("DefaultDatum");
            }
        }

        private RefNameString defaultDatumField; 

        /// <summary>
        /// This is an API query parameter. See the API specification for the behavior related to this element.
        /// </summary>
		[Description("This is an API query parameter. See the API specification for the behavior related to this element.")]
		[XmlElement("privateGroupOnly")]
        public Boolean? PrivateGroupOnly {
            get {
                return privateGroupOnlyField;
            } 
            set {
                privateGroupOnlyField = value;
                 this.PrivateGroupOnlySpecified = true;
                NotifyPropertyChanged("PrivateGroupOnly");
            }
        }

        private Boolean? privateGroupOnlyField; 

        /// <summary>
        /// privateGroupOnlySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PrivateGroupOnlySpecified {
            get {
                return privateGroupOnlySpecifiedField;
            } 
            set {
                privateGroupOnlySpecifiedField = value;
                NotifyPropertyChanged("PrivateGroupOnlySpecified");
            }
        }

        private Boolean privateGroupOnlySpecifiedField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timestampedTimeZone xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timestampedTimeZone", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the timestampedTimeZone xsd type.")]
    public partial class TimestampedTimeZone : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimestampedTimeZone class.
        /// </summary>
        public TimestampedTimeZone() {}

        /// <summary>
        /// Initializes a new instance of the TimestampedTimeZone class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public TimestampedTimeZone(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The date and time when this local time zone became active. This value must be defined on the second and subsequent occurrences.
        /// </summary>
		[Description("The date and time when this local time zone became active. This value must be defined on the second and subsequent occurrences.")]
        [XmlAttribute("dTim")]
		
        public DateTime DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        [RegularExpression("[Z]|([\\-+](([01][0-9])|(2[0-3])):[0-5][0-9])")]
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refNameString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refNameString", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the refNameString xsd type.")]
    public partial class RefNameString : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RefNameString class.
        /// </summary>
        public RefNameString() {}

        /// <summary>
        /// Initializes a new instance of the RefNameString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public RefNameString(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the node referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A reference to the unique identifier (uid attribute) in the node referenced by the name value.  This attribute is required within the context of a WITSML server.")]
        [XmlAttribute("uidRef")]
		
        public String UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private String uidRefField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Extension Schema. The intent is to allow standard WITSML schema extensions which will validate in older clients or servers. A client or server can ignore any schema that it does not recognize. New versions will modify specific elements to replace this type with a type that adds new elements, including another element with this type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_extensionAny", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Extension Schema. The intent is to allow standard WITSML schema extensions which will validate in older clients or servers. A client or server can ignore any schema that it does not recognize. New versions will modify specific elements to replace this type with a type that adds new elements, including another element with this type.")]
    public partial class ExtensionAny : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Any property
        /// </summary>
		[RecurringElement]
		[XmlAnyElement]
        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

         /// <summary>
         /// bool to indicate if Any has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnySpecified
         {
             get {
             if(AnyField!=null)
                 return AnyField.Count>0?true:false;
             else return false;
             }
         }
        private List<XmlElement> AnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Extension values Schema. The intent is to allow standard WITSML "named" extensions without having to modify the schema. A client or server can ignore any name that it does not recognize but certain meta data is required in order to allow generic clients or servers to process the value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_extensionNameValue", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Extension values Schema. The intent is to allow standard WITSML named extensions without having to modify the schema. A client or server can ignore any name that it does not recognize but certain meta data is required in order to allow generic clients or servers to process the value.")]
    public partial class ExtensionNameValue : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size. For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the WITSML SIG Technical Team before use.
        /// </summary>
		[Required]
        [Description("The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size.  For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the  WITSML SIG Technical Team before use.")]
		[XmlElement("name")]
        public ExtensionName Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private ExtensionName nameField; 

        /// <summary>
        /// The value of the extension. This may also include a uom attribute. The content should conform to constraints defined by the data type.
        /// </summary>
		[Required]
        [Description("The value of the extension.  This may also include a uom attribute.  The content should conform to constraints defined by the data type.")]
        [ComponentElement]
		[XmlElement("value")]
        public Extensionvalue Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Extensionvalue valueField; 

        /// <summary>
        /// The underlying XML type of the value.
        /// </summary>
		[Required]
        [Description("The underlying XML type of the value.")]
		[XmlElement("dataType")]
        public PrimitiveType? DataType {
            get {
                return dataTypeField;
            } 
            set {
                dataTypeField = value;
                NotifyPropertyChanged("DataType");
            }
        }

        private PrimitiveType? dataTypeField; 

        /// <summary>
        /// The date-time associated with the value.
        /// </summary>
		[Description("The date-time associated with the value.")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private Boolean dTimSpecifiedField; 

        /// <summary>
        /// The measured depth associated with the value.
        /// </summary>
		[Description("The measured depth associated with the value.")]
        [ComponentElement]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// Indexes things with the same name. That is, 1 indicates the first one, 2 incidates the second one, etc.
        /// </summary>
		[Description("Indexes things with the same name.  That is, 1 indicates the first one, 2 incidates the second one, etc.")]
		[XmlElement("index")]
        public Int16? Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private Int16? indexField; 

        /// <summary>
        /// indexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IndexSpecified {
            get {
                return indexSpecifiedField;
            } 
            set {
                indexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private Boolean indexSpecifiedField; 

        /// <summary>
        /// The kind of the measure. For example, "length". This should be specified if the value requires a unit of measure.
        /// </summary>
		[Description("The kind of the measure. For example, \"length\". This should be specified if the value requires a unit of measure.")]
		[XmlElement("measureClass")]
        public MeasureClass MeasureClass {
            get {
                return measureClassField;
            } 
            set {
                measureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass measureClassField; 

        /// <summary>
        /// measureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MeasureClassSpecified {
            get {
                return measureClassSpecifiedField;
            } 
            set {
                measureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private Boolean measureClassSpecifiedField; 

        /// <summary>
        /// A textual description of the extension.
        /// </summary>
		[StringLength(256)]
        [Description("A textual description of the extension.")]
		[XmlElement("description")]
        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the extensionvalue xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="extensionvalue", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the extensionvalue xsd type.")]
    public partial class Extensionvalue : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the Extensionvalue class.
        /// </summary>
        public Extensionvalue() {}

        /// <summary>
        /// Initializes a new instance of the Extensionvalue class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public Extensionvalue(String value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the value. This value must conform to the values allowed by a measure class.
        /// </summary>
		[StringLength(24)]
        [Description("The unit of measure for the value. This value must conform to the values allowed by a measure class.")]
        [XmlAttribute("uom")]
		
        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_customData xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_customData", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_customData xsd type.")]
    public partial class CustomData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Any property
        /// </summary>
		[RecurringElement]
		[XmlAnyElement]
        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

         /// <summary>
         /// bool to indicate if Any has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnySpecified
         {
             get {
             if(AnyField!=null)
                 return AnyField.Count>0?true:false;
             else return false;
             }
         }
        private List<XmlElement> AnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the indexedObject xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="indexedObject", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the indexedObject xsd type.")]
    public partial class IndexedObject : Object, IDataObject, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IndexedObject class.
        /// </summary>
        public IndexedObject() {}

        /// <summary>
        /// Initializes a new instance of the IndexedObject class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IndexedObject(String value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// index property
        /// </summary>
		[Required]
        [Description("Indexes things with the same name.  That is the first one, the second one, etc.")]
        [XmlAttribute("index")]
		
        public Int16 Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private Int16 indexField; 

		/// <summary>
        /// name property
        /// </summary>
		[StringLength(40)]
        [XmlAttribute("name")]
		
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

		/// <summary>
        /// uom property
        /// </summary>
		[StringLength(24)]
        [XmlAttribute("uom")]
		
        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 

		/// <summary>
        /// description property
        /// </summary>
		[StringLength(256)]
        [XmlAttribute("description")]
		
        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(40)]
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refObjectString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refObjectString", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the refObjectString xsd type.")]
    public partial class RefObjectString : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RefObjectString class.
        /// </summary>
        public RefObjectString() {}

        /// <summary>
        /// Initializes a new instance of the RefObjectString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public RefObjectString(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The type of data-object being referenced (e.g., "well", "wellbore").
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The type of data-object being referenced (e.g., \"well\", \"wellbore\").")]
        [XmlAttribute("object")]
		
        public String Object {
            get {
                return objectField;
            } 
            set {
                objectField = value;
                NotifyPropertyChanged("Object");
            }
        }

        private String objectField; 

		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the object referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A reference to the unique identifier (uid attribute) in the object referenced by the name value.  This attribute is required within the context of a WITSML server.")]
        [XmlAttribute("uidRef")]
		
        public String UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private String uidRefField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines a member of an objectGroup.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_memberObject", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Defines a member of an objectGroup.")]
    public partial class MemberObject : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A reference to an object that is defined within the context of the specified wellbore.
        /// </summary>
		[Required]
        [Description("A reference to an object that is defined within the  context of the specified wellbore.")]
        [ComponentElement]
		[XmlElement("objectReference")]
        public RefObjectString ObjectReference {
            get {
                return objectReferenceField;
            } 
            set {
                objectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private RefObjectString objectReferenceField; 

        /// <summary>
        /// For a log object, this specifies the kind of the index curve for the log. This is only relevant for a systematically growing object.
        /// </summary>
		[Description("For a log object, this specifies the kind of the index curve for the log. This is only relevant for a systematically growing object.")]
		[XmlElement("indexType")]
        public LogIndexType? IndexType {
            get {
                return indexTypeField;
            } 
            set {
                indexTypeField = value;
                 this.IndexTypeSpecified = true;
                NotifyPropertyChanged("IndexType");
            }
        }

        private LogIndexType? indexTypeField; 

        /// <summary>
        /// indexTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IndexTypeSpecified {
            get {
                return indexTypeSpecifiedField;
            } 
            set {
                indexTypeSpecifiedField = value;
                NotifyPropertyChanged("IndexTypeSpecified");
            }
        }

        private Boolean indexTypeSpecifiedField; 

        /// <summary>
        /// Defines primary numeric ordering of this object within the group. The meaning of this order will be defined by the groupType.
        /// </summary>
		[Required]
        [Description("Defines primary numeric ordering of this object within the group. The meaning of this order will be defined by the groupType.")]
        [ComponentElement]
		[XmlElement("sequence1")]
        public ObjectSequence Sequence1 {
            get {
                return sequence1Field;
            } 
            set {
                sequence1Field = value;
                NotifyPropertyChanged("Sequence1");
            }
        }

        private ObjectSequence sequence1Field; 

        /// <summary>
        /// Defines secondary numeric ordering of this object within the group. The meaning of this order will be defined by the groupType. A value for sequence2 can only be given if a value is given for sequence1.
        /// </summary>
		[ComponentElement]
		[XmlElement("sequence2")]
        public ObjectSequence Sequence2 {
            get {
                return sequence2Field;
            } 
            set {
                sequence2Field = value;
                NotifyPropertyChanged("Sequence2");
            }
        }

        private ObjectSequence sequence2Field; 

        /// <summary>
        /// Defines tertiary numeric ordering of this object within the group. The meaning of this order will be defined by the groupType. A value for sequence3 can only be given if a value is given for sequence2.
        /// </summary>
		[ComponentElement]
		[XmlElement("sequence3")]
        public ObjectSequence Sequence3 {
            get {
                return sequence3Field;
            } 
            set {
                sequence3Field = value;
                NotifyPropertyChanged("Sequence3");
            }
        }

        private ObjectSequence sequence3Field; 

        /// <summary>
        /// The minimum growing-object index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
		[Description("The minimum growing-object index value that applies to this group. The significance of this range is defined by the groupType.")]
        [ComponentElement]
		[XmlElement("rangeMin")]
        public GenericMeasure RangeMin {
            get {
                return rangeMinField;
            } 
            set {
                rangeMinField = value;
                NotifyPropertyChanged("RangeMin");
            }
        }

        private GenericMeasure rangeMinField; 

        /// <summary>
        /// The maximum growing-object index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
		[Description("The maximum growing-object index value that applies to this group. The significance of this range is defined by the groupType.")]
        [ComponentElement]
		[XmlElement("rangeMax")]
        public GenericMeasure RangeMax {
            get {
                return rangeMaxField;
            } 
            set {
                rangeMaxField = value;
                NotifyPropertyChanged("RangeMax");
            }
        }

        private GenericMeasure rangeMaxField; 

        /// <summary>
        /// The minimum log date-time index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
		[Description("The minimum log date-time index value that applies to this group. The significance of this range is defined by the groupType.")]
		[XmlElement("rangeDateTimeMin")]
        public Timestamp? RangeDateTimeMin {
            get {
                return rangeDateTimeMinField;
            } 
            set {
                rangeDateTimeMinField = value;
                 this.RangeDateTimeMinSpecified = true;
                NotifyPropertyChanged("RangeDateTimeMin");
            }
        }

        private Timestamp? rangeDateTimeMinField; 

        /// <summary>
        /// rangeDateTimeMinSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RangeDateTimeMinSpecified {
            get {
                return rangeDateTimeMinSpecifiedField;
            } 
            set {
                rangeDateTimeMinSpecifiedField = value;
                NotifyPropertyChanged("RangeDateTimeMinSpecified");
            }
        }

        private Boolean rangeDateTimeMinSpecifiedField; 

        /// <summary>
        /// The maximum log date-time index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
		[Description("The maximum log date-time index value that applies to this group. The significance of this range is defined by the groupType.")]
		[XmlElement("rangeDateTimeMax")]
        public Timestamp? RangeDateTimeMax {
            get {
                return rangeDateTimeMaxField;
            } 
            set {
                rangeDateTimeMaxField = value;
                 this.RangeDateTimeMaxSpecified = true;
                NotifyPropertyChanged("RangeDateTimeMax");
            }
        }

        private Timestamp? rangeDateTimeMaxField; 

        /// <summary>
        /// rangeDateTimeMaxSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RangeDateTimeMaxSpecified {
            get {
                return rangeDateTimeMaxSpecifiedField;
            } 
            set {
                rangeDateTimeMaxSpecifiedField = value;
                NotifyPropertyChanged("RangeDateTimeMaxSpecified");
            }
        }

        private Boolean rangeDateTimeMaxSpecifiedField; 

        /// <summary>
        /// A comma delimited list of log curve mnemonics. Each mnemonic should only occur once in the list. If not specified then the group applies to all curves in the log.
        /// </summary>
		[Description("A comma delimited list of log curve mnemonics. Each mnemonic should only occur once in the list. If not specified then the group applies to all curves in the log.")]
		[XmlElement("mnemonicList")]
        public String MnemonicList {
            get {
                return mnemonicListField;
            } 
            set {
                mnemonicListField = value;
                NotifyPropertyChanged("MnemonicList");
            }
        }

        private String mnemonicListField; 

        /// <summary>
        /// A measured depth related to this group. This does not necessarily represent an actual depth within a growing-object. The significance of this depth is defined by the groupType.
        /// </summary>
		[Description("A measured depth related to this group.  This does not necessarily represent an actual depth within a growing-object. The significance of this depth is defined by the groupType.")]
        [ComponentElement]
		[XmlElement("referenceDepth")]
        public MeasuredDepthCoord ReferenceDepth {
            get {
                return referenceDepthField;
            } 
            set {
                referenceDepthField = value;
                NotifyPropertyChanged("ReferenceDepth");
            }
        }

        private MeasuredDepthCoord referenceDepthField; 

        /// <summary>
        /// A date and time related to this group. This does not necessarily represent an actual index within a growing-object. The significance of this time is defined by the groupType.
        /// </summary>
		[Description("A date and time related to this group.  This does not necessarily represent an actual index within a growing-object. The significance of this time is defined by the groupType.")]
		[XmlElement("referenceDateTime")]
        public Timestamp? ReferenceDateTime {
            get {
                return referenceDateTimeField;
            } 
            set {
                referenceDateTimeField = value;
                 this.ReferenceDateTimeSpecified = true;
                NotifyPropertyChanged("ReferenceDateTime");
            }
        }

        private Timestamp? referenceDateTimeField; 

        /// <summary>
        /// referenceDateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ReferenceDateTimeSpecified {
            get {
                return referenceDateTimeSpecifiedField;
            } 
            set {
                referenceDateTimeSpecifiedField = value;
                NotifyPropertyChanged("ReferenceDateTimeSpecified");
            }
        }

        private Boolean referenceDateTimeSpecifiedField; 

        /// <summary>
        /// Any extra parameter data related to the group. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.
        /// </summary>
		[Description("Any extra parameter data related to the group.  For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.")]
        [RecurringElement]
		[XmlElement("param")]
        public List<IndexedObject> Param {
            get {
                return paramField;
            } 
            set {
                paramField = value;
                NotifyPropertyChanged("Param");
            }
        }

         /// <summary>
         /// bool to indicate if Param has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParamSpecified
         {
             get {
             if(paramField!=null)
                 return paramField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> paramField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the objectSequence xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="objectSequence", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the objectSequence xsd type.")]
    public partial class ObjectSequence : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ObjectSequence class.
        /// </summary>
        public ObjectSequence() {}

        /// <summary>
        /// Initializes a new instance of the ObjectSequence class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public ObjectSequence(Int16 value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A description related to the sequence number.
        /// </summary>
		[StringLength(256)]
        [Description("A description related to the sequence number.")]
        [XmlAttribute("description")]
		
        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Int16 Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Int16 ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on WITSML objects used
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_participant", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on WITSML objects used")]
    public partial class Participant : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A collection of involved participants.
        /// </summary>
		[Description("A collection of involved participants.")]
        [RecurringElement]
		[XmlElement("participant")]
        public List<MemberObject> Participants {
            get {
                return participantField;
            } 
            set {
                participantField = value;
                NotifyPropertyChanged("Participants");
            }
        }

         /// <summary>
         /// bool to indicate if Participants has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParticipantsSpecified
         {
             get {
             if(participantField!=null)
                 return participantField.Count>0?true:false;
             else return false;
             }
         }
        private List<MemberObject> participantField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extNameValues")]
        public List<ExtensionNameValue> ExtNameValues {
            get {
                return extNameValuesField;
            } 
            set {
                extNameValuesField = value;
                NotifyPropertyChanged("ExtNameValues");
            }
        }

         /// <summary>
         /// bool to indicate if ExtNameValues has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtNameValuesSpecified
         {
             get {
             if(extNameValuesField!=null)
                 return extNameValuesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extNameValuesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Equipment NameTag Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_nameTag", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Equipment NameTag Schema")]
    public partial class NameTag : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The physical identification string of the equipment tag.
        /// </summary>
		[Required]
        [StringLength(40)]
        [Description("The physical identification string of the equipment tag.")]
		[XmlElement("name")]
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

        /// <summary>
        /// The format or encoding specification of the equipment tag. The tag may contain may different pieces of information and knowledge of that information is inherent in the specification. The "identification string" is a mandatory part of the information in a tag.
        /// </summary>
		[Required]
        [Description("The format or encoding specification of the equipment tag.  The tag may contain may different pieces of information and knowledge of that  information is inherent in the specification.  The \"identification string\" is a mandatory part of the information in a tag.")]
		[XmlElement("numberingScheme")]
        public NameTagNumberingScheme NumberingScheme {
            get {
                return numberingSchemeField;
            } 
            set {
                numberingSchemeField = value;
                NotifyPropertyChanged("NumberingScheme");
            }
        }

        private NameTagNumberingScheme numberingSchemeField; 

        /// <summary>
        /// Identifies the general type of identifier on an item. If multiple identifiers exist on an item, a separate description set for each identifier should be created. For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling. The barcode label may in turn be an RFID equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label' - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label' - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.
        /// </summary>
		[Description("Identifies the general type of identifier on an item.  If multiple identifiers exist on an item, a separate description set for each identifier should be created.   For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling.  The barcode label may in turn be an RFID equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label'  - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label'  - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.")]
		[XmlElement("technology")]
        public NameTagTechnology Technology {
            get {
                return technologyField;
            } 
            set {
                technologyField = value;
                 this.TechnologySpecified = true;
                NotifyPropertyChanged("Technology");
            }
        }

        private NameTagTechnology technologyField; 

        /// <summary>
        /// technologySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TechnologySpecified {
            get {
                return technologySpecifiedField;
            } 
            set {
                technologySpecifiedField = value;
                NotifyPropertyChanged("TechnologySpecified");
            }
        }

        private Boolean technologySpecifiedField; 

        /// <summary>
        /// An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item. This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener. 'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item. Most non-downhole tools will use either 'body', 'other' or not specified as the location tends to lose value with smaller or non threaded items.
        /// </summary>
		[Description("An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item.  This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener.  'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item.  Most non-downhole tools will use either 'body', 'other' or not specified as the location tends to lose value with smaller or non threaded items.")]
		[XmlElement("location")]
        public NameTagLocation Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                 this.LocationSpecified = true;
                NotifyPropertyChanged("Location");
            }
        }

        private NameTagLocation locationField; 

        /// <summary>
        /// locationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean LocationSpecified {
            get {
                return locationSpecifiedField;
            } 
            set {
                locationSpecifiedField = value;
                NotifyPropertyChanged("LocationSpecified");
            }
        }

        private Boolean locationSpecifiedField; 

        /// <summary>
        /// When the tag was installed in or on the item. 
        /// </summary>
		[Description("When the tag was installed in or on the item.")]
		[XmlElement("installationDate")]
        public Timestamp? InstallationDate {
            get {
                return installationDateField;
            } 
            set {
                installationDateField = value;
                 this.InstallationDateSpecified = true;
                NotifyPropertyChanged("InstallationDate");
            }
        }

        private Timestamp? installationDateField; 

        /// <summary>
        /// installationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean InstallationDateSpecified {
            get {
                return installationDateSpecifiedField;
            } 
            set {
                installationDateSpecifiedField = value;
                NotifyPropertyChanged("InstallationDateSpecified");
            }
        }

        private Boolean installationDateSpecifiedField; 

        /// <summary>
        /// The name of the company that installed the tag. 
        /// </summary>
		[StringLength(64)]
        [Description("The name of the company that installed the tag.")]
		[XmlElement("installationCompany")]
        public String InstallationCompany {
            get {
                return installationCompanyField;
            } 
            set {
                installationCompanyField = value;
                NotifyPropertyChanged("InstallationCompany");
            }
        }

        private String installationCompanyField; 

        /// <summary>
        /// Reference to a manufacturers or installers installation description, code, or method. 
        /// </summary>
		[StringLength(40)]
        [Description("Reference to a manufacturers or installers installation  description, code, or method.")]
		[XmlElement("mountingCode")]
        public String MountingCode {
            get {
                return mountingCodeField;
            } 
            set {
                mountingCodeField = value;
                NotifyPropertyChanged("MountingCode");
            }
        }

        private String mountingCodeField; 

        /// <summary>
        /// A comment or remark about the tag.
        /// </summary>
		[StringLength(4000)]
        [Description("A comment or remark about the tag.")]
		[XmlElement("comment")]
        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cost xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cost", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cost xsd type.")]
    public partial class Cost : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the Cost class.
        /// </summary>
        public Cost() {}

        /// <summary>
        /// Initializes a new instance of the Cost class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public Cost(Double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// currency property
        /// </summary>
		[StringLength(40)]
        [XmlAttribute("currency")]
		
        public String Currency {
            get {
                return currencyField;
            } 
            set {
                currencyField = value;
                NotifyPropertyChanged("Currency");
            }
        }

        private String currencyField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Day Cost Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_dayCost", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Day Cost Component Schema ")]
    public partial class DayCost : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// AFE number that this cost item applies to. 
        /// </summary>
		[StringLength(32)]
        [Description("AFE number that this cost item applies to.")]
		[XmlElement("numAFE")]
        public String NumAFE {
            get {
                return numAFEField;
            } 
            set {
                numAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private String numAFEField; 

        /// <summary>
        /// Cost group code. 
        /// </summary>
		[StringLength(16)]
        [Description("Cost group code.")]
		[XmlElement("costGroup")]
        public String CostGroup {
            get {
                return costGroupField;
            } 
            set {
                costGroupField = value;
                NotifyPropertyChanged("CostGroup");
            }
        }

        private String costGroupField; 

        /// <summary>
        /// Cost class code. 
        /// </summary>
		[Required]
        [StringLength(16)]
        [Description("Cost class code.")]
		[XmlElement("costClass")]
        public String CostClass {
            get {
                return costClassField;
            } 
            set {
                costClassField = value;
                NotifyPropertyChanged("CostClass");
            }
        }

        private String costClassField; 

        /// <summary>
        /// Cost code. 
        /// </summary>
		[Required]
        [StringLength(16)]
        [Description("Cost code.")]
		[XmlElement("costCode")]
        public String CostCode {
            get {
                return costCodeField;
            } 
            set {
                costCodeField = value;
                NotifyPropertyChanged("CostCode");
            }
        }

        private String costCodeField; 

        /// <summary>
        /// Cost subcode. 
        /// </summary>
		[StringLength(16)]
        [Description("Cost subcode.")]
		[XmlElement("costSubCode")]
        public String CostSubCode {
            get {
                return costSubCodeField;
            } 
            set {
                costSubCodeField = value;
                NotifyPropertyChanged("CostSubCode");
            }
        }

        private String costSubCodeField; 

        /// <summary>
        /// Description of cost item. 
        /// </summary>
		[StringLength(64)]
        [Description("Description of cost item.")]
		[XmlElement("costItemDescription")]
        public String CostItemDescription {
            get {
                return costItemDescriptionField;
            } 
            set {
                costItemDescriptionField = value;
                NotifyPropertyChanged("CostItemDescription");
            }
        }

        private String costItemDescriptionField; 

        /// <summary>
        /// Cost per cost item, assume same currency.
        /// </summary>
		[Description("Cost per cost item, assume same currency.")]
        [ComponentElement]
		[XmlElement("costPerItem")]
        public Cost CostPerItem {
            get {
                return costPerItemField;
            } 
            set {
                costPerItemField = value;
                NotifyPropertyChanged("CostPerItem");
            }
        }

        private Cost costPerItemField; 

        /// <summary>
        /// The kind of cost item specified (e.g., rig dayrate, joints casing). 
        /// </summary>
		[StringLength(24)]
        [Description("The kind of cost item specified (e.g., rig dayrate, joints casing).")]
		[XmlElement("itemKind")]
        public String ItemKind {
            get {
                return itemKindField;
            } 
            set {
                itemKindField = value;
                NotifyPropertyChanged("ItemKind");
            }
        }

        private String itemKindField; 

        /// <summary>
        /// Size of one cost item. 
        /// </summary>
		[Description("Size of one cost item.")]
		[XmlElement("itemSize")]
        public Double? ItemSize {
            get {
                return itemSizeField;
            } 
            set {
                itemSizeField = value;
                 this.ItemSizeSpecified = true;
                NotifyPropertyChanged("ItemSize");
            }
        }

        private Double? itemSizeField; 

        /// <summary>
        /// itemSizeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ItemSizeSpecified {
            get {
                return itemSizeSpecifiedField;
            } 
            set {
                itemSizeSpecifiedField = value;
                NotifyPropertyChanged("ItemSizeSpecified");
            }
        }

        private Boolean itemSizeSpecifiedField; 

        /// <summary>
        /// Number of cost items used that day e.g. 1 rig dayrate, 30 joints casing. 
        /// </summary>
		[Description("Number of cost items used that day e.g. 1 rig dayrate, 30 joints casing.")]
		[XmlElement("qtyItem")]
        public Int16? QtyItem {
            get {
                return qtyItemField;
            } 
            set {
                qtyItemField = value;
                 this.QtyItemSpecified = true;
                NotifyPropertyChanged("QtyItem");
            }
        }

        private Int16? qtyItemField; 

        /// <summary>
        /// qtyItemSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean QtyItemSpecified {
            get {
                return qtyItemSpecifiedField;
            } 
            set {
                qtyItemSpecifiedField = value;
                NotifyPropertyChanged("QtyItemSpecified");
            }
        }

        private Boolean qtyItemSpecifiedField; 

        /// <summary>
        /// Cost for the item for this record. 
        /// </summary>
		[Required]
        [Description("Cost for the item for this record.")]
        [ComponentElement]
		[XmlElement("costAmount")]
        public Cost CostAmount {
            get {
                return costAmountField;
            } 
            set {
                costAmountField = value;
                NotifyPropertyChanged("CostAmount");
            }
        }

        private Cost costAmountField; 

        /// <summary>
        /// Invoice number for cost item, bill sent to Operator. 
        /// </summary>
		[StringLength(32)]
        [Description("Invoice number for cost item, bill sent to Operator.")]
		[XmlElement("numInvoice")]
        public String NumInvoice {
            get {
                return numInvoiceField;
            } 
            set {
                numInvoiceField = value;
                NotifyPropertyChanged("NumInvoice");
            }
        }

        private String numInvoiceField; 

        /// <summary>
        /// Purchase order number, provided by Operator. 
        /// </summary>
		[StringLength(32)]
        [Description("Purchase order number, provided by Operator.")]
		[XmlElement("numPO")]
        public String NumPO {
            get {
                return numPOField;
            } 
            set {
                numPOField = value;
                NotifyPropertyChanged("NumPO");
            }
        }

        private String numPOField; 

        /// <summary>
        /// Field Ticket number, issued by service company on location. 
        /// </summary>
		[StringLength(32)]
        [Description("Field Ticket number, issued by service company on location.")]
		[XmlElement("numTicket")]
        public String NumTicket {
            get {
                return numTicketField;
            } 
            set {
                numTicketField = value;
                NotifyPropertyChanged("NumTicket");
            }
        }

        private String numTicketField; 

        /// <summary>
        /// Is this item carried from day to day? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is this item carried from day to day? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("isCarryOver")]
        public Boolean? IsCarryOver {
            get {
                return isCarryOverField;
            } 
            set {
                isCarryOverField = value;
                 this.IsCarryOverSpecified = true;
                NotifyPropertyChanged("IsCarryOver");
            }
        }

        private Boolean? isCarryOverField; 

        /// <summary>
        /// isCarryOverSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsCarryOverSpecified {
            get {
                return isCarryOverSpecifiedField;
            } 
            set {
                isCarryOverSpecifiedField = value;
                NotifyPropertyChanged("IsCarryOverSpecified");
            }
        }

        private Boolean isCarryOverSpecifiedField; 

        /// <summary>
        /// Is this item a rental? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is this item a rental? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("isRental")]
        public Boolean? IsRental {
            get {
                return isRentalField;
            } 
            set {
                isRentalField = value;
                 this.IsRentalSpecified = true;
                NotifyPropertyChanged("IsRental");
            }
        }

        private Boolean? isRentalField; 

        /// <summary>
        /// isRentalSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsRentalSpecified {
            get {
                return isRentalSpecifiedField;
            } 
            set {
                isRentalSpecifiedField = value;
                NotifyPropertyChanged("IsRentalSpecified");
            }
        }

        private Boolean isRentalSpecifiedField; 

        /// <summary>
        /// An identification tag for the item. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the item. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
		[XmlElement("nameTag")]
        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(nameTagField!=null)
                 return nameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> nameTagField; 

        /// <summary>
        /// Serial number. 
        /// </summary>
		[StringLength(32)]
        [Description("Serial number.")]
		[XmlElement("numSerial")]
        public String NumSerial {
            get {
                return numSerialField;
            } 
            set {
                numSerialField = value;
                NotifyPropertyChanged("NumSerial");
            }
        }

        private String numSerialField; 

        /// <summary>
        /// Name of vendor. 
        /// </summary>
		[StringLength(32)]
        [Description("Name of vendor.")]
		[XmlElement("nameVendor")]
        public String NameVendor {
            get {
                return nameVendorField;
            } 
            set {
                nameVendorField = value;
                NotifyPropertyChanged("NameVendor");
            }
        }

        private String nameVendorField; 

        /// <summary>
        /// Vendor number. 
        /// </summary>
		[StringLength(16)]
        [Description("Vendor number.")]
		[XmlElement("numVendor")]
        public String NumVendor {
            get {
                return numVendorField;
            } 
            set {
                numVendorField = value;
                NotifyPropertyChanged("NumVendor");
            }
        }

        private String numVendorField; 

        /// <summary>
        /// Name of pool/reservoir that this cost item can be accounted to. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of pool/reservoir that this cost item can be accounted to.")]
		[XmlElement("pool")]
        public String Pool {
            get {
                return poolField;
            } 
            set {
                poolField = value;
                NotifyPropertyChanged("Pool");
            }
        }

        private String poolField; 

        /// <summary>
        /// Is this an estimated cost? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is this an estimated cost? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("estimated")]
        public Boolean? Estimated {
            get {
                return estimatedField;
            } 
            set {
                estimatedField = value;
                 this.EstimatedSpecified = true;
                NotifyPropertyChanged("Estimated");
            }
        }

        private Boolean? estimatedField; 

        /// <summary>
        /// estimatedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EstimatedSpecified {
            get {
                return estimatedSpecifiedField;
            } 
            set {
                estimatedSpecifiedField = value;
                NotifyPropertyChanged("EstimatedSpecified");
            }
        }

        private Boolean estimatedSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on downhole related to this event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_downholeExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on downhole related to this event.")]
    public partial class DownholeExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to downhole component 
        /// </summary>
		[StringLength(64)]
        [Description("Reference to downhole component")]
		[XmlElement("downholeComponentRefID")]
        public String DownholeComponentRefID {
            get {
                return downholeComponentRefIDField;
            } 
            set {
                downholeComponentRefIDField = value;
                NotifyPropertyChanged("DownholeComponentRefID");
            }
        }

        private String downholeComponentRefIDField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on fluid report event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidReportExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on fluid report event.")]
    public partial class FluidReportExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to the fluid report
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Reference to the fluid report")]
		[XmlElement("fluidReportRefID")]
        public String FluidReportRefID {
            get {
                return fluidReportRefIDField;
            } 
            set {
                fluidReportRefIDField = value;
                NotifyPropertyChanged("FluidReportRefID");
            }
        }

        private String fluidReportRefIDField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on the perforating job.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perforating", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on the perforating job.")]
    public partial class Perforating : Object, INotifyPropertyChanged
    {

        /// <summary>
        ///  index number of stage
        /// </summary>
		[Description("index number of stage")]
		[XmlElement("stageNumber")]
        public Int16? StageNumber {
            get {
                return stageNumberField;
            } 
            set {
                stageNumberField = value;
                 this.StageNumberSpecified = true;
                NotifyPropertyChanged("StageNumber");
            }
        }

        private Int16? stageNumberField; 

        /// <summary>
        /// stageNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StageNumberSpecified {
            get {
                return stageNumberSpecifiedField;
            } 
            set {
                stageNumberSpecifiedField = value;
                NotifyPropertyChanged("StageNumberSpecified");
            }
        }

        private Boolean stageNumberSpecifiedField; 

        /// <summary>
        /// Perf-Bottom of packer set depth 
        /// </summary>
		[Description("Perf-Bottom of packer set depth")]
        [ComponentElement]
		[XmlElement("bottomPackerSet")]
        public MeasuredDepthCoord BottomPackerSet {
            get {
                return bottomPackerSetField;
            } 
            set {
                bottomPackerSetField = value;
                NotifyPropertyChanged("BottomPackerSet");
            }
        }

        private MeasuredDepthCoord bottomPackerSetField; 

        /// <summary>
        /// Perforation fluid type
        /// </summary>
		[StringLength(64)]
        [Description("Perforation fluid type")]
		[XmlElement("perforationFluidType")]
        public String PerforationFluidType {
            get {
                return perforationFluidTypeField;
            } 
            set {
                perforationFluidTypeField = value;
                NotifyPropertyChanged("PerforationFluidType");
            }
        }

        private String perforationFluidTypeField; 

        /// <summary>
        /// hydrostaticPressure
        /// </summary>
		[Description("hydrostaticPressure")]
        [ComponentElement]
		[XmlElement("hydrostaticPressure")]
        public PressureMeasure HydrostaticPressure {
            get {
                return hydrostaticPressureField;
            } 
            set {
                hydrostaticPressureField = value;
                NotifyPropertyChanged("HydrostaticPressure");
            }
        }

        private PressureMeasure hydrostaticPressureField; 

        /// <summary>
        /// Surface pressure
        /// </summary>
		[Description("Surface pressure")]
        [ComponentElement]
		[XmlElement("surfacePressure")]
        public PressureMeasure SurfacePressure {
            get {
                return surfacePressureField;
            } 
            set {
                surfacePressureField = value;
                NotifyPropertyChanged("SurfacePressure");
            }
        }

        private PressureMeasure surfacePressureField; 

        /// <summary>
        /// Reservoir pressure
        /// </summary>
		[Description("Reservoir pressure")]
        [ComponentElement]
		[XmlElement("reservoirPressure")]
        public PressureMeasure ReservoirPressure {
            get {
                return reservoirPressureField;
            } 
            set {
                reservoirPressureField = value;
                NotifyPropertyChanged("ReservoirPressure");
            }
        }

        private PressureMeasure reservoirPressureField; 

        /// <summary>
        /// The density of fluid
        /// </summary>
		[Description("The density of fluid")]
        [ComponentElement]
		[XmlElement("fluidDensity")]
        public DensityMeasure FluidDensity {
            get {
                return fluidDensityField;
            } 
            set {
                fluidDensityField = value;
                NotifyPropertyChanged("FluidDensity");
            }
        }

        private DensityMeasure fluidDensityField; 

        /// <summary>
        /// Fluid level.
        /// </summary>
		[Description("Fluid level.")]
        [ComponentElement]
		[XmlElement("fluidLevel")]
        public MeasuredDepthCoord FluidLevel {
            get {
                return fluidLevelField;
            } 
            set {
                fluidLevelField = value;
                NotifyPropertyChanged("FluidLevel");
            }
        }

        private MeasuredDepthCoord fluidLevelField; 

        /// <summary>
        /// The conveyance method
        /// </summary>
		[Description("The conveyance method")]
		[XmlElement("conveyanceMethod")]
        public PerfConveyanceMethod? ConveyanceMethod {
            get {
                return conveyanceMethodField;
            } 
            set {
                conveyanceMethodField = value;
                 this.ConveyanceMethodSpecified = true;
                NotifyPropertyChanged("ConveyanceMethod");
            }
        }

        private PerfConveyanceMethod? conveyanceMethodField; 

        /// <summary>
        /// conveyanceMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ConveyanceMethodSpecified {
            get {
                return conveyanceMethodSpecifiedField;
            } 
            set {
                conveyanceMethodSpecifiedField = value;
                NotifyPropertyChanged("ConveyanceMethodSpecified");
            }
        }

        private Boolean conveyanceMethodSpecifiedField; 

        /// <summary>
        /// Number of shots planned
        /// </summary>
		[Description("Number of shots planned")]
		[XmlElement("shotsPlanned")]
        public Int16? ShotsPlanned {
            get {
                return shotsPlannedField;
            } 
            set {
                shotsPlannedField = value;
                 this.ShotsPlannedSpecified = true;
                NotifyPropertyChanged("ShotsPlanned");
            }
        }

        private Int16? shotsPlannedField; 

        /// <summary>
        /// shotsPlannedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ShotsPlannedSpecified {
            get {
                return shotsPlannedSpecifiedField;
            } 
            set {
                shotsPlannedSpecifiedField = value;
                NotifyPropertyChanged("ShotsPlannedSpecified");
            }
        }

        private Boolean shotsPlannedSpecifiedField; 

        /// <summary>
        /// Number of shots per unit length (ft, m)
        /// </summary>
		[Description("Number of shots per unit length (ft, m)")]
        [ComponentElement]
		[XmlElement("shotsDensity")]
        public PerLengthMeasure ShotsDensity {
            get {
                return shotsDensityField;
            } 
            set {
                shotsDensityField = value;
                NotifyPropertyChanged("ShotsDensity");
            }
        }

        private PerLengthMeasure shotsDensityField; 

        /// <summary>
        /// The number of missed firings from the gun.
        /// </summary>
		[Description("The number of missed firings from the gun.")]
		[XmlElement("shotsMisfired")]
        public Int16? ShotsMisfired {
            get {
                return shotsMisfiredField;
            } 
            set {
                shotsMisfiredField = value;
                 this.ShotsMisfiredSpecified = true;
                NotifyPropertyChanged("ShotsMisfired");
            }
        }

        private Int16? shotsMisfiredField; 

        /// <summary>
        /// shotsMisfiredSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ShotsMisfiredSpecified {
            get {
                return shotsMisfiredSpecifiedField;
            } 
            set {
                shotsMisfiredSpecifiedField = value;
                NotifyPropertyChanged("ShotsMisfiredSpecified");
            }
        }

        private Boolean shotsMisfiredSpecifiedField; 

        /// <summary>
        /// orientaton
        /// </summary>
		[StringLength(64)]
        [Description("orientaton")]
		[XmlElement("orientation")]
        public String Orientation {
            get {
                return orientationField;
            } 
            set {
                orientationField = value;
                NotifyPropertyChanged("Orientation");
            }
        }

        private String orientationField; 

        /// <summary>
        /// Description of orientaton method
        /// </summary>
		[StringLength(64)]
        [Description("Description of orientaton method")]
		[XmlElement("orientationMethod")]
        public String OrientationMethod {
            get {
                return orientationMethodField;
            } 
            set {
                orientationMethodField = value;
                NotifyPropertyChanged("OrientationMethod");
            }
        }

        private String orientationMethodField; 

        /// <summary>
        /// The name of company providing the perforation.
        /// </summary>
		[StringLength(64)]
        [Description("The name of company providing the perforation.")]
		[XmlElement("perforationCompany")]
        public String PerforationCompany {
            get {
                return perforationCompanyField;
            } 
            set {
                perforationCompanyField = value;
                NotifyPropertyChanged("PerforationCompany");
            }
        }

        private String perforationCompanyField; 

        /// <summary>
        /// The manufacturer of the carrier.
        /// </summary>
		[StringLength(64)]
        [Description("The manufacturer of the carrier.")]
		[XmlElement("carrierManufacturer")]
        public String CarrierManufacturer {
            get {
                return carrierManufacturerField;
            } 
            set {
                carrierManufacturerField = value;
                NotifyPropertyChanged("CarrierManufacturer");
            }
        }

        private String carrierManufacturerField; 

        /// <summary>
        /// Size of the carrier.
        /// </summary>
		[Description("Size of the carrier.")]
        [ComponentElement]
		[XmlElement("carrierSize")]
        public LengthMeasure CarrierSize {
            get {
                return carrierSizeField;
            } 
            set {
                carrierSizeField = value;
                NotifyPropertyChanged("CarrierSize");
            }
        }

        private LengthMeasure carrierSizeField; 

        /// <summary>
        /// Description from carrier
        /// </summary>
		[StringLength(4000)]
        [Description("Description from carrier")]
		[XmlElement("carrierDescription")]
        public String CarrierDescription {
            get {
                return carrierDescriptionField;
            } 
            set {
                carrierDescriptionField = value;
                NotifyPropertyChanged("CarrierDescription");
            }
        }

        private String carrierDescriptionField; 

        /// <summary>
        /// The manufacturer of the charge.
        /// </summary>
		[StringLength(64)]
        [Description("The manufacturer of the charge.")]
		[XmlElement("chargeManufacturer")]
        public String ChargeManufacturer {
            get {
                return chargeManufacturerField;
            } 
            set {
                chargeManufacturerField = value;
                NotifyPropertyChanged("ChargeManufacturer");
            }
        }

        private String chargeManufacturerField; 

        /// <summary>
        /// The size of the charge.
        /// </summary>
		[Description("The size of the charge.")]
        [ComponentElement]
		[XmlElement("chargeSize")]
        public LengthMeasure ChargeSize {
            get {
                return chargeSizeField;
            } 
            set {
                chargeSizeField = value;
                NotifyPropertyChanged("ChargeSize");
            }
        }

        private LengthMeasure chargeSizeField; 

        /// <summary>
        /// The weight of the charge.
        /// </summary>
		[Description("The weight of the charge.")]
        [ComponentElement]
		[XmlElement("chargeWeight")]
        public MassMeasure ChargeWeight {
            get {
                return chargeWeightField;
            } 
            set {
                chargeWeightField = value;
                NotifyPropertyChanged("ChargeWeight");
            }
        }

        private MassMeasure chargeWeightField; 

        /// <summary>
        /// The type of the charge.
        /// </summary>
		[StringLength(64)]
        [Description("The type of the charge.")]
		[XmlElement("chargeType")]
        public String ChargeType {
            get {
                return chargeTypeField;
            } 
            set {
                chargeTypeField = value;
                NotifyPropertyChanged("ChargeType");
            }
        }

        private String chargeTypeField; 

        /// <summary>
        /// Reference to the log
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Reference to the log")]
		[XmlElement("refLog")]
        public String RefLog {
            get {
                return refLogField;
            } 
            set {
                refLogField = value;
                NotifyPropertyChanged("RefLog");
            }
        }

        private String refLogField; 

        /// <summary>
        /// True if centralized, else decentralized.
        /// </summary>
		[StringLength(64)]
        [Description("True if centralized, else decentralized.")]
		[XmlElement("gunCentralized")]
        public String GunCentralized {
            get {
                return gunCentralizedField;
            } 
            set {
                gunCentralizedField = value;
                NotifyPropertyChanged("GunCentralized");
            }
        }

        private String gunCentralizedField; 

        /// <summary>
        /// The size of the perforation gun.
        /// </summary>
		[Description("The size of the perforation gun.")]
        [ComponentElement]
		[XmlElement("gunSize")]
        public LengthMeasure GunSize {
            get {
                return gunSizeField;
            } 
            set {
                gunSizeField = value;
                NotifyPropertyChanged("GunSize");
            }
        }

        private LengthMeasure gunSizeField; 

        /// <summary>
        /// Description about the perforating gun.
        /// </summary>
		[StringLength(4000)]
        [Description("Description about the perforating gun.")]
		[XmlElement("gunDesciption")]
        public String GunDesciption {
            get {
                return gunDesciptionField;
            } 
            set {
                gunDesciptionField = value;
                NotifyPropertyChanged("GunDesciption");
            }
        }

        private String gunDesciptionField; 

        /// <summary>
        /// Flag indicating whether the gun is left in hole or not.
        /// </summary>
		[Description("Flag indicating whether the gun is left in hole or not.")]
		[XmlElement("gunLeftInHole")]
        public Boolean? GunLeftInHole {
            get {
                return gunLeftInHoleField;
            } 
            set {
                gunLeftInHoleField = value;
                 this.GunLeftInHoleSpecified = true;
                NotifyPropertyChanged("GunLeftInHole");
            }
        }

        private Boolean? gunLeftInHoleField; 

        /// <summary>
        /// gunLeftInHoleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean GunLeftInHoleSpecified {
            get {
                return gunLeftInHoleSpecifiedField;
            } 
            set {
                gunLeftInHoleSpecifiedField = value;
                NotifyPropertyChanged("GunLeftInHoleSpecified");
            }
        }

        private Boolean gunLeftInHoleSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on the perforating event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perforatingExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on the perforating event.")]
    public partial class PerforatingExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The perforationSet reference ID.
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The perforationSet reference ID.")]
		[XmlElement("perforationSetRefID")]
        public String PerforationSetRefID {
            get {
                return perforationSetRefIDField;
            } 
            set {
                perforationSetRefIDField = value;
                NotifyPropertyChanged("PerforationSetRefID");
            }
        }

        private String perforationSetRefIDField; 

        /// <summary>
        /// Information on perforating event.
        /// </summary>
		[Description("Information on perforating event.")]
        [RecurringElement]
		[XmlElement("perforating")]
        public List<Perforating> Perforating {
            get {
                return perforatingField;
            } 
            set {
                perforatingField = value;
                NotifyPropertyChanged("Perforating");
            }
        }

         /// <summary>
         /// bool to indicate if Perforating has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforatingSpecified
         {
             get {
             if(perforatingField!=null)
                 return perforatingField.Count>0?true:false;
             else return false;
             }
         }
        private List<Perforating> perforatingField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on waiting event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_waitingOnExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on waiting event.")]
    public partial class WaitingOnExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Sub category
        /// </summary>
		[StringLength(64)]
        [Description("Sub category")]
		[XmlElement("subCategory")]
        public String SubCategory {
            get {
                return subCategoryField;
            } 
            set {
                subCategoryField = value;
                NotifyPropertyChanged("SubCategory");
            }
        }

        private String subCategoryField; 

        /// <summary>
        /// Code for charge type
        /// </summary>
		[StringLength(64)]
        [Description("Code for charge type")]
		[XmlElement("chargeTypeCode")]
        public String ChargeTypeCode {
            get {
                return chargeTypeCodeField;
            } 
            set {
                chargeTypeCodeField = value;
                NotifyPropertyChanged("ChargeTypeCode");
            }
        }

        private String chargeTypeCodeField; 

        /// <summary>
        /// Business organization waiting on 
        /// </summary>
		[StringLength(64)]
        [Description("Business organization waiting on")]
		[XmlElement("businessOrgWaitingOn")]
        public String BusinessOrgWaitingOn {
            get {
                return businessOrgWaitingOnField;
            } 
            set {
                businessOrgWaitingOnField = value;
                NotifyPropertyChanged("BusinessOrgWaitingOn");
            }
        }

        private String businessOrgWaitingOnField; 

        /// <summary>
        /// Flag indicating whether producer is charged or not
        /// </summary>
		[Description("Flag indicating whether producer is charged or not")]
		[XmlElement("isNoChargeToProducer")]
        public Boolean? IsNoChargeToProducer {
            get {
                return isNoChargeToProducerField;
            } 
            set {
                isNoChargeToProducerField = value;
                 this.IsNoChargeToProducerSpecified = true;
                NotifyPropertyChanged("IsNoChargeToProducer");
            }
        }

        private Boolean? isNoChargeToProducerField; 

        /// <summary>
        /// isNoChargeToProducerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsNoChargeToProducerSpecified {
            get {
                return isNoChargeToProducerSpecifiedField;
            } 
            set {
                isNoChargeToProducerSpecifiedField = value;
                NotifyPropertyChanged("IsNoChargeToProducerSpecified");
            }
        }

        private Boolean isNoChargeToProducerSpecifiedField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on pressure test event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pressureTestExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on pressure test event.")]
    public partial class PressureTestExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Orifice Size
        /// </summary>
		[Description("Orifice Size")]
        [ComponentElement]
		[XmlElement("diaOrificeSize")]
        public LengthMeasure DiaOrificeSize {
            get {
                return diaOrificeSizeField;
            } 
            set {
                diaOrificeSizeField = value;
                NotifyPropertyChanged("DiaOrificeSize");
            }
        }

        private LengthMeasure diaOrificeSizeField; 

        /// <summary>
        /// Next Test Date
        /// </summary>
		[Description("Next Test Date")]
		[XmlElement("dTimeNextTestDate")]
        public Timestamp? DTimeNextTestDate {
            get {
                return dTimeNextTestDateField;
            } 
            set {
                dTimeNextTestDateField = value;
                 this.DTimeNextTestDateSpecified = true;
                NotifyPropertyChanged("DTimeNextTestDate");
            }
        }

        private Timestamp? dTimeNextTestDateField; 

        /// <summary>
        /// dTimeNextTestDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DTimeNextTestDateSpecified {
            get {
                return dTimeNextTestDateSpecifiedField;
            } 
            set {
                dTimeNextTestDateSpecifiedField = value;
                NotifyPropertyChanged("DTimeNextTestDateSpecified");
            }
        }

        private Boolean dTimeNextTestDateSpecifiedField; 

        /// <summary>
        /// Rate Bled
        /// </summary>
		[Description("Rate Bled")]
        [ComponentElement]
		[XmlElement("flowrateRateBled")]
        public VolumeFlowRateMeasure FlowrateRateBled {
            get {
                return flowrateRateBledField;
            } 
            set {
                flowrateRateBledField = value;
                NotifyPropertyChanged("FlowrateRateBled");
            }
        }

        private VolumeFlowRateMeasure flowrateRateBledField; 

        /// <summary>
        /// String Being Tested
        /// </summary>
		[StringLength(64)]
        [Description("String Being Tested")]
		[XmlElement("identifierJob")]
        public String IdentifierJob {
            get {
                return identifierJobField;
            } 
            set {
                identifierJobField = value;
                NotifyPropertyChanged("IdentifierJob");
            }
        }

        private String identifierJobField; 

        /// <summary>
        /// True if successful
        /// </summary>
		[Description("True if successful")]
		[XmlElement("isSuccess")]
        public Boolean? IsSuccess {
            get {
                return isSuccessField;
            } 
            set {
                isSuccessField = value;
                 this.IsSuccessSpecified = true;
                NotifyPropertyChanged("IsSuccess");
            }
        }

        private Boolean? isSuccessField; 

        /// <summary>
        /// isSuccessSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsSuccessSpecified {
            get {
                return isSuccessSpecifiedField;
            } 
            set {
                isSuccessSpecifiedField = value;
                NotifyPropertyChanged("IsSuccessSpecified");
            }
        }

        private Boolean isSuccessSpecifiedField; 

        /// <summary>
        /// Maximum pressure held during test
        /// </summary>
		[Description("Maximum pressure held during test")]
        [ComponentElement]
		[XmlElement("maxPressureDuration")]
        public PressureMeasure MaxPressureDuration {
            get {
                return maxPressureDurationField;
            } 
            set {
                maxPressureDurationField = value;
                NotifyPropertyChanged("MaxPressureDuration");
            }
        }

        private PressureMeasure maxPressureDurationField; 

        /// <summary>
        /// Circulating position
        /// </summary>
		[StringLength(64)]
        [Description("Circulating position")]
		[XmlElement("circulatingPosition")]
        public String CirculatingPosition {
            get {
                return circulatingPositionField;
            } 
            set {
                circulatingPositionField = value;
                NotifyPropertyChanged("CirculatingPosition");
            }
        }

        private String circulatingPositionField; 

        /// <summary>
        /// Fluid bled type
        /// </summary>
		[StringLength(64)]
        [Description("Fluid bled type")]
		[XmlElement("fluidBledType")]
        public String FluidBledType {
            get {
                return fluidBledTypeField;
            } 
            set {
                fluidBledTypeField = value;
                NotifyPropertyChanged("FluidBledType");
            }
        }

        private String fluidBledTypeField; 

        /// <summary>
        /// Description of orientaton method
        /// </summary>
		[StringLength(64)]
        [Description("Description of orientaton method")]
		[XmlElement("orientationMethod")]
        public String OrientationMethod {
            get {
                return orientationMethodField;
            } 
            set {
                orientationMethodField = value;
                NotifyPropertyChanged("OrientationMethod");
            }
        }

        private String orientationMethodField; 

        /// <summary>
        /// Test fluid type
        /// </summary>
		[StringLength(64)]
        [Description("Test fluid type")]
		[XmlElement("testFluidType")]
        public String TestFluidType {
            get {
                return testFluidTypeField;
            } 
            set {
                testFluidTypeField = value;
                NotifyPropertyChanged("TestFluidType");
            }
        }

        private String testFluidTypeField; 

        /// <summary>
        /// Test sub type
        /// </summary>
		[StringLength(64)]
        [Description("Test sub type")]
		[XmlElement("testSubType")]
        public String TestSubType {
            get {
                return testSubTypeField;
            } 
            set {
                testSubTypeField = value;
                NotifyPropertyChanged("TestSubType");
            }
        }

        private String testSubTypeField; 

        /// <summary>
        /// Test type
        /// </summary>
		[StringLength(64)]
        [Description("Test type")]
		[XmlElement("testType")]
        public String TestType {
            get {
                return testTypeField;
            } 
            set {
                testTypeField = value;
                NotifyPropertyChanged("TestType");
            }
        }

        private String testTypeField; 

        /// <summary>
        /// Annulus pressure
        /// </summary>
		[Description("Annulus pressure")]
        [ComponentElement]
		[XmlElement("annulusPressure")]
        public PressureMeasure AnnulusPressure {
            get {
                return annulusPressureField;
            } 
            set {
                annulusPressureField = value;
                NotifyPropertyChanged("AnnulusPressure");
            }
        }

        private PressureMeasure annulusPressureField; 

        /// <summary>
        /// Well pressure used 
        /// </summary>
		[StringLength(64)]
        [Description("Well pressure used")]
		[XmlElement("wellPressureUsed")]
        public String WellPressureUsed {
            get {
                return wellPressureUsedField;
            } 
            set {
                wellPressureUsedField = value;
                NotifyPropertyChanged("WellPressureUsed");
            }
        }

        private String wellPressureUsedField; 

        /// <summary>
        /// Reference #
        /// </summary>
		[StringLength(64)]
        [Description("Reference #")]
		[XmlElement("str10Reference")]
        public String Str10Reference {
            get {
                return str10ReferenceField;
            } 
            set {
                str10ReferenceField = value;
                NotifyPropertyChanged("Str10Reference");
            }
        }

        private String str10ReferenceField; 

        /// <summary>
        /// Well (Assembly)
        /// </summary>
		[StringLength(64)]
        [Description("Well (Assembly)")]
		[XmlElement("uidAssembly")]
        public String UidAssembly {
            get {
                return uidAssemblyField;
            } 
            set {
                uidAssemblyField = value;
                NotifyPropertyChanged("UidAssembly");
            }
        }

        private String uidAssemblyField; 

        /// <summary>
        /// Volume Bled
        /// </summary>
		[Description("Volume Bled")]
        [ComponentElement]
		[XmlElement("volumeBled")]
        public VolumeMeasure VolumeBled {
            get {
                return volumeBledField;
            } 
            set {
                volumeBledField = value;
                NotifyPropertyChanged("VolumeBled");
            }
        }

        private VolumeMeasure volumeBledField; 

        /// <summary>
        /// Volume Lost
        /// </summary>
		[Description("Volume Lost")]
        [ComponentElement]
		[XmlElement("volumeLost")]
        public VolumeMeasure VolumeLost {
            get {
                return volumeLostField;
            } 
            set {
                volumeLostField = value;
                NotifyPropertyChanged("VolumeLost");
            }
        }

        private VolumeMeasure volumeLostField; 

        /// <summary>
        /// Volume Pumped
        /// </summary>
		[Description("Volume Pumped")]
        [ComponentElement]
		[XmlElement("volumePumped")]
        public VolumeMeasure VolumePumped {
            get {
                return volumePumpedField;
            } 
            set {
                volumePumpedField = value;
                NotifyPropertyChanged("VolumePumped");
            }
        }

        private VolumeMeasure volumePumpedField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on the job event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_jobExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on the job event.")]
    public partial class JobExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Comment on the reason for the job
        /// </summary>
		[StringLength(4000)]
        [Description("Comment on the reason for the job")]
		[XmlElement("jobReason")]
        public String JobReason {
            get {
                return jobReasonField;
            } 
            set {
                jobReasonField = value;
                NotifyPropertyChanged("JobReason");
            }
        }

        private String jobReasonField; 

        /// <summary>
        /// Status of job
        /// </summary>
		[StringLength(64)]
        [Description("Status of job")]
		[XmlElement("jobStatus")]
        public String JobStatus {
            get {
                return jobStatusField;
            } 
            set {
                jobStatusField = value;
                NotifyPropertyChanged("JobStatus");
            }
        }

        private String jobStatusField; 

        /// <summary>
        /// The primary reason for doing this job.
        /// </summary>
		[StringLength(64)]
        [Description("The primary reason for doing this job.")]
		[XmlElement("primaryMotivationForJob")]
        public String PrimaryMotivationForJob {
            get {
                return primaryMotivationForJobField;
            } 
            set {
                primaryMotivationForJobField = value;
                NotifyPropertyChanged("PrimaryMotivationForJob");
            }
        }

        private String primaryMotivationForJobField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on fractionation event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_acidizefracExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on fractionation event.")]
    public partial class AcidizefracExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to stimJob
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Reference to stimJob")]
		[XmlElement("stimJobID")]
        public String StimJobID {
            get {
                return stimJobIDField;
            } 
            set {
                stimJobIDField = value;
                NotifyPropertyChanged("StimJobID");
            }
        }

        private String stimJobIDField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on bottom hole pressure during this event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_BHPExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on bottom hole pressure during this event.")]
    public partial class BHPExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to bottom hole pressure 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Reference to bottom hole pressure")]
		[XmlElement("BHPRefID")]
        public String BHPRefID {
            get {
                return BHPRefIDField;
            } 
            set {
                BHPRefIDField = value;
                NotifyPropertyChanged("BHPRefID");
            }
        }

        private String BHPRefIDField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on lost circulation event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_lostCirculationExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on lost circulation event.")]
    public partial class LostCirculationExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Volume lost
        /// </summary>
		[Description("Volume lost")]
        [ComponentElement]
		[XmlElement("volumeLost")]
        public VolumeMeasure VolumeLost {
            get {
                return volumeLostField;
            } 
            set {
                volumeLostField = value;
                NotifyPropertyChanged("VolumeLost");
            }
        }

        private VolumeMeasure volumeLostField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on directional survey event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_directionalSurveyExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on directional survey event.")]
    public partial class DirectionalSurveyExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// trajectory reference id.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("trajectory reference id.")]
		[XmlElement("trajectoryRefID")]
        public String TrajectoryRefID {
            get {
                return trajectoryRefIDField;
            } 
            set {
                trajectoryRefIDField = value;
                NotifyPropertyChanged("TrajectoryRefID");
            }
        }

        private String trajectoryRefIDField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on clean fill event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cleanFillExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on clean fill event.")]
    public partial class CleanFillExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// method of fill and cleaning
        /// </summary>
		[StringLength(64)]
        [Description("method of fill and cleaning")]
		[XmlElement("fillCleaningMethod")]
        public String FillCleaningMethod {
            get {
                return fillCleaningMethodField;
            } 
            set {
                fillCleaningMethodField = value;
                NotifyPropertyChanged("FillCleaningMethod");
            }
        }

        private String fillCleaningMethodField; 

        /// <summary>
        /// the size of the tool 
        /// </summary>
		[Description("the size of the tool")]
        [ComponentElement]
		[XmlElement("toolSize")]
        public LengthMeasure ToolSize {
            get {
                return toolSizeField;
            } 
            set {
                toolSizeField = value;
                NotifyPropertyChanged("ToolSize");
            }
        }

        private LengthMeasure toolSizeField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on cement job event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on cement job event.")]
    public partial class CementExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// unique id of cementJob
        /// </summary>
		[StringLength(64)]
        [Description("unique id of cementJob")]
		[XmlElement("cementJobRefID")]
        public String CementJobRefID {
            get {
                return cementJobRefIDField;
            } 
            set {
                cementJobRefIDField = value;
                NotifyPropertyChanged("CementJobRefID");
            }
        }

        private String cementJobRefIDField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - event extension schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_eventExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - event extension schema")]
    public partial class EventExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Extension event for cement
        /// </summary>
        [ComponentElement]
        [XmlElement("cementExtension")]
        public CementExtension CementExtension {
            get {
                return cementExtensionField;
            } 
            set {
                if (value != null && BHPExtensionSpecified) throw new Exception("Cannot set property CementExtension when property BHPExtension is already set");
                if (value != null && AcidizeFracExtensionSpecified) throw new Exception("Cannot set property CementExtension when property AcidizeFracExtension is already set");
                if (value != null && CleanFillExtensionSpecified) throw new Exception("Cannot set property CementExtension when property CleanFillExtension is already set");
                if (value != null && DirectionalSurveyExtensionSpecified) throw new Exception("Cannot set property CementExtension when property DirectionalSurveyExtension is already set");
                if (value != null && DownholeExtensionSpecified) throw new Exception("Cannot set property CementExtension when property DownholeExtension is already set");
                if (value != null && FluidReportExtensionSpecified) throw new Exception("Cannot set property CementExtension when property FluidReportExtension is already set");
                if (value != null && JobExtensionSpecified) throw new Exception("Cannot set property CementExtension when property JobExtension is already set");
                if (value != null && LostCirculationExtensionSpecified) throw new Exception("Cannot set property CementExtension when property LostCirculationExtension is already set");
                if (value != null && PerforationExtensionSpecified) throw new Exception("Cannot set property CementExtension when property PerforationExtension is already set");
                if (value != null && PressureTestExtensionSpecified) throw new Exception("Cannot set property CementExtension when property PressureTestExtension is already set");
                if (value != null && WaitingOnExtensionSpecified) throw new Exception("Cannot set property CementExtension when property WaitingOnExtension is already set");
                cementExtensionField = value;
                CementExtensionSpecified = (value!=null);
                NotifyPropertyChanged("CementExtension");
            }
        }

        private CementExtension cementExtensionField; 
        private bool cementExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if CementExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CementExtensionSpecified
        {
            get {
                return cementExtensionSpecified;
            }
            set {
                cementExtensionSpecified= value;
            }
        }

        /// <summary>
        /// Extension event for clean fill
        /// </summary>
        [ComponentElement]
        [XmlElement("cleanFillExtension")]
        public CleanFillExtension CleanFillExtension {
            get {
                return cleanFillExtensionField;
            } 
            set {
                if (value != null && BHPExtensionSpecified) throw new Exception("Cannot set property CleanFillExtension when property BHPExtension is already set");
                if (value != null && AcidizeFracExtensionSpecified) throw new Exception("Cannot set property CleanFillExtension when property AcidizeFracExtension is already set");
                if (value != null && CementExtensionSpecified) throw new Exception("Cannot set property CleanFillExtension when property CementExtension is already set");
                if (value != null && DirectionalSurveyExtensionSpecified) throw new Exception("Cannot set property CleanFillExtension when property DirectionalSurveyExtension is already set");
                if (value != null && DownholeExtensionSpecified) throw new Exception("Cannot set property CleanFillExtension when property DownholeExtension is already set");
                if (value != null && FluidReportExtensionSpecified) throw new Exception("Cannot set property CleanFillExtension when property FluidReportExtension is already set");
                if (value != null && JobExtensionSpecified) throw new Exception("Cannot set property CleanFillExtension when property JobExtension is already set");
                if (value != null && LostCirculationExtensionSpecified) throw new Exception("Cannot set property CleanFillExtension when property LostCirculationExtension is already set");
                if (value != null && PerforationExtensionSpecified) throw new Exception("Cannot set property CleanFillExtension when property PerforationExtension is already set");
                if (value != null && PressureTestExtensionSpecified) throw new Exception("Cannot set property CleanFillExtension when property PressureTestExtension is already set");
                if (value != null && WaitingOnExtensionSpecified) throw new Exception("Cannot set property CleanFillExtension when property WaitingOnExtension is already set");
                cleanFillExtensionField = value;
                CleanFillExtensionSpecified = (value!=null);
                NotifyPropertyChanged("CleanFillExtension");
            }
        }

        private CleanFillExtension cleanFillExtensionField; 
        private bool cleanFillExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if CleanFillExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CleanFillExtensionSpecified
        {
            get {
                return cleanFillExtensionSpecified;
            }
            set {
                cleanFillExtensionSpecified= value;
            }
        }

        /// <summary>
        /// Extension event for directional survey
        /// </summary>
        [ComponentElement]
        [XmlElement("directionalSurveyExtension")]
        public DirectionalSurveyExtension DirectionalSurveyExtension {
            get {
                return directionalSurveyExtensionField;
            } 
            set {
                if (value != null && BHPExtensionSpecified) throw new Exception("Cannot set property DirectionalSurveyExtension when property BHPExtension is already set");
                if (value != null && AcidizeFracExtensionSpecified) throw new Exception("Cannot set property DirectionalSurveyExtension when property AcidizeFracExtension is already set");
                if (value != null && CementExtensionSpecified) throw new Exception("Cannot set property DirectionalSurveyExtension when property CementExtension is already set");
                if (value != null && CleanFillExtensionSpecified) throw new Exception("Cannot set property DirectionalSurveyExtension when property CleanFillExtension is already set");
                if (value != null && DownholeExtensionSpecified) throw new Exception("Cannot set property DirectionalSurveyExtension when property DownholeExtension is already set");
                if (value != null && FluidReportExtensionSpecified) throw new Exception("Cannot set property DirectionalSurveyExtension when property FluidReportExtension is already set");
                if (value != null && JobExtensionSpecified) throw new Exception("Cannot set property DirectionalSurveyExtension when property JobExtension is already set");
                if (value != null && LostCirculationExtensionSpecified) throw new Exception("Cannot set property DirectionalSurveyExtension when property LostCirculationExtension is already set");
                if (value != null && PerforationExtensionSpecified) throw new Exception("Cannot set property DirectionalSurveyExtension when property PerforationExtension is already set");
                if (value != null && PressureTestExtensionSpecified) throw new Exception("Cannot set property DirectionalSurveyExtension when property PressureTestExtension is already set");
                if (value != null && WaitingOnExtensionSpecified) throw new Exception("Cannot set property DirectionalSurveyExtension when property WaitingOnExtension is already set");
                directionalSurveyExtensionField = value;
                DirectionalSurveyExtensionSpecified = (value!=null);
                NotifyPropertyChanged("DirectionalSurveyExtension");
            }
        }

        private DirectionalSurveyExtension directionalSurveyExtensionField; 
        private bool directionalSurveyExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if DirectionalSurveyExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DirectionalSurveyExtensionSpecified
        {
            get {
                return directionalSurveyExtensionSpecified;
            }
            set {
                directionalSurveyExtensionSpecified= value;
            }
        }

        /// <summary>
        /// Extension event for lost circulation
        /// </summary>
        [ComponentElement]
        [XmlElement("lostCirculationExtension")]
        public LostCirculationExtension LostCirculationExtension {
            get {
                return lostCirculationExtensionField;
            } 
            set {
                if (value != null && BHPExtensionSpecified) throw new Exception("Cannot set property LostCirculationExtension when property BHPExtension is already set");
                if (value != null && AcidizeFracExtensionSpecified) throw new Exception("Cannot set property LostCirculationExtension when property AcidizeFracExtension is already set");
                if (value != null && CementExtensionSpecified) throw new Exception("Cannot set property LostCirculationExtension when property CementExtension is already set");
                if (value != null && CleanFillExtensionSpecified) throw new Exception("Cannot set property LostCirculationExtension when property CleanFillExtension is already set");
                if (value != null && DirectionalSurveyExtensionSpecified) throw new Exception("Cannot set property LostCirculationExtension when property DirectionalSurveyExtension is already set");
                if (value != null && DownholeExtensionSpecified) throw new Exception("Cannot set property LostCirculationExtension when property DownholeExtension is already set");
                if (value != null && FluidReportExtensionSpecified) throw new Exception("Cannot set property LostCirculationExtension when property FluidReportExtension is already set");
                if (value != null && JobExtensionSpecified) throw new Exception("Cannot set property LostCirculationExtension when property JobExtension is already set");
                if (value != null && PerforationExtensionSpecified) throw new Exception("Cannot set property LostCirculationExtension when property PerforationExtension is already set");
                if (value != null && PressureTestExtensionSpecified) throw new Exception("Cannot set property LostCirculationExtension when property PressureTestExtension is already set");
                if (value != null && WaitingOnExtensionSpecified) throw new Exception("Cannot set property LostCirculationExtension when property WaitingOnExtension is already set");
                lostCirculationExtensionField = value;
                LostCirculationExtensionSpecified = (value!=null);
                NotifyPropertyChanged("LostCirculationExtension");
            }
        }

        private LostCirculationExtension lostCirculationExtensionField; 
        private bool lostCirculationExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if LostCirculationExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LostCirculationExtensionSpecified
        {
            get {
                return lostCirculationExtensionSpecified;
            }
            set {
                lostCirculationExtensionSpecified= value;
            }
        }

        /// <summary>
        /// Extension event for bottom hole pressure
        /// </summary>
        [ComponentElement]
        [XmlElement("BHPExtension")]
        public BHPExtension BHPExtension {
            get {
                return BHPExtensionField;
            } 
            set {
                if (value != null && AcidizeFracExtensionSpecified) throw new Exception("Cannot set property BHPExtension when property AcidizeFracExtension is already set");
                if (value != null && CementExtensionSpecified) throw new Exception("Cannot set property BHPExtension when property CementExtension is already set");
                if (value != null && CleanFillExtensionSpecified) throw new Exception("Cannot set property BHPExtension when property CleanFillExtension is already set");
                if (value != null && DirectionalSurveyExtensionSpecified) throw new Exception("Cannot set property BHPExtension when property DirectionalSurveyExtension is already set");
                if (value != null && DownholeExtensionSpecified) throw new Exception("Cannot set property BHPExtension when property DownholeExtension is already set");
                if (value != null && FluidReportExtensionSpecified) throw new Exception("Cannot set property BHPExtension when property FluidReportExtension is already set");
                if (value != null && JobExtensionSpecified) throw new Exception("Cannot set property BHPExtension when property JobExtension is already set");
                if (value != null && LostCirculationExtensionSpecified) throw new Exception("Cannot set property BHPExtension when property LostCirculationExtension is already set");
                if (value != null && PerforationExtensionSpecified) throw new Exception("Cannot set property BHPExtension when property PerforationExtension is already set");
                if (value != null && PressureTestExtensionSpecified) throw new Exception("Cannot set property BHPExtension when property PressureTestExtension is already set");
                if (value != null && WaitingOnExtensionSpecified) throw new Exception("Cannot set property BHPExtension when property WaitingOnExtension is already set");
                BHPExtensionField = value;
                BHPExtensionSpecified = (value!=null);
                NotifyPropertyChanged("BHPExtension");
            }
        }

        private BHPExtension BHPExtensionField; 
        private bool bHPExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if BHPExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool BHPExtensionSpecified
        {
            get {
                return bHPExtensionSpecified;
            }
            set {
                bHPExtensionSpecified= value;
            }
        }

        /// <summary>
        /// Extension event for acidizing and fracturing
        /// </summary>
        [ComponentElement]
        [XmlElement("acidizeFracExtension")]
        public AcidizefracExtension AcidizeFracExtension {
            get {
                return acidizeFracExtensionField;
            } 
            set {
                if (value != null && BHPExtensionSpecified) throw new Exception("Cannot set property AcidizeFracExtension when property BHPExtension is already set");
                if (value != null && CementExtensionSpecified) throw new Exception("Cannot set property AcidizeFracExtension when property CementExtension is already set");
                if (value != null && CleanFillExtensionSpecified) throw new Exception("Cannot set property AcidizeFracExtension when property CleanFillExtension is already set");
                if (value != null && DirectionalSurveyExtensionSpecified) throw new Exception("Cannot set property AcidizeFracExtension when property DirectionalSurveyExtension is already set");
                if (value != null && DownholeExtensionSpecified) throw new Exception("Cannot set property AcidizeFracExtension when property DownholeExtension is already set");
                if (value != null && FluidReportExtensionSpecified) throw new Exception("Cannot set property AcidizeFracExtension when property FluidReportExtension is already set");
                if (value != null && JobExtensionSpecified) throw new Exception("Cannot set property AcidizeFracExtension when property JobExtension is already set");
                if (value != null && LostCirculationExtensionSpecified) throw new Exception("Cannot set property AcidizeFracExtension when property LostCirculationExtension is already set");
                if (value != null && PerforationExtensionSpecified) throw new Exception("Cannot set property AcidizeFracExtension when property PerforationExtension is already set");
                if (value != null && PressureTestExtensionSpecified) throw new Exception("Cannot set property AcidizeFracExtension when property PressureTestExtension is already set");
                if (value != null && WaitingOnExtensionSpecified) throw new Exception("Cannot set property AcidizeFracExtension when property WaitingOnExtension is already set");
                acidizeFracExtensionField = value;
                AcidizeFracExtensionSpecified = (value!=null);
                NotifyPropertyChanged("AcidizeFracExtension");
            }
        }

        private AcidizefracExtension acidizeFracExtensionField; 
        private bool acidizeFracExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if AcidizeFracExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool AcidizeFracExtensionSpecified
        {
            get {
                return acidizeFracExtensionSpecified;
            }
            set {
                acidizeFracExtensionSpecified= value;
            }
        }

        /// <summary>
        /// Extension event for job
        /// </summary>
        [ComponentElement]
        [XmlElement("jobExtension")]
        public JobExtension JobExtension {
            get {
                return jobExtensionField;
            } 
            set {
                if (value != null && BHPExtensionSpecified) throw new Exception("Cannot set property JobExtension when property BHPExtension is already set");
                if (value != null && AcidizeFracExtensionSpecified) throw new Exception("Cannot set property JobExtension when property AcidizeFracExtension is already set");
                if (value != null && CementExtensionSpecified) throw new Exception("Cannot set property JobExtension when property CementExtension is already set");
                if (value != null && CleanFillExtensionSpecified) throw new Exception("Cannot set property JobExtension when property CleanFillExtension is already set");
                if (value != null && DirectionalSurveyExtensionSpecified) throw new Exception("Cannot set property JobExtension when property DirectionalSurveyExtension is already set");
                if (value != null && DownholeExtensionSpecified) throw new Exception("Cannot set property JobExtension when property DownholeExtension is already set");
                if (value != null && FluidReportExtensionSpecified) throw new Exception("Cannot set property JobExtension when property FluidReportExtension is already set");
                if (value != null && LostCirculationExtensionSpecified) throw new Exception("Cannot set property JobExtension when property LostCirculationExtension is already set");
                if (value != null && PerforationExtensionSpecified) throw new Exception("Cannot set property JobExtension when property PerforationExtension is already set");
                if (value != null && PressureTestExtensionSpecified) throw new Exception("Cannot set property JobExtension when property PressureTestExtension is already set");
                if (value != null && WaitingOnExtensionSpecified) throw new Exception("Cannot set property JobExtension when property WaitingOnExtension is already set");
                jobExtensionField = value;
                JobExtensionSpecified = (value!=null);
                NotifyPropertyChanged("JobExtension");
            }
        }

        private JobExtension jobExtensionField; 
        private bool jobExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if JobExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool JobExtensionSpecified
        {
            get {
                return jobExtensionSpecified;
            }
            set {
                jobExtensionSpecified= value;
            }
        }

        /// <summary>
        /// Extension event for pressure test
        /// </summary>
        [ComponentElement]
        [XmlElement("pressureTestExtension")]
        public PressureTestExtension PressureTestExtension {
            get {
                return pressureTestExtensionField;
            } 
            set {
                if (value != null && BHPExtensionSpecified) throw new Exception("Cannot set property PressureTestExtension when property BHPExtension is already set");
                if (value != null && AcidizeFracExtensionSpecified) throw new Exception("Cannot set property PressureTestExtension when property AcidizeFracExtension is already set");
                if (value != null && CementExtensionSpecified) throw new Exception("Cannot set property PressureTestExtension when property CementExtension is already set");
                if (value != null && CleanFillExtensionSpecified) throw new Exception("Cannot set property PressureTestExtension when property CleanFillExtension is already set");
                if (value != null && DirectionalSurveyExtensionSpecified) throw new Exception("Cannot set property PressureTestExtension when property DirectionalSurveyExtension is already set");
                if (value != null && DownholeExtensionSpecified) throw new Exception("Cannot set property PressureTestExtension when property DownholeExtension is already set");
                if (value != null && FluidReportExtensionSpecified) throw new Exception("Cannot set property PressureTestExtension when property FluidReportExtension is already set");
                if (value != null && JobExtensionSpecified) throw new Exception("Cannot set property PressureTestExtension when property JobExtension is already set");
                if (value != null && LostCirculationExtensionSpecified) throw new Exception("Cannot set property PressureTestExtension when property LostCirculationExtension is already set");
                if (value != null && PerforationExtensionSpecified) throw new Exception("Cannot set property PressureTestExtension when property PerforationExtension is already set");
                if (value != null && WaitingOnExtensionSpecified) throw new Exception("Cannot set property PressureTestExtension when property WaitingOnExtension is already set");
                pressureTestExtensionField = value;
                PressureTestExtensionSpecified = (value!=null);
                NotifyPropertyChanged("PressureTestExtension");
            }
        }

        private PressureTestExtension pressureTestExtensionField; 
        private bool pressureTestExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if PressureTestExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool PressureTestExtensionSpecified
        {
            get {
                return pressureTestExtensionSpecified;
            }
            set {
                pressureTestExtensionSpecified= value;
            }
        }

        /// <summary>
        /// Extension event for waiting on
        /// </summary>
        [ComponentElement]
        [XmlElement("waitingOnExtension")]
        public WaitingOnExtension WaitingOnExtension {
            get {
                return waitingOnExtensionField;
            } 
            set {
                if (value != null && BHPExtensionSpecified) throw new Exception("Cannot set property WaitingOnExtension when property BHPExtension is already set");
                if (value != null && AcidizeFracExtensionSpecified) throw new Exception("Cannot set property WaitingOnExtension when property AcidizeFracExtension is already set");
                if (value != null && CementExtensionSpecified) throw new Exception("Cannot set property WaitingOnExtension when property CementExtension is already set");
                if (value != null && CleanFillExtensionSpecified) throw new Exception("Cannot set property WaitingOnExtension when property CleanFillExtension is already set");
                if (value != null && DirectionalSurveyExtensionSpecified) throw new Exception("Cannot set property WaitingOnExtension when property DirectionalSurveyExtension is already set");
                if (value != null && DownholeExtensionSpecified) throw new Exception("Cannot set property WaitingOnExtension when property DownholeExtension is already set");
                if (value != null && FluidReportExtensionSpecified) throw new Exception("Cannot set property WaitingOnExtension when property FluidReportExtension is already set");
                if (value != null && JobExtensionSpecified) throw new Exception("Cannot set property WaitingOnExtension when property JobExtension is already set");
                if (value != null && LostCirculationExtensionSpecified) throw new Exception("Cannot set property WaitingOnExtension when property LostCirculationExtension is already set");
                if (value != null && PerforationExtensionSpecified) throw new Exception("Cannot set property WaitingOnExtension when property PerforationExtension is already set");
                if (value != null && PressureTestExtensionSpecified) throw new Exception("Cannot set property WaitingOnExtension when property PressureTestExtension is already set");
                waitingOnExtensionField = value;
                WaitingOnExtensionSpecified = (value!=null);
                NotifyPropertyChanged("WaitingOnExtension");
            }
        }

        private WaitingOnExtension waitingOnExtensionField; 
        private bool waitingOnExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if WaitingOnExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool WaitingOnExtensionSpecified
        {
            get {
                return waitingOnExtensionSpecified;
            }
            set {
                waitingOnExtensionSpecified= value;
            }
        }

        /// <summary>
        /// Extension event for perforating event
        /// </summary>
        [ComponentElement]
        [XmlElement("perforationExtension")]
        public PerforatingExtension PerforationExtension {
            get {
                return perforationExtensionField;
            } 
            set {
                if (value != null && BHPExtensionSpecified) throw new Exception("Cannot set property PerforationExtension when property BHPExtension is already set");
                if (value != null && AcidizeFracExtensionSpecified) throw new Exception("Cannot set property PerforationExtension when property AcidizeFracExtension is already set");
                if (value != null && CementExtensionSpecified) throw new Exception("Cannot set property PerforationExtension when property CementExtension is already set");
                if (value != null && CleanFillExtensionSpecified) throw new Exception("Cannot set property PerforationExtension when property CleanFillExtension is already set");
                if (value != null && DirectionalSurveyExtensionSpecified) throw new Exception("Cannot set property PerforationExtension when property DirectionalSurveyExtension is already set");
                if (value != null && DownholeExtensionSpecified) throw new Exception("Cannot set property PerforationExtension when property DownholeExtension is already set");
                if (value != null && FluidReportExtensionSpecified) throw new Exception("Cannot set property PerforationExtension when property FluidReportExtension is already set");
                if (value != null && JobExtensionSpecified) throw new Exception("Cannot set property PerforationExtension when property JobExtension is already set");
                if (value != null && LostCirculationExtensionSpecified) throw new Exception("Cannot set property PerforationExtension when property LostCirculationExtension is already set");
                if (value != null && PressureTestExtensionSpecified) throw new Exception("Cannot set property PerforationExtension when property PressureTestExtension is already set");
                if (value != null && WaitingOnExtensionSpecified) throw new Exception("Cannot set property PerforationExtension when property WaitingOnExtension is already set");
                perforationExtensionField = value;
                PerforationExtensionSpecified = (value!=null);
                NotifyPropertyChanged("PerforationExtension");
            }
        }

        private PerforatingExtension perforationExtensionField; 
        private bool perforationExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if PerforationExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool PerforationExtensionSpecified
        {
            get {
                return perforationExtensionSpecified;
            }
            set {
                perforationExtensionSpecified= value;
            }
        }

        /// <summary>
        /// Extension event for fluid report
        /// </summary>
        [ComponentElement]
        [XmlElement("fluidReportExtension")]
        public FluidReportExtension FluidReportExtension {
            get {
                return fluidReportExtensionField;
            } 
            set {
                if (value != null && BHPExtensionSpecified) throw new Exception("Cannot set property FluidReportExtension when property BHPExtension is already set");
                if (value != null && AcidizeFracExtensionSpecified) throw new Exception("Cannot set property FluidReportExtension when property AcidizeFracExtension is already set");
                if (value != null && CementExtensionSpecified) throw new Exception("Cannot set property FluidReportExtension when property CementExtension is already set");
                if (value != null && CleanFillExtensionSpecified) throw new Exception("Cannot set property FluidReportExtension when property CleanFillExtension is already set");
                if (value != null && DirectionalSurveyExtensionSpecified) throw new Exception("Cannot set property FluidReportExtension when property DirectionalSurveyExtension is already set");
                if (value != null && DownholeExtensionSpecified) throw new Exception("Cannot set property FluidReportExtension when property DownholeExtension is already set");
                if (value != null && JobExtensionSpecified) throw new Exception("Cannot set property FluidReportExtension when property JobExtension is already set");
                if (value != null && LostCirculationExtensionSpecified) throw new Exception("Cannot set property FluidReportExtension when property LostCirculationExtension is already set");
                if (value != null && PerforationExtensionSpecified) throw new Exception("Cannot set property FluidReportExtension when property PerforationExtension is already set");
                if (value != null && PressureTestExtensionSpecified) throw new Exception("Cannot set property FluidReportExtension when property PressureTestExtension is already set");
                if (value != null && WaitingOnExtensionSpecified) throw new Exception("Cannot set property FluidReportExtension when property WaitingOnExtension is already set");
                fluidReportExtensionField = value;
                FluidReportExtensionSpecified = (value!=null);
                NotifyPropertyChanged("FluidReportExtension");
            }
        }

        private FluidReportExtension fluidReportExtensionField; 
        private bool fluidReportExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if FluidReportExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool FluidReportExtensionSpecified
        {
            get {
                return fluidReportExtensionSpecified;
            }
            set {
                fluidReportExtensionSpecified= value;
            }
        }

        /// <summary>
        /// Extension event for downhole component
        /// </summary>
        [ComponentElement]
        [XmlElement("downholeExtension")]
        public DownholeExtension DownholeExtension {
            get {
                return downholeExtensionField;
            } 
            set {
                if (value != null && BHPExtensionSpecified) throw new Exception("Cannot set property DownholeExtension when property BHPExtension is already set");
                if (value != null && AcidizeFracExtensionSpecified) throw new Exception("Cannot set property DownholeExtension when property AcidizeFracExtension is already set");
                if (value != null && CementExtensionSpecified) throw new Exception("Cannot set property DownholeExtension when property CementExtension is already set");
                if (value != null && CleanFillExtensionSpecified) throw new Exception("Cannot set property DownholeExtension when property CleanFillExtension is already set");
                if (value != null && DirectionalSurveyExtensionSpecified) throw new Exception("Cannot set property DownholeExtension when property DirectionalSurveyExtension is already set");
                if (value != null && FluidReportExtensionSpecified) throw new Exception("Cannot set property DownholeExtension when property FluidReportExtension is already set");
                if (value != null && JobExtensionSpecified) throw new Exception("Cannot set property DownholeExtension when property JobExtension is already set");
                if (value != null && LostCirculationExtensionSpecified) throw new Exception("Cannot set property DownholeExtension when property LostCirculationExtension is already set");
                if (value != null && PerforationExtensionSpecified) throw new Exception("Cannot set property DownholeExtension when property PerforationExtension is already set");
                if (value != null && PressureTestExtensionSpecified) throw new Exception("Cannot set property DownholeExtension when property PressureTestExtension is already set");
                if (value != null && WaitingOnExtensionSpecified) throw new Exception("Cannot set property DownholeExtension when property WaitingOnExtension is already set");
                downholeExtensionField = value;
                DownholeExtensionSpecified = (value!=null);
                NotifyPropertyChanged("DownholeExtension");
            }
        }

        private DownholeExtension downholeExtensionField; 
        private bool downholeExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if DownholeExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DownholeExtensionSpecified
        {
            get {
                return downholeExtensionSpecified;
            }
            set {
                downholeExtensionSpecified= value;
            }
        }



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the downholeStringRef xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="downholeStringRef", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the downholeStringRef xsd type.")]
    public partial class DownholeStringRef : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// stringEquipmentRefID property
        /// </summary>
		[RecurringElement]
		[XmlElement("stringEquipmentRefID")]
        public List<String> StringEquipmentRefID {
            get {
                return stringEquipmentRefIDField;
            } 
            set {
                stringEquipmentRefIDField = value;
                NotifyPropertyChanged("StringEquipmentRefID");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentRefIDSpecified
         {
             get {
             if(stringEquipmentRefIDField!=null)
                 return stringEquipmentRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> stringEquipmentRefIDField; 

		/// <summary>
        /// downholeStringRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [XmlAttribute("downholeStringRefID")]
		
        public String DownholeStringRefID {
            get {
                return downholeStringRefIDField;
            } 
            set {
                downholeStringRefIDField = value;
                NotifyPropertyChanged("DownholeStringRefID");
            }
        }

        private String downholeStringRefIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the boreholeStringRef xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="boreholeStringRef", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the boreholeStringRef xsd type.")]
    public partial class BoreholeStringRef : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// stringEquipmentRefID property
        /// </summary>
		[RecurringElement]
		[XmlElement("stringEquipmentRefID")]
        public List<String> StringEquipmentRefID {
            get {
                return stringEquipmentRefIDField;
            } 
            set {
                stringEquipmentRefIDField = value;
                NotifyPropertyChanged("StringEquipmentRefID");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentRefIDSpecified
         {
             get {
             if(stringEquipmentRefIDField!=null)
                 return stringEquipmentRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> stringEquipmentRefIDField; 

		/// <summary>
        /// boreholeStringRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [XmlAttribute("boreholeStringRefID")]
		
        public String BoreholeStringRefID {
            get {
                return boreholeStringRefIDField;
            } 
            set {
                boreholeStringRefIDField = value;
                NotifyPropertyChanged("BoreholeStringRefID");
            }
        }

        private String boreholeStringRefIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the downholeComponentRef xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="downholeComponentRef", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the downholeComponentRef xsd type.")]
    public partial class DownholeComponentRef : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// stringEquipmentRefID property
        /// </summary>
		[RecurringElement]
		[XmlElement("stringEquipmentRefID")]
        public List<String> StringEquipmentRefID {
            get {
                return stringEquipmentRefIDField;
            } 
            set {
                stringEquipmentRefIDField = value;
                NotifyPropertyChanged("StringEquipmentRefID");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentRefIDSpecified
         {
             get {
             if(stringEquipmentRefIDField!=null)
                 return stringEquipmentRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> stringEquipmentRefIDField; 

        /// <summary>
        /// boreholeStringRef property
        /// </summary>
		[RecurringElement]
		[XmlElement("boreholeStringRef")]
        public List<BoreholeStringRef> BoreholeStringRef {
            get {
                return boreholeStringRefField;
            } 
            set {
                boreholeStringRefField = value;
                NotifyPropertyChanged("BoreholeStringRef");
            }
        }

         /// <summary>
         /// bool to indicate if BoreholeStringRef has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeStringRefSpecified
         {
             get {
             if(boreholeStringRefField!=null)
                 return boreholeStringRefField.Count>0?true:false;
             else return false;
             }
         }
        private List<BoreholeStringRef> boreholeStringRefField; 

        /// <summary>
        /// downholeStringsRef property
        /// </summary>
		[RecurringElement]
		[XmlElement("downholeStringsRef")]
        public List<DownholeStringRef> DownholeStringsRef {
            get {
                return downholeStringsRefField;
            } 
            set {
                downholeStringsRefField = value;
                NotifyPropertyChanged("DownholeStringsRef");
            }
        }

         /// <summary>
         /// bool to indicate if DownholeStringsRef has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DownholeStringsRefSpecified
         {
             get {
             if(downholeStringsRefField!=null)
                 return downholeStringsRefField.Count>0?true:false;
             else return false;
             }
         }
        private List<DownholeStringRef> downholeStringsRefField; 

        /// <summary>
        /// perforationSetRefID property
        /// </summary>
		[RecurringElement]
		[XmlElement("perforationSetRefID")]
        public List<String> PerforationSetRefID {
            get {
                return perforationSetRefIDField;
            } 
            set {
                perforationSetRefIDField = value;
                NotifyPropertyChanged("PerforationSetRefID");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSetRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetRefIDSpecified
         {
             get {
             if(perforationSetRefIDField!=null)
                 return perforationSetRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> perforationSetRefIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the eventType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="eventType", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the eventType xsd type.")]
    public partial class EventType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EventType class.
        /// </summary>
        public EventType() {}

        /// <summary>
        /// Initializes a new instance of the EventType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public EventType(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// Class of the event type (job, daily report, etc.)
        /// </summary>
		[Description("Class of the event type (job, daily report, etc.)")]
        [XmlAttribute("class")]
		
        public EventClassType Class {
            get {
                return classField;
            } 
            set {
                classField = value;
                 this.ClassSpecified = true;
                NotifyPropertyChanged("Class");
            }
        }

        private EventClassType classField; 

        /// <summary>
        /// classSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ClassSpecified {
            get {
                return classSpecifiedField;
            } 
            set {
                classSpecifiedField = value;
                NotifyPropertyChanged("ClassSpecified");
            }
        }

        private Boolean classSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the obj_wellCMLedger xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellCMLedger", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.COMPLETION, "1.0")]
    [Description("This class represents the obj_wellCMLedger xsd type.")]
    public partial class WellCMLedger : Object, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Well name.
        /// </summary>
		[StringLength(64)]
        [Description("Well name.")]
		[XmlElement("nameWell")]
        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 

        /// <summary>
        /// Wellbore name.
        /// </summary>
		[StringLength(64)]
        [Description("Wellbore name.")]
		[XmlElement("nameWellbore")]
        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 

        /// <summary>
        /// Ledger name.
        /// </summary>
		[StringLength(64)]
        [Description("Ledger name.")]
		[XmlElement("name")]
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

        /// <summary>
        /// Parent event reference id.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Parent event reference id.")]
		[XmlElement("parentEventID")]
        public String ParentEventID {
            get {
                return parentEventIDField;
            } 
            set {
                parentEventIDField = value;
                NotifyPropertyChanged("ParentEventID");
            }
        }

        private String parentEventIDField; 

        /// <summary>
        /// Date and time that activities started.
        /// </summary>
		[Description("Date and time that activities started.")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private Boolean dTimStartSpecifiedField; 

        /// <summary>
        /// Date and time that activities were completed.
        /// </summary>
		[Description("Date and time that activities were completed.")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private Boolean dTimEndSpecifiedField; 

        /// <summary>
        /// The activity duration (commonly in hours).
        /// </summary>
		[Description("The activity duration (commonly in hours).")]
        [ComponentElement]
		[XmlElement("duration")]
        public TimeMeasure Duration {
            get {
                return durationField;
            } 
            set {
                durationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure durationField; 

        /// <summary>
        /// Measured depth at Top of Interval.
        /// </summary>
		[Description("Measured depth at Top of Interval.")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at bottom of the section.
        /// </summary>
		[Description("Measured depth at bottom of the section.")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// Order number of event.
        /// </summary>
		[Description("Order number of event.")]
		[XmlElement("eventOrder")]
        public Int16? EventOrder {
            get {
                return eventOrderField;
            } 
            set {
                eventOrderField = value;
                 this.EventOrderSpecified = true;
                NotifyPropertyChanged("EventOrder");
            }
        }

        private Int16? eventOrderField; 

        /// <summary>
        /// eventOrderSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EventOrderSpecified {
            get {
                return eventOrderSpecifiedField;
            } 
            set {
                eventOrderSpecifiedField = value;
                NotifyPropertyChanged("EventOrderSpecified");
            }
        }

        private Boolean eventOrderSpecifiedField; 

        /// <summary>
        /// Rig reference id.
        /// </summary>
		[Description("Rig reference id.")]
        [RecurringElement]
		[XmlElement("rigID")]
        public List<String> RigID {
            get {
                return rigIDField;
            } 
            set {
                rigIDField = value;
                NotifyPropertyChanged("RigID");
            }
        }

         /// <summary>
         /// bool to indicate if RigID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RigIDSpecified
         {
             get {
             if(rigIDField!=null)
                 return rigIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> rigIDField; 

        /// <summary>
        /// Activity code
        /// </summary>
		[Description("Activity code")]
		[XmlElement("activityCode")]
        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set {
                activityCodeField = value;
                 this.ActivityCodeSpecified = true;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private ActivityCode activityCodeField; 

        /// <summary>
        /// activityCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ActivityCodeSpecified {
            get {
                return activityCodeSpecifiedField;
            } 
            set {
                activityCodeSpecifiedField = value;
                NotifyPropertyChanged("ActivityCodeSpecified");
            }
        }

        private Boolean activityCodeSpecifiedField; 

        /// <summary>
        /// Comment on type of this event, either referring to a job type or an activity type e.g. a safety meeting. 
        /// </summary>
		[Description("Comment on type of this event, either referring to a job type or an  activity type e.g. a safety meeting.")]
        [ComponentElement]
		[XmlElement("type")]
        public EventType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private EventType typeField; 

        /// <summary>
        /// True if planned.
        /// </summary>
		[Description("True if planned.")]
		[XmlElement("isPlan")]
        public Boolean? IsPlan {
            get {
                return isPlanField;
            } 
            set {
                isPlanField = value;
                 this.IsPlanSpecified = true;
                NotifyPropertyChanged("IsPlan");
            }
        }

        private Boolean? isPlanField; 

        /// <summary>
        /// isPlanSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsPlanSpecified {
            get {
                return isPlanSpecifiedField;
            } 
            set {
                isPlanSpecifiedField = value;
                NotifyPropertyChanged("IsPlanSpecified");
            }
        }

        private Boolean isPlanSpecifiedField; 

        /// <summary>
        /// Extension event for work order id.
        /// </summary>
		[StringLength(64)]
        [Description("Extension event for work order id.")]
		[XmlElement("workOrderID")]
        public String WorkOrderID {
            get {
                return workOrderIDField;
            } 
            set {
                workOrderIDField = value;
                NotifyPropertyChanged("WorkOrderID");
            }
        }

        private String workOrderIDField; 

        /// <summary>
        /// this is to associate with verb(Event) and noun (downholeEquipment). to refer to the whole downholeComponent using downholeComponentExtension.
        /// </summary>
		[Description("this is to associate with verb(Event) and noun (downholeEquipment). to refer to the whole downholeComponent using downholeComponentExtension.")]
        [ComponentElement]
		[XmlElement("downholeComponentRef")]
        public DownholeComponentRef DownholeComponentRef {
            get {
                return downholeComponentRefField;
            } 
            set {
                downholeComponentRefField = value;
                NotifyPropertyChanged("DownholeComponentRef");
            }
        }

        private DownholeComponentRef downholeComponentRefField; 

        /// <summary>
        /// Event extensions
        /// </summary>
		[Description("Event extensions")]
        [RecurringElement]
		[XmlElement("eventExtension")]
        public List<EventExtension> EventExtension {
            get {
                return eventExtensionField;
            } 
            set {
                eventExtensionField = value;
                NotifyPropertyChanged("EventExtension");
            }
        }

         /// <summary>
         /// bool to indicate if EventExtension has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EventExtensionSpecified
         {
             get {
             if(eventExtensionField!=null)
                 return eventExtensionField.Count>0?true:false;
             else return false;
             }
         }
        private List<EventExtension> eventExtensionField; 

        /// <summary>
        /// Service company or business
        /// </summary>
		[StringLength(64)]
        [Description("Service company or business")]
		[XmlElement("businessAssociate")]
        public String BusinessAssociate {
            get {
                return businessAssociateField;
            } 
            set {
                businessAssociateField = value;
                NotifyPropertyChanged("BusinessAssociate");
            }
        }

        private String businessAssociateField; 

        /// <summary>
        /// Name or information about person responsible who is implementing the service or job.
        /// </summary>
		[StringLength(64)]
        [Description("Name or information about person responsible who is implementing the service or job.")]
		[XmlElement("responsiblePerson")]
        public String ResponsiblePerson {
            get {
                return responsiblePersonField;
            } 
            set {
                responsiblePersonField = value;
                NotifyPropertyChanged("ResponsiblePerson");
            }
        }

        private String responsiblePersonField; 

        /// <summary>
        /// Contact name or person to get in touch with. Might not necessarily be the person responsible.
        /// </summary>
		[StringLength(64)]
        [Description("Contact name or person to get in touch with. Might not necessarily be the person responsible.")]
		[XmlElement("contact")]
        public String Contact {
            get {
                return contactField;
            } 
            set {
                contactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

        private String contactField; 

        /// <summary>
        /// The job or event cost detail.
        /// </summary>
		[Description("The job or event cost detail.")]
        [RecurringElement]
		[XmlElement("cost")]
        public List<DayCost> Cost {
            get {
                return costField;
            } 
            set {
                costField = value;
                NotifyPropertyChanged("Cost");
            }
        }

         /// <summary>
         /// bool to indicate if Cost has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CostSpecified
         {
             get {
             if(costField!=null)
                 return costField.Count>0?true:false;
             else return false;
             }
         }
        private List<DayCost> costField; 

        /// <summary>
        /// True if event is not productive.
        /// </summary>
		[Description("True if event is not productive.")]
		[XmlElement("nonproductive")]
        public Boolean? Nonproductive {
            get {
                return nonproductiveField;
            } 
            set {
                nonproductiveField = value;
                 this.NonproductiveSpecified = true;
                NotifyPropertyChanged("Nonproductive");
            }
        }

        private Boolean? nonproductiveField; 

        /// <summary>
        /// nonproductiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NonproductiveSpecified {
            get {
                return nonproductiveSpecifiedField;
            } 
            set {
                nonproductiveSpecifiedField = value;
                NotifyPropertyChanged("NonproductiveSpecified");
            }
        }

        private Boolean nonproductiveSpecifiedField; 

        /// <summary>
        /// True if event implies is in-trouble
        /// </summary>
		[Description("True if event implies is in-trouble")]
		[XmlElement("trouble")]
        public Boolean? Trouble {
            get {
                return troubleField;
            } 
            set {
                troubleField = value;
                 this.TroubleSpecified = true;
                NotifyPropertyChanged("Trouble");
            }
        }

        private Boolean? troubleField; 

        /// <summary>
        /// troubleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TroubleSpecified {
            get {
                return troubleSpecifiedField;
            } 
            set {
                troubleSpecifiedField = value;
                NotifyPropertyChanged("TroubleSpecified");
            }
        }

        private Boolean troubleSpecifiedField; 

        /// <summary>
        /// True of event is for preventive maintenance
        /// </summary>
		[Description("True of event is for preventive maintenance")]
		[XmlElement("preventiveMaintenance")]
        public Boolean? PreventiveMaintenance {
            get {
                return preventiveMaintenanceField;
            } 
            set {
                preventiveMaintenanceField = value;
                 this.PreventiveMaintenanceSpecified = true;
                NotifyPropertyChanged("PreventiveMaintenance");
            }
        }

        private Boolean? preventiveMaintenanceField; 

        /// <summary>
        /// preventiveMaintenanceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PreventiveMaintenanceSpecified {
            get {
                return preventiveMaintenanceSpecifiedField;
            } 
            set {
                preventiveMaintenanceSpecifiedField = value;
                NotifyPropertyChanged("PreventiveMaintenanceSpecified");
            }
        }

        private Boolean preventiveMaintenanceSpecifiedField; 

        /// <summary>
        /// True if there is no planning infomation for this activity.
        /// </summary>
		[Description("True if there is no planning infomation for this activity.")]
		[XmlElement("unplanned")]
        public Boolean? Unplanned {
            get {
                return unplannedField;
            } 
            set {
                unplannedField = value;
                 this.UnplannedSpecified = true;
                NotifyPropertyChanged("Unplanned");
            }
        }

        private Boolean? unplannedField; 

        /// <summary>
        /// unplannedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UnplannedSpecified {
            get {
                return unplannedSpecifiedField;
            } 
            set {
                unplannedSpecifiedField = value;
                NotifyPropertyChanged("UnplannedSpecified");
            }
        }

        private Boolean unplannedSpecifiedField; 

        /// <summary>
        /// Phase (large activity classification) e.g. Drill Surface Hole.
        /// </summary>
		[StringLength(40)]
        [Description("Phase (large activity classification) e.g. Drill Surface Hole.")]
		[XmlElement("phase")]
        public String Phase {
            get {
                return phaseField;
            } 
            set {
                phaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private String phaseField; 

        /// <summary>
        /// Participant points to the involved witsmlobjects
        /// </summary>
		[Description("Participant points to the involved witsmlobjects")]
        [ComponentElement]
		[XmlElement("participant")]
        public Participant Participants {
            get {
                return participantField;
            } 
            set {
                participantField = value;
                NotifyPropertyChanged("Participants");
            }
        }

        private Participant participantField; 

        /// <summary>
        /// Comment on this ledger
        /// </summary>
		[StringLength(4000)]
        [Description("Comment on this ledger")]
		[XmlElement("comment")]
        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects.
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Description of this ledger
        /// </summary>
		[StringLength(4000)]
        [Description("Description of this ledger")]
		[XmlElement("description")]
        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [XmlAttribute("uidWell")]
		
        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [XmlAttribute("uidWellbore")]
		
        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_slotsInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_slotsInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_slotsInterval xsd type.")]
    public partial class SlotsInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// stringEquipmentRefUID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
		[XmlElement("stringEquipmentRefUID")]
        public String StringEquipmentRefUID {
            get {
                return stringEquipmentRefUIDField;
            } 
            set {
                stringEquipmentRefUIDField = value;
                NotifyPropertyChanged("StringEquipmentRefUID");
            }
        }

        private String stringEquipmentRefUIDField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth of the top perforation.")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth of the bottom perforation.")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// intervalStatusHistory property
        /// </summary>
		[Description("The contactInterval history information")]
        [RecurringElement]
		[XmlElement("intervalStatusHistory")]
        public List<IntervalStatusHistory> IntervalStatusHistory {
            get {
                return intervalStatusHistoryField;
            } 
            set {
                intervalStatusHistoryField = value;
                NotifyPropertyChanged("IntervalStatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if IntervalStatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IntervalStatusHistorySpecified
         {
             get {
             if(intervalStatusHistoryField!=null)
                 return intervalStatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<IntervalStatusHistory> intervalStatusHistoryField; 

        /// <summary>
        /// eventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
		[XmlElement("eventHistory")]
        public EventInfo EventHistory {
            get {
                return eventHistoryField;
            } 
            set {
                eventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo eventHistoryField; 

        /// <summary>
        /// geologyFeatureRefID property
        /// </summary>
		[RecurringElement]
		[XmlElement("geologyFeatureRefID")]
        public List<String> GeologyFeatureRefID {
            get {
                return geologyFeatureRefIDField;
            } 
            set {
                geologyFeatureRefIDField = value;
                NotifyPropertyChanged("GeologyFeatureRefID");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureRefIDSpecified
         {
             get {
             if(geologyFeatureRefIDField!=null)
                 return geologyFeatureRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> geologyFeatureRefIDField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on the status history in the interval
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_intervalStatusHistory", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on the status history in the interval")]
    public partial class IntervalStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The physical status of an interval (e.g., open, closed, proposed)
        /// </summary>
		[Description("The physical status of an interval (e.g., open, closed, proposed)")]
		[XmlElement("physicalStatus")]
        public PhysicalStatus? PhysicalStatus {
            get {
                return physicalStatusField;
            } 
            set {
                physicalStatusField = value;
                 this.PhysicalStatusSpecified = true;
                NotifyPropertyChanged("PhysicalStatus");
            }
        }

        private PhysicalStatus? physicalStatusField; 

        /// <summary>
        /// physicalStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PhysicalStatusSpecified {
            get {
                return physicalStatusSpecifiedField;
            } 
            set {
                physicalStatusSpecifiedField = value;
                NotifyPropertyChanged("PhysicalStatusSpecified");
            }
        }

        private Boolean physicalStatusSpecifiedField; 

        /// <summary>
        /// The start date of status and allocation factor
        /// </summary>
		[Description("The start date of status and allocation factor")]
		[XmlElement("startDate")]
        public Timestamp? StartDate {
            get {
                return startDateField;
            } 
            set {
                startDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private Timestamp? startDateField; 

        /// <summary>
        /// startDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StartDateSpecified {
            get {
                return startDateSpecifiedField;
            } 
            set {
                startDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private Boolean startDateSpecifiedField; 

        /// <summary>
        /// The end date of status and allocation factor
        /// </summary>
		[Description("The end date of status and allocation factor")]
		[XmlElement("endDate")]
        public Timestamp? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private Timestamp? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private Boolean endDateSpecifiedField; 

        /// <summary>
        /// The measured top depth of the interval
        /// </summary>
		[Description("The measured top depth of the interval")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// The measured bottom depth of the interval
        /// </summary>
		[Description("The measured bottom depth of the interval")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// defines the proportional amount of fluid from the well completion that is flowing through this interval whithin a wellbore
        /// </summary>
		[Range(0, 1)]
        [Description("defines the proportional amount of fluid from the well completion  that is flowing through this interval whithin a wellbore")]
		[XmlElement("allocationFactor")]
        public Double? AllocationFactor {
            get {
                return allocationFactorField;
            } 
            set {
                allocationFactorField = value;
                 this.AllocationFactorSpecified = true;
                NotifyPropertyChanged("AllocationFactor");
            }
        }

        private Double? allocationFactorField; 

        /// <summary>
        /// allocationFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AllocationFactorSpecified {
            get {
                return allocationFactorSpecifiedField;
            } 
            set {
                allocationFactorSpecifiedField = value;
                NotifyPropertyChanged("AllocationFactorSpecified");
            }
        }

        private Boolean allocationFactorSpecifiedField; 

        /// <summary>
        /// A remark about the interval over this period of time
        /// </summary>
		[StringLength(4000)]
        [Description("A remark about the interval over this period of time")]
		[XmlElement("comment")]
        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Event information type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_eventInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Event information type")]
    public partial class EventInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The referencing event was initailized
        /// </summary>
		[Description("The referencing event was initailized")]
        [ComponentElement]
		[XmlElement("beginEvent")]
        public EventRefInfo BeginEvent {
            get {
                return beginEventField;
            } 
            set {
                beginEventField = value;
                NotifyPropertyChanged("BeginEvent");
            }
        }

        private EventRefInfo beginEventField; 

        /// <summary>
        /// The referencing event when the even was end
        /// </summary>
		[Description("The referencing event when the even was end")]
        [ComponentElement]
		[XmlElement("endEvent")]
        public EventRefInfo EndEvent {
            get {
                return endEventField;
            } 
            set {
                endEventField = value;
                NotifyPropertyChanged("EndEvent");
            }
        }

        private EventRefInfo endEventField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Event reference collection
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_eventRefInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Event reference collection")]
    public partial class EventRefInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The referencing eventledger ID
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The referencing eventledger ID")]
		[XmlElement("eventRefID")]
        public String EventRefID {
            get {
                return eventRefIDField;
            } 
            set {
                eventRefIDField = value;
                NotifyPropertyChanged("EventRefID");
            }
        }

        private String eventRefIDField; 

        /// <summary>
        /// install/pull date
        /// </summary>
		[Description("install/pull date")]
		[XmlElement("eventDate")]
        public Timestamp? EventDate {
            get {
                return eventDateField;
            } 
            set {
                eventDateField = value;
                 this.EventDateSpecified = true;
                NotifyPropertyChanged("EventDate");
            }
        }

        private Timestamp? eventDateField; 

        /// <summary>
        /// eventDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EventDateSpecified {
            get {
                return eventDateSpecifiedField;
            } 
            set {
                eventDateSpecifiedField = value;
                NotifyPropertyChanged("EventDateSpecified");
            }
        }

        private Boolean eventDateSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on collection of perforation status history
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perforationStatusHistory", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on collection of perforation status history")]
    public partial class PerforationStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// perforation status
        /// </summary>
		[Description("perforation status")]
		[XmlElement("perforationStatus")]
        public PerforationStatus? PerforationStatus {
            get {
                return perforationStatusField;
            } 
            set {
                perforationStatusField = value;
                 this.PerforationStatusSpecified = true;
                NotifyPropertyChanged("PerforationStatus");
            }
        }

        private PerforationStatus? perforationStatusField; 

        /// <summary>
        /// perforationStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PerforationStatusSpecified {
            get {
                return perforationStatusSpecifiedField;
            } 
            set {
                perforationStatusSpecifiedField = value;
                NotifyPropertyChanged("PerforationStatusSpecified");
            }
        }

        private Boolean perforationStatusSpecifiedField; 

        /// <summary>
        /// the start date of status
        /// </summary>
		[Description("the start date of status")]
		[XmlElement("startDate")]
        public Timestamp? StartDate {
            get {
                return startDateField;
            } 
            set {
                startDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private Timestamp? startDateField; 

        /// <summary>
        /// startDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StartDateSpecified {
            get {
                return startDateSpecifiedField;
            } 
            set {
                startDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private Boolean startDateSpecifiedField; 

        /// <summary>
        /// the end date of status
        /// </summary>
		[Description("the end date of status")]
		[XmlElement("endDate")]
        public Timestamp? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private Timestamp? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private Boolean endDateSpecifiedField; 

        /// <summary>
        /// The measured top of perforation
        /// </summary>
		[Description("The measured top of perforation")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// The measured bottom of perforation
        /// </summary>
		[Description("The measured bottom of perforation")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// defines the proportional amount of fluid from the well completion that is flowing through this interval whithin a wellbore
        /// </summary>
		[Range(0, 1)]
        [Description("defines the proportional amount of fluid from the well completion  that is flowing through this interval whithin a wellbore")]
		[XmlElement("allocationFactor")]
        public Double? AllocationFactor {
            get {
                return allocationFactorField;
            } 
            set {
                allocationFactorField = value;
                 this.AllocationFactorSpecified = true;
                NotifyPropertyChanged("AllocationFactor");
            }
        }

        private Double? allocationFactorField; 

        /// <summary>
        /// allocationFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AllocationFactorSpecified {
            get {
                return allocationFactorSpecifiedField;
            } 
            set {
                allocationFactorSpecifiedField = value;
                NotifyPropertyChanged("AllocationFactorSpecified");
            }
        }

        private Boolean allocationFactorSpecifiedField; 

        /// <summary>
        /// The description about the status
        /// </summary>
		[StringLength(4000)]
        [Description("The description about the status")]
		[XmlElement("comment")]
        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_perforationSetInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perforationSetInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_perforationSetInterval xsd type.")]
    public partial class PerforationSetInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// perforationSetRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
		[XmlElement("perforationSetRefID")]
        public String PerforationSetRefID {
            get {
                return perforationSetRefIDField;
            } 
            set {
                perforationSetRefIDField = value;
                NotifyPropertyChanged("PerforationSetRefID");
            }
        }

        private String perforationSetRefIDField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth of the top perforation.")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth of the bottom perforation.")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// perforationStatusHistory property
        /// </summary>
		[Description("The contactInterval history information")]
        [RecurringElement]
		[XmlElement("perforationStatusHistory")]
        public List<PerforationStatusHistory> PerforationStatusHistory {
            get {
                return perforationStatusHistoryField;
            } 
            set {
                perforationStatusHistoryField = value;
                NotifyPropertyChanged("PerforationStatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationStatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationStatusHistorySpecified
         {
             get {
             if(perforationStatusHistoryField!=null)
                 return perforationStatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerforationStatusHistory> perforationStatusHistoryField; 

        /// <summary>
        /// eventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
		[XmlElement("eventHistory")]
        public EventInfo EventHistory {
            get {
                return eventHistoryField;
            } 
            set {
                eventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo eventHistoryField; 

        /// <summary>
        /// geologyFeatureRefID property
        /// </summary>
		[RecurringElement]
		[XmlElement("geologyFeatureRefID")]
        public List<String> GeologyFeatureRefID {
            get {
                return geologyFeatureRefIDField;
            } 
            set {
                geologyFeatureRefIDField = value;
                NotifyPropertyChanged("GeologyFeatureRefID");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureRefIDSpecified
         {
             get {
             if(geologyFeatureRefIDField!=null)
                 return geologyFeatureRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> geologyFeatureRefIDField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_openHoleInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_openHoleInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_openHoleInterval xsd type.")]
    public partial class OpenHoleInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// boreholeStringRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
		[XmlElement("boreholeStringRefID")]
        public String BoreholeStringRefID {
            get {
                return boreholeStringRefIDField;
            } 
            set {
                boreholeStringRefIDField = value;
                NotifyPropertyChanged("BoreholeStringRefID");
            }
        }

        private String boreholeStringRefIDField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth of the top perforation.")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth of the bottom perforation.")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// intervalStatusHistory property
        /// </summary>
		[Description("The contactInterval history information")]
        [RecurringElement]
		[XmlElement("intervalStatusHistory")]
        public List<IntervalStatusHistory> IntervalStatusHistory {
            get {
                return intervalStatusHistoryField;
            } 
            set {
                intervalStatusHistoryField = value;
                NotifyPropertyChanged("IntervalStatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if IntervalStatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IntervalStatusHistorySpecified
         {
             get {
             if(intervalStatusHistoryField!=null)
                 return intervalStatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<IntervalStatusHistory> intervalStatusHistoryField; 

        /// <summary>
        /// eventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
		[XmlElement("eventHistory")]
        public EventInfo EventHistory {
            get {
                return eventHistoryField;
            } 
            set {
                eventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo eventHistoryField; 

        /// <summary>
        /// geologyFeatureRefID property
        /// </summary>
		[RecurringElement]
		[XmlElement("geologyFeatureRefID")]
        public List<String> GeologyFeatureRefID {
            get {
                return geologyFeatureRefIDField;
            } 
            set {
                geologyFeatureRefIDField = value;
                NotifyPropertyChanged("GeologyFeatureRefID");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureRefIDSpecified
         {
             get {
             if(geologyFeatureRefIDField!=null)
                 return geologyFeatureRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> geologyFeatureRefIDField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_gravelPackInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_gravelPackInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_gravelPackInterval xsd type.")]
    public partial class GravelPackInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// downholeStringRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
		[XmlElement("downholeStringRefID")]
        public String DownholeStringRefID {
            get {
                return downholeStringRefIDField;
            } 
            set {
                downholeStringRefIDField = value;
                NotifyPropertyChanged("DownholeStringRefID");
            }
        }

        private String downholeStringRefIDField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth of the top perforation.")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth of the bottom perforation.")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// intervalStatusHistory property
        /// </summary>
		[Description("The contactInterval history information")]
        [RecurringElement]
		[XmlElement("intervalStatusHistory")]
        public List<IntervalStatusHistory> IntervalStatusHistory {
            get {
                return intervalStatusHistoryField;
            } 
            set {
                intervalStatusHistoryField = value;
                NotifyPropertyChanged("IntervalStatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if IntervalStatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IntervalStatusHistorySpecified
         {
             get {
             if(intervalStatusHistoryField!=null)
                 return intervalStatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<IntervalStatusHistory> intervalStatusHistoryField; 

        /// <summary>
        /// eventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
		[XmlElement("eventHistory")]
        public EventInfo EventHistory {
            get {
                return eventHistoryField;
            } 
            set {
                eventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo eventHistoryField; 

        /// <summary>
        /// geologyFeatureRefID property
        /// </summary>
		[RecurringElement]
		[XmlElement("geologyFeatureRefID")]
        public List<String> GeologyFeatureRefID {
            get {
                return geologyFeatureRefIDField;
            } 
            set {
                geologyFeatureRefIDField = value;
                NotifyPropertyChanged("GeologyFeatureRefID");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureRefIDSpecified
         {
             get {
             if(geologyFeatureRefIDField!=null)
                 return geologyFeatureRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> geologyFeatureRefIDField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on collection of contact intervals
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_contactIntervalSet", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on collection of contact intervals")]
    public partial class ContactIntervalSet : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// gravelPack interval 
        /// </summary>
		[Description("gravelPack interval")]
        [RecurringElement]
		[XmlElement("gravelPackInterval")]
        public List<GravelPackInterval> GravelPackInterval {
            get {
                return gravelPackIntervalField;
            } 
            set {
                gravelPackIntervalField = value;
                NotifyPropertyChanged("GravelPackInterval");
            }
        }

         /// <summary>
         /// bool to indicate if GravelPackInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GravelPackIntervalSpecified
         {
             get {
             if(gravelPackIntervalField!=null)
                 return gravelPackIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<GravelPackInterval> gravelPackIntervalField; 

        /// <summary>
        /// cs_openHole interval 
        /// </summary>
		[Description("cs_openHole interval")]
        [RecurringElement]
		[XmlElement("openHoleInterval")]
        public List<OpenHoleInterval> OpenHoleInterval {
            get {
                return openHoleIntervalField;
            } 
            set {
                openHoleIntervalField = value;
                NotifyPropertyChanged("OpenHoleInterval");
            }
        }

         /// <summary>
         /// bool to indicate if OpenHoleInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpenHoleIntervalSpecified
         {
             get {
             if(openHoleIntervalField!=null)
                 return openHoleIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<OpenHoleInterval> openHoleIntervalField; 

        /// <summary>
        /// perforation interval 
        /// </summary>
		[Description("perforation interval")]
        [RecurringElement]
		[XmlElement("perforationSetInterval")]
        public List<PerforationSetInterval> PerforationSetInterval {
            get {
                return perforationSetIntervalField;
            } 
            set {
                perforationSetIntervalField = value;
                NotifyPropertyChanged("PerforationSetInterval");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSetInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetIntervalSpecified
         {
             get {
             if(perforationSetIntervalField!=null)
                 return perforationSetIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerforationSetInterval> perforationSetIntervalField; 

        /// <summary>
        /// cs_slots interval 
        /// </summary>
		[Description("cs_slots interval")]
        [RecurringElement]
		[XmlElement("slotsInterval")]
        public List<SlotsInterval> SlotsInterval {
            get {
                return slotsIntervalField;
            } 
            set {
                slotsIntervalField = value;
                NotifyPropertyChanged("SlotsInterval");
            }
        }

         /// <summary>
         /// bool to indicate if SlotsInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SlotsIntervalSpecified
         {
             get {
             if(slotsIntervalField!=null)
                 return slotsIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<SlotsInterval> slotsIntervalField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the obj_wellboreCompletion xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellboreCompletion", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.COMPLETION, "1.0")]
    [Description("This class represents the obj_wellboreCompletion xsd type.")]
    public partial class WellboreCompletion : Object, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// nameWell property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the completion.")]
		[XmlElement("nameWell")]
        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 

        /// <summary>
        /// nameWellbore property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the completion.")]
		[XmlElement("nameWellbore")]
        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 

        /// <summary>
        /// nameWellCompletion property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well completion that contains the completion.")]
		[XmlElement("nameWellCompletion")]
        public String NameWellCompletion {
            get {
                return nameWellCompletionField;
            } 
            set {
                nameWellCompletionField = value;
                NotifyPropertyChanged("NameWellCompletion");
            }
        }

        private String nameWellCompletionField; 

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("Preferred name")]
		[XmlElement("name")]
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

        /// <summary>
        /// wellboreCompletionNo property
        /// </summary>
		[StringLength(64)]
        [Description("CompletionNo, etc API14")]
		[XmlElement("wellboreCompletionNo")]
        public String WellboreCompletionNo {
            get {
                return wellboreCompletionNoField;
            } 
            set {
                wellboreCompletionNoField = value;
                NotifyPropertyChanged("WellboreCompletionNo");
            }
        }

        private String wellboreCompletionNoField; 

        /// <summary>
        /// wellboreCompletionAlias property
        /// </summary>
		[StringLength(64)]
        [Description("Preferred alias name")]
		[XmlElement("wellboreCompletionAlias")]
        public String WellboreCompletionAlias {
            get {
                return wellboreCompletionAliasField;
            } 
            set {
                wellboreCompletionAliasField = value;
                NotifyPropertyChanged("WellboreCompletionAlias");
            }
        }

        private String wellboreCompletionAliasField; 

        /// <summary>
        /// evenHistory property
        /// </summary>
		[RecurringElement]
		[XmlElement("evenHistory")]
        public List<EventInfo> EvenHistory {
            get {
                return evenHistoryField;
            } 
            set {
                evenHistoryField = value;
                NotifyPropertyChanged("EvenHistory");
            }
        }

         /// <summary>
         /// bool to indicate if EvenHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EvenHistorySpecified
         {
             get {
             if(evenHistoryField!=null)
                 return evenHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<EventInfo> evenHistoryField; 

        /// <summary>
        /// wellboreCompletionDate property
        /// </summary>
		[Description("Completion Date")]
		[XmlElement("wellboreCompletionDate")]
        public Timestamp? WellboreCompletionDate {
            get {
                return wellboreCompletionDateField;
            } 
            set {
                wellboreCompletionDateField = value;
                 this.WellboreCompletionDateSpecified = true;
                NotifyPropertyChanged("WellboreCompletionDate");
            }
        }

        private Timestamp? wellboreCompletionDateField; 

        /// <summary>
        /// wellboreCompletionDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean WellboreCompletionDateSpecified {
            get {
                return wellboreCompletionDateSpecifiedField;
            } 
            set {
                wellboreCompletionDateSpecifiedField = value;
                NotifyPropertyChanged("WellboreCompletionDateSpecified");
            }
        }

        private Boolean wellboreCompletionDateSpecifiedField; 

        /// <summary>
        /// suffixAPI property
        /// </summary>
		[StringLength(64)]
        [Description("API suffix.")]
		[XmlElement("suffixAPI")]
        public String SuffixAPI {
            get {
                return suffixAPIField;
            } 
            set {
                suffixAPIField = value;
                NotifyPropertyChanged("SuffixAPI");
            }
        }

        private String suffixAPIField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth at top of interval.")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth at base of interval.")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth at top of the section.")]
        [ComponentElement]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth at bottom of the section.")]
        [ComponentElement]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// currentStatus property
        /// </summary>
		
		[XmlElement("currentStatus")]
        public CompletionStatus? CurrentStatus {
            get {
                return currentStatusField;
            } 
            set {
                currentStatusField = value;
                 this.CurrentStatusSpecified = true;
                NotifyPropertyChanged("CurrentStatus");
            }
        }

        private CompletionStatus? currentStatusField; 

        /// <summary>
        /// currentStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CurrentStatusSpecified {
            get {
                return currentStatusSpecifiedField;
            } 
            set {
                currentStatusSpecifiedField = value;
                NotifyPropertyChanged("CurrentStatusSpecified");
            }
        }

        private Boolean currentStatusSpecifiedField; 

        /// <summary>
        /// statusDate property
        /// </summary>
		
		[XmlElement("statusDate")]
        public Timestamp? StatusDate {
            get {
                return statusDateField;
            } 
            set {
                statusDateField = value;
                 this.StatusDateSpecified = true;
                NotifyPropertyChanged("StatusDate");
            }
        }

        private Timestamp? statusDateField; 

        /// <summary>
        /// statusDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StatusDateSpecified {
            get {
                return statusDateSpecifiedField;
            } 
            set {
                statusDateSpecifiedField = value;
                NotifyPropertyChanged("StatusDateSpecified");
            }
        }

        private Boolean statusDateSpecifiedField; 

        /// <summary>
        /// statusHistory property
        /// </summary>
		[RecurringElement]
		[XmlElement("statusHistory")]
        public List<CompletionStatusHistory> StatusHistory {
            get {
                return statusHistoryField;
            } 
            set {
                statusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if StatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StatusHistorySpecified
         {
             get {
             if(statusHistoryField!=null)
                 return statusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<CompletionStatusHistory> statusHistoryField; 

        /// <summary>
        /// contactIntervalSet property
        /// </summary>
		[Description("A collection of contact interval information")]
        [ComponentElement]
		[XmlElement("contactIntervalSet")]
        public ContactIntervalSet ContactIntervalSet {
            get {
                return contactIntervalSetField;
            } 
            set {
                contactIntervalSetField = value;
                NotifyPropertyChanged("ContactIntervalSet");
            }
        }

        private ContactIntervalSet contactIntervalSetField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects.
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [XmlAttribute("uidWell")]
		
        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore.. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore..")]
        [XmlAttribute("uidWellbore")]
		
        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 

		/// <summary>
        /// Unique identifier for the well completion. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well completion.")]
        [XmlAttribute("uidWellCompletion")]
		
        public String UidWellCompletion {
            get {
                return uidWellCompletionField;
            } 
            set {
                uidWellCompletionField = value;
                NotifyPropertyChanged("UidWellCompletion");
            }
        }

        private String uidWellCompletionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_perforationSet xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perforationSet", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_perforationSet xsd type.")]
    public partial class PerforationSet : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// perforation on borehole String
        /// </summary>
		[Description("perforation on borehole String")]
        [RecurringElement]
		[XmlElement("boreholeStringRefID")]
        public List<String> BoreholeStringRefID {
            get {
                return boreholeStringRefIDField;
            } 
            set {
                boreholeStringRefIDField = value;
                NotifyPropertyChanged("BoreholeStringRefID");
            }
        }

         /// <summary>
         /// bool to indicate if BoreholeStringRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeStringRefIDSpecified
         {
             get {
             if(boreholeStringRefIDField!=null)
                 return boreholeStringRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> boreholeStringRefIDField; 

        /// <summary>
        /// perforation on downholeStringRefID
        /// </summary>
		[Description("perforation on downholeStringRefID")]
        [RecurringElement]
		[XmlElement("downholeStringRefID")]
        public List<String> DownholeStringRefID {
            get {
                return downholeStringRefIDField;
            } 
            set {
                downholeStringRefIDField = value;
                NotifyPropertyChanged("DownholeStringRefID");
            }
        }

         /// <summary>
         /// bool to indicate if DownholeStringRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DownholeStringRefIDSpecified
         {
             get {
             if(downholeStringRefIDField!=null)
                 return downholeStringRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> downholeStringRefIDField; 

        /// <summary>
        /// The contactInterval event information
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
		[XmlElement("eventHistory")]
        public EventInfo EventHistory {
            get {
                return eventHistoryField;
            } 
            set {
                eventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo eventHistoryField; 

        /// <summary>
        /// The measured top depth of the hole
        /// </summary>
		[Description("The measured top depth of the hole")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// The measured bottom of the hole
        /// </summary>
		[Description("The measured bottom of the hole")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth of the top perforation.
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth of the bottom perforation.
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// The diameter of the hole
        /// </summary>
		[Description("The diameter of the hole")]
        [ComponentElement]
		[XmlElement("holeDiameter")]
        public LengthMeasure HoleDiameter {
            get {
                return holeDiameterField;
            } 
            set {
                holeDiameterField = value;
                NotifyPropertyChanged("HoleDiameter");
            }
        }

        private LengthMeasure holeDiameterField; 

        /// <summary>
        /// The angle of the holes
        /// </summary>
		[Description("The angle of the holes")]
        [ComponentElement]
		[XmlElement("holeAngle")]
        public PlaneAngleMeasure HoleAngle {
            get {
                return holeAngleField;
            } 
            set {
                holeAngleField = value;
                NotifyPropertyChanged("HoleAngle");
            }
        }

        private PlaneAngleMeasure holeAngleField; 

        /// <summary>
        /// The pattern of the holes
        /// </summary>
		[StringLength(64)]
        [Description("The pattern of the holes")]
		[XmlElement("holePattern")]
        public String HolePattern {
            get {
                return holePatternField;
            } 
            set {
                holePatternField = value;
                NotifyPropertyChanged("HolePattern");
            }
        }

        private String holePatternField; 

        /// <summary>
        /// The density of the holes
        /// </summary>
		[Description("The density of the holes")]
        [ComponentElement]
		[XmlElement("holeDensity")]
        public PerLengthMeasure HoleDensity {
            get {
                return holeDensityField;
            } 
            set {
                holeDensityField = value;
                NotifyPropertyChanged("HoleDensity");
            }
        }

        private PerLengthMeasure holeDensityField; 

        /// <summary>
        /// The number of holes
        /// </summary>
		[Description("The number of holes")]
		[XmlElement("holeCount")]
        public Int16? HoleCount {
            get {
                return holeCountField;
            } 
            set {
                holeCountField = value;
                 this.HoleCountSpecified = true;
                NotifyPropertyChanged("HoleCount");
            }
        }

        private Int16? holeCountField; 

        /// <summary>
        /// holeCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean HoleCountSpecified {
            get {
                return holeCountSpecifiedField;
            } 
            set {
                holeCountSpecifiedField = value;
                NotifyPropertyChanged("HoleCountSpecified");
            }
        }

        private Boolean holeCountSpecifiedField; 

        /// <summary>
        /// The friction factor of each perforation set.
        /// </summary>
		[Description("The friction factor of each perforation set.")]
		[XmlElement("frictionFactor")]
        public Double? FrictionFactor {
            get {
                return frictionFactorField;
            } 
            set {
                frictionFactorField = value;
                 this.FrictionFactorSpecified = true;
                NotifyPropertyChanged("FrictionFactor");
            }
        }

        private Double? frictionFactorField; 

        /// <summary>
        /// frictionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean FrictionFactorSpecified {
            get {
                return frictionFactorSpecifiedField;
            } 
            set {
                frictionFactorSpecifiedField = value;
                NotifyPropertyChanged("FrictionFactorSpecified");
            }
        }

        private Boolean frictionFactorSpecifiedField; 

        /// <summary>
        /// The friction pressure for the perforation set.
        /// </summary>
		[Description("The friction pressure for the perforation set.")]
        [ComponentElement]
		[XmlElement("frictionPres")]
        public PressureMeasure FrictionPres {
            get {
                return frictionPresField;
            } 
            set {
                frictionPresField = value;
                NotifyPropertyChanged("FrictionPres");
            }
        }

        private PressureMeasure frictionPresField; 

        /// <summary>
        /// A coefficient used in the equation for calculation of pressure drop across a perforation set.
        /// </summary>
		[Description("A coefficient used in the equation for calculation of pressure drop  across a perforation set.")]
		[XmlElement("dischargeCoefficient")]
        public Double? DischargeCoefficient {
            get {
                return dischargeCoefficientField;
            } 
            set {
                dischargeCoefficientField = value;
                 this.DischargeCoefficientSpecified = true;
                NotifyPropertyChanged("DischargeCoefficient");
            }
        }

        private Double? dischargeCoefficientField; 

        /// <summary>
        /// dischargeCoefficientSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DischargeCoefficientSpecified {
            get {
                return dischargeCoefficientSpecifiedField;
            } 
            set {
                dischargeCoefficientSpecifiedField = value;
                NotifyPropertyChanged("DischargeCoefficientSpecified");
            }
        }

        private Boolean dischargeCoefficientSpecifiedField; 

        /// <summary>
        ///  The type of perforation tool.
        /// </summary>
		[Description("The type of perforation tool.")]
		[XmlElement("perforationTool")]
        public PerforationToolType? PerforationTool {
            get {
                return perforationToolField;
            } 
            set {
                perforationToolField = value;
                 this.PerforationToolSpecified = true;
                NotifyPropertyChanged("PerforationTool");
            }
        }

        private PerforationToolType? perforationToolField; 

        /// <summary>
        /// perforationToolSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PerforationToolSpecified {
            get {
                return perforationToolSpecifiedField;
            } 
            set {
                perforationToolSpecifiedField = value;
                NotifyPropertyChanged("PerforationToolSpecified");
            }
        }

        private Boolean perforationToolSpecifiedField; 

        /// <summary>
        /// The Penetration length of perforation.
        /// </summary>
		[Description("The Penetration length of perforation.")]
        [ComponentElement]
		[XmlElement("perforationPenetration")]
        public LengthMeasure PerforationPenetration {
            get {
                return perforationPenetrationField;
            } 
            set {
                perforationPenetrationField = value;
                NotifyPropertyChanged("PerforationPenetration");
            }
        }

        private LengthMeasure perforationPenetrationField; 

        /// <summary>
        /// The diameter of crushed zone
        /// </summary>
		[Description("The diameter of crushed zone")]
        [ComponentElement]
		[XmlElement("crushZoneDiameter")]
        public LengthMeasure CrushZoneDiameter {
            get {
                return crushZoneDiameterField;
            } 
            set {
                crushZoneDiameterField = value;
                NotifyPropertyChanged("CrushZoneDiameter");
            }
        }

        private LengthMeasure crushZoneDiameterField; 

        /// <summary>
        /// The ratio value of cursh damage
        /// </summary>
		[StringLength(64)]
        [Description("The ratio value of cursh damage")]
		[XmlElement("crushDamageRatio")]
        public String CrushDamageRatio {
            get {
                return crushDamageRatioField;
            } 
            set {
                crushDamageRatioField = value;
                NotifyPropertyChanged("CrushDamageRatio");
            }
        }

        private String crushDamageRatioField; 

        /// <summary>
        /// The original perforation date
        /// </summary>
		[Description("The original perforation date")]
		[XmlElement("perforationDate")]
        public Timestamp? PerforationDate {
            get {
                return perforationDateField;
            } 
            set {
                perforationDateField = value;
                 this.PerforationDateSpecified = true;
                NotifyPropertyChanged("PerforationDate");
            }
        }

        private Timestamp? perforationDateField; 

        /// <summary>
        /// perforationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PerforationDateSpecified {
            get {
                return perforationDateSpecifiedField;
            } 
            set {
                perforationDateSpecifiedField = value;
                NotifyPropertyChanged("PerforationDateSpecified");
            }
        }

        private Boolean perforationDateSpecifiedField; 

        /// <summary>
        /// Remarks regarding this perforationSet
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks regarding this perforationSet")]
		[XmlElement("permanentRemarks")]
        public String PermanentRemarks {
            get {
                return permanentRemarksField;
            } 
            set {
                permanentRemarksField = value;
                NotifyPropertyChanged("PermanentRemarks");
            }
        }

        private String permanentRemarksField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on the perforated hole
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perfHole", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on the perforated hole")]
    public partial class PerfHole : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The measured top depth of the hole
        /// </summary>
		[Description("The measured top depth of the hole")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// The measured bottom of the hole
        /// </summary>
		[Description("The measured bottom of the hole")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth of the top perforation.
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth of the bottom perforation.
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// The diameter of the hole
        /// </summary>
		[Description("The diameter of the hole")]
        [ComponentElement]
		[XmlElement("holeDiameter")]
        public LengthMeasure HoleDiameter {
            get {
                return holeDiameterField;
            } 
            set {
                holeDiameterField = value;
                NotifyPropertyChanged("HoleDiameter");
            }
        }

        private LengthMeasure holeDiameterField; 

        /// <summary>
        /// The angle of the holes
        /// </summary>
		[Description("The angle of the holes")]
        [ComponentElement]
		[XmlElement("holeAngle")]
        public PlaneAngleMeasure HoleAngle {
            get {
                return holeAngleField;
            } 
            set {
                holeAngleField = value;
                NotifyPropertyChanged("HoleAngle");
            }
        }

        private PlaneAngleMeasure holeAngleField; 

        /// <summary>
        /// The pattern of the holes
        /// </summary>
		[StringLength(64)]
        [Description("The pattern of the holes")]
		[XmlElement("holePattern")]
        public String HolePattern {
            get {
                return holePatternField;
            } 
            set {
                holePatternField = value;
                NotifyPropertyChanged("HolePattern");
            }
        }

        private String holePatternField; 

        /// <summary>
        /// The density of the holes
        /// </summary>
		[Description("The density of the holes")]
        [ComponentElement]
		[XmlElement("holeDensity")]
        public PerLengthMeasure HoleDensity {
            get {
                return holeDensityField;
            } 
            set {
                holeDensityField = value;
                NotifyPropertyChanged("HoleDensity");
            }
        }

        private PerLengthMeasure holeDensityField; 

        /// <summary>
        /// The number of holes
        /// </summary>
		[Description("The number of holes")]
		[XmlElement("holeCount")]
        public Int16? HoleCount {
            get {
                return holeCountField;
            } 
            set {
                holeCountField = value;
                 this.HoleCountSpecified = true;
                NotifyPropertyChanged("HoleCount");
            }
        }

        private Int16? holeCountField; 

        /// <summary>
        /// holeCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean HoleCountSpecified {
            get {
                return holeCountSpecifiedField;
            } 
            set {
                holeCountSpecifiedField = value;
                NotifyPropertyChanged("HoleCountSpecified");
            }
        }

        private Boolean holeCountSpecifiedField; 

        /// <summary>
        /// Remarks regarding this perforated hole
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks regarding this perforated hole")]
		[XmlElement("remarks")]
        public String Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private String remarksField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on slot resulting from perforation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perfSlot", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on slot resulting from perforation")]
    public partial class PerfSlot : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The height of slot
        /// </summary>
		[Description("The height of slot")]
        [ComponentElement]
		[XmlElement("slotHeight")]
        public LengthMeasure SlotHeight {
            get {
                return slotHeightField;
            } 
            set {
                slotHeightField = value;
                NotifyPropertyChanged("SlotHeight");
            }
        }

        private LengthMeasure slotHeightField; 

        /// <summary>
        /// The width of the slot
        /// </summary>
		[Description("The width of the slot")]
        [ComponentElement]
		[XmlElement("slotWidth")]
        public LengthMeasure SlotWidth {
            get {
                return slotWidthField;
            } 
            set {
                slotWidthField = value;
                NotifyPropertyChanged("SlotWidth");
            }
        }

        private LengthMeasure slotWidthField; 

        /// <summary>
        /// Distance from center point
        /// </summary>
		[Description("Distance from center point")]
        [ComponentElement]
		[XmlElement("slotCenterDistance")]
        public LengthMeasure SlotCenterDistance {
            get {
                return slotCenterDistanceField;
            } 
            set {
                slotCenterDistanceField = value;
                NotifyPropertyChanged("SlotCenterDistance");
            }
        }

        private LengthMeasure slotCenterDistanceField; 

        /// <summary>
        /// The number of the slot
        /// </summary>
		[Description("The number of the slot")]
		[XmlElement("slotCount")]
        public Int16? SlotCount {
            get {
                return slotCountField;
            } 
            set {
                slotCountField = value;
                 this.SlotCountSpecified = true;
                NotifyPropertyChanged("SlotCount");
            }
        }

        private Int16? slotCountField; 

        /// <summary>
        /// slotCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean SlotCountSpecified {
            get {
                return slotCountSpecifiedField;
            } 
            set {
                slotCountSpecifiedField = value;
                NotifyPropertyChanged("SlotCountSpecified");
            }
        }

        private Boolean slotCountSpecifiedField; 

        /// <summary>
        /// Remarks regarding this perforation slot
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks regarding this perforation slot")]
		[XmlElement("remarks")]
        public String Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private String remarksField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Name-value extensions for the equipment property
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_extPropNameValue", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Name-value extensions for the equipment property")]
    public partial class ExtPropNameValue : Object, INotifyPropertyChanged
    {

        /// <summary>
        ///  A string representing the name of property.
        /// </summary>
		[StringLength(64)]
        [Description("A string representing the name of property.")]
		[XmlElement("name")]
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

        /// <summary>
        ///  A value string representing the units of measure of the value.
        /// </summary>
		[Description("A value string representing the units of measure of the value.")]
        [ComponentElement]
		[XmlElement("value")]
        public Extensionvalue Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Extensionvalue valueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_equipment xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_equipment", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_equipment xsd type.")]
    public partial class Equipment : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the piece of equipment.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the piece of equipment.")]
		[XmlElement("equipmentName")]
        public String EquipmentName {
            get {
                return equipmentNameField;
            } 
            set {
                equipmentNameField = value;
                NotifyPropertyChanged("EquipmentName");
            }
        }

        private String equipmentNameField; 

        /// <summary>
        /// The equipment type etc. bridge plug, bull plug. capillary tubing..
        /// </summary>
		[Required]
        [Description("The equipment type etc. bridge plug, bull plug. capillary tubing..")]
		[XmlElement("equipmentType")]
        public EquipmentType? EquipmentType {
            get {
                return equipmentTypeField;
            } 
            set {
                equipmentTypeField = value;
                NotifyPropertyChanged("EquipmentType");
            }
        }

        private EquipmentType? equipmentTypeField; 

        /// <summary>
        /// manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer of this equipment.")]
		[XmlElement("manufacturer")]
        public String Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String manufacturerField; 

        /// <summary>
        /// model property
        /// </summary>
		[StringLength(64)]
        [Description("The model of the equipment.")]
		[XmlElement("model")]
        public String Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String modelField; 

        /// <summary>
        /// catalogID property
        /// </summary>
		[StringLength(64)]
        [Description("Catalog where equipment can be found.")]
		[XmlElement("catalogID")]
        public String CatalogID {
            get {
                return catalogIDField;
            } 
            set {
                catalogIDField = value;
                NotifyPropertyChanged("CatalogID");
            }
        }

        private String catalogIDField; 

        /// <summary>
        /// catalogName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of equipment as found in catalog.")]
		[XmlElement("catalogName")]
        public String CatalogName {
            get {
                return catalogNameField;
            } 
            set {
                catalogNameField = value;
                NotifyPropertyChanged("CatalogName");
            }
        }

        private String catalogNameField; 

        /// <summary>
        /// brandName property
        /// </summary>
		[StringLength(64)]
        [Description("The equipment's brand name .")]
		[XmlElement("brandName")]
        public String BrandName {
            get {
                return brandNameField;
            } 
            set {
                brandNameField = value;
                NotifyPropertyChanged("BrandName");
            }
        }

        private String brandNameField; 

        /// <summary>
        /// modelType property
        /// </summary>
		[StringLength(64)]
        [Description("The equipment's model type.")]
		[XmlElement("modelType")]
        public String ModelType {
            get {
                return modelTypeField;
            } 
            set {
                modelTypeField = value;
                NotifyPropertyChanged("ModelType");
            }
        }

        private String modelTypeField; 

        /// <summary>
        /// series property
        /// </summary>
		[StringLength(64)]
        [Description("Series number")]
		[XmlElement("series")]
        public String Series {
            get {
                return seriesField;
            } 
            set {
                seriesField = value;
                NotifyPropertyChanged("Series");
            }
        }

        private String seriesField; 

        /// <summary>
        /// isSerialized property
        /// </summary>
		[Description("a flag indicates the equipment has serialNumber.")]
		[XmlElement("isSerialized")]
        public Boolean? IsSerialized {
            get {
                return isSerializedField;
            } 
            set {
                isSerializedField = value;
                 this.IsSerializedSpecified = true;
                NotifyPropertyChanged("IsSerialized");
            }
        }

        private Boolean? isSerializedField; 

        /// <summary>
        /// isSerializedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsSerializedSpecified {
            get {
                return isSerializedSpecifiedField;
            } 
            set {
                isSerializedSpecifiedField = value;
                NotifyPropertyChanged("IsSerializedSpecified");
            }
        }

        private Boolean isSerializedSpecifiedField; 

        /// <summary>
        /// serialNumber property
        /// </summary>
		[StringLength(64)]
        [Description("serial number")]
		[XmlElement("serialNumber")]
        public String SerialNumber {
            get {
                return serialNumberField;
            } 
            set {
                serialNumberField = value;
                NotifyPropertyChanged("SerialNumber");
            }
        }

        private String serialNumberField; 

        /// <summary>
        /// partNo property
        /// </summary>
		[StringLength(64)]
        [Description("Number that identifies this part.")]
		[XmlElement("partNo")]
        public String PartNo {
            get {
                return partNoField;
            } 
            set {
                partNoField = value;
                NotifyPropertyChanged("PartNo");
            }
        }

        private String partNoField; 

        /// <summary>
        /// surfaceCondition property
        /// </summary>
		[StringLength(64)]
        [Description("surface condition.")]
		[XmlElement("surfaceCondition")]
        public String SurfaceCondition {
            get {
                return surfaceConditionField;
            } 
            set {
                surfaceConditionField = value;
                NotifyPropertyChanged("SurfaceCondition");
            }
        }

        private String surfaceConditionField; 

        /// <summary>
        /// material property
        /// </summary>
		[StringLength(64)]
        [Description("Material that equipment is made from")]
		[XmlElement("material")]
        public String Material {
            get {
                return materialField;
            } 
            set {
                materialField = value;
                NotifyPropertyChanged("Material");
            }
        }

        private String materialField; 

        /// <summary>
        /// grade property
        /// </summary>
		[Description("Grade level of this material.")]
		[XmlElement("grade")]
        public GradeType? Grade {
            get {
                return gradeField;
            } 
            set {
                gradeField = value;
                 this.GradeSpecified = true;
                NotifyPropertyChanged("Grade");
            }
        }

        private GradeType? gradeField; 

        /// <summary>
        /// gradeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean GradeSpecified {
            get {
                return gradeSpecifiedField;
            } 
            set {
                gradeSpecifiedField = value;
                NotifyPropertyChanged("GradeSpecified");
            }
        }

        private Boolean gradeSpecifiedField; 

        /// <summary>
        /// unitWeight property
        /// </summary>
		[Description("The weight per length of this equipment.")]
        [ComponentElement]
		[XmlElement("unitWeight")]
        public MassPerLengthMeasure UnitWeight {
            get {
                return unitWeightField;
            } 
            set {
                unitWeightField = value;
                NotifyPropertyChanged("UnitWeight");
            }
        }

        private MassPerLengthMeasure unitWeightField; 

        /// <summary>
        /// coatingLinerapplied property
        /// </summary>
		[Description("Flag indicating whether equipment has coating")]
		[XmlElement("coatingLinerapplied")]
        public Boolean? CoatingLinerapplied {
            get {
                return coatingLinerappliedField;
            } 
            set {
                coatingLinerappliedField = value;
                 this.CoatingLinerappliedSpecified = true;
                NotifyPropertyChanged("CoatingLinerapplied");
            }
        }

        private Boolean? coatingLinerappliedField; 

        /// <summary>
        /// coatingLinerappliedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CoatingLinerappliedSpecified {
            get {
                return coatingLinerappliedSpecifiedField;
            } 
            set {
                coatingLinerappliedSpecifiedField = value;
                NotifyPropertyChanged("CoatingLinerappliedSpecified");
            }
        }

        private Boolean coatingLinerappliedSpecifiedField; 

        /// <summary>
        /// outsideCoating property
        /// </summary>
		[Description("Equipment's outside coating based on enumeration value")]
		[XmlElement("outsideCoating")]
        public Coating? OutsideCoating {
            get {
                return outsideCoatingField;
            } 
            set {
                outsideCoatingField = value;
                 this.OutsideCoatingSpecified = true;
                NotifyPropertyChanged("OutsideCoating");
            }
        }

        private Coating? outsideCoatingField; 

        /// <summary>
        /// outsideCoatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean OutsideCoatingSpecified {
            get {
                return outsideCoatingSpecifiedField;
            } 
            set {
                outsideCoatingSpecifiedField = value;
                NotifyPropertyChanged("OutsideCoatingSpecified");
            }
        }

        private Boolean outsideCoatingSpecifiedField; 

        /// <summary>
        /// insideCoating property
        /// </summary>
		[Description("Equipment's inner coating based on enumeration value")]
		[XmlElement("insideCoating")]
        public Coating? InsideCoating {
            get {
                return insideCoatingField;
            } 
            set {
                insideCoatingField = value;
                 this.InsideCoatingSpecified = true;
                NotifyPropertyChanged("InsideCoating");
            }
        }

        private Coating? insideCoatingField; 

        /// <summary>
        /// insideCoatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean InsideCoatingSpecified {
            get {
                return insideCoatingSpecifiedField;
            } 
            set {
                insideCoatingSpecifiedField = value;
                NotifyPropertyChanged("InsideCoatingSpecified");
            }
        }

        private Boolean insideCoatingSpecifiedField; 

        /// <summary>
        /// unitLength property
        /// </summary>
		[Description("The length of this equipment.")]
        [ComponentElement]
		[XmlElement("unitLength")]
        public LengthMeasure UnitLength {
            get {
                return unitLengthField;
            } 
            set {
                unitLengthField = value;
                NotifyPropertyChanged("UnitLength");
            }
        }

        private LengthMeasure unitLengthField; 

        /// <summary>
        /// majorOD property
        /// </summary>
		[Description("The major outside diameter of this equipment.")]
        [ComponentElement]
		[XmlElement("majorOD")]
        public LengthMeasure MajorOD {
            get {
                return majorODField;
            } 
            set {
                majorODField = value;
                NotifyPropertyChanged("MajorOD");
            }
        }

        private LengthMeasure majorODField; 

        /// <summary>
        /// minorOD property
        /// </summary>
		[Description("The minor outside diameter of this equipment.")]
        [ComponentElement]
		[XmlElement("minorOD")]
        public LengthMeasure MinorOD {
            get {
                return minorODField;
            } 
            set {
                minorODField = value;
                NotifyPropertyChanged("MinorOD");
            }
        }

        private LengthMeasure minorODField; 

        /// <summary>
        /// OD property
        /// </summary>
		[Description("The outside diameter of this equipment.")]
        [ComponentElement]
		[XmlElement("OD")]
        public LengthMeasure OD {
            get {
                return ODField;
            } 
            set {
                ODField = value;
                NotifyPropertyChanged("OD");
            }
        }

        private LengthMeasure ODField; 

        /// <summary>
        /// MaxOD property
        /// </summary>
		[Description("The maximum outside diameter of this equipment.")]
        [ComponentElement]
		[XmlElement("MaxOD")]
        public LengthMeasure MaxOD {
            get {
                return MaxODField;
            } 
            set {
                MaxODField = value;
                NotifyPropertyChanged("MaxOD");
            }
        }

        private LengthMeasure MaxODField; 

        /// <summary>
        /// MinOD property
        /// </summary>
		[Description("The minimum outside diameter of this equipment.")]
        [ComponentElement]
		[XmlElement("MinOD")]
        public LengthMeasure MinOD {
            get {
                return MinODField;
            } 
            set {
                MinODField = value;
                NotifyPropertyChanged("MinOD");
            }
        }

        private LengthMeasure MinODField; 

        /// <summary>
        /// majorID property
        /// </summary>
		[Description("The major inside diameter of this equipment.")]
        [ComponentElement]
		[XmlElement("majorID")]
        public LengthMeasure MajorID {
            get {
                return majorIDField;
            } 
            set {
                majorIDField = value;
                NotifyPropertyChanged("MajorID");
            }
        }

        private LengthMeasure majorIDField; 

        /// <summary>
        /// minorID property
        /// </summary>
		[Description("The minor inside diameter of this equipment.")]
        [ComponentElement]
		[XmlElement("minorID")]
        public LengthMeasure MinorID {
            get {
                return minorIDField;
            } 
            set {
                minorIDField = value;
                NotifyPropertyChanged("MinorID");
            }
        }

        private LengthMeasure minorIDField; 

        /// <summary>
        /// ID property
        /// </summary>
		[Description("The inside diameter of this equipment.")]
        [ComponentElement]
		[XmlElement("ID")]
        public LengthMeasure ID {
            get {
                return IDField;
            } 
            set {
                IDField = value;
                NotifyPropertyChanged("ID");
            }
        }

        private LengthMeasure IDField; 

        /// <summary>
        /// MaxID property
        /// </summary>
		[Description("The maximum inside diameter of this equipment.")]
        [ComponentElement]
		[XmlElement("MaxID")]
        public LengthMeasure MaxID {
            get {
                return MaxIDField;
            } 
            set {
                MaxIDField = value;
                NotifyPropertyChanged("MaxID");
            }
        }

        private LengthMeasure MaxIDField; 

        /// <summary>
        /// MinID property
        /// </summary>
		[Description("The minimum inside diameter of this equipment.")]
        [ComponentElement]
		[XmlElement("MinID")]
        public LengthMeasure MinID {
            get {
                return MinIDField;
            } 
            set {
                MinIDField = value;
                NotifyPropertyChanged("MinID");
            }
        }

        private LengthMeasure MinIDField; 

        /// <summary>
        /// drift property
        /// </summary>
		[Description("The drift diameter is the minimum inside diameter of pipe through which another tool or string can be pulled.")]
        [ComponentElement]
		[XmlElement("drift")]
        public LengthMeasure Drift {
            get {
                return driftField;
            } 
            set {
                driftField = value;
                NotifyPropertyChanged("Drift");
            }
        }

        private LengthMeasure driftField; 

        /// <summary>
        /// nominalSize property
        /// </summary>
		[Description("The nominal size of this equipment.")]
        [ComponentElement]
		[XmlElement("nominalSize")]
        public LengthMeasure NominalSize {
            get {
                return nominalSizeField;
            } 
            set {
                nominalSizeField = value;
                NotifyPropertyChanged("NominalSize");
            }
        }

        private LengthMeasure nominalSizeField; 

        /// <summary>
        /// nameService property
        /// </summary>
		[StringLength(64)]
        [Description("sweet or sour service.")]
		[XmlElement("nameService")]
        public String NameService {
            get {
                return nameServiceField;
            } 
            set {
                nameServiceField = value;
                NotifyPropertyChanged("NameService");
            }
        }

        private String nameServiceField; 

        /// <summary>
        /// description property
        /// </summary>
		[StringLength(4000)]
        [Description("The description of this equipment.")]
		[XmlElement("description")]
        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 

        /// <summary>
        /// descriptionPermanent property
        /// </summary>
		[StringLength(4000)]
        [Description("The description of this equipment to be permanently kept.")]
		[XmlElement("descriptionPermanent")]
        public String DescriptionPermanent {
            get {
                return descriptionPermanentField;
            } 
            set {
                descriptionPermanentField = value;
                NotifyPropertyChanged("DescriptionPermanent");
            }
        }

        private String descriptionPermanentField; 

        /// <summary>
        /// remark property
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks about this equipment property.")]
		[XmlElement("remark")]
        public String Remark {
            get {
                return remarkField;
            } 
            set {
                remarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private String remarkField; 

        /// <summary>
        /// Property description
        /// </summary>
		[Description("Property description")]
        [RecurringElement]
		[XmlElement("property")]
        public List<ExtPropNameValue> Property {
            get {
                return propertyField;
            } 
            set {
                propertyField = value;
                NotifyPropertyChanged("Property");
            }
        }

         /// <summary>
         /// bool to indicate if Property has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PropertySpecified
         {
             get {
             if(propertyField!=null)
                 return propertyField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtPropNameValue> propertyField; 

        /// <summary>
        /// Describes the slot in equipment.
        /// </summary>
		[Description("Describes the slot in equipment.")]
        [RecurringElement]
		[XmlElement("slotAsManufactured")]
        public List<PerfSlot> SlotAsManufactured {
            get {
                return slotAsManufacturedField;
            } 
            set {
                slotAsManufacturedField = value;
                NotifyPropertyChanged("SlotAsManufactured");
            }
        }

         /// <summary>
         /// bool to indicate if SlotAsManufactured has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SlotAsManufacturedSpecified
         {
             get {
             if(slotAsManufacturedField!=null)
                 return slotAsManufacturedField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerfSlot> slotAsManufacturedField; 

        /// <summary>
        /// Describes the hole in equipment.
        /// </summary>
		[Description("Describes the hole in equipment.")]
        [RecurringElement]
		[XmlElement("holeAsManufactured")]
        public List<PerfHole> HoleAsManufactured {
            get {
                return holeAsManufacturedField;
            } 
            set {
                holeAsManufacturedField = value;
                NotifyPropertyChanged("HoleAsManufactured");
            }
        }

         /// <summary>
         /// bool to indicate if HoleAsManufactured has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool HoleAsManufacturedSpecified
         {
             get {
             if(holeAsManufacturedField!=null)
                 return holeAsManufacturedField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerfHole> holeAsManufacturedField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Geology features found in the location of the borehole string.  
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_geologyFeature", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Geology features found in the location of the borehole string.  ")]
    public partial class GeologyFeature : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Name of the feature
        /// </summary>
		[StringLength(64)]
        [Description("Name of the feature")]
		[XmlElement("name")]
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

        /// <summary>
        /// Aquifer or reservoir
        /// </summary>
		[Description("Aquifer or reservoir")]
		[XmlElement("geologyType")]
        public GeologyType? GeologyType {
            get {
                return geologyTypeField;
            } 
            set {
                geologyTypeField = value;
                 this.GeologyTypeSpecified = true;
                NotifyPropertyChanged("GeologyType");
            }
        }

        private GeologyType? geologyTypeField; 

        /// <summary>
        /// geologyTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean GeologyTypeSpecified {
            get {
                return geologyTypeSpecifiedField;
            } 
            set {
                geologyTypeSpecifiedField = value;
                NotifyPropertyChanged("GeologyTypeSpecified");
            }
        }

        private Boolean geologyTypeSpecifiedField; 

        /// <summary>
        /// Measured depth at top of interval.
        /// </summary>
		[Description("Measured depth at top of interval.")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at base of interval.
        /// </summary>
		[Description("Measured depth at base of interval.")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth at top of the section.
        /// </summary>
		[Description("True vertical depth at top of the section.")]
        [ComponentElement]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth at bottom of the section.
        /// </summary>
		[Description("True vertical depth at bottom of the section.")]
        [ComponentElement]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// True vertical depth at base of interval.
        /// </summary>
		[Description("True vertical depth at base of interval.")]
        [ComponentElement]
		[XmlElement("tvdBase")]
        public WellVerticalDepthCoord TvdBase {
            get {
                return tvdBaseField;
            } 
            set {
                tvdBaseField = value;
                NotifyPropertyChanged("TvdBase");
            }
        }

        private WellVerticalDepthCoord tvdBaseField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on the borehole
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_borehole", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on the borehole")]
    public partial class Borehole : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of borehole
        /// </summary>
		[StringLength(64)]
        [Description("The name of borehole")]
		[XmlElement("name")]
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

        /// <summary>
        /// Type of borehole. etc. Cavern, cavity, NormalBorehole,UnderReam
        /// </summary>
		[Description("Type of borehole. etc. Cavern, cavity, NormalBorehole,UnderReam")]
		[XmlElement("typeBorehole")]
        public BoreholeType? TypeBorehole {
            get {
                return typeBoreholeField;
            } 
            set {
                typeBoreholeField = value;
                 this.TypeBoreholeSpecified = true;
                NotifyPropertyChanged("TypeBorehole");
            }
        }

        private BoreholeType? typeBoreholeField; 

        /// <summary>
        /// typeBoreholeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeBoreholeSpecified {
            get {
                return typeBoreholeSpecifiedField;
            } 
            set {
                typeBoreholeSpecifiedField = value;
                NotifyPropertyChanged("TypeBoreholeSpecified");
            }
        }

        private Boolean typeBoreholeSpecifiedField; 

        /// <summary>
        /// Event reference pointing to the eventledger.
        /// </summary>
		[Description("Event reference pointing to the eventledger.")]
        [ComponentElement]
		[XmlElement("equipmentEventHistory")]
        public EventInfo EquipmentEventHistory {
            get {
                return equipmentEventHistoryField;
            } 
            set {
                equipmentEventHistoryField = value;
                NotifyPropertyChanged("EquipmentEventHistory");
            }
        }

        private EventInfo equipmentEventHistoryField; 

        /// <summary>
        /// Measured depth at Top of Interval
        /// </summary>
		[Description("Measured depth at Top of Interval")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at bottom of the section
        /// </summary>
		[Description("Measured depth at bottom of the section")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth at top of the section
        /// </summary>
		[Description("True vertical depth at top of the section")]
        [ComponentElement]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth at bottom of the section
        /// </summary>
		[Description("True vertical depth at bottom of the section")]
        [ComponentElement]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// Borehole diameter
        /// </summary>
		[Description("Borehole diameter")]
        [ComponentElement]
		[XmlElement("diaBorehole")]
        public LengthMeasure DiaBorehole {
            get {
                return diaBoreholeField;
            } 
            set {
                diaBoreholeField = value;
                NotifyPropertyChanged("DiaBorehole");
            }
        }

        private LengthMeasure diaBoreholeField; 

        /// <summary>
        /// The description of this equipment to be permanently kept.
        /// </summary>
		[StringLength(4000)]
        [Description("The description of this equipment to be permanently kept.")]
		[XmlElement("descriptionPermanent")]
        public String DescriptionPermanent {
            get {
                return descriptionPermanentField;
            } 
            set {
                descriptionPermanentField = value;
                NotifyPropertyChanged("DescriptionPermanent");
            }
        }

        private String descriptionPermanentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_boreholeString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_boreholeString", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_boreholeString xsd type.")]
    public partial class BoreholeString : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the downhole equipment.
        /// </summary>
		[StringLength(64)]
        [Description("Human recognizable context for the downhole equipment.")]
		[XmlElement("nameWellbore")]
        public String NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private String nameWellboreField; 

        /// <summary>
        ///  The name of the borehole String 
        /// </summary>
		[StringLength(64)]
        [Description("The name of the borehole String")]
		[XmlElement("name")]
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

        /// <summary>
        ///  The collection of boreholes 
        /// </summary>
		[Description("The collection of boreholes")]
        [RecurringElement]
		[XmlElement("borehole")]
        public List<Borehole> Borehole {
            get {
                return boreholeField;
            } 
            set {
                boreholeField = value;
                NotifyPropertyChanged("Borehole");
            }
        }

         /// <summary>
         /// bool to indicate if Borehole has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeSpecified
         {
             get {
             if(boreholeField!=null)
                 return boreholeField.Count>0?true:false;
             else return false;
             }
         }
        private List<Borehole> boreholeField; 

        /// <summary>
        /// Geology feature information 
        /// </summary>
		[Description("Geology feature information")]
        [RecurringElement]
		[XmlElement("geologyFeature")]
        public List<GeologyFeature> GeologyFeature {
            get {
                return geologyFeatureField;
            } 
            set {
                geologyFeatureField = value;
                NotifyPropertyChanged("GeologyFeature");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeature has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureSpecified
         {
             get {
             if(geologyFeatureField!=null)
                 return geologyFeatureField.Count>0?true:false;
             else return false;
             }
         }
        private List<GeologyFeature> geologyFeatureField; 

        /// <summary>
        ///  The borehole accessories. 
        /// </summary>
		[Description("The borehole accessories.")]
        [RecurringElement]
		[XmlArrayItem("accessory")]
        [XmlArray("accessories")]
        public List<StringEquipment> Accessories {
            get {
                return accessoriesField;
            } 
            set {
                accessoriesField = value;
                NotifyPropertyChanged("Accessories");
            }
        }

         /// <summary>
         /// bool to indicate if Accessories has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AccessoriesSpecified
         {
             get {
             if(accessoriesField!=null)
                 return accessoriesField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> accessoriesField; 

		/// <summary>
        /// Unique identifier for the wellbore.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore.")]
        [XmlAttribute("uidWellbore")]
		
        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_stringEquipment xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stringEquipment", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_stringEquipment xsd type.")]
    public partial class StringEquipment : Object, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of the equipment. Enumeration is defined in cs_equipmentCatalog.xsd. "Optional" is for expansion purpose, strong suggest that only ignore it if the equipment type could not found from equipmentType definition.
        /// </summary>
		[Description("The type of the equipment.  Enumeration is defined in cs_equipmentCatalog.xsd. \"Optional\" is for expansion purpose, strong suggest that only ignore it if the equipment type could not found from equipmentType definition.")]
		[XmlElement("equipmentType")]
        public EquipmentType? EquipmentType {
            get {
                return equipmentTypeField;
            } 
            set {
                equipmentTypeField = value;
                 this.EquipmentTypeSpecified = true;
                NotifyPropertyChanged("EquipmentType");
            }
        }

        private EquipmentType? equipmentTypeField; 

        /// <summary>
        /// equipmentTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EquipmentTypeSpecified {
            get {
                return equipmentTypeSpecifiedField;
            } 
            set {
                equipmentTypeSpecifiedField = value;
                NotifyPropertyChanged("EquipmentTypeSpecified");
            }
        }

        private Boolean equipmentTypeSpecifiedField; 

        /// <summary>
        /// The name of the equipment. Length of this element is 256 characters.
        /// </summary>
		[StringLength(256)]
        [Description("The name of the equipment.  Length of this element is 256 characters.")]
		[XmlElement("name")]
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

        /// <summary>
        /// History of event tied to this equipment
        /// </summary>
		[Description("History of event tied to this equipment")]
        [RecurringElement]
		[XmlElement("equipmentEventHistory")]
        public List<EventInfo> EquipmentEventHistory {
            get {
                return equipmentEventHistoryField;
            } 
            set {
                equipmentEventHistoryField = value;
                NotifyPropertyChanged("EquipmentEventHistory");
            }
        }

         /// <summary>
         /// bool to indicate if EquipmentEventHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EquipmentEventHistorySpecified
         {
             get {
             if(equipmentEventHistoryField!=null)
                 return equipmentEventHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<EventInfo> equipmentEventHistoryField; 

        /// <summary>
        /// Defines a sequence number and with an optional description attribute
        /// </summary>
		[Description("Defines a sequence number and with an optional description attribute")]
        [ComponentElement]
		[XmlElement("orderOfObject")]
        public ObjectSequence OrderOfObject {
            get {
                return orderOfObjectField;
            } 
            set {
                orderOfObjectField = value;
                NotifyPropertyChanged("OrderOfObject");
            }
        }

        private ObjectSequence orderOfObjectField; 

        /// <summary>
        /// The status of the piece of equipment.
        /// </summary>
		[StringLength(64)]
        [Description("The status of the piece of equipment.")]
		[XmlElement("status")]
        public String Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                NotifyPropertyChanged("Status");
            }
        }

        private String statusField; 

        /// <summary>
        /// The well run No
        /// </summary>
		[StringLength(64)]
        [Description("The well run No")]
		[XmlElement("runNo")]
        public String RunNo {
            get {
                return runNoField;
            } 
            set {
                runNoField = value;
                NotifyPropertyChanged("RunNo");
            }
        }

        private String runNoField; 

        /// <summary>
        /// The days that the equipment has run.
        /// </summary>
		[Description("The days that the equipment has run.")]
        [ComponentElement]
		[XmlElement("previousRunDays")]
        public TimeMeasure PreviousRunDays {
            get {
                return previousRunDaysField;
            } 
            set {
                previousRunDaysField = value;
                NotifyPropertyChanged("PreviousRunDays");
            }
        }

        private TimeMeasure previousRunDaysField; 

        /// <summary>
        /// Object condition at installation
        /// </summary>
		[StringLength(64)]
        [Description("Object condition at installation")]
		[XmlElement("objectCondition")]
        public String ObjectCondition {
            get {
                return objectConditionField;
            } 
            set {
                objectConditionField = value;
                NotifyPropertyChanged("ObjectCondition");
            }
        }

        private String objectConditionField; 

        /// <summary>
        /// Object surface condition
        /// </summary>
		[StringLength(64)]
        [Description("Object surface condition")]
		[XmlElement("surfaceCondition")]
        public String SurfaceCondition {
            get {
                return surfaceConditionField;
            } 
            set {
                surfaceConditionField = value;
                NotifyPropertyChanged("SurfaceCondition");
            }
        }

        private String surfaceConditionField; 

        /// <summary>
        /// The count number of the same equipment. The default is 1. In some cases, multiple pieces group into one component.
        /// </summary>
		[Description("The count number of the same equipment. The default is 1.  In some cases, multiple pieces group into one component.")]
		[XmlElement("count")]
        public Int16? Count {
            get {
                return countField;
            } 
            set {
                countField = value;
                 this.CountSpecified = true;
                NotifyPropertyChanged("Count");
            }
        }

        private Int16? countField; 

        /// <summary>
        /// countSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CountSpecified {
            get {
                return countSpecifiedField;
            } 
            set {
                countSpecifiedField = value;
                NotifyPropertyChanged("CountSpecified");
            }
        }

        private Boolean countSpecifiedField; 

        /// <summary>
        /// The total length of the equipment. This is NOT length per unit. This is the length of unit stored at equipmentset's equipment information section. 
        /// </summary>
		[Description("The total length of the equipment.  This is NOT length per unit.                     This is the length of unit stored at equipmentset's equipment information section.")]
        [ComponentElement]
		[XmlElement("length")]
        public LengthMeasure Length {
            get {
                return lengthField;
            } 
            set {
                lengthField = value;
                NotifyPropertyChanged("Length");
            }
        }

        private LengthMeasure lengthField; 

        /// <summary>
        /// Measured depth at top of interval.
        /// </summary>
		[Description("Measured depth at top of interval.")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at base of interval.
        /// </summary>
		[Description("Measured depth at base of interval.")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth at top of the section.
        /// </summary>
		[Description("True vertical depth at top of the section.")]
        [ComponentElement]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth at bottom of the section.
        /// </summary>
		[Description("True vertical depth at bottom of the section.")]
        [ComponentElement]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// True vertical depth at base of interval.
        /// </summary>
		[Description("True vertical depth at base of interval.")]
        [ComponentElement]
		[XmlElement("tvdBase")]
        public WellVerticalDepthCoord TvdBase {
            get {
                return tvdBaseField;
            } 
            set {
                tvdBaseField = value;
                NotifyPropertyChanged("TvdBase");
            }
        }

        private WellVerticalDepthCoord tvdBaseField; 

        /// <summary>
        /// Flag indicating whether this component is inside the string or not .
        /// </summary>
		[Description("Flag indicating whether this component is inside the string or not .")]
		[XmlElement("outsideString")]
        public Boolean? OutsideString {
            get {
                return outsideStringField;
            } 
            set {
                outsideStringField = value;
                 this.OutsideStringSpecified = true;
                NotifyPropertyChanged("OutsideString");
            }
        }

        private Boolean? outsideStringField; 

        /// <summary>
        /// outsideStringSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean OutsideStringSpecified {
            get {
                return outsideStringSpecifiedField;
            } 
            set {
                outsideStringSpecifiedField = value;
                NotifyPropertyChanged("OutsideStringSpecified");
            }
        }

        private Boolean outsideStringSpecifiedField; 

        /// <summary>
        /// The list of components contained in the equipment
        /// </summary>
		[Description("The list of components contained in the equipment")]
        [RecurringElement]
		[XmlElement("insideComponent")]
        public List<RefContainer> InsideComponent {
            get {
                return insideComponentField;
            } 
            set {
                insideComponentField = value;
                NotifyPropertyChanged("InsideComponent");
            }
        }

         /// <summary>
         /// bool to indicate if InsideComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InsideComponentSpecified
         {
             get {
             if(insideComponentField!=null)
                 return insideComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<RefContainer> insideComponentField; 

        /// <summary>
        /// The list of components outside of this piece of equipment
        /// </summary>
		[Description("The list of components outside of this piece of equipment")]
        [RecurringElement]
		[XmlElement("outsideComponent")]
        public List<RefContainer> OutsideComponent {
            get {
                return outsideComponentField;
            } 
            set {
                outsideComponentField = value;
                NotifyPropertyChanged("OutsideComponent");
            }
        }

         /// <summary>
         /// bool to indicate if OutsideComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OutsideComponentSpecified
         {
             get {
             if(outsideComponentField!=null)
                 return outsideComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<RefContainer> outsideComponentField; 

        /// <summary>
        /// Max Tensile Strength 
        /// </summary>
		[Description("Max Tensile Strength")]
        [ComponentElement]
		[XmlElement("tensileMax")]
        public ForceMeasure TensileMax {
            get {
                return tensileMaxField;
            } 
            set {
                tensileMaxField = value;
                NotifyPropertyChanged("TensileMax");
            }
        }

        private ForceMeasure tensileMaxField; 

        /// <summary>
        /// Pressure Rating
        /// </summary>
		[Description("Pressure  Rating")]
        [ComponentElement]
		[XmlElement("presRating")]
        public PressureMeasure PresRating {
            get {
                return presRatingField;
            } 
            set {
                presRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure presRatingField; 

        /// <summary>
        /// Collapse Pressure 
        /// </summary>
		[Description("Collapse Pressure")]
        [ComponentElement]
		[XmlElement("presCollapse")]
        public PressureMeasure PresCollapse {
            get {
                return presCollapseField;
            } 
            set {
                presCollapseField = value;
                NotifyPropertyChanged("PresCollapse");
            }
        }

        private PressureMeasure presCollapseField; 

        /// <summary>
        /// Burst Pressure 
        /// </summary>
		[Description("Burst Pressure")]
        [ComponentElement]
		[XmlElement("presBurst")]
        public PressureMeasure PresBurst {
            get {
                return presBurstField;
            } 
            set {
                presBurstField = value;
                NotifyPropertyChanged("PresBurst");
            }
        }

        private PressureMeasure presBurstField; 

        /// <summary>
        /// heat rating 
        /// </summary>
		[Description("heat rating")]
        [ComponentElement]
		[XmlElement("heatRating")]
        public ThermodynamicTemperatureMeasure HeatRating {
            get {
                return heatRatingField;
            } 
            set {
                heatRatingField = value;
                NotifyPropertyChanged("HeatRating");
            }
        }

        private ThermodynamicTemperatureMeasure heatRatingField; 

        /// <summary>
        ///  Flag indicating the equipment has line connected to surface. 
        /// </summary>
		[Description("Flag indicating the equipment has line connected to surface.")]
		[XmlElement("isLinetoSurface")]
        public Boolean? IsLinetoSurface {
            get {
                return isLinetoSurfaceField;
            } 
            set {
                isLinetoSurfaceField = value;
                 this.IsLinetoSurfaceSpecified = true;
                NotifyPropertyChanged("IsLinetoSurface");
            }
        }

        private Boolean? isLinetoSurfaceField; 

        /// <summary>
        /// isLinetoSurfaceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsLinetoSurfaceSpecified {
            get {
                return isLinetoSurfaceSpecifiedField;
            } 
            set {
                isLinetoSurfaceSpecifiedField = value;
                NotifyPropertyChanged("IsLinetoSurfaceSpecified");
            }
        }

        private Boolean isLinetoSurfaceSpecifiedField; 

        /// <summary>
        ///  Flag indicating equipment is centralized 
        /// </summary>
		[Description("Flag indicating equipment is centralized")]
		[XmlElement("isCentralized")]
        public Boolean? IsCentralized {
            get {
                return isCentralizedField;
            } 
            set {
                isCentralizedField = value;
                 this.IsCentralizedSpecified = true;
                NotifyPropertyChanged("IsCentralized");
            }
        }

        private Boolean? isCentralizedField; 

        /// <summary>
        /// isCentralizedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsCentralizedSpecified {
            get {
                return isCentralizedSpecifiedField;
            } 
            set {
                isCentralizedSpecifiedField = value;
                NotifyPropertyChanged("IsCentralizedSpecified");
            }
        }

        private Boolean isCentralizedSpecifiedField; 

        /// <summary>
        ///  Flag indicating scratchers have been added to the equipment. 
        /// </summary>
		[Description("Flag indicating scratchers have been added to the equipment.")]
		[XmlElement("hasScratchers")]
        public Boolean? HasScratchers {
            get {
                return hasScratchersField;
            } 
            set {
                hasScratchersField = value;
                 this.HasScratchersSpecified = true;
                NotifyPropertyChanged("HasScratchers");
            }
        }

        private Boolean? hasScratchersField; 

        /// <summary>
        /// hasScratchersSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean HasScratchersSpecified {
            get {
                return hasScratchersSpecifiedField;
            } 
            set {
                hasScratchersSpecifiedField = value;
                NotifyPropertyChanged("HasScratchersSpecified");
            }
        }

        private Boolean hasScratchersSpecifiedField; 

        /// <summary>
        ///  Describes the next component connected. 
        /// </summary>
		[Description("Describes the next component connected.")]
        [RecurringElement]
		[XmlElement("connectionNext")]
        public List<EquipmentConnection> ConnectionNext {
            get {
                return connectionNextField;
            } 
            set {
                connectionNextField = value;
                NotifyPropertyChanged("ConnectionNext");
            }
        }

         /// <summary>
         /// bool to indicate if ConnectionNext has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConnectionNextSpecified
         {
             get {
             if(connectionNextField!=null)
                 return connectionNextField.Count>0?true:false;
             else return false;
             }
         }
        private List<EquipmentConnection> connectionNextField; 

        /// <summary>
        ///  Describes the assembly connected. 
        /// </summary>
		[Description("Describes the assembly connected.")]
        [RecurringElement]
		[XmlArrayItem("part")]
        [XmlArray("assembly")]
        public List<StringEquipment> Assembly {
            get {
                return assemblyField;
            } 
            set {
                assemblyField = value;
                NotifyPropertyChanged("Assembly");
            }
        }

         /// <summary>
         /// bool to indicate if Assembly has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AssemblySpecified
         {
             get {
             if(assemblyField!=null)
                 return assemblyField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> assemblyField; 

        /// <summary>
        /// reference the perforated hole in equipment after perforation event.
        /// </summary>
		[Description("reference the perforated hole in equipment after perforation event.")]
        [RecurringElement]
		[XmlElement("perforationSetRefID")]
        public List<String> PerforationSetRefID {
            get {
                return perforationSetRefIDField;
            } 
            set {
                perforationSetRefIDField = value;
                NotifyPropertyChanged("PerforationSetRefID");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSetRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetRefIDSpecified
         {
             get {
             if(perforationSetRefIDField!=null)
                 return perforationSetRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<String> perforationSetRefIDField; 

        /// <summary>
        /// Remarks on the equipment stored permanently.
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks on the equipment stored permanently.")]
		[XmlElement("permanentRemarks")]
        public String PermanentRemarks {
            get {
                return permanentRemarksField;
            } 
            set {
                permanentRemarksField = value;
                NotifyPropertyChanged("PermanentRemarks");
            }
        }

        private String permanentRemarksField; 

        /// <summary>
        /// Remarks on usage of this equipment.
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks on usage of this equipment.")]
		[XmlElement("usageComment")]
        public String UsageComment {
            get {
                return usageCommentField;
            } 
            set {
                usageCommentField = value;
                NotifyPropertyChanged("UsageComment");
            }
        }

        private String usageCommentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects.
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 

		/// <summary>
        /// Unique reference for the equipment.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique reference for the equipment.")]
        [XmlAttribute("equipmentRefUID")]
		
        public String EquipmentRefUID {
            get {
                return equipmentRefUIDField;
            } 
            set {
                equipmentRefUIDField = value;
                NotifyPropertyChanged("EquipmentRefUID");
            }
        }

        private String equipmentRefUIDField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on containing or contained component  
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refContainer", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information on containing or contained component  ")]
    public partial class RefContainer : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DownholeString reference id 
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("DownholeString reference id")]
		[XmlElement("stringRefID")]
        public String StringRefID {
            get {
                return stringRefIDField;
            } 
            set {
                stringRefIDField = value;
                NotifyPropertyChanged("StringRefID");
            }
        }

        private String stringRefIDField; 

        /// <summary>
        /// Equipment reference id 
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Equipment reference id")]
		[XmlElement("equipmentRefID")]
        public String EquipmentRefID {
            get {
                return equipmentRefIDField;
            } 
            set {
                equipmentRefIDField = value;
                NotifyPropertyChanged("EquipmentRefID");
            }
        }

        private String equipmentRefIDField; 

        /// <summary>
        /// Reference to the equipment for this accessory 
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Reference to the equipment for this accessory")]
		[XmlElement("accesoryEquipmentRefID")]
        public String AccesoryEquipmentRefID {
            get {
                return accesoryEquipmentRefIDField;
            } 
            set {
                accesoryEquipmentRefIDField = value;
                NotifyPropertyChanged("AccesoryEquipmentRefID");
            }
        }

        private String accesoryEquipmentRefIDField; 

        /// <summary>
        /// Comment on this container reference
        /// </summary>
		[Required]
        [StringLength(4000)]
        [Description("Comment on this container reference")]
		[XmlElement("comment")]
        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information detailing the connection between 2 components
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_equipmentConnection", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information detailing the connection between 2 components")]
    public partial class EquipmentConnection : Connection, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// measurement of radial offset 
        /// </summary>
		[Description("measurement of radial offset")]
        [ComponentElement]
		[XmlElement("radialOffset")]
        public LengthMeasure RadialOffset {
            get {
                return radialOffsetField;
            } 
            set {
                radialOffsetField = value;
                NotifyPropertyChanged("RadialOffset");
            }
        }

        private LengthMeasure radialOffsetField; 

        /// <summary>
        /// The connection type of casing
        /// </summary>
        [XmlElement("casingConnectionType")]
        public CasingConnectionType? CasingConnectionType {
            get {
                return casingConnectionTypeField;
            } 
            set {
                casingConnectionTypeField = value;
                CasingConnectionTypeSpecified = (value!=null);
                NotifyPropertyChanged("CasingConnectionType");
            }
        }

        private CasingConnectionType? casingConnectionTypeField; 
        private bool casingConnectionTypeSpecified = false; 

        /// <summary>
        /// bool to indicate if CasingConnectionType has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CasingConnectionTypeSpecified
        {
            get {
                return casingConnectionTypeSpecified;
            }
            set {
                casingConnectionTypeSpecified= value;
            }
        }

        /// <summary>
        /// The other connection type which is used for other tools
        /// </summary>
        [XmlElement("otherConnectionType")]
        public OtherConnectionType? OtherConnectionType {
            get {
                return otherConnectionTypeField;
            } 
            set {
                otherConnectionTypeField = value;
                OtherConnectionTypeSpecified = (value!=null);
                NotifyPropertyChanged("OtherConnectionType");
            }
        }

        private OtherConnectionType? otherConnectionTypeField; 
        private bool otherConnectionTypeSpecified = false; 

        /// <summary>
        /// bool to indicate if OtherConnectionType has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OtherConnectionTypeSpecified
        {
            get {
                return otherConnectionTypeSpecified;
            }
            set {
                otherConnectionTypeSpecified= value;
            }
        }

        /// <summary>
        /// The connection type of rod
        /// </summary>
        [XmlElement("rodConnectionType")]
        public RodConnectionType? RodConnectionType {
            get {
                return rodConnectionTypeField;
            } 
            set {
                rodConnectionTypeField = value;
                RodConnectionTypeSpecified = (value!=null);
                NotifyPropertyChanged("RodConnectionType");
            }
        }

        private RodConnectionType? rodConnectionTypeField; 
        private bool rodConnectionTypeSpecified = false; 

        /// <summary>
        /// bool to indicate if RodConnectionType has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool RodConnectionTypeSpecified
        {
            get {
                return rodConnectionTypeSpecified;
            }
            set {
                rodConnectionTypeSpecified= value;
            }
        }

        /// <summary>
        /// The connection type of tubing
        /// </summary>
        [XmlElement("tubingConnectionType")]
        public TubingConnectionType? TubingConnectionType {
            get {
                return tubingConnectionTypeField;
            } 
            set {
                tubingConnectionTypeField = value;
                TubingConnectionTypeSpecified = (value!=null);
                NotifyPropertyChanged("TubingConnectionType");
            }
        }

        private TubingConnectionType? tubingConnectionTypeField; 
        private bool tubingConnectionTypeSpecified = false; 

        /// <summary>
        /// bool to indicate if TubingConnectionType has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool TubingConnectionTypeSpecified
        {
            get {
                return tubingConnectionTypeSpecified;
            }
            set {
                tubingConnectionTypeSpecified= value;
            }
        }


        /// <summary>
        /// The form of connection: Box or Pin 
        /// </summary>
		[Description("The form of connection: Box or Pin")]
		[XmlElement("connectionForm")]
        public ConnectionFormType? ConnectionForm {
            get {
                return connectionFormField;
            } 
            set {
                connectionFormField = value;
                 this.ConnectionFormSpecified = true;
                NotifyPropertyChanged("ConnectionForm");
            }
        }

        private ConnectionFormType? connectionFormField; 

        /// <summary>
        /// connectionFormSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ConnectionFormSpecified {
            get {
                return connectionFormSpecifiedField;
            } 
            set {
                connectionFormSpecifiedField = value;
                NotifyPropertyChanged("ConnectionFormSpecified");
            }
        }

        private Boolean connectionFormSpecifiedField; 

        /// <summary>
        /// Connection upset
        /// </summary>
		[StringLength(64)]
        [Description("Connection upset")]
		[XmlElement("connectionUpset")]
        public String ConnectionUpset {
            get {
                return connectionUpsetField;
            } 
            set {
                connectionUpsetField = value;
                NotifyPropertyChanged("ConnectionUpset");
            }
        }

        private String connectionUpsetField; 

		/// <summary>
        /// Reference to the string equipment
        /// </summary>
		[StringLength(64)]
        [Description("Reference to the string equipment")]
        [XmlAttribute("stringEquipmentRefUID")]
		
        public String StringEquipmentRefUID {
            get {
                return stringEquipmentRefUIDField;
            } 
            set {
                stringEquipmentRefUIDField = value;
                NotifyPropertyChanged("StringEquipmentRefUID");
            }
        }

        private String stringEquipmentRefUIDField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Tubular Connection Component Schema 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquipmentConnection))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_connection", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Tubular Connection Component Schema ")]
    public partial class Connection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
		[Description("Internal diameter of object.")]
        [ComponentElement]
		[XmlElement("id")]
        public LengthMeasure InnerDiameter {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("InnerDiameter");
            }
        }

        private LengthMeasure idField; 

        /// <summary>
        /// Outside diameter of the body of the item. 
        /// </summary>
		[Description("Outside diameter of the body of the item.")]
        [ComponentElement]
		[XmlElement("od")]
        public LengthMeasure OuterDiameter {
            get {
                return odField;
            } 
            set {
                odField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure odField; 

        /// <summary>
        /// Length of the item. 
        /// </summary>
		[Description("Length of the item.")]
        [ComponentElement]
		[XmlElement("len")]
        public LengthMeasure Len {
            get {
                return lenField;
            } 
            set {
                lenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure lenField; 

        /// <summary>
        /// Thread type from API RP7G, 5CT. 
        /// </summary>
		[StringLength(32)]
        [Description("Thread type from API RP7G, 5CT.")]
		[XmlElement("typeThread")]
        public String TypeThread {
            get {
                return typeThreadField;
            } 
            set {
                typeThreadField = value;
                NotifyPropertyChanged("TypeThread");
            }
        }

        private String typeThreadField; 

        /// <summary>
        /// Thread size. 
        /// </summary>
		[Description("Thread size.")]
        [ComponentElement]
		[XmlElement("sizeThread")]
        public LengthMeasure SizeThread {
            get {
                return sizeThreadField;
            } 
            set {
                sizeThreadField = value;
                NotifyPropertyChanged("SizeThread");
            }
        }

        private LengthMeasure sizeThreadField; 

        /// <summary>
        /// Yield stress of steel - worn stress. 
        /// </summary>
		[Description("Yield stress of steel - worn stress.")]
        [ComponentElement]
		[XmlElement("tensYield")]
        public PressureMeasure TensYield {
            get {
                return tensYieldField;
            } 
            set {
                tensYieldField = value;
                NotifyPropertyChanged("TensYield");
            }
        }

        private PressureMeasure tensYieldField; 

        /// <summary>
        /// Torque at which yield occurs.
        /// </summary>
		[Description("Torque at which yield occurs.")]
        [ComponentElement]
		[XmlElement("tqYield")]
        public MomentOfForceMeasure TorqueYield {
            get {
                return tqYieldField;
            } 
            set {
                tqYieldField = value;
                NotifyPropertyChanged("TorqueYield");
            }
        }

        private MomentOfForceMeasure tqYieldField; 

        /// <summary>
        /// Where connected. 
        /// </summary>
		[Description("Where connected.")]
		[XmlElement("position")]
        public ConnectionPosition? Position {
            get {
                return positionField;
            } 
            set {
                positionField = value;
                 this.PositionSpecified = true;
                NotifyPropertyChanged("Position");
            }
        }

        private ConnectionPosition? positionField; 

        /// <summary>
        /// positionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PositionSpecified {
            get {
                return positionSpecifiedField;
            } 
            set {
                positionSpecifiedField = value;
                NotifyPropertyChanged("PositionSpecified");
            }
        }

        private Boolean positionSpecifiedField; 

        /// <summary>
        /// For bending stiffness ratio. 
        /// </summary>
		[Description("For bending stiffness ratio.")]
        [ComponentElement]
		[XmlElement("criticalCrossSection")]
        public AreaMeasure CriticalCrossSection {
            get {
                return criticalCrossSectionField;
            } 
            set {
                criticalCrossSectionField = value;
                NotifyPropertyChanged("CriticalCrossSection");
            }
        }

        private AreaMeasure criticalCrossSectionField; 

        /// <summary>
        /// Leak pressure rating. 
        /// </summary>
		[Description("Leak pressure rating.")]
        [ComponentElement]
		[XmlElement("presLeak")]
        public PressureMeasure PresLeak {
            get {
                return presLeakField;
            } 
            set {
                presLeakField = value;
                NotifyPropertyChanged("PresLeak");
            }
        }

        private PressureMeasure presLeakField; 

        /// <summary>
        /// Make up torque. 
        /// </summary>
		[Description("Make up torque.")]
        [ComponentElement]
		[XmlElement("tqMakeup")]
        public MomentOfForceMeasure TorqueMakeup {
            get {
                return tqMakeupField;
            } 
            set {
                tqMakeupField = value;
                NotifyPropertyChanged("TorqueMakeup");
            }
        }

        private MomentOfForceMeasure tqMakeupField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_downholeString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_downholeString", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_downholeString xsd type.")]
    public partial class DownholeString : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// stringType property
        /// </summary>
		[Required]
        [Description("An enumeration type defined in equipmentCatelog, the \"DownholeStringEnum\"                     contains valid option of \"case\",\"rod\",\"tubing\", \"otherString\".")]
		[XmlElement("stringType")]
        public DownholeStringType? StringType {
            get {
                return stringTypeField;
            } 
            set {
                stringTypeField = value;
                NotifyPropertyChanged("StringType");
            }
        }

        private DownholeStringType? stringTypeField; 

        /// <summary>
        /// subStringType property
        /// </summary>
		[Description("An enumeration type define for express further string type etc. \"SurfaceCasing\", \"IntermediaCasing\", \"productionCasing\".")]
		[XmlElement("subStringType")]
        public SubStringType? SubStringType {
            get {
                return subStringTypeField;
            } 
            set {
                subStringTypeField = value;
                 this.SubStringTypeSpecified = true;
                NotifyPropertyChanged("SubStringType");
            }
        }

        private SubStringType? subStringTypeField; 

        /// <summary>
        /// subStringTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean SubStringTypeSpecified {
            get {
                return subStringTypeSpecifiedField;
            } 
            set {
                subStringTypeSpecifiedField = value;
                NotifyPropertyChanged("SubStringTypeSpecified");
            }
        }

        private Boolean subStringTypeSpecifiedField; 

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of downhole string.")]
		[XmlElement("name")]
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

        /// <summary>
        /// stringInstallDate property
        /// </summary>
		[Description("The install date of downhole string.")]
		[XmlElement("stringInstallDate")]
        public Timestamp? StringInstallDate {
            get {
                return stringInstallDateField;
            } 
            set {
                stringInstallDateField = value;
                 this.StringInstallDateSpecified = true;
                NotifyPropertyChanged("StringInstallDate");
            }
        }

        private Timestamp? stringInstallDateField; 

        /// <summary>
        /// stringInstallDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StringInstallDateSpecified {
            get {
                return stringInstallDateSpecifiedField;
            } 
            set {
                stringInstallDateSpecifiedField = value;
                NotifyPropertyChanged("StringInstallDateSpecified");
            }
        }

        private Boolean stringInstallDateSpecifiedField; 

        /// <summary>
        /// parentStringsName property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The name of parent string.")]
		[XmlElement("parentStringsName")]
        public String ParentStringsName {
            get {
                return parentStringsNameField;
            } 
            set {
                parentStringsNameField = value;
                NotifyPropertyChanged("ParentStringsName");
            }
        }

        private String parentStringsNameField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth at Top of Interval")]
        [ComponentElement]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth at bottom of the section")]
        [ComponentElement]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// axisOffset property
        /// </summary>
		[Description("the distance from the sibling string.")]
        [ComponentElement]
		[XmlElement("axisOffset")]
        public LengthMeasure AxisOffset {
            get {
                return axisOffsetField;
            } 
            set {
                axisOffsetField = value;
                NotifyPropertyChanged("AxisOffset");
            }
        }

        private LengthMeasure axisOffsetField; 

        /// <summary>
        /// stringEquipmentSet property
        /// </summary>
		[Description("the list of equipment in the string. each equipment is liner connected and carry the rest of weight")]
        [RecurringElement]
		[XmlArrayItem("stringEquipment")]
        [XmlArray("stringEquipmentSet")]
        public List<StringEquipment> StringEquipmentSet {
            get {
                return stringEquipmentSetField;
            } 
            set {
                stringEquipmentSetField = value;
                NotifyPropertyChanged("StringEquipmentSet");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentSetSpecified
         {
             get {
             if(stringEquipmentSetField!=null)
                 return stringEquipmentSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> stringEquipmentSetField; 

        /// <summary>
        /// accessories property
        /// </summary>
		[Description("the accessories equipment of the string. It locates in the downhole string, but it is not equipment which liner connected in string (from top to down), and it is not carraying the weight of string")]
        [RecurringElement]
		[XmlArrayItem("accessory")]
        [XmlArray("accessories")]
        public List<StringEquipment> Accessories {
            get {
                return accessoriesField;
            } 
            set {
                accessoriesField = value;
                NotifyPropertyChanged("Accessories");
            }
        }

         /// <summary>
         /// bool to indicate if Accessories has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AccessoriesSpecified
         {
             get {
             if(accessoriesField!=null)
                 return accessoriesField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> accessoriesField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 

		/// <summary>
        /// uidParentString property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The uidParentString points to the parent string. Even if the string is not physically connected together, this string is             still considered as a continuation of the parent string.")]
        [XmlAttribute("uidParentString")]
		
        public String UidParentString {
            get {
                return uidParentStringField;
            } 
            set {
                uidParentStringField = value;
                NotifyPropertyChanged("UidParentString");
            }
        }

        private String uidParentStringField; 

		/// <summary>
        /// uidWellbore property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [XmlAttribute("uidWellbore")]
		
        public String UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private String uidWellboreField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML downhole component object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_downholeComponent", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.COMPLETION, "1.0")]
    [Description("The non-contextual content of a WITSML downhole component object.")]
    public partial class DownholeComponent : Object, ICommonDataObject, IWellObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well.")]
		[XmlElement("nameWell")]
        public String NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private String nameWellField; 

        /// <summary>
        /// Human recognizable context for the downhole equipment.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the downhole equipment.")]
		[XmlElement("name")]
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

        /// <summary>
        /// The date range specification: start date
        /// </summary>
		[Description("The date range specification: start date")]
		[XmlElement("startDate")]
        public Timestamp? StartDate {
            get {
                return startDateField;
            } 
            set {
                startDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private Timestamp? startDateField; 

        /// <summary>
        /// startDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StartDateSpecified {
            get {
                return startDateSpecifiedField;
            } 
            set {
                startDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private Boolean startDateSpecifiedField; 

        /// <summary>
        /// The date range specification: end date
        /// </summary>
		[Description("The date range specification: end date")]
		[XmlElement("endDate")]
        public Timestamp? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private Timestamp? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private Boolean endDateSpecifiedField; 

        /// <summary>
        /// This section contains wellhead information, and is composed of string equipment
        /// </summary>
		[Description("This section contains wellhead information, and is composed of string equipment")]
        [ComponentElement]
		[XmlElement("wellHead")]
        public DownholeString WellHead {
            get {
                return wellHeadField;
            } 
            set {
                wellHeadField = value;
                NotifyPropertyChanged("WellHead");
            }
        }

        private DownholeString wellHeadField; 

        /// <summary>
        /// This section contains bore hole string information including flow interval 
        /// </summary>
		[Description("This section contains bore hole string information including flow interval")]
        [RecurringElement]
		[XmlArrayItem("boreholeString")]
        [XmlArray("boreholeStringSet")]
        public List<BoreholeString> BoreholeStringSet {
            get {
                return boreholeStringSetField;
            } 
            set {
                boreholeStringSetField = value;
                NotifyPropertyChanged("BoreholeStringSet");
            }
        }

         /// <summary>
         /// bool to indicate if BoreholeStringSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeStringSetSpecified
         {
             get {
             if(boreholeStringSetField!=null)
                 return boreholeStringSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<BoreholeString> boreholeStringSetField; 

        /// <summary>
        /// The linear downhole string equipment
        /// </summary>
		[Description("The linear downhole string equipment")]
        [RecurringElement]
		[XmlArrayItem("downholeString")]
        [XmlArray("downholeStringSet")]
        public List<DownholeString> DownholeStringSet {
            get {
                return downholeStringSetField;
            } 
            set {
                downholeStringSetField = value;
                NotifyPropertyChanged("DownholeStringSet");
            }
        }

         /// <summary>
         /// bool to indicate if DownholeStringSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DownholeStringSetSpecified
         {
             get {
             if(downholeStringSetField!=null)
                 return downholeStringSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<DownholeString> downholeStringSetField; 

        /// <summary>
        /// A collection of equipment / component
        /// </summary>
		[Description("A collection of equipment / component")]
        [RecurringElement]
		[XmlArrayItem("equipment")]
        [XmlArray("equipmentSet")]
        public List<Equipment> EquipmentSet {
            get {
                return equipmentSetField;
            } 
            set {
                equipmentSetField = value;
                NotifyPropertyChanged("EquipmentSet");
            }
        }

         /// <summary>
         /// bool to indicate if EquipmentSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EquipmentSetSpecified
         {
             get {
             if(equipmentSetField!=null)
                 return equipmentSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<Equipment> equipmentSetField; 

        /// <summary>
        /// A collection of contact interval information
        /// </summary>
		[Description("A collection of contact interval information")]
        [RecurringElement]
		[XmlArrayItem("perforationSet")]
        [XmlArray("perforationSets")]
        public List<PerforationSet> PerforationSets {
            get {
                return perforationSetsField;
            } 
            set {
                perforationSetsField = value;
                NotifyPropertyChanged("PerforationSets");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSets has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetsSpecified
         {
             get {
             if(perforationSetsField!=null)
                 return perforationSetsField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerforationSet> perforationSetsField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects.
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.")]
        [XmlAttribute("uidWell")]
		
        public String UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private String uidWellField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// An event type captures the basic information about an event that has affected the data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentEvent", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("An event type captures the basic information about an event that has affected the data.")]
    public partial class DocumentEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date on which the event took place.
        /// </summary>
		[Required]
        [Description("The date on which the event took place.")]
		[XmlElement("eventDate")]
        public Timestamp? EventDate {
            get {
                return eventDateField;
            } 
            set {
                eventDateField = value;
                NotifyPropertyChanged("EventDate");
            }
        }

        private Timestamp? eventDateField; 

        /// <summary>
        /// The kind of event event.
        /// </summary>
		[StringLength(64)]
        [Description("The kind of event event.")]
		[XmlElement("eventType")]
        public String EventType {
            get {
                return eventTypeField;
            } 
            set {
                eventTypeField = value;
                NotifyPropertyChanged("EventType");
            }
        }

        private String eventTypeField; 

        /// <summary>
        /// The party responsible for the event.
        /// </summary>
		[StringLength(64)]
        [Description("The party responsible for the event.")]
		[XmlElement("responsibleParty")]
        public String ResponsibleParty {
            get {
                return responsiblePartyField;
            } 
            set {
                responsiblePartyField = value;
                NotifyPropertyChanged("ResponsibleParty");
            }
        }

        private String responsiblePartyField; 

        /// <summary>
        /// A free form comment that can further define the event that occurred.
        /// </summary>
		[StringLength(4000)]
        [Description("A free form comment that can further  define the event that occurred.")]
		[XmlElement("comment")]
        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information about the security classification of the document. This is intended as a documentation of the security so that the file will not inadvertently be sent to someone who is not allowed access to the data. This block also carries a date that the security classification expires. For example, a well log is confidential for a period of time, and then becomes open. All security classes are characterized by their classification systems.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentSecurityInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information about the security classification of the document. This is intended as a documentation of the security so that the file will not inadvertently be sent to someone who is not allowed access to the data. This block also carries a date that the security classification expires. For example, a well log is confidential for a period of time, and then becomes open. All security classes are characterized by their classification systems.")]
    public partial class DocumentSecurityInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The security class in which this document is classified. Examples would be confidential, partner confidential, tight. The meaning of the class is determined by the System in which it is defined.
        /// </summary>
		[StringLength(40)]
        [Description("The security class in which this document is  classified. Examples would be confidential, partner confidential,  tight. The meaning of the class is determined by the System in which  it is defined.")]
		[XmlElement("class")]
        public String Class {
            get {
                return classField;
            } 
            set {
                classField = value;
                NotifyPropertyChanged("Class");
            }
        }

        private String classField; 

        /// <summary>
        /// The security classification system. This gives context to the meaning of the Class value.
        /// </summary>
		[StringLength(40)]
        [Description("The security classification system.  This gives context to the meaning of the Class value.")]
		[XmlElement("securitySystem")]
        public String SecuritySystem {
            get {
                return securitySystemField;
            } 
            set {
                securitySystemField = value;
                NotifyPropertyChanged("SecuritySystem");
            }
        }

        private String securitySystemField; 

        /// <summary>
        /// The date on which this security class is no longer applicable.
        /// </summary>
		[Description("The date on which this security class is no  longer applicable.")]
		[XmlElement("endDate")]
        public Timestamp? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private Timestamp? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private Boolean endDateSpecifiedField; 

        /// <summary>
        /// A general comment to further define the security class.
        /// </summary>
		[StringLength(4000)]
        [Description("A general comment to further define the security  class.")]
		[XmlElement("comment")]
        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A block of information about the creation of the XML file. This is different than the creation of the data that is included within the file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentFileCreation", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A block of information about the creation of the XML file. This is different than the creation of the data that is included within the file.")]
    public partial class DocumentFileCreation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The date and time that the file was created.
        /// </summary>
		[Required]
        [Description("The date and time that the file was created.")]
		[XmlElement("fileCreationDate")]
        public Timestamp? FileCreationDate {
            get {
                return fileCreationDateField;
            } 
            set {
                fileCreationDateField = value;
                NotifyPropertyChanged("FileCreationDate");
            }
        }

        private Timestamp? fileCreationDateField; 

        /// <summary>
        /// If appropriate, the software that created the file. This is a free form string, and may include whatever information is deemed relevant.
        /// </summary>
		[StringLength(64)]
        [Description("If appropriate, the software that created the file.  This is a free form string, and may include whatever information  is deemed relevant.")]
		[XmlElement("softwareName")]
        public String SoftwareName {
            get {
                return softwareNameField;
            } 
            set {
                softwareNameField = value;
                NotifyPropertyChanged("SoftwareName");
            }
        }

        private String softwareNameField; 

        /// <summary>
        /// The person or business associate that created the file.
        /// </summary>
		[StringLength(64)]
        [Description("The person or business associate that created  the file.")]
		[XmlElement("fileCreator")]
        public String FileCreator {
            get {
                return fileCreatorField;
            } 
            set {
                fileCreatorField = value;
                NotifyPropertyChanged("FileCreator");
            }
        }

        private String fileCreatorField; 

        /// <summary>
        /// Any comment that would be useful to further explain the creation of this instance document.
        /// </summary>
		[StringLength(4000)]
        [Description("Any comment that would be useful to further  explain the creation of this instance document.")]
		[XmlElement("comment")]
        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the nameStruct xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="nameStruct", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the nameStruct xsd type.")]
    public partial class NameStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the NameStruct class.
        /// </summary>
        public NameStruct() {}

        /// <summary>
        /// Initializes a new instance of the NameStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public NameStruct(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The naming system within the name is (hopefully) unique.
        /// </summary>
		[StringLength(64)]
        [Description("The naming system within the name is (hopefully) unique.")]
        [XmlAttribute("namingSystem")]
		
        public String NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private String namingSystemField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.")]
    public partial class DocumentInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// An identifier for the document. This is intended to be unique within the context of the NamingSystem.
        /// </summary>
		[Required]
        [Description("An identifier for the document. This is  intended to be unique within the context of the NamingSystem.")]
        [ComponentElement]
		[XmlElement("documentName")]
        public NameStruct DocumentName {
            get {
                return documentNameField;
            } 
            set {
                documentNameField = value;
                NotifyPropertyChanged("DocumentName");
            }
        }

        private NameStruct documentNameField; 

        /// <summary>
        /// Zero or more alternate names for the document. These names do not need to be unique within the naming system.
        /// </summary>
		[Description("Zero or more alternate names for the document.  These names do not need to be unique within the naming system.")]
        [RecurringElement]
		[XmlElement("documentAlias")]
        public List<NameStruct> DocumentAlias {
            get {
                return documentAliasField;
            } 
            set {
                documentAliasField = value;
                NotifyPropertyChanged("DocumentAlias");
            }
        }

         /// <summary>
         /// bool to indicate if DocumentAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DocumentAliasSpecified
         {
             get {
             if(documentAliasField!=null)
                 return documentAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> documentAliasField; 

        /// <summary>
        /// The date of the creation of the document. This is not the same as the date that the file was created. For this date, the document is considered to be the set of information associated with this document information. For example, the document may be a seismic binset. This represents the date that the binset was created. The FileCreation information would capture the date that the XML file was created to send or exchange the binset.
        /// </summary>
		[Description("The date of the creation of the document.  This is not the same as the date that the file was created.  For this date, the document is considered to be the set of  information associated with this document information.  For example, the document may be a seismic binset.  This represents the date that the binset was created.  The FileCreation information would capture the date that  the XML file was created to send or exchange the binset.")]
		[XmlElement("documentDate")]
        public Timestamp? DocumentDate {
            get {
                return documentDateField;
            } 
            set {
                documentDateField = value;
                 this.DocumentDateSpecified = true;
                NotifyPropertyChanged("DocumentDate");
            }
        }

        private Timestamp? documentDateField; 

        /// <summary>
        /// documentDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DocumentDateSpecified {
            get {
                return documentDateSpecifiedField;
            } 
            set {
                documentDateSpecifiedField = value;
                NotifyPropertyChanged("DocumentDateSpecified");
            }
        }

        private Boolean documentDateSpecifiedField; 

        /// <summary>
        /// A document class. Examples of classes would be a metadata classification or a set of keywords. 
        /// </summary>
		[Description("A document class. Examples of classes would be a  metadata classification or a set of keywords.")]
        [RecurringElement]
		[XmlElement("documentClass")]
        public List<NameStruct> DocumentClass {
            get {
                return documentClassField;
            } 
            set {
                documentClassField = value;
                NotifyPropertyChanged("DocumentClass");
            }
        }

         /// <summary>
         /// bool to indicate if DocumentClass has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DocumentClassSpecified
         {
             get {
             if(documentClassField!=null)
                 return documentClassField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> documentClassField; 

        /// <summary>
        /// The information about the creation of the exchange file. This is not about the creation of the data within the file, but the creation of the file itself.
        /// </summary>
		[Description("The information about the creation of the  exchange file. This is not about the creation of the data within  the file, but the creation of the file itself.")]
        [ComponentElement]
		[XmlElement("fileCreationInformation")]
        public DocumentFileCreation FileCreationInformation {
            get {
                return fileCreationInformationField;
            } 
            set {
                fileCreationInformationField = value;
                NotifyPropertyChanged("FileCreationInformation");
            }
        }

        private DocumentFileCreation fileCreationInformationField; 

        /// <summary>
        /// Information about the security to be applied to this file. More than one classification can be given.
        /// </summary>
		[Description("Information about the security to be applied to  this file. More than one classification can be given.")]
        [RecurringElement]
		[XmlElement("securityInformation")]
        public List<DocumentSecurityInfo> SecurityInformation {
            get {
                return securityInformationField;
            } 
            set {
                securityInformationField = value;
                NotifyPropertyChanged("SecurityInformation");
            }
        }

         /// <summary>
         /// bool to indicate if SecurityInformation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SecurityInformationSpecified
         {
             get {
             if(securityInformationField!=null)
                 return securityInformationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DocumentSecurityInfo> securityInformationField; 

        /// <summary>
        /// A free-form string that allows a disclaimer to accompany the information.
        /// </summary>
		[StringLength(4000)]
        [Description("A free-form string that allows a disclaimer to  accompany the information.")]
		[XmlElement("disclaimer")]
        public String Disclaimer {
            get {
                return disclaimerField;
            } 
            set {
                disclaimerField = value;
                NotifyPropertyChanged("Disclaimer");
            }
        }

        private String disclaimerField; 

        /// <summary>
        /// A collection of events that can document the history of the data.
        /// </summary>
		[Description("A collection of events that can document the  history of the data.")]
        [RecurringElement]
		[XmlArrayItem("event")]
        [XmlArray("auditTrail")]
        public List<DocumentEvent> AuditTrail {
            get {
                return auditTrailField;
            } 
            set {
                auditTrailField = value;
                NotifyPropertyChanged("AuditTrail");
            }
        }

         /// <summary>
         /// bool to indicate if AuditTrail has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AuditTrailSpecified
         {
             get {
             if(auditTrailField!=null)
                 return auditTrailField.Count>0?true:false;
             else return false;
             }
         }
        private List<DocumentEvent> auditTrailField; 

        /// <summary>
        /// The owner of the data.
        /// </summary>
		[StringLength(64)]
        [Description("The owner of the data.")]
		[XmlElement("owner")]
        public String Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String ownerField; 

        /// <summary>
        /// An optional comment about the document.
        /// </summary>
		[StringLength(4000)]
        [Description("An optional comment about the document.")]
		[XmlElement("comment")]
        public String Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The WITSML API mandated plural root element which allows multiple singular objects to be sent. The plural name is formed by adding an "s" to the singular name.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wellCompletions", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("The WITSML API mandated plural root element which allows multiple singular objects to be sent. The plural name is formed by adding an s to the singular name.")]
    public partial class WellCompletionList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the well completion.
        /// </summary>
		[Description("Information about the well completion.")]
        [ComponentElement]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a wellbore completion.
        /// </summary>
		[Required]
        [Description("Information about a wellbore completion.")]
        [RecurringElement]
		[XmlElement("wellCompletion")]
        public List<WellCompletion> WellCompletion {
            get {
                return wellCompletionField;
            } 
            set {
                wellCompletionField = value;
                NotifyPropertyChanged("WellCompletion");
            }
        }

         /// <summary>
         /// bool to indicate if WellCompletion has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellCompletionSpecified
         {
             get {
             if(wellCompletionField!=null)
                 return wellCompletionField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellCompletion> wellCompletionField; 

        /// <summary>
        /// Information about a wellbore completion.
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellCompletion;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [XmlAttribute("version")]
		
        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.0"; 


    } //here

    /// <summary>
    /// This class represents the obj_wellCMLedgers xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wellCMLedgers", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_wellCMLedgers xsd type.")]
    public partial class WellCMLedgerList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the event ledger instance.
        /// </summary>
		[Description("Information about the event ledger instance.")]
        [ComponentElement]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// The non-contextual elements for general event ledger information.
        /// </summary>
		[Required]
        [Description("The non-contextual elements for general event ledger information.")]
        [RecurringElement]
		[XmlElement("wellCMLedger")]
        public List<WellCMLedger> WellCMLedger {
            get {
                return wellCMLedgerField;
            } 
            set {
                wellCMLedgerField = value;
                NotifyPropertyChanged("WellCMLedger");
            }
        }

         /// <summary>
         /// bool to indicate if WellCMLedger has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellCMLedgerSpecified
         {
             get {
             if(wellCMLedgerField!=null)
                 return wellCMLedgerField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellCMLedger> wellCMLedgerField; 

        /// <summary>
        /// The non-contextual elements for general event ledger information.
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellCMLedger;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [XmlAttribute("version")]
		
        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.0"; 


    } //here

    /// <summary>
    /// Information on wellbore completion collection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wellboreCompletions", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("Information on wellbore completion collection.")]
    public partial class WellboreCompletionList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the downhole component.
        /// </summary>
		[Description("Information about the downhole component.")]
        [ComponentElement]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Wellbore completion type
        /// </summary>
		[Required]
        [Description("Wellbore completion type")]
        [RecurringElement]
		[XmlElement("wellboreCompletion")]
        public List<WellboreCompletion> WellboreCompletion {
            get {
                return wellboreCompletionField;
            } 
            set {
                wellboreCompletionField = value;
                NotifyPropertyChanged("WellboreCompletion");
            }
        }

         /// <summary>
         /// bool to indicate if WellboreCompletion has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellboreCompletionSpecified
         {
             get {
             if(wellboreCompletionField!=null)
                 return wellboreCompletionField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellboreCompletion> wellboreCompletionField; 

        /// <summary>
        /// Wellbore completion type
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellboreCompletion;
			}
        }
		/// <summary>
        /// Data object schema version.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.")]
        [XmlAttribute("version")]
		
        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.0"; 


    } //here

    /// <summary>
    /// This class represents the obj_downholeComponents xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("downholeComponents", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_downholeComponents xsd type.")]
    public partial class DownholeComponentList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the downhole component.
        /// </summary>
		[Description("Information about the downhole component.")]
        [ComponentElement]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a downhole equipment
        /// </summary>
		[Required]
        [Description("Information about a downhole equipment")]
        [RecurringElement]
		[XmlElement("downholeComponent")]
        public List<DownholeComponent> DownholeComponent {
            get {
                return downholeComponentField;
            } 
            set {
                downholeComponentField = value;
                NotifyPropertyChanged("DownholeComponent");
            }
        }

         /// <summary>
         /// bool to indicate if DownholeComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DownholeComponentSpecified
         {
             get {
             if(downholeComponentField!=null)
                 return downholeComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DownholeComponent> downholeComponentField; 

        /// <summary>
        /// Information about a downhole equipment
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return DownholeComponent;
			}
        }
		/// <summary>
        /// Data object schema version.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.")]
        [XmlAttribute("version")]
		
        public String Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String versionField = "1.0"; 


    } //here

    #endregion

    #region Enumerations
    namespace ReferenceData {
        /// <summary>
        /// This class represents the CompletionStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CompletionStatus xsd enumeration.")]
        public enum CompletionStatus 
        {
        /// <summary>
        /// Planned property
        /// </summary>
          Planned,
        /// <summary>
        /// Active property
        /// </summary>
          Active,
        /// <summary>
        /// Inactive property
        /// </summary>
          Inactive,
        /// <summary>
        /// PermanentAbandoned property
        /// </summary>
          [XmlEnum("Permanent Abandoned")]
          PermanentAbandoned,
        /// <summary>
        /// Suspended property
        /// </summary>
          Suspended,
        /// <summary>
        /// TemporaryAbandoned property
        /// </summary>
          [XmlEnum("Temporary Abandoned")]
          TemporaryAbandoned,
        /// <summary>
        /// Testing property
        /// </summary>
          Testing
        }
        /// <summary>
        /// This class represents the MeasuredDepthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MeasuredDepthUom xsd enumeration.")]
        public enum MeasuredDepthUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS
        }
        /// <summary>
        /// This class represents the LengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LengthUom xsd enumeration.")]
        public enum LengthUom 
        {
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// angstrom property
        /// </summary>
          angstrom,
        /// <summary>
        /// chBnA property
        /// </summary>
          chBnA,
        /// <summary>
        /// chBnB property
        /// </summary>
          chBnB,
        /// <summary>
        /// chCla property
        /// </summary>
          chCla,
        /// <summary>
        /// chSe property
        /// </summary>
          chSe,
        /// <summary>
        /// chUS property
        /// </summary>
          chUS,
        /// <summary>
        /// cm property
        /// </summary>
          cm,
        /// <summary>
        /// dm property
        /// </summary>
          dm,
        /// <summary>
        /// fathom property
        /// </summary>
          fathom,
        /// <summary>
        /// fm property
        /// </summary>
          fm,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// ftBnA property
        /// </summary>
          ftBnA,
        /// <summary>
        /// ftBnB property
        /// </summary>
          ftBnB,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ftBr(65)")]
          ftBr65,
        /// <summary>
        /// ftCla property
        /// </summary>
          ftCla,
        /// <summary>
        /// ftGC property
        /// </summary>
          ftGC,
        /// <summary>
        /// ftInd property
        /// </summary>
          ftInd,
        /// <summary>
        /// ftInd37 property
        /// </summary>
          [XmlEnum("ftInd(37)")]
          ftInd37,
        /// <summary>
        /// ftInd62 property
        /// </summary>
          [XmlEnum("ftInd(62)")]
          ftInd62,
        /// <summary>
        /// ftInd75 property
        /// </summary>
          [XmlEnum("ftInd(75)")]
          ftInd75,
        /// <summary>
        /// ftMA property
        /// </summary>
          ftMA,
        /// <summary>
        /// ftSe property
        /// </summary>
          ftSe,
        /// <summary>
        /// ftUS property
        /// </summary>
          ftUS,
        /// <summary>
        /// in property
        /// </summary>
          @in,
        /// <summary>
        /// in10 property
        /// </summary>
          [XmlEnum("in/10")]
          in10,
        /// <summary>
        /// in16 property
        /// </summary>
          [XmlEnum("in/16")]
          in16,
        /// <summary>
        /// in32 property
        /// </summary>
          [XmlEnum("in/32")]
          in32,
        /// <summary>
        /// in64 property
        /// </summary>
          [XmlEnum("in/64")]
          in64,
        /// <summary>
        /// inUS property
        /// </summary>
          inUS,
        /// <summary>
        /// km property
        /// </summary>
          km,
        /// <summary>
        /// lkBnA property
        /// </summary>
          lkBnA,
        /// <summary>
        /// lkBnB property
        /// </summary>
          lkBnB,
        /// <summary>
        /// lkCla property
        /// </summary>
          lkCla,
        /// <summary>
        /// lkSe property
        /// </summary>
          lkSe,
        /// <summary>
        /// lkUS property
        /// </summary>
          lkUS,
        /// <summary>
        /// mGer property
        /// </summary>
          mGer,
        /// <summary>
        /// mi property
        /// </summary>
          mi,
        /// <summary>
        /// mil property
        /// </summary>
          mil,
        /// <summary>
        /// miUS property
        /// </summary>
          miUS,
        /// <summary>
        /// mm property
        /// </summary>
          mm,
        /// <summary>
        /// Mm property
        /// </summary>
          Mm,
        /// <summary>
        /// nautmi property
        /// </summary>
          nautmi,
        /// <summary>
        /// nm property
        /// </summary>
          nm,
        /// <summary>
        /// pm property
        /// </summary>
          pm,
        /// <summary>
        /// um property
        /// </summary>
          um,
        /// <summary>
        /// yd property
        /// </summary>
          yd,
        /// <summary>
        /// ydBnA property
        /// </summary>
          ydBnA,
        /// <summary>
        /// ydBnB property
        /// </summary>
          ydBnB,
        /// <summary>
        /// ydCla property
        /// </summary>
          ydCla,
        /// <summary>
        /// ydIm property
        /// </summary>
          ydIm,
        /// <summary>
        /// ydInd property
        /// </summary>
          ydInd,
        /// <summary>
        /// ydInd37 property
        /// </summary>
          [XmlEnum("ydInd(37)")]
          ydInd37,
        /// <summary>
        /// ydInd62 property
        /// </summary>
          [XmlEnum("ydInd(62)")]
          ydInd62,
        /// <summary>
        /// ydInd75 property
        /// </summary>
          [XmlEnum("ydInd(75)")]
          ydInd75,
        /// <summary>
        /// ydSe property
        /// </summary>
          ydSe
        }
        /// <summary>
        /// This class represents the EastOrWest xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the EastOrWest xsd enumeration.")]
        public enum EastOrWest 
        {
        /// <summary>
        /// East of something.
        /// </summary>
          east,
        /// <summary>
        /// West of something.
        /// </summary>
          west,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NorthOrSouth xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the NorthOrSouth xsd enumeration.")]
        public enum NorthOrSouth 
        {
        /// <summary>
        /// North of something.
        /// </summary>
          north,
        /// <summary>
        /// South of something.
        /// </summary>
          south,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellVerticalCoordinateUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellVerticalCoordinateUom xsd enumeration.")]
        public enum WellVerticalCoordinateUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ftBr(65)")]
          ftBr65
        }
        /// <summary>
        /// This class represents the PercentUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PercentUom xsd enumeration.")]
        public enum PercentUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item
        }
        /// <summary>
        /// This class represents the PlaneAngleUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PlaneAngleUom xsd enumeration.")]
        public enum PlaneAngleUom 
        {
        /// <summary>
        /// rad property
        /// </summary>
          rad,
        /// <summary>
        /// c property
        /// </summary>
          c,
        /// <summary>
        /// ccgr property
        /// </summary>
          ccgr,
        /// <summary>
        /// cgr property
        /// </summary>
          cgr,
        /// <summary>
        /// dega property
        /// </summary>
          dega,
        /// <summary>
        /// gon property
        /// </summary>
          gon,
        /// <summary>
        /// gr property
        /// </summary>
          gr,
        /// <summary>
        /// Grad property
        /// </summary>
          Grad,
        /// <summary>
        /// krad property
        /// </summary>
          krad,
        /// <summary>
        /// mila property
        /// </summary>
          mila,
        /// <summary>
        /// mina property
        /// </summary>
          mina,
        /// <summary>
        /// mrad property
        /// </summary>
          mrad,
        /// <summary>
        /// Mrad property
        /// </summary>
          Mrad,
        /// <summary>
        /// mseca property
        /// </summary>
          mseca,
        /// <summary>
        /// seca property
        /// </summary>
          seca,
        /// <summary>
        /// urad property
        /// </summary>
          urad
        }
        /// <summary>
        /// This class represents the AziRef xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AziRef xsd enumeration.")]
        public enum AziRef 
        {
        /// <summary>
        /// magneticnorth property
        /// </summary>
          [XmlEnum("magnetic north")]
          magneticnorth,
        /// <summary>
        /// gridnorth property
        /// </summary>
          [XmlEnum("grid north")]
          gridnorth,
        /// <summary>
        /// truenorth property
        /// </summary>
          [XmlEnum("true north")]
          truenorth,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the VolumePerVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumePerVolumeUom xsd enumeration.")]
        public enum VolumePerVolumeUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// permil property
        /// </summary>
          permil,
        /// <summary>
        /// ppdk property
        /// </summary>
          ppdk,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// bblacreft property
        /// </summary>
          [XmlEnum("bbl/acre.ft")]
          bblacreft,
        /// <summary>
        /// bblbbl property
        /// </summary>
          [XmlEnum("bbl/bbl")]
          bblbbl,
        /// <summary>
        /// bblft3 property
        /// </summary>
          [XmlEnum("bbl/ft3")]
          bblft3,
        /// <summary>
        /// bbl100bbl property
        /// </summary>
          [XmlEnum("bbl/100bbl")]
          bbl100bbl,
        /// <summary>
        /// bblkft3 property
        /// </summary>
          [XmlEnum("bbl/k(ft3)")]
          bblkft3,
        /// <summary>
        /// bblMft3 property
        /// </summary>
          [XmlEnum("bbl/M(ft3)")]
          bblMft3,
        /// <summary>
        /// cm3cm3 property
        /// </summary>
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        /// <summary>
        /// cm3m3 property
        /// </summary>
          [XmlEnum("cm3/m3")]
          cm3m3,
        /// <summary>
        /// dm3m3 property
        /// </summary>
          [XmlEnum("dm3/m3")]
          dm3m3,
        /// <summary>
        /// ft3bbl property
        /// </summary>
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        /// <summary>
        /// ft3ft3 property
        /// </summary>
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        /// <summary>
        /// galUSkgalUS property
        /// </summary>
          [XmlEnum("galUS/kgalUS")]
          galUSkgalUS,
        /// <summary>
        /// galUKkgalUK property
        /// </summary>
          [XmlEnum("galUK/kgalUK")]
          galUKkgalUK,
        /// <summary>
        /// galUKft3 property
        /// </summary>
          [XmlEnum("galUK/ft3")]
          galUKft3,
        /// <summary>
        /// galUKMbbl property
        /// </summary>
          [XmlEnum("galUK/Mbbl")]
          galUKMbbl,
        /// <summary>
        /// galUSbbl property
        /// </summary>
          [XmlEnum("galUS/bbl")]
          galUSbbl,
        /// <summary>
        /// galUS10bbl property
        /// </summary>
          [XmlEnum("galUS/10bbl")]
          galUS10bbl,
        /// <summary>
        /// galUSft3 property
        /// </summary>
          [XmlEnum("galUS/ft3")]
          galUSft3,
        /// <summary>
        /// galUSMbbl property
        /// </summary>
          [XmlEnum("galUS/Mbbl")]
          galUSMbbl,
        /// <summary>
        /// Item1000ft3bbl property
        /// </summary>
          [XmlEnum("1000ft3/bbl")]
          Item1000ft3bbl,
        /// <summary>
        /// ksm3sm3 property
        /// </summary>
          [XmlEnum("ksm3/sm3")]
          ksm3sm3,
        /// <summary>
        /// L10bbl property
        /// </summary>
          [XmlEnum("L/10bbl")]
          L10bbl,
        /// <summary>
        /// Lm3 property
        /// </summary>
          [XmlEnum("L/m3")]
          Lm3,
        /// <summary>
        /// m3ham property
        /// </summary>
          [XmlEnum("m3/ha.m")]
          m3ham,
        /// <summary>
        /// m3m3 property
        /// </summary>
          [XmlEnum("m3/m3")]
          m3m3,
        /// <summary>
        /// Mft3acreft property
        /// </summary>
          [XmlEnum("M(ft3)/acre.ft")]
          Mft3acreft,
        /// <summary>
        /// mLgalUK property
        /// </summary>
          [XmlEnum("mL/galUK")]
          mLgalUK,
        /// <summary>
        /// mLgalUS property
        /// </summary>
          [XmlEnum("mL/galUS")]
          mLgalUS,
        /// <summary>
        /// mLmL property
        /// </summary>
          [XmlEnum("mL/mL")]
          mLmL,
        /// <summary>
        /// MMbblacreft property
        /// </summary>
          [XmlEnum("MMbbl/acre.ft")]
          MMbblacreft,
        /// <summary>
        /// MMscf60stb60 property
        /// </summary>
          [XmlEnum("MMscf60/stb60")]
          MMscf60stb60,
        /// <summary>
        /// Mscf60stb60 property
        /// </summary>
          [XmlEnum("Mscf60/stb60")]
          Mscf60stb60,
        /// <summary>
        /// ptUKMbbl property
        /// </summary>
          [XmlEnum("ptUK/Mbbl")]
          ptUKMbbl,
        /// <summary>
        /// ptUS10bbl property
        /// </summary>
          [XmlEnum("ptUS/10bbl")]
          ptUS10bbl,
        /// <summary>
        /// pu property
        /// </summary>
          pu,
        /// <summary>
        /// scm15stb60 property
        /// </summary>
          [XmlEnum("scm15/stb60")]
          scm15stb60,
        /// <summary>
        /// sm3ksm3 property
        /// </summary>
          [XmlEnum("sm3/ksm3")]
          sm3ksm3,
        /// <summary>
        /// sm3sm3 property
        /// </summary>
          [XmlEnum("sm3/sm3")]
          sm3sm3,
        /// <summary>
        /// stb60MMscf60 property
        /// </summary>
          [XmlEnum("stb60/MMscf60")]
          stb60MMscf60,
        /// <summary>
        /// stb60MMscm15 property
        /// </summary>
          [XmlEnum("stb60/MMscm15")]
          stb60MMscm15,
        /// <summary>
        /// stb60Mscf60 property
        /// </summary>
          [XmlEnum("stb60/Mscf60")]
          stb60Mscf60,
        /// <summary>
        /// stb60Mscm15 property
        /// </summary>
          [XmlEnum("stb60/Mscm15")]
          stb60Mscm15,
        /// <summary>
        /// stb60scm15 property
        /// </summary>
          [XmlEnum("stb60/scm15")]
          stb60scm15
        }
        /// <summary>
        /// This class represents the VolumePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumePerLengthUom xsd enumeration.")]
        public enum VolumePerLengthUom 
        {
        /// <summary>
        /// bblPft property
        /// </summary>
          bblPft,
        /// <summary>
        /// bblPin property
        /// </summary>
          bblPin,
        /// <summary>
        /// bblPmi property
        /// </summary>
          bblPmi,
        /// <summary>
        /// dm3P100km property
        /// </summary>
          dm3P100km,
        /// <summary>
        /// dm3Pkm100 property
        /// </summary>
          [XmlEnum("dm3Pkm(100)")]
          dm3Pkm100,
        /// <summary>
        /// dm3Pm property
        /// </summary>
          dm3Pm,
        /// <summary>
        /// ft3Pft property
        /// </summary>
          ft3Pft,
        /// <summary>
        /// galUKPmi property
        /// </summary>
          galUKPmi,
        /// <summary>
        /// galUSPft property
        /// </summary>
          galUSPft,
        /// <summary>
        /// galUSPmi property
        /// </summary>
          galUSPmi,
        /// <summary>
        /// in3Pft property
        /// </summary>
          in3Pft,
        /// <summary>
        /// LP100km property
        /// </summary>
          LP100km,
        /// <summary>
        /// LPkm100 property
        /// </summary>
          [XmlEnum("LPkm(100)")]
          LPkm100,
        /// <summary>
        /// LPm property
        /// </summary>
          LPm,
        /// <summary>
        /// m3Pkm property
        /// </summary>
          m3Pkm,
        /// <summary>
        /// m3Pm property
        /// </summary>
          m3Pm
        }
        /// <summary>
        /// This class represents the VolumeFlowRateUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumeFlowRateUom xsd enumeration.")]
        public enum VolumeFlowRateUom 
        {
        /// <summary>
        /// m3s property
        /// </summary>
          [XmlEnum("m3/s")]
          m3s,
        /// <summary>
        /// bbld property
        /// </summary>
          [XmlEnum("bbl/d")]
          bbld,
        /// <summary>
        /// bblhr property
        /// </summary>
          [XmlEnum("bbl/hr")]
          bblhr,
        /// <summary>
        /// bblmin property
        /// </summary>
          [XmlEnum("bbl/min")]
          bblmin,
        /// <summary>
        /// cm330min property
        /// </summary>
          [XmlEnum("cm3/30min")]
          cm330min,
        /// <summary>
        /// cm3h property
        /// </summary>
          [XmlEnum("cm3/h")]
          cm3h,
        /// <summary>
        /// cm3min property
        /// </summary>
          [XmlEnum("cm3/min")]
          cm3min,
        /// <summary>
        /// cm3s property
        /// </summary>
          [XmlEnum("cm3/s")]
          cm3s,
        /// <summary>
        /// dm3s property
        /// </summary>
          [XmlEnum("dm3/s")]
          dm3s,
        /// <summary>
        /// ft3d property
        /// </summary>
          [XmlEnum("ft3/d")]
          ft3d,
        /// <summary>
        /// ft3h property
        /// </summary>
          [XmlEnum("ft3/h")]
          ft3h,
        /// <summary>
        /// ft3min property
        /// </summary>
          [XmlEnum("ft3/min")]
          ft3min,
        /// <summary>
        /// ft3s property
        /// </summary>
          [XmlEnum("ft3/s")]
          ft3s,
        /// <summary>
        /// galUKd property
        /// </summary>
          [XmlEnum("galUK/d")]
          galUKd,
        /// <summary>
        /// galUKhr property
        /// </summary>
          [XmlEnum("galUK/hr")]
          galUKhr,
        /// <summary>
        /// galUKmin property
        /// </summary>
          [XmlEnum("galUK/min")]
          galUKmin,
        /// <summary>
        /// galUSd property
        /// </summary>
          [XmlEnum("galUS/d")]
          galUSd,
        /// <summary>
        /// galUShr property
        /// </summary>
          [XmlEnum("galUS/hr")]
          galUShr,
        /// <summary>
        /// galUSmin property
        /// </summary>
          [XmlEnum("galUS/min")]
          galUSmin,
        /// <summary>
        /// kbbld property
        /// </summary>
          [XmlEnum("kbbl/d")]
          kbbld,
        /// <summary>
        /// Item1000ft3d property
        /// </summary>
          [XmlEnum("1000ft3/d")]
          Item1000ft3d,
        /// <summary>
        /// Item1000m3d property
        /// </summary>
          [XmlEnum("1000m3/d")]
          Item1000m3d,
        /// <summary>
        /// Item1000m3h property
        /// </summary>
          [XmlEnum("1000m3/h")]
          Item1000m3h,
        /// <summary>
        /// Lh property
        /// </summary>
          [XmlEnum("L/h")]
          Lh,
        /// <summary>
        /// Lmin property
        /// </summary>
          [XmlEnum("L/min")]
          Lmin,
        /// <summary>
        /// Ls property
        /// </summary>
          [XmlEnum("L/s")]
          Ls,
        /// <summary>
        /// m3d property
        /// </summary>
          [XmlEnum("m3/d")]
          m3d,
        /// <summary>
        /// m3h property
        /// </summary>
          [XmlEnum("m3/h")]
          m3h,
        /// <summary>
        /// m3min property
        /// </summary>
          [XmlEnum("m3/min")]
          m3min,
        /// <summary>
        /// Mbbld property
        /// </summary>
          [XmlEnum("Mbbl/d")]
          Mbbld,
        /// <summary>
        /// Mft3d property
        /// </summary>
          [XmlEnum("M(ft3)/d")]
          Mft3d,
        /// <summary>
        /// Mm3d property
        /// </summary>
          [XmlEnum("M(m3)/d")]
          Mm3d
        }
        /// <summary>
        /// This class represents the VolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumeUom xsd enumeration.")]
        public enum VolumeUom 
        {
        /// <summary>
        /// m3 property
        /// </summary>
          m3,
        /// <summary>
        /// acreft property
        /// </summary>
          [XmlEnum("acre.ft")]
          acreft,
        /// <summary>
        /// bbl property
        /// </summary>
          bbl,
        /// <summary>
        /// bcf property
        /// </summary>
          bcf,
        /// <summary>
        /// cm3 property
        /// </summary>
          cm3,
        /// <summary>
        /// dm3 property
        /// </summary>
          dm3,
        /// <summary>
        /// flozUK property
        /// </summary>
          flozUK,
        /// <summary>
        /// flozUS property
        /// </summary>
          flozUS,
        /// <summary>
        /// ft3 property
        /// </summary>
          ft3,
        /// <summary>
        /// galUK property
        /// </summary>
          galUK,
        /// <summary>
        /// galUS property
        /// </summary>
          galUS,
        /// <summary>
        /// ham property
        /// </summary>
          [XmlEnum("ha.m")]
          ham,
        /// <summary>
        /// hL property
        /// </summary>
          hL,
        /// <summary>
        /// in3 property
        /// </summary>
          in3,
        /// <summary>
        /// Item1000ft3 property
        /// </summary>
          [XmlEnum("1000ft3")]
          Item1000ft3,
        /// <summary>
        /// km3 property
        /// </summary>
          km3,
        /// <summary>
        /// L property
        /// </summary>
          L,
        /// <summary>
        /// Mbbl property
        /// </summary>
          Mbbl,
        /// <summary>
        /// Mcf property
        /// </summary>
          Mcf,
        /// <summary>
        /// Mft3 property
        /// </summary>
          [XmlEnum("M(ft3)")]
          Mft3,
        /// <summary>
        /// mi3 property
        /// </summary>
          mi3,
        /// <summary>
        /// mL property
        /// </summary>
          mL,
        /// <summary>
        /// Mm3 property
        /// </summary>
          [XmlEnum("M(m3)")]
          Mm3,
        /// <summary>
        /// mm3 property
        /// </summary>
          mm3,
        /// <summary>
        /// MMbbl property
        /// </summary>
          MMbbl,
        /// <summary>
        /// ptUK property
        /// </summary>
          ptUK,
        /// <summary>
        /// ptUS property
        /// </summary>
          ptUS,
        /// <summary>
        /// qtUK property
        /// </summary>
          qtUK,
        /// <summary>
        /// qtUS property
        /// </summary>
          qtUS,
        /// <summary>
        /// tcf property
        /// </summary>
          tcf,
        /// <summary>
        /// um2m property
        /// </summary>
          [XmlEnum("um2.m")]
          um2m,
        /// <summary>
        /// yd3 property
        /// </summary>
          yd3
        }
        /// <summary>
        /// This class represents the VelocityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VelocityUom xsd enumeration.")]
        public enum VelocityUom 
        {
        /// <summary>
        /// ms property
        /// </summary>
          [XmlEnum("m/s")]
          ms,
        /// <summary>
        /// cma property
        /// </summary>
          [XmlEnum("cm/a")]
          cma,
        /// <summary>
        /// cms property
        /// </summary>
          [XmlEnum("cm/s")]
          cms,
        /// <summary>
        /// dms property
        /// </summary>
          [XmlEnum("dm/s")]
          dms,
        /// <summary>
        /// ftd property
        /// </summary>
          [XmlEnum("ft/d")]
          ftd,
        /// <summary>
        /// fth property
        /// </summary>
          [XmlEnum("ft/h")]
          fth,
        /// <summary>
        /// ftmin property
        /// </summary>
          [XmlEnum("ft/min")]
          ftmin,
        /// <summary>
        /// ftms property
        /// </summary>
          [XmlEnum("ft/ms")]
          ftms,
        /// <summary>
        /// fts property
        /// </summary>
          [XmlEnum("ft/s")]
          fts,
        /// <summary>
        /// ftus property
        /// </summary>
          [XmlEnum("ft/us")]
          ftus,
        /// <summary>
        /// ina property
        /// </summary>
          [XmlEnum("in/a")]
          ina,
        /// <summary>
        /// inmin property
        /// </summary>
          [XmlEnum("in/min")]
          inmin,
        /// <summary>
        /// ins property
        /// </summary>
          [XmlEnum("in/s")]
          ins,
        /// <summary>
        /// kfth property
        /// </summary>
          [XmlEnum("kft/h")]
          kfth,
        /// <summary>
        /// kfts property
        /// </summary>
          [XmlEnum("kft/s")]
          kfts,
        /// <summary>
        /// kmh property
        /// </summary>
          [XmlEnum("km/h")]
          kmh,
        /// <summary>
        /// kms property
        /// </summary>
          [XmlEnum("km/s")]
          kms,
        /// <summary>
        /// knot property
        /// </summary>
          knot,
        /// <summary>
        /// md property
        /// </summary>
          [XmlEnum("m/d")]
          md,
        /// <summary>
        /// mh property
        /// </summary>
          [XmlEnum("m/h")]
          mh,
        /// <summary>
        /// mmin property
        /// </summary>
          [XmlEnum("m/min")]
          mmin,
        /// <summary>
        /// mms property
        /// </summary>
          [XmlEnum("m/ms")]
          mms,
        /// <summary>
        /// mih property
        /// </summary>
          [XmlEnum("mi/h")]
          mih,
        /// <summary>
        /// milyr property
        /// </summary>
          [XmlEnum("mil/yr")]
          milyr,
        /// <summary>
        /// mma property
        /// </summary>
          [XmlEnum("mm/a")]
          mma,
        /// <summary>
        /// mms1 property
        /// </summary>
          [XmlEnum("mm/s")]
          mms1,
        /// <summary>
        /// nms property
        /// </summary>
          [XmlEnum("nm/s")]
          nms,
        /// <summary>
        /// ums property
        /// </summary>
          [XmlEnum("um/s")]
          ums
        }
        /// <summary>
        /// This class represents the TimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TimeUom xsd enumeration.")]
        public enum TimeUom 
        {
        /// <summary>
        /// s property
        /// </summary>
          s,
        /// <summary>
        /// a property
        /// </summary>
          a,
        /// <summary>
        /// cs property
        /// </summary>
          cs,
        /// <summary>
        /// d property
        /// </summary>
          d,
        /// <summary>
        /// Ga property
        /// </summary>
          Ga,
        /// <summary>
        /// h property
        /// </summary>
          h,
        /// <summary>
        /// Item100s property
        /// </summary>
          [XmlEnum("100s")]
          Item100s,
        /// <summary>
        /// Ma property
        /// </summary>
          Ma,
        /// <summary>
        /// min property
        /// </summary>
          min,
        /// <summary>
        /// ms property
        /// </summary>
          ms,
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("ms/2")]
          ms2,
        /// <summary>
        /// ns property
        /// </summary>
          ns,
        /// <summary>
        /// ps property
        /// </summary>
          ps,
        /// <summary>
        /// us property
        /// </summary>
          us,
        /// <summary>
        /// wk property
        /// </summary>
          wk,
        /// <summary>
        /// Item100ka property
        /// </summary>
          [XmlEnum("100ka")]
          Item100ka
        }
        /// <summary>
        /// This class represents the ThermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ThermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperatureUom 
        {
        /// <summary>
        /// K property
        /// </summary>
          K,
        /// <summary>
        /// degC property
        /// </summary>
          degC,
        /// <summary>
        /// degF property
        /// </summary>
          degF,
        /// <summary>
        /// degR property
        /// </summary>
          degR
        }
        /// <summary>
        /// This class represents the ThermalVolumetricExpansionUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ThermalVolumetricExpansionUom xsd enumeration.")]
        public enum ThermalVolumetricExpansionUom 
        {
        /// <summary>
        /// Item1K property
        /// </summary>
          [XmlEnum("1/K")]
          Item1K,
        /// <summary>
        /// ppmdegC property
        /// </summary>
          [XmlEnum("ppm/degC")]
          ppmdegC,
        /// <summary>
        /// ppmdegF property
        /// </summary>
          [XmlEnum("ppm/degF")]
          ppmdegF,
        /// <summary>
        /// Item1degC property
        /// </summary>
          [XmlEnum("1/degC")]
          Item1degC,
        /// <summary>
        /// Item1degF property
        /// </summary>
          [XmlEnum("1/degF")]
          Item1degF,
        /// <summary>
        /// Item1degR property
        /// </summary>
          [XmlEnum("1/degR")]
          Item1degR
        }
        /// <summary>
        /// This class represents the ThermalConductivityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ThermalConductivityUom xsd enumeration.")]
        public enum ThermalConductivityUom 
        {
        /// <summary>
        /// WmK property
        /// </summary>
          [XmlEnum("W/m.K")]
          WmK,
        /// <summary>
        /// BtuhrftdegF property
        /// </summary>
          [XmlEnum("Btu/hr.ft.degF")]
          BtuhrftdegF,
        /// <summary>
        /// calhcmdegC property
        /// </summary>
          [XmlEnum("cal/h.cm.degC")]
          calhcmdegC,
        /// <summary>
        /// kcalhmdegC property
        /// </summary>
          [XmlEnum("kcal/h.m.degC")]
          kcalhmdegC,
        /// <summary>
        /// calscmdegC property
        /// </summary>
          [XmlEnum("cal/s.cm.degC")]
          calscmdegC
        }
        /// <summary>
        /// This class represents the StandardVolumePerTimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StandardVolumePerTimeUom xsd enumeration.")]
        public enum StandardVolumePerTimeUom 
        {
        /// <summary>
        /// scf60Fd property
        /// </summary>
          [XmlEnum("scf(60F)/d")]
          scf60Fd,
        /// <summary>
        /// scm15Cs property
        /// </summary>
          [XmlEnum("scm(15C)/s")]
          scm15Cs,
        /// <summary>
        /// scm15Cd property
        /// </summary>
          [XmlEnum("scm(15C)/d")]
          scm15Cd,
        /// <summary>
        /// stb60Fd property
        /// </summary>
          [XmlEnum("stb(60F)/d")]
          stb60Fd,
        /// <summary>
        /// ksm3d property
        /// </summary>
          [XmlEnum("ksm3/d")]
          ksm3d,
        /// <summary>
        /// Mscm15Cd property
        /// </summary>
          [XmlEnum("Mscm(15C)/d")]
          Mscm15Cd,
        /// <summary>
        /// MMscm15Cd property
        /// </summary>
          [XmlEnum("MMscm(15C)/d")]
          MMscm15Cd,
        /// <summary>
        /// Mstb60Fd property
        /// </summary>
          [XmlEnum("Mstb(60F)/d")]
          Mstb60Fd,
        /// <summary>
        /// MMstb60Fd property
        /// </summary>
          [XmlEnum("MMstb(60F)/d")]
          MMstb60Fd,
        /// <summary>
        /// Mscf60Fd property
        /// </summary>
          [XmlEnum("Mscf(60F)/d")]
          Mscf60Fd,
        /// <summary>
        /// MMscf60Fd property
        /// </summary>
          [XmlEnum("MMscf(60F)/d")]
          MMscf60Fd
        }
        /// <summary>
        /// This class represents the StandardVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StandardVolumeUom xsd enumeration.")]
        public enum StandardVolumeUom 
        {
        /// <summary>
        /// scm15C property
        /// </summary>
          [XmlEnum("scm(15C)")]
          scm15C,
        /// <summary>
        /// scm0C property
        /// </summary>
          [XmlEnum("scm(0C)")]
          scm0C,
        /// <summary>
        /// Gsm3 property
        /// </summary>
          Gsm3,
        /// <summary>
        /// ksm3 property
        /// </summary>
          ksm3,
        /// <summary>
        /// MMscf60F property
        /// </summary>
          [XmlEnum("MMscf(60F)")]
          MMscf60F,
        /// <summary>
        /// MMscm15C property
        /// </summary>
          [XmlEnum("MMscm(15C)")]
          MMscm15C,
        /// <summary>
        /// MMstb60F property
        /// </summary>
          [XmlEnum("MMstb(60F)")]
          MMstb60F,
        /// <summary>
        /// Mscf60F property
        /// </summary>
          [XmlEnum("Mscf(60F)")]
          Mscf60F,
        /// <summary>
        /// Mstb60F property
        /// </summary>
          [XmlEnum("Mstb(60F)")]
          Mstb60F,
        /// <summary>
        /// scf60F property
        /// </summary>
          [XmlEnum("scf(60F)")]
          scf60F,
        /// <summary>
        /// stb60F property
        /// </summary>
          [XmlEnum("stb(60F)")]
          stb60F
        }
        /// <summary>
        /// This class represents the SpecificVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SpecificVolumeUom xsd enumeration.")]
        public enum SpecificVolumeUom 
        {
        /// <summary>
        /// m3kg property
        /// </summary>
          [XmlEnum("m3/kg")]
          m3kg,
        /// <summary>
        /// bbltonUK property
        /// </summary>
          [XmlEnum("bbl/tonUK")]
          bbltonUK,
        /// <summary>
        /// bbltonUS property
        /// </summary>
          [XmlEnum("bbl/tonUS")]
          bbltonUS,
        /// <summary>
        /// cm3g property
        /// </summary>
          [XmlEnum("cm3/g")]
          cm3g,
        /// <summary>
        /// dm3kg property
        /// </summary>
          [XmlEnum("dm3/kg")]
          dm3kg,
        /// <summary>
        /// dm3t property
        /// </summary>
          [XmlEnum("dm3/t")]
          dm3t,
        /// <summary>
        /// ft3kg property
        /// </summary>
          [XmlEnum("ft3/kg")]
          ft3kg,
        /// <summary>
        /// ft3lbm property
        /// </summary>
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        /// <summary>
        /// ft3sack94 property
        /// </summary>
          [XmlEnum("ft3/sack94")]
          ft3sack94,
        /// <summary>
        /// galUSsack94 property
        /// </summary>
          [XmlEnum("galUS/sack94")]
          galUSsack94,
        /// <summary>
        /// galUKlbm property
        /// </summary>
          [XmlEnum("galUK/lbm")]
          galUKlbm,
        /// <summary>
        /// galUSlbm property
        /// </summary>
          [XmlEnum("galUS/lbm")]
          galUSlbm,
        /// <summary>
        /// galUStonUK property
        /// </summary>
          [XmlEnum("galUS/tonUK")]
          galUStonUK,
        /// <summary>
        /// galUStonUS property
        /// </summary>
          [XmlEnum("galUS/tonUS")]
          galUStonUS,
        /// <summary>
        /// L100kg property
        /// </summary>
          [XmlEnum("L/100kg")]
          L100kg,
        /// <summary>
        /// Lkg property
        /// </summary>
          [XmlEnum("L/kg")]
          Lkg,
        /// <summary>
        /// Lt property
        /// </summary>
          [XmlEnum("L/t")]
          Lt,
        /// <summary>
        /// LtonUK property
        /// </summary>
          [XmlEnum("L/tonUK")]
          LtonUK,
        /// <summary>
        /// m3g property
        /// </summary>
          [XmlEnum("m3/g")]
          m3g,
        /// <summary>
        /// m3t property
        /// </summary>
          [XmlEnum("m3/t")]
          m3t,
        /// <summary>
        /// m3tonUK property
        /// </summary>
          [XmlEnum("m3/tonUK")]
          m3tonUK,
        /// <summary>
        /// m3tonUS property
        /// </summary>
          [XmlEnum("m3/tonUS")]
          m3tonUS
        }
        /// <summary>
        /// This class represents the SpecificHeatCapacityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SpecificHeatCapacityUom xsd enumeration.")]
        public enum SpecificHeatCapacityUom 
        {
        /// <summary>
        /// JkgK property
        /// </summary>
          [XmlEnum("J/kg.K")]
          JkgK,
        /// <summary>
        /// BtulbmdegF property
        /// </summary>
          [XmlEnum("Btu/lbm.degF")]
          BtulbmdegF,
        /// <summary>
        /// BtulbmdegR property
        /// </summary>
          [XmlEnum("Btu/lbm.degR")]
          BtulbmdegR,
        /// <summary>
        /// calgK property
        /// </summary>
          [XmlEnum("cal/g.K")]
          calgK,
        /// <summary>
        /// JgK property
        /// </summary>
          [XmlEnum("J/g.K")]
          JgK,
        /// <summary>
        /// kcalkgdegC property
        /// </summary>
          [XmlEnum("kcal/kg.degC")]
          kcalkgdegC,
        /// <summary>
        /// kJkgK property
        /// </summary>
          [XmlEnum("kJ/kg.K")]
          kJkgK,
        /// <summary>
        /// kWhkgdegC property
        /// </summary>
          [XmlEnum("kW.h/kg.degC")]
          kWhkgdegC
        }
        /// <summary>
        /// This class represents the RelativePowerUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RelativePowerUom xsd enumeration.")]
        public enum RelativePowerUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Btubhphr property
        /// </summary>
          [XmlEnum("Btu/bhp.hr")]
          Btubhphr,
        /// <summary>
        /// WkW property
        /// </summary>
          [XmlEnum("W/kW")]
          WkW,
        /// <summary>
        /// WW property
        /// </summary>
          [XmlEnum("W/W")]
          WW
        }
        /// <summary>
        /// This class represents the PressureUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PressureUom xsd enumeration.")]
        public enum PressureUom 
        {
        /// <summary>
        /// Pa property
        /// </summary>
          Pa,
        /// <summary>
        /// at property
        /// </summary>
          at,
        /// <summary>
        /// atm property
        /// </summary>
          atm,
        /// <summary>
        /// bar property
        /// </summary>
          bar,
        /// <summary>
        /// cmH2O4degC property
        /// </summary>
          [XmlEnum("cmH2O(4degC)")]
          cmH2O4degC,
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne/cm2")]
          dynecm2,
        /// <summary>
        /// GPa property
        /// </summary>
          GPa,
        /// <summary>
        /// hbar property
        /// </summary>
          hbar,
        /// <summary>
        /// inH2O392F property
        /// </summary>
          [XmlEnum("inH2O(39.2F)")]
          inH2O392F,
        /// <summary>
        /// inH2O60F property
        /// </summary>
          [XmlEnum("inH2O(60F)")]
          inH2O60F,
        /// <summary>
        /// inHg32F property
        /// </summary>
          [XmlEnum("inHg(32F)")]
          inHg32F,
        /// <summary>
        /// inHg60F property
        /// </summary>
          [XmlEnum("inHg(60F)")]
          inHg60F,
        /// <summary>
        /// kgfcm2 property
        /// </summary>
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        /// <summary>
        /// kgfmm2 property
        /// </summary>
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN/m2")]
          kNm2,
        /// <summary>
        /// kPa property
        /// </summary>
          kPa,
        /// <summary>
        /// kpsi property
        /// </summary>
          kpsi,
        /// <summary>
        /// lbfft2 property
        /// </summary>
          [XmlEnum("lbf/ft2")]
          lbfft2,
        /// <summary>
        /// lbf100ft2 property
        /// </summary>
          [XmlEnum("lbf/100ft2")]
          lbf100ft2,
        /// <summary>
        /// lbfin2 property
        /// </summary>
          [XmlEnum("lbf/in2")]
          lbfin2,
        /// <summary>
        /// mbar property
        /// </summary>
          mbar,
        /// <summary>
        /// mmHg0C property
        /// </summary>
          [XmlEnum("mmHg(0C)")]
          mmHg0C,
        /// <summary>
        /// mPa property
        /// </summary>
          mPa,
        /// <summary>
        /// MPa property
        /// </summary>
          MPa,
        /// <summary>
        /// Mpsi property
        /// </summary>
          Mpsi,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N/m2")]
          Nm2,
        /// <summary>
        /// Nmm2 property
        /// </summary>
          [XmlEnum("N/mm2")]
          Nmm2,
        /// <summary>
        /// Pag property
        /// </summary>
          [XmlEnum("Pa(g)")]
          Pag,
        /// <summary>
        /// pPa property
        /// </summary>
          pPa,
        /// <summary>
        /// psi property
        /// </summary>
          psi,
        /// <summary>
        /// psia property
        /// </summary>
          psia,
        /// <summary>
        /// psig property
        /// </summary>
          psig,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonfUS/ft2")]
          tonfUSft2,
        /// <summary>
        /// tonfUSin2 property
        /// </summary>
          [XmlEnum("tonfUS/in2")]
          tonfUSin2,
        /// <summary>
        /// torr property
        /// </summary>
          torr,
        /// <summary>
        /// ubar property
        /// </summary>
          ubar,
        /// <summary>
        /// umHg0C property
        /// </summary>
          [XmlEnum("umHg(0C)")]
          umHg0C,
        /// <summary>
        /// uPa property
        /// </summary>
          uPa,
        /// <summary>
        /// upsi property
        /// </summary>
          upsi
        }
        /// <summary>
        /// This class represents the PowerUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PowerUom xsd enumeration.")]
        public enum PowerUom 
        {
        /// <summary>
        /// W property
        /// </summary>
          W,
        /// <summary>
        /// ch property
        /// </summary>
          ch,
        /// <summary>
        /// CV property
        /// </summary>
          CV,
        /// <summary>
        /// ehp property
        /// </summary>
          ehp,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// hhp property
        /// </summary>
          hhp,
        /// <summary>
        /// hp property
        /// </summary>
          hp,
        /// <summary>
        /// kcalh property
        /// </summary>
          [XmlEnum("kcal/h")]
          kcalh,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// MJa property
        /// </summary>
          [XmlEnum("MJ/a")]
          MJa,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// tonofrefrig property
        /// </summary>
          [XmlEnum("ton of refrig")]
          tonofrefrig,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// uW property
        /// </summary>
          uW
        }
        /// <summary>
        /// This class represents the PermeabilityRockUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PermeabilityRockUom xsd enumeration.")]
        public enum PermeabilityRockUom 
        {
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// mD property
        /// </summary>
          mD
        }
        /// <summary>
        /// This class represents the PerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PerLengthUom xsd enumeration.")]
        public enum PerLengthUom 
        {
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// Item1angstrom property
        /// </summary>
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        /// <summary>
        /// Item1cm property
        /// </summary>
          [XmlEnum("1/cm")]
          Item1cm,
        /// <summary>
        /// Item1ft property
        /// </summary>
          [XmlEnum("1/ft")]
          Item1ft,
        /// <summary>
        /// Item1in property
        /// </summary>
          [XmlEnum("1/in")]
          Item1in,
        /// <summary>
        /// Item1mi property
        /// </summary>
          [XmlEnum("1/mi")]
          Item1mi,
        /// <summary>
        /// Item1mm property
        /// </summary>
          [XmlEnum("1/mm")]
          Item1mm,
        /// <summary>
        /// Item1nm property
        /// </summary>
          [XmlEnum("1/nm")]
          Item1nm,
        /// <summary>
        /// Item1yd property
        /// </summary>
          [XmlEnum("1/yd")]
          Item1yd
        }
        /// <summary>
        /// This class represents the MomentOfForceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MomentOfForceUom xsd enumeration.")]
        public enum MomentOfForceUom 
        {
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// dNm property
        /// </summary>
          [XmlEnum("dN.m")]
          dNm,
        /// <summary>
        /// daNm property
        /// </summary>
          [XmlEnum("daN.m")]
          daNm,
        /// <summary>
        /// ftlbf property
        /// </summary>
          [XmlEnum("ft.lbf")]
          ftlbf,
        /// <summary>
        /// kftlbf property
        /// </summary>
          [XmlEnum("kft.lbf")]
          kftlbf,
        /// <summary>
        /// kgfm property
        /// </summary>
          [XmlEnum("kgf.m")]
          kgfm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN.m")]
          kNm,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf.ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf.in")]
          lbfin,
        /// <summary>
        /// lbmft2s2 property
        /// </summary>
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N.m")]
          Nm,
        /// <summary>
        /// pdlft property
        /// </summary>
          [XmlEnum("pdl.ft")]
          pdlft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonfUS.ft")]
          tonfUSft,
        /// <summary>
        /// tonfUSmi property
        /// </summary>
          [XmlEnum("tonfUS.mi")]
          tonfUSmi
        }
        /// <summary>
        /// This class represents the MassPerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MassPerLengthUom xsd enumeration.")]
        public enum MassPerLengthUom 
        {
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg/m")]
          kgm,
        /// <summary>
        /// klbmin property
        /// </summary>
          [XmlEnum("klbm/in")]
          klbmin,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm/ft")]
          lbmft,
        /// <summary>
        /// Mgin property
        /// </summary>
          [XmlEnum("Mg/in")]
          Mgin,
        /// <summary>
        /// kgmcm2 property
        /// </summary>
          [XmlEnum("kg.m/cm2")]
          kgmcm2
        }
        /// <summary>
        /// This class represents the MassUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MassUom xsd enumeration.")]
        public enum MassUom 
        {
        /// <summary>
        /// kg property
        /// </summary>
          kg,
        /// <summary>
        /// ag property
        /// </summary>
          ag,
        /// <summary>
        /// ct property
        /// </summary>
          ct,
        /// <summary>
        /// cwtUK property
        /// </summary>
          cwtUK,
        /// <summary>
        /// cwtUS property
        /// </summary>
          cwtUS,
        /// <summary>
        /// g property
        /// </summary>
          g,
        /// <summary>
        /// grain property
        /// </summary>
          grain,
        /// <summary>
        /// klbm property
        /// </summary>
          klbm,
        /// <summary>
        /// lbm property
        /// </summary>
          lbm,
        /// <summary>
        /// Mg property
        /// </summary>
          Mg,
        /// <summary>
        /// mg property
        /// </summary>
          mg,
        /// <summary>
        /// ozav property
        /// </summary>
          [XmlEnum("oz(av)")]
          ozav,
        /// <summary>
        /// oztroy property
        /// </summary>
          [XmlEnum("oz(troy)")]
          oztroy,
        /// <summary>
        /// ozm property
        /// </summary>
          ozm,
        /// <summary>
        /// sack94 property
        /// </summary>
          sack94,
        /// <summary>
        /// t property
        /// </summary>
          t,
        /// <summary>
        /// tonUK property
        /// </summary>
          tonUK,
        /// <summary>
        /// tonUS property
        /// </summary>
          tonUS,
        /// <summary>
        /// ug property
        /// </summary>
          ug
        }
        /// <summary>
        /// This class represents the MassConcentrationUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MassConcentrationUom xsd enumeration.")]
        public enum MassConcentrationUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// gkg property
        /// </summary>
          [XmlEnum("g/kg")]
          gkg,
        /// <summary>
        /// kgkg property
        /// </summary>
          [XmlEnum("kg/kg")]
          kgkg,
        /// <summary>
        /// kgsack94 property
        /// </summary>
          [XmlEnum("kg/sack94")]
          kgsack94,
        /// <summary>
        /// mgkg property
        /// </summary>
          [XmlEnum("mg/kg")]
          mgkg,
        /// <summary>
        /// permil property
        /// </summary>
          permil,
        /// <summary>
        /// ppdk property
        /// </summary>
          ppdk,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm
        }
        /// <summary>
        /// This class represents the MagneticInductionUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MagneticInductionUom xsd enumeration.")]
        public enum MagneticInductionUom 
        {
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// gauss property
        /// </summary>
          gauss,
        /// <summary>
        /// mT property
        /// </summary>
          mT,
        /// <summary>
        /// mgauss property
        /// </summary>
          mgauss,
        /// <summary>
        /// nT property
        /// </summary>
          nT,
        /// <summary>
        /// uT property
        /// </summary>
          uT
        }
        /// <summary>
        /// This class represents the LengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LengthPerLengthUom xsd enumeration.")]
        public enum LengthPerLengthUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// ft100ft property
        /// </summary>
          [XmlEnum("ft/100ft")]
          ft100ft,
        /// <summary>
        /// ftft property
        /// </summary>
          [XmlEnum("ft/ft")]
          ftft,
        /// <summary>
        /// ftin property
        /// </summary>
          [XmlEnum("ft/in")]
          ftin,
        /// <summary>
        /// ftm property
        /// </summary>
          [XmlEnum("ft/m")]
          ftm,
        /// <summary>
        /// ftmi property
        /// </summary>
          [XmlEnum("ft/mi")]
          ftmi,
        /// <summary>
        /// kmcm property
        /// </summary>
          [XmlEnum("km/cm")]
          kmcm,
        /// <summary>
        /// m30m property
        /// </summary>
          [XmlEnum("m/30m")]
          m30m,
        /// <summary>
        /// mcm property
        /// </summary>
          [XmlEnum("m/cm")]
          mcm,
        /// <summary>
        /// mkm property
        /// </summary>
          [XmlEnum("m/km")]
          mkm,
        /// <summary>
        /// mm property
        /// </summary>
          [XmlEnum("m/m")]
          mm,
        /// <summary>
        /// miin property
        /// </summary>
          [XmlEnum("mi/in")]
          miin
        }
        /// <summary>
        /// This class represents the IlluminanceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the IlluminanceUom xsd enumeration.")]
        public enum IlluminanceUom 
        {
        /// <summary>
        /// lx property
        /// </summary>
          lx,
        /// <summary>
        /// lmm2 property
        /// </summary>
          [XmlEnum("lm/m2")]
          lmm2,
        /// <summary>
        /// footcandle property
        /// </summary>
          footcandle,
        /// <summary>
        /// klx property
        /// </summary>
          klx
        }
        /// <summary>
        /// This class represents the ForcePerVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ForcePerVolumeUom xsd enumeration.")]
        public enum ForcePerVolumeUom 
        {
        /// <summary>
        /// Nm3 property
        /// </summary>
          [XmlEnum("N/m3")]
          Nm3,
        /// <summary>
        /// atm100m property
        /// </summary>
          [XmlEnum("atm/100m")]
          atm100m,
        /// <summary>
        /// atmm property
        /// </summary>
          [XmlEnum("atm/m")]
          atmm,
        /// <summary>
        /// barkm property
        /// </summary>
          [XmlEnum("bar/km")]
          barkm,
        /// <summary>
        /// barm property
        /// </summary>
          [XmlEnum("bar/m")]
          barm,
        /// <summary>
        /// GPacm property
        /// </summary>
          [XmlEnum("GPa/cm")]
          GPacm,
        /// <summary>
        /// kPa100m property
        /// </summary>
          [XmlEnum("kPa/100m")]
          kPa100m,
        /// <summary>
        /// kPam property
        /// </summary>
          [XmlEnum("kPa/m")]
          kPam,
        /// <summary>
        /// lbfft3 property
        /// </summary>
          [XmlEnum("lbf/ft3")]
          lbfft3,
        /// <summary>
        /// lbfgalUS property
        /// </summary>
          [XmlEnum("lbf/galUS")]
          lbfgalUS,
        /// <summary>
        /// MPam property
        /// </summary>
          [XmlEnum("MPa/m")]
          MPam,
        /// <summary>
        /// psift property
        /// </summary>
          [XmlEnum("psi/ft")]
          psift,
        /// <summary>
        /// psi100ft property
        /// </summary>
          [XmlEnum("psi/100ft")]
          psi100ft,
        /// <summary>
        /// psikft property
        /// </summary>
          [XmlEnum("psi/kft")]
          psikft,
        /// <summary>
        /// psim property
        /// </summary>
          [XmlEnum("psi/m")]
          psim,
        /// <summary>
        /// Pam property
        /// </summary>
          [XmlEnum("Pa/m")]
          Pam,
        /// <summary>
        /// atmft property
        /// </summary>
          [XmlEnum("atm/ft")]
          atmft
        }
        /// <summary>
        /// This class represents the ForcePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ForcePerLengthUom xsd enumeration.")]
        public enum ForcePerLengthUom 
        {
        /// <summary>
        /// N30m property
        /// </summary>
          [XmlEnum("N/30m")]
          N30m,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N/m")]
          Nm,
        /// <summary>
        /// dynecm property
        /// </summary>
          [XmlEnum("dyne/cm")]
          dynecm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN/m")]
          kNm,
        /// <summary>
        /// kgfcm property
        /// </summary>
          [XmlEnum("kgf/cm")]
          kgfcm,
        /// <summary>
        /// lbf100ft property
        /// </summary>
          [XmlEnum("lbf/100ft")]
          lbf100ft,
        /// <summary>
        /// lbf30m property
        /// </summary>
          [XmlEnum("lbf/30m")]
          lbf30m,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf/ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf/in")]
          lbfin,
        /// <summary>
        /// mNkm property
        /// </summary>
          [XmlEnum("mN/km")]
          mNkm,
        /// <summary>
        /// mNm property
        /// </summary>
          [XmlEnum("mN/m")]
          mNm,
        /// <summary>
        /// pdlcm property
        /// </summary>
          [XmlEnum("pdl/cm")]
          pdlcm,
        /// <summary>
        /// tonfUKft property
        /// </summary>
          [XmlEnum("tonfUK/ft")]
          tonfUKft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonfUS/ft")]
          tonfUSft
        }
        /// <summary>
        /// This class represents the ForceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ForceUom xsd enumeration.")]
        public enum ForceUom 
        {
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// daN property
        /// </summary>
          daN,
        /// <summary>
        /// dyne property
        /// </summary>
          dyne,
        /// <summary>
        /// gf property
        /// </summary>
          gf,
        /// <summary>
        /// kdyne property
        /// </summary>
          kdyne,
        /// <summary>
        /// kgf property
        /// </summary>
          kgf,
        /// <summary>
        /// klbf property
        /// </summary>
          klbf,
        /// <summary>
        /// kN property
        /// </summary>
          kN,
        /// <summary>
        /// lbf property
        /// </summary>
          lbf,
        /// <summary>
        /// Mgf property
        /// </summary>
          Mgf,
        /// <summary>
        /// mN property
        /// </summary>
          mN,
        /// <summary>
        /// MN property
        /// </summary>
          MN,
        /// <summary>
        /// ozf property
        /// </summary>
          ozf,
        /// <summary>
        /// pdl property
        /// </summary>
          pdl,
        /// <summary>
        /// tonfUK property
        /// </summary>
          tonfUK,
        /// <summary>
        /// tonfUS property
        /// </summary>
          tonfUS,
        /// <summary>
        /// uN property
        /// </summary>
          uN
        }
        /// <summary>
        /// This class represents the EquivalentPerMassUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the EquivalentPerMassUom xsd enumeration.")]
        public enum EquivalentPerMassUom 
        {
        /// <summary>
        /// eqkg property
        /// </summary>
          [XmlEnum("eq/kg")]
          eqkg,
        /// <summary>
        /// meqg property
        /// </summary>
          [XmlEnum("meq/g")]
          meqg,
        /// <summary>
        /// meq100g property
        /// </summary>
          [XmlEnum("meq/100g")]
          meq100g
        }
        /// <summary>
        /// This class represents the ElectricPotentialUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ElectricPotentialUom xsd enumeration.")]
        public enum ElectricPotentialUom 
        {
        /// <summary>
        /// V property
        /// </summary>
          V,
        /// <summary>
        /// kV property
        /// </summary>
          kV,
        /// <summary>
        /// mV property
        /// </summary>
          mV,
        /// <summary>
        /// MV property
        /// </summary>
          MV,
        /// <summary>
        /// uV property
        /// </summary>
          uV
        }
        /// <summary>
        /// This class represents the ElectricCurrentUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ElectricCurrentUom xsd enumeration.")]
        public enum ElectricCurrentUom 
        {
        /// <summary>
        /// A property
        /// </summary>
          A,
        /// <summary>
        /// MA property
        /// </summary>
          MA,
        /// <summary>
        /// kA property
        /// </summary>
          kA,
        /// <summary>
        /// mA property
        /// </summary>
          mA,
        /// <summary>
        /// nA property
        /// </summary>
          nA,
        /// <summary>
        /// pA property
        /// </summary>
          pA,
        /// <summary>
        /// uA property
        /// </summary>
          uA
        }
        /// <summary>
        /// This class represents the DynamicViscosityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DynamicViscosityUom xsd enumeration.")]
        public enum DynamicViscosityUom 
        {
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas,
        /// <summary>
        /// cP property
        /// </summary>
          cP,
        /// <summary>
        /// P property
        /// </summary>
          P,
        /// <summary>
        /// psis property
        /// </summary>
          [XmlEnum("psi.s")]
          psis,
        /// <summary>
        /// dynescm2 property
        /// </summary>
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        /// <summary>
        /// kgfsm2 property
        /// </summary>
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        /// <summary>
        /// lbfsft2 property
        /// </summary>
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        /// <summary>
        /// lbfsin2 property
        /// </summary>
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        /// <summary>
        /// mPas property
        /// </summary>
          [XmlEnum("mPa.s")]
          mPas,
        /// <summary>
        /// Nsm2 property
        /// </summary>
          [XmlEnum("N.s/m2")]
          Nsm2
        }
        /// <summary>
        /// This class represents the DimensionlessUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DimensionlessUom xsd enumeration.")]
        public enum DimensionlessUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// mEuc property
        /// </summary>
          mEuc,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// uEuc property
        /// </summary>
          uEuc
        }
        /// <summary>
        /// This class represents the DensityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DensityUom xsd enumeration.")]
        public enum DensityUom 
        {
        /// <summary>
        /// kgm3 property
        /// </summary>
          [XmlEnum("kg/m3")]
          kgm3,
        /// <summary>
        /// Item10Mgm3 property
        /// </summary>
          [XmlEnum("10Mg/m3")]
          Item10Mgm3,
        /// <summary>
        /// dAPI property
        /// </summary>
          dAPI,
        /// <summary>
        /// gcm3 property
        /// </summary>
          [XmlEnum("g/cm3")]
          gcm3,
        /// <summary>
        /// gdm3 property
        /// </summary>
          [XmlEnum("g/dm3")]
          gdm3,
        /// <summary>
        /// ggalUK property
        /// </summary>
          [XmlEnum("g/galUK")]
          ggalUK,
        /// <summary>
        /// ggalUS property
        /// </summary>
          [XmlEnum("g/galUS")]
          ggalUS,
        /// <summary>
        /// gL property
        /// </summary>
          [XmlEnum("g/L")]
          gL,
        /// <summary>
        /// gm3 property
        /// </summary>
          [XmlEnum("g/m3")]
          gm3,
        /// <summary>
        /// grainft3 property
        /// </summary>
          [XmlEnum("grain/ft3")]
          grainft3,
        /// <summary>
        /// graingalUS property
        /// </summary>
          [XmlEnum("grain/galUS")]
          graingalUS,
        /// <summary>
        /// grain100ft3 property
        /// </summary>
          [XmlEnum("grain/100ft3")]
          grain100ft3,
        /// <summary>
        /// kgdm3 property
        /// </summary>
          [XmlEnum("kg/dm3")]
          kgdm3,
        /// <summary>
        /// kgL property
        /// </summary>
          [XmlEnum("kg/L")]
          kgL,
        /// <summary>
        /// Mgm3 property
        /// </summary>
          [XmlEnum("Mg/m3")]
          Mgm3,
        /// <summary>
        /// lbm10bbl property
        /// </summary>
          [XmlEnum("lbm/10bbl")]
          lbm10bbl,
        /// <summary>
        /// lbmbbl property
        /// </summary>
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        /// <summary>
        /// lbmft3 property
        /// </summary>
          [XmlEnum("lbm/ft3")]
          lbmft3,
        /// <summary>
        /// lbmgalUK property
        /// </summary>
          [XmlEnum("lbm/galUK")]
          lbmgalUK,
        /// <summary>
        /// lbm1000galUK property
        /// </summary>
          [XmlEnum("lbm/1000galUK")]
          lbm1000galUK,
        /// <summary>
        /// lbmgalUS property
        /// </summary>
          [XmlEnum("lbm/galUS")]
          lbmgalUS,
        /// <summary>
        /// lbm1000galUS property
        /// </summary>
          [XmlEnum("lbm/1000galUS")]
          lbm1000galUS,
        /// <summary>
        /// lbmin3 property
        /// </summary>
          [XmlEnum("lbm/in3")]
          lbmin3,
        /// <summary>
        /// lbmMbbl property
        /// </summary>
          [XmlEnum("lbm/Mbbl")]
          lbmMbbl,
        /// <summary>
        /// mgdm3 property
        /// </summary>
          [XmlEnum("mg/dm3")]
          mgdm3,
        /// <summary>
        /// mggalUS property
        /// </summary>
          [XmlEnum("mg/galUS")]
          mggalUS,
        /// <summary>
        /// mgL property
        /// </summary>
          [XmlEnum("mg/L")]
          mgL,
        /// <summary>
        /// mgm3 property
        /// </summary>
          [XmlEnum("mg/m3")]
          mgm3,
        /// <summary>
        /// ugcm3 property
        /// </summary>
          [XmlEnum("ug/cm3")]
          ugcm3
        }
        /// <summary>
        /// This class represents the CompressibilityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CompressibilityUom xsd enumeration.")]
        public enum CompressibilityUom 
        {
        /// <summary>
        /// Item1psi property
        /// </summary>
          [XmlEnum("1/psi")]
          Item1psi,
        /// <summary>
        /// Item1upsi property
        /// </summary>
          [XmlEnum("1/upsi")]
          Item1upsi,
        /// <summary>
        /// Item1Pa property
        /// </summary>
          [XmlEnum("1/Pa")]
          Item1Pa,
        /// <summary>
        /// Item1bar property
        /// </summary>
          [XmlEnum("1/bar")]
          Item1bar,
        /// <summary>
        /// Item1kPa property
        /// </summary>
          [XmlEnum("1/kPa")]
          Item1kPa,
        /// <summary>
        /// Item1pPa property
        /// </summary>
          [XmlEnum("1/pPa")]
          Item1pPa
        }
        /// <summary>
        /// This class represents the AreaPerAreaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AreaPerAreaUom xsd enumeration.")]
        public enum AreaPerAreaUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// in2ft2 property
        /// </summary>
          [XmlEnum("in2/ft2")]
          in2ft2,
        /// <summary>
        /// in2in2 property
        /// </summary>
          [XmlEnum("in2/in2")]
          in2in2,
        /// <summary>
        /// m2m2 property
        /// </summary>
          [XmlEnum("m2/m2")]
          m2m2,
        /// <summary>
        /// mm2mm2 property
        /// </summary>
          [XmlEnum("mm2/mm2")]
          mm2mm2
        }
        /// <summary>
        /// This class represents the AreaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AreaUom xsd enumeration.")]
        public enum AreaUom 
        {
        /// <summary>
        /// m2 property
        /// </summary>
          m2,
        /// <summary>
        /// acre property
        /// </summary>
          acre,
        /// <summary>
        /// b property
        /// </summary>
          b,
        /// <summary>
        /// cm2 property
        /// </summary>
          cm2,
        /// <summary>
        /// ft2 property
        /// </summary>
          ft2,
        /// <summary>
        /// ha property
        /// </summary>
          ha,
        /// <summary>
        /// in2 property
        /// </summary>
          in2,
        /// <summary>
        /// km2 property
        /// </summary>
          km2,
        /// <summary>
        /// mi2 property
        /// </summary>
          mi2,
        /// <summary>
        /// miUS2 property
        /// </summary>
          miUS2,
        /// <summary>
        /// mm2 property
        /// </summary>
          mm2,
        /// <summary>
        /// um2 property
        /// </summary>
          um2,
        /// <summary>
        /// yd2 property
        /// </summary>
          yd2
        }
        /// <summary>
        /// This class represents the AnglePerTimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AnglePerTimeUom xsd enumeration.")]
        public enum AnglePerTimeUom 
        {
        /// <summary>
        /// rads property
        /// </summary>
          [XmlEnum("rad/s")]
          rads,
        /// <summary>
        /// cs property
        /// </summary>
          [XmlEnum("c/s")]
          cs,
        /// <summary>
        /// degah property
        /// </summary>
          [XmlEnum("dega/h")]
          degah,
        /// <summary>
        /// degamin property
        /// </summary>
          [XmlEnum("dega/min")]
          degamin,
        /// <summary>
        /// degas property
        /// </summary>
          [XmlEnum("dega/s")]
          degas,
        /// <summary>
        /// revs property
        /// </summary>
          [XmlEnum("rev/s")]
          revs,
        /// <summary>
        /// rpm property
        /// </summary>
          rpm
        }
        /// <summary>
        /// This class represents the AnglePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AnglePerLengthUom xsd enumeration.")]
        public enum AnglePerLengthUom 
        {
        /// <summary>
        /// radm property
        /// </summary>
          [XmlEnum("rad/m")]
          radm,
        /// <summary>
        /// dega30ft property
        /// </summary>
          [XmlEnum("dega/30ft")]
          dega30ft,
        /// <summary>
        /// degaft property
        /// </summary>
          [XmlEnum("dega/ft")]
          degaft,
        /// <summary>
        /// dega100ft property
        /// </summary>
          [XmlEnum("dega/100ft")]
          dega100ft,
        /// <summary>
        /// degam property
        /// </summary>
          [XmlEnum("dega/m")]
          degam,
        /// <summary>
        /// dega30m property
        /// </summary>
          [XmlEnum("dega/30m")]
          dega30m,
        /// <summary>
        /// radft property
        /// </summary>
          [XmlEnum("rad/ft")]
          radft
        }
        /// <summary>
        /// This class represents the AccelerationLinearUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AccelerationLinearUom xsd enumeration.")]
        public enum AccelerationLinearUom 
        {
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("m/s2")]
          ms2,
        /// <summary>
        /// cms2 property
        /// </summary>
          [XmlEnum("cm/s2")]
          cms2,
        /// <summary>
        /// fts2 property
        /// </summary>
          [XmlEnum("ft/s2")]
          fts2,
        /// <summary>
        /// Gal property
        /// </summary>
          Gal,
        /// <summary>
        /// mgn property
        /// </summary>
          mgn,
        /// <summary>
        /// gn property
        /// </summary>
          gn,
        /// <summary>
        /// mGal property
        /// </summary>
          mGal
        }
        /// <summary>
        /// This class represents the ItemState xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemState xsd enumeration.")]
        public enum ItemState 
        {
        /// <summary>
        /// Actual data measured or entered at the well site.
        /// </summary>
          actual,
        /// <summary>
        /// Model data used for "what if" calculations.
        /// </summary>
          model,
        /// <summary>
        /// A planned object. That is, one which is expected to be executed in the future.
        /// </summary>
          plan,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PrimitiveType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PrimitiveType xsd enumeration.")]
        public enum PrimitiveType 
        {
        /// <summary>
        /// string property
        /// </summary>
          @string,
        /// <summary>
        /// boolean property
        /// </summary>
          boolean,
        /// <summary>
        /// float property
        /// </summary>
          @float,
        /// <summary>
        /// double property
        /// </summary>
          @double,
        /// <summary>
        /// duration property
        /// </summary>
          duration,
        /// <summary>
        /// dateTime property
        /// </summary>
          dateTime,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// date property
        /// </summary>
          date,
        /// <summary>
        /// gYearMonth property
        /// </summary>
          gYearMonth,
        /// <summary>
        /// gYear property
        /// </summary>
          gYear,
        /// <summary>
        /// gMonthDay property
        /// </summary>
          gMonthDay,
        /// <summary>
        /// gDay property
        /// </summary>
          gDay,
        /// <summary>
        /// gMonth property
        /// </summary>
          gMonth,
        /// <summary>
        /// base64Binary property
        /// </summary>
          base64Binary,
        /// <summary>
        /// anyURI property
        /// </summary>
          anyURI,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogIndexType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogIndexType xsd enumeration.")]
        public enum LogIndexType 
        {
        /// <summary>
        /// datetime property
        /// </summary>
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// elapsedtime property
        /// </summary>
          [XmlEnum("elapsed time")]
          elapsedtime,
        /// <summary>
        /// Log is indexed on length (not a depth).
        /// </summary>
          length,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// verticaldepth property
        /// </summary>
          [XmlEnum("vertical depth")]
          verticaldepth,
        /// <summary>
        /// Any other index type for a log.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PerfConveyanceMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PerfConveyanceMethod xsd enumeration.")]
        public enum PerfConveyanceMethod 
        {
        /// <summary>
        /// NA property
        /// </summary>
          [XmlEnum("N/A")]
          NA,
        /// <summary>
        /// SlickLine property
        /// </summary>
          [XmlEnum("Slick Line")]
          SlickLine,
        /// <summary>
        /// TubingConveyed property
        /// </summary>
          [XmlEnum("Tubing Conveyed")]
          TubingConveyed,
        /// <summary>
        /// Wireline property
        /// </summary>
          Wireline
        }
        /// <summary>
        /// This class represents the EventClassType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the EventClassType xsd enumeration.")]
        public enum EventClassType 
        {
        /// <summary>
        /// Job property
        /// </summary>
          Job,
        /// <summary>
        /// DailyReport property
        /// </summary>
          [XmlEnum("Daily Report")]
          DailyReport,
        /// <summary>
        /// TimeLogTimeMeasure property
        /// </summary>
          [XmlEnum("Time Log (Time Measure)")]
          TimeLogTimeMeasure,
        /// <summary>
        /// DailyCost property
        /// </summary>
          [XmlEnum("Daily Cost")]
          DailyCost,
        /// <summary>
        /// NPTlosttimeevent property
        /// </summary>
          [XmlEnum("NPT (lost time event)")]
          NPTlosttimeevent,
        /// <summary>
        /// Failuredownholeequipmentonly property
        /// </summary>
          [XmlEnum("Failure (downhole equipment only)")]
          Failuredownholeequipmentonly,
        /// <summary>
        /// MudAttributes property
        /// </summary>
          [XmlEnum("Mud Attributes")]
          MudAttributes,
        /// <summary>
        /// JobPlanphases property
        /// </summary>
          [XmlEnum("Job Plan (phases)")]
          JobPlanphases
        }
        /// <summary>
        /// This class represents the PhysicalStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PhysicalStatus xsd enumeration.")]
        public enum PhysicalStatus 
        {
        /// <summary>
        /// The open physical status the interval.
        /// </summary>
          open,
        /// <summary>
        /// The squeezed physical status the interval.
        /// </summary>
          closed,
        /// <summary>
        /// The proposed physical status the interval.
        /// </summary>
          proposed
        }
        /// <summary>
        /// This class represents the PerforationStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PerforationStatus xsd enumeration.")]
        public enum PerforationStatus 
        {
        /// <summary>
        /// open property
        /// </summary>
          open,
        /// <summary>
        /// squeezed property
        /// </summary>
          squeezed,
        /// <summary>
        /// proposed property
        /// </summary>
          proposed
        }
        /// <summary>
        /// This class represents the PerforationToolType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PerforationToolType xsd enumeration.")]
        public enum PerforationToolType 
        {
        /// <summary>
        /// NA property
        /// </summary>
          [XmlEnum("N/A")]
          NA,
        /// <summary>
        /// CasingGun property
        /// </summary>
          [XmlEnum("Casing Gun")]
          CasingGun,
        /// <summary>
        /// ThroughTubingGun property
        /// </summary>
          [XmlEnum("Through Tubing Gun")]
          ThroughTubingGun,
        /// <summary>
        /// SlotsMachineCut property
        /// </summary>
          [XmlEnum("Slots-Machine Cut")]
          SlotsMachineCut,
        /// <summary>
        /// SlotsUndercut property
        /// </summary>
          [XmlEnum("Slots-Undercut")]
          SlotsUndercut,
        /// <summary>
        /// TCPGun property
        /// </summary>
          [XmlEnum("TCP Gun")]
          TCPGun,
        /// <summary>
        /// StripGun property
        /// </summary>
          [XmlEnum("Strip Gun")]
          StripGun,
        /// <summary>
        /// Drilled property
        /// </summary>
          Drilled,
        /// <summary>
        /// Mandrel property
        /// </summary>
          Mandrel,
        /// <summary>
        /// CoiledTubingJetTool property
        /// </summary>
          [XmlEnum("Coiled Tubing Jet Tool")]
          CoiledTubingJetTool
        }
        /// <summary>
        /// This class represents the EquipmentType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the EquipmentType xsd enumeration.")]
        public enum EquipmentType 
        {
        /// <summary>
        /// BridgePlug property
        /// </summary>
          [XmlEnum("Bridge Plug")]
          BridgePlug,
        /// <summary>
        /// BullPlug property
        /// </summary>
          [XmlEnum("Bull Plug")]
          BullPlug,
        /// <summary>
        /// CapillaryTubing property
        /// </summary>
          [XmlEnum("Capillary Tubing")]
          CapillaryTubing,
        /// <summary>
        /// CasingCrossover property
        /// </summary>
          [XmlEnum("Casing Crossover")]
          CasingCrossover,
        /// <summary>
        /// CasingHanger property
        /// </summary>
          [XmlEnum("Casing Hanger")]
          CasingHanger,
        /// <summary>
        /// CasingHead property
        /// </summary>
          [XmlEnum("Casing Head")]
          CasingHead,
        /// <summary>
        /// CasingLinerExpandable property
        /// </summary>
          [XmlEnum("Casing Liner-Expandable")]
          CasingLinerExpandable,
        /// <summary>
        /// CasingShoe property
        /// </summary>
          [XmlEnum("Casing Shoe")]
          CasingShoe,
        /// <summary>
        /// CasingSpool property
        /// </summary>
          [XmlEnum("Casing Spool")]
          CasingSpool,
        /// <summary>
        /// CasingCasingLiner property
        /// </summary>
          [XmlEnum("Casing/Casing Liner")]
          CasingCasingLiner,
        /// <summary>
        /// CementbehindCasing property
        /// </summary>
          [XmlEnum("Cement (behind Casing)")]
          CementbehindCasing,
        /// <summary>
        /// CementBasket property
        /// </summary>
          [XmlEnum("Cement Basket")]
          CementBasket,
        /// <summary>
        /// CementRetainer property
        /// </summary>
          [XmlEnum("Cement Retainer")]
          CementRetainer,
        /// <summary>
        /// CementSqueeze property
        /// </summary>
          [XmlEnum("Cement Squeeze")]
          CementSqueeze,
        /// <summary>
        /// CementStageTool property
        /// </summary>
          [XmlEnum("Cement Stage Tool")]
          CementStageTool,
        /// <summary>
        /// ChemicalInjectionMandrel property
        /// </summary>
          [XmlEnum("Chemical Injection Mandrel")]
          ChemicalInjectionMandrel,
        /// <summary>
        /// ChemicalInjectionValve property
        /// </summary>
          [XmlEnum("Chemical Injection Valve")]
          ChemicalInjectionValve,
        /// <summary>
        /// CorrosionCouponCarrier property
        /// </summary>
          [XmlEnum("Corrosion Coupon Carrier")]
          CorrosionCouponCarrier,
        /// <summary>
        /// DipTube property
        /// </summary>
          [XmlEnum("Dip Tube")]
          DipTube,
        /// <summary>
        /// DownholeChoke property
        /// </summary>
          [XmlEnum("Downhole Choke")]
          DownholeChoke,
        /// <summary>
        /// DownholeSensor property
        /// </summary>
          [XmlEnum("Downhole Sensor")]
          DownholeSensor,
        /// <summary>
        /// ESPAssembly property
        /// </summary>
          [XmlEnum("ESP Assembly")]
          ESPAssembly,
        /// <summary>
        /// ESPBoltonDischarge property
        /// </summary>
          [XmlEnum("ESP Bolt on Discharge")]
          ESPBoltonDischarge,
        /// <summary>
        /// ESPBoltonIntake property
        /// </summary>
          [XmlEnum("ESP Bolt on Intake")]
          ESPBoltonIntake,
        /// <summary>
        /// ESPBoltonMotorBase property
        /// </summary>
          [XmlEnum("ESP Bolt on Motor Base")]
          ESPBoltonMotorBase,
        /// <summary>
        /// ESPBoltonMotorHead property
        /// </summary>
          [XmlEnum("ESP Bolt on Motor Head")]
          ESPBoltonMotorHead,
        /// <summary>
        /// ESPCable property
        /// </summary>
          [XmlEnum("ESP Cable")]
          ESPCable,
        /// <summary>
        /// ESPGasHandler property
        /// </summary>
          [XmlEnum("ESP Gas Handler")]
          ESPGasHandler,
        /// <summary>
        /// ESPGasSeparator property
        /// </summary>
          [XmlEnum("ESP Gas Separator")]
          ESPGasSeparator,
        /// <summary>
        /// ESPLowerPigtail property
        /// </summary>
          [XmlEnum("ESP Lower Pigtail")]
          ESPLowerPigtail,
        /// <summary>
        /// ESPMotor property
        /// </summary>
          [XmlEnum("ESP Motor")]
          ESPMotor,
        /// <summary>
        /// ESPMotorBaseCentralizer property
        /// </summary>
          [XmlEnum("ESP Motor Base Centralizer")]
          ESPMotorBaseCentralizer,
        /// <summary>
        /// ESPMotorFlatCable property
        /// </summary>
          [XmlEnum("ESP Motor Flat Cable")]
          ESPMotorFlatCable,
        /// <summary>
        /// ESPMotorShroud property
        /// </summary>
          [XmlEnum("ESP Motor Shroud")]
          ESPMotorShroud,
        /// <summary>
        /// ESPPromotor property
        /// </summary>
          [XmlEnum("ESP Promotor")]
          ESPPromotor,
        /// <summary>
        /// ESPPump property
        /// </summary>
          [XmlEnum("ESP Pump")]
          ESPPump,
        /// <summary>
        /// ESPPumpDischargeSensorSub property
        /// </summary>
          [XmlEnum("ESP Pump Discharge Sensor Sub")]
          ESPPumpDischargeSensorSub,
        /// <summary>
        /// ESPSeal property
        /// </summary>
          [XmlEnum("ESP Seal")]
          ESPSeal,
        /// <summary>
        /// ExpansionJoint property
        /// </summary>
          [XmlEnum("Expansion Joint")]
          ExpansionJoint,
        /// <summary>
        /// ExternalCementingPort property
        /// </summary>
          [XmlEnum("External Cementing Port")]
          ExternalCementingPort,
        /// <summary>
        /// Fill property
        /// </summary>
          Fill,
        /// <summary>
        /// Fish property
        /// </summary>
          Fish,
        /// <summary>
        /// FloatCollar property
        /// </summary>
          [XmlEnum("Float Collar")]
          FloatCollar,
        /// <summary>
        /// FloatShoeGuideShoe property
        /// </summary>
          [XmlEnum("Float Shoe/Guide Shoe")]
          FloatShoeGuideShoe,
        /// <summary>
        /// GasAnchor property
        /// </summary>
          [XmlEnum("Gas Anchor")]
          GasAnchor,
        /// <summary>
        /// GasLiftMandrel property
        /// </summary>
          [XmlEnum("Gas Lift Mandrel")]
          GasLiftMandrel,
        /// <summary>
        /// GasLiftValve property
        /// </summary>
          [XmlEnum("Gas Lift Valve")]
          GasLiftValve,
        /// <summary>
        /// GravelPackScreen property
        /// </summary>
          [XmlEnum("Gravel Pack Screen")]
          GravelPackScreen,
        /// <summary>
        /// HydraulicPump property
        /// </summary>
          [XmlEnum("Hydraulic Pump")]
          HydraulicPump,
        /// <summary>
        /// InjectionMandrel property
        /// </summary>
          [XmlEnum("Injection Mandrel")]
          InjectionMandrel,
        /// <summary>
        /// InjectionValve property
        /// </summary>
          [XmlEnum("Injection Valve")]
          InjectionValve,
        /// <summary>
        /// JunkinWellbore property
        /// </summary>
          [XmlEnum("Junk in Wellbore")]
          JunkinWellbore,
        /// <summary>
        /// LandingCollar property
        /// </summary>
          [XmlEnum("Landing Collar")]
          LandingCollar,
        /// <summary>
        /// LinerEntryGuide property
        /// </summary>
          [XmlEnum("Liner Entry Guide")]
          LinerEntryGuide,
        /// <summary>
        /// LinerHanger property
        /// </summary>
          [XmlEnum("Liner Hanger")]
          LinerHanger,
        /// <summary>
        /// MuleShoe property
        /// </summary>
          [XmlEnum("Mule Shoe")]
          MuleShoe,
        /// <summary>
        /// NotchedCollar property
        /// </summary>
          [XmlEnum("Notched Collar")]
          NotchedCollar,
        /// <summary>
        /// OnOffTool property
        /// </summary>
          [XmlEnum("On-Off Tool")]
          OnOffTool,
        /// <summary>
        /// Overshot property
        /// </summary>
          Overshot,
        /// <summary>
        /// Packer property
        /// </summary>
          Packer,
        /// <summary>
        /// PackerMultipleStrings property
        /// </summary>
          [XmlEnum("Packer-Multiple Strings")]
          PackerMultipleStrings,
        /// <summary>
        /// PackerPlug property
        /// </summary>
          [XmlEnum("Packer Plug")]
          PackerPlug,
        /// <summary>
        /// PackoffTubing property
        /// </summary>
          [XmlEnum("Packoff (Tubing)")]
          PackoffTubing,
        /// <summary>
        /// PCPFlexshaftIntake property
        /// </summary>
          [XmlEnum("PCP-Flex shaft Intake")]
          PCPFlexshaftIntake,
        /// <summary>
        /// PCPGearReducerSubsurface property
        /// </summary>
          [XmlEnum("PCP-Gear Reducer (Subsurface)")]
          PCPGearReducerSubsurface,
        /// <summary>
        /// PCPNoTurnToolTorqueAnchor property
        /// </summary>
          [XmlEnum("PCP-No Turn Tool/Torque Anchor")]
          PCPNoTurnToolTorqueAnchor,
        /// <summary>
        /// PCPRotor property
        /// </summary>
          [XmlEnum("PCP-Rotor")]
          PCPRotor,
        /// <summary>
        /// PCPStator property
        /// </summary>
          [XmlEnum("PCP-Stator")]
          PCPStator,
        /// <summary>
        /// PCPTagBar property
        /// </summary>
          [XmlEnum("PCP-Tag Bar")]
          PCPTagBar,
        /// <summary>
        /// PlugCement property
        /// </summary>
          [XmlEnum("Plug - Cement")]
          PlugCement,
        /// <summary>
        /// PlugMud property
        /// </summary>
          [XmlEnum("Plug - Mud")]
          PlugMud,
        /// <summary>
        /// PlungerLiftBall property
        /// </summary>
          [XmlEnum("Plunger Lift Ball")]
          PlungerLiftBall,
        /// <summary>
        /// PlungerLiftBottomHoleBumperAssembly property
        /// </summary>
          [XmlEnum("Plunger Lift Bottom Hole Bumper Assembly")]
          PlungerLiftBottomHoleBumperAssembly,
        /// <summary>
        /// PlungerLiftBumperSpring property
        /// </summary>
          [XmlEnum("Plunger Lift Bumper Spring")]
          PlungerLiftBumperSpring,
        /// <summary>
        /// PlungerLiftCollarStop property
        /// </summary>
          [XmlEnum("Plunger Lift Collar Stop")]
          PlungerLiftCollarStop,
        /// <summary>
        /// PlungerLiftPlunger property
        /// </summary>
          [XmlEnum("Plunger Lift Plunger")]
          PlungerLiftPlunger,
        /// <summary>
        /// PolishedRod property
        /// </summary>
          [XmlEnum("Polished Rod")]
          PolishedRod,
        /// <summary>
        /// PolishedRodLiner property
        /// </summary>
          [XmlEnum("Polished Rod Liner")]
          PolishedRodLiner,
        /// <summary>
        /// PortedCollar property
        /// </summary>
          [XmlEnum("Ported Collar")]
          PortedCollar,
        /// <summary>
        /// ProfileNipple property
        /// </summary>
          [XmlEnum("Profile Nipple")]
          ProfileNipple,
        /// <summary>
        /// ProfileNipplePlug property
        /// </summary>
          [XmlEnum("Profile Nipple Plug")]
          ProfileNipplePlug,
        /// <summary>
        /// PumpOutPlug property
        /// </summary>
          [XmlEnum("Pump-Out Plug")]
          PumpOutPlug,
        /// <summary>
        /// SealAssembly property
        /// </summary>
          [XmlEnum("Seal Assembly")]
          SealAssembly,
        /// <summary>
        /// SuckerRod property
        /// </summary>
          [XmlEnum("Sucker Rod")]
          SuckerRod,
        /// <summary>
        /// SuckerRodBackoffCoupling property
        /// </summary>
          [XmlEnum("Sucker Rod Backoff Coupling")]
          SuckerRodBackoffCoupling,
        /// <summary>
        /// SuckerRodContinuous property
        /// </summary>
          [XmlEnum("Sucker Rod-Continuous")]
          SuckerRodContinuous,
        /// <summary>
        /// SuckerRodPumpInsert property
        /// </summary>
          [XmlEnum("Sucker Rod Pump-Insert")]
          SuckerRodPumpInsert,
        /// <summary>
        /// SuckerRodPumpJacket property
        /// </summary>
          [XmlEnum("Sucker Rod Pump-Jacket")]
          SuckerRodPumpJacket,
        /// <summary>
        /// SuckerRodPumpTubingPumpBarrel property
        /// </summary>
          [XmlEnum("Sucker Rod Pump-Tubing Pump Barrel")]
          SuckerRodPumpTubingPumpBarrel,
        /// <summary>
        /// SuckerRodPumpTubingPumpPlunger property
        /// </summary>
          [XmlEnum("Sucker Rod Pump-Tubing Pump Plunger")]
          SuckerRodPumpTubingPumpPlunger,
        /// <summary>
        /// SuckerRodRibbon property
        /// </summary>
          [XmlEnum("Sucker Rod-Ribbon")]
          SuckerRodRibbon,
        /// <summary>
        /// SuckerRodSinkerBar property
        /// </summary>
          [XmlEnum("Sucker Rod-Sinker Bar")]
          SuckerRodSinkerBar,
        /// <summary>
        /// SuckerRodSub property
        /// </summary>
          [XmlEnum("Sucker Rod Sub")]
          SuckerRodSub,
        /// <summary>
        /// SandScreenTubing property
        /// </summary>
          [XmlEnum("Sand Screen-Tubing")]
          SandScreenTubing,
        /// <summary>
        /// SandSeparator property
        /// </summary>
          [XmlEnum("Sand Separator")]
          SandSeparator,
        /// <summary>
        /// ScreenLinerInsert property
        /// </summary>
          [XmlEnum("Screen Liner/Insert")]
          ScreenLinerInsert,
        /// <summary>
        /// SealBoreExtension property
        /// </summary>
          [XmlEnum("Seal Bore Extension")]
          SealBoreExtension,
        /// <summary>
        /// SeatNippleShoe property
        /// </summary>
          [XmlEnum("Seat Nipple/Shoe")]
          SeatNippleShoe,
        /// <summary>
        /// ShearTool property
        /// </summary>
          [XmlEnum("Shear Tool")]
          ShearTool,
        /// <summary>
        /// SlidingSleeve property
        /// </summary>
          [XmlEnum("Sliding Sleeve")]
          SlidingSleeve,
        /// <summary>
        /// SteamCupMandrel property
        /// </summary>
          [XmlEnum("Steam Cup Mandrel")]
          SteamCupMandrel,
        /// <summary>
        /// SteamDeflectors property
        /// </summary>
          [XmlEnum("Steam Deflectors")]
          SteamDeflectors,
        /// <summary>
        /// StrainerNipple property
        /// </summary>
          [XmlEnum("Strainer Nipple")]
          StrainerNipple,
        /// <summary>
        /// SubsurfaceSafetyValve property
        /// </summary>
          [XmlEnum("Subsurface Safety Valve")]
          SubsurfaceSafetyValve,
        /// <summary>
        /// TCPGun property
        /// </summary>
          [XmlEnum("TCP Gun")]
          TCPGun,
        /// <summary>
        /// Tubing property
        /// </summary>
          Tubing,
        /// <summary>
        /// TubingCoiled property
        /// </summary>
          [XmlEnum("Tubing (Coiled)")]
          TubingCoiled,
        /// <summary>
        /// TubingAnchorCatcher property
        /// </summary>
          [XmlEnum("Tubing Anchor/Catcher")]
          TubingAnchorCatcher,
        /// <summary>
        /// TubingCrossover property
        /// </summary>
          [XmlEnum("Tubing Crossover")]
          TubingCrossover,
        /// <summary>
        /// TubingDrain property
        /// </summary>
          [XmlEnum("Tubing Drain")]
          TubingDrain,
        /// <summary>
        /// TubingHanger property
        /// </summary>
          [XmlEnum("Tubing Hanger")]
          TubingHanger,
        /// <summary>
        /// TubingHeadSpool property
        /// </summary>
          [XmlEnum("Tubing Head (Spool)")]
          TubingHeadSpool,
        /// <summary>
        /// TubingPurgeCheckValve property
        /// </summary>
          [XmlEnum("Tubing Purge Check Valve")]
          TubingPurgeCheckValve,
        /// <summary>
        /// TubingSub property
        /// </summary>
          [XmlEnum("Tubing Sub")]
          TubingSub,
        /// <summary>
        /// Whipstock property
        /// </summary>
          Whipstock,
        /// <summary>
        /// WirelineReEntryGuideBellCollar property
        /// </summary>
          [XmlEnum("Wireline Re-Entry Guide (Bell Collar)")]
          WirelineReEntryGuideBellCollar,
        /// <summary>
        /// WellboreNotes property
        /// </summary>
          [XmlEnum("Wellbore Notes")]
          WellboreNotes,
        /// <summary>
        /// YTool property
        /// </summary>
          [XmlEnum("Y-Tool")]
          YTool
        }
        /// <summary>
        /// This class represents the GradeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the GradeType xsd enumeration.")]
        public enum GradeType 
        {
        /// <summary>
        /// DE property
        /// </summary>
          DE,
        /// <summary>
        /// DER property
        /// </summary>
          DER,
        /// <summary>
        /// DR property
        /// </summary>
          DR,
        /// <summary>
        /// FG property
        /// </summary>
          FG,
        /// <summary>
        /// SE property
        /// </summary>
          SE,
        /// <summary>
        /// SER property
        /// </summary>
          SER,
        /// <summary>
        /// T66 property
        /// </summary>
          [XmlEnum("T-66")]
          T66,
        /// <summary>
        /// HS property
        /// </summary>
          HS,
        /// <summary>
        /// KD property
        /// </summary>
          KD,
        /// <summary>
        /// N97 property
        /// </summary>
          [XmlEnum("N-97")]
          N97,
        /// <summary>
        /// C property
        /// </summary>
          C,
        /// <summary>
        /// K property
        /// </summary>
          K,
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// E property
        /// </summary>
          E,
        /// <summary>
        /// E75 property
        /// </summary>
          [XmlEnum("E-75")]
          E75,
        /// <summary>
        /// G105 property
        /// </summary>
          [XmlEnum("G-105")]
          G105,
        /// <summary>
        /// S135 property
        /// </summary>
          [XmlEnum("S-135")]
          S135,
        /// <summary>
        /// V150 property
        /// </summary>
          [XmlEnum("V-150")]
          V150,
        /// <summary>
        /// X95 property
        /// </summary>
          [XmlEnum("X-95")]
          X95,
        /// <summary>
        /// Armco95 property
        /// </summary>
          [XmlEnum("Armco-95")]
          Armco95,
        /// <summary>
        /// C110 property
        /// </summary>
          [XmlEnum("C-110")]
          C110,
        /// <summary>
        /// C75 property
        /// </summary>
          [XmlEnum("C-75")]
          C75,
        /// <summary>
        /// C90 property
        /// </summary>
          [XmlEnum("C-90")]
          C90,
        /// <summary>
        /// C95 property
        /// </summary>
          [XmlEnum("C-95")]
          C95,
        /// <summary>
        /// F25 property
        /// </summary>
          [XmlEnum("F-25")]
          F25,
        /// <summary>
        /// H40 property
        /// </summary>
          [XmlEnum("H-40")]
          H40,
        /// <summary>
        /// HC95 property
        /// </summary>
          [XmlEnum("HC-95")]
          HC95,
        /// <summary>
        /// J20 property
        /// </summary>
          [XmlEnum("J-20")]
          J20,
        /// <summary>
        /// J55 property
        /// </summary>
          [XmlEnum("J-55")]
          J55,
        /// <summary>
        /// K40 property
        /// </summary>
          [XmlEnum("K-40")]
          K40,
        /// <summary>
        /// K55 property
        /// </summary>
          [XmlEnum("K-55")]
          K55,
        /// <summary>
        /// L80 property
        /// </summary>
          [XmlEnum("L-80")]
          L80,
        /// <summary>
        /// LS50 property
        /// </summary>
          [XmlEnum("LS-50")]
          LS50,
        /// <summary>
        /// LS65 property
        /// </summary>
          [XmlEnum("LS-65")]
          LS65,
        /// <summary>
        /// M65 property
        /// </summary>
          [XmlEnum("M-65")]
          M65,
        /// <summary>
        /// M90 property
        /// </summary>
          [XmlEnum("M-90")]
          M90,
        /// <summary>
        /// M95 property
        /// </summary>
          [XmlEnum("M-95")]
          M95,
        /// <summary>
        /// MAV50 property
        /// </summary>
          [XmlEnum("MAV-50")]
          MAV50,
        /// <summary>
        /// N105 property
        /// </summary>
          [XmlEnum("N-105")]
          N105,
        /// <summary>
        /// N23 property
        /// </summary>
          [XmlEnum("N-23")]
          N23,
        /// <summary>
        /// N80 property
        /// </summary>
          [XmlEnum("N-80")]
          N80,
        /// <summary>
        /// P105 property
        /// </summary>
          [XmlEnum("P-105")]
          P105,
        /// <summary>
        /// P110 property
        /// </summary>
          [XmlEnum("P-110")]
          P110,
        /// <summary>
        /// Q125 property
        /// </summary>
          [XmlEnum("Q-125")]
          Q125,
        /// <summary>
        /// S80 property
        /// </summary>
          [XmlEnum("S-80")]
          S80,
        /// <summary>
        /// S95 property
        /// </summary>
          [XmlEnum("S-95")]
          S95,
        /// <summary>
        /// T95 property
        /// </summary>
          [XmlEnum("T-95")]
          T95,
        /// <summary>
        /// X140 property
        /// </summary>
          [XmlEnum("X-140")]
          X140,
        /// <summary>
        /// Unknown property
        /// </summary>
          Unknown,
        /// <summary>
        /// EL property
        /// </summary>
          EL,
        /// <summary>
        /// MD56 property
        /// </summary>
          [XmlEnum("MD-56")]
          MD56,
        /// <summary>
        /// S60 property
        /// </summary>
          [XmlEnum("S-60")]
          S60,
        /// <summary>
        /// S67 property
        /// </summary>
          [XmlEnum("S-67")]
          S67,
        /// <summary>
        /// S87 property
        /// </summary>
          [XmlEnum("S-87")]
          S87,
        /// <summary>
        /// S88 property
        /// </summary>
          [XmlEnum("S-88")]
          S88,
        /// <summary>
        /// XD property
        /// </summary>
          XD,
        /// <summary>
        /// S59 property
        /// </summary>
          [XmlEnum("S-59")]
          S59,
        /// <summary>
        /// KD63 property
        /// </summary>
          [XmlEnum("KD-63")]
          KD63,
        /// <summary>
        /// N30 property
        /// </summary>
          [XmlEnum("N-30")]
          N30,
        /// <summary>
        /// N40 property
        /// </summary>
          [XmlEnum("N-40")]
          N40,
        /// <summary>
        /// N54 property
        /// </summary>
          [XmlEnum("N-54")]
          N54,
        /// <summary>
        /// N78 property
        /// </summary>
          [XmlEnum("N-78")]
          N78,
        /// <summary>
        /// N75 property
        /// </summary>
          [XmlEnum("N-75")]
          N75,
        /// <summary>
        /// N90 property
        /// </summary>
          [XmlEnum("N-90")]
          N90,
        /// <summary>
        /// N96 property
        /// </summary>
          [XmlEnum("N-96")]
          N96,
        /// <summary>
        /// Item35 property
        /// </summary>
          [XmlEnum("35")]
          Item35,
        /// <summary>
        /// Item50 property
        /// </summary>
          [XmlEnum("50")]
          Item50,
        /// <summary>
        /// Item45 property
        /// </summary>
          [XmlEnum("45")]
          Item45,
        /// <summary>
        /// TK65 property
        /// </summary>
          [XmlEnum("T-K65")]
          TK65,
        /// <summary>
        /// Item46 property
        /// </summary>
          [XmlEnum("46")]
          Item46,
        /// <summary>
        /// TD61 property
        /// </summary>
          [XmlEnum("T-D61")]
          TD61,
        /// <summary>
        /// TD63 property
        /// </summary>
          [XmlEnum("T-D63")]
          TD63,
        /// <summary>
        /// Item75 property
        /// </summary>
          [XmlEnum("75")]
          Item75,
        /// <summary>
        /// Item75A property
        /// </summary>
          [XmlEnum("75A")]
          Item75A,
        /// <summary>
        /// Item95 property
        /// </summary>
          [XmlEnum("95")]
          Item95,
        /// <summary>
        /// PH6 property
        /// </summary>
          [XmlEnum("PH-6")]
          PH6,
        /// <summary>
        /// WC50 property
        /// </summary>
          [XmlEnum("WC-50")]
          WC50,
        /// <summary>
        /// SOO95 property
        /// </summary>
          [XmlEnum("SOO-95")]
          SOO95,
        /// <summary>
        /// A53B property
        /// </summary>
          A53B,
        /// <summary>
        /// FS80 property
        /// </summary>
          [XmlEnum("FS-80")]
          FS80,
        /// <summary>
        /// FSS95 property
        /// </summary>
          [XmlEnum("FSS-95")]
          FSS95,
        /// <summary>
        /// SC90 property
        /// </summary>
          [XmlEnum("SC-90")]
          SC90,
        /// <summary>
        /// USS95 property
        /// </summary>
          [XmlEnum("USS-95")]
          USS95,
        /// <summary>
        /// USS125 property
        /// </summary>
          [XmlEnum("USS-125")]
          USS125,
        /// <summary>
        /// USS140 property
        /// </summary>
          [XmlEnum("USS-140")]
          USS140,
        /// <summary>
        /// GT80S property
        /// </summary>
          [XmlEnum("GT-80S")]
          GT80S,
        /// <summary>
        /// USS50 property
        /// </summary>
          [XmlEnum("USS-50")]
          USS50,
        /// <summary>
        /// LS140 property
        /// </summary>
          [XmlEnum("LS-140")]
          LS140,
        /// <summary>
        /// HCL80 property
        /// </summary>
          [XmlEnum("HCL-80")]
          HCL80,
        /// <summary>
        /// HCN80 property
        /// </summary>
          [XmlEnum("HCN-80")]
          HCN80,
        /// <summary>
        /// HCP110 property
        /// </summary>
          [XmlEnum("HCP-110")]
          HCP110,
        /// <summary>
        /// HCQ125 property
        /// </summary>
          [XmlEnum("HCQ-125")]
          HCQ125,
        /// <summary>
        /// H2S90 property
        /// </summary>
          [XmlEnum("H2S-90")]
          H2S90,
        /// <summary>
        /// QT700 property
        /// </summary>
          [XmlEnum("QT-700")]
          QT700,
        /// <summary>
        /// QT800 property
        /// </summary>
          [XmlEnum("QT-800")]
          QT800,
        /// <summary>
        /// QT900 property
        /// </summary>
          [XmlEnum("QT-900")]
          QT900,
        /// <summary>
        /// QT1000 property
        /// </summary>
          [XmlEnum("QT-1000")]
          QT1000,
        /// <summary>
        /// QT1200 property
        /// </summary>
          [XmlEnum("QT-1200")]
          QT1200,
        /// <summary>
        /// HO70 property
        /// </summary>
          [XmlEnum("HO-70")]
          HO70,
        /// <summary>
        /// A53 property
        /// </summary>
          A53,
        /// <summary>
        /// A53A property
        /// </summary>
          A53A,
        /// <summary>
        /// H2S95 property
        /// </summary>
          [XmlEnum("H2S-95")]
          H2S95,
        /// <summary>
        /// HCK55 property
        /// </summary>
          [XmlEnum("HCK-55")]
          HCK55,
        /// <summary>
        /// B property
        /// </summary>
          B,
        /// <summary>
        /// X42 property
        /// </summary>
          [XmlEnum("X-42")]
          X42,
        /// <summary>
        /// X52 property
        /// </summary>
          [XmlEnum("X-52")]
          X52,
        /// <summary>
        /// X56 property
        /// </summary>
          [XmlEnum("X-56")]
          X56,
        /// <summary>
        /// Item13CR property
        /// </summary>
          [XmlEnum("13CR")]
          Item13CR,
        /// <summary>
        /// Item13CR80 property
        /// </summary>
          [XmlEnum("13CR- 80")]
          Item13CR80,
        /// <summary>
        /// Item13CR85 property
        /// </summary>
          [XmlEnum("13CR- 85")]
          Item13CR85,
        /// <summary>
        /// Item13CR95 property
        /// </summary>
          [XmlEnum("13CR- 95")]
          Item13CR95,
        /// <summary>
        /// Item13CR110 property
        /// </summary>
          [XmlEnum("13CR-110")]
          Item13CR110,
        /// <summary>
        /// X46 property
        /// </summary>
          [XmlEnum("X-46")]
          X46,
        /// <summary>
        /// X60 property
        /// </summary>
          [XmlEnum("X-60")]
          X60,
        /// <summary>
        /// X70 property
        /// </summary>
          [XmlEnum("X-70")]
          X70,
        /// <summary>
        /// X property
        /// </summary>
          X,
        /// <summary>
        /// G property
        /// </summary>
          G,
        /// <summary>
        /// S property
        /// </summary>
          S,
        /// <summary>
        /// Stainless property
        /// </summary>
          Stainless,
        /// <summary>
        /// SWR property
        /// </summary>
          SWR,
        /// <summary>
        /// DWR property
        /// </summary>
          DWR,
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// SM property
        /// </summary>
          SM,
        /// <summary>
        /// UHS property
        /// </summary>
          UHS,
        /// <summary>
        /// MMS property
        /// </summary>
          MMS,
        /// <summary>
        /// PCP900 property
        /// </summary>
          [XmlEnum("PCP  900")]
          PCP900,
        /// <summary>
        /// PCP1000 property
        /// </summary>
          [XmlEnum("PCP 1000")]
          PCP1000,
        /// <summary>
        /// PCP1500 property
        /// </summary>
          [XmlEnum("PCP 1500")]
          PCP1500,
        /// <summary>
        /// PCP2500 property
        /// </summary>
          [XmlEnum("PCP 2500")]
          PCP2500,
        /// <summary>
        /// Plus property
        /// </summary>
          Plus,
        /// <summary>
        /// Item620C property
        /// </summary>
          [XmlEnum("620C")]
          Item620C,
        /// <summary>
        /// Item780M property
        /// </summary>
          [XmlEnum("780M")]
          Item780M,
        /// <summary>
        /// Item750N property
        /// </summary>
          [XmlEnum("750N")]
          Item750N,
        /// <summary>
        /// Item960M property
        /// </summary>
          [XmlEnum("960M")]
          Item960M,
        /// <summary>
        /// Item970N property
        /// </summary>
          [XmlEnum("970N")]
          Item970N
        }
        /// <summary>
        /// This class represents the Coating xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the Coating xsd enumeration.")]
        public enum Coating 
        {
        /// <summary>
        /// NA property
        /// </summary>
          [XmlEnum("N/A")]
          NA,
        /// <summary>
        /// SPRAYMETALMONEL property
        /// </summary>
          [XmlEnum("SPRAY-METAL-MONEL")]
          SPRAYMETALMONEL,
        /// <summary>
        /// "TUFFR"
        /// </summary>
          TUFFR,
        /// <summary>
        /// CORROSIONCOATING property
        /// </summary>
          [XmlEnum("CORROSION COATING")]
          CORROSIONCOATING,
        /// <summary>
        /// CARBURIZEDHARDENED property
        /// </summary>
          [XmlEnum("CARBURIZED-HARDENED")]
          CARBURIZEDHARDENED,
        /// <summary>
        /// "Carburized"
        /// </summary>
          CARBURIZED,
        /// <summary>
        /// "Carbonnitrided"
        /// </summary>
          CARBONNITRIDED,
        /// <summary>
        /// CHROMEPLATEDGROOVED property
        /// </summary>
          [XmlEnum("CHROMEPLATED-GROOVED")]
          CHROMEPLATEDGROOVED,
        /// <summary>
        /// CHROMEPLATEDHEAVY property
        /// </summary>
          [XmlEnum("CHROMEPLATED-HEAVY")]
          CHROMEPLATEDHEAVY,
        /// <summary>
        /// HARDLINED property
        /// </summary>
          [XmlEnum("HARD-LINED")]
          HARDLINED,
        /// <summary>
        /// "Hardened"
        /// </summary>
          HARDENED,
        /// <summary>
        /// "Insert Guided Cage (OBSOLETE)"
        /// </summary>
          INS,
        /// <summary>
        /// "Lubri-Pump Plunger (OBSOLETE)"
        /// </summary>
          LP,
        /// <summary>
        /// IPCS505 property
        /// </summary>
          [XmlEnum("IPC-S505")]
          IPCS505,
        /// <summary>
        /// IPCS650 property
        /// </summary>
          [XmlEnum("IPC-S650")]
          IPCS650,
        /// <summary>
        /// IPCTK70 property
        /// </summary>
          [XmlEnum("IPC-TK70")]
          IPCTK70,
        /// <summary>
        /// CHROMEPLATED property
        /// </summary>
          [XmlEnum("CHROME-PLATED")]
          CHROMEPLATED,
        /// <summary>
        /// NICKELCARBIDE property
        /// </summary>
          [XmlEnum("NICKEL-CARBIDE")]
          NICKELCARBIDE,
        /// <summary>
        /// SPRAYMETAL property
        /// </summary>
          [XmlEnum("SPRAY-METAL")]
          SPRAYMETAL,
        /// <summary>
        /// PLUNGERLUBRICANT property
        /// </summary>
          [XmlEnum("PLUNGER-LUBRICANT")]
          PLUNGERLUBRICANT,
        /// <summary>
        /// "Moly-Coated"
        /// </summary>
          MOLY,
        /// <summary>
        /// "Martin Ring Plunger (OBSOLETE)"
        /// </summary>
          MTR,
        /// <summary>
        /// "Nitrided"
        /// </summary>
          NITRIDED,
        /// <summary>
        /// NICKELPLATED property
        /// </summary>
          [XmlEnum("NICKEL-PLATED")]
          NICKELPLATED,
        /// <summary>
        /// "Pressure Actuated Plunger (OBSOLETE"
        /// </summary>
          PAP,
        /// <summary>
        /// "Phosphorus Coating"
        /// </summary>
          PHOSPHORUS,
        /// <summary>
        /// "Plastic Coated"
        /// </summary>
          PLASTIC,
        /// <summary>
        /// TEFLONRED property
        /// </summary>
          [XmlEnum("TEFLON-RED")]
          TEFLONRED,
        /// <summary>
        /// SPRAYMETALODNICKELPLATEDID property
        /// </summary>
          [XmlEnum("SPRAYMETAL-OD/NICKELPLATED-ID")]
          SPRAYMETALODNICKELPLATEDID,
        /// <summary>
        /// SPRAYMETALTHICK property
        /// </summary>
          [XmlEnum("SPRAYMETAL-THICK")]
          SPRAYMETALTHICK,
        /// <summary>
        /// TEFLONTAN property
        /// </summary>
          [XmlEnum("TEFLON-TAN")]
          TEFLONTAN,
        /// <summary>
        /// TEFLONYELLOW property
        /// </summary>
          [XmlEnum("TEFLON-YELLOW")]
          TEFLONYELLOW,
        /// <summary>
        /// "Double Galvanized"
        /// </summary>
          DBLGALV,
        /// <summary>
        /// IPCNYLON property
        /// </summary>
          [XmlEnum("IPC-NYLON")]
          IPCNYLON,
        /// <summary>
        /// IPCEPXTHK property
        /// </summary>
          [XmlEnum("IPC-EPXTHK")]
          IPCEPXTHK,
        /// <summary>
        /// IPCEPXTHN property
        /// </summary>
          [XmlEnum("IPC-EPXTHN")]
          IPCEPXTHN,
        /// <summary>
        /// FIBERGLASSLINED property
        /// </summary>
          [XmlEnum("FIBERGLASS-LINED")]
          FIBERGLASSLINED,
        /// <summary>
        /// "Cement Lined"
        /// </summary>
          CEMENTLINED,
        /// <summary>
        /// "PVC Lined"
        /// </summary>
          PVCLINED,
        /// <summary>
        /// "Polyethylene Lined"
        /// </summary>
          PELINED,
        /// <summary>
        /// "Stainless Steel Lined"
        /// </summary>
          SSLINED,
        /// <summary>
        /// IPCEPOXY property
        /// </summary>
          [XmlEnum("IPC-EPOXY")]
          IPCEPOXY,
        /// <summary>
        /// "Bare"
        /// </summary>
          BARE,
        /// <summary>
        /// "Duoline"
        /// </summary>
          DUOLINE,
        /// <summary>
        /// RODGUIDE1 property
        /// </summary>
          [XmlEnum("RODGUIDE-1")]
          RODGUIDE1,
        /// <summary>
        /// RODGUIDE2 property
        /// </summary>
          [XmlEnum("RODGUIDE-2")]
          RODGUIDE2,
        /// <summary>
        /// RODGUIDE21 property
        /// </summary>
          [XmlEnum("RODGUIDE-2.")]
          RODGUIDE21,
        /// <summary>
        /// RODGUIDE3 property
        /// </summary>
          [XmlEnum("RODGUIDE-3")]
          RODGUIDE3,
        /// <summary>
        /// RODGUIDE4 property
        /// </summary>
          [XmlEnum("RODGUIDE-4")]
          RODGUIDE4,
        /// <summary>
        /// RODGUIDE5 property
        /// </summary>
          [XmlEnum("RODGUIDE-5")]
          RODGUIDE5,
        /// <summary>
        /// RODGUIDE6 property
        /// </summary>
          [XmlEnum("RODGUIDE-6")]
          RODGUIDE6,
        /// <summary>
        /// RODGUIDE7 property
        /// </summary>
          [XmlEnum("RODGUIDE-7")]
          RODGUIDE7,
        /// <summary>
        /// RODGUIDESO property
        /// </summary>
          [XmlEnum("RODGUIDE-SO")]
          RODGUIDESO,
        /// <summary>
        /// RODGUIDESp property
        /// </summary>
          [XmlEnum("RODGUIDE-Sp")]
          RODGUIDESp,
        /// <summary>
        /// RODGUIDEFx property
        /// </summary>
          [XmlEnum("RODGUIDE-Fx")]
          RODGUIDEFx,
        /// <summary>
        /// RODGUIDESO1 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO1")]
          RODGUIDESO1,
        /// <summary>
        /// RODGUIDESO2 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO2")]
          RODGUIDESO2,
        /// <summary>
        /// RODGUIDESO3 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO3")]
          RODGUIDESO3,
        /// <summary>
        /// RODGUIDESO4 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO4")]
          RODGUIDESO4,
        /// <summary>
        /// RODGUIDESO5 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO5")]
          RODGUIDESO5,
        /// <summary>
        /// RODGUIDESO6 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO6")]
          RODGUIDESO6,
        /// <summary>
        /// RODGUIDESO8 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO8")]
          RODGUIDESO8,
        /// <summary>
        /// "Polypropylene"
        /// </summary>
          POLYPROPYLENE,
        /// <summary>
        /// "EPDM (ESP Cable Insulation)"
        /// </summary>
          EPDM,
        /// <summary>
        /// "Nitrile"
        /// </summary>
          NITRILE,
        /// <summary>
        /// "Teflon"
        /// </summary>
          TEFLON,
        /// <summary>
        /// PPWNitrl property
        /// </summary>
          [XmlEnum("PPW/Nitrl")]
          PPWNitrl,
        /// <summary>
        /// TK99 property
        /// </summary>
          [XmlEnum("TK-99")]
          TK99,
        /// <summary>
        /// IPCRWrap property
        /// </summary>
          [XmlEnum("IPC-RWrap")]
          IPCRWrap,
        /// <summary>
        /// "Internal Plastic Ctg"
        /// </summary>
          IPC,
        /// <summary>
        /// "Thermo-Cased"
        /// </summary>
          THERMO,
        /// <summary>
        /// TK4 property
        /// </summary>
          [XmlEnum("TK-4")]
          TK4,
        /// <summary>
        /// POLISHEDRODLINER property
        /// </summary>
          [XmlEnum("POLISHED-RODLINER")]
          POLISHEDRODLINER,
        /// <summary>
        /// "Zinc Plated (ASTM B633)"
        /// </summary>
          ZINCPLATED,
        /// <summary>
        /// "Phosphate Coating"
        /// </summary>
          PHOSPHATE,
        /// <summary>
        /// "Galvanized (Hot Dipped) (ASTM A153)"
        /// </summary>
          GALVANIZED,
        /// <summary>
        /// "Duoline 10"
        /// </summary>
          DUOLINE10,
        /// <summary>
        /// "Duoline 20"
        /// </summary>
          DUOLINE20,
        /// <summary>
        /// IPCTK75 property
        /// </summary>
          [XmlEnum("IPC-TK75")]
          IPCTK75,
        /// <summary>
        /// SPRAYMETALMONEL1 property
        /// </summary>
          [XmlEnum("SPRAYMETAL-MONEL")]
          SPRAYMETALMONEL1,
        /// <summary>
        /// SPRAYMETALNICKEL property
        /// </summary>
          [XmlEnum("SPRAYMETAL-NICKEL")]
          SPRAYMETALNICKEL,
        /// <summary>
        /// SPRAYMETALSTEEL property
        /// </summary>
          [XmlEnum("SPRAYMETAL-STEEL")]
          SPRAYMETALSTEEL,
        /// <summary>
        /// "Duoline 20 with Rice Wrap"
        /// </summary>
          DUOLIN20WR,
        /// <summary>
        /// "Chrome"
        /// </summary>
          CHROME,
        /// <summary>
        /// TUNGSTENPLATED property
        /// </summary>
          [XmlEnum("TUNGSTEN PLATED")]
          TUNGSTENPLATED
        }
        /// <summary>
        /// This class represents the GeologyType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the GeologyType xsd enumeration.")]
        public enum GeologyType 
        {
        /// <summary>
        /// Aquifer property
        /// </summary>
          Aquifer,
        /// <summary>
        /// Reservoir property
        /// </summary>
          Reservoir
        }
        /// <summary>
        /// This class represents the BoreholeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BoreholeType xsd enumeration.")]
        public enum BoreholeType 
        {
        /// <summary>
        /// Cavern property
        /// </summary>
          Cavern,
        /// <summary>
        /// Cavity property
        /// </summary>
          Cavity,
        /// <summary>
        /// NormalBorehole property
        /// </summary>
          NormalBorehole,
        /// <summary>
        /// UnderReam property
        /// </summary>
          UnderReam
        }
        /// <summary>
        /// This class represents the CasingConnectionType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CasingConnectionType xsd enumeration.")]
        public enum CasingConnectionType 
        {
        /// <summary>
        /// Landed property
        /// </summary>
          Landed,
        /// <summary>
        /// SelfSealingThreaded property
        /// </summary>
          [XmlEnum("SelfSealing-Threaded")]
          SelfSealingThreaded,
        /// <summary>
        /// Welded property
        /// </summary>
          Welded
        }
        /// <summary>
        /// This class represents the OtherConnectionType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the OtherConnectionType xsd enumeration.")]
        public enum OtherConnectionType 
        {
        /// <summary>
        /// DogsCompressionFitSealed property
        /// </summary>
          [XmlEnum("DogsCompressionFit-Sealed")]
          DogsCompressionFitSealed,
        /// <summary>
        /// Cementedinplace property
        /// </summary>
          [XmlEnum("Cemented-in-place")]
          Cementedinplace
        }
        /// <summary>
        /// This class represents the RodConnectionType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RodConnectionType xsd enumeration.")]
        public enum RodConnectionType 
        {
        /// <summary>
        /// Latched property
        /// </summary>
          Latched,
        /// <summary>
        /// SeatingNippleCup property
        /// </summary>
          [XmlEnum("Seating Nipple-Cup")]
          SeatingNippleCup,
        /// <summary>
        /// SeatingNippleMechanical property
        /// </summary>
          [XmlEnum("SeatingNipple-Mechanical")]
          SeatingNippleMechanical,
        /// <summary>
        /// SlipFitSealed property
        /// </summary>
          [XmlEnum("SlipFit-Sealed")]
          SlipFitSealed,
        /// <summary>
        /// Threaded property
        /// </summary>
          Threaded,
        /// <summary>
        /// Welded property
        /// </summary>
          Welded
        }
        /// <summary>
        /// This class represents the TubingConnectionType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TubingConnectionType xsd enumeration.")]
        public enum TubingConnectionType 
        {
        /// <summary>
        /// DogsCompressionFitNotSealed property
        /// </summary>
          [XmlEnum("DogsCompressionFit-NotSealed")]
          DogsCompressionFitNotSealed,
        /// <summary>
        /// Latched property
        /// </summary>
          Latched,
        /// <summary>
        /// Landed property
        /// </summary>
          Landed,
        /// <summary>
        /// SelfSealingThreaded property
        /// </summary>
          [XmlEnum("SelfSealing-Threaded")]
          SelfSealingThreaded,
        /// <summary>
        /// SlipFitSealed property
        /// </summary>
          [XmlEnum("SlipFit-Sealed")]
          SlipFitSealed,
        /// <summary>
        /// Threaded property
        /// </summary>
          Threaded,
        /// <summary>
        /// Radial property
        /// </summary>
          Radial,
        /// <summary>
        /// Unknown property
        /// </summary>
          Unknown
        }
        /// <summary>
        /// This class represents the ConnectionFormType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ConnectionFormType xsd enumeration.")]
        public enum ConnectionFormType 
        {
        /// <summary>
        /// Flange property
        /// </summary>
          Flange,
        /// <summary>
        /// Mandrel property
        /// </summary>
          Mandrel,
        /// <summary>
        /// Welded property
        /// </summary>
          Welded,
        /// <summary>
        /// Pin property
        /// </summary>
          Pin,
        /// <summary>
        /// Box property
        /// </summary>
          Box
        }
        /// <summary>
        /// This class represents the ConnectionPosition xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ConnectionPosition xsd enumeration.")]
        public enum ConnectionPosition 
        {
        /// <summary>
        /// The connection is the same at both ends of the component
        /// </summary>
          both,
        /// <summary>
        /// This connection is only at the bottom of the component
        /// </summary>
          bottom,
        /// <summary>
        /// This connection is only at the top of the component
        /// </summary>
          top,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DownholeStringType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DownholeStringType xsd enumeration.")]
        public enum DownholeStringType 
        {
        /// <summary>
        /// Casing property
        /// </summary>
          Casing,
        /// <summary>
        /// Rod property
        /// </summary>
          Rod,
        /// <summary>
        /// Tubing property
        /// </summary>
          Tubing,
        /// <summary>
        /// Wellhead property
        /// </summary>
          Wellhead,
        /// <summary>
        /// Others property
        /// </summary>
          Others
        }
        /// <summary>
        /// This class represents the SubStringType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SubStringType xsd enumeration.")]
        public enum SubStringType 
        {
        /// <summary>
        /// AbandonedJunkFish property
        /// </summary>
          [XmlEnum("Abandoned Junk/Fish")]
          AbandonedJunkFish,
        /// <summary>
        /// CapillaryStringinsideTubing property
        /// </summary>
          [XmlEnum("Capillary String (inside Tubing)")]
          CapillaryStringinsideTubing,
        /// <summary>
        /// CapillaryStringTubingCasingAnnulus property
        /// </summary>
          [XmlEnum(" Capillary String (Tubing/Casing Annulus)")]
          CapillaryStringTubingCasingAnnulus,
        /// <summary>
        /// SurfaceCasing property
        /// </summary>
          [XmlEnum("Surface Casing")]
          SurfaceCasing,
        /// <summary>
        /// ConductorCasing property
        /// </summary>
          [XmlEnum("Conductor Casing")]
          ConductorCasing,
        /// <summary>
        /// IntermediateCasing property
        /// </summary>
          [XmlEnum("Intermediate Casing")]
          IntermediateCasing,
        /// <summary>
        /// ProductionCasing property
        /// </summary>
          [XmlEnum("Production Casing")]
          ProductionCasing,
        /// <summary>
        /// ProtectiveCasing property
        /// </summary>
          [XmlEnum(" Protective Casing")]
          ProtectiveCasing,
        /// <summary>
        /// DrillString property
        /// </summary>
          [XmlEnum("Drill String")]
          DrillString,
        /// <summary>
        /// ProductionLiner property
        /// </summary>
          [XmlEnum("Production Liner ")]
          ProductionLiner,
        /// <summary>
        /// WellboreNotes property
        /// </summary>
          [XmlEnum("Wellbore Notes")]
          WellboreNotes,
        /// <summary>
        /// YToolString property
        /// </summary>
          [XmlEnum("Y-Tool String")]
          YToolString,
        /// <summary>
        /// InnerLiner property
        /// </summary>
          [XmlEnum("Inner Liner ")]
          InnerLiner,
        /// <summary>
        /// GeologicalObjects property
        /// </summary>
          [XmlEnum("Geological Objects")]
          GeologicalObjects,
        /// <summary>
        /// Flowline property
        /// </summary>
          Flowline
        }
        /// <summary>
        /// This class represents the ActivityClassType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ActivityClassType xsd enumeration.")]
        public enum ActivityClassType 
        {
        /// <summary>
        /// 
        /// </summary>
          planned,
        /// <summary>
        /// 
        /// </summary>
          unplanned,
        /// <summary>
        /// 
        /// </summary>
          downtime,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the AuthorizationStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AuthorizationStatus xsd enumeration.")]
        public enum AuthorizationStatus 
        {
        /// <summary>
        /// Not yet approved.
        /// </summary>
          draft,
        /// <summary>
        /// Approved for use.
        /// </summary>
          authorized,
        /// <summary>
        /// Obsolete; there is a newer version available.
        /// </summary>
          superceded,
        /// <summary>
        /// No longer approved in this or any other version.
        /// </summary>
          withdrawn,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BearingType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BearingType xsd enumeration.")]
        public enum BearingType 
        {
        /// <summary>
        /// oilseal property
        /// </summary>
          [XmlEnum("oil seal")]
          oilseal,
        /// <summary>
        /// mudlube property
        /// </summary>
          [XmlEnum("mud lube")]
          mudlube,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitDullCode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BitDullCode xsd enumeration.")]
        public enum BitDullCode 
        {
        /// <summary>
        /// Broken Cone
        /// </summary>
          BC,
        /// <summary>
        /// Broken teeth/cutters
        /// </summary>
          BT,
        /// <summary>
        /// Balled Up
        /// </summary>
          BU,
        /// <summary>
        /// Cracked Cone
        /// </summary>
          CC,
        /// <summary>
        /// Cone Dragged
        /// </summary>
          CD,
        /// <summary>
        /// Cone Interference
        /// </summary>
          CI,
        /// <summary>
        /// Cored
        /// </summary>
          CR,
        /// <summary>
        /// Chipped Teeth
        /// </summary>
          CT,
        /// <summary>
        /// Erosion
        /// </summary>
          ER,
        /// <summary>
        /// Flat Crested Wear
        /// </summary>
          FC,
        /// <summary>
        /// Heat Checking
        /// </summary>
          HC,
        /// <summary>
        /// Junk Damage
        /// </summary>
          JD,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LC,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LN,
        /// <summary>
        /// Lost Teeth/Cutters
        /// </summary>
          LT,
        /// <summary>
        /// No Dull/No Other Wear
        /// </summary>
          NO,
        /// <summary>
        /// Off-Center Wear
        /// </summary>
          OC,
        /// <summary>
        /// Pinched Bit
        /// </summary>
          PB,
        /// <summary>
        /// Plugged Nozzle
        /// </summary>
          PN,
        /// <summary>
        /// Rounded Gauge
        /// </summary>
          RG,
        /// <summary>
        /// Ring Out
        /// </summary>
          RO,
        /// <summary>
        /// Shirttail Damage
        /// </summary>
          SD,
        /// <summary>
        /// Self-Sharpening Wear
        /// </summary>
          SS,
        /// <summary>
        /// Tracking
        /// </summary>
          TR,
        /// <summary>
        /// WashOut on Bit
        /// </summary>
          WO,
        /// <summary>
        /// Worn Teeth/Cutters
        /// </summary>
          WT,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitReasonPulled xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BitReasonPulled xsd enumeration.")]
        public enum BitReasonPulled 
        {
        /// <summary>
        /// Change Bottom Hole Assembly
        /// </summary>
          BHA,
        /// <summary>
        /// Condition Mud
        /// </summary>
          CM,
        /// <summary>
        /// Core Point
        /// </summary>
          CP,
        /// <summary>
        /// Downhole Motor Failure
        /// </summary>
          DMF,
        /// <summary>
        /// Drill Plug
        /// </summary>
          DP,
        /// <summary>
        /// Drill Stem Test
        /// </summary>
          DST,
        /// <summary>
        /// Downhole Tool Failure
        /// </summary>
          DTF,
        /// <summary>
        /// Formation Change
        /// </summary>
          FM,
        /// <summary>
        /// Hole Problems
        /// </summary>
          HP,
        /// <summary>
        /// Hours on Bit
        /// </summary>
          HR,
        /// <summary>
        /// Run Logs
        /// </summary>
          LOG,
        /// <summary>
        /// Pump Pressure
        /// </summary>
          PP,
        /// <summary>
        /// Penetration Rate
        /// </summary>
          PR,
        /// <summary>
        /// Rig Repairs
        /// </summary>
          RIG,
        /// <summary>
        /// Total Depth/Casing Depth
        /// </summary>
          TD,
        /// <summary>
        /// Torque
        /// </summary>
          TQ,
        /// <summary>
        /// Twist Off
        /// </summary>
          TW,
        /// <summary>
        /// Weather Conditions
        /// </summary>
          WC,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BitType xsd enumeration.")]
        public enum BitType 
        {
        /// <summary>
        /// Diamond bit
        /// </summary>
          diamond,
        /// <summary>
        /// diamondcore property
        /// </summary>
          [XmlEnum("diamond core")]
          diamondcore,
        /// <summary>
        /// insertrollercone property
        /// </summary>
          [XmlEnum("insert roller cone")]
          insertrollercone,
        /// <summary>
        /// polycrystalline diamond compact fixed cutter bit
        /// </summary>
          PDC,
        /// <summary>
        /// PDCcore property
        /// </summary>
          [XmlEnum("PDC core")]
          PDCcore,
        /// <summary>
        /// rollercone property
        /// </summary>
          [XmlEnum("roller cone")]
          rollercone,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BhaStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BhaStatus xsd enumeration.")]
        public enum BhaStatus 
        {
        /// <summary>
        /// 
        /// </summary>
          final,
        /// <summary>
        /// 
        /// </summary>
          progress,
        /// <summary>
        /// 
        /// </summary>
          plan,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BladeShapeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BladeShapeType xsd enumeration.")]
        public enum BladeShapeType 
        {
        /// <summary>
        /// 
        /// </summary>
          dynamic,
        /// <summary>
        /// 
        /// </summary>
          melon,
        /// <summary>
        /// 
        /// </summary>
          spiral,
        /// <summary>
        /// 
        /// </summary>
          straight,
        /// <summary>
        /// 
        /// </summary>
          variable,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BladeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BladeType xsd enumeration.")]
        public enum BladeType 
        {
        /// <summary>
        /// clampon property
        /// </summary>
          [XmlEnum("clamp-on")]
          clampon,
        /// <summary>
        /// 
        /// </summary>
          integral,
        /// <summary>
        /// 
        /// </summary>
          sleeve,
        /// <summary>
        /// 
        /// </summary>
          welded,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BopType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BopType xsd enumeration.")]
        public enum BopType 
        {
        /// <summary>
        /// annularpreventer property
        /// </summary>
          [XmlEnum("annular preventer")]
          annularpreventer,
        /// <summary>
        /// shearram property
        /// </summary>
          [XmlEnum("shear ram")]
          shearram,
        /// <summary>
        /// blindram property
        /// </summary>
          [XmlEnum("blind ram")]
          blindram,
        /// <summary>
        /// piperam property
        /// </summary>
          [XmlEnum("pipe ram")]
          piperam,
        /// <summary>
        /// drillingspool property
        /// </summary>
          [XmlEnum("drilling spool")]
          drillingspool,
        /// <summary>
        /// flexiblejoint property
        /// </summary>
          [XmlEnum("flexible joint")]
          flexiblejoint,
        /// <summary>
        /// 
        /// </summary>
          connector,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BoxPinConfig xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BoxPinConfig xsd enumeration.")]
        public enum BoxPinConfig 
        {
        /// <summary>
        /// bottomboxtopbox property
        /// </summary>
          [XmlEnum("bottom box, top box")]
          bottomboxtopbox,
        /// <summary>
        /// bottomboxtoppin property
        /// </summary>
          [XmlEnum("bottom box, top pin")]
          bottomboxtoppin,
        /// <summary>
        /// bottompintopbox property
        /// </summary>
          [XmlEnum("bottom pin top box")]
          bottompintopbox,
        /// <summary>
        /// bottompin property
        /// </summary>
          [XmlEnum("bottom pin")]
          bottompin,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the CementJobType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CementJobType xsd enumeration.")]
        public enum CementJobType 
        {
        /// <summary>
        /// 
        /// </summary>
          primary,
        /// <summary>
        /// 
        /// </summary>
          plug,
        /// <summary>
        /// 
        /// </summary>
          squeeze,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ChangeInfoType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ChangeInfoType xsd enumeration.")]
        public enum ChangeInfoType 
        {
        /// <summary>
        /// An object was added.
        /// </summary>
          add,
        /// <summary>
        /// An object was modified.
        /// </summary>
          update,
        /// <summary>
        /// An object was deleted.
        /// </summary>
          delete
        }
        /// <summary>
        /// This class represents the ChronostratigraphyUnit xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ChronostratigraphyUnit xsd enumeration.")]
        public enum ChronostratigraphyUnit 
        {
        /// <summary>
        ///  Era is the geochronologic equivalent of an erathem. The names of erathems were chosen to reflect major changes of the development of life on the Earth: Paleozoic (old life), Mesozoic (intermediate life), and Cenozoic (recent life). 
        /// </summary>
          era,
        /// <summary>
        ///  Period is the geochronologic equivalent of a System. A system is a unit of major rank in the conventional chronostratigraphic hierarchy, above a series and below an erathem. The names of currently recognized systems are of diverse origin inherited from early classifications: some indicate chronologic position (Tertiary, Quaternary), others have lithologic connotation (Carboniferous, Cretaceous), others are tribal (Ordovician, Silurian) and still others are geographic (Devonian, Permian). 
        /// </summary>
          period,
        /// <summary>
        ///  Epoch is the geochronologic equivalent of a Series. The names of the currently recognized series are derived from their position within a system: lower, middle, upper. 
        /// </summary>
          epoch,
        /// <summary>
        ///  The stage has been called the basic working unit of chronostratigraphy because it is suited in scope and rank to the practical needs and purposes of intraregional chronostratigraphic classification. A stage is normally the lowest ranking unit in the chronostratigraphic hierarchy that can be recognized on a global scale. 
        /// </summary>
          stage
        }
        /// <summary>
        /// This class represents the DeflectionMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DeflectionMethod xsd enumeration.")]
        public enum DeflectionMethod 
        {
        /// <summary>
        /// pointbit property
        /// </summary>
          [XmlEnum("point bit")]
          pointbit,
        /// <summary>
        /// pushbit property
        /// </summary>
          [XmlEnum("push bit")]
          pushbit
        }
        /// <summary>
        /// This class represents the DerrickType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DerrickType xsd enumeration.")]
        public enum DerrickType 
        {
        /// <summary>
        /// 2 stand capacity derrick
        /// </summary>
          @double,
        /// <summary>
        /// 4 stand capacity derrick
        /// </summary>
          quadruple,
        /// <summary>
        /// Slant derrick
        /// </summary>
          slant,
        /// <summary>
        /// 3 stand capacity derrick
        /// </summary>
          triple,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DrawWorksType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DrawWorksType xsd enumeration.")]
        public enum DrawWorksType 
        {
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// standardelectric property
        /// </summary>
          [XmlEnum("standard electric")]
          standardelectric,
        /// <summary>
        /// dieselelectric property
        /// </summary>
          [XmlEnum("diesel electric")]
          dieselelectric,
        /// <summary>
        /// ramrig property
        /// </summary>
          [XmlEnum("ram rig")]
          ramrig,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DriveType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DriveType xsd enumeration.")]
        public enum DriveType 
        {
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// rotarykellydrive property
        /// </summary>
          [XmlEnum("rotary kelly drive")]
          rotarykellydrive,
        /// <summary>
        /// topdrive property
        /// </summary>
          [XmlEnum("top drive")]
          topdrive,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ElevCodeEnum xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ElevCodeEnum xsd enumeration.")]
        public enum ElevCodeEnum 
        {
        /// <summary>
        /// casing flange: A flange affixed to the top of the casing string used to attach production equipment.
        /// </summary>
          CF,
        /// <summary>
        /// crown valve
        /// </summary>
          CV,
        /// <summary>
        /// derrick floor
        /// </summary>
          DF,
        /// <summary>
        /// ground level
        /// </summary>
          GL,
        /// <summary>
        /// kelly bushing
        /// </summary>
          KB,
        /// <summary>
        /// rotary bushing
        /// </summary>
          RB,
        /// <summary>
        /// rotary table
        /// </summary>
          RT,
        /// <summary>
        /// sea floor
        /// </summary>
          SF,
        /// <summary>
        /// Lowest Astronomical Tide. The lowest tide level over the duration of the National Tidal Datum Epoch (19 years).
        /// </summary>
          LAT,
        /// <summary>
        /// Mean Sea Level - A tidal datum. The arithmetic mean of hourly heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          SL,
        /// <summary>
        /// Mean Higher High Water - A tidal datum. The average of the higher high water height of each tidal day observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHHW,
        /// <summary>
        /// Mean High Water - A tidal datum. The average of all the high water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHW,
        /// <summary>
        /// Mean Lower Low Water - A tidal datum. The average of the lower low water height of each tidal day observed over the National Tidal Datum Epoch (19 years ).
        /// </summary>
          MLLW,
        /// <summary>
        /// Mean Low Water - A tidal datum. The average of all the low water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MLW,
        /// <summary>
        /// Mean Tide Level - A tidal datum. The arithmetic mean of mean high water and mean low water. Same as half-tide level.
        /// </summary>
          MTL,
        /// <summary>
        /// kickoff point
        /// </summary>
          KO,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Ellipsoid xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the Ellipsoid xsd enumeration.")]
        public enum Ellipsoid 
        {
        /// <summary>
        /// Australian Old
        /// </summary>
          AGD66,
        /// <summary>
        /// Modified Airy
        /// </summary>
          AIRY_MOD,
        /// <summary>
        /// Airy 1830
        /// </summary>
          AIRY30,
        /// <summary>
        /// Airy 1849
        /// </summary>
          AIRY49,
        /// <summary>
        /// Australian National Same as KAU63 and SA69
        /// </summary>
          AUST_NAT,
        /// <summary>
        /// BESLDHD property
        /// </summary>
          [XmlEnum("BESL-DHD")]
          BESLDHD,
        /// <summary>
        /// BESLNGL property
        /// </summary>
          [XmlEnum("BESL-NGL")]
          BESLNGL,
        /// <summary>
        /// BESLRT9 property
        /// </summary>
          [XmlEnum("BESL-RT9")]
          BESLRT9,
        /// <summary>
        /// Bessel 1841
        /// </summary>
          BESS41,
        /// <summary>
        /// Bessel 1841 for Namibia
        /// </summary>
          BESSNAM,
        /// <summary>
        /// BOGOTA (International 1924)
        /// </summary>
          BOGOTA,
        /// <summary>
        /// Clarke 1858
        /// </summary>
          CL58,
        /// <summary>
        /// CL581 property
        /// </summary>
          [XmlEnum("CL58-1")]
          CL581,
        /// <summary>
        /// Clarke 1866
        /// </summary>
          CL66,
        /// <summary>
        /// CL66M property
        /// </summary>
          [XmlEnum("CL66-M")]
          CL66M,
        /// <summary>
        /// Clarke 1880
        /// </summary>
          CL80,
        /// <summary>
        /// CL80A property
        /// </summary>
          [XmlEnum("CL80-A")]
          CL80A,
        /// <summary>
        /// CL80B property
        /// </summary>
          [XmlEnum("CL80-B")]
          CL80B,
        /// <summary>
        /// CL80I property
        /// </summary>
          [XmlEnum("CL80-I")]
          CL80I,
        /// <summary>
        /// CL80J property
        /// </summary>
          [XmlEnum("CL80-J")]
          CL80J,
        /// <summary>
        /// CL80M property
        /// </summary>
          [XmlEnum("CL80-M")]
          CL80M,
        /// <summary>
        /// CL80P property
        /// </summary>
          [XmlEnum("CL80-P")]
          CL80P,
        /// <summary>
        /// CAMPO INCH (International 1924)
        /// </summary>
          CMPOINCH,
        /// <summary>
        /// Danish
        /// </summary>
          DAN,
        /// <summary>
        /// DELAMBRE 1810 
        /// </summary>
          DELA,
        /// <summary>
        /// ED50 (International 1924)
        /// </summary>
          ED50,
        /// <summary>
        /// EGYPT07 (Helmert 1906)
        /// </summary>
          EGYPT07,
        /// <summary>
        /// Everest 1830 - Indian
        /// </summary>
          EVER,
        /// <summary>
        /// Everest 1948
        /// </summary>
          EVER48,
        /// <summary>
        /// Everest 1956
        /// </summary>
          EVER56,
        /// <summary>
        /// Everest 1969
        /// </summary>
          EVER69,
        /// <summary>
        /// EVERBR property
        /// </summary>
          [XmlEnum("EVER-BR")]
          EVERBR,
        /// <summary>
        /// Modified Everest
        /// </summary>
          EVERMOD,
        /// <summary>
        /// EVERP property
        /// </summary>
          [XmlEnum("EVER-P")]
          EVERP,
        /// <summary>
        /// EVERTM property
        /// </summary>
          [XmlEnum("EVER-TM")]
          EVERTM,
        /// <summary>
        /// Everest - Timbali 
        /// </summary>
          EVTM,
        /// <summary>
        /// "Fischer 1960 aka ""Mercury"""
        /// </summary>
          FISC60,
        /// <summary>
        /// Fischer 1960 Modified
        /// </summary>
          FISC60MOD,
        /// <summary>
        /// "Fischer 1968 aka ""Modified Mercury"""
        /// </summary>
          FISC68,
        /// <summary>
        /// "Modified Fischer 1960 aka ""South Asia"""
        /// </summary>
          FISCMOD,
        /// <summary>
        /// GDA94 - Australia
        /// </summary>
          GDA94,
        /// <summary>
        /// Geodetic Reference System 1967
        /// </summary>
          GRS67,
        /// <summary>
        /// Geodetic Reference System 1980
        /// </summary>
          GRS80,
        /// <summary>
        /// Hayford 1909
        /// </summary>
          HAY09,
        /// <summary>
        /// Heiskanen 1929
        /// </summary>
          HEIS,
        /// <summary>
        /// Helmert 1906
        /// </summary>
          HEL06,
        /// <summary>
        /// Helmert 1907 
        /// </summary>
          HEL07,
        /// <summary>
        /// Hough 1956 
        /// </summary>
          HOUG,
        /// <summary>
        /// IAG75 property
        /// </summary>
          [XmlEnum("IAG-75")]
          IAG75,
        /// <summary>
        /// INDIAN75 (Everest 1930)
        /// </summary>
          INDIAN75,
        /// <summary>
        /// INDO74 property
        /// </summary>
          [XmlEnum("INDO-74")]
          INDO74,
        /// <summary>
        /// International 1924
        /// </summary>
          INT24,
        /// <summary>
        /// IUGG 1967
        /// </summary>
          IUGG67,
        /// <summary>
        /// IUGG 1975
        /// </summary>
          IUGG75,
        /// <summary>
        /// Jeffreys 1948
        /// </summary>
          JEFF48,
        /// <summary>
        /// Kaula 1963 Same as AUST_NAT and SA69
        /// </summary>
          KAU63,
        /// <summary>
        /// Krassovsky
        /// </summary>
          KRSV,
        /// <summary>
        /// MERIT83
        /// </summary>
          MERIT83,
        /// <summary>
        /// NAD27 (Clarke 1866)
        /// </summary>
          NAD27,
        /// <summary>
        /// NAHRAN (Clarke 1880)
        /// </summary>
          NAHRAN,
        /// <summary>
        /// New International 1967
        /// </summary>
          NEWINT67,
        /// <summary>
        /// NWL10D property
        /// </summary>
          [XmlEnum("NWL-10D")]
          NWL10D,
        /// <summary>
        /// NWL9D property
        /// </summary>
          [XmlEnum("NWL-9D")]
          NWL9D,
        /// <summary>
        /// OSGB36 (Airy 1830)
        /// </summary>
          OSGB36,
        /// <summary>
        /// OSU86F
        /// </summary>
          OSU86F,
        /// <summary>
        /// OSU91A
        /// </summary>
          OSU91A,
        /// <summary>
        /// PLESSIS1817 property
        /// </summary>
          [XmlEnum("PLESSIS-1817")]
          PLESSIS1817,
        /// <summary>
        /// PSAD56 (International 1924)
        /// </summary>
          PSAD56,
        /// <summary>
        /// Pointe Noire 1948
        /// </summary>
          PTNOIRE,
        /// <summary>
        /// South American 1969
        /// </summary>
          SA69,
        /// <summary>
        /// Sphere of radius 6370997
        /// </summary>
          SPHR,
        /// <summary>
        /// Struve 1860
        /// </summary>
          STRU,
        /// <summary>
        /// Walbeck
        /// </summary>
          WALB,
        /// <summary>
        /// War Office 1924
        /// </summary>
          WAR24,
        /// <summary>
        /// World Geodetic System 1960
        /// </summary>
          WGS60,
        /// <summary>
        /// World Geodetic System 1966
        /// </summary>
          WGS66,
        /// <summary>
        /// World Geodetic System 1972
        /// </summary>
          WGS72,
        /// <summary>
        /// World Geodetic System 1984
        /// </summary>
          WGS84,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ErrorTermSource xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ErrorTermSource xsd enumeration.")]
        public enum ErrorTermSource 
        {
        /// <summary>
        /// Errors arising from sensors in the survey tool 
        /// </summary>
          sensor,
        /// <summary>
        /// azimuthreference property
        /// </summary>
          [XmlEnum("azimuth reference")]
          azimuthreference,
        /// <summary>
        /// Errors arising from external magnetic field influences
        /// </summary>
          magnetic,
        /// <summary>
        /// Errors arising from the attitude of tool relative to borehole
        /// </summary>
          alignment,
        /// <summary>
        /// 
        /// </summary>
          misalignment,
        /// <summary>
        /// Errors arising from the measurement of depth 
        /// </summary>
          depth,
        /// <summary>
        /// Errors arising from the measurement of depth 
        /// </summary>
          reference,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ErrorPropagationMode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ErrorPropagationMode xsd enumeration.")]
        public enum ErrorPropagationMode 
        {
        /// <summary>
        /// Bias
        /// </summary>
          B,
        /// <summary>
        /// Random
        /// </summary>
          R,
        /// <summary>
        /// Systematic
        /// </summary>
          S,
        /// <summary>
        /// Well
        /// </summary>
          W,
        /// <summary>
        /// Global
        /// </summary>
          G,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ErrorModelMisalignmentMode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ErrorModelMisalignmentMode xsd enumeration.")]
        public enum ErrorModelMisalignmentMode 
        {
        /// <summary>
        /// Item1 property
        /// </summary>
          [XmlEnum("1")]
          Item1,
        /// <summary>
        /// Item2 property
        /// </summary>
          [XmlEnum("2")]
          Item2,
        /// <summary>
        /// Item3 property
        /// </summary>
          [XmlEnum("3")]
          Item3,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the GasPeakType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the GasPeakType xsd enumeration.")]
        public enum GasPeakType 
        {
        /// <summary>
        /// circulatingbackgroundgas property
        /// </summary>
          [XmlEnum("circulating background gas")]
          circulatingbackgroundgas,
        /// <summary>
        /// connectiongas property
        /// </summary>
          [XmlEnum("connection gas")]
          connectiongas,
        /// <summary>
        /// drillingbackgroundgas property
        /// </summary>
          [XmlEnum("drilling background gas")]
          drillingbackgroundgas,
        /// <summary>
        /// drillinggaspeak property
        /// </summary>
          [XmlEnum("drilling gas peak")]
          drillinggaspeak,
        /// <summary>
        /// flowcheckgas property
        /// </summary>
          [XmlEnum("flow check gas")]
          flowcheckgas,
        /// <summary>
        /// noreadings property
        /// </summary>
          [XmlEnum("no readings")]
          noreadings,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// shutdowngas property
        /// </summary>
          [XmlEnum("shut down gas")]
          shutdowngas,
        /// <summary>
        /// tripgas property
        /// </summary>
          [XmlEnum("trip gas")]
          tripgas,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the GeodeticDatum xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the GeodeticDatum xsd enumeration.")]
        public enum GeodeticDatum 
        {
        /// <summary>
        /// Adindian ellipsoid=CL80 region="Sudan, Ethiopia"
        /// </summary>
          ADND,
        /// <summary>
        /// ARC 1950 ellipsoid=CL80B region="Southern Africa"
        /// </summary>
          ARC50,
        /// <summary>
        /// Australian ellipsoid=GRS67 region="Australia Geodetic"
        /// </summary>
          AUSG,
        /// <summary>
        /// Camp Area Astro ellipsoid=INT24 region=Antarctica 
        /// </summary>
          CAA,
        /// <summary>
        /// Chau Astro ellipsoid=INT24 region=Paraguay 
        /// </summary>
          CHAS,
        /// <summary>
        /// Corrego Alegre ellipsoid=INT24 region=INT24 
        /// </summary>
          CORAL,
        /// <summary>
        /// European 1950 ellipsoid=INT24 region="Europe, Middle East, North Africa"
        /// </summary>
          ED50,
        /// <summary>
        /// European 1987 ellipsoid=INT24 region="Europe, Middle East, North Africa"
        /// </summary>
          ED87,
        /// <summary>
        /// Ireland 1965 ellipsoid=AIRY_MOD region=Ireland 
        /// </summary>
          ERIN65,
        /// <summary>
        /// Geodetic Datum 1949 ellipsoid=INT24 region="New Zealand"
        /// </summary>
          GD49,
        /// <summary>
        /// Ghana ellipsoid=WAR24 region=Ghana 
        /// </summary>
          GHANA,
        /// <summary>
        /// Guam 1963 ellipsoid=CL66 region="Marianas Islands"
        /// </summary>
          GUAM63,
        /// <summary>
        /// Hjorsey 1955 ellipsoid=INT24 region=Iceland 
        /// </summary>
          HJRS55,
        /// <summary>
        /// Hu-Tzu-Shan ellipsoid=INT24 region=Taiwan 
        /// </summary>
          HTS,
        /// <summary>
        /// Campo Inchauspe ellipsoid=INT24 region=Argentina 
        /// </summary>
          INCH,
        /// <summary>
        /// Indian 'Kalimpur' ellipsoid=EVER region=India 
        /// </summary>
          INDIA1,
        /// <summary>
        /// Indian 'Kalimpur' ellipsoid=INT24 region=India 
        /// </summary>
          INDIA2,
        /// <summary>
        /// Indonesia 1974 ellipsoid=GRS67 region=Indonesia 
        /// </summary>
          INDNS74,
        /// <summary>
        /// Liberia 1964 ellipsoid=CL80 region=Liberia 
        /// </summary>
          LIB64,
        /// <summary>
        /// Luzon ellipsoid=CL66 region=Philippines 
        /// </summary>
          LUZON,
        /// <summary>
        /// Merchich ellipsoid=CL80A region=Morocco 
        /// </summary>
          MRCH,
        /// <summary>
        /// North American 'Meades Ranch' ellipsoid=CL66 region="North America"
        /// </summary>
          NAD27,
        /// <summary>
        /// North American Datum of 1983 ellipsoid=GRS80 region="Canada, Cuba, U.S., Caribbean"
        /// </summary>
          NAD83,
        /// <summary>
        /// Nigeria ellipsoid=CL80 region=Nigeria 
        /// </summary>
          NGRA,
        /// <summary>
        /// 
        /// </summary>
          None,
        /// <summary>
        /// Naparima ellipsoid=INT24 region="Trinidad and Tobago"
        /// </summary>
          NPRM,
        /// <summary>
        /// Ordnance Survey of Great Britain 1936 ellipsoid=AIRY region="Great Britain, Northern Ireland"
        /// </summary>
          OSGB36,
        /// <summary>
        /// European 'Pelmert Tower, Potsdam' ellipsoid=INT24 region="Most of Eurasia, Africa"
        /// </summary>
          POTS1,
        /// <summary>
        /// Russian 'Pulkovo' ellipsoid=BESS41 
        /// </summary>
          PULK1,
        /// <summary>
        /// Russian 'Pulkovo' ellipsoid=KRSV 
        /// </summary>
          PULK2,
        /// <summary>
        /// Qornoq ellipsoid=INT24 region=Greenland 
        /// </summary>
          QRNQ,
        /// <summary>
        /// Provisional South American, 1956 ellipsoid=INT24 region="Bolivia, Chile, Colombia, Ecuador, Peru, Venezuela, the Guianas"
        /// </summary>
          SA56,
        /// <summary>
        /// Sierra Leone 1960 ellipsoid=CL80 region="Sierra Leone"
        /// </summary>
          SRL60,
        /// <summary>
        /// Tananarive (Antananarivo) Obsv. 1925T ellipsoid=INT24 region="Malagasy Republic"
        /// </summary>
          TNRV25,
        /// <summary>
        /// Tokyo ellipsoid=BESS41 region=Japan
        /// </summary>
          TOKYO,
        /// <summary>
        /// Datum defined elsewhere
        /// </summary>
          UserDefined,
        /// <summary>
        /// Voirol ellipsoid=CL80 region="Algeria, Tunisia"
        /// </summary>
          VROL,
        /// <summary>
        /// World Geodetic System 1972 ellipsoid=WGS72
        /// </summary>
          WGS72,
        /// <summary>
        /// World Geodetic System 1984 ellipsoid=WGS84 region="Sino-Soviet Bloc, SW Asia, Hydrographic, Aeronautical"
        /// </summary>
          WGS84,
        /// <summary>
        /// Yacare ellipsoid=INT24 region=Uruguay
        /// </summary>
          YACR,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Hemispheres xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the Hemispheres xsd enumeration.")]
        public enum HemisphereList 
        {
        /// <summary>
        /// Northern hemisphere.
        /// </summary>
          northern,
        /// <summary>
        /// Southern hemisphere.
        /// </summary>
          southern,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the HoleCasingType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the HoleCasingType xsd enumeration.")]
        public enum HoleCasingType 
        {
        /// <summary>
        /// blowoutpreventer property
        /// </summary>
          [XmlEnum("blow out preventer")]
          blowoutpreventer,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// 
        /// </summary>
          conductor,
        /// <summary>
        /// curvedconductor property
        /// </summary>
          [XmlEnum("curved conductor")]
          curvedconductor,
        /// <summary>
        /// 
        /// </summary>
          liner,
        /// <summary>
        /// openhole property
        /// </summary>
          [XmlEnum("open hole")]
          openhole,
        /// <summary>
        /// 
        /// </summary>
          riser,
        /// <summary>
        /// 
        /// </summary>
          tubing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the HoleOpenerType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the HoleOpenerType xsd enumeration.")]
        public enum HoleOpenerType 
        {
        /// <summary>
        /// underreamer property
        /// </summary>
          [XmlEnum("under-reamer")]
          underreamer,
        /// <summary>
        /// fixedblade property
        /// </summary>
          [XmlEnum("fixed blade")]
          fixedblade,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the InnerBarrelType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the InnerBarrelType xsd enumeration.")]
        public enum InnerBarrelType 
        {
        /// <summary>
        /// A pipe that is located inside a core barrel to hold the core sample.
        /// </summary>
          undifferented,
        /// <summary>
        /// An inner core barrel made of aluminium.
        /// </summary>
          aluminum,
        /// <summary>
        /// An inner core barrel that that seals off the core sample using gel as the sealing material.
        /// </summary>
          gel,
        /// <summary>
        /// An inner core barrel made of glass fiber reinforced plastic.
        /// </summary>
          fiberglass,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the JarType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the JarType xsd enumeration.")]
        public enum JarType 
        {
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// 
        /// </summary>
          hydraulic,
        /// <summary>
        /// hydromechanical property
        /// </summary>
          [XmlEnum("hydro mechanical")]
          hydromechanical,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the JarAction xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the JarAction xsd enumeration.")]
        public enum JarAction 
        {
        /// <summary>
        /// 
        /// </summary>
          up,
        /// <summary>
        /// 
        /// </summary>
          down,
        /// <summary>
        /// 
        /// </summary>
          both,
        /// <summary>
        /// 
        /// </summary>
          vibrating,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LithologySource xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LithologySource xsd enumeration.")]
        public enum LithologySource 
        {
        /// <summary>
        /// The lithology has one overall interpretation based on several sources such as logs and cuttings or cores.
        /// </summary>
          interpreted,
        /// <summary>
        /// The lithology as based on a visual inspection of the core. A percentage is commonly assigned to each portion of the lithology.
        /// </summary>
          core,
        /// <summary>
        /// The lithology as based on a visual inspection of the cuttings. A percentage is commonly assigned to each portion of the lithology.
        /// </summary>
          cuttings,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LithostratigraphyUnit xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LithostratigraphyUnit xsd enumeration.")]
        public enum LithostratigraphyUnit 
        {
        /// <summary>
        ///  A succession of two or more contiguous or associated formations with significant and diagnostic lithologic properties in common. Formations need not be aggregated into groups unless doing so provides a useful means of simplifying stratigraphic classification in certain regions or certain intervals. Thickness of a stratigraphic succession is not a valid reason for defining a unit as a group rather than a formation. The component formations of a group need not be everywhere the same. 
        /// </summary>
          group,
        /// <summary>
        ///  The primary formal unit of lithostratigraphic classification. Formations are the only formal lithostratigraphic units into which the stratigraphic column everywhere should be divided completely on the basis of lithology. The contrast in lithology between formations required to justify their establishment varies with the complexity of the geology of a region and the detail needed for geologic mapping and to work out its geologic history. No formation is considered justifiable and useful that cannot be delineated at the scale of geologic mapping practiced in the region. The thickness of formations may range from less than a meter to several thousand meters. 
        /// </summary>
          formation,
        /// <summary>
        ///  The formal lithostratigraphic unit next in rank below a formation. It possesses lithologic properties distinguishing it from adjacent parts of the formation. No fixed standard is required for the extent and thickness of a member. A formation need not be divided into members unless a useful purpose is thus served. Some formations may be completely divided into members; others may have only certain parts designated as members. A member may extend from one formation to another. 
        /// </summary>
          member,
        /// <summary>
        ///  The smallest formal unit in the hierarchy of sedimentary lithostratigraphic units, e.g. a single stratum lithologically distinguishable from other layers above and below. Customarily only distinctive beds (key beds, marker beds) particularly useful for stratigraphic purposes are given proper names and considered formal lithostratigraphic units. 
        /// </summary>
          bed
        }
        /// <summary>
        /// This class represents the LogDataType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogDataType xsd enumeration.")]
        public enum LogDataType 
        {
        /// <summary>
        /// Integer data value (nominally a one byte value). The value must conform to format of the xsd:dateTime data type (minInclusive=-128 and maxInclusive=127).
        /// </summary>
          @byte,
        /// <summary>
        /// datetime property
        /// </summary>
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// Double precision floating point value (nominally an 8 byte value). The value must conform to format of the xsd:double data type.
        /// </summary>
          @double,
        /// <summary>
        /// Single precision floating point value (nominally an 4 byte value). The value must conform to format of the xsd:float data type.
        /// </summary>
          @float,
        /// <summary>
        /// Integer data value (nominally an 4 byte value). The value must conform to format of the xsd:int data type.
        /// </summary>
          @int,
        /// <summary>
        /// Long integer data value (nominally an 8 byte value). The value must conform to format of the xsd:long data type.
        /// </summary>
          @long,
        /// <summary>
        /// Integer data value (nominally an 2 byte value). The value must conform to format of the xsd:short data type (minInclusive=-32768 and maxInclusive=32767).
        /// </summary>
          @short,
        /// <summary>
        /// Character string data. The value must conform to format of the xsd:string data type. The maximum length of a value is server dependent.
        /// </summary>
          @string,
        /// <summary>
        /// Character string data with a maximum length of 40 characters. The value must conform to format of the xsd:string data type.
        /// </summary>
          string40,
        /// <summary>
        /// Character string data with a maximum length of 16 characters. The value must conform to format of the xsd:string data type.
        /// </summary>
          string16,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogIndexDirection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogIndexDirection xsd enumeration.")]
        public enum LogIndexDirection 
        {
        /// <summary>
        /// Log items are in order of decreasing index values (e.g. wireline log logging while pulling out of hole)
        /// </summary>
          decreasing,
        /// <summary>
        /// Log items are in order of increasing index values (e.g. increasing depths or times)
        /// </summary>
          increasing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogTraceOrigin xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogTraceOrigin xsd enumeration.")]
        public enum LogTraceOrigin 
        {
        /// <summary>
        /// The data were read from a realtime sensor stream.
        /// </summary>
          realtime,
        /// <summary>
        /// The data are synthetic.
        /// </summary>
          modeled,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogTraceState xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogTraceState xsd enumeration.")]
        public enum LogTraceState 
        {
        /// <summary>
        /// depthadjusted property
        /// </summary>
          [XmlEnum("depth adjusted")]
          depthadjusted,
        /// <summary>
        /// 
        /// </summary>
          edited,
        /// <summary>
        /// 
        /// </summary>
          joined,
        /// <summary>
        /// 
        /// </summary>
          processed,
        /// <summary>
        /// 
        /// </summary>
          raw,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MaterialType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MaterialType xsd enumeration.")]
        public enum MaterialType 
        {
        /// <summary>
        /// 
        /// </summary>
          aluminum,
        /// <summary>
        /// berylliumcopper property
        /// </summary>
          [XmlEnum("beryllium copper")]
          berylliumcopper,
        /// <summary>
        /// chromealloy property
        /// </summary>
          [XmlEnum("chrome alloy")]
          chromealloy,
        /// <summary>
        /// 
        /// </summary>
          composite,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// nonmagneticsteel property
        /// </summary>
          [XmlEnum("non-magnetic steel")]
          nonmagneticsteel,
        /// <summary>
        /// 
        /// </summary>
          plastic,
        /// <summary>
        /// 
        /// </summary>
          steel,
        /// <summary>
        /// steelalloy property
        /// </summary>
          [XmlEnum("steel alloy")]
          steelalloy,
        /// <summary>
        /// 
        /// </summary>
          titanium,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MeasurementType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MeasurementType xsd enumeration.")]
        public enum MeasurementType 
        {
        /// <summary>
        /// Output from an accelerometer on a logging tool.
        /// </summary>
          acceleration,
        /// <summary>
        /// acousticcaliper property
        /// </summary>
          [XmlEnum("acoustic caliper")]
          acousticcaliper,
        /// <summary>
        /// acousticcasingcollarlocator property
        /// </summary>
          [XmlEnum("acoustic casing collar locator")]
          acousticcasingcollarlocator,
        /// <summary>
        /// acousticimpedance property
        /// </summary>
          [XmlEnum("acoustic impedance")]
          acousticimpedance,
        /// <summary>
        /// acousticporosity property
        /// </summary>
          [XmlEnum("acoustic porosity")]
          acousticporosity,
        /// <summary>
        /// acousticvelocity property
        /// </summary>
          [XmlEnum("acoustic velocity")]
          acousticvelocity,
        /// <summary>
        /// acousticwavematrixtraveltime property
        /// </summary>
          [XmlEnum("acoustic wave matrix travel time")]
          acousticwavematrixtraveltime,
        /// <summary>
        /// acousticwavetraveltime property
        /// </summary>
          [XmlEnum("acoustic wave travel time")]
          acousticwavetraveltime,
        /// <summary>
        /// Any measurement of the maximum departure of a wave from an average value.
        /// </summary>
          amplitude,
        /// <summary>
        /// amplitudeofacousticwave property
        /// </summary>
          [XmlEnum("amplitude of acoustic wave")]
          amplitudeofacousticwave,
        /// <summary>
        /// amplitudeofEMwave property
        /// </summary>
          [XmlEnum("amplitude of E-M wave")]
          amplitudeofEMwave,
        /// <summary>
        /// amplituderatio property
        /// </summary>
          [XmlEnum("amplitude ratio")]
          amplituderatio,
        /// <summary>
        /// A particular extent of space or surface.
        /// </summary>
          area,
        /// <summary>
        /// The amount of reduction in the amplitude of a wave.
        /// </summary>
          attenuation,
        /// <summary>
        /// attenuationofacousticwave property
        /// </summary>
          [XmlEnum("attenuation of acoustic wave")]
          attenuationofacousticwave,
        /// <summary>
        /// attenuationofEMwave property
        /// </summary>
          [XmlEnum("attenuation of E-M wave")]
          attenuationofEMwave,
        /// <summary>
        /// A general classification for measurements which are very specialized and not normally accessed by petrophysicists.
        /// </summary>
          auxiliary,
        /// <summary>
        /// averageporosity property
        /// </summary>
          [XmlEnum("average porosity")]
          averageporosity,
        /// <summary>
        /// In the horizontal plane, it is the clockwise angle of departure from magnetic north (while looking down hole).
        /// </summary>
          azimuth,
        /// <summary>
        /// baritemudcorrection property
        /// </summary>
          [XmlEnum("barite mud correction")]
          baritemudcorrection,
        /// <summary>
        /// bedthicknesscorrection property
        /// </summary>
          [XmlEnum("bed thickness correction")]
          bedthicknesscorrection,
        /// <summary>
        /// bitsize property
        /// </summary>
          [XmlEnum("bit size")]
          bitsize,
        /// <summary>
        /// A well log trace which has been edited to reflect sharp bed boundaries. The trace has a square wave appearance.
        /// </summary>
          blocked,
        /// <summary>
        /// boreholeenvironmentcorrection property
        /// </summary>
          [XmlEnum("borehole environment correction")]
          boreholeenvironmentcorrection,
        /// <summary>
        /// boreholefluidcompositioncorrection property
        /// </summary>
          [XmlEnum("borehole fluid composition correction")]
          boreholefluidcompositioncorrection,
        /// <summary>
        /// boreholefluidcorrection property
        /// </summary>
          [XmlEnum("borehole fluid correction")]
          boreholefluidcorrection,
        /// <summary>
        /// boreholesizecorrection property
        /// </summary>
          [XmlEnum("borehole size correction")]
          boreholesizecorrection,
        /// <summary>
        /// bromidemudcorrection property
        /// </summary>
          [XmlEnum("bromide mud correction")]
          bromidemudcorrection,
        /// <summary>
        /// bulkcompressibility property
        /// </summary>
          [XmlEnum("bulk compressibility")]
          bulkcompressibility,
        /// <summary>
        /// bulkdensity property
        /// </summary>
          [XmlEnum("bulk density")]
          bulkdensity,
        /// <summary>
        /// bulkvolume property
        /// </summary>
          [XmlEnum("bulk volume")]
          bulkvolume,
        /// <summary>
        /// bulkvolumegas property
        /// </summary>
          [XmlEnum("bulk volume gas")]
          bulkvolumegas,
        /// <summary>
        /// bulkvolumehydrocarbon property
        /// </summary>
          [XmlEnum("bulk volume hydrocarbon")]
          bulkvolumehydrocarbon,
        /// <summary>
        /// bulkvolumeoil property
        /// </summary>
          [XmlEnum("bulk volume oil")]
          bulkvolumeoil,
        /// <summary>
        /// bulkvolumewater property
        /// </summary>
          [XmlEnum("bulk volume water")]
          bulkvolumewater,
        /// <summary>
        /// COratio property
        /// </summary>
          [XmlEnum("C/O ratio")]
          COratio,
        /// <summary>
        /// A well log used to record hole diameter (open or cased).
        /// </summary>
          caliper,
        /// <summary>
        /// casedholecorrection property
        /// </summary>
          [XmlEnum("cased hole correction")]
          casedholecorrection,
        /// <summary>
        /// casingcollarlocator property
        /// </summary>
          [XmlEnum("casing collar locator")]
          casingcollarlocator,
        /// <summary>
        /// casingcorrection property
        /// </summary>
          [XmlEnum("casing correction")]
          casingcorrection,
        /// <summary>
        /// casingdiametercorrection property
        /// </summary>
          [XmlEnum("casing diameter correction")]
          casingdiametercorrection,
        /// <summary>
        /// casinginspection property
        /// </summary>
          [XmlEnum("casing inspection")]
          casinginspection,
        /// <summary>
        /// casingthicknesscorrection property
        /// </summary>
          [XmlEnum("casing thickness correction")]
          casingthicknesscorrection,
        /// <summary>
        /// casingweightcorrection property
        /// </summary>
          [XmlEnum("casing weight correction")]
          casingweightcorrection,
        /// <summary>
        /// cementcorrection property
        /// </summary>
          [XmlEnum("cement correction")]
          cementcorrection,
        /// <summary>
        /// cementdensitycorrection property
        /// </summary>
          [XmlEnum("cement density correction")]
          cementdensitycorrection,
        /// <summary>
        /// cementevaluation property
        /// </summary>
          [XmlEnum("cement evaluation")]
          cementevaluation,
        /// <summary>
        /// cementthicknesscorrection property
        /// </summary>
          [XmlEnum("cement thickness correction")]
          cementthicknesscorrection,
        /// <summary>
        /// cementtypecorrection property
        /// </summary>
          [XmlEnum("cement type correction")]
          cementtypecorrection,
        /// <summary>
        /// CHdensityporosity property
        /// </summary>
          [XmlEnum("CH density porosity")]
          CHdensityporosity,
        /// <summary>
        /// CHdolomitedensityporosity property
        /// </summary>
          [XmlEnum("CH dolomite density porosity")]
          CHdolomitedensityporosity,
        /// <summary>
        /// CHdolomiteneutronporosity property
        /// </summary>
          [XmlEnum("CH dolomite neutron porosity")]
          CHdolomiteneutronporosity,
        /// <summary>
        /// CHlimestonedensityporosity property
        /// </summary>
          [XmlEnum("CH limestone density porosity")]
          CHlimestonedensityporosity,
        /// <summary>
        /// CHlimestoneneutronporosity property
        /// </summary>
          [XmlEnum("CH limestone neutron porosity")]
          CHlimestoneneutronporosity,
        /// <summary>
        /// CHneutronporosity property
        /// </summary>
          [XmlEnum("CH neutron porosity")]
          CHneutronporosity,
        /// <summary>
        /// CHsandstonedensityporosity property
        /// </summary>
          [XmlEnum("CH sandstone density porosity")]
          CHsandstonedensityporosity,
        /// <summary>
        /// CHsandstoneneutronporosity property
        /// </summary>
          [XmlEnum("CH sandstone neutron porosity")]
          CHsandstoneneutronporosity,
        /// <summary>
        /// compressionalwavedolomiteporosity property
        /// </summary>
          [XmlEnum("compressional wave dolomite porosity")]
          compressionalwavedolomiteporosity,
        /// <summary>
        /// compressionalwavelimestoneporosity property
        /// </summary>
          [XmlEnum("compressional wave limestone porosity")]
          compressionalwavelimestoneporosity,
        /// <summary>
        /// compressionalwavematrixtraveltime property
        /// </summary>
          [XmlEnum("compressional wave matrix travel time")]
          compressionalwavematrixtraveltime,
        /// <summary>
        /// compressionalwavesandstoneporosity property
        /// </summary>
          [XmlEnum("compressional wave sandstone porosity")]
          compressionalwavesandstoneporosity,
        /// <summary>
        /// compressionalwavetraveltime property
        /// </summary>
          [XmlEnum("compressional wave travel time")]
          compressionalwavetraveltime,
        /// <summary>
        /// The property of a medium (solid or fluid) which allows the medium to conduct a form of energy; e.g., electrical conductivity or thermal conductivity.
        /// </summary>
          conductivity,
        /// <summary>
        /// conductivityfromattenuation property
        /// </summary>
          [XmlEnum("conductivity from attenuation")]
          conductivityfromattenuation,
        /// <summary>
        /// conductivityfromphaseshift property
        /// </summary>
          [XmlEnum("conductivity from phase shift")]
          conductivityfromphaseshift,
        /// <summary>
        /// connatewaterconductivity property
        /// </summary>
          [XmlEnum("connate water conductivity")]
          connatewaterconductivity,
        /// <summary>
        /// connatewaterresistivity property
        /// </summary>
          [XmlEnum("connate water resistivity")]
          connatewaterresistivity,
        /// <summary>
        /// conventionalcoreporosity property
        /// </summary>
          [XmlEnum("conventional core porosity")]
          conventionalcoreporosity,
        /// <summary>
        /// corematrixdensity property
        /// </summary>
          [XmlEnum("core matrix density")]
          corematrixdensity,
        /// <summary>
        /// corepermeability property
        /// </summary>
          [XmlEnum("core permeability")]
          corepermeability,
        /// <summary>
        /// coreporosity property
        /// </summary>
          [XmlEnum("core porosity")]
          coreporosity,
        /// <summary>
        /// A trace which has had corrections applied; e.g. environmental corrections.
        /// </summary>
          corrected,
        /// <summary>
        /// countrate property
        /// </summary>
          [XmlEnum("count rate")]
          countrate,
        /// <summary>
        /// countrateratio property
        /// </summary>
          [XmlEnum("count rate ratio")]
          countrateratio,
        /// <summary>
        /// crossplotporosity property
        /// </summary>
          [XmlEnum("cross plot porosity")]
          crossplotporosity,
        /// <summary>
        /// decaytime property
        /// </summary>
          [XmlEnum("decay time")]
          decaytime,
        /// <summary>
        /// deepconductivity property
        /// </summary>
          [XmlEnum("deep conductivity")]
          deepconductivity,
        /// <summary>
        /// deepinductionconductivity property
        /// </summary>
          [XmlEnum("deep induction conductivity")]
          deepinductionconductivity,
        /// <summary>
        /// deepinductionresistivity property
        /// </summary>
          [XmlEnum("deep induction resistivity")]
          deepinductionresistivity,
        /// <summary>
        /// deeplaterologconductivity property
        /// </summary>
          [XmlEnum("deep laterolog conductivity")]
          deeplaterologconductivity,
        /// <summary>
        /// deeplaterologresistivity property
        /// </summary>
          [XmlEnum("deep laterolog resistivity")]
          deeplaterologresistivity,
        /// <summary>
        /// deepresistivity property
        /// </summary>
          [XmlEnum("deep resistivity")]
          deepresistivity,
        /// <summary>
        /// Mass per unit Volume - well logging units are usually gm/cc.
        /// </summary>
          density,
        /// <summary>
        /// densityporosity property
        /// </summary>
          [XmlEnum("density porosity")]
          densityporosity,
        /// <summary>
        /// The distance to a point in a wellbore.
        /// </summary>
          depth,
        /// <summary>
        /// depthadjusted property
        /// </summary>
          [XmlEnum("depth adjusted")]
          depthadjusted,
        /// <summary>
        /// depthderivedfromvelocity property
        /// </summary>
          [XmlEnum("depth derived from velocity")]
          depthderivedfromvelocity,
        /// <summary>
        /// Departure of a borehole from vertical. Also, the angle measured between the tool axis and vertical.
        /// </summary>
          deviation,
        /// <summary>
        /// Relative permittivity.
        /// </summary>
          dielectric,
        /// <summary>
        /// diffusioncorrection property
        /// </summary>
          [XmlEnum("diffusion correction")]
          diffusioncorrection,
        /// <summary>
        /// The angle that a structural surface, e.g. a bedding or fault plane, makes with the horizontal, measured perpendicular to the strike of the structure.
        /// </summary>
          dip,
        /// <summary>
        /// Any of a number of measurements produced by a tool designed to measure formation dip and borehole characteristics through direct and indirect measurements.
        /// </summary>
          dipmeter,
        /// <summary>
        /// dipmeterconductivity property
        /// </summary>
          [XmlEnum("dipmeter conductivity")]
          dipmeterconductivity,
        /// <summary>
        /// dipmeterresistivity property
        /// </summary>
          [XmlEnum("dipmeter resistivity")]
          dipmeterresistivity,
        /// <summary>
        /// dolomiteacousticporosity property
        /// </summary>
          [XmlEnum("dolomite acoustic porosity")]
          dolomiteacousticporosity,
        /// <summary>
        /// dolomitedensityporosity property
        /// </summary>
          [XmlEnum("dolomite density porosity")]
          dolomitedensityporosity,
        /// <summary>
        /// dolomiteneutronporosity property
        /// </summary>
          [XmlEnum("dolomite neutron porosity")]
          dolomiteneutronporosity,
        /// <summary>
        /// A well log trace which has been corrected or adjusted through an editing process.
        /// </summary>
          edited,
        /// <summary>
        /// effectiveporosity property
        /// </summary>
          [XmlEnum("effective porosity")]
          effectiveporosity,
        /// <summary>
        /// electriccurrent property
        /// </summary>
          [XmlEnum("electric current")]
          electriccurrent,
        /// <summary>
        /// electricpotential property
        /// </summary>
          [XmlEnum("electric potential")]
          electricpotential,
        /// <summary>
        /// electromagneticwavematrixtraveltime property
        /// </summary>
          [XmlEnum("electromagnetic wave matrix travel time")]
          electromagneticwavematrixtraveltime,
        /// <summary>
        /// electromagneticwavetraveltime property
        /// </summary>
          [XmlEnum("electromagnetic wave travel time")]
          electromagneticwavetraveltime,
        /// <summary>
        /// The elemental composition, generally in weight percent, of a formation as calculated from information obtained from a geochemical logging pass; e.g., weight percent of Al, Si, Ca, Fe, etc.
        /// </summary>
          element,
        /// <summary>
        /// elementalratio property
        /// </summary>
          [XmlEnum("elemental ratio")]
          elementalratio,
        /// <summary>
        /// A well log trace which has been filtered to improve its value; e.g. inverse filtering for better resolution.
        /// </summary>
          enhanced,
        /// <summary>
        /// A well log trace which has had a filter applied to it.
        /// </summary>
          filtered,
        /// <summary>
        /// A logging tool to measure the rate and/or direction of fluid flow in a wellbore.
        /// </summary>
          flowmeter,
        /// <summary>
        /// fluiddensity property
        /// </summary>
          [XmlEnum("fluid density")]
          fluiddensity,
        /// <summary>
        /// fluidvelocity property
        /// </summary>
          [XmlEnum("fluid velocity")]
          fluidvelocity,
        /// <summary>
        /// fluidviscosity property
        /// </summary>
          [XmlEnum("fluid viscosity")]
          fluidviscosity,
        /// <summary>
        /// flushedzoneconductivity property
        /// </summary>
          [XmlEnum("flushed zone conductivity")]
          flushedzoneconductivity,
        /// <summary>
        /// flushedzoneresistivity property
        /// </summary>
          [XmlEnum("flushed zone resistivity")]
          flushedzoneresistivity,
        /// <summary>
        /// flushedzonesaturation property
        /// </summary>
          [XmlEnum("flushed zone saturation")]
          flushedzonesaturation,
        /// <summary>
        /// Energy exerted or brought to bear.
        /// </summary>
          force,
        /// <summary>
        /// formationdensitycorrection property
        /// </summary>
          [XmlEnum("formation density correction")]
          formationdensitycorrection,
        /// <summary>
        /// formationpropertiescorrection property
        /// </summary>
          [XmlEnum("formation properties correction")]
          formationpropertiescorrection,
        /// <summary>
        /// formationsalinitycorrection property
        /// </summary>
          [XmlEnum("formation salinity correction")]
          formationsalinitycorrection,
        /// <summary>
        /// formationsaturationcorrection property
        /// </summary>
          [XmlEnum("formation saturation correction")]
          formationsaturationcorrection,
        /// <summary>
        /// formationvolumefactorcorrection property
        /// </summary>
          [XmlEnum("formation volume factor correction")]
          formationvolumefactorcorrection,
        /// <summary>
        /// formationwaterdensitycorrection property
        /// </summary>
          [XmlEnum("formation water density correction")]
          formationwaterdensitycorrection,
        /// <summary>
        /// formationwatersaturationcorrection property
        /// </summary>
          [XmlEnum("formation water saturation correction")]
          formationwatersaturationcorrection,
        /// <summary>
        /// freefluidindex property
        /// </summary>
          [XmlEnum("free fluid index")]
          freefluidindex,
        /// <summary>
        /// frictioneffectcorrection property
        /// </summary>
          [XmlEnum("friction effect correction")]
          frictioneffectcorrection,
        /// <summary>
        /// gammaray property
        /// </summary>
          [XmlEnum("gamma ray")]
          gammaray,
        /// <summary>
        /// gammarayminusuranium property
        /// </summary>
          [XmlEnum("gamma ray minus uranium")]
          gammarayminusuranium,
        /// <summary>
        /// gassaturation property
        /// </summary>
          [XmlEnum("gas saturation")]
          gassaturation,
        /// <summary>
        /// The measurement of the average density of fluids in a wellbore.
        /// </summary>
          gradiomanometer,
        /// <summary>
        /// highfrequencyconductivity property
        /// </summary>
          [XmlEnum("high frequency conductivity")]
          highfrequencyconductivity,
        /// <summary>
        /// highfrequencyelectromagnetic property
        /// </summary>
          [XmlEnum("high frequency electromagnetic")]
          highfrequencyelectromagnetic,
        /// <summary>
        /// highfrequencyelectromagneticporosity property
        /// </summary>
          [XmlEnum("high frequency electromagnetic porosity")]
          highfrequencyelectromagneticporosity,
        /// <summary>
        /// highfrequencyEMphaseshift property
        /// </summary>
          [XmlEnum("high frequency E-M phase shift")]
          highfrequencyEMphaseshift,
        /// <summary>
        /// highfrequencyresistivity property
        /// </summary>
          [XmlEnum("high frequency resistivity")]
          highfrequencyresistivity,
        /// <summary>
        /// hydrocarboncorrection property
        /// </summary>
          [XmlEnum("hydrocarbon correction")]
          hydrocarboncorrection,
        /// <summary>
        /// hydrocarbondensitycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon density correction")]
          hydrocarbondensitycorrection,
        /// <summary>
        /// hydrocarbongravitycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon gravity correction")]
          hydrocarbongravitycorrection,
        /// <summary>
        /// hydrocarbonsaturation property
        /// </summary>
          [XmlEnum("hydrocarbon saturation")]
          hydrocarbonsaturation,
        /// <summary>
        /// hydrocarbonviscositycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon viscosity correction")]
          hydrocarbonviscositycorrection,
        /// <summary>
        /// The likeness of an object produced by an electrical device.
        /// </summary>
          image,
        /// <summary>
        /// interpretationvariable property
        /// </summary>
          [XmlEnum("interpretation variable")]
          interpretationvariable,
        /// <summary>
        /// ironmudcorrection property
        /// </summary>
          [XmlEnum("iron mud correction")]
          ironmudcorrection,
        /// <summary>
        /// A well log trace which has had two or more runs spliced together to make a single trace.
        /// </summary>
          joined,
        /// <summary>
        /// KClmudcorrection property
        /// </summary>
          [XmlEnum("KCl mud correction")]
          KClmudcorrection,
        /// <summary>
        /// A measured distance or dimension.
        /// </summary>
          length,
        /// <summary>
        /// limestoneacousticporosity property
        /// </summary>
          [XmlEnum("limestone acoustic porosity")]
          limestoneacousticporosity,
        /// <summary>
        /// limestonedensityporosity property
        /// </summary>
          [XmlEnum("limestone density porosity")]
          limestonedensityporosity,
        /// <summary>
        /// limestoneneutronporosity property
        /// </summary>
          [XmlEnum("limestone neutron porosity")]
          limestoneneutronporosity,
        /// <summary>
        /// lithologycorrection property
        /// </summary>
          [XmlEnum("lithology correction")]
          lithologycorrection,
        /// <summary>
        /// logderivedpermeability property
        /// </summary>
          [XmlEnum("log derived permeability")]
          logderivedpermeability,
        /// <summary>
        /// logmatrixdensity property
        /// </summary>
          [XmlEnum("log matrix density")]
          logmatrixdensity,
        /// <summary>
        /// magneticcasingcollarlocator property
        /// </summary>
          [XmlEnum("magnetic casing collar locator")]
          magneticcasingcollarlocator,
        /// <summary>
        /// matrixdensity property
        /// </summary>
          [XmlEnum("matrix density")]
          matrixdensity,
        /// <summary>
        /// matrixtraveltime property
        /// </summary>
          [XmlEnum("matrix travel time")]
          matrixtraveltime,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// mechanicalcaliper property
        /// </summary>
          [XmlEnum("mechanical caliper")]
          mechanicalcaliper,
        /// <summary>
        /// mechanicalcasingcollarlocator property
        /// </summary>
          [XmlEnum("mechanical casing collar locator")]
          mechanicalcasingcollarlocator,
        /// <summary>
        /// mediumconductivity property
        /// </summary>
          [XmlEnum("medium conductivity")]
          mediumconductivity,
        /// <summary>
        /// mediuminductionconductivity property
        /// </summary>
          [XmlEnum("medium induction conductivity")]
          mediuminductionconductivity,
        /// <summary>
        /// mediuminductionresistivity property
        /// </summary>
          [XmlEnum("medium induction resistivity")]
          mediuminductionresistivity,
        /// <summary>
        /// mediumlaterologconductivity property
        /// </summary>
          [XmlEnum("medium laterolog conductivity")]
          mediumlaterologconductivity,
        /// <summary>
        /// mediumlaterologresistivity property
        /// </summary>
          [XmlEnum("medium laterolog resistivity")]
          mediumlaterologresistivity,
        /// <summary>
        /// mediumresistivity property
        /// </summary>
          [XmlEnum("medium resistivity")]
          mediumresistivity,
        /// <summary>
        /// microconductivity property
        /// </summary>
          [XmlEnum("micro conductivity")]
          microconductivity,
        /// <summary>
        /// microinverseconductivity property
        /// </summary>
          [XmlEnum("micro inverse conductivity")]
          microinverseconductivity,
        /// <summary>
        /// microinverseresistivity property
        /// </summary>
          [XmlEnum("micro inverse resistivity")]
          microinverseresistivity,
        /// <summary>
        /// microlaterologconductivity property
        /// </summary>
          [XmlEnum("micro laterolog conductivity")]
          microlaterologconductivity,
        /// <summary>
        /// microlaterologresistivity property
        /// </summary>
          [XmlEnum("micro laterolog resistivity")]
          microlaterologresistivity,
        /// <summary>
        /// micronormalconductivity property
        /// </summary>
          [XmlEnum("micro normal conductivity")]
          micronormalconductivity,
        /// <summary>
        /// micronormalresistivity property
        /// </summary>
          [XmlEnum("micro normal resistivity")]
          micronormalresistivity,
        /// <summary>
        /// microresistivity property
        /// </summary>
          [XmlEnum("micro resistivity")]
          microresistivity,
        /// <summary>
        /// microsphericallyfocusedconductivity property
        /// </summary>
          [XmlEnum("micro spherically focused conductivity")]
          microsphericallyfocusedconductivity,
        /// <summary>
        /// microsphericallyfocusedresistivity property
        /// </summary>
          [XmlEnum("micro spherically focused resistivity")]
          microsphericallyfocusedresistivity,
        /// <summary>
        /// The mineral composition, generally in weight percent, of a formation as calculated from elemental information obtained from a geochemical logging pass; e.g., weight percent of dolomite, calcite, illite, quartzite, etc.
        /// </summary>
          mineral,
        /// <summary>
        /// mudcakeconductivity property
        /// </summary>
          [XmlEnum("mud cake conductivity")]
          mudcakeconductivity,
        /// <summary>
        /// mudcakecorrection property
        /// </summary>
          [XmlEnum("mud cake correction")]
          mudcakecorrection,
        /// <summary>
        /// mudcakedensitycorrection property
        /// </summary>
          [XmlEnum("mud cake density correction")]
          mudcakedensitycorrection,
        /// <summary>
        /// mudcakeresistivity property
        /// </summary>
          [XmlEnum("mud cake resistivity")]
          mudcakeresistivity,
        /// <summary>
        /// mudcakeresistivitycorrection property
        /// </summary>
          [XmlEnum("mud cake resistivity correction")]
          mudcakeresistivitycorrection,
        /// <summary>
        /// mudcakethicknesscorrection property
        /// </summary>
          [XmlEnum("mud cake thickness correction")]
          mudcakethicknesscorrection,
        /// <summary>
        /// mudcompositioncorrection property
        /// </summary>
          [XmlEnum("mud composition correction")]
          mudcompositioncorrection,
        /// <summary>
        /// mudconductivity property
        /// </summary>
          [XmlEnum("mud conductivity")]
          mudconductivity,
        /// <summary>
        /// mudfiltrateconductivity property
        /// </summary>
          [XmlEnum("mud filtrate conductivity")]
          mudfiltrateconductivity,
        /// <summary>
        /// mudfiltratecorrection property
        /// </summary>
          [XmlEnum("mud filtrate correction")]
          mudfiltratecorrection,
        /// <summary>
        /// mudfiltratedensitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate density correction")]
          mudfiltratedensitycorrection,
        /// <summary>
        /// mudfiltrateresistivity property
        /// </summary>
          [XmlEnum("mud filtrate resistivity")]
          mudfiltrateresistivity,
        /// <summary>
        /// mudfiltrateresistivitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate resistivity correction")]
          mudfiltrateresistivitycorrection,
        /// <summary>
        /// mudfiltratesalinitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate salinity correction")]
          mudfiltratesalinitycorrection,
        /// <summary>
        /// mudresistivity property
        /// </summary>
          [XmlEnum("mud resistivity")]
          mudresistivity,
        /// <summary>
        /// mudsalinitycorrection property
        /// </summary>
          [XmlEnum("mud salinity correction")]
          mudsalinitycorrection,
        /// <summary>
        /// mudviscositycorrection property
        /// </summary>
          [XmlEnum("mud viscosity correction")]
          mudviscositycorrection,
        /// <summary>
        /// mudweightcorrection property
        /// </summary>
          [XmlEnum("mud weight correction")]
          mudweightcorrection,
        /// <summary>
        /// neutrondieawaytime property
        /// </summary>
          [XmlEnum("neutron die away time")]
          neutrondieawaytime,
        /// <summary>
        /// neutronporosity property
        /// </summary>
          [XmlEnum("neutron porosity")]
          neutronporosity,
        /// <summary>
        /// nuclearcaliper property
        /// </summary>
          [XmlEnum("nuclear caliper")]
          nuclearcaliper,
        /// <summary>
        /// nuclearmagneticdecaytime property
        /// </summary>
          [XmlEnum("nuclear magnetic decay time")]
          nuclearmagneticdecaytime,
        /// <summary>
        /// nuclearmagnetismlogpermeability property
        /// </summary>
          [XmlEnum("nuclear magnetism log permeability")]
          nuclearmagnetismlogpermeability,
        /// <summary>
        /// nuclearmagnetismporosity property
        /// </summary>
          [XmlEnum("nuclear magnetism porosity")]
          nuclearmagnetismporosity,
        /// <summary>
        /// OHdensityporosity property
        /// </summary>
          [XmlEnum("OH density porosity")]
          OHdensityporosity,
        /// <summary>
        /// OHdolomitedensityporosity property
        /// </summary>
          [XmlEnum("OH dolomite density porosity")]
          OHdolomitedensityporosity,
        /// <summary>
        /// OHdolomiteneutronporosity property
        /// </summary>
          [XmlEnum("OH dolomite neutron porosity")]
          OHdolomiteneutronporosity,
        /// <summary>
        /// OHlimestonedensityporosity property
        /// </summary>
          [XmlEnum("OH limestone density porosity")]
          OHlimestonedensityporosity,
        /// <summary>
        /// OHlimestoneneutronporosity property
        /// </summary>
          [XmlEnum("OH limestone neutron porosity")]
          OHlimestoneneutronporosity,
        /// <summary>
        /// OHneutronporosity property
        /// </summary>
          [XmlEnum("OH neutron porosity")]
          OHneutronporosity,
        /// <summary>
        /// OHsandstonedensityporosity property
        /// </summary>
          [XmlEnum("OH sandstone density porosity")]
          OHsandstonedensityporosity,
        /// <summary>
        /// OHsandstoneneutronporosity property
        /// </summary>
          [XmlEnum("OH sandstone neutron porosity")]
          OHsandstoneneutronporosity,
        /// <summary>
        /// oilbasedmudcorrection property
        /// </summary>
          [XmlEnum("oil based mud correction")]
          oilbasedmudcorrection,
        /// <summary>
        /// oilsaturation property
        /// </summary>
          [XmlEnum("oil saturation")]
          oilsaturation,
        /// <summary>
        /// The procedure for introducing holes through casing into a formation so that formation fluids can enter into the casing.
        /// </summary>
          perforating,
        /// <summary>
        /// The permeability of the surrounding formation.
        /// </summary>
          permeability,
        /// <summary>
        /// phaseshift property
        /// </summary>
          [XmlEnum("phase shift")]
          phaseshift,
        /// <summary>
        /// photoelectricabsorption property
        /// </summary>
          [XmlEnum("photoelectric absorption")]
          photoelectricabsorption,
        /// <summary>
        /// photoelectricabsorptioncorrection property
        /// </summary>
          [XmlEnum("photoelectric absorption correction")]
          photoelectricabsorptioncorrection,
        /// <summary>
        /// physicalmeasurementcorrection property
        /// </summary>
          [XmlEnum("physical measurement correction")]
          physicalmeasurementcorrection,
        /// <summary>
        /// planeangle property
        /// </summary>
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// The total pore volume occupied by fluid in a rock. Includes isolated nonconnecting pores and volume occupied by absorbed, immobile fluid.
        /// </summary>
          porosity,
        /// <summary>
        /// porositycorrection property
        /// </summary>
          [XmlEnum("porosity correction")]
          porositycorrection,
        /// <summary>
        /// The measurement of gamma radiation emitted by potassium.
        /// </summary>
          potassium,
        /// <summary>
        /// The force or thrust exerted upon a surface divided by the area of the surface.
        /// </summary>
          pressure,
        /// <summary>
        /// pressurecorrection property
        /// </summary>
          [XmlEnum("pressure correction")]
          pressurecorrection,
        /// <summary>
        /// A well log trace which has been processed in some way; e.g., depth adjusted or environmentally corrected.
        /// </summary>
          processed,
        /// <summary>
        /// pulsedneutronporosity property
        /// </summary>
          [XmlEnum("pulsed neutron porosity")]
          pulsedneutronporosity,
        /// <summary>
        /// Degree of excellence.
        /// </summary>
          quality,
        /// <summary>
        /// A relationship between two values usually expressed as a fraction.
        /// </summary>
          ratio,
        /// <summary>
        /// A well log trace which has not had any processing. In other words, a trace which has not been depth adjusted or environmentally corrected.
        /// </summary>
          raw,
        /// <summary>
        /// relativebearing property
        /// </summary>
          [XmlEnum("relative bearing")]
          relativebearing,
        /// <summary>
        /// The property measuring the resistance to flow of an electrical current.
        /// </summary>
          resistivity,
        /// <summary>
        /// resistivityfactorcorrection property
        /// </summary>
          [XmlEnum("resistivity factor correction")]
          resistivityfactorcorrection,
        /// <summary>
        /// resistivityfromattenuation property
        /// </summary>
          [XmlEnum("resistivity from attenuation")]
          resistivityfromattenuation,
        /// <summary>
        /// resistivityfromphaseshift property
        /// </summary>
          [XmlEnum("resistivity from phase shift")]
          resistivityfromphaseshift,
        /// <summary>
        /// resistivityphaseshift property
        /// </summary>
          [XmlEnum("resistivity phase shift")]
          resistivityphaseshift,
        /// <summary>
        /// resistivityratio property
        /// </summary>
          [XmlEnum("resistivity ratio")]
          resistivityratio,
        /// <summary>
        /// The concentration of ions in solution.
        /// </summary>
          salinity,
        /// <summary>
        /// To take a sample of or from something.
        /// </summary>
          sampling,
        /// <summary>
        /// sandstoneacousticporosity property
        /// </summary>
          [XmlEnum("sandstone acoustic porosity")]
          sandstoneacousticporosity,
        /// <summary>
        /// sandstonedensityporosity property
        /// </summary>
          [XmlEnum("sandstone density porosity")]
          sandstonedensityporosity,
        /// <summary>
        /// sandstoneneutronporosity property
        /// </summary>
          [XmlEnum("sandstone neutron porosity")]
          sandstoneneutronporosity,
        /// <summary>
        /// The fraction or percentage of the pore volume of a rock.
        /// </summary>
          saturation,
        /// <summary>
        /// shalevolume property
        /// </summary>
          [XmlEnum("shale volume")]
          shalevolume,
        /// <summary>
        /// shallowconductivity property
        /// </summary>
          [XmlEnum("shallow conductivity")]
          shallowconductivity,
        /// <summary>
        /// shallowinductionconductivity property
        /// </summary>
          [XmlEnum("shallow induction conductivity")]
          shallowinductionconductivity,
        /// <summary>
        /// shallowinductionresistivity property
        /// </summary>
          [XmlEnum("shallow induction resistivity")]
          shallowinductionresistivity,
        /// <summary>
        /// shallowlaterologconductivity property
        /// </summary>
          [XmlEnum("shallow laterolog conductivity")]
          shallowlaterologconductivity,
        /// <summary>
        /// shallowlaterologresistivity property
        /// </summary>
          [XmlEnum("shallow laterolog resistivity")]
          shallowlaterologresistivity,
        /// <summary>
        /// shallowresistivity property
        /// </summary>
          [XmlEnum("shallow resistivity")]
          shallowresistivity,
        /// <summary>
        /// shearwavedolomiteporosity property
        /// </summary>
          [XmlEnum("shear wave dolomite porosity")]
          shearwavedolomiteporosity,
        /// <summary>
        /// shearwavelimestoneporosity property
        /// </summary>
          [XmlEnum("shear wave limestone porosity")]
          shearwavelimestoneporosity,
        /// <summary>
        /// shearwavematrixtraveltime property
        /// </summary>
          [XmlEnum("shear wave matrix travel time")]
          shearwavematrixtraveltime,
        /// <summary>
        /// shearwavesandstoneporosity property
        /// </summary>
          [XmlEnum("shear wave sandstone porosity")]
          shearwavesandstoneporosity,
        /// <summary>
        /// shearwavetraveltime property
        /// </summary>
          [XmlEnum("shear wave travel time")]
          shearwavetraveltime,
        /// <summary>
        /// A well log trace which has had its original values shifted by some factor; e.g., added or multiplied by a constant.
        /// </summary>
          shifted,
        /// <summary>
        /// sidewallcoreporosity property
        /// </summary>
          [XmlEnum("sidewall core porosity")]
          sidewallcoreporosity,
        /// <summary>
        /// The macroscopic capture cross section, i.e. the effective cross-sectional area per unit volume for the capture of neutrons.
        /// </summary>
          sigma,
        /// <summary>
        /// sigmaformation property
        /// </summary>
          [XmlEnum("sigma formation")]
          sigmaformation,
        /// <summary>
        /// sigmagas property
        /// </summary>
          [XmlEnum("sigma gas")]
          sigmagas,
        /// <summary>
        /// sigmahydrocarbon property
        /// </summary>
          [XmlEnum("sigma hydrocarbon")]
          sigmahydrocarbon,
        /// <summary>
        /// sigmamatrix property
        /// </summary>
          [XmlEnum("sigma matrix")]
          sigmamatrix,
        /// <summary>
        /// sigmaoil property
        /// </summary>
          [XmlEnum("sigma oil")]
          sigmaoil,
        /// <summary>
        /// sigmawater property
        /// </summary>
          [XmlEnum("sigma water")]
          sigmawater,
        /// <summary>
        /// slippagevelocitycorrection property
        /// </summary>
          [XmlEnum("slippage velocity correction")]
          slippagevelocitycorrection,
        /// <summary>
        /// A well log trace which has been filtered to smooth, or average the trace.
        /// </summary>
          smoothed,
        /// <summary>
        /// spectralgammaray property
        /// </summary>
          [XmlEnum("spectral gamma ray")]
          spectralgammaray,
        /// <summary>
        /// sphericallyfocusedconductivity property
        /// </summary>
          [XmlEnum("spherically focused conductivity")]
          sphericallyfocusedconductivity,
        /// <summary>
        /// sphericallyfocusedresistivity property
        /// </summary>
          [XmlEnum("spherically focused resistivity")]
          sphericallyfocusedresistivity,
        /// <summary>
        /// spontaneouspotential property
        /// </summary>
          [XmlEnum("spontaneous potential")]
          spontaneouspotential,
        /// <summary>
        /// spreadinglosscorrection property
        /// </summary>
          [XmlEnum("spreading loss correction")]
          spreadinglosscorrection,
        /// <summary>
        /// syntheticwelllogtrace property
        /// </summary>
          [XmlEnum("synthetic well log trace")]
          syntheticwelllogtrace,
        /// <summary>
        /// A temperature measurement.
        /// </summary>
          temperature,
        /// <summary>
        /// temperaturecorrection property
        /// </summary>
          [XmlEnum("temperature correction")]
          temperaturecorrection,
        /// <summary>
        /// The tension on the wireline cable while logging.
        /// </summary>
          tension,
        /// <summary>
        /// ThKratio property
        /// </summary>
          [XmlEnum("Th/K ratio")]
          ThKratio,
        /// <summary>
        /// The measurement of gamma radiation emitted by thorium.
        /// </summary>
          thorium,
        /// <summary>
        /// A measured or measurable period.
        /// </summary>
          time,
        /// <summary>
        /// tooldiametercorrection property
        /// </summary>
          [XmlEnum("tool diameter correction")]
          tooldiametercorrection,
        /// <summary>
        /// tooleccentricitycorrection property
        /// </summary>
          [XmlEnum("tool eccentricity correction")]
          tooleccentricitycorrection,
        /// <summary>
        /// totalgammaray property
        /// </summary>
          [XmlEnum("total gamma ray")]
          totalgammaray,
        /// <summary>
        /// totalporosity property
        /// </summary>
          [XmlEnum("total porosity")]
          totalporosity,
        /// <summary>
        /// tracersurvey property
        /// </summary>
          [XmlEnum("tracer survey")]
          tracersurvey,
        /// <summary>
        /// traveltime property
        /// </summary>
          [XmlEnum("travel time")]
          traveltime,
        /// <summary>
        /// trueconductivity property
        /// </summary>
          [XmlEnum("true conductivity")]
          trueconductivity,
        /// <summary>
        /// trueresistivity property
        /// </summary>
          [XmlEnum("true resistivity")]
          trueresistivity,
        /// <summary>
        /// trueverticaldepth property
        /// </summary>
          [XmlEnum("true vertical depth")]
          trueverticaldepth,
        /// <summary>
        /// tubewavedolomiteporosity property
        /// </summary>
          [XmlEnum("tube wave dolomite porosity")]
          tubewavedolomiteporosity,
        /// <summary>
        /// tubewavelimestoneporosity property
        /// </summary>
          [XmlEnum("tube wave limestone porosity")]
          tubewavelimestoneporosity,
        /// <summary>
        /// tubewavematrixtraveltime property
        /// </summary>
          [XmlEnum("tube wave matrix travel time")]
          tubewavematrixtraveltime,
        /// <summary>
        /// tubewavesandstoneporosity property
        /// </summary>
          [XmlEnum("tube wave sandstone porosity")]
          tubewavesandstoneporosity,
        /// <summary>
        /// tubewavetraveltime property
        /// </summary>
          [XmlEnum("tube wave travel time")]
          tubewavetraveltime,
        /// <summary>
        /// The measurement of gamma radiation emitted by uranium.
        /// </summary>
          uranium,
        /// <summary>
        /// directional speed
        /// </summary>
          velocity,
        /// <summary>
        /// cubic capacity
        /// </summary>
          volume,
        /// <summary>
        /// waterbasedfluidcorrection property
        /// </summary>
          [XmlEnum("water based fluid correction")]
          waterbasedfluidcorrection,
        /// <summary>
        /// waterholdupcorrection property
        /// </summary>
          [XmlEnum("water holdup correction")]
          waterholdupcorrection,
        /// <summary>
        /// watersaturatedconductivity property
        /// </summary>
          [XmlEnum("water saturated conductivity")]
          watersaturatedconductivity,
        /// <summary>
        /// watersaturatedresistivity property
        /// </summary>
          [XmlEnum("water saturated resistivity")]
          watersaturatedresistivity,
        /// <summary>
        /// watersaturation property
        /// </summary>
          [XmlEnum("water saturation")]
          watersaturation,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MessageProbability xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MessageProbability xsd enumeration.")]
        public enum MessageProbability 
        {
        /// <summary>
        /// 
        /// </summary>
          low,
        /// <summary>
        /// 
        /// </summary>
          medium,
        /// <summary>
        /// 
        /// </summary>
          high,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MessageSeverity xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MessageSeverity xsd enumeration.")]
        public enum MessageSeverity 
        {
        /// <summary>
        /// 
        /// </summary>
          catastrophic,
        /// <summary>
        /// 
        /// </summary>
          major,
        /// <summary>
        /// 
        /// </summary>
          minor,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MessageType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MessageType xsd enumeration.")]
        public enum MessageType 
        {
        /// <summary>
        /// An alarm condition when something has exceeded specified limits
        /// </summary>
          alarm,
        /// <summary>
        /// Information about a specific event
        /// </summary>
          @event,
        /// <summary>
        /// General information message
        /// </summary>
          informational,
        /// <summary>
        /// A cautionary message
        /// </summary>
          warning,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MudClass xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MudClass xsd enumeration.")]
        public enum MudClass 
        {
        /// <summary>
        /// waterbased property
        /// </summary>
          [XmlEnum("water based")]
          waterbased,
        /// <summary>
        /// oilbased property
        /// </summary>
          [XmlEnum("oil based")]
          oilbased,
        /// <summary>
        /// A drilling fluid in which neither water nor oil is the continous phase.
        /// </summary>
          other,
        /// <summary>
        /// A drilling fluid which is gas-based.
        /// </summary>
          pneumatic,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MudLogParameterType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MudLogParameterType xsd enumeration.")]
        public enum MudLogParameterType 
        {
        /// <summary>
        /// bitparameters property
        /// </summary>
          [XmlEnum("bit parameters")]
          bitparameters,
        /// <summary>
        /// bittypecomment property
        /// </summary>
          [XmlEnum("bit type comment")]
          bittypecomment,
        /// <summary>
        /// casingpointcomment property
        /// </summary>
          [XmlEnum("casing point comment")]
          casingpointcomment,
        /// <summary>
        /// chromatographcomment property
        /// </summary>
          [XmlEnum("chromatograph comment")]
          chromatographcomment,
        /// <summary>
        /// circulationsystemcomment property
        /// </summary>
          [XmlEnum("circulation system comment")]
          circulationsystemcomment,
        /// <summary>
        /// coreintervalcomment property
        /// </summary>
          [XmlEnum("core interval comment")]
          coreintervalcomment,
        /// <summary>
        /// cuttingsgas property
        /// </summary>
          [XmlEnum("cuttings gas")]
          cuttingsgas,
        /// <summary>
        /// directfracturepressure property
        /// </summary>
          [XmlEnum("direct fracture pressure")]
          directfracturepressure,
        /// <summary>
        /// directporepressuremeasurements property
        /// </summary>
          [XmlEnum("direct pore pressure measurements")]
          directporepressuremeasurements,
        /// <summary>
        /// drillingdatacomment property
        /// </summary>
          [XmlEnum("drilling data comment")]
          drillingdatacomment,
        /// <summary>
        /// fracturePGestimatemostlikely property
        /// </summary>
          [XmlEnum("fracture PG estimate most likely")]
          fracturePGestimatemostlikely,
        /// <summary>
        /// gaspeakscomment property
        /// </summary>
          [XmlEnum("gas peaks comment")]
          gaspeakscomment,
        /// <summary>
        /// gasratiocomment property
        /// </summary>
          [XmlEnum("gas ratio comment")]
          gasratiocomment,
        /// <summary>
        /// generalengineeringcomment property
        /// </summary>
          [XmlEnum("general engineering comment")]
          generalengineeringcomment,
        /// <summary>
        /// kicksandflows property
        /// </summary>
          [XmlEnum("kicks and flows")]
          kicksandflows,
        /// <summary>
        /// lithlogcomment property
        /// </summary>
          [XmlEnum("lithlog comment")]
          lithlogcomment,
        /// <summary>
        /// lostreturns property
        /// </summary>
          [XmlEnum("lost returns")]
          lostreturns,
        /// <summary>
        /// LWDcomment property
        /// </summary>
          [XmlEnum("LWD comment")]
          LWDcomment,
        /// <summary>
        /// markerorformationtopcomment property
        /// </summary>
          [XmlEnum("marker or formation top comment")]
          markerorformationtopcomment,
        /// <summary>
        /// midnightdepthdate property
        /// </summary>
          [XmlEnum("midnight depth date")]
          midnightdepthdate,
        /// <summary>
        /// mudcheckcomment property
        /// </summary>
          [XmlEnum("mud check comment")]
          mudcheckcomment,
        /// <summary>
        /// muddatacomment property
        /// </summary>
          [XmlEnum("mud data comment")]
          muddatacomment,
        /// <summary>
        /// mudlogcomment property
        /// </summary>
          [XmlEnum("mudlog comment")]
          mudlogcomment,
        /// <summary>
        /// overburdengradient property
        /// </summary>
          [XmlEnum("overburden gradient")]
          overburdengradient,
        /// <summary>
        /// overpullonconnection property
        /// </summary>
          [XmlEnum("overpull on connection")]
          overpullonconnection,
        /// <summary>
        /// overpullontrip property
        /// </summary>
          [XmlEnum("overpull on trip")]
          overpullontrip,
        /// <summary>
        /// porePGestimatemostlikely property
        /// </summary>
          [XmlEnum("pore PG estimate most likely")]
          porePGestimatemostlikely,
        /// <summary>
        /// porepressureestimatewhiledrilling property
        /// </summary>
          [XmlEnum("pore pressure estimate while drilling")]
          porepressureestimatewhiledrilling,
        /// <summary>
        /// pressuredatacomment property
        /// </summary>
          [XmlEnum("pressure data comment")]
          pressuredatacomment,
        /// <summary>
        /// shaledensitycomment property
        /// </summary>
          [XmlEnum("shale density comment")]
          shaledensitycomment,
        /// <summary>
        /// shorttripcomment property
        /// </summary>
          [XmlEnum("short trip comment")]
          shorttripcomment,
        /// <summary>
        /// showreportcomment property
        /// </summary>
          [XmlEnum("show report comment")]
          showreportcomment,
        /// <summary>
        /// sidewallcorecomment property
        /// </summary>
          [XmlEnum("sidewall core comment")]
          sidewallcorecomment,
        /// <summary>
        /// slidingInterval property
        /// </summary>
          [XmlEnum("sliding Interval")]
          slidingInterval,
        /// <summary>
        /// steamstillresultscomment property
        /// </summary>
          [XmlEnum("steam still results comment")]
          steamstillresultscomment,
        /// <summary>
        /// surveycomment property
        /// </summary>
          [XmlEnum("survey comment")]
          surveycomment,
        /// <summary>
        /// temperaturedatacomment property
        /// </summary>
          [XmlEnum("temperature data comment")]
          temperaturedatacomment,
        /// <summary>
        /// temperaturetrendcomment property
        /// </summary>
          [XmlEnum("temperature trend comment")]
          temperaturetrendcomment,
        /// <summary>
        /// wirelinelogcomment property
        /// </summary>
          [XmlEnum("wireline log comment")]
          wirelinelogcomment,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NADTypes xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the NADTypes xsd enumeration.")]
        public enum NADTypeList 
        {
        /// <summary>
        /// 
        /// </summary>
          NAD27,
        /// <summary>
        /// 
        /// </summary>
          NAD83,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NozzleType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the NozzleType xsd enumeration.")]
        public enum NozzleType 
        {
        /// <summary>
        /// 
        /// </summary>
          extended,
        /// <summary>
        /// 
        /// </summary>
          normal,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the OpsReportVersion xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the OpsReportVersion xsd enumeration.")]
        public enum OpsReportVersion 
        {
        /// <summary>
        /// A preliminary report that has not yet been approved by the drilling operator. This report is normally issued at the beginning of the work day (e.g., 6:00 am) before 
        /// </summary>
          preliminary,
        /// <summary>
        /// A normal daily staus report that has been approved by the drilling operator.
        /// </summary>
          normal,
        /// <summary>
        /// A report that represents the final definitive status for the well. This report is normally issued some period of time (e.g., 6 months) after the completion of drilling.
        /// </summary>
          final,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PIDXCommodityCode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PIDXCommodityCode xsd enumeration.")]
        public enum PIDXCommodityCode 
        {
        /// <summary>
        /// Item71131001 property
        /// </summary>
          [XmlEnum("71131001")]
          Item71131001,
        /// <summary>
        /// Item71131002 property
        /// </summary>
          [XmlEnum("71131002")]
          Item71131002,
        /// <summary>
        /// Item71131003 property
        /// </summary>
          [XmlEnum("71131003")]
          Item71131003,
        /// <summary>
        /// Item71131004 property
        /// </summary>
          [XmlEnum("71131004")]
          Item71131004,
        /// <summary>
        /// Item71131005 property
        /// </summary>
          [XmlEnum("71131005")]
          Item71131005,
        /// <summary>
        /// Item71131006 property
        /// </summary>
          [XmlEnum("71131006")]
          Item71131006,
        /// <summary>
        /// Item71131007 property
        /// </summary>
          [XmlEnum("71131007")]
          Item71131007,
        /// <summary>
        /// Item71131008 property
        /// </summary>
          [XmlEnum("71131008")]
          Item71131008,
        /// <summary>
        /// Item71131009 property
        /// </summary>
          [XmlEnum("71131009")]
          Item71131009,
        /// <summary>
        /// Item71131010 property
        /// </summary>
          [XmlEnum("71131010")]
          Item71131010,
        /// <summary>
        /// Item71131011 property
        /// </summary>
          [XmlEnum("71131011")]
          Item71131011,
        /// <summary>
        /// Item71131012 property
        /// </summary>
          [XmlEnum("71131012")]
          Item71131012,
        /// <summary>
        /// Item71131013 property
        /// </summary>
          [XmlEnum("71131013")]
          Item71131013,
        /// <summary>
        /// Item71131014 property
        /// </summary>
          [XmlEnum("71131014")]
          Item71131014,
        /// <summary>
        /// Item71131015 property
        /// </summary>
          [XmlEnum("71131015")]
          Item71131015,
        /// <summary>
        /// Item71131016 property
        /// </summary>
          [XmlEnum("71131016")]
          Item71131016,
        /// <summary>
        /// Item71131018 property
        /// </summary>
          [XmlEnum("71131018")]
          Item71131018,
        /// <summary>
        /// Item71131019 property
        /// </summary>
          [XmlEnum("71131019")]
          Item71131019
        }
        /// <summary>
        /// This class represents the PitType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PitType xsd enumeration.")]
        public enum PitType 
        {
        /// <summary>
        /// 
        /// </summary>
          bulk,
        /// <summary>
        /// 
        /// </summary>
          chemical,
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// 
        /// </summary>
          mix,
        /// <summary>
        /// mudcleaning property
        /// </summary>
          [XmlEnum("mud cleaning")]
          mudcleaning,
        /// <summary>
        /// sandtrap property
        /// </summary>
          [XmlEnum("sand trap")]
          sandtrap,
        /// <summary>
        /// That pit in the active pit system located immediately downstream of the shale shakers, whose primary purpose is to allow the settling and disposal of the larger drilled cuttings not removed by the shale shakers. It is occasionally also called a settling tank.
        /// </summary>
          slug,
        /// <summary>
        /// 
        /// </summary>
          storage,
        /// <summary>
        /// surgetank property
        /// </summary>
          [XmlEnum("surge tank")]
          surgetank,
        /// <summary>
        /// triptank property
        /// </summary>
          [XmlEnum("trip tank")]
          triptank,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Projection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the Projection xsd enumeration.")]
        public enum Projection 
        {
        /// <summary>
        /// Albersequalarea property
        /// </summary>
          [XmlEnum("Albers equal area")]
          Albersequalarea,
        /// <summary>
        /// azimuthalequidistant property
        /// </summary>
          [XmlEnum("azimuthal equidistant")]
          azimuthalequidistant,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-CASSINI
        /// </summary>
          Cassini,
        /// <summary>
        /// equidistantconic property
        /// </summary>
          [XmlEnum("equidistant conic")]
          equidistantconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-EQUIRECTANGULAR
        /// </summary>
          equirectangular,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-GNOMONIC
        /// </summary>
          gnomonic,
        /// <summary>
        /// Lambertazimuthal property
        /// </summary>
          [XmlEnum("Lambert azimuthal")]
          Lambertazimuthal,
        /// <summary>
        /// Lambertconformalconic property
        /// </summary>
          [XmlEnum("Lambert conformal conic")]
          Lambertconformalconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-MERCATOR
        /// </summary>
          Mercator,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-MILLER
        /// </summary>
          Miller,
        /// <summary>
        /// obliqueMercator property
        /// </summary>
          [XmlEnum("oblique Mercator")]
          obliqueMercator,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-ORTHO
        /// </summary>
          orthographic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-PERSPECTIVE
        /// </summary>
          perspective,
        /// <summary>
        /// polarstereographic property
        /// </summary>
          [XmlEnum("polar stereographic")]
          polarstereographic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-POLYCONIC
        /// </summary>
          polyconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-SINUSOIDAL
        /// </summary>
          sinusoidal,
        /// <summary>
        /// stateplane property
        /// </summary>
          [XmlEnum("state plane")]
          stateplane,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-STEREO
        /// </summary>
          stereographic,
        /// <summary>
        /// transverseMercator property
        /// </summary>
          [XmlEnum("transverse Mercator")]
          transverseMercator,
        /// <summary>
        /// universaltransverseMercator property
        /// </summary>
          [XmlEnum("universal transverse Mercator")]
          universaltransverseMercator,
        /// <summary>
        /// userdefined property
        /// </summary>
          [XmlEnum("user defined")]
          userdefined,
        /// <summary>
        /// VanderGrinten property
        /// </summary>
          [XmlEnum("Van der Grinten")]
          VanderGrinten,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ProjectionVariantsObliqueMercator xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ProjectionVariantsObliqueMercator xsd enumeration.")]
        public enum ProjectionVariantsObliqueMercator 
        {
        /// <summary>
        /// 
        /// </summary>
          @default,
        /// <summary>
        /// 
        /// </summary>
          rectified,
        /// <summary>
        /// rectifiedskew property
        /// </summary>
          [XmlEnum("rectified skew")]
          rectifiedskew,
        /// <summary>
        /// rectifiedskewcenterorigin property
        /// </summary>
          [XmlEnum("rectified skew center origin")]
          rectifiedskewcenterorigin,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PresTestType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PresTestType xsd enumeration.")]
        public enum PresTestType 
        {
        /// <summary>
        /// leakofftest property
        /// </summary>
          [XmlEnum("leak off test")]
          leakofftest,
        /// <summary>
        /// formationintegritytest property
        /// </summary>
          [XmlEnum("formation integrity test")]
          formationintegritytest,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PrincipalMeridian xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PrincipalMeridian xsd enumeration.")]
        public enum PrincipalMeridian 
        {
        /// <summary>
        /// Item1stPrincipalMeridian property
        /// </summary>
          [XmlEnum("1st Principal Meridian")]
          Item1stPrincipalMeridian,
        /// <summary>
        /// Item2ndPrincipalMeridian property
        /// </summary>
          [XmlEnum("2nd Principal Meridian")]
          Item2ndPrincipalMeridian,
        /// <summary>
        /// Item3rdPrincipalMeridian property
        /// </summary>
          [XmlEnum("3rd Principal Meridian")]
          Item3rdPrincipalMeridian,
        /// <summary>
        /// Item4thPrincipalMeridian property
        /// </summary>
          [XmlEnum("4th Principal Meridian")]
          Item4thPrincipalMeridian,
        /// <summary>
        /// Item5thPrincipalMeridian property
        /// </summary>
          [XmlEnum("5th Principal Meridian")]
          Item5thPrincipalMeridian,
        /// <summary>
        /// Item6thPrincipalMeridian property
        /// </summary>
          [XmlEnum("6th Principal Meridian")]
          Item6thPrincipalMeridian,
        /// <summary>
        /// BlackHillsMeridian property
        /// </summary>
          [XmlEnum("Black Hills Meridian")]
          BlackHillsMeridian,
        /// <summary>
        /// BoiseMeridian property
        /// </summary>
          [XmlEnum("Boise Meridian")]
          BoiseMeridian,
        /// <summary>
        /// ChoctawMeridian property
        /// </summary>
          [XmlEnum("Choctaw Meridian")]
          ChoctawMeridian,
        /// <summary>
        /// ChickasawMeridian property
        /// </summary>
          [XmlEnum("Chickasaw Meridian")]
          ChickasawMeridian,
        /// <summary>
        /// CimarronMeridian property
        /// </summary>
          [XmlEnum("Cimarron Meridian")]
          CimarronMeridian,
        /// <summary>
        /// CopperRiverMeridian property
        /// </summary>
          [XmlEnum("Copper River Meridian")]
          CopperRiverMeridian,
        /// <summary>
        /// FairbanksMeridian property
        /// </summary>
          [XmlEnum("Fairbanks Meridian")]
          FairbanksMeridian,
        /// <summary>
        /// GilaandSaltRiverMeridian property
        /// </summary>
          [XmlEnum("Gila and Salt River Meridian")]
          GilaandSaltRiverMeridian,
        /// <summary>
        /// HumboldtMeridian property
        /// </summary>
          [XmlEnum("Humboldt Meridian")]
          HumboldtMeridian,
        /// <summary>
        /// HuntsvilleMeridian property
        /// </summary>
          [XmlEnum("Huntsville Meridian")]
          HuntsvilleMeridian,
        /// <summary>
        /// IndianMeridian property
        /// </summary>
          [XmlEnum("Indian Meridian")]
          IndianMeridian,
        /// <summary>
        /// KateelRiverMeridian property
        /// </summary>
          [XmlEnum("Kateel River Meridian")]
          KateelRiverMeridian,
        /// <summary>
        /// LousianaMeridian property
        /// </summary>
          [XmlEnum("Lousiana Meridian")]
          LousianaMeridian,
        /// <summary>
        /// MichiganMeridian property
        /// </summary>
          [XmlEnum("Michigan Meridian")]
          MichiganMeridian,
        /// <summary>
        /// MountDiabloMeridian property
        /// </summary>
          [XmlEnum("Mount Diablo Meridian")]
          MountDiabloMeridian,
        /// <summary>
        /// NewMexicoMeridian property
        /// </summary>
          [XmlEnum("New Mexico Meridian")]
          NewMexicoMeridian,
        /// <summary>
        /// SaintStephensMeridian property
        /// </summary>
          [XmlEnum("Saint Stephens Meridian")]
          SaintStephensMeridian,
        /// <summary>
        /// SaintHelenaMeridian property
        /// </summary>
          [XmlEnum("Saint Helena Meridian")]
          SaintHelenaMeridian,
        /// <summary>
        /// SaltLakeMeridian property
        /// </summary>
          [XmlEnum("Salt Lake Meridian")]
          SaltLakeMeridian,
        /// <summary>
        /// SanBernardoMeridian property
        /// </summary>
          [XmlEnum("San Bernardo Meridian")]
          SanBernardoMeridian,
        /// <summary>
        /// SewardMeridian property
        /// </summary>
          [XmlEnum("Seward Meridian")]
          SewardMeridian,
        /// <summary>
        /// TallahasseeMeridian property
        /// </summary>
          [XmlEnum("Tallahassee Meridian")]
          TallahasseeMeridian,
        /// <summary>
        /// UintahMeridian property
        /// </summary>
          [XmlEnum("Uintah Meridian")]
          UintahMeridian,
        /// <summary>
        /// UmiatMeridian property
        /// </summary>
          [XmlEnum("Umiat Meridian")]
          UmiatMeridian,
        /// <summary>
        /// UteMeridian property
        /// </summary>
          [XmlEnum("Ute Meridian")]
          UteMeridian,
        /// <summary>
        /// WashingtonMeridian property
        /// </summary>
          [XmlEnum("Washington Meridian")]
          WashingtonMeridian,
        /// <summary>
        /// WilliametteMeridian property
        /// </summary>
          [XmlEnum("Williamette Meridian")]
          WilliametteMeridian,
        /// <summary>
        /// WindRiverMeridian property
        /// </summary>
          [XmlEnum("Wind River Meridian")]
          WindRiverMeridian,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PumpType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PumpType xsd enumeration.")]
        public enum PumpType 
        {
        /// <summary>
        /// Centrifugal mud pump
        /// </summary>
          centrifugal,
        /// <summary>
        /// Duplex mud mump, 2 cylinders
        /// </summary>
          duplex,
        /// <summary>
        /// Triplex mud pump, three cylinders
        /// </summary>
          triplex,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PumpOpType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PumpOpType xsd enumeration.")]
        public enum PumpOpType 
        {
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// 
        /// </summary>
          reaming,
        /// <summary>
        /// 
        /// </summary>
          circulating,
        /// <summary>
        /// slowpump property
        /// </summary>
          [XmlEnum("slow pump")]
          slowpump,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ReadingKind xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ReadingKind xsd enumeration.")]
        public enum ReadingKind 
        {
        /// <summary>
        /// The reading was measured.
        /// </summary>
          measured,
        /// <summary>
        /// The reading was estimated.
        /// </summary>
          estimated,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RigType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RigType xsd enumeration.")]
        public enum RigType 
        {
        /// <summary>
        /// Barge rig
        /// </summary>
          barge,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// Floating rig
        /// </summary>
          floater,
        /// <summary>
        /// Jackup rig
        /// </summary>
          jackup,
        /// <summary>
        /// Land rig
        /// </summary>
          land,
        /// <summary>
        /// Fixed platform
        /// </summary>
          platform,
        /// <summary>
        /// semisubmersible property
        /// </summary>
          [XmlEnum("semi-submersible")]
          semisubmersible,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RiskAffectedPersonnel xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskAffectedPersonnel xsd enumeration.")]
        public enum RiskAffectedPersonnel 
        {
        /// <summary>
        /// 
        /// </summary>
          cementer,
        /// <summary>
        /// companyman property
        /// </summary>
          [XmlEnum("company man")]
          companyman,
        /// <summary>
        /// 
        /// </summary>
          contractor,
        /// <summary>
        /// directionaldriller property
        /// </summary>
          [XmlEnum("directional driller")]
          directionaldriller,
        /// <summary>
        /// 
        /// </summary>
          driller,
        /// <summary>
        /// drillingengineer property
        /// </summary>
          [XmlEnum("drilling engineer")]
          drillingengineer,
        /// <summary>
        /// drillingsuperintendent property
        /// </summary>
          [XmlEnum("drilling superintendent")]
          drillingsuperintendent,
        /// <summary>
        /// drillingteam property
        /// </summary>
          [XmlEnum("drilling team")]
          drillingteam,
        /// <summary>
        /// facilityengineer property
        /// </summary>
          [XmlEnum("facility engineer")]
          facilityengineer,
        /// <summary>
        /// fieldservicemanager property
        /// </summary>
          [XmlEnum("field service manager")]
          fieldservicemanager,
        /// <summary>
        /// 
        /// </summary>
          foreman,
        /// <summary>
        /// generalservicesupervisor property
        /// </summary>
          [XmlEnum("general service supervisor")]
          generalservicesupervisor,
        /// <summary>
        /// 
        /// </summary>
          geologist,
        /// <summary>
        /// 
        /// </summary>
          member,
        /// <summary>
        /// mudengineer property
        /// </summary>
          [XmlEnum("mud engineer")]
          mudengineer,
        /// <summary>
        /// mudlogger property
        /// </summary>
          [XmlEnum("mud logger")]
          mudlogger,
        /// <summary>
        /// MWDorLWDengineer property
        /// </summary>
          [XmlEnum("MWD or LWD engineer")]
          MWDorLWDengineer,
        /// <summary>
        /// performengineer property
        /// </summary>
          [XmlEnum("perform engineer")]
          performengineer,
        /// <summary>
        /// 
        /// </summary>
          petrophysicist,
        /// <summary>
        /// productionengineer property
        /// </summary>
          [XmlEnum("production engineer")]
          productionengineer,
        /// <summary>
        /// remotelyoperatedvehicleengineer property
        /// </summary>
          [XmlEnum("remotely operated vehicle engineer")]
          remotelyoperatedvehicleengineer,
        /// <summary>
        /// safetymanger property
        /// </summary>
          [XmlEnum("safety manger")]
          safetymanger,
        /// <summary>
        /// salesengineer property
        /// </summary>
          [XmlEnum("sales engineer")]
          salesengineer,
        /// <summary>
        /// servicesupervisor property
        /// </summary>
          [XmlEnum("service supervisor")]
          servicesupervisor,
        /// <summary>
        /// technicalsupport property
        /// </summary>
          [XmlEnum("technical support")]
          technicalsupport,
        /// <summary>
        /// toolpusher property
        /// </summary>
          [XmlEnum("tool pusher")]
          toolpusher,
        /// <summary>
        /// wirelineengineer property
        /// </summary>
          [XmlEnum("wireline engineer")]
          wirelineengineer
        }
        /// <summary>
        /// This class represents the RiskCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskCategory xsd enumeration.")]
        public enum RiskCategory 
        {
        /// <summary>
        /// 
        /// </summary>
          hydraulics,
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// timerelated property
        /// </summary>
          [XmlEnum("time related")]
          timerelated,
        /// <summary>
        /// wellborestability property
        /// </summary>
          [XmlEnum("wellbore stability")]
          wellborestability,
        /// <summary>
        /// directionaldrilling property
        /// </summary>
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// 
        /// </summary>
          bit,
        /// <summary>
        /// equipmentfailure property
        /// </summary>
          [XmlEnum("equipment failure")]
          equipmentfailure,
        /// <summary>
        /// 
        /// </summary>
          completion,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RiskSubCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskSubCategory xsd enumeration.")]
        public enum RiskSubCategory 
        {
        /// <summary>
        /// gaskick property
        /// </summary>
          [XmlEnum("gas kick")]
          gaskick,
        /// <summary>
        /// shallowwaterinflux property
        /// </summary>
          [XmlEnum("shallow water influx")]
          shallowwaterinflux,
        /// <summary>
        /// otherinfluxorkicks property
        /// </summary>
          [XmlEnum("other influx or kicks")]
          otherinfluxorkicks,
        /// <summary>
        /// losscirculation property
        /// </summary>
          [XmlEnum("loss circulation")]
          losscirculation,
        /// <summary>
        /// poorholecleaning property
        /// </summary>
          [XmlEnum("poor hole cleaning")]
          poorholecleaning,
        /// <summary>
        /// goodholecleaningathighROP property
        /// </summary>
          [XmlEnum("good hole cleaning at high ROP")]
          goodholecleaningathighROP,
        /// <summary>
        /// highmudweight property
        /// </summary>
          [XmlEnum("high mud weight")]
          highmudweight,
        /// <summary>
        /// specialadditivesneeded property
        /// </summary>
          [XmlEnum("special additives needed")]
          specialadditivesneeded,
        /// <summary>
        /// gumboproblems property
        /// </summary>
          [XmlEnum("gumbo problems")]
          gumboproblems,
        /// <summary>
        /// highECDrheologyrelated property
        /// </summary>
          [XmlEnum("high ECD - rheology related")]
          highECDrheologyrelated,
        /// <summary>
        /// excessivecirculation property
        /// </summary>
          [XmlEnum("excessive circulation")]
          excessivecirculation,
        /// <summary>
        /// performingakill property
        /// </summary>
          [XmlEnum("performing a kill")]
          performingakill,
        /// <summary>
        /// mudweightchange property
        /// </summary>
          [XmlEnum("mud weight change")]
          mudweightchange,
        /// <summary>
        /// excessivepipecementscaling property
        /// </summary>
          [XmlEnum("excessive pipe cement scaling")]
          excessivepipecementscaling,
        /// <summary>
        /// pitgainorloss property
        /// </summary>
          [XmlEnum("pit gain or loss")]
          pitgainorloss,
        /// <summary>
        /// mudstabilityproblems property
        /// </summary>
          [XmlEnum("mud stability problems")]
          mudstabilityproblems,
        /// <summary>
        /// shallowgasflow property
        /// </summary>
          [XmlEnum("shallow gas flow")]
          shallowgasflow,
        /// <summary>
        /// twistoff property
        /// </summary>
          [XmlEnum("twist off")]
          twistoff,
        /// <summary>
        /// stuckpipe property
        /// </summary>
          [XmlEnum("stuck pipe")]
          stuckpipe,
        /// <summary>
        /// wirelinestuckinhole property
        /// </summary>
          [XmlEnum("wireline stuck in hole")]
          wirelinestuckinhole,
        /// <summary>
        /// stickandslip property
        /// </summary>
          [XmlEnum("stick and slip")]
          stickandslip,
        /// <summary>
        /// vibrationaxial property
        /// </summary>
          [XmlEnum("vibration - axial")]
          vibrationaxial,
        /// <summary>
        /// vibrationtorsional property
        /// </summary>
          [XmlEnum("vibration - torsional")]
          vibrationtorsional,
        /// <summary>
        /// vibrationtransverse property
        /// </summary>
          [XmlEnum("vibration - transverse")]
          vibrationtransverse,
        /// <summary>
        /// vibrationunknownorroughdrilling property
        /// </summary>
          [XmlEnum("vibration unknown or rough drilling")]
          vibrationunknownorroughdrilling,
        /// <summary>
        /// unevenwearofBHA property
        /// </summary>
          [XmlEnum("uneven wear of BHA")]
          unevenwearofBHA,
        /// <summary>
        /// unevenwearofdrillstring property
        /// </summary>
          [XmlEnum("uneven wear of drillstring")]
          unevenwearofdrillstring,
        /// <summary>
        /// excessivetorque property
        /// </summary>
          [XmlEnum("excessive torque")]
          excessivetorque,
        /// <summary>
        /// excessivedrag property
        /// </summary>
          [XmlEnum("excessive drag")]
          excessivedrag,
        /// <summary>
        /// reaminggreaterthan2hours property
        /// </summary>
          [XmlEnum("reaming greater than 2 hours")]
          reaminggreaterthan2hours,
        /// <summary>
        /// 
        /// </summary>
          washouts,
        /// <summary>
        /// tightholeoroverPull property
        /// </summary>
          [XmlEnum("tight hole or overPull")]
          tightholeoroverPull,
        /// <summary>
        /// failedinspectionsorfatiguewear property
        /// </summary>
          [XmlEnum("failed inspections or fatigue wear")]
          failedinspectionsorfatiguewear,
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// drillinggreaterthan1000feetday property
        /// </summary>
          [XmlEnum("drilling greater than 1000 feet/day")]
          drillinggreaterthan1000feetday,
        /// <summary>
        /// drillinggreaterthan2000feetday property
        /// </summary>
          [XmlEnum("drilling greater than 2000 feet/day")]
          drillinggreaterthan2000feetday,
        /// <summary>
        /// drillinglessthan20feetday property
        /// </summary>
          [XmlEnum("drilling less than 20 feet/day")]
          drillinglessthan20feetday,
        /// <summary>
        /// tripsgreaterthan24hours property
        /// </summary>
          [XmlEnum("trips greater than 24 hours")]
          tripsgreaterthan24hours,
        /// <summary>
        /// excessivetimeforBHAmakeup property
        /// </summary>
          [XmlEnum("excessive time for BHA makeup")]
          excessivetimeforBHAmakeup,
        /// <summary>
        /// waitingondecisions property
        /// </summary>
          [XmlEnum("waiting on decisions")]
          waitingondecisions,
        /// <summary>
        /// waitingonweather property
        /// </summary>
          [XmlEnum("waiting on weather")]
          waitingonweather,
        /// <summary>
        /// waitingontools property
        /// </summary>
          [XmlEnum("waiting on tools")]
          waitingontools,
        /// <summary>
        /// sloughingorpackoffs property
        /// </summary>
          [XmlEnum("sloughing or packoffs")]
          sloughingorpackoffs,
        /// <summary>
        /// 
        /// </summary>
          ballooning,
        /// <summary>
        /// fractureproblems property
        /// </summary>
          [XmlEnum("fracture problems")]
          fractureproblems,
        /// <summary>
        /// unstablezones property
        /// </summary>
          [XmlEnum("unstable zones")]
          unstablezones,
        /// <summary>
        /// formationintegritytest property
        /// </summary>
          [XmlEnum("formation integrity test")]
          formationintegritytest,
        /// <summary>
        /// leakofftest property
        /// </summary>
          [XmlEnum("leak-off test")]
          leakofftest,
        /// <summary>
        /// 
        /// </summary>
          tectonics,
        /// <summary>
        /// porepressure property
        /// </summary>
          [XmlEnum("pore pressure")]
          porepressure,
        /// <summary>
        /// 
        /// </summary>
          breakouts,
        /// <summary>
        /// bedparallel property
        /// </summary>
          [XmlEnum("bed parallel")]
          bedparallel,
        /// <summary>
        /// wellborestability property
        /// </summary>
          [XmlEnum("wellbore stability")]
          wellborestability,
        /// <summary>
        /// excessivedoglegs property
        /// </summary>
          [XmlEnum("excessive doglegs")]
          excessivedoglegs,
        /// <summary>
        /// 
        /// </summary>
          sidetrack,
        /// <summary>
        /// BHAchangefordirectional property
        /// </summary>
          [XmlEnum("BHA change for directional")]
          BHAchangefordirectional,
        /// <summary>
        /// wrongtotalflowarea property
        /// </summary>
          [XmlEnum("wrong total flow area")]
          wrongtotalflowarea,
        /// <summary>
        /// wellcollisionactual property
        /// </summary>
          [XmlEnum("well collision - actual")]
          wellcollisionactual,
        /// <summary>
        /// wellcollisiontechnical property
        /// </summary>
          [XmlEnum("well collision - technical")]
          wellcollisiontechnical,
        /// <summary>
        /// 
        /// </summary>
          geosteering,
        /// <summary>
        /// abnormaltendencychanges property
        /// </summary>
          [XmlEnum("abnormal tendency changes")]
          abnormaltendencychanges,
        /// <summary>
        /// 
        /// </summary>
          resurveying,
        /// <summary>
        /// infieldreferencingIFRactions property
        /// </summary>
          [XmlEnum("in-field referencing (IFR) actions")]
          infieldreferencingIFRactions,
        /// <summary>
        /// bitorBHAperformance property
        /// </summary>
          [XmlEnum("bit or BHA performance")]
          bitorBHAperformance,
        /// <summary>
        /// drillingoptimization property
        /// </summary>
          [XmlEnum("drilling optimization")]
          drillingoptimization,
        /// <summary>
        /// bitballing property
        /// </summary>
          [XmlEnum("bit balling")]
          bitballing,
        /// <summary>
        /// lostconesorbrokencutters property
        /// </summary>
          [XmlEnum("lost cones or broken cutters")]
          lostconesorbrokencutters,
        /// <summary>
        /// excessivebitwearorgauge property
        /// </summary>
          [XmlEnum("excessive bit wear or gauge")]
          excessivebitwearorgauge,
        /// <summary>
        /// lowrateofbitpenetration property
        /// </summary>
          [XmlEnum("low rate of bit penetration")]
          lowrateofbitpenetration,
        /// <summary>
        /// highrateofbitpenetration property
        /// </summary>
          [XmlEnum("high rate of bit penetration")]
          highrateofbitpenetration,
        /// <summary>
        /// downholetool property
        /// </summary>
          [XmlEnum("downhole tool")]
          downholetool,
        /// <summary>
        /// surfacesystem property
        /// </summary>
          [XmlEnum("surface system")]
          surfacesystem,
        /// <summary>
        /// motororrotarysteerablesystemfailure property
        /// </summary>
          [XmlEnum("motor or rotary steerable system failure")]
          motororrotarysteerablesystemfailure,
        /// <summary>
        /// topdrivefailure property
        /// </summary>
          [XmlEnum("topdrive failure")]
          topdrivefailure,
        /// <summary>
        /// hoistingequipmentfailure property
        /// </summary>
          [XmlEnum("hoisting equipment failure")]
          hoistingequipmentfailure,
        /// <summary>
        /// circulatingequipmentfailure property
        /// </summary>
          [XmlEnum("circulating equipment failure")]
          circulatingequipmentfailure,
        /// <summary>
        /// electricalsystemfailure property
        /// </summary>
          [XmlEnum("electrical system failure")]
          electricalsystemfailure,
        /// <summary>
        /// blowoutpreventerevents property
        /// </summary>
          [XmlEnum("blow out preventer events")]
          blowoutpreventerevents,
        /// <summary>
        /// surfaceinstrumentationproblems property
        /// </summary>
          [XmlEnum("surface instrumentation problems")]
          surfaceinstrumentationproblems,
        /// <summary>
        /// rigcommunications property
        /// </summary>
          [XmlEnum("rig communications")]
          rigcommunications,
        /// <summary>
        /// completionequipmentfailure property
        /// </summary>
          [XmlEnum("completion equipment failure")]
          completionequipmentfailure,
        /// <summary>
        /// miscellaneousrigequipment property
        /// </summary>
          [XmlEnum("miscellaneous rig equipment")]
          miscellaneousrigequipment,
        /// <summary>
        /// toolorequipmentfailure property
        /// </summary>
          [XmlEnum("tool or equipment failure")]
          toolorequipmentfailure,
        /// <summary>
        /// squeezejobs property
        /// </summary>
          [XmlEnum("squeeze jobs")]
          squeezejobs,
        /// <summary>
        /// casingsurgelosses property
        /// </summary>
          [XmlEnum("casing surge losses")]
          casingsurgelosses,
        /// <summary>
        /// stuckcasingorcompletion property
        /// </summary>
          [XmlEnum("stuck casing or completion")]
          stuckcasingorcompletion,
        /// <summary>
        /// shoefailures property
        /// </summary>
          [XmlEnum("shoe failures")]
          shoefailures,
        /// <summary>
        /// earlycementsetup property
        /// </summary>
          [XmlEnum("early cement setup")]
          earlycementsetup,
        /// <summary>
        /// casingcollapse property
        /// </summary>
          [XmlEnum("casing collapse")]
          casingcollapse,
        /// <summary>
        /// 
        /// </summary>
          milling,
        /// <summary>
        /// excessivecasingwearorcuttings property
        /// </summary>
          [XmlEnum("excessive casing wear or cuttings")]
          excessivecasingwearorcuttings,
        /// <summary>
        /// excessiveformationdamageorskin property
        /// </summary>
          [XmlEnum("excessive formation damage or skin")]
          excessiveformationdamageorskin,
        /// <summary>
        /// casingrotationorreciprocationrqd property
        /// </summary>
          [XmlEnum("casing rotation or reciprocation rqd")]
          casingrotationorreciprocationrqd,
        /// <summary>
        /// 
        /// </summary>
          broaching,
        /// <summary>
        /// completionorcasing property
        /// </summary>
          [XmlEnum("completion or casing")]
          completionorcasing,
        /// <summary>
        /// 
        /// </summary>
          stratigraphy,
        /// <summary>
        /// 
        /// </summary>
          fishing,
        /// <summary>
        /// junkinhole property
        /// </summary>
          [XmlEnum("junk in hole")]
          junkinhole,
        /// <summary>
        /// delayduetopoliticalunrest property
        /// </summary>
          [XmlEnum("delay due to political unrest")]
          delayduetopoliticalunrest,
        /// <summary>
        /// rigmove property
        /// </summary>
          [XmlEnum("rig move")]
          rigmove,
        /// <summary>
        /// gashydrates property
        /// </summary>
          [XmlEnum("gas hydrates")]
          gashydrates,
        /// <summary>
        /// pendinganalysis property
        /// </summary>
          [XmlEnum("pending analysis")]
          pendinganalysis,
        /// <summary>
        /// riserdisconnect property
        /// </summary>
          [XmlEnum("riser disconnect")]
          riserdisconnect,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// 
        /// </summary>
          personnel,
        /// <summary>
        /// 
        /// </summary>
          environmental,
        /// <summary>
        /// 
        /// </summary>
          automotive,
        /// <summary>
        /// 
        /// </summary>
          asset,
        /// <summary>
        /// 
        /// </summary>
          information,
        /// <summary>
        /// 
        /// </summary>
          time,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE
        }
        /// <summary>
        /// This class represents the RiskType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskType xsd enumeration.")]
        public enum RiskType 
        {
        /// <summary>
        /// 
        /// </summary>
          risk,
        /// <summary>
        /// 
        /// </summary>
          @event,
        /// <summary>
        /// nearmiss property
        /// </summary>
          [XmlEnum("near miss")]
          nearmiss,
        /// <summary>
        /// bestpractice property
        /// </summary>
          [XmlEnum("best practice")]
          bestpractice,
        /// <summary>
        /// lessonslearned property
        /// </summary>
          [XmlEnum("lessons learned")]
          lessonslearned,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ScrType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ScrType xsd enumeration.")]
        public enum ScrType 
        {
        /// <summary>
        /// stringannulus property
        /// </summary>
          [XmlEnum("string annulus")]
          stringannulus,
        /// <summary>
        /// stringkillline property
        /// </summary>
          [XmlEnum("string kill line")]
          stringkillline,
        /// <summary>
        /// stringchokeline property
        /// </summary>
          [XmlEnum("string choke line")]
          stringchokeline,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowFluorescence xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowFluorescence xsd enumeration.")]
        public enum ShowFluorescence 
        {
        /// <summary>
        /// 
        /// </summary>
          faint,
        /// <summary>
        /// 
        /// </summary>
          bright,
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowLevel xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowLevel xsd enumeration.")]
        public enum ShowLevel 
        {
        /// <summary>
        /// 
        /// </summary>
          blooming,
        /// <summary>
        /// 
        /// </summary>
          streaming,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowRating xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowRating xsd enumeration.")]
        public enum ShowRating 
        {
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// verypoor property
        /// </summary>
          [XmlEnum("very poor")]
          verypoor,
        /// <summary>
        /// 
        /// </summary>
          poor,
        /// <summary>
        /// 
        /// </summary>
          fair,
        /// <summary>
        /// 
        /// </summary>
          good,
        /// <summary>
        /// verygood property
        /// </summary>
          [XmlEnum("very good")]
          verygood,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowSpeed xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowSpeed xsd enumeration.")]
        public enum ShowSpeed 
        {
        /// <summary>
        /// 
        /// </summary>
          slow,
        /// <summary>
        /// moderatelyfast property
        /// </summary>
          [XmlEnum("moderately fast")]
          moderatelyfast,
        /// <summary>
        /// 
        /// </summary>
          fast,
        /// <summary>
        /// 
        /// </summary>
          instantaneous,
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StateDetailActivity xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StateDetailActivity xsd enumeration.")]
        public enum StateDetailActivity 
        {
        /// <summary>
        /// Personnel injury in connection with drilling and/or drilling related operations.
        /// </summary>
          injury,
        /// <summary>
        /// operationfailed property
        /// </summary>
          [XmlEnum("operation failed")]
          operationfailed,
        /// <summary>
        /// Formation fluid invading the wellbore.
        /// </summary>
          kick,
        /// <summary>
        /// circulationloss property
        /// </summary>
          [XmlEnum("circulation loss")]
          circulationloss,
        /// <summary>
        /// mudloss property
        /// </summary>
          [XmlEnum("mud loss")]
          mudloss,
        /// <summary>
        /// stuckequipment property
        /// </summary>
          [XmlEnum("stuck equipment")]
          stuckequipment,
        /// <summary>
        /// equipmentfailure property
        /// </summary>
          [XmlEnum("equipment failure")]
          equipmentfailure,
        /// <summary>
        /// equipmenthang property
        /// </summary>
          [XmlEnum("equipment hang")]
          equipmenthang,
        /// <summary>
        /// Operation achieved objective.
        /// </summary>
          success,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimAdditiveType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimAdditiveType xsd enumeration.")]
        public enum StimAdditiveType 
        {
        /// <summary>
        /// Substances used to wear away a surface by friction.
        /// </summary>
          abrasive,
        /// <summary>
        /// An accelerator additive.
        /// </summary>
          accelerator,
        /// <summary>
        /// acidinhibitorretarder property
        /// </summary>
          [XmlEnum("acid inhibitor/retarder")]
          acidinhibitorretarder,
        /// <summary>
        /// acidmaterial property
        /// </summary>
          [XmlEnum("acid material")]
          acidmaterial,
        /// <summary>
        /// acidsolubleadditive property
        /// </summary>
          [XmlEnum("acid soluble additive")]
          acidsolubleadditive,
        /// <summary>
        /// acidsource property
        /// </summary>
          [XmlEnum("acid source")]
          acidsource,
        /// <summary>
        /// An activator additive.
        /// </summary>
          activator,
        /// <summary>
        /// additivematerial property
        /// </summary>
          [XmlEnum("additive material")]
          additivematerial,
        /// <summary>
        /// An alcohol additive.
        /// </summary>
          alcohol,
        /// <summary>
        /// antiSludge property
        /// </summary>
          [XmlEnum("anti-Sludge")]
          antiSludge,
        /// <summary>
        /// antisulfidecracker property
        /// </summary>
          [XmlEnum("anti-sulfide cracker")]
          antisulfidecracker,
        /// <summary>
        /// aromaticsolvent property
        /// </summary>
          [XmlEnum("aromatic solvent")]
          aromaticsolvent,
        /// <summary>
        /// A biocide additive, is a chemical substance capable of killing living organisms and to protect them against biological infestation and growth.
        /// </summary>
          biocide,
        /// <summary>
        /// boreholestabilizer property
        /// </summary>
          [XmlEnum("borehole stabilizer")]
          boreholestabilizer,
        /// <summary>
        /// A breaker additive, Chemicals used to reduce the viscosity of fracturing fluids.
        /// </summary>
          breaker,
        /// <summary>
        /// bridgingagent property
        /// </summary>
          [XmlEnum("bridging agent")]
          bridgingagent,
        /// <summary>
        /// A buffer additive, A buffer solution is an aqueous solution consisting of a mixture of a weak acid and its conjugate base or a weak base and its conjugate acid. It has the property that the pH of the solution changes very little when a small amount of acid or base is added to it. Buffer solutions are used as a means of keeping pH at a nearly constant value in a wide variety of chemical applications.
        /// </summary>
          buffer,
        /// <summary>
        /// calciumremover property
        /// </summary>
          [XmlEnum("calcium remover")]
          calciumremover,
        /// <summary>
        /// carryingagent property
        /// </summary>
          [XmlEnum("carrying agent")]
          carryingagent,
        /// <summary>
        /// A material used in a process to activate a chemical reaction.
        /// </summary>
          catalyst,
        /// <summary>
        /// Clay is a naturally occurring material composed primarily of fine-grained minerals, which show plasticity through a variable range of water content.
        /// </summary>
          clay,
        /// <summary>
        /// claycontrol property
        /// </summary>
          [XmlEnum("clay control")]
          claycontrol,
        /// <summary>
        /// conductivityenhancer property
        /// </summary>
          [XmlEnum("conductivity enhancer")]
          conductivityenhancer,
        /// <summary>
        /// conformancecontrol property
        /// </summary>
          [XmlEnum("conformance control")]
          conformancecontrol,
        /// <summary>
        /// conformancecaterial property
        /// </summary>
          [XmlEnum("conformance caterial")]
          conformancecaterial,
        /// <summary>
        /// corrosioninhibitor property
        /// </summary>
          [XmlEnum("corrosion inhibitor")]
          corrosioninhibitor,
        /// <summary>
        /// crosslinkenhancer property
        /// </summary>
          [XmlEnum("crosslink enhancer")]
          crosslinkenhancer,
        /// <summary>
        /// A crosslinker additive, The crosslinker reacts with the multiple-strand polymer to couple the molecules, creating a fluid of high, but closely controlled, viscosity.
        /// </summary>
          crosslinker,
        /// <summary>
        /// curingagent property
        /// </summary>
          [XmlEnum("curing agent")]
          curingagent,
        /// <summary>
        /// A defoaming agent.
        /// </summary>
          defoamer,
        /// <summary>
        /// A demulsifier additive.
        /// </summary>
          demulsifier,
        /// <summary>
        /// A material used to dilute the base product.
        /// </summary>
          diluent,
        /// <summary>
        /// A dispersant agent.
        /// </summary>
          dispersant,
        /// <summary>
        /// A diverter agent.
        /// </summary>
          diverter,
        /// <summary>
        /// elastomericadditive property
        /// </summary>
          [XmlEnum("elastomeric additive")]
          elastomericadditive,
        /// <summary>
        /// An emulsifier agent.
        /// </summary>
          emulsifier,
        /// <summary>
        /// epoxyresin property
        /// </summary>
          [XmlEnum("epoxy resin")]
          epoxyresin,
        /// <summary>
        /// expoxyresinagent property
        /// </summary>
          [XmlEnum("expoxy resin agent")]
          expoxyresinagent,
        /// <summary>
        /// An expander agent.
        /// </summary>
          expander,
        /// <summary>
        /// filtrationcontrol property
        /// </summary>
          [XmlEnum("filtration control")]
          filtrationcontrol,
        /// <summary>
        /// An anti-suspension agent. Used to "knock" solids out of suspension.
        /// </summary>
          flocculant,
        /// <summary>
        /// fluidlosscontrol property
        /// </summary>
          [XmlEnum("fluid loss control")]
          fluidlosscontrol,
        /// <summary>
        /// flushspaceradditive property
        /// </summary>
          [XmlEnum("flush/spacer additive")]
          flushspaceradditive,
        /// <summary>
        /// A foamer additive.
        /// </summary>
          foamer,
        /// <summary>
        /// formationsealer property
        /// </summary>
          [XmlEnum("formation sealer")]
          formationsealer,
        /// <summary>
        /// freewatercontrol property
        /// </summary>
          [XmlEnum("free water control")]
          freewatercontrol,
        /// <summary>
        /// frictionreducer property
        /// </summary>
          [XmlEnum("friction reducer")]
          frictionreducer,
        /// <summary>
        /// Any general purpose gas.
        /// </summary>
          gas,
        /// <summary>
        /// gasmigrationcontrol property
        /// </summary>
          [XmlEnum("gas migration control")]
          gasmigrationcontrol,
        /// <summary>
        /// gelstabilizer property
        /// </summary>
          [XmlEnum("gel stabilizer")]
          gelstabilizer,
        /// <summary>
        /// gellingagent property
        /// </summary>
          [XmlEnum("gelling agent")]
          gellingagent,
        /// <summary>
        /// H2Sscavenger property
        /// </summary>
          [XmlEnum("H2S scavenger")]
          H2Sscavenger,
        /// <summary>
        /// An additive that intensifies the activity of another.
        /// </summary>
          intensifier,
        /// <summary>
        /// ironcontrol property
        /// </summary>
          [XmlEnum("iron control")]
          ironcontrol,
        /// <summary>
        /// lostcirculationadditive property
        /// </summary>
          [XmlEnum("lost circulation additive")]
          lostcirculationadditive,
        /// <summary>
        /// lowfluidlosscontrol property
        /// </summary>
          [XmlEnum("low fluid loss control")]
          lowfluidlosscontrol,
        /// <summary>
        /// A lubricant additive.
        /// </summary>
          lubricant,
        /// <summary>
        /// miscadditive property
        /// </summary>
          [XmlEnum("misc additive")]
          miscadditive,
        /// <summary>
        /// mixingfluid property
        /// </summary>
          [XmlEnum("mixing fluid")]
          mixingfluid,
        /// <summary>
        /// mudremovaladditive property
        /// </summary>
          [XmlEnum("mud removal additive")]
          mudremovaladditive,
        /// <summary>
        /// mudthinner property
        /// </summary>
          [XmlEnum("mud thinner")]
          mudthinner,
        /// <summary>
        /// mutualsolvent property
        /// </summary>
          [XmlEnum("mutual solvent")]
          mutualsolvent,
        /// <summary>
        /// An oxidizing agent, (also called an oxidant, oxidizer or oxidiser) can be defined as either: a chemical compound that readily transfers oxygen atoms, or a substance that gains electrons in a redox chemical reaction.
        /// </summary>
          oxydizer,
        /// <summary>
        /// oxygenscavenger property
        /// </summary>
          [XmlEnum("oxygen scavenger")]
          oxygenscavenger,
        /// <summary>
        /// parafincontrol property
        /// </summary>
          [XmlEnum("parafin control")]
          parafincontrol,
        /// <summary>
        /// penetratingagent property
        /// </summary>
          [XmlEnum("penetrating agent")]
          penetratingagent,
        /// <summary>
        /// A polymer is a large molecule (macromolecule) composed of repeating structural units connected by covalent chemical bonds. A material used in cement and mud slurries as a friction reducer, gelling agent, viscosifier, suspending agent, or fluid loss control agent.
        /// </summary>
          polymer,
        /// <summary>
        /// proppantstabilizer property
        /// </summary>
          [XmlEnum("proppant stabilizer")]
          proppantstabilizer,
        /// <summary>
        /// radioactivetracer property
        /// </summary>
          [XmlEnum("radioactive tracer")]
          radioactivetracer,
        /// <summary>
        /// rawacid property
        /// </summary>
          [XmlEnum("raw acid")]
          rawacid,
        /// <summary>
        /// relativepermmodifier property
        /// </summary>
          [XmlEnum("relative perm modifier")]
          relativepermmodifier,
        /// <summary>
        /// A retarder additive.
        /// </summary>
          retarder,
        /// <summary>
        /// A salt additive.
        /// </summary>
          salt,
        /// <summary>
        /// Naturally occurring granular material composed of finely divided rock and mineral particles.
        /// </summary>
          sand,
        /// <summary>
        /// sandcontrolmaterial property
        /// </summary>
          [XmlEnum("sand control material")]
          sandcontrolmaterial,
        /// <summary>
        /// scalecontroladditive property
        /// </summary>
          [XmlEnum("scale control additive")]
          scalecontroladditive,
        /// <summary>
        /// A special additive, substance added to prevent unwanted change in state of another substance.
        /// </summary>
          stabilizer,
        /// <summary>
        /// strengthretrogression property
        /// </summary>
          [XmlEnum("strength retrogression")]
          strengthretrogression,
        /// <summary>
        /// sulfidescavenger property
        /// </summary>
          [XmlEnum("sulfide scavenger")]
          sulfidescavenger,
        /// <summary>
        /// A surfactant agent.
        /// </summary>
          surfactant,
        /// <summary>
        /// suspensionagent property
        /// </summary>
          [XmlEnum("suspension agent")]
          suspensionagent,
        /// <summary>
        /// A tackiness agent; a substance which is added in order to increase the stickiness of a compound.
        /// </summary>
          tactifier,
        /// <summary>
        /// A viscosifier additive.
        /// </summary>
          viscosifier,
        /// <summary>
        /// wateradditive property
        /// </summary>
          [XmlEnum("water additive")]
          wateradditive,
        /// <summary>
        /// watermanagementmaterial property
        /// </summary>
          [XmlEnum("water management material")]
          watermanagementmaterial,
        /// <summary>
        /// pHcontrol property
        /// </summary>
          [XmlEnum("pH control")]
          pHcontrol,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimAnalysisMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimAnalysisMethod xsd enumeration.")]
        public enum StimAnalysisMethod 
        {
        /// <summary>
        /// Refers to the numeric average of the investigated variable of interest. In this case a diagnostic variable is produced by various methods and averaged to facilitate a diagnostic decision. 
        /// </summary>
          average,
        /// <summary>
        /// deltapressureovergtime property
        /// </summary>
          [XmlEnum("delta pressure over g-time")]
          deltapressureovergtime,
        /// <summary>
        /// deltapressureoverlineartime property
        /// </summary>
          [XmlEnum("delta pressure over linear time")]
          deltapressureoverlineartime,
        /// <summary>
        /// deltapressureoverradialtime property
        /// </summary>
          [XmlEnum("delta pressure over radial time")]
          deltapressureoverradialtime,
        /// <summary>
        /// gdk2d property
        /// </summary>
          [XmlEnum("gdk 2-d")]
          gdk2d,
        /// <summary>
        ///  A plot of bottomhole pressure over the log of a time ratio (Horner Time) to provide a first estimate of closure pressure and an extrapolated reservoir pressure. The Horner plot is used to determine if pseudo-radial flow developed during pressure decline. If a semi-log straight line is observed and the line can be extrapolated to a reasonable value of reservoir pressure, radial or pseudo-radial flow may be affecting the decline behavior. This suggests that the fracture is already closed and that data beyond the point of influence need not be considered in the evaluation of closure. The Horner plot provides a lower bound, first estimate of closure pressure. 
        /// </summary>
          horner,
        /// <summary>
        ///  A diagnostic plot of the change in pressure over the change in time to determine the pressure and time at which a fracture closed. 
        /// </summary>
          linear,
        /// <summary>
        /// loglog property
        /// </summary>
          [XmlEnum("log-log")]
          loglog,
        /// <summary>
        ///  Nolte analysis diagnostic derivative method is one of the methodologies for determining inflection points (i.e. fracture closure). Analyzing the derivative, dP/dt, as a function of time is a method of determining closure. The resulting trend represents the rate-of-change of pressure with respect to time. Depending on the type of data (i.e., flowback or natural decline), the derivative plot can be used to identify the closure by observing a characteristic change in the shape of this relationship. It accounts for mass conservation and fracture compliance and inherently assumes that the rate of pressure decline is proportional to the leakoff rate. Nolte was the first to implement this concept. In simple terms, if one can find a time function where the rate of pressure decline with respect to a time function is a constant during fracture closure, the closure time would be indicated by a deviation from the measured and theoretical pressure declines. 
        /// </summary>
          nolte,
        /// <summary>
        /// pdlcoefficient property
        /// </summary>
          [XmlEnum("pdl coefficient")]
          pdlcoefficient,
        /// <summary>
        /// perkinsandkern2d property
        /// </summary>
          [XmlEnum("perkins and kern 2-d")]
          perkinsandkern2d,
        /// <summary>
        /// radial2d property
        /// </summary>
          [XmlEnum("radial 2-d")]
          radial2d,
        /// <summary>
        /// squareroot property
        /// </summary>
          [XmlEnum("square root")]
          squareroot,
        /// <summary>
        /// thirdpartysoftware property
        /// </summary>
          [XmlEnum("third-party software")]
          thirdpartysoftware,
        /// <summary>
        /// A known method not one of the above. 
        /// </summary>
          other,
        /// <summary>
        /// Unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimFluidSubtype xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimFluidSubtype xsd enumeration.")]
        public enum StimFluidSubtype 
        {
        /// <summary>
        /// Chemical substance with a pH less than 7.
        /// </summary>
          acid,
        /// <summary>
        /// Chemical substance with a pH greater than 7.
        /// </summary>
          @base,
        /// <summary>
        /// carbondioxide property
        /// </summary>
          [XmlEnum("carbon dioxide")]
          carbondioxide,
        /// <summary>
        /// carbondioxideandnitrogen property
        /// </summary>
          [XmlEnum("carbon dioxide and nitrogen")]
          carbondioxideandnitrogen,
        /// <summary>
        /// carbondioxideandwater property
        /// </summary>
          [XmlEnum("carbon dioxide and water")]
          carbondioxideandwater,
        /// <summary>
        /// Lightweight hydrocarbon condensed from wet natural gas.
        /// </summary>
          condensate,
        /// <summary>
        /// crosslinkedgel property
        /// </summary>
          [XmlEnum("cross-linked gel")]
          crosslinkedgel,
        /// <summary>
        /// crudeoil property
        /// </summary>
          [XmlEnum("crude oil")]
          crudeoil,
        /// <summary>
        /// A specific fractional distillate of petroleum fuel oil.
        /// </summary>
          diesel,
        /// <summary>
        /// Fluid pumped with a gas such as air, carbon dioxide or nitrogen.
        /// </summary>
          foam,
        /// <summary>
        /// fracturingoil property
        /// </summary>
          [XmlEnum("fracturing oil")]
          fracturingoil,
        /// <summary>
        /// freshwater property
        /// </summary>
          [XmlEnum("fresh water")]
          freshwater,
        /// <summary>
        /// gelledacid property
        /// </summary>
          [XmlEnum("gelled acid")]
          gelledacid,
        /// <summary>
        /// gelledcondensate property
        /// </summary>
          [XmlEnum("gelled condensate")]
          gelledcondensate,
        /// <summary>
        /// gelledcrude property
        /// </summary>
          [XmlEnum("gelled crude")]
          gelledcrude,
        /// <summary>
        /// gelleddiesel property
        /// </summary>
          [XmlEnum("gelled diesel")]
          gelleddiesel,
        /// <summary>
        /// gelledoil property
        /// </summary>
          [XmlEnum("gelled oil")]
          gelledoil,
        /// <summary>
        /// gelledsaltwater property
        /// </summary>
          [XmlEnum("gelled salt water")]
          gelledsaltwater,
        /// <summary>
        /// hotcondensate property
        /// </summary>
          [XmlEnum("hot condensate")]
          hotcondensate,
        /// <summary>
        /// hotfreshwater property
        /// </summary>
          [XmlEnum("hot fresh water")]
          hotfreshwater,
        /// <summary>
        /// hotoil property
        /// </summary>
          [XmlEnum("hot oil")]
          hotoil,
        /// <summary>
        /// hotsaltwater property
        /// </summary>
          [XmlEnum("hot salt water")]
          hotsaltwater,
        /// <summary>
        /// A fluid system with two or more fluid types pumped during the same treatment.
        /// </summary>
          hybrid,
        /// <summary>
        /// lineargel property
        /// </summary>
          [XmlEnum("linear gel")]
          lineargel,
        /// <summary>
        /// liquefiedpetroleumgas property
        /// </summary>
          [XmlEnum("liquefied petroleum gas")]
          liquefiedpetroleumgas,
        /// <summary>
        /// nitrogen gas
        /// </summary>
          nitrogen,
        /// <summary>
        /// Any substance that is liquid at ambient temperatures and does not mix with water but may mix with other oils and organic solvents. This general definition includes vegetable oils, volatile essential oils, petrochemical oils, and synthetic oils.
        /// </summary>
          oil,
        /// <summary>
        /// producedwater property
        /// </summary>
          [XmlEnum("produced water")]
          producedwater,
        /// <summary>
        /// saltwater property
        /// </summary>
          [XmlEnum("salt water")]
          saltwater,
        /// <summary>
        /// slickwater property
        /// </summary>
          [XmlEnum("slick water")]
          slickwater,
        /// <summary>
        /// Other stimulation fluid.
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the StimFluidType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimFluidType xsd enumeration.")]
        public enum StimFluidType 
        {
        /// <summary>
        /// acidbased property
        /// </summary>
          [XmlEnum("acid-based")]
          acidbased,
        /// <summary>
        /// A carrier medium in which gas is the primary medium of mixing and transport. 
        /// </summary>
          gas,
        /// <summary>
        /// oilbased property
        /// </summary>
          [XmlEnum("oil-based")]
          oilbased,
        /// <summary>
        /// waterbased property
        /// </summary>
          [XmlEnum("water-based")]
          waterbased
        }
        /// <summary>
        /// This class represents the StimProppantType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimProppantType xsd enumeration.")]
        public enum StimProppantType 
        {
        /// <summary>
        /// Sand is a naturally occurring sand grains composed of finely divided rock and mineral particles.
        /// </summary>
          sand,
        /// <summary>
        /// manmadeproppant property
        /// </summary>
          [XmlEnum("manmade proppant")]
          manmadeproppant,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimStageFlowPathType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimStageFlowPathType xsd enumeration.")]
        public enum StimStageFlowPathType 
        {
        /// <summary>
        /// Fluid is conducted through the annulus, (volume between casing and tubing).
        /// </summary>
          annulus,
        /// <summary>
        /// Fluid is conducted through the casing, (no tubing present).
        /// </summary>
          casing,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// drillpipe property
        /// </summary>
          [XmlEnum("drill pipe")]
          drillpipe,
        /// <summary>
        /// openhole property
        /// </summary>
          [XmlEnum("open hole")]
          openhole,
        /// <summary>
        /// Fluid is conducted through the tubing.
        /// </summary>
          tubing,
        /// <summary>
        /// tubingandannulus property
        /// </summary>
          [XmlEnum("tubing and annulus")]
          tubingandannulus,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimStageType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimStageType xsd enumeration.")]
        public enum StimStageType 
        {
        /// <summary>
        /// A stage in which the fluid type is an acid.
        /// </summary>
          acid,
        /// <summary>
        /// acidspearhead property
        /// </summary>
          [XmlEnum("acid spearhead")]
          acidspearhead,
        /// <summary>
        /// acidballout property
        /// </summary>
          [XmlEnum("acid ball out")]
          acidballout,
        /// <summary>
        /// acidbreakdown property
        /// </summary>
          [XmlEnum("acid breakdown")]
          acidbreakdown,
        /// <summary>
        /// ballout property
        /// </summary>
          [XmlEnum("ball out")]
          ballout,
        /// <summary>
        /// The case in which a rock matrix of an exposed formation fractures and allows fluid to be injected.
        /// </summary>
          breakdown,
        /// <summary>
        /// chemicalwash property
        /// </summary>
          [XmlEnum("chemical wash")]
          chemicalwash,
        /// <summary>
        /// To pump fluid through the whole active fluid system.
        /// </summary>
          circulate,
        /// <summary>
        /// A stage that displaces the existing fluid in the wellbore.
        /// </summary>
          displacement,
        /// <summary>
        /// A stage used in stimulation treatments to ensure uniform injection over the area to be treated.
        /// </summary>
          diverter,
        /// <summary>
        /// fluidefficiencytest property
        /// </summary>
          [XmlEnum("fluid efficiency test")]
          fluidefficiencytest,
        /// <summary>
        /// A stage in which fluids are allowed to flow from the well following a treatment in preparation for a later treatment or for returning the well to production.
        /// </summary>
          flowback,
        /// <summary>
        /// A stage in which a specially prepared fluid is used to displace preceeding treatments away from the wellbore.
        /// </summary>
          flush,
        /// <summary>
        /// foamedacid property
        /// </summary>
          [XmlEnum("foamed acid")]
          foamedacid,
        /// <summary>
        /// A stage in which a specially prepared fluid is pumped through a jet.
        /// </summary>
          hydrajet,
        /// <summary>
        /// loadwell property
        /// </summary>
          [XmlEnum("load well")]
          loadwell,
        /// <summary>
        /// loadannulus property
        /// </summary>
          [XmlEnum("load annulus")]
          loadannulus,
        /// <summary>
        /// A stage in which a specially prepared fluid is used to displace preceeding treatments away from the wellbore in excess of the normal flush volume.
        /// </summary>
          overflush,
        /// <summary>
        /// A stage which uses a specially prepared fluid generally preceeding a fracture stimulation treatment to propagate the initiated fracture.
        /// </summary>
          pad,
        /// <summary>
        /// pumpin property
        /// </summary>
          [XmlEnum("pump-in")]
          pumpin,
        /// <summary>
        /// preJob property
        /// </summary>
          [XmlEnum("pre-Job")]
          preJob,
        /// <summary>
        /// preflush property
        /// </summary>
          [XmlEnum("pre-flush")]
          preflush,
        /// <summary>
        /// prepad property
        /// </summary>
          [XmlEnum("pre-pad")]
          prepad,
        /// <summary>
        /// shutin property
        /// </summary>
          [XmlEnum("shut-in")]
          shutin,
        /// <summary>
        /// shutinforFETanalysis property
        /// </summary>
          [XmlEnum("shut-in for FET analysis")]
          shutinforFETanalysis,
        /// <summary>
        /// proppantladenfluid property
        /// </summary>
          [XmlEnum("proppant laden fluid")]
          proppantladenfluid,
        /// <summary>
        /// A stage in which a mixture of suspended solids and liquids is pumped. A proppant laden fluid is also a slurry, but a slurry is not necessarily a proppant laden fluid.
        /// </summary>
          slurry,
        /// <summary>
        /// sandslug property
        /// </summary>
          [XmlEnum("sand slug")]
          sandslug,
        /// <summary>
        /// A stage that provides a fluid cusion or separator between two dissimilar fluids.
        /// </summary>
          spacer,
        /// <summary>
        /// spotacid property
        /// </summary>
          [XmlEnum("spot acid")]
          spotacid,
        /// <summary>
        /// stepratetest property
        /// </summary>
          [XmlEnum("step rate test")]
          stepratetest,
        /// <summary>
        /// A stage used to identify fluid injection to the wellbore.
        /// </summary>
          treatment,
        /// <summary>
        /// A stage of a known type not already listed here.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the SupportCraft xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SupportCraft xsd enumeration.")]
        public enum SupportCraftType 
        {
        /// <summary>
        /// 
        /// </summary>
          barge,
        /// <summary>
        /// standbyboat property
        /// </summary>
          [XmlEnum("standby boat")]
          standbyboat,
        /// <summary>
        /// 
        /// </summary>
          helicopter,
        /// <summary>
        /// supplyboat property
        /// </summary>
          [XmlEnum("supply boat")]
          supplyboat,
        /// <summary>
        /// 
        /// </summary>
          truck,
        /// <summary>
        /// crewvehicle property
        /// </summary>
          [XmlEnum("crew vehicle")]
          crewvehicle,
        /// <summary>
        /// tugboat property
        /// </summary>
          [XmlEnum("tug boat")]
          tugboat,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the SurfEquipType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SurfEquipType xsd enumeration.")]
        public enum SurfEquipType 
        {
        /// <summary>
        /// 
        /// </summary>
          IADC,
        /// <summary>
        /// 
        /// </summary>
          custom,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the SurveyToolOperatingMode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SurveyToolOperatingMode xsd enumeration.")]
        public enum SurveyToolOperatingMode 
        {
        /// <summary>
        /// Tool is operating in a stationary mode 
        /// </summary>
          stationary,
        /// <summary>
        /// continuousXY property
        /// </summary>
          [XmlEnum("continuous XY")]
          continuousXY,
        /// <summary>
        /// continuousZ property
        /// </summary>
          [XmlEnum("continuous Z")]
          continuousZ,
        /// <summary>
        /// continuousXYZ property
        /// </summary>
          [XmlEnum("continuous XYZ")]
          continuousXYZ,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TargetCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TargetCategory xsd enumeration.")]
        public enum TargetCategory 
        {
        /// <summary>
        /// 
        /// </summary>
          geological,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TargetScope xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TargetScope xsd enumeration.")]
        public enum TargetScope 
        {
        /// <summary>
        /// Item3Dvolume property
        /// </summary>
          [XmlEnum("3D volume")]
          Item3Dvolume,
        /// <summary>
        /// 
        /// </summary>
          ellipsoid,
        /// <summary>
        /// Elliptical targets. Includes circle (semi-major = semi-minor axis). Any sections present are ignored.
        /// </summary>
          elliptical,
        /// <summary>
        /// Boundary Conditions. Use sections to describe, length and width ignore.
        /// </summary>
          hardLine,
        /// <summary>
        /// Includes half circle and polygon. Use sections to describe, length and width ignored. 
        /// </summary>
          irregular,
        /// <summary>
        /// leaseline property
        /// </summary>
          [XmlEnum("lease line")]
          leaseline,
        /// <summary>
        /// Line target
        /// </summary>
          line,
        /// <summary>
        /// Plane target. Used for horizontal wells. Any sections present are ignored.
        /// </summary>
          plane,
        /// <summary>
        /// Point Target. Any sections present are ignored.
        /// </summary>
          point,
        /// <summary>
        /// Rectangular Targets. Includes square (length = width). Any sections present are ignored.
        /// </summary>
          rectangular,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TargetSectionScope xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TargetSectionScope xsd enumeration.")]
        public enum TargetSectionScope 
        {
        /// <summary>
        /// continuous curve
        /// </summary>
          arc,
        /// <summary>
        /// straight line
        /// </summary>
          line,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TrajStationStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TrajStationStatus xsd enumeration.")]
        public enum TrajStationStatus 
        {
        /// <summary>
        /// constanttoolface property
        /// </summary>
          [XmlEnum("constant tool face")]
          constanttoolface,
        /// <summary>
        /// minimumcurvature property
        /// </summary>
          [XmlEnum("minimum curvature")]
          minimumcurvature,
        /// <summary>
        /// tangential property
        /// </summary>
          tangential,
        /// <summary>
        /// balancedtangential property
        /// </summary>
          [XmlEnum("balanced tangential")]
          balancedtangential,
        /// <summary>
        /// averageangle property
        /// </summary>
          [XmlEnum("average angle")]
          averageangle,
        /// <summary>
        /// radiusofcurvature property
        /// </summary>
          [XmlEnum("radius of curvature")]
          radiusofcurvature,
        /// <summary>
        /// inertial property
        /// </summary>
          inertial,
        /// <summary>
        /// custom property
        /// </summary>
          custom,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown,
        /// <summary>
        /// Has not been validated at this point, does not influence position computation for stations below.
        /// </summary>
          open,
        /// <summary>
        /// The quality is not ok, does not influence position computation for stations below.
        /// </summary>
          rejected,
        /// <summary>
        /// Has been validated and is used for position computation, used for position computation for stations below.
        /// </summary>
          position,
        /// <summary>
        /// unknown1 property
        /// </summary>
          [XmlEnum("unknown")]
          unknown1
        }
        /// <summary>
        /// This class represents the TrajStationType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TrajStationType xsd enumeration.")]
        public enum TrajStationType 
        {
        /// <summary>
        /// azimuthonplane property
        /// </summary>
          [XmlEnum("azimuth on plane")]
          azimuthonplane,
        /// <summary>
        /// buildratetodeltaMD property
        /// </summary>
          [XmlEnum("buildrate to delta-MD")]
          buildratetodeltaMD,
        /// <summary>
        /// buildratetoINCL property
        /// </summary>
          [XmlEnum("buildrate to INCL")]
          buildratetoINCL,
        /// <summary>
        /// buildratetoMD property
        /// </summary>
          [XmlEnum("buildrate to MD")]
          buildratetoMD,
        /// <summary>
        /// buildrateandturnratetoAZI property
        /// </summary>
          [XmlEnum("buildrate and turnrate to AZI")]
          buildrateandturnratetoAZI,
        /// <summary>
        /// buildrateandturnratetodeltaMD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to delta-MD")]
          buildrateandturnratetodeltaMD,
        /// <summary>
        /// buildrateandturnratetoINCL property
        /// </summary>
          [XmlEnum("buildrate and turnrate to INCL")]
          buildrateandturnratetoINCL,
        /// <summary>
        /// buildrateandturnratetoINCLandAZI property
        /// </summary>
          [XmlEnum("buildrate and turnrate to INCL and AZI")]
          buildrateandturnratetoINCLandAZI,
        /// <summary>
        /// buildrateandturnratetoMD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to MD")]
          buildrateandturnratetoMD,
        /// <summary>
        /// buildrateandturnratetoTVD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to TVD")]
          buildrateandturnratetoTVD,
        /// <summary>
        /// buildrateTVD property
        /// </summary>
          [XmlEnum("buildrate TVD")]
          buildrateTVD,
        /// <summary>
        /// casingMD property
        /// </summary>
          [XmlEnum("casing MD")]
          casingMD,
        /// <summary>
        /// casingTVD property
        /// </summary>
          [XmlEnum("casing TVD")]
          casingTVD,
        /// <summary>
        /// Section follows a given dogleg severity 
        /// </summary>
          DLS,
        /// <summary>
        /// DLStoAZIandMD property
        /// </summary>
          [XmlEnum("DLS to AZI and MD")]
          DLStoAZIandMD,
        /// <summary>
        /// DLStoAZITVD property
        /// </summary>
          [XmlEnum("DLS to AZI-TVD")]
          DLStoAZITVD,
        /// <summary>
        /// DLStoINCL property
        /// </summary>
          [XmlEnum("DLS to INCL")]
          DLStoINCL,
        /// <summary>
        /// DLStoINCLandAZI property
        /// </summary>
          [XmlEnum("DLS to INCL and AZI")]
          DLStoINCLandAZI,
        /// <summary>
        /// DLStoINCLandMD property
        /// </summary>
          [XmlEnum("DLS to INCL and MD")]
          DLStoINCLandMD,
        /// <summary>
        /// DLStoINCLandTVD property
        /// </summary>
          [XmlEnum("DLS to INCL and TVD")]
          DLStoINCLandTVD,
        /// <summary>
        /// DLStoNSEWandTVD property
        /// </summary>
          [XmlEnum("DLS to NS, EW and TVD")]
          DLStoNSEWandTVD,
        /// <summary>
        /// DLSandtoolfacetoAZI property
        /// </summary>
          [XmlEnum("DLS and toolface to AZI")]
          DLSandtoolfacetoAZI,
        /// <summary>
        /// DLSandtoolfacetodeltaMD property
        /// </summary>
          [XmlEnum("DLS and toolface to delta-MD")]
          DLSandtoolfacetodeltaMD,
        /// <summary>
        /// DLSandtoolfacetoINCL property
        /// </summary>
          [XmlEnum("DLS and toolface to INCL")]
          DLSandtoolfacetoINCL,
        /// <summary>
        /// DLSandtoolfacetoINCLAZI property
        /// </summary>
          [XmlEnum("DLS and toolface to INCL-AZI")]
          DLSandtoolfacetoINCLAZI,
        /// <summary>
        /// DLSandtoolfacetoMD property
        /// </summary>
          [XmlEnum("DLS and toolface to MD")]
          DLSandtoolfacetoMD,
        /// <summary>
        /// DLSandtoolfacetoTVD property
        /// </summary>
          [XmlEnum("DLS and toolface to TVD")]
          DLSandtoolfacetoTVD,
        /// <summary>
        /// formationMD property
        /// </summary>
          [XmlEnum("formation MD")]
          formationMD,
        /// <summary>
        /// formationTVD property
        /// </summary>
          [XmlEnum("formation TVD")]
          formationTVD,
        /// <summary>
        /// gyroinertial property
        /// </summary>
          [XmlEnum("gyro inertial")]
          gyroinertial,
        /// <summary>
        /// gyroMWD property
        /// </summary>
          [XmlEnum("gyro MWD")]
          gyroMWD,
        /// <summary>
        /// gyronorthseeking property
        /// </summary>
          [XmlEnum("gyro north seeking")]
          gyronorthseeking,
        /// <summary>
        /// holdtodeltaMD property
        /// </summary>
          [XmlEnum("hold to delta-MD")]
          holdtodeltaMD,
        /// <summary>
        /// holdtoMD property
        /// </summary>
          [XmlEnum("hold to MD")]
          holdtoMD,
        /// <summary>
        /// holdtoTVD property
        /// </summary>
          [XmlEnum("hold to TVD")]
          holdtoTVD,
        /// <summary>
        /// INCLAZIandTVD property
        /// </summary>
          [XmlEnum("INCL, AZI and TVD")]
          INCLAZIandTVD,
        /// <summary>
        /// magneticmultishot property
        /// </summary>
          [XmlEnum("magnetic multi-shot")]
          magneticmultishot,
        /// <summary>
        /// magneticMWD property
        /// </summary>
          [XmlEnum("magnetic MWD")]
          magneticMWD,
        /// <summary>
        /// magneticsingleshot property
        /// </summary>
          [XmlEnum("magnetic single shot")]
          magneticsingleshot,
        /// <summary>
        /// markerMD property
        /// </summary>
          [XmlEnum("marker MD")]
          markerMD,
        /// <summary>
        /// markerTVD property
        /// </summary>
          [XmlEnum("marker TVD")]
          markerTVD,
        /// <summary>
        /// NSEWandTVD property
        /// </summary>
          [XmlEnum("NS, EW and TVD")]
          NSEWandTVD,
        /// <summary>
        /// targetcenter property
        /// </summary>
          [XmlEnum("target center")]
          targetcenter,
        /// <summary>
        /// targetoffset property
        /// </summary>
          [XmlEnum("target offset")]
          targetoffset,
        /// <summary>
        /// tieinpoint property
        /// </summary>
          [XmlEnum("tie in point")]
          tieinpoint,
        /// <summary>
        /// turnratetoAZI property
        /// </summary>
          [XmlEnum("turnrate to AZI")]
          turnratetoAZI,
        /// <summary>
        /// turnratetodeltaMD property
        /// </summary>
          [XmlEnum("turnrate to delta-MD")]
          turnratetodeltaMD,
        /// <summary>
        /// turnratetoMD property
        /// </summary>
          [XmlEnum("turnrate to MD")]
          turnratetoMD,
        /// <summary>
        /// turnratetoTVD property
        /// </summary>
          [XmlEnum("turnrate to TVD")]
          turnratetoTVD,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TubularAssembly xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TubularAssembly xsd enumeration.")]
        public enum TubularAssembly 
        {
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// directionaldrilling property
        /// </summary>
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// 
        /// </summary>
          fishing,
        /// <summary>
        /// conditionmud property
        /// </summary>
          [XmlEnum("condition mud")]
          conditionmud,
        /// <summary>
        /// tubingconveyedlogging property
        /// </summary>
          [XmlEnum("tubing conveyed logging")]
          tubingconveyedlogging,
        /// <summary>
        /// 
        /// </summary>
          cementing,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// cleanout property
        /// </summary>
          [XmlEnum("clean out")]
          cleanout,
        /// <summary>
        /// completionortesting property
        /// </summary>
          [XmlEnum("completion or testing")]
          completionortesting,
        /// <summary>
        /// 
        /// </summary>
          coring,
        /// <summary>
        /// holeopeningorunderreaming property
        /// </summary>
          [XmlEnum("hole opening or underreaming")]
          holeopeningorunderreaming,
        /// <summary>
        /// millingordressingorcutting property
        /// </summary>
          [XmlEnum("milling or dressing or cutting")]
          millingordressingorcutting,
        /// <summary>
        /// wiperorcheckorreaming property
        /// </summary>
          [XmlEnum("wiper or check or reaming")]
          wiperorcheckorreaming,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TubularComponent xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TubularComponent xsd enumeration.")]
        public enum TubularComponentType 
        {
        /// <summary>
        /// nonmagneticstabilizer property
        /// </summary>
          [XmlEnum("non-magnetic stabilizer")]
          nonmagneticstabilizer,
        /// <summary>
        /// nonmagneticcollar property
        /// </summary>
          [XmlEnum("non-magnetic collar")]
          nonmagneticcollar,
        /// <summary>
        /// Drill string component with blades that help keep the drill string away from the sides of the hole.
        /// </summary>
          stabilizer,
        /// <summary>
        /// adjustablekickoff property
        /// </summary>
          [XmlEnum("adjustable kickoff")]
          adjustablekickoff,
        /// <summary>
        /// A downhole tool used in conjunction with a jar that stores energy for rapid release when the jar is fired. Depending on the operating mode, the energy in tension or compression is stored by means of a mechanical spring or compressible fluid such as nitrogen gas.
        /// </summary>
          accelerator,
        /// <summary>
        /// rotarysteeringtool property
        /// </summary>
          [XmlEnum("rotary steering tool")]
          rotarysteeringtool,
        /// <summary>
        /// subbarcatcher property
        /// </summary>
          [XmlEnum("sub-bar catcher")]
          subbarcatcher,
        /// <summary>
        /// subbent property
        /// </summary>
          [XmlEnum("sub-bent")]
          subbent,
        /// <summary>
        /// bitcorediamond property
        /// </summary>
          [XmlEnum("bit core diamond")]
          bitcorediamond,
        /// <summary>
        /// bitcorePDC property
        /// </summary>
          [XmlEnum("bit core PDC")]
          bitcorePDC,
        /// <summary>
        /// bitdiamondfixedcut property
        /// </summary>
          [XmlEnum("bit diamond fixed cut")]
          bitdiamondfixedcut,
        /// <summary>
        /// bitinsertrollercone property
        /// </summary>
          [XmlEnum("bit insert roller cone")]
          bitinsertrollercone,
        /// <summary>
        /// bitmilltoothrollercone property
        /// </summary>
          [XmlEnum("bit mill tooth roller cone")]
          bitmilltoothrollercone,
        /// <summary>
        /// bitPDCfixedcutter property
        /// </summary>
          [XmlEnum("bit PDC fixed cutter")]
          bitPDCfixedcutter,
        /// <summary>
        /// subbit property
        /// </summary>
          [XmlEnum("sub-bit")]
          subbit,
        /// <summary>
        /// bridgeplug property
        /// </summary>
          [XmlEnum("bridge plug")]
          bridgeplug,
        /// <summary>
        /// A blank end component substituting for a bit, when re entering an already existing hole to guide the BHA, to avoid inadvertent sidetracks, such as when run below a hole opener in an existing hole.
        /// </summary>
          bullnose,
        /// <summary>
        /// bullplug property
        /// </summary>
          [XmlEnum("bull plug")]
          bullplug,
        /// <summary>
        /// subbumper property
        /// </summary>
          [XmlEnum("sub-bumper")]
          subbumper,
        /// <summary>
        /// Tubing used to line the wellbore and protect against pressure differences between the wellbore fluids and the formation.
        /// </summary>
          casing,
        /// <summary>
        /// casingcutter property
        /// </summary>
          [XmlEnum("casing cutter")]
          casingcutter,
        /// <summary>
        /// hangercasingsubsea property
        /// </summary>
          [XmlEnum("hanger casing subsea")]
          hangercasingsubsea,
        /// <summary>
        /// hangercasingsurface property
        /// </summary>
          [XmlEnum("hanger casing surface")]
          hangercasingsurface,
        /// <summary>
        /// casinghead property
        /// </summary>
          [XmlEnum("casing head")]
          casinghead,
        /// <summary>
        /// catchassembly property
        /// </summary>
          [XmlEnum("catch assembly")]
          catchassembly,
        /// <summary>
        /// subcatcher property
        /// </summary>
          [XmlEnum("sub-catcher")]
          subcatcher,
        /// <summary>
        /// subcirculation property
        /// </summary>
          [XmlEnum("sub-circulation")]
          subcirculation,
        /// <summary>
        /// coiledtubinginhole property
        /// </summary>
          [XmlEnum("coiled tubing in hole")]
          coiledtubinginhole,
        /// <summary>
        /// coiledtubingoncoil property
        /// </summary>
          [XmlEnum("coiled tubing on coil")]
          coiledtubingoncoil,
        /// <summary>
        /// drillpipecompressive property
        /// </summary>
          [XmlEnum("drill pipe compressive")]
          drillpipecompressive,
        /// <summary>
        /// subcone property
        /// </summary>
          [XmlEnum("sub-cone")]
          subcone,
        /// <summary>
        /// corebarrel property
        /// </summary>
          [XmlEnum("core barrel")]
          corebarrel,
        /// <summary>
        /// coreorientationbarrel property
        /// </summary>
          [XmlEnum("core orientation barrel")]
          coreorientationbarrel,
        /// <summary>
        /// subcrossover property
        /// </summary>
          [XmlEnum("sub-crossover")]
          subcrossover,
        /// <summary>
        /// casingcrossover property
        /// </summary>
          [XmlEnum("casing crossover")]
          casingcrossover,
        /// <summary>
        /// subdart property
        /// </summary>
          [XmlEnum("sub-dart")]
          subdart,
        /// <summary>
        /// diecollar property
        /// </summary>
          [XmlEnum("die collar")]
          diecollar,
        /// <summary>
        /// diecollarLH property
        /// </summary>
          [XmlEnum("die collar LH")]
          diecollarLH,
        /// <summary>
        /// directionalguidancesystem property
        /// </summary>
          [XmlEnum("directional guidance system")]
          directionalguidancesystem,
        /// <summary>
        /// drillcollar property
        /// </summary>
          [XmlEnum("drill collar")]
          drillcollar,
        /// <summary>
        /// drillpipe property
        /// </summary>
          [XmlEnum("drill pipe")]
          drillpipe,
        /// <summary>
        /// drillpipeLH property
        /// </summary>
          [XmlEnum("drill pipe LH")]
          drillpipeLH,
        /// <summary>
        /// drillstemtestBHA property
        /// </summary>
          [XmlEnum("drill stem test BHA")]
          drillstemtestBHA,
        /// <summary>
        /// drivepipe property
        /// </summary>
          [XmlEnum("drive pipe")]
          drivepipe,
        /// <summary>
        /// dualcatchassembly property
        /// </summary>
          [XmlEnum("dual catch assembly")]
          dualcatchassembly,
        /// <summary>
        /// extensionbowlovershot property
        /// </summary>
          [XmlEnum("extension bowl overshot")]
          extensionbowlovershot,
        /// <summary>
        /// extensionsubovershot property
        /// </summary>
          [XmlEnum("extension sub-overshot")]
          extensionsubovershot,
        /// <summary>
        /// floatcollar property
        /// </summary>
          [XmlEnum("float collar")]
          floatcollar,
        /// <summary>
        /// floatshoe property
        /// </summary>
          [XmlEnum("float shoe")]
          floatshoe,
        /// <summary>
        /// subfloat property
        /// </summary>
          [XmlEnum("sub-float")]
          subfloat,
        /// <summary>
        /// flowhead property
        /// </summary>
          [XmlEnum("flow head")]
          flowhead,
        /// <summary>
        /// guideshoe property
        /// </summary>
          [XmlEnum("guide shoe")]
          guideshoe,
        /// <summary>
        /// MWDhangoffsub property
        /// </summary>
          [XmlEnum("MWD hang off sub")]
          MWDhangoffsub,
        /// <summary>
        /// heavyweightdrillpipe property
        /// </summary>
          [XmlEnum("heavy weight drill pipe")]
          heavyweightdrillpipe,
        /// <summary>
        /// heavyweightdrillpipeLH property
        /// </summary>
          [XmlEnum("heavy weight drill pipe LH")]
          heavyweightdrillpipeLH,
        /// <summary>
        /// riserhighpressure property
        /// </summary>
          [XmlEnum("riser high pressure")]
          riserhighpressure,
        /// <summary>
        /// bitholeopener property
        /// </summary>
          [XmlEnum("bit hole opener")]
          bitholeopener,
        /// <summary>
        /// casinginflatablepacker property
        /// </summary>
          [XmlEnum("casing inflatable packer")]
          casinginflatablepacker,
        /// <summary>
        /// motorinstrumented property
        /// </summary>
          [XmlEnum("motor instrumented")]
          motorinstrumented,
        /// <summary>
        /// Hydraulic or spring-loaded component used to free stuck pipe.
        /// </summary>
          jar,
        /// <summary>
        /// subjetting property
        /// </summary>
          [XmlEnum("sub-jetting")]
          subjetting,
        /// <summary>
        /// junkbasket property
        /// </summary>
          [XmlEnum("junk basket")]
          junkbasket,
        /// <summary>
        /// junkbasketreversecirculation property
        /// </summary>
          [XmlEnum("junk basket reverse circulation")]
          junkbasketreversecirculation,
        /// <summary>
        /// subjunk property
        /// </summary>
          [XmlEnum("sub-junk")]
          subjunk,
        /// <summary>
        /// Hexagonal or square pipe used to rotate the drill string from the rig floor.
        /// </summary>
          kelly,
        /// <summary>
        /// keyseatwipertool property
        /// </summary>
          [XmlEnum("keyseat wiper tool")]
          keyseatwipertool,
        /// <summary>
        /// landingfloatcollar property
        /// </summary>
          [XmlEnum("landing float collar")]
          landingfloatcollar,
        /// <summary>
        /// leadimpressionblock property
        /// </summary>
          [XmlEnum("lead impression block")]
          leadimpressionblock,
        /// <summary>
        /// Casing or tubing that is hung from the inside of existing casing rather than from the sea bed or surface.
        /// </summary>
          liner,
        /// <summary>
        /// hangerliner property
        /// </summary>
          [XmlEnum("hanger liner")]
          hangerliner,
        /// <summary>
        /// Magnet used to retrieve magnetic debris from the hole.
        /// </summary>
          magnet,
        /// <summary>
        /// risermarine property
        /// </summary>
          [XmlEnum("riser marine")]
          risermarine,
        /// <summary>
        /// milldress property
        /// </summary>
          [XmlEnum("mill dress")]
          milldress,
        /// <summary>
        /// millflatbottom property
        /// </summary>
          [XmlEnum("mill flat bottom")]
          millflatbottom,
        /// <summary>
        /// millhollow property
        /// </summary>
          [XmlEnum("mill hollow")]
          millhollow,
        /// <summary>
        /// millpolish property
        /// </summary>
          [XmlEnum("mill polish")]
          millpolish,
        /// <summary>
        /// millsection property
        /// </summary>
          [XmlEnum("mill section")]
          millsection,
        /// <summary>
        /// milltaper property
        /// </summary>
          [XmlEnum("mill taper")]
          milltaper,
        /// <summary>
        /// millwashover property
        /// </summary>
          [XmlEnum("mill washover")]
          millwashover,
        /// <summary>
        /// millpackerpickerassembly property
        /// </summary>
          [XmlEnum("mill packer picker assembly")]
          millpackerpickerassembly,
        /// <summary>
        /// milloutextension property
        /// </summary>
          [XmlEnum("millout extension")]
          milloutextension,
        /// <summary>
        /// multilateralhangerrunningtool property
        /// </summary>
          [XmlEnum("multilateral hanger running tool")]
          multilateralhangerrunningtool,
        /// <summary>
        /// hangermudline property
        /// </summary>
          [XmlEnum("hanger mud line")]
          hangermudline,
        /// <summary>
        /// Downhole tool, usually powered by fluid flow, that rotates the drill bit.
        /// </summary>
          motor,
        /// <summary>
        /// muleshoe property
        /// </summary>
          [XmlEnum("mule shoe")]
          muleshoe,
        /// <summary>
        /// loggingwhiledrillingtool property
        /// </summary>
          [XmlEnum("logging while drilling tool")]
          loggingwhiledrillingtool,
        /// <summary>
        /// stabilizernearbitrollerreamer property
        /// </summary>
          [XmlEnum("stabilizer near bit roller reamer")]
          stabilizernearbitrollerreamer,
        /// <summary>
        /// stabilizernearbit property
        /// </summary>
          [XmlEnum("stabilizer near bit")]
          stabilizernearbit,
        /// <summary>
        /// stabilizernonrotating property
        /// </summary>
          [XmlEnum("stabilizer non-rotating")]
          stabilizernonrotating,
        /// <summary>
        /// suborienting property
        /// </summary>
          [XmlEnum("sub-orienting")]
          suborienting,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// Tool used for retrieving pipe that has been lost in the hole.
        /// </summary>
          overshot,
        /// <summary>
        /// overshotLH property
        /// </summary>
          [XmlEnum("overshot LH")]
          overshotLH,
        /// <summary>
        /// oversizelipguideovershot property
        /// </summary>
          [XmlEnum("oversize lip guide overshot")]
          oversizelipguideovershot,
        /// <summary>
        /// Component that can be inflated so that it seals off a section of the wellbore, typically for formation testing.
        /// </summary>
          packer,
        /// <summary>
        /// polishedborereceptacle property
        /// </summary>
          [XmlEnum("polished bore receptacle")]
          polishedborereceptacle,
        /// <summary>
        /// millpilot property
        /// </summary>
          [XmlEnum("mill pilot")]
          millpilot,
        /// <summary>
        /// pipecutter property
        /// </summary>
          [XmlEnum("pipe cutter")]
          pipecutter,
        /// <summary>
        /// portedstinger property
        /// </summary>
          [XmlEnum("ported stinger")]
          portedstinger,
        /// <summary>
        /// subported property
        /// </summary>
          [XmlEnum("sub-ported")]
          subported,
        /// <summary>
        /// prepackedscreens property
        /// </summary>
          [XmlEnum("prepacked screens")]
          prepackedscreens,
        /// <summary>
        /// subpressurerelief property
        /// </summary>
          [XmlEnum("sub-pressure relief")]
          subpressurerelief,
        /// <summary>
        /// riserproduction property
        /// </summary>
          [XmlEnum("riser production")]
          riserproduction,
        /// <summary>
        /// MWDpulser property
        /// </summary>
          [XmlEnum("MWD pulser")]
          MWDpulser,
        /// <summary>
        /// subpumpout property
        /// </summary>
          [XmlEnum("sub-pump out")]
          subpumpout,
        /// <summary>
        /// subrestrictor property
        /// </summary>
          [XmlEnum("sub-restrictor")]
          subrestrictor,
        /// <summary>
        /// packerretrieveTTsqueeze property
        /// </summary>
          [XmlEnum("packer retrieve TT squeeze")]
          packerretrieveTTsqueeze,
        /// <summary>
        /// reversingtool property
        /// </summary>
          [XmlEnum("reversing tool")]
          reversingtool,
        /// <summary>
        /// stabilizerstringrollerreamer property
        /// </summary>
          [XmlEnum("stabilizer string roller reamer")]
          stabilizerstringrollerreamer,
        /// <summary>
        /// packerRTTS property
        /// </summary>
          [XmlEnum("packer RTTS")]
          packerRTTS,
        /// <summary>
        /// runningtool property
        /// </summary>
          [XmlEnum("running tool")]
          runningtool,
        /// <summary>
        /// safetyjoint property
        /// </summary>
          [XmlEnum("safety joint")]
          safetyjoint,
        /// <summary>
        /// safetyjointLH property
        /// </summary>
          [XmlEnum("safety joint LH")]
          safetyjointLH,
        /// <summary>
        /// subsaver property
        /// </summary>
          [XmlEnum("sub-saver")]
          subsaver,
        /// <summary>
        /// scablinerbitguide property
        /// </summary>
          [XmlEnum("scab liner bit guide")]
          scablinerbitguide,
        /// <summary>
        /// 
        /// </summary>
          scraper,
        /// <summary>
        /// A device for cleaning mud and mud filter cake off of the wellbore wall when cementing casing in the hole to ensure good contact and bonding between the cement and the wellbore wall.
        /// </summary>
          scratchers,
        /// <summary>
        /// casingshoescrewin property
        /// </summary>
          [XmlEnum("casing shoe screw-in")]
          casingshoescrewin,
        /// <summary>
        /// subshock property
        /// </summary>
          [XmlEnum("sub-shock")]
          subshock,
        /// <summary>
        /// drillcollarshort property
        /// </summary>
          [XmlEnum("drill collar short")]
          drillcollarshort,
        /// <summary>
        /// subsideentry property
        /// </summary>
          [XmlEnum("sub-side entry")]
          subsideentry,
        /// <summary>
        /// slottedliner property
        /// </summary>
          [XmlEnum("slotted liner")]
          slottedliner,
        /// <summary>
        /// Fishing tool that attaches to the inside of the stuck pipe by threads or grapples.
        /// </summary>
          spear,
        /// <summary>
        /// stagecementcollar property
        /// </summary>
          [XmlEnum("stage cement collar")]
          stagecementcollar,
        /// <summary>
        /// motorsteerable property
        /// </summary>
          [XmlEnum("motor steerable")]
          motorsteerable,
        /// <summary>
        /// packerstormvalveRTTS property
        /// </summary>
          [XmlEnum("packer storm valve RTTS")]
          packerstormvalveRTTS,
        /// <summary>
        /// stabilizerstring property
        /// </summary>
          [XmlEnum("stabilizer string")]
          stabilizerstring,
        /// <summary>
        /// surfacepipe property
        /// </summary>
          [XmlEnum("surface pipe")]
          surfacepipe,
        /// <summary>
        /// tapertap property
        /// </summary>
          [XmlEnum("taper tap")]
          tapertap,
        /// <summary>
        /// tapertapLH property
        /// </summary>
          [XmlEnum("taper tap LH")]
          tapertapLH,
        /// <summary>
        /// tubingconveyedperforatinggun property
        /// </summary>
          [XmlEnum("tubing-conveyed perforating gun")]
          tubingconveyedperforatinggun,
        /// <summary>
        /// Drilling tool used to maintain weight on bit.
        /// </summary>
          thruster,
        /// <summary>
        /// tiebackpolishedborereceptacle property
        /// </summary>
          [XmlEnum("tieback polished bore receptacle")]
          tiebackpolishedborereceptacle,
        /// <summary>
        /// tiebackstinger property
        /// </summary>
          [XmlEnum("tieback stinger")]
          tiebackstinger,
        /// <summary>
        /// Small diameter pipe that is run inside casing or tubing as part of the well completion.
        /// </summary>
          tubing,
        /// <summary>
        /// hangertubing property
        /// </summary>
          [XmlEnum("hanger tubing")]
          hangertubing,
        /// <summary>
        /// Downhole device used for directional drilling, powered by mud circulation that rotates the drill bit while the drill string remains non-rotating
        /// </summary>
          turbine,
        /// <summary>
        /// bitunderreamer property
        /// </summary>
          [XmlEnum("bit under reamer")]
          bitunderreamer,
        /// <summary>
        /// stabilizervariableblade property
        /// </summary>
          [XmlEnum("stabilizer variable blade")]
          stabilizervariableblade,
        /// <summary>
        /// washoverpipe property
        /// </summary>
          [XmlEnum("washover pipe")]
          washoverpipe,
        /// <summary>
        /// millwatermelon property
        /// </summary>
          [XmlEnum("mill watermelon")]
          millwatermelon,
        /// <summary>
        /// Wedge shaped tool used to drill off in a different direction.
        /// </summary>
          whipstock,
        /// <summary>
        /// whipstockanchor property
        /// </summary>
          [XmlEnum("whipstock anchor")]
          whipstockanchor,
        /// <summary>
        /// stabilizerturboback property
        /// </summary>
          [XmlEnum("stabilizer turbo back")]
          stabilizerturboback,
        /// <summary>
        /// stabilizerinline property
        /// </summary>
          [XmlEnum("stabilizer inline")]
          stabilizerinline,
        /// <summary>
        /// stabilizersteerable property
        /// </summary>
          [XmlEnum("stabilizer steerable")]
          stabilizersteerable,
        /// <summary>
        /// substop property
        /// </summary>
          [XmlEnum("sub-stop")]
          substop,
        /// <summary>
        /// subfilter property
        /// </summary>
          [XmlEnum("sub-filter")]
          subfilter,
        /// <summary>
        /// millcasingcutting property
        /// </summary>
          [XmlEnum("mill casing cutting")]
          millcasingcutting,
        /// <summary>
        /// Tool used to enlarge the hole.
        /// </summary>
          reamer,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellControlIncidentType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellControlIncidentType xsd enumeration.")]
        public enum WellControlIncidentType 
        {
        /// <summary>
        /// magneticMWD property
        /// </summary>
          [XmlEnum("magnetic MWD")]
          magneticMWD,
        /// <summary>
        /// gyroscopicMWD property
        /// </summary>
          [XmlEnum("gyroscopic  MWD")]
          gyroscopicMWD,
        /// <summary>
        /// gyroscopicnorthseeking property
        /// </summary>
          [XmlEnum("gyroscopic north seeking")]
          gyroscopicnorthseeking,
        /// <summary>
        /// gyroscopicinertial property
        /// </summary>
          [XmlEnum("gyroscopic inertial")]
          gyroscopicinertial,
        /// <summary>
        /// magneticsingleshot property
        /// </summary>
          [XmlEnum("magnetic single-shot")]
          magneticsingleshot,
        /// <summary>
        /// magneticmultipleshot property
        /// </summary>
          [XmlEnum("magnetic multiple-shot")]
          magneticmultipleshot,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown,
        /// <summary>
        /// shallowgaskick property
        /// </summary>
          [XmlEnum("shallow gas kick")]
          shallowgaskick,
        /// <summary>
        /// waterkick property
        /// </summary>
          [XmlEnum("water kick")]
          waterkick,
        /// <summary>
        /// oilkick property
        /// </summary>
          [XmlEnum("oil kick")]
          oilkick,
        /// <summary>
        /// gaskick property
        /// </summary>
          [XmlEnum("gas kick")]
          gaskick,
        /// <summary>
        /// unknown1 property
        /// </summary>
          [XmlEnum("unknown")]
          unknown1
        }
        /// <summary>
        /// This class represents the WellDirection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellDirection xsd enumeration.")]
        public enum WellDirection 
        {
        /// <summary>
        /// huffnpuff property
        /// </summary>
          [XmlEnum("huff-n-puff")]
          huffnpuff,
        /// <summary>
        /// The well facility is injecting fluids into the subsurface.
        /// </summary>
          injector,
        /// <summary>
        /// The well facility is producing fluids from the subsurface.
        /// </summary>
          producer,
        /// <summary>
        /// The flow direction of the fluids is variable, but not on a regular basis as is the case with the huff-n-puff flow.
        /// </summary>
          uncertain,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellFluid xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellFluid xsd enumeration.")]
        public enum WellFluid 
        {
        /// <summary>
        /// This is generally an injected fluid.
        /// </summary>
          air,
        /// <summary>
        /// Liquid hydrocarbons produced with natural gas that are separated from the gas by cooling and various other means. Condensate generally has an API gravity of 50 degrees to 120 degrees and is water white, straw, or bluish in color. It is the liquid recovery from a well classified as a gas well. It is generally dissolved in the gaseous state under reservoir conditions but separates as a liquid either in passing up the hole or at the surface. These hydrocarbons, from associated and nonassociated gas well gas, normally are recovered from lease separators or field facilities by mechanical separation.
        /// </summary>
          condensate,
        /// <summary>
        /// The well facility is classified as a dry well. It has not been, nor will it be used to produce or inject any fluids.
        /// </summary>
          dry,
        /// <summary>
        /// The well is classified as a gas well, producing or injecting a hydrocarbon gas. The gas is generally methane, but may have a mixture of other gases also.
        /// </summary>
          gas,
        /// <summary>
        /// gaswater property
        /// </summary>
          [XmlEnum("gas-water")]
          gaswater,
        /// <summary>
        /// nonHCgas property
        /// </summary>
          [XmlEnum("non HC gas")]
          nonHCgas,
        /// <summary>
        /// nonHCgasCO2 property
        /// </summary>
          [XmlEnum("non HC gas -- CO2")]
          nonHCgasCO2,
        /// <summary>
        /// The liquid hydrocarbon, generally referred to as crude oil.
        /// </summary>
          oil,
        /// <summary>
        /// oilgas property
        /// </summary>
          [XmlEnum("oil-gas")]
          oilgas,
        /// <summary>
        /// oilwater property
        /// </summary>
          [XmlEnum("oil-water")]
          oilwater,
        /// <summary>
        /// The gaseous state of water. This is generally an injected fluid, but it is possible that some hydrothermal wells produce steam.
        /// </summary>
          steam,
        /// <summary>
        /// The well is classified as a water well without distinguishing between brine or fresh water.
        /// </summary>
          water,
        /// <summary>
        /// waterbrine property
        /// </summary>
          [XmlEnum("water -- brine")]
          waterbrine,
        /// <summary>
        /// waterfreshwater property
        /// </summary>
          [XmlEnum("water -- fresh water")]
          waterfreshwater,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellKillingProcedureType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellKillingProcedureType xsd enumeration.")]
        public enum WellKillingProcedureType 
        {
        /// <summary>
        /// drillersmethod property
        /// </summary>
          [XmlEnum("drillers method")]
          drillersmethod,
        /// <summary>
        /// waitandweight property
        /// </summary>
          [XmlEnum("wait and weight")]
          waitandweight,
        /// <summary>
        /// A well killing procedure that is prescribing pumping of kill weight fluid down the tubing and forcing the wellbore fluids back into the formation through the perforations.
        /// </summary>
          bullheading,
        /// <summary>
        /// lubricateandbleed property
        /// </summary>
          [XmlEnum("lubricate and bleed")]
          lubricateandbleed,
        /// <summary>
        /// forwardcirculation property
        /// </summary>
          [XmlEnum("forward circulation")]
          forwardcirculation,
        /// <summary>
        /// reversecirculation property
        /// </summary>
          [XmlEnum("reverse circulation")]
          reversecirculation,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellNamingSystem xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellNamingSystem xsd enumeration.")]
        public enum WellNamingSystem 
        {
        /// <summary>
        /// United Kingdom Department of Trade and Industry
        /// </summary>
          DTI,
        /// <summary>
        /// American Petroleum Institute well number (10,12 or 14 digits).
        /// </summary>
          API,
        /// <summary>
        /// NPDcode property
        /// </summary>
          [XmlEnum("NPD code")]
          NPDcode,
        /// <summary>
        /// NPDnumber property
        /// </summary>
          [XmlEnum("NPD number")]
          NPDnumber,
        /// <summary>
        /// localfield property
        /// </summary>
          [XmlEnum("local field")]
          localfield,
        /// <summary>
        /// A name assigned to a prospect - a well that has not yet been drilled.
        /// </summary>
          prospect,
        /// <summary>
        /// The naming system is not known.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellTestType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellTestType xsd enumeration.")]
        public enum WellTestType 
        {
        /// <summary>
        /// drillstemtest property
        /// </summary>
          [XmlEnum("drill stem test")]
          drillstemtest,
        /// <summary>
        /// productiontest property
        /// </summary>
          [XmlEnum("production test")]
          productiontest,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellboreShape xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellboreShape xsd enumeration.")]
        public enum WellboreShape 
        {
        /// <summary>
        /// buildandhold property
        /// </summary>
          [XmlEnum("build and hold")]
          buildandhold,
        /// <summary>
        /// A wellbore that significantly departs from vertical with respect to the surface location.
        /// </summary>
          deviated,
        /// <summary>
        /// doublekickoff property
        /// </summary>
          [XmlEnum("double kickoff")]
          doublekickoff,
        /// <summary>
        /// A wellbore whose path deviates from the vertical by at least 75 degrees.
        /// </summary>
          horizontal,
        /// <summary>
        /// Sshaped property
        /// </summary>
          [XmlEnum("S-shaped")]
          Sshaped,
        /// <summary>
        /// A wellbore that is nearly vertical with respect to the surface location.
        /// </summary>
          vertical,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellboreType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellboreType xsd enumeration.")]
        public enum WellboreType 
        {
        /// <summary>
        /// The original wellbore had to be abandoned before its final usage. This wellbore is being drilled as a different wellbore, but one which has the same target as the one that was abandoned.
        /// </summary>
          bypass,
        /// <summary>
        /// This is the first wellbore that has been drilled, or attempted, in a given well.
        /// </summary>
          initial,
        /// <summary>
        /// The wellbore is being redrilled.
        /// </summary>
          redrill,
        /// <summary>
        /// The wellbore is being reentered after a period of abandonment.
        /// </summary>
          reentry,
        /// <summary>
        /// The wellbore is part of an existing regulatory well. The original borehole did not reach the target depth. This borehole required the well to be respudded (drilled from a different surface position).
        /// </summary>
          respud,
        /// <summary>
        /// The wellbore is a deviation from a given wellbore, that produces a different borehole from the others, and whose bottomhole differs from any previously extisting wellbore bottomholes.
        /// </summary>
          sidetrack,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellPurpose xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellPurpose xsd enumeration.")]
        public enum WellPurpose 
        {
        /// <summary>
        /// A well drilled into a formation shown to be potentially productive of oil or gas by an earlier well for the purpose of obtaining more information about the reservoir. Also known as a delineation well.
        /// </summary>
          appraisal,
        /// <summary>
        /// appraisalconfirmationappraisal property
        /// </summary>
          [XmlEnum("appraisal -- confirmation appraisal")]
          appraisalconfirmationappraisal,
        /// <summary>
        /// appraisalexploratoryappraisal property
        /// </summary>
          [XmlEnum("appraisal -- exploratory appraisal")]
          appraisalexploratoryappraisal,
        /// <summary>
        /// An exploratory well drilled in an unproved area to test for a new field, a new pay, a deeper reservoir, or a shallower reservoir. Also known as a wildcat.
        /// </summary>
          exploration,
        /// <summary>
        /// explorationdeeperpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- deeper-pool wildcat")]
          explorationdeeperpoolwildcat,
        /// <summary>
        /// explorationnewfieldwildcat property
        /// </summary>
          [XmlEnum("exploration -- new-field wildcat")]
          explorationnewfieldwildcat,
        /// <summary>
        /// explorationnewpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- new-pool wildcat")]
          explorationnewpoolwildcat,
        /// <summary>
        /// explorationoutpostwildcat property
        /// </summary>
          [XmlEnum("exploration -- outpost wildcat")]
          explorationoutpostwildcat,
        /// <summary>
        /// explorationshallowerpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- shallower-pool wildcat")]
          explorationshallowerpoolwildcat,
        /// <summary>
        /// A well drilled in a zone in an area already proved productive.
        /// </summary>
          development,
        /// <summary>
        /// developmentinfilldevelopment property
        /// </summary>
          [XmlEnum("development -- infill development")]
          developmentinfilldevelopment,
        /// <summary>
        /// developmentinjector property
        /// </summary>
          [XmlEnum("development -- injector")]
          developmentinjector,
        /// <summary>
        /// developmentproducer property
        /// </summary>
          [XmlEnum("development -- producer")]
          developmentproducer,
        /// <summary>
        /// fluidstorage property
        /// </summary>
          [XmlEnum("fluid storage")]
          fluidstorage,
        /// <summary>
        /// fluidstoragegasstorage property
        /// </summary>
          [XmlEnum("fluid storage -- gas storage")]
          fluidstoragegasstorage,
        /// <summary>
        /// generalsrvc property
        /// </summary>
          [XmlEnum("general srvc")]
          generalsrvc,
        /// <summary>
        /// generalsrvcboreholereacquisition property
        /// </summary>
          [XmlEnum("general srvc -- borehole re-acquisition")]
          generalsrvcboreholereacquisition,
        /// <summary>
        /// generalsrvcobservation property
        /// </summary>
          [XmlEnum("general srvc -- observation")]
          generalsrvcobservation,
        /// <summary>
        /// generalsrvcrelief property
        /// </summary>
          [XmlEnum("general srvc -- relief")]
          generalsrvcrelief,
        /// <summary>
        /// generalsrvcresearch property
        /// </summary>
          [XmlEnum("general srvc -- research")]
          generalsrvcresearch,
        /// <summary>
        /// generalsrvcresearchdrilltest property
        /// </summary>
          [XmlEnum("general srvc -- research -- drill test")]
          generalsrvcresearchdrilltest,
        /// <summary>
        /// generalsrvcresearchstrattest property
        /// </summary>
          [XmlEnum("general srvc -- research -- strat test")]
          generalsrvcresearchstrattest,
        /// <summary>
        /// generalsrvcwastedisposal property
        /// </summary>
          [XmlEnum("general srvc -- waste disposal")]
          generalsrvcwastedisposal,
        /// <summary>
        /// A non-oil and gas E and P well drilled for the purpose of locating and/or extracting a mineral from the subsurface, usually through the injection and/or extraction of mineral-bearing fluids.
        /// </summary>
          mineral,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellStatus xsd enumeration.")]
        public enum WellStatus 
        {
        /// <summary>
        /// The status of a facility in which drilling, completion, and production operations have been permanently terminated.
        /// </summary>
          abandoned,
        /// <summary>
        /// For a well to be active, at least one of its wellbores must be active. For a wellbore to be active, at least one of its completions must be actively producing or injecting fluids.
        /// </summary>
          active,
        /// <summary>
        /// activeinjecting property
        /// </summary>
          [XmlEnum("active -- injecting")]
          activeinjecting,
        /// <summary>
        /// activeproducing property
        /// </summary>
          [XmlEnum("active -- producing")]
          activeproducing,
        /// <summary>
        /// The completion has been installed, but the facility is not yet active. This status is appropriate only before the initial producing or injecting activity.
        /// </summary>
          completed,
        /// <summary>
        /// The status of a well or wellbore in which drilling operations have begun, but are not yet completed. The status ends when another status becomes appropriate.
        /// </summary>
          drilling,
        /// <summary>
        /// partiallyplugged property
        /// </summary>
          [XmlEnum("partially plugged")]
          partiallyplugged,
        /// <summary>
        /// The facility has received regulatory approvel, but drilling has not yet commenced. For a well, it has been spudded. For a subsequent wellbore, the whipstock or similar device has not yet been set.
        /// </summary>
          permitted,
        /// <summary>
        /// pluggedandabandoned property
        /// </summary>
          [XmlEnum("plugged and abandoned")]
          pluggedandabandoned,
        /// <summary>
        /// The status of a well or wellbore from conception to either regulatory approval or commencement of drilling.
        /// </summary>
          proposed,
        /// <summary>
        /// The facility has been sold, so it is no longer appropriate to keep a close internal status value. Status values may be added at later times without changing the sold status.
        /// </summary>
          sold,
        /// <summary>
        /// Production or injection has been temporarily suspended in a manner that will allow immediate resumption of activities.
        /// </summary>
          suspended,
        /// <summary>
        /// temporarilyabandoned property
        /// </summary>
          [XmlEnum("temporarily abandoned")]
          temporarilyabandoned,
        /// <summary>
        /// The facility operations are suspended while tests are being conducted to determine formation and/or reservoir properties. For example, a drillstem test. This status also includes extended testing.
        /// </summary>
          testing,
        /// <summary>
        /// Information about the status of the well is confidential. This is more explicit than unknown, since it gives the reason that the status value is unknown.
        /// </summary>
          tight,
        /// <summary>
        /// workingover property
        /// </summary>
          [XmlEnum("working over")]
          workingover,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
    }
    #endregion
}