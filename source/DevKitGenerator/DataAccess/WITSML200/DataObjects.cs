
//This code was generated using the Energistics Generator tool.  Direct changes to this code will be lost
//during regeneration.

using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

using Energistics.DataAccess.WITSML200.ComponentSchemas;
using Energistics.DataAccess.WITSML200.ReferenceData;
using Energistics.DataAccess.Reflection;
using Energistics.DataAccess.Validation;

namespace Energistics.DataAccess.WITSML200
{
    #region Classes
    /// <summary>
    /// This class represents the AbstractObject xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarkerSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreCompletion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellCompletion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToolErrorTermSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimJobStage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimPerforationCluster))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimJob))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Risk))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Rig))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CuttingsGeology))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InterpretedGeology))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ShowEvaluation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreGeology))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DepthRegImage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellCMLedger))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OpsReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Trajectory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToolErrorModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DownholeComponent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJob))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJobEvaluation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Log))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Channel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChannelSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BhaRun))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidsReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DrillReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Tubular))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Attachment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Wellbore))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Well))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataAssuranceRecord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKindDictionary))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKind))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EpcExternalPartReference))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDataObject", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[Description("This class represents the AbstractObject xsd type.")]
    public abstract partial class AbstractObject : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Aliases property
        /// </summary>
		[RecurringElement]
		[XmlElement("Aliases")]
        public List<ObjectAlias> Aliases {
            get {
                return AliasesField;
            } 
            set {
                AliasesField = value;
                NotifyPropertyChanged("Aliases");
            }
        }

         [XmlIgnore]
         public bool AliasesSpecified
         {
            get {
             if(AliasesField!=null)
                return AliasesField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ObjectAlias> AliasesField; 

        /// <summary>
        /// Citation property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// CustomData property
        /// </summary>
		
		[XmlElement("CustomData")]
        public CustomData CustomData {
            get {
                return CustomDataField;
            } 
            set {
                CustomDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData CustomDataField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// objectVersion property
        /// </summary>
		[StringLength(64)]
        [XmlAttribute("objectVersion")]
		
        public String ObjectVersion {
            get {
                return objectVersionField;
            } 
            set {
                objectVersionField = value;
                NotifyPropertyChanged("ObjectVersion");
            }
        }

        private String objectVersionField; 

		/// <summary>
        /// schemaVersion property
        /// </summary>
		[Required]
        [StringLength(64)]
        [XmlAttribute("schemaVersion")]
		
        public String SchemaVersion {
            get {
                return schemaVersionField;
            } 
            set {
                schemaVersionField = value;
                NotifyPropertyChanged("SchemaVersion");
            }
        }

        private String schemaVersionField; 

		/// <summary>
        /// uuid property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [XmlAttribute("uuid")]
		
        public String Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private String uuidField; 

		/// <summary>
        /// existenceKind property
        /// </summary>
		[Description("A list of lifecycle states like actual, required, planned, predicted, etc. These are used to qualify any top-level element (from Epicentre 2.1).")]
        [XmlAttribute("existenceKind")]
		
        public ExistenceKind ExistenceKind {
            get {
                return existenceKindField;
            } 
            set {
                existenceKindField = value;
             if(value!=null) 
                 this.ExistenceKindSpecified = true;
                NotifyPropertyChanged("ExistenceKind");
            }
        }

        private ExistenceKind existenceKindField; 

        /// <summary>
        /// existenceKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ExistenceKindSpecified {
            get {
                return existenceKindSpecifiedField;
            } 
            set {
                existenceKindSpecifiedField = value;
                NotifyPropertyChanged("ExistenceKindSpecified");
            }
        }

        private Boolean existenceKindSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ObjectAlias xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ObjectAlias", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ObjectAlias xsd type.")]
    public partial class ObjectAlias : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Identifier property
        /// </summary>
		[Required]
        [StringLength(64)]
		[XmlElement("Identifier")]
        public String Identifier {
            get {
                return IdentifierField;
            } 
            set {
                IdentifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

        private String IdentifierField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

		/// <summary>
        /// authority property
        /// </summary>
		[StringLength(64)]
        [XmlAttribute("authority")]
		
        public String Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private String authorityField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GravelPackInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GravelPackInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GravelPackInterval xsd type.")]
    public partial class GravelPackInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DownholeStringReferenceId property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to the downhole string that denotes the interval of the gravel pack.")]
		[XmlElement("DownholeStringReferenceId")]
        public String DownholeStringReferenceId {
            get {
                return DownholeStringReferenceIdField;
            } 
            set {
                DownholeStringReferenceIdField = value;
                NotifyPropertyChanged("DownholeStringReferenceId");
            }
        }

        private String DownholeStringReferenceIdField; 

        /// <summary>
        /// GravelPackMdInterval property
        /// </summary>
		[Description("Gravel packed measured depth interval for this completion.")]
        [ComponentElement]
		[XmlElement("GravelPackMdInterval")]
        public MdInterval GravelPackMDInterval {
            get {
                return GravelPackMdIntervalField;
            } 
            set {
                GravelPackMdIntervalField = value;
                NotifyPropertyChanged("GravelPackMDInterval");
            }
        }

        private MdInterval GravelPackMdIntervalField; 

        /// <summary>
        /// GravelPackTvdInterval property
        /// </summary>
		[Description("Gravel packed true vertical depth interval for this completion.")]
        [ComponentElement]
		[XmlElement("GravelPackTvdInterval")]
        public TvdInterval GravelPackTvdInterval {
            get {
                return GravelPackTvdIntervalField;
            } 
            set {
                GravelPackTvdIntervalField = value;
                NotifyPropertyChanged("GravelPackTvdInterval");
            }
        }

        private TvdInterval GravelPackTvdIntervalField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
		[XmlElement("EventHistory")]
        public EventInfo EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo EventHistoryField; 

        /// <summary>
        /// GeologyFeatureReferenceId property
        /// </summary>
		[Description("Reference to a geology feature")]
        [RecurringElement]
		[XmlElement("GeologyFeatureReferenceId")]
        public List<String> GeologyFeatureReferenceId {
            get {
                return GeologyFeatureReferenceIdField;
            } 
            set {
                GeologyFeatureReferenceIdField = value;
                NotifyPropertyChanged("GeologyFeatureReferenceId");
            }
        }

         [XmlIgnore]
         public bool GeologyFeatureReferenceIdSpecified
         {
            get {
             if(GeologyFeatureReferenceIdField!=null)
                return GeologyFeatureReferenceIdField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> GeologyFeatureReferenceIdField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// StatusHistory property
        /// </summary>
		[RecurringElement]
		[XmlElement("StatusHistory")]
        public List<IntervalStatusHistory> StatusHistory {
            get {
                return StatusHistoryField;
            } 
            set {
                StatusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         [XmlIgnore]
         public bool StatusHistorySpecified
         {
            get {
             if(StatusHistoryField!=null)
                return StatusHistoryField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IntervalStatusHistory> StatusHistoryField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of GravelPackInterval")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MdInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MdInterval", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MdInterval xsd type.")]
    public partial class MdInterval : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// MdTop property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("MdTop")]
        public LengthMeasure MDTop {
            get {
                return MdTopField;
            } 
            set {
                MdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private LengthMeasure MdTopField; 

        /// <summary>
        /// MdBase property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("MdBase")]
        public LengthMeasure MDBase {
            get {
                return MdBaseField;
            } 
            set {
                MdBaseField = value;
                NotifyPropertyChanged("MDBase");
            }
        }

        private LengthMeasure MdBaseField; 

		/// <summary>
        /// datum property
        /// </summary>
		[StringLength(64)]
        [XmlAttribute("datum")]
		
        public String Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private String datumField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthMeasure xsd type.")]
    public partial class LengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        public LengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthMeasure(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TvdInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TvdInterval", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TvdInterval xsd type.")]
    public partial class TvdInterval : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// TvdTop property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("TvdTop")]
        public LengthMeasure TvdTop {
            get {
                return TvdTopField;
            } 
            set {
                TvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private LengthMeasure TvdTopField; 

        /// <summary>
        /// TvdBase property
        /// </summary>
		[Required]
        [Description("True vertical depth at the base of the interval")]
        [ComponentElement]
		[XmlElement("TvdBase")]
        public LengthMeasure TvdBase {
            get {
                return TvdBaseField;
            } 
            set {
                TvdBaseField = value;
                NotifyPropertyChanged("TvdBase");
            }
        }

        private LengthMeasure TvdBaseField; 

		/// <summary>
        /// datum property
        /// </summary>
		[StringLength(64)]
        [XmlAttribute("datum")]
		
        public String Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private String datumField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EventInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EventInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the EventInfo xsd type.")]
    public partial class EventInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// BeginEvent property
        /// </summary>
		[ComponentElement]
		[XmlElement("BeginEvent")]
        public EventRefInfo BeginEvent {
            get {
                return BeginEventField;
            } 
            set {
                BeginEventField = value;
                NotifyPropertyChanged("BeginEvent");
            }
        }

        private EventRefInfo BeginEventField; 

        /// <summary>
        /// EndEvent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EndEvent")]
        public EventRefInfo EndEvent {
            get {
                return EndEventField;
            } 
            set {
                EndEventField = value;
                NotifyPropertyChanged("EndEvent");
            }
        }

        private EventRefInfo EndEventField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ExtensionNameValue xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ExtensionNameValue", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ExtensionNameValue xsd type.")]
    public partial class ExtensionNameValue : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ExtensionNameValue class.
        /// </summary>
        public ExtensionNameValue() {}

        /// <summary>
        /// Initializes a new instance of the ExtensionNameValue class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public ExtensionNameValue(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size.  For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the  WITSML SIG Technical Team before use.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("The value of the extension. This may also include a uom attribute. The content should conform to constraints defined by the data type.")]
		[XmlElement("Value")]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 

        /// <summary>
        /// MeasureClass property
        /// </summary>
		[StringLength(40)]
        [Description("The kind of the measure. For example, \"length\". This should be specified if the value requires a unit of measure.")]
		[XmlElement("MeasureClass")]
        public String MeasureClass {
            get {
                return MeasureClassField;
            } 
            set {
                MeasureClassField = value;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private String MeasureClassField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date-time associated with the value.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Index property
        /// </summary>
		[Description("Indexes things with the same name.  That is, 1 indicates the first one, 2 incidates the second one, etc.")]
		[XmlElement("Index")]
        public Int32? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
             if(value!=null) 
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private Int32? IndexField; 

        /// <summary>
        /// IndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IndexSpecified {
            get {
                return IndexSpecifiedField;
            } 
            set {
                IndexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private Boolean IndexSpecifiedField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of the extension.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EventRefInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EventRefInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the EventRefInfo xsd type.")]
    public partial class EventRefInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EventReferenceId property
        /// </summary>
		[StringLength(64)]
        [Description("The referencing eventledger ID")]
		[XmlElement("EventReferenceId")]
        public String EventReferenceId {
            get {
                return EventReferenceIdField;
            } 
            set {
                EventReferenceIdField = value;
                NotifyPropertyChanged("EventReferenceId");
            }
        }

        private String EventReferenceIdField; 

        /// <summary>
        /// EventDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("install/pull date")]
		[XmlElement("EventDate")]
        public String EventDate {
            get {
                return EventDateField;
            } 
            set {
                EventDateField = value;
                NotifyPropertyChanged("EventDate");
            }
        }

        private String EventDateField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntervalStatusHistory xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntervalStatusHistory", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IntervalStatusHistory xsd type.")]
    public partial class IntervalStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// PhysicalStatus property
        /// </summary>
		[Description("The physical status of an interval (e.g., open, closed, proposed)")]
		[XmlElement("PhysicalStatus")]
        public String PhysicalStatus {
            get {
                return PhysicalStatusField;
            } 
            set {
                PhysicalStatusField = value;
                NotifyPropertyChanged("PhysicalStatus");
            }
        }

        private String PhysicalStatusField; 

        /// <summary>
        /// StartDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The start date of status and allocation factor")]
		[XmlElement("StartDate")]
        public String StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                NotifyPropertyChanged("StartDate");
            }
        }

        private String StartDateField; 

        /// <summary>
        /// EndDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The end date of status and allocation factor")]
		[XmlElement("EndDate")]
        public String EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                NotifyPropertyChanged("EndDate");
            }
        }

        private String EndDateField; 

        /// <summary>
        /// StatusMdInterval property
        /// </summary>
		[Description("Measured depth interval over which this status is valid for the given time frame.")]
        [ComponentElement]
		[XmlElement("StatusMdInterval")]
        public MdInterval StatusMDInterval {
            get {
                return StatusMdIntervalField;
            } 
            set {
                StatusMdIntervalField = value;
                NotifyPropertyChanged("StatusMDInterval");
            }
        }

        private MdInterval StatusMdIntervalField; 

        /// <summary>
        /// AllocationFactor property
        /// </summary>
		[Description("defines the proportional amount of fluid from the well completion  that is flowing through this interval whithin a wellbore")]
		[XmlElement("AllocationFactor")]
        public Double? AllocationFactor {
            get {
                return AllocationFactorField;
            } 
            set {
                AllocationFactorField = value;
             if(value!=null) 
                 this.AllocationFactorSpecified = true;
                NotifyPropertyChanged("AllocationFactor");
            }
        }

        private Double? AllocationFactorField; 

        /// <summary>
        /// AllocationFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AllocationFactorSpecified {
            get {
                return AllocationFactorSpecifiedField;
            } 
            set {
                AllocationFactorSpecifiedField = value;
                NotifyPropertyChanged("AllocationFactorSpecified");
            }
        }

        private Boolean AllocationFactorSpecifiedField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A remark about the interval over this period of time")]
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IntervalStatusHistory")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerforationStatusHistory xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerforationStatusHistory", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerforationStatusHistory xsd type.")]
    public partial class PerforationStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// PerforationStatus property
        /// </summary>
		[Description("perforation status")]
		[XmlElement("PerforationStatus")]
        public String PerforationStatus {
            get {
                return PerforationStatusField;
            } 
            set {
                PerforationStatusField = value;
                NotifyPropertyChanged("PerforationStatus");
            }
        }

        private String PerforationStatusField; 

        /// <summary>
        /// StartDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("the start date of status")]
		[XmlElement("StartDate")]
        public String StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                NotifyPropertyChanged("StartDate");
            }
        }

        private String StartDateField; 

        /// <summary>
        /// EndDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("the end date of status")]
		[XmlElement("EndDate")]
        public String EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                NotifyPropertyChanged("EndDate");
            }
        }

        private String EndDateField; 

        /// <summary>
        /// PerforationMdInterval property
        /// </summary>
		[Description("Overall measured depth interval for this perforated interval..")]
        [ComponentElement]
		[XmlElement("PerforationMdInterval")]
        public MdInterval PerforationMDInterval {
            get {
                return PerforationMdIntervalField;
            } 
            set {
                PerforationMdIntervalField = value;
                NotifyPropertyChanged("PerforationMDInterval");
            }
        }

        private MdInterval PerforationMdIntervalField; 

        /// <summary>
        /// PerforationTvdInterval property
        /// </summary>
		[Description("Overall true vertical depth interval for this perforated interval.")]
        [ComponentElement]
		[XmlElement("PerforationTvdInterval")]
        public TvdInterval PerforationTvdInterval {
            get {
                return PerforationTvdIntervalField;
            } 
            set {
                PerforationTvdIntervalField = value;
                NotifyPropertyChanged("PerforationTvdInterval");
            }
        }

        private TvdInterval PerforationTvdIntervalField; 

        /// <summary>
        /// AllocationFactor property
        /// </summary>
		[Description("defines the proportional amount of fluid from the well completion  that is flowing through this interval whithin a wellbore")]
		[XmlElement("AllocationFactor")]
        public Double? AllocationFactor {
            get {
                return AllocationFactorField;
            } 
            set {
                AllocationFactorField = value;
             if(value!=null) 
                 this.AllocationFactorSpecified = true;
                NotifyPropertyChanged("AllocationFactor");
            }
        }

        private Double? AllocationFactorField; 

        /// <summary>
        /// AllocationFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AllocationFactorSpecified {
            get {
                return AllocationFactorSpecifiedField;
            } 
            set {
                AllocationFactorSpecifiedField = value;
                NotifyPropertyChanged("AllocationFactorSpecified");
            }
        }

        private Boolean AllocationFactorSpecifiedField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("The description about the status")]
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of PerforationStatusHistory")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerforationSetInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerforationSetInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerforationSetInterval xsd type.")]
    public partial class PerforationSetInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// PerforationSetReferenceId property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to perforation set")]
		[XmlElement("PerforationSetReferenceId")]
        public String PerforationSetReferenceId {
            get {
                return PerforationSetReferenceIdField;
            } 
            set {
                PerforationSetReferenceIdField = value;
                NotifyPropertyChanged("PerforationSetReferenceId");
            }
        }

        private String PerforationSetReferenceIdField; 

        /// <summary>
        /// PerforationSetMdInterval property
        /// </summary>
		[Description("Overall measured depth interval for this perforation set.")]
        [ComponentElement]
		[XmlElement("PerforationSetMdInterval")]
        public MdInterval PerforationSetMDInterval {
            get {
                return PerforationSetMdIntervalField;
            } 
            set {
                PerforationSetMdIntervalField = value;
                NotifyPropertyChanged("PerforationSetMDInterval");
            }
        }

        private MdInterval PerforationSetMdIntervalField; 

        /// <summary>
        /// PerforationSetTvdInterval property
        /// </summary>
		[Description("Overall true vertical depth interval for this perforation set.")]
        [ComponentElement]
		[XmlElement("PerforationSetTvdInterval")]
        public TvdInterval PerforationSetTvdInterval {
            get {
                return PerforationSetTvdIntervalField;
            } 
            set {
                PerforationSetTvdIntervalField = value;
                NotifyPropertyChanged("PerforationSetTvdInterval");
            }
        }

        private TvdInterval PerforationSetTvdIntervalField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
		[XmlElement("EventHistory")]
        public EventInfo EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo EventHistoryField; 

        /// <summary>
        /// GeologyFeatureReferenceId property
        /// </summary>
		[Description("Reference to a geology feature")]
        [RecurringElement]
		[XmlElement("GeologyFeatureReferenceId")]
        public List<String> GeologyFeatureReferenceId {
            get {
                return GeologyFeatureReferenceIdField;
            } 
            set {
                GeologyFeatureReferenceIdField = value;
                NotifyPropertyChanged("GeologyFeatureReferenceId");
            }
        }

         [XmlIgnore]
         public bool GeologyFeatureReferenceIdSpecified
         {
            get {
             if(GeologyFeatureReferenceIdField!=null)
                return GeologyFeatureReferenceIdField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> GeologyFeatureReferenceIdField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// PerforationStatusHistory property
        /// </summary>
		[RecurringElement]
		[XmlElement("PerforationStatusHistory")]
        public List<PerforationStatusHistory> PerforationStatusHistory {
            get {
                return PerforationStatusHistoryField;
            } 
            set {
                PerforationStatusHistoryField = value;
                NotifyPropertyChanged("PerforationStatusHistory");
            }
        }

         [XmlIgnore]
         public bool PerforationStatusHistorySpecified
         {
            get {
             if(PerforationStatusHistoryField!=null)
                return PerforationStatusHistoryField.Count>0?true:false;
             else return false;
            } 
         }
        private List<PerforationStatusHistory> PerforationStatusHistoryField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of PerforationSetInterval")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OpenHoleInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OpenHoleInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the OpenHoleInterval xsd type.")]
    public partial class OpenHoleInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// BoreholeStringReferenceId property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to borehole String")]
		[XmlElement("BoreholeStringReferenceId")]
        public String BoreholeStringReferenceId {
            get {
                return BoreholeStringReferenceIdField;
            } 
            set {
                BoreholeStringReferenceIdField = value;
                NotifyPropertyChanged("BoreholeStringReferenceId");
            }
        }

        private String BoreholeStringReferenceIdField; 

        /// <summary>
        /// OpenHoleMdInterval property
        /// </summary>
		[Description("Open hole measured depth interval for this completion.")]
        [ComponentElement]
		[XmlElement("OpenHoleMdInterval")]
        public MdInterval OpenHoleMDInterval {
            get {
                return OpenHoleMdIntervalField;
            } 
            set {
                OpenHoleMdIntervalField = value;
                NotifyPropertyChanged("OpenHoleMDInterval");
            }
        }

        private MdInterval OpenHoleMdIntervalField; 

        /// <summary>
        /// OpenHoleTvdInterval property
        /// </summary>
		[Description("Open hole true vertical depth interval for this completion.")]
        [ComponentElement]
		[XmlElement("OpenHoleTvdInterval")]
        public TvdInterval OpenHoleTvdInterval {
            get {
                return OpenHoleTvdIntervalField;
            } 
            set {
                OpenHoleTvdIntervalField = value;
                NotifyPropertyChanged("OpenHoleTvdInterval");
            }
        }

        private TvdInterval OpenHoleTvdIntervalField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
		[XmlElement("EventHistory")]
        public EventInfo EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo EventHistoryField; 

        /// <summary>
        /// GeologyFeatureReferenceId property
        /// </summary>
		[Description("Reference to a geology feature")]
        [RecurringElement]
		[XmlElement("GeologyFeatureReferenceId")]
        public List<String> GeologyFeatureReferenceId {
            get {
                return GeologyFeatureReferenceIdField;
            } 
            set {
                GeologyFeatureReferenceIdField = value;
                NotifyPropertyChanged("GeologyFeatureReferenceId");
            }
        }

         [XmlIgnore]
         public bool GeologyFeatureReferenceIdSpecified
         {
            get {
             if(GeologyFeatureReferenceIdField!=null)
                return GeologyFeatureReferenceIdField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> GeologyFeatureReferenceIdField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// StatusHistory property
        /// </summary>
		[RecurringElement]
		[XmlElement("StatusHistory")]
        public List<IntervalStatusHistory> StatusHistory {
            get {
                return StatusHistoryField;
            } 
            set {
                StatusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         [XmlIgnore]
         public bool StatusHistorySpecified
         {
            get {
             if(StatusHistoryField!=null)
                return StatusHistoryField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IntervalStatusHistory> StatusHistoryField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of OpenHoleInterval")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SlotsInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SlotsInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the SlotsInterval xsd type.")]
    public partial class SlotsInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StringEquipmentReferenceId property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to string equipment")]
		[XmlElement("StringEquipmentReferenceId")]
        public String StringEquipmentReferenceId {
            get {
                return StringEquipmentReferenceIdField;
            } 
            set {
                StringEquipmentReferenceIdField = value;
                NotifyPropertyChanged("StringEquipmentReferenceId");
            }
        }

        private String StringEquipmentReferenceIdField; 

        /// <summary>
        /// SlottedMdInterval property
        /// </summary>
		[Description("Slotted measured depth interval for this completion.")]
        [ComponentElement]
		[XmlElement("SlottedMdInterval")]
        public MdInterval SlottedMDInterval {
            get {
                return SlottedMdIntervalField;
            } 
            set {
                SlottedMdIntervalField = value;
                NotifyPropertyChanged("SlottedMDInterval");
            }
        }

        private MdInterval SlottedMdIntervalField; 

        /// <summary>
        /// SlottedTvdInterval property
        /// </summary>
		[Description("Slotted true vertical depth interval for this completion.")]
        [ComponentElement]
		[XmlElement("SlottedTvdInterval")]
        public TvdInterval SlottedTvdInterval {
            get {
                return SlottedTvdIntervalField;
            } 
            set {
                SlottedTvdIntervalField = value;
                NotifyPropertyChanged("SlottedTvdInterval");
            }
        }

        private TvdInterval SlottedTvdIntervalField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
		[XmlElement("EventHistory")]
        public EventInfo EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo EventHistoryField; 

        /// <summary>
        /// GeologyFeatureRefID property
        /// </summary>
		[Description("Reference to geology feature")]
        [RecurringElement]
		[XmlElement("GeologyFeatureRefID")]
        public List<String> GeologyFeatureRefID {
            get {
                return GeologyFeatureRefIDField;
            } 
            set {
                GeologyFeatureRefIDField = value;
                NotifyPropertyChanged("GeologyFeatureRefID");
            }
        }

         [XmlIgnore]
         public bool GeologyFeatureRefIDSpecified
         {
            get {
             if(GeologyFeatureRefIDField!=null)
                return GeologyFeatureRefIDField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> GeologyFeatureRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// StatusHistory property
        /// </summary>
		[RecurringElement]
		[XmlElement("StatusHistory")]
        public List<IntervalStatusHistory> StatusHistory {
            get {
                return StatusHistoryField;
            } 
            set {
                StatusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         [XmlIgnore]
         public bool StatusHistorySpecified
         {
            get {
             if(StatusHistoryField!=null)
                return StatusHistoryField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IntervalStatusHistory> StatusHistoryField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of SlotsInterval")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ContactIntervalSet xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ContactIntervalSet", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ContactIntervalSet xsd type.")]
    public partial class ContactIntervalSet : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SlotsInterval property
        /// </summary>
		[RecurringElement]
		[XmlElement("SlotsInterval")]
        public List<SlotsInterval> SlotsInterval {
            get {
                return SlotsIntervalField;
            } 
            set {
                SlotsIntervalField = value;
                NotifyPropertyChanged("SlotsInterval");
            }
        }

         [XmlIgnore]
         public bool SlotsIntervalSpecified
         {
            get {
             if(SlotsIntervalField!=null)
                return SlotsIntervalField.Count>0?true:false;
             else return false;
            } 
         }
        private List<SlotsInterval> SlotsIntervalField; 

        /// <summary>
        /// OpenHoleInterval property
        /// </summary>
		[RecurringElement]
		[XmlElement("OpenHoleInterval")]
        public List<OpenHoleInterval> OpenHoleInterval {
            get {
                return OpenHoleIntervalField;
            } 
            set {
                OpenHoleIntervalField = value;
                NotifyPropertyChanged("OpenHoleInterval");
            }
        }

         [XmlIgnore]
         public bool OpenHoleIntervalSpecified
         {
            get {
             if(OpenHoleIntervalField!=null)
                return OpenHoleIntervalField.Count>0?true:false;
             else return false;
            } 
         }
        private List<OpenHoleInterval> OpenHoleIntervalField; 

        /// <summary>
        /// PerforationSetInterval property
        /// </summary>
		[RecurringElement]
		[XmlElement("PerforationSetInterval")]
        public List<PerforationSetInterval> PerforationSetInterval {
            get {
                return PerforationSetIntervalField;
            } 
            set {
                PerforationSetIntervalField = value;
                NotifyPropertyChanged("PerforationSetInterval");
            }
        }

         [XmlIgnore]
         public bool PerforationSetIntervalSpecified
         {
            get {
             if(PerforationSetIntervalField!=null)
                return PerforationSetIntervalField.Count>0?true:false;
             else return false;
            } 
         }
        private List<PerforationSetInterval> PerforationSetIntervalField; 

        /// <summary>
        /// GravelPackInterval property
        /// </summary>
		[RecurringElement]
		[XmlElement("GravelPackInterval")]
        public List<GravelPackInterval> GravelPackInterval {
            get {
                return GravelPackIntervalField;
            } 
            set {
                GravelPackIntervalField = value;
                NotifyPropertyChanged("GravelPackInterval");
            }
        }

         [XmlIgnore]
         public bool GravelPackIntervalSpecified
         {
            get {
             if(GravelPackIntervalField!=null)
                return GravelPackIntervalField.Count>0?true:false;
             else return false;
            } 
         }
        private List<GravelPackInterval> GravelPackIntervalField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CompletionStatusHistory xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CompletionStatusHistory", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CompletionStatusHistory xsd type.")]
    public partial class CompletionStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Status property
        /// </summary>
		[Description("Completion status")]
		[XmlElement("Status")]
        public String Status {
            get {
                return StatusField;
            } 
            set {
                StatusField = value;
                NotifyPropertyChanged("Status");
            }
        }

        private String StatusField; 

        /// <summary>
        /// StartDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("the start date of status")]
		[XmlElement("StartDate")]
        public String StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                NotifyPropertyChanged("StartDate");
            }
        }

        private String StartDateField; 

        /// <summary>
        /// EndDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("the end date of status")]
		[XmlElement("EndDate")]
        public String EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                NotifyPropertyChanged("EndDate");
            }
        }

        private String EndDateField; 

        /// <summary>
        /// PerforationMdInterval property
        /// </summary>
		[Description("Measured depth interval between the top and the base of the perforations.")]
        [ComponentElement]
		[XmlElement("PerforationMdInterval")]
        public MdInterval PerforationMDInterval {
            get {
                return PerforationMdIntervalField;
            } 
            set {
                PerforationMdIntervalField = value;
                NotifyPropertyChanged("PerforationMDInterval");
            }
        }

        private MdInterval PerforationMdIntervalField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("The description about the status")]
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of CompletionStatusHistory")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractIscwsaErrorCoefficient xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Tvd))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Depth))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Inc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Azi))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractIscwsaErrorCoefficient", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractIscwsaErrorCoefficient xsd type.")]
    public abstract partial class AbstractIscwsaErrorCoefficient : Object, IUniqueId, INotifyPropertyChanged
    {

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of AbstractIscwsaErrorCoefficient")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Tvd xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Tvd", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Tvd xsd type.")]
    public partial class Tvd : AbstractIscwsaErrorCoefficient, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Tvd1 property
        /// </summary>
		
		[XmlElement("Tvd")]
        public String Tvd1 {
            get {
                return Tvd1Field;
            } 
            set {
                Tvd1Field = value;
                NotifyPropertyChanged("Tvd1");
            }
        }

        private String Tvd1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Depth xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Depth", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Depth xsd type.")]
    public partial class Depth : AbstractIscwsaErrorCoefficient, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Depth1 property
        /// </summary>
		
		[XmlElement("Depth")]
        public String Depth1 {
            get {
                return Depth1Field;
            } 
            set {
                Depth1Field = value;
                NotifyPropertyChanged("Depth1");
            }
        }

        private String Depth1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Inc xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Inc", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Inc xsd type.")]
    public partial class Inc : AbstractIscwsaErrorCoefficient, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Inc1 property
        /// </summary>
		
		[XmlElement("Inc")]
        public String Inc1 {
            get {
                return Inc1Field;
            } 
            set {
                Inc1Field = value;
                NotifyPropertyChanged("Inc1");
            }
        }

        private String Inc1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Azi xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Azi", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Azi xsd type.")]
    public partial class Azi : AbstractIscwsaErrorCoefficient, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Azi1 property
        /// </summary>
		
		[XmlElement("Azi")]
        public String Azi1 {
            get {
                return Azi1Field;
            } 
            set {
                Azi1Field = value;
                NotifyPropertyChanged("Azi1");
            }
        }

        private String Azi1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaErrorCoefficient xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaErrorCoefficient", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaErrorCoefficient xsd type.")]
    public partial class IscwsaErrorCoefficient : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// AbstractIscwsaErrorCoefficient property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("AbstractIscwsaErrorCoefficient")]
        public List<AbstractIscwsaErrorCoefficient> AbstractIscwsaErrorCoefficient {
            get {
                return AbstractIscwsaErrorCoefficientField;
            } 
            set {
                AbstractIscwsaErrorCoefficientField = value;
                NotifyPropertyChanged("AbstractIscwsaErrorCoefficient");
            }
        }

         [XmlIgnore]
         public bool AbstractIscwsaErrorCoefficientSpecified
         {
            get {
             if(AbstractIscwsaErrorCoefficientField!=null)
                return AbstractIscwsaErrorCoefficientField.Count>0?true:false;
             else return false;
            } 
         }
        private List<AbstractIscwsaErrorCoefficient> AbstractIscwsaErrorCoefficientField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaErrorCoefficient")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaErrorTerm xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaErrorTerm", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaErrorTerm xsd type.")]
    public partial class IscwsaErrorTerm : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("This is the unique mnemonic for this term.  For example, \"ABIX\" or \"DECR\".")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Type property
        /// </summary>
		[Description("The class of the error source.")]
		[XmlElement("Type")]
        public ErrorTermSource? Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
             if(value!=null) 
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private ErrorTermSource? TypeField; 

        /// <summary>
        /// TypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeSpecified {
            get {
                return TypeSpecifiedField;
            } 
            set {
                TypeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private Boolean TypeSpecifiedField; 

        /// <summary>
        /// MeasureClass property
        /// </summary>
		[StringLength(40)]
        [Description("The kind of quantity that the term represents. This constrains the unit that can be used for any errorTermValues.")]
		[XmlElement("MeasureClass")]
        public String MeasureClass {
            get {
                return MeasureClassField;
            } 
            set {
                MeasureClassField = value;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private String MeasureClassField; 

        /// <summary>
        /// Label property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human-readable name for the term, may be presented in  application software. E.g., \"MWD: X-Acceleromter Bias with Z-Axis Corr.\"")]
		[XmlElement("Label")]
        public String Label {
            get {
                return LabelField;
            } 
            set {
                LabelField = value;
                NotifyPropertyChanged("Label");
            }
        }

        private String LabelField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("Human-readable name for the term, may be presented in  application software. E.g., \"MWD: X-Acceleromter Bias with Z-Axis Corr.\"")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// OperatingMode property
        /// </summary>
		[Description("Operating mode that is valid for this error term. In the absence of this element assume Stationary.")]
        [RecurringElement]
		[XmlElement("OperatingMode")]
        public List<SurveyToolOperatingMode> OperatingMode {
            get {
                return OperatingModeField;
            } 
            set {
                OperatingModeField = value;
                NotifyPropertyChanged("OperatingMode");
            }
        }

         [XmlIgnore]
         public bool OperatingModeSpecified
         {
            get {
             if(OperatingModeField!=null)
                return OperatingModeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<SurveyToolOperatingMode> OperatingModeField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ErrorCoefficient property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("ErrorCoefficient")]
        public List<IscwsaErrorCoefficient> ErrorCoefficient {
            get {
                return ErrorCoefficientField;
            } 
            set {
                ErrorCoefficientField = value;
                NotifyPropertyChanged("ErrorCoefficient");
            }
        }

         [XmlIgnore]
         public bool ErrorCoefficientSpecified
         {
            get {
             if(ErrorCoefficientField!=null)
                return ErrorCoefficientField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IscwsaErrorCoefficient> ErrorCoefficientField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaErrorTerm")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaNomenclatureConstant xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaNomenclatureConstant", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaNomenclatureConstant xsd type.")]
    public partial class IscwsaNomenclatureConstant : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IscwsaNomenclatureConstant class.
        /// </summary>
        public IscwsaNomenclatureConstant() {}

        /// <summary>
        /// Initializes a new instance of the IscwsaNomenclatureConstant class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IscwsaNomenclatureConstant(Double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the constant.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("The value of the constant.")]
		[XmlElement("Value")]
        public Double? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double? ValueField; 

        /// <summary>
        /// Unit property
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("The unit of measure of the constant. This value must match an acronym from the WITSML unit of measure dictionary.")]
		[XmlElement("Unit")]
        public String Unit {
            get {
                return UnitField;
            } 
            set {
                UnitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private String UnitField; 

        /// <summary>
        /// Description property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("A textual description of the constant.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaNomenclatureConstant")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaNameAndDescription xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaNameAndDescription", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaNameAndDescription xsd type.")]
    public partial class IscwsaNameAndDescription : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the item.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Description property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("A textual description of the item.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaNameAndDescription")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaNomenclature xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaNomenclature", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaNomenclature xsd type.")]
    public partial class IscwsaNomenclature : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Parameter property
        /// </summary>
		[RecurringElement]
		[XmlElement("Parameter")]
        public List<IscwsaNameAndDescription> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         [XmlIgnore]
         public bool ParameterSpecified
         {
            get {
             if(ParameterField!=null)
                return ParameterField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IscwsaNameAndDescription> ParameterField; 

        /// <summary>
        /// Function property
        /// </summary>
		[RecurringElement]
		[XmlElement("Function")]
        public List<IscwsaNameAndDescription> Function {
            get {
                return FunctionField;
            } 
            set {
                FunctionField = value;
                NotifyPropertyChanged("Function");
            }
        }

         [XmlIgnore]
         public bool FunctionSpecified
         {
            get {
             if(FunctionField!=null)
                return FunctionField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IscwsaNameAndDescription> FunctionField; 

        /// <summary>
        /// Constant property
        /// </summary>
		[RecurringElement]
		[XmlElement("Constant")]
        public List<IscwsaNomenclatureConstant> Constant {
            get {
                return ConstantField;
            } 
            set {
                ConstantField = value;
                NotifyPropertyChanged("Constant");
            }
        }

         [XmlIgnore]
         public bool ConstantSpecified
         {
            get {
             if(ConstantField!=null)
                return ConstantField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IscwsaNomenclatureConstant> ConstantField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimJobDiversion xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimJobDiversion", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimJobDiversion xsd type.")]
    public partial class StimJobDiversion : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Contractor property
        /// </summary>
		[StringLength(2000)]
        [Description("Name of the diversion contractor.")]
		[XmlElement("Contractor")]
        public String Contractor {
            get {
                return ContractorField;
            } 
            set {
                ContractorField = value;
                NotifyPropertyChanged("Contractor");
            }
        }

        private String ContractorField; 

        /// <summary>
        /// Method property
        /// </summary>
		[Description("The diversion method used.")]
		[XmlElement("Method")]
        public StimJobDiversionMethod? Method {
            get {
                return MethodField;
            } 
            set {
                MethodField = value;
             if(value!=null) 
                 this.MethodSpecified = true;
                NotifyPropertyChanged("Method");
            }
        }

        private StimJobDiversionMethod? MethodField; 

        /// <summary>
        /// MethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MethodSpecified {
            get {
                return MethodSpecifiedField;
            } 
            set {
                MethodSpecifiedField = value;
                NotifyPropertyChanged("MethodSpecified");
            }
        }

        private Boolean MethodSpecifiedField; 

        /// <summary>
        /// ToolDescription property
        /// </summary>
		[StringLength(2000)]
        [Description("A supplier description of the diversion tool, such as its commercial name.")]
		[XmlElement("ToolDescription")]
        public String ToolDescription {
            get {
                return ToolDescriptionField;
            } 
            set {
                ToolDescriptionField = value;
                NotifyPropertyChanged("ToolDescription");
            }
        }

        private String ToolDescriptionField; 

        /// <summary>
        /// ElementSpacing property
        /// </summary>
		[Description("Spacing between packer elements.")]
        [ComponentElement]
		[XmlElement("ElementSpacing")]
        public LengthMeasure ElementSpacing {
            get {
                return ElementSpacingField;
            } 
            set {
                ElementSpacingField = value;
                NotifyPropertyChanged("ElementSpacing");
            }
        }

        private LengthMeasure ElementSpacingField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimReservoirInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimReservoirInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimReservoirInterval xsd type.")]
    public partial class StimReservoirInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// LithMdInterval property
        /// </summary>
		[Description("Lithology measured depth interval.")]
        [ComponentElement]
		[XmlElement("LithMdInterval")]
        public MdInterval LithMDInterval {
            get {
                return LithMdIntervalField;
            } 
            set {
                LithMdIntervalField = value;
                NotifyPropertyChanged("LithMDInterval");
            }
        }

        private MdInterval LithMdIntervalField; 

        /// <summary>
        /// LithFormationPermeability property
        /// </summary>
		[Description("Formation permeability, a measurement of the ability of a fluid to flow  through a rock. Commonly measured in milliDarcys (1m2 = 0.000000000000986923 Darcy).")]
        [ComponentElement]
		[XmlElement("LithFormationPermeability")]
        public PermeabilityRockMeasure LithFormationPermeability {
            get {
                return LithFormationPermeabilityField;
            } 
            set {
                LithFormationPermeabilityField = value;
                NotifyPropertyChanged("LithFormationPermeability");
            }
        }

        private PermeabilityRockMeasure LithFormationPermeabilityField; 

        /// <summary>
        /// LithYoungsModulus property
        /// </summary>
		[Description("Young's modulus (E) is a measure of the stiffness of an isotropic elastic material. It is also known as the Young modulus, modulus of elasticity, elastic modulus (though Young's modulus is actually one  of several elastic moduli such as the bulk modulus and the shear modulus) or tensile modulus. It is  defined as the ratio of the uniaxial stress over the uniaxial strain.")]
        [ComponentElement]
		[XmlElement("LithYoungsModulus")]
        public PressureMeasure LithYoungsModulus {
            get {
                return LithYoungsModulusField;
            } 
            set {
                LithYoungsModulusField = value;
                NotifyPropertyChanged("LithYoungsModulus");
            }
        }

        private PressureMeasure LithYoungsModulusField; 

        /// <summary>
        /// LithPorePres property
        /// </summary>
		[Description("Refers to the pressure of fluids held within a soil or rock, in gaps  between particles formation porosity.")]
        [ComponentElement]
		[XmlElement("LithPorePres")]
        public PressureMeasure LithPorePres {
            get {
                return LithPorePresField;
            } 
            set {
                LithPorePresField = value;
                NotifyPropertyChanged("LithPorePres");
            }
        }

        private PressureMeasure LithPorePresField; 

        /// <summary>
        /// LithNetPayThickness property
        /// </summary>
		[Description("Net pay is computed. It is the thickness of rock that can deliver hydrocarbons  to the wellbore formation.")]
        [ComponentElement]
		[XmlElement("LithNetPayThickness")]
        public LengthMeasure LithNetPayThickness {
            get {
                return LithNetPayThicknessField;
            } 
            set {
                LithNetPayThicknessField = value;
                NotifyPropertyChanged("LithNetPayThickness");
            }
        }

        private LengthMeasure LithNetPayThicknessField; 

        /// <summary>
        /// LithName property
        /// </summary>
		[StringLength(2000)]
        [Description("A name for the formation lithology.")]
		[XmlElement("LithName")]
        public String LithName {
            get {
                return LithNameField;
            } 
            set {
                LithNameField = value;
                NotifyPropertyChanged("LithName");
            }
        }

        private String LithNameField; 

        /// <summary>
        /// GrossPayMdInterval property
        /// </summary>
		[Description("Measured depth of the bottom of the formation.")]
        [ComponentElement]
		[XmlElement("GrossPayMdInterval")]
        public MdInterval GrossPayMDInterval {
            get {
                return GrossPayMdIntervalField;
            } 
            set {
                GrossPayMdIntervalField = value;
                NotifyPropertyChanged("GrossPayMDInterval");
            }
        }

        private MdInterval GrossPayMdIntervalField; 

        /// <summary>
        /// GrossPayThickness property
        /// </summary>
		[Description("The total thickness of the interval being treated, whether or  not it is productive.")]
        [ComponentElement]
		[XmlElement("GrossPayThickness")]
        public LengthMeasure GrossPayThickness {
            get {
                return GrossPayThicknessField;
            } 
            set {
                GrossPayThicknessField = value;
                NotifyPropertyChanged("GrossPayThickness");
            }
        }

        private LengthMeasure GrossPayThicknessField; 

        /// <summary>
        /// NetPayThickness property
        /// </summary>
		[Description("The thickness of the most productive part of the interval.  Net pay is a subset of the gross.")]
        [ComponentElement]
		[XmlElement("NetPayThickness")]
        public LengthMeasure NetPayThickness {
            get {
                return NetPayThicknessField;
            } 
            set {
                NetPayThicknessField = value;
                NotifyPropertyChanged("NetPayThickness");
            }
        }

        private LengthMeasure NetPayThicknessField; 

        /// <summary>
        /// NetPayPorePres property
        /// </summary>
		[Description("The pore pressure of the net pay.")]
        [ComponentElement]
		[XmlElement("NetPayPorePres")]
        public PressureMeasure NetPayPorePres {
            get {
                return NetPayPorePresField;
            } 
            set {
                NetPayPorePresField = value;
                NotifyPropertyChanged("NetPayPorePres");
            }
        }

        private PressureMeasure NetPayPorePresField; 

        /// <summary>
        /// NetPayFluidCompressibility property
        /// </summary>
		[Description("The volume change of the fluid in the net pay when pressure is applied.")]
        [ComponentElement]
		[XmlElement("NetPayFluidCompressibility")]
        public IsothermalCompressibilityMeasure NetPayFluidCompressibility {
            get {
                return NetPayFluidCompressibilityField;
            } 
            set {
                NetPayFluidCompressibilityField = value;
                NotifyPropertyChanged("NetPayFluidCompressibility");
            }
        }

        private IsothermalCompressibilityMeasure NetPayFluidCompressibilityField; 

        /// <summary>
        /// NetPayFluidViscosity property
        /// </summary>
		[Description("With respect to the net pay, a measurement of the internal resistance of a fluid to flow against itself. Expressed as the ratio of shear stress to shear rate.")]
        [ComponentElement]
		[XmlElement("NetPayFluidViscosity")]
        public DynamicViscosityMeasure NetPayFluidViscosity {
            get {
                return NetPayFluidViscosityField;
            } 
            set {
                NetPayFluidViscosityField = value;
                NotifyPropertyChanged("NetPayFluidViscosity");
            }
        }

        private DynamicViscosityMeasure NetPayFluidViscosityField; 

        /// <summary>
        /// NetPayName property
        /// </summary>
		[StringLength(2000)]
        [Description("The name used for the net pay zone.")]
		[XmlElement("NetPayName")]
        public String NetPayName {
            get {
                return NetPayNameField;
            } 
            set {
                NetPayNameField = value;
                NotifyPropertyChanged("NetPayName");
            }
        }

        private String NetPayNameField; 

        /// <summary>
        /// NetPayFormationPermeability property
        /// </summary>
		[Description("The permeability of the net pay.")]
        [ComponentElement]
		[XmlElement("NetPayFormationPermeability")]
        public PermeabilityRockMeasure NetPayFormationPermeability {
            get {
                return NetPayFormationPermeabilityField;
            } 
            set {
                NetPayFormationPermeabilityField = value;
                NotifyPropertyChanged("NetPayFormationPermeability");
            }
        }

        private PermeabilityRockMeasure NetPayFormationPermeabilityField; 

        /// <summary>
        /// LithPoissonsRatio property
        /// </summary>
		[Description("The ratio of the relative contraction strain, or transverse strain (normal to the applied load),  divided by the relative extension strain, or axial strain (in the direction of the applied load).")]
        [ComponentElement]
		[XmlElement("LithPoissonsRatio")]
        public DimensionlessMeasure LithPoissonsRatio {
            get {
                return LithPoissonsRatioField;
            } 
            set {
                LithPoissonsRatioField = value;
                NotifyPropertyChanged("LithPoissonsRatio");
            }
        }

        private DimensionlessMeasure LithPoissonsRatioField; 

        /// <summary>
        /// NetPayFormationPorosity property
        /// </summary>
		[Description("Porosity of the net pay formation.")]
        [ComponentElement]
		[XmlElement("NetPayFormationPorosity")]
        public VolumePerVolumeMeasure NetPayFormationPorosity {
            get {
                return NetPayFormationPorosityField;
            } 
            set {
                NetPayFormationPorosityField = value;
                NotifyPropertyChanged("NetPayFormationPorosity");
            }
        }

        private VolumePerVolumeMeasure NetPayFormationPorosityField; 

        /// <summary>
        /// FormationPermeability property
        /// </summary>
		[Description("Permeability of the formation.")]
        [ComponentElement]
		[XmlElement("FormationPermeability")]
        public PermeabilityRockMeasure FormationPermeability {
            get {
                return FormationPermeabilityField;
            } 
            set {
                FormationPermeabilityField = value;
                NotifyPropertyChanged("FormationPermeability");
            }
        }

        private PermeabilityRockMeasure FormationPermeabilityField; 

        /// <summary>
        /// FormationPorosity property
        /// </summary>
		[Description("Porosity of the formation.")]
        [ComponentElement]
		[XmlElement("FormationPorosity")]
        public VolumePerVolumeMeasure FormationPorosity {
            get {
                return FormationPorosityField;
            } 
            set {
                FormationPorosityField = value;
                NotifyPropertyChanged("FormationPorosity");
            }
        }

        private VolumePerVolumeMeasure FormationPorosityField; 

        /// <summary>
        /// NameFormation property
        /// </summary>
		[StringLength(2000)]
        [Description("Name of the formation.")]
		[XmlElement("NameFormation")]
        public String NameFormation {
            get {
                return NameFormationField;
            } 
            set {
                NameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private String NameFormationField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimReservoirInterval")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PermeabilityRockMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PermeabilityRockMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PermeabilityRockMeasure xsd type.")]
    public partial class PermeabilityRockMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PermeabilityRockMeasure class.
        /// </summary>
        public PermeabilityRockMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PermeabilityRockMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PermeabilityRockMeasure(Double value, PermeabilityRockUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PermeabilityRockUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PermeabilityRockUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PressureMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PressureMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PressureMeasure xsd type.")]
    public partial class PressureMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        public PressureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PressureMeasure(Double value, PressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PressureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PressureUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IsothermalCompressibilityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IsothermalCompressibilityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IsothermalCompressibilityMeasure xsd type.")]
    public partial class IsothermalCompressibilityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IsothermalCompressibilityMeasure class.
        /// </summary>
        public IsothermalCompressibilityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the IsothermalCompressibilityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IsothermalCompressibilityMeasure(Double value, IsothermalCompressibilityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public IsothermalCompressibilityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private IsothermalCompressibilityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DynamicViscosityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DynamicViscosityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DynamicViscosityMeasure xsd type.")]
    public partial class DynamicViscosityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        public DynamicViscosityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DynamicViscosityMeasure(Double value, DynamicViscosityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public DynamicViscosityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DynamicViscosityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DimensionlessMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DimensionlessMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DimensionlessMeasure xsd type.")]
    public partial class DimensionlessMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        public DimensionlessMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DimensionlessMeasure(Double value, DimensionlessUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public DimensionlessUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DimensionlessUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerVolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerVolumeMeasure xsd type.")]
    public partial class VolumePerVolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        public VolumePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasure(Double value, VolumePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public VolumePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerVolumeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerLengthMeasure xsd type.")]
    public partial class VolumePerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerLengthMeasure class.
        /// </summary>
        public VolumePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerLengthMeasure(Double value, VolumePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public VolumePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimTubular xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimTubular", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimTubular xsd type.")]
    public partial class StimTubular : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Type property
        /// </summary>
		[Description("The type of tubular (e.g., casing, tubing, liner, packer, open hole, other).")]
		[XmlElement("Type")]
        public String Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String TypeField; 

        /// <summary>
        /// Id property
        /// </summary>
		[Description("The inside diameter of the tubular used.")]
        [ComponentElement]
		[XmlElement("Id")]
        public LengthMeasure Id {
            get {
                return IdField;
            } 
            set {
                IdField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private LengthMeasure IdField; 

        /// <summary>
        /// Od property
        /// </summary>
		[Description("The outside diameter of the tubular used.")]
        [ComponentElement]
		[XmlElement("Od")]
        public LengthMeasure OuterDiameter {
            get {
                return OdField;
            } 
            set {
                OdField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure OdField; 

        /// <summary>
        /// Weight property
        /// </summary>
		[Description("The weight per length of the tubular.")]
        [ComponentElement]
		[XmlElement("Weight")]
        public MassPerLengthMeasure Weight {
            get {
                return WeightField;
            } 
            set {
                WeightField = value;
                NotifyPropertyChanged("Weight");
            }
        }

        private MassPerLengthMeasure WeightField; 

        /// <summary>
        /// TubularMdInterval property
        /// </summary>
		[Description("Measured depth interval over which the tubular was used.")]
        [ComponentElement]
		[XmlElement("TubularMdInterval")]
        public MdInterval TubularMDInterval {
            get {
                return TubularMdIntervalField;
            } 
            set {
                TubularMdIntervalField = value;
                NotifyPropertyChanged("TubularMDInterval");
            }
        }

        private MdInterval TubularMdIntervalField; 

        /// <summary>
        /// TubularTvdInterval property
        /// </summary>
		[Description("True vertical depth interval over which the tubular was used.")]
        [ComponentElement]
		[XmlElement("TubularTvdInterval")]
        public TvdInterval TubularTvdInterval {
            get {
                return TubularTvdIntervalField;
            } 
            set {
                TubularTvdIntervalField = value;
                NotifyPropertyChanged("TubularTvdInterval");
            }
        }

        private TvdInterval TubularTvdIntervalField; 

        /// <summary>
        /// VolumeFactor property
        /// </summary>
		[Description("The volume per length of the tubular.")]
        [ComponentElement]
		[XmlElement("VolumeFactor")]
        public VolumePerLengthMeasure VolumeFactor {
            get {
                return VolumeFactorField;
            } 
            set {
                VolumeFactorField = value;
                NotifyPropertyChanged("VolumeFactor");
            }
        }

        private VolumePerLengthMeasure VolumeFactorField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<String> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimTubular")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerLengthMeasure xsd type.")]
    public partial class MassPerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerLengthMeasure class.
        /// </summary>
        public MassPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerLengthMeasure(Double value, MassPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MassPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimFlowPath xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimFlowPath", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimFlowPath xsd type.")]
    public partial class StimFlowPath : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AvgPmaxPacPres property
        /// </summary>
		[Description("PMax prediction allows the tool assembly to be designed with expected pressures.  It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the average of all the pmax pressures calculated for this flow path.")]
        [ComponentElement]
		[XmlElement("AvgPmaxPacPres")]
        public PressureMeasure AvgPmaxPacPres {
            get {
                return AvgPmaxPacPresField;
            } 
            set {
                AvgPmaxPacPresField = value;
                NotifyPropertyChanged("AvgPmaxPacPres");
            }
        }

        private PressureMeasure AvgPmaxPacPresField; 

        /// <summary>
        /// FrictionFactorOpenHole property
        /// </summary>
		[Description("The friction factor used to compute open hole pressure loss.")]
        [ComponentElement]
		[XmlElement("FrictionFactorOpenHole")]
        public DimensionlessMeasure FrictionFactorOpenHole {
            get {
                return FrictionFactorOpenHoleField;
            } 
            set {
                FrictionFactorOpenHoleField = value;
                NotifyPropertyChanged("FrictionFactorOpenHole");
            }
        }

        private DimensionlessMeasure FrictionFactorOpenHoleField; 

        /// <summary>
        /// AvgPmaxWeaklinkPres property
        /// </summary>
		[Description("Average allowable pressure for the zone of interest with respect  to the bottomhole assembly during the stimulation services.")]
        [ComponentElement]
		[XmlElement("AvgPmaxWeaklinkPres")]
        public PressureMeasure AvgPmaxWeaklinkPres {
            get {
                return AvgPmaxWeaklinkPresField;
            } 
            set {
                AvgPmaxWeaklinkPresField = value;
                NotifyPropertyChanged("AvgPmaxWeaklinkPres");
            }
        }

        private PressureMeasure AvgPmaxWeaklinkPresField; 

        /// <summary>
        /// BreakDownPres property
        /// </summary>
		[Description("The pressure at which the formation broke.")]
        [ComponentElement]
		[XmlElement("BreakDownPres")]
        public PressureMeasure BreakDownPres {
            get {
                return BreakDownPresField;
            } 
            set {
                BreakDownPresField = value;
                NotifyPropertyChanged("BreakDownPres");
            }
        }

        private PressureMeasure BreakDownPresField; 

        /// <summary>
        /// BridgePlugMD property
        /// </summary>
		[Description("The measured depth of a bridge plug.")]
        [ComponentElement]
		[XmlElement("BridgePlugMD")]
        public MeasuredDepthCoord BridgePlugMD {
            get {
                return BridgePlugMDField;
            } 
            set {
                BridgePlugMDField = value;
                NotifyPropertyChanged("BridgePlugMD");
            }
        }

        private MeasuredDepthCoord BridgePlugMDField; 

        /// <summary>
        /// FractureGradient property
        /// </summary>
		[Description("The formation fracture gradient for this treatment interval.")]
        [ComponentElement]
		[XmlElement("FractureGradient")]
        public ForcePerVolumeMeasure FractureGradient {
            get {
                return FractureGradientField;
            } 
            set {
                FractureGradientField = value;
                NotifyPropertyChanged("FractureGradient");
            }
        }

        private ForcePerVolumeMeasure FractureGradientField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[Description("The type of flow path.")]
		[XmlElement("Kind")]
        public String Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private String KindField; 

        /// <summary>
        /// MaxPmaxPacPres property
        /// </summary>
		[Description("PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the maximum of all the pmax pressures calculated for this flow path.")]
        [ComponentElement]
		[XmlElement("MaxPmaxPacPres")]
        public PressureMeasure MaxPmaxPacPres {
            get {
                return MaxPmaxPacPresField;
            } 
            set {
                MaxPmaxPacPresField = value;
                NotifyPropertyChanged("MaxPmaxPacPres");
            }
        }

        private PressureMeasure MaxPmaxPacPresField; 

        /// <summary>
        /// MaxPmaxWeaklinkPres property
        /// </summary>
		[Description("Maximum allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.")]
        [ComponentElement]
		[XmlElement("MaxPmaxWeaklinkPres")]
        public PressureMeasure MaxPmaxWeaklinkPres {
            get {
                return MaxPmaxWeaklinkPresField;
            } 
            set {
                MaxPmaxWeaklinkPresField = value;
                NotifyPropertyChanged("MaxPmaxWeaklinkPres");
            }
        }

        private PressureMeasure MaxPmaxWeaklinkPresField; 

        /// <summary>
        /// PackerMD property
        /// </summary>
		[Description("The measured depth of a packer.")]
        [ComponentElement]
		[XmlElement("PackerMD")]
        public MeasuredDepthCoord PackerMD {
            get {
                return PackerMDField;
            } 
            set {
                PackerMDField = value;
                NotifyPropertyChanged("PackerMD");
            }
        }

        private MeasuredDepthCoord PackerMDField; 

        /// <summary>
        /// FrictionFactorPipe property
        /// </summary>
		[Description("The friction factor for the pipe, tubing, and/or casing.")]
        [ComponentElement]
		[XmlElement("FrictionFactorPipe")]
        public DimensionlessMeasure FrictionFactorPipe {
            get {
                return FrictionFactorPipeField;
            } 
            set {
                FrictionFactorPipeField = value;
                NotifyPropertyChanged("FrictionFactorPipe");
            }
        }

        private DimensionlessMeasure FrictionFactorPipeField; 

        /// <summary>
        /// TubingBottomMD property
        /// </summary>
		[Description("The maximum measured depth of the tubing used for treatment of a stage.")]
        [ComponentElement]
		[XmlElement("TubingBottomMD")]
        public MeasuredDepthCoord TubingBottomMD {
            get {
                return TubingBottomMDField;
            } 
            set {
                TubingBottomMDField = value;
                NotifyPropertyChanged("TubingBottomMD");
            }
        }

        private MeasuredDepthCoord TubingBottomMDField; 

        /// <summary>
        /// Tubular property
        /// </summary>
		[RecurringElement]
		[XmlElement("Tubular")]
        public List<StimTubular> Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

         [XmlIgnore]
         public bool TubularSpecified
         {
            get {
             if(TubularField!=null)
                return TubularField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimTubular> TubularField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MeasuredDepthCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MeasuredDepthCoord", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MeasuredDepthCoord xsd type.")]
    public partial class MeasuredDepthCoord : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        public MeasuredDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasuredDepthCoord(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Description("Unit of measure used by this measured depth coordinate")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
             if(value!=null) 
                 this.UomSpecified = true;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

        /// <summary>
        /// uomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UomSpecified {
            get {
                return uomSpecifiedField;
            } 
            set {
                uomSpecifiedField = value;
                NotifyPropertyChanged("UomSpecified");
            }
        }

        private Boolean uomSpecifiedField; 

		/// <summary>
        /// datum property
        /// </summary>
		[StringLength(64)]
        [Description("Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates")]
        [XmlAttribute("datum")]
		
        public String Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private String datumField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ForcePerVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ForcePerVolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ForcePerVolumeMeasure xsd type.")]
    public partial class ForcePerVolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasure class.
        /// </summary>
        public ForcePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerVolumeMeasure(Double value, ForcePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ForcePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForcePerVolumeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimFluid xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimFluid", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimFluid xsd type.")]
    public partial class StimFluid : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(2000)]
        [Description("The name of the fluid.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[Description("The fluid types.")]
		[XmlElement("Kind")]
        public StimFluidKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
             if(value!=null) 
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private StimFluidKind? KindField; 

        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private Boolean KindSpecifiedField; 

        /// <summary>
        /// Subtype property
        /// </summary>
		[Description("The fluid subtypes.")]
		[XmlElement("Subtype")]
        public StimFluidSubtype? Subtype {
            get {
                return SubtypeField;
            } 
            set {
                SubtypeField = value;
             if(value!=null) 
                 this.SubtypeSpecified = true;
                NotifyPropertyChanged("Subtype");
            }
        }

        private StimFluidSubtype? SubtypeField; 

        /// <summary>
        /// SubtypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean SubtypeSpecified {
            get {
                return SubtypeSpecifiedField;
            } 
            set {
                SubtypeSpecifiedField = value;
                NotifyPropertyChanged("SubtypeSpecified");
            }
        }

        private Boolean SubtypeSpecifiedField; 

        /// <summary>
        /// Purpose property
        /// </summary>
		[StringLength(2000)]
        [Description("The purpose of the fluid.")]
		[XmlElement("Purpose")]
        public String Purpose {
            get {
                return PurposeField;
            } 
            set {
                PurposeField = value;
                NotifyPropertyChanged("Purpose");
            }
        }

        private String PurposeField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("The description of the fluid.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// Supplier property
        /// </summary>
		[StringLength(2000)]
        [Description("The supplier of the fluid.")]
		[XmlElement("Supplier")]
        public String Supplier {
            get {
                return SupplierField;
            } 
            set {
                SupplierField = value;
                NotifyPropertyChanged("Supplier");
            }
        }

        private String SupplierField; 

        /// <summary>
        /// IsKillFluid property
        /// </summary>
		[Description("If true, this fluid is a kill fluid.")]
		[XmlElement("IsKillFluid")]
        public Boolean? IsKillFluid {
            get {
                return IsKillFluidField;
            } 
            set {
                IsKillFluidField = value;
             if(value!=null) 
                 this.IsKillFluidSpecified = true;
                NotifyPropertyChanged("IsKillFluid");
            }
        }

        private Boolean? IsKillFluidField; 

        /// <summary>
        /// IsKillFluidSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsKillFluidSpecified {
            get {
                return IsKillFluidSpecifiedField;
            } 
            set {
                IsKillFluidSpecifiedField = value;
                NotifyPropertyChanged("IsKillFluidSpecified");
            }
        }

        private Boolean IsKillFluidSpecifiedField; 

        /// <summary>
        /// Volume property
        /// </summary>
		[Description("Volume of fluid.")]
        [ComponentElement]
		[XmlElement("Volume")]
        public VolumeMeasure Volume {
            get {
                return VolumeField;
            } 
            set {
                VolumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeMeasure VolumeField; 

        /// <summary>
        /// Density property
        /// </summary>
		[Description("The density of the fluid.")]
        [ComponentElement]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// FluidTemp property
        /// </summary>
		[Description("The temperature of the fluid at surface.")]
        [ComponentElement]
		[XmlElement("FluidTemp")]
        public ThermodynamicTemperatureMeasure FluidTemp {
            get {
                return FluidTempField;
            } 
            set {
                FluidTempField = value;
                NotifyPropertyChanged("FluidTemp");
            }
        }

        private ThermodynamicTemperatureMeasure FluidTempField; 

        /// <summary>
        /// GelStrength10Min property
        /// </summary>
		[Description("The shear stress measured at low shear rate after a mud has set quiescently for 10 minutes.")]
		[XmlElement("GelStrength10Min")]
        public String GelStrength10Min {
            get {
                return GelStrength10MinField;
            } 
            set {
                GelStrength10MinField = value;
                NotifyPropertyChanged("GelStrength10Min");
            }
        }

        private String GelStrength10MinField; 

        /// <summary>
        /// GelStrength10Sec property
        /// </summary>
		[Description("The shear stress measured at low shear rate after a mud has set quiescently for 10 seconds.")]
		[XmlElement("GelStrength10Sec")]
        public String GelStrength10Sec {
            get {
                return GelStrength10SecField;
            } 
            set {
                GelStrength10SecField = value;
                NotifyPropertyChanged("GelStrength10Sec");
            }
        }

        private String GelStrength10SecField; 

        /// <summary>
        /// SpecificGravity property
        /// </summary>
		[Description("The specific gravity of the fluid at surface.")]
        [ComponentElement]
		[XmlElement("SpecificGravity")]
        public DimensionlessMeasure SpecificGravity {
            get {
                return SpecificGravityField;
            } 
            set {
                SpecificGravityField = value;
                NotifyPropertyChanged("SpecificGravity");
            }
        }

        private DimensionlessMeasure SpecificGravityField; 

        /// <summary>
        /// Viscosity property
        /// </summary>
		[Description("Viscosity of stimulation fluid.")]
        [ComponentElement]
		[XmlElement("Viscosity")]
        public DynamicViscosityMeasure Viscosity {
            get {
                return ViscosityField;
            } 
            set {
                ViscosityField = value;
                NotifyPropertyChanged("Viscosity");
            }
        }

        private DynamicViscosityMeasure ViscosityField; 

        /// <summary>
        /// PH property
        /// </summary>
		[Description("The pH of the fluid.")]
        [ComponentElement]
		[XmlElement("PH")]
        public DimensionlessMeasure PH {
            get {
                return PHField;
            } 
            set {
                PHField = value;
                NotifyPropertyChanged("PH");
            }
        }

        private DimensionlessMeasure PHField; 

        /// <summary>
        /// AdditiveConcentration property
        /// </summary>
		[RecurringElement]
		[XmlElement("AdditiveConcentration")]
        public List<StimMaterialQuantity> AdditiveConcentration {
            get {
                return AdditiveConcentrationField;
            } 
            set {
                AdditiveConcentrationField = value;
                NotifyPropertyChanged("AdditiveConcentration");
            }
        }

         [XmlIgnore]
         public bool AdditiveConcentrationSpecified
         {
            get {
             if(AdditiveConcentrationField!=null)
                return AdditiveConcentrationField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> AdditiveConcentrationField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumeMeasure xsd type.")]
    public partial class VolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        public VolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeMeasure(Double value, VolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public VolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerVolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerVolumeMeasure xsd type.")]
    public partial class MassPerVolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerVolumeMeasure class.
        /// </summary>
        public MassPerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerVolumeMeasure(Double value, MassPerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MassPerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerVolumeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ThermodynamicTemperatureMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ThermodynamicTemperatureMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ThermodynamicTemperatureMeasure xsd type.")]
    public partial class ThermodynamicTemperatureMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        public ThermodynamicTemperatureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermodynamicTemperatureMeasure(Double value, ThermodynamicTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ThermodynamicTemperatureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermodynamicTemperatureUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimMaterialQuantity xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimMaterialQuantity", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimMaterialQuantity xsd type.")]
    public partial class StimMaterialQuantity : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Density property
        /// </summary>
		[Description("The density of material used.")]
        [ComponentElement]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// Mass property
        /// </summary>
		[Description("The mass of material used.  This should be used without specifying any of the other material measures (e.g. volume, standard volume, etc.).")]
        [ComponentElement]
		[XmlElement("Mass")]
        public MassMeasure Mass {
            get {
                return MassField;
            } 
            set {
                MassField = value;
                NotifyPropertyChanged("Mass");
            }
        }

        private MassMeasure MassField; 

        /// <summary>
        /// MassFlowRate property
        /// </summary>
		[ComponentElement]
		[XmlElement("MassFlowRate")]
        public MassPerTimeMeasure MassFlowRate {
            get {
                return MassFlowRateField;
            } 
            set {
                MassFlowRateField = value;
                NotifyPropertyChanged("MassFlowRate");
            }
        }

        private MassPerTimeMeasure MassFlowRateField; 

        /// <summary>
        /// StdVolume property
        /// </summary>
		[Description("The standard volume of material used. Standard volume is the volume measured under the same conditions. This should be used without specifying any of the other material measures (e.g. mass, volume, etc.).")]
        [ComponentElement]
		[XmlElement("StdVolume")]
        public VolumeMeasure StdVolume {
            get {
                return StdVolumeField;
            } 
            set {
                StdVolumeField = value;
                NotifyPropertyChanged("StdVolume");
            }
        }

        private VolumeMeasure StdVolumeField; 

        /// <summary>
        /// Volume property
        /// </summary>
		[Description("The volume of material used.  This should be used without specifying any of the other material measures (e.g. mass, standard volume, etc.).")]
        [ComponentElement]
		[XmlElement("Volume")]
        public VolumeMeasure Volume {
            get {
                return VolumeField;
            } 
            set {
                VolumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeMeasure VolumeField; 

        /// <summary>
        /// VolumeConcentration property
        /// </summary>
		[Description("The volume per volume measure of material used.  This should be used without specifying any of the other material measures (e.g. mass, density, standard volume, etc.).")]
        [ComponentElement]
		[XmlElement("VolumeConcentration")]
        public VolumePerVolumeMeasure VolumeConcentration {
            get {
                return VolumeConcentrationField;
            } 
            set {
                VolumeConcentrationField = value;
                NotifyPropertyChanged("VolumeConcentration");
            }
        }

        private VolumePerVolumeMeasure VolumeConcentrationField; 

        /// <summary>
        /// VolumetricFlowRate property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolumetricFlowRate")]
        public VolumePerTimeMeasure VolumetricFlowRate {
            get {
                return VolumetricFlowRateField;
            } 
            set {
                VolumetricFlowRateField = value;
                NotifyPropertyChanged("VolumetricFlowRate");
            }
        }

        private VolumePerTimeMeasure VolumetricFlowRateField; 

        /// <summary>
        /// MaterialReference property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Material ID - equal to AbstractStimMaterial.RefId  This is a reference to the uid of the stim material in the material catalog")]
		[XmlElement("MaterialReference")]
        public String MaterialReference {
            get {
                return MaterialReferenceField;
            } 
            set {
                MaterialReferenceField = value;
                NotifyPropertyChanged("MaterialReference");
            }
        }

        private String MaterialReferenceField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimMaterialQuantity")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassMeasure xsd type.")]
    public partial class MassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        public MassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassMeasure(Double value, MassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerTimeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerTimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerTimeMeasure xsd type.")]
    public partial class MassPerTimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerTimeMeasure class.
        /// </summary>
        public MassPerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerTimeMeasure(Double value, MassPerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MassPerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerTimeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerTimeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerTimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerTimeMeasure xsd type.")]
    public partial class VolumePerTimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerTimeMeasure class.
        /// </summary>
        public VolumePerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerTimeMeasure(Double value, VolumePerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public VolumePerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerTimeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimJobStep xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimJobStep", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimJobStep xsd type.")]
    public partial class StimJobStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StepName property
        /// </summary>
		[StringLength(2000)]
        [Description("A human readable name for the step.")]
		[XmlElement("StepName")]
        public String StepName {
            get {
                return StepNameField;
            } 
            set {
                StepNameField = value;
                NotifyPropertyChanged("StepName");
            }
        }

        private String StepNameField; 

        /// <summary>
        /// StepNumber property
        /// </summary>
		[Required]
        [Description("Step number.")]
		[XmlElement("StepNumber")]
        public Int64? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private Int64? StepNumberField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[StringLength(2000)]
        [Description("The type of step.")]
		[XmlElement("Kind")]
        public String Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private String KindField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A short description of the step.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date time of start of the step.")]
		[XmlElement("DTimStart")]
        public String DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private String DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date time of end of the step.")]
		[XmlElement("DTimEnd")]
        public String DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private String DTimEndField; 

        /// <summary>
        /// AvgBaseFluidQuality property
        /// </summary>
		[Description("Base quality percentage of foam.")]
        [ComponentElement]
		[XmlElement("AvgBaseFluidQuality")]
        public VolumePerVolumeMeasure AvgBaseFluidQuality {
            get {
                return AvgBaseFluidQualityField;
            } 
            set {
                AvgBaseFluidQualityField = value;
                NotifyPropertyChanged("AvgBaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasure AvgBaseFluidQualityField; 

        /// <summary>
        /// AvgCO2BaseFluidQuality property
        /// </summary>
		[Description("Base quality carbon dioxide percent of foam.")]
        [ComponentElement]
		[XmlElement("AvgCO2BaseFluidQuality")]
        public VolumePerVolumeMeasure AvgCO2BaseFluidQuality {
            get {
                return AvgCO2BaseFluidQualityField;
            } 
            set {
                AvgCO2BaseFluidQualityField = value;
                NotifyPropertyChanged("AvgCO2BaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasure AvgCO2BaseFluidQualityField; 

        /// <summary>
        /// AvgHydraulicPower property
        /// </summary>
		[Description("Average hydraulic horse power used.")]
        [ComponentElement]
		[XmlElement("AvgHydraulicPower")]
        public PowerMeasure AvgHydraulicPower {
            get {
                return AvgHydraulicPowerField;
            } 
            set {
                AvgHydraulicPowerField = value;
                NotifyPropertyChanged("AvgHydraulicPower");
            }
        }

        private PowerMeasure AvgHydraulicPowerField; 

        /// <summary>
        /// AvgInternalPhaseFraction property
        /// </summary>
		[Description("Internal Gas Phase percentage of foam.")]
        [ComponentElement]
		[XmlElement("AvgInternalPhaseFraction")]
        public VolumePerVolumeMeasure AvgInternalPhaseFraction {
            get {
                return AvgInternalPhaseFractionField;
            } 
            set {
                AvgInternalPhaseFractionField = value;
                NotifyPropertyChanged("AvgInternalPhaseFraction");
            }
        }

        private VolumePerVolumeMeasure AvgInternalPhaseFractionField; 

        /// <summary>
        /// AvgMaterialUsedRate property
        /// </summary>
		[Description("Average material user per minute entering the flow stream.")]
        [RecurringElement]
		[XmlElement("AvgMaterialUsedRate")]
        public List<StimMaterialQuantity> AvgMaterialUsedRate {
            get {
                return AvgMaterialUsedRateField;
            } 
            set {
                AvgMaterialUsedRateField = value;
                NotifyPropertyChanged("AvgMaterialUsedRate");
            }
        }

         [XmlIgnore]
         public bool AvgMaterialUsedRateSpecified
         {
            get {
             if(AvgMaterialUsedRateField!=null)
                return AvgMaterialUsedRateField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> AvgMaterialUsedRateField; 

        /// <summary>
        /// AvgMaterialUseRateBottomhole property
        /// </summary>
		[Description("Average material amount used (pumped) per minute at bottomhole.")]
        [RecurringElement]
		[XmlElement("AvgMaterialUseRateBottomhole")]
        public List<StimMaterialQuantity> AvgMaterialUseRateBottomhole {
            get {
                return AvgMaterialUseRateBottomholeField;
            } 
            set {
                AvgMaterialUseRateBottomholeField = value;
                NotifyPropertyChanged("AvgMaterialUseRateBottomhole");
            }
        }

         [XmlIgnore]
         public bool AvgMaterialUseRateBottomholeSpecified
         {
            get {
             if(AvgMaterialUseRateBottomholeField!=null)
                return AvgMaterialUseRateBottomholeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> AvgMaterialUseRateBottomholeField; 

        /// <summary>
        /// AvgN2BaseFluidQuality property
        /// </summary>
		[Description("Base quality nitrogen percentage of foam.")]
        [ComponentElement]
		[XmlElement("AvgN2BaseFluidQuality")]
        public VolumePerVolumeMeasure AvgN2BaseFluidQuality {
            get {
                return AvgN2BaseFluidQualityField;
            } 
            set {
                AvgN2BaseFluidQualityField = value;
                NotifyPropertyChanged("AvgN2BaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasure AvgN2BaseFluidQualityField; 

        /// <summary>
        /// AvgPresBottomhole property
        /// </summary>
		[Description("Average bottomhole pressure.")]
        [ComponentElement]
		[XmlElement("AvgPresBottomhole")]
        public PressureMeasure AvgPresBottomhole {
            get {
                return AvgPresBottomholeField;
            } 
            set {
                AvgPresBottomholeField = value;
                NotifyPropertyChanged("AvgPresBottomhole");
            }
        }

        private PressureMeasure AvgPresBottomholeField; 

        /// <summary>
        /// AvgPresSurface property
        /// </summary>
		[Description("Average surface pressure.")]
        [ComponentElement]
		[XmlElement("AvgPresSurface")]
        public PressureMeasure AvgPresSurface {
            get {
                return AvgPresSurfaceField;
            } 
            set {
                AvgPresSurfaceField = value;
                NotifyPropertyChanged("AvgPresSurface");
            }
        }

        private PressureMeasure AvgPresSurfaceField; 

        /// <summary>
        /// AvgPropConc property
        /// </summary>
		[Description("Average proppant concentration at the wellhead.  PPA (pounds proppant added per volume measure) kgpa (kilograms proppant added per volume measure)")]
        [ComponentElement]
		[XmlElement("AvgPropConc")]
        public MassPerVolumeMeasure AvgPropConc {
            get {
                return AvgPropConcField;
            } 
            set {
                AvgPropConcField = value;
                NotifyPropertyChanged("AvgPropConc");
            }
        }

        private MassPerVolumeMeasure AvgPropConcField; 

        /// <summary>
        /// AvgProppantConcBottomhole property
        /// </summary>
		[Description("The average proppant concentration bottomhole.")]
        [ComponentElement]
		[XmlElement("AvgProppantConcBottomhole")]
        public MassPerVolumeMeasure AvgProppantConcBottomhole {
            get {
                return AvgProppantConcBottomholeField;
            } 
            set {
                AvgProppantConcBottomholeField = value;
                NotifyPropertyChanged("AvgProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure AvgProppantConcBottomholeField; 

        /// <summary>
        /// AvgProppantConcSurface property
        /// </summary>
		[Description("The average proppant concentration at the surface.")]
        [ComponentElement]
		[XmlElement("AvgProppantConcSurface")]
        public MassPerVolumeMeasure AvgProppantConcSurface {
            get {
                return AvgProppantConcSurfaceField;
            } 
            set {
                AvgProppantConcSurfaceField = value;
                NotifyPropertyChanged("AvgProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure AvgProppantConcSurfaceField; 

        /// <summary>
        /// AvgSlurryPropConc property
        /// </summary>
		[Description("Average proppant concentration exiting equipment.")]
        [ComponentElement]
		[XmlElement("AvgSlurryPropConc")]
        public MassPerVolumeMeasure AvgSlurryPropConc {
            get {
                return AvgSlurryPropConcField;
            } 
            set {
                AvgSlurryPropConcField = value;
                NotifyPropertyChanged("AvgSlurryPropConc");
            }
        }

        private MassPerVolumeMeasure AvgSlurryPropConcField; 

        /// <summary>
        /// AvgSlurryRate property
        /// </summary>
		[Description("Average slurry return rate.")]
        [ComponentElement]
		[XmlElement("AvgSlurryRate")]
        public VolumePerTimeMeasure AvgSlurryRate {
            get {
                return AvgSlurryRateField;
            } 
            set {
                AvgSlurryRateField = value;
                NotifyPropertyChanged("AvgSlurryRate");
            }
        }

        private VolumePerTimeMeasure AvgSlurryRateField; 

        /// <summary>
        /// AvgTemperature property
        /// </summary>
		[Description("Average fluid temperature.")]
        [ComponentElement]
		[XmlElement("AvgTemperature")]
        public ThermodynamicTemperatureMeasure AvgTemperature {
            get {
                return AvgTemperatureField;
            } 
            set {
                AvgTemperatureField = value;
                NotifyPropertyChanged("AvgTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure AvgTemperatureField; 

        /// <summary>
        /// AvgVolumeRateWellhead property
        /// </summary>
		[Description("Average volume per minute at the wellhead.")]
        [ComponentElement]
		[XmlElement("AvgVolumeRateWellhead")]
        public VolumePerTimeMeasure AvgVolumeRateWellhead {
            get {
                return AvgVolumeRateWellheadField;
            } 
            set {
                AvgVolumeRateWellheadField = value;
                NotifyPropertyChanged("AvgVolumeRateWellhead");
            }
        }

        private VolumePerTimeMeasure AvgVolumeRateWellheadField; 

        /// <summary>
        /// BallsRecovered property
        /// </summary>
		[Description("Balls recovered during execution of the step.")]
		[XmlElement("BallsRecovered")]
        public Int64? BallsRecovered {
            get {
                return BallsRecoveredField;
            } 
            set {
                BallsRecoveredField = value;
             if(value!=null) 
                 this.BallsRecoveredSpecified = true;
                NotifyPropertyChanged("BallsRecovered");
            }
        }

        private Int64? BallsRecoveredField; 

        /// <summary>
        /// BallsRecoveredSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean BallsRecoveredSpecified {
            get {
                return BallsRecoveredSpecifiedField;
            } 
            set {
                BallsRecoveredSpecifiedField = value;
                NotifyPropertyChanged("BallsRecoveredSpecified");
            }
        }

        private Boolean BallsRecoveredSpecifiedField; 

        /// <summary>
        /// BallsUsed property
        /// </summary>
		[Description("Balls used during execution of the step.")]
		[XmlElement("BallsUsed")]
        public Int64? BallsUsed {
            get {
                return BallsUsedField;
            } 
            set {
                BallsUsedField = value;
             if(value!=null) 
                 this.BallsUsedSpecified = true;
                NotifyPropertyChanged("BallsUsed");
            }
        }

        private Int64? BallsUsedField; 

        /// <summary>
        /// BallsUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean BallsUsedSpecified {
            get {
                return BallsUsedSpecifiedField;
            } 
            set {
                BallsUsedSpecifiedField = value;
                NotifyPropertyChanged("BallsUsedSpecified");
            }
        }

        private Boolean BallsUsedSpecifiedField; 

        /// <summary>
        /// BaseFluidBypassVol property
        /// </summary>
		[Description("Base fluid volume recorded after equipment set to bypass.")]
        [ComponentElement]
		[XmlElement("BaseFluidBypassVol")]
        public VolumeMeasure BaseFluidBypassVol {
            get {
                return BaseFluidBypassVolField;
            } 
            set {
                BaseFluidBypassVolField = value;
                NotifyPropertyChanged("BaseFluidBypassVol");
            }
        }

        private VolumeMeasure BaseFluidBypassVolField; 

        /// <summary>
        /// BaseFluidVol property
        /// </summary>
		[Description("Base fluid volume entering equipment.")]
        [ComponentElement]
		[XmlElement("BaseFluidVol")]
        public VolumeMeasure BaseFluidVol {
            get {
                return BaseFluidVolField;
            } 
            set {
                BaseFluidVolField = value;
                NotifyPropertyChanged("BaseFluidVol");
            }
        }

        private VolumeMeasure BaseFluidVolField; 

        /// <summary>
        /// EndDirtyMaterialRate property
        /// </summary>
		[Description("Ending dirty fluid pump volume per minute.")]
        [ComponentElement]
		[XmlElement("EndDirtyMaterialRate")]
        public VolumePerTimeMeasure EndDirtyMaterialRate {
            get {
                return EndDirtyMaterialRateField;
            } 
            set {
                EndDirtyMaterialRateField = value;
                NotifyPropertyChanged("EndDirtyMaterialRate");
            }
        }

        private VolumePerTimeMeasure EndDirtyMaterialRateField; 

        /// <summary>
        /// EndMaterialUsedRate property
        /// </summary>
		[Description("Ending quantity of material used per minute entering the flow stream.")]
        [RecurringElement]
		[XmlElement("EndMaterialUsedRate")]
        public List<StimMaterialQuantity> EndMaterialUsedRate {
            get {
                return EndMaterialUsedRateField;
            } 
            set {
                EndMaterialUsedRateField = value;
                NotifyPropertyChanged("EndMaterialUsedRate");
            }
        }

         [XmlIgnore]
         public bool EndMaterialUsedRateSpecified
         {
            get {
             if(EndMaterialUsedRateField!=null)
                return EndMaterialUsedRateField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> EndMaterialUsedRateField; 

        /// <summary>
        /// EndMaterialUsedRateBottomhole property
        /// </summary>
		[Description("Ending quantity of material used per minute at bottomhole.")]
        [RecurringElement]
		[XmlElement("EndMaterialUsedRateBottomhole")]
        public List<StimMaterialQuantity> EndMaterialUsedRateBottomhole {
            get {
                return EndMaterialUsedRateBottomholeField;
            } 
            set {
                EndMaterialUsedRateBottomholeField = value;
                NotifyPropertyChanged("EndMaterialUsedRateBottomhole");
            }
        }

         [XmlIgnore]
         public bool EndMaterialUsedRateBottomholeSpecified
         {
            get {
             if(EndMaterialUsedRateBottomholeField!=null)
                return EndMaterialUsedRateBottomholeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> EndMaterialUsedRateBottomholeField; 

        /// <summary>
        /// EndPresBottomhole property
        /// </summary>
		[Description("Final bottomhole pressure.")]
        [ComponentElement]
		[XmlElement("EndPresBottomhole")]
        public PressureMeasure EndPresBottomhole {
            get {
                return EndPresBottomholeField;
            } 
            set {
                EndPresBottomholeField = value;
                NotifyPropertyChanged("EndPresBottomhole");
            }
        }

        private PressureMeasure EndPresBottomholeField; 

        /// <summary>
        /// EndPresSurface property
        /// </summary>
		[Description("Final surface pressure.")]
        [ComponentElement]
		[XmlElement("EndPresSurface")]
        public PressureMeasure EndPresSurface {
            get {
                return EndPresSurfaceField;
            } 
            set {
                EndPresSurfaceField = value;
                NotifyPropertyChanged("EndPresSurface");
            }
        }

        private PressureMeasure EndPresSurfaceField; 

        /// <summary>
        /// EndProppantConcBottomhole property
        /// </summary>
		[Description("The final proppant concentration bottomhole.")]
        [ComponentElement]
		[XmlElement("EndProppantConcBottomhole")]
        public MassPerVolumeMeasure EndProppantConcBottomhole {
            get {
                return EndProppantConcBottomholeField;
            } 
            set {
                EndProppantConcBottomholeField = value;
                NotifyPropertyChanged("EndProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure EndProppantConcBottomholeField; 

        /// <summary>
        /// EndProppantConcSurface property
        /// </summary>
		[Description("The final proppant concentration at the surface.")]
        [ComponentElement]
		[XmlElement("EndProppantConcSurface")]
        public MassPerVolumeMeasure EndProppantConcSurface {
            get {
                return EndProppantConcSurfaceField;
            } 
            set {
                EndProppantConcSurfaceField = value;
                NotifyPropertyChanged("EndProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure EndProppantConcSurfaceField; 

        /// <summary>
        /// EndRateSurfaceCO2 property
        /// </summary>
		[Description("Final CO2 pump rate in volume per time at the surface.")]
		[XmlElement("EndRateSurfaceCO2")]
        public String EndRateSurfaceCO2 {
            get {
                return EndRateSurfaceCO2Field;
            } 
            set {
                EndRateSurfaceCO2Field = value;
                NotifyPropertyChanged("EndRateSurfaceCO2");
            }
        }

        private String EndRateSurfaceCO2Field; 

        /// <summary>
        /// EndStdRateSurfaceN2 property
        /// </summary>
		[Description("Final nitrogen pump rate in volume per time at the surface.")]
        [ComponentElement]
		[XmlElement("EndStdRateSurfaceN2")]
        public VolumePerTimeMeasure EndStdRateSurfaceN2 {
            get {
                return EndStdRateSurfaceN2Field;
            } 
            set {
                EndStdRateSurfaceN2Field = value;
                NotifyPropertyChanged("EndStdRateSurfaceN2");
            }
        }

        private VolumePerTimeMeasure EndStdRateSurfaceN2Field; 

        /// <summary>
        /// FluidVolBase property
        /// </summary>
		[Description("The step volume of the base step.")]
        [ComponentElement]
		[XmlElement("FluidVolBase")]
        public VolumeMeasure FluidVolBase {
            get {
                return FluidVolBaseField;
            } 
            set {
                FluidVolBaseField = value;
                NotifyPropertyChanged("FluidVolBase");
            }
        }

        private VolumeMeasure FluidVolBaseField; 

        /// <summary>
        /// FluidVolCirculated property
        /// </summary>
		[Description("Fluid volume circulated.")]
        [ComponentElement]
		[XmlElement("FluidVolCirculated")]
        public VolumeMeasure FluidVolCirculated {
            get {
                return FluidVolCirculatedField;
            } 
            set {
                FluidVolCirculatedField = value;
                NotifyPropertyChanged("FluidVolCirculated");
            }
        }

        private VolumeMeasure FluidVolCirculatedField; 

        /// <summary>
        /// FluidVolPumped property
        /// </summary>
		[Description("Fluid volume pumped.")]
        [ComponentElement]
		[XmlElement("FluidVolPumped")]
        public VolumeMeasure FluidVolPumped {
            get {
                return FluidVolPumpedField;
            } 
            set {
                FluidVolPumpedField = value;
                NotifyPropertyChanged("FluidVolPumped");
            }
        }

        private VolumeMeasure FluidVolPumpedField; 

        /// <summary>
        /// FluidVolReturned property
        /// </summary>
		[Description("Fluid volume returned.")]
        [ComponentElement]
		[XmlElement("FluidVolReturned")]
        public VolumeMeasure FluidVolReturned {
            get {
                return FluidVolReturnedField;
            } 
            set {
                FluidVolReturnedField = value;
                NotifyPropertyChanged("FluidVolReturned");
            }
        }

        private VolumeMeasure FluidVolReturnedField; 

        /// <summary>
        /// FluidVolSlurry property
        /// </summary>
		[Description("The volume of the slurry (dirty) step.")]
        [ComponentElement]
		[XmlElement("FluidVolSlurry")]
        public VolumeMeasure FluidVolSlurry {
            get {
                return FluidVolSlurryField;
            } 
            set {
                FluidVolSlurryField = value;
                NotifyPropertyChanged("FluidVolSlurry");
            }
        }

        private VolumeMeasure FluidVolSlurryField; 

        /// <summary>
        /// FluidVolSqueezed property
        /// </summary>
		[Description("Fluid volume squeezed.")]
        [ComponentElement]
		[XmlElement("FluidVolSqueezed")]
        public VolumeMeasure FluidVolSqueezed {
            get {
                return FluidVolSqueezedField;
            } 
            set {
                FluidVolSqueezedField = value;
                NotifyPropertyChanged("FluidVolSqueezed");
            }
        }

        private VolumeMeasure FluidVolSqueezedField; 

        /// <summary>
        /// FluidVolWashed property
        /// </summary>
		[Description("Fluid volume washed.")]
        [ComponentElement]
		[XmlElement("FluidVolWashed")]
        public VolumeMeasure FluidVolWashed {
            get {
                return FluidVolWashedField;
            } 
            set {
                FluidVolWashedField = value;
                NotifyPropertyChanged("FluidVolWashed");
            }
        }

        private VolumeMeasure FluidVolWashedField; 

        /// <summary>
        /// FractureGradientFinal property
        /// </summary>
		[Description("The fracture gradient at the end time of the step.")]
        [ComponentElement]
		[XmlElement("FractureGradientFinal")]
        public ForcePerVolumeMeasure FractureGradientFinal {
            get {
                return FractureGradientFinalField;
            } 
            set {
                FractureGradientFinalField = value;
                NotifyPropertyChanged("FractureGradientFinal");
            }
        }

        private ForcePerVolumeMeasure FractureGradientFinalField; 

        /// <summary>
        /// FractureGradientInitial property
        /// </summary>
		[Description("The fracture gradient prior at the start time of the step.")]
        [ComponentElement]
		[XmlElement("FractureGradientInitial")]
        public ForcePerVolumeMeasure FractureGradientInitial {
            get {
                return FractureGradientInitialField;
            } 
            set {
                FractureGradientInitialField = value;
                NotifyPropertyChanged("FractureGradientInitial");
            }
        }

        private ForcePerVolumeMeasure FractureGradientInitialField; 

        /// <summary>
        /// FrictionFactor property
        /// </summary>
		[Description("Numeric value used to scale a calculated rheological friction.")]
        [ComponentElement]
		[XmlElement("FrictionFactor")]
        public DimensionlessMeasure FrictionFactor {
            get {
                return FrictionFactorField;
            } 
            set {
                FrictionFactorField = value;
                NotifyPropertyChanged("FrictionFactor");
            }
        }

        private DimensionlessMeasure FrictionFactorField; 

        /// <summary>
        /// MaxHydraulicPower property
        /// </summary>
		[Description("Maximum hydraulic power used during the step.")]
        [ComponentElement]
		[XmlElement("MaxHydraulicPower")]
        public PowerMeasure MaxHydraulicPower {
            get {
                return MaxHydraulicPowerField;
            } 
            set {
                MaxHydraulicPowerField = value;
                NotifyPropertyChanged("MaxHydraulicPower");
            }
        }

        private PowerMeasure MaxHydraulicPowerField; 

        /// <summary>
        /// MaxPresSurface property
        /// </summary>
		[Description("Maximum pumping pressure on surface.")]
        [ComponentElement]
		[XmlElement("MaxPresSurface")]
        public PressureMeasure MaxPresSurface {
            get {
                return MaxPresSurfaceField;
            } 
            set {
                MaxPresSurfaceField = value;
                NotifyPropertyChanged("MaxPresSurface");
            }
        }

        private PressureMeasure MaxPresSurfaceField; 

        /// <summary>
        /// MaxProppantConcBottomhole property
        /// </summary>
		[Description("Maximum proppant concentration at the bottom during the stimulation step.")]
        [ComponentElement]
		[XmlElement("MaxProppantConcBottomhole")]
        public MassPerVolumeMeasure MaxProppantConcBottomhole {
            get {
                return MaxProppantConcBottomholeField;
            } 
            set {
                MaxProppantConcBottomholeField = value;
                NotifyPropertyChanged("MaxProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure MaxProppantConcBottomholeField; 

        /// <summary>
        /// MaxProppantConcSurface property
        /// </summary>
		[Description("Maximum proppant concentration at the wellhead.")]
        [ComponentElement]
		[XmlElement("MaxProppantConcSurface")]
        public MassPerVolumeMeasure MaxProppantConcSurface {
            get {
                return MaxProppantConcSurfaceField;
            } 
            set {
                MaxProppantConcSurfaceField = value;
                NotifyPropertyChanged("MaxProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure MaxProppantConcSurfaceField; 

        /// <summary>
        /// MaxSlurryPropConc property
        /// </summary>
		[Description("Maximum proppant concentration exiting equipment.")]
        [ComponentElement]
		[XmlElement("MaxSlurryPropConc")]
        public MassPerVolumeMeasure MaxSlurryPropConc {
            get {
                return MaxSlurryPropConcField;
            } 
            set {
                MaxSlurryPropConcField = value;
                NotifyPropertyChanged("MaxSlurryPropConc");
            }
        }

        private MassPerVolumeMeasure MaxSlurryPropConcField; 

        /// <summary>
        /// MaxVolumeRateWellhead property
        /// </summary>
		[Description("Maximum volume per minute at the wellhead.")]
        [ComponentElement]
		[XmlElement("MaxVolumeRateWellhead")]
        public VolumePerTimeMeasure MaxVolumeRateWellhead {
            get {
                return MaxVolumeRateWellheadField;
            } 
            set {
                MaxVolumeRateWellheadField = value;
                NotifyPropertyChanged("MaxVolumeRateWellhead");
            }
        }

        private VolumePerTimeMeasure MaxVolumeRateWellheadField; 

        /// <summary>
        /// PipeFrictionPressure property
        /// </summary>
		[Description("The friction pressure contribution from pipes.")]
        [ComponentElement]
		[XmlElement("PipeFrictionPressure")]
        public PressureMeasure PipeFrictionPressure {
            get {
                return PipeFrictionPressureField;
            } 
            set {
                PipeFrictionPressureField = value;
                NotifyPropertyChanged("PipeFrictionPressure");
            }
        }

        private PressureMeasure PipeFrictionPressureField; 

        /// <summary>
        /// PumpTime property
        /// </summary>
		[Description("Total pumping time for the step.")]
        [ComponentElement]
		[XmlElement("PumpTime")]
        public TimeMeasure PumpTime {
            get {
                return PumpTimeField;
            } 
            set {
                PumpTimeField = value;
                NotifyPropertyChanged("PumpTime");
            }
        }

        private TimeMeasure PumpTimeField; 

        /// <summary>
        /// StartDirtyMaterialRate property
        /// </summary>
		[Description("Starting dirty fluid volume per minute.")]
        [ComponentElement]
		[XmlElement("StartDirtyMaterialRate")]
        public VolumePerTimeMeasure StartDirtyMaterialRate {
            get {
                return StartDirtyMaterialRateField;
            } 
            set {
                StartDirtyMaterialRateField = value;
                NotifyPropertyChanged("StartDirtyMaterialRate");
            }
        }

        private VolumePerTimeMeasure StartDirtyMaterialRateField; 

        /// <summary>
        /// StartMaterialUsedRate property
        /// </summary>
		[Description("Starting quantity of material used per minute entering the flow stream.")]
        [RecurringElement]
		[XmlElement("StartMaterialUsedRate")]
        public List<StimMaterialQuantity> StartMaterialUsedRate {
            get {
                return StartMaterialUsedRateField;
            } 
            set {
                StartMaterialUsedRateField = value;
                NotifyPropertyChanged("StartMaterialUsedRate");
            }
        }

         [XmlIgnore]
         public bool StartMaterialUsedRateSpecified
         {
            get {
             if(StartMaterialUsedRateField!=null)
                return StartMaterialUsedRateField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> StartMaterialUsedRateField; 

        /// <summary>
        /// StartMaterialUsedRateBottomHole property
        /// </summary>
		[Description("Starting quantity of material used per minute at bottomhole.")]
        [RecurringElement]
		[XmlElement("StartMaterialUsedRateBottomHole")]
        public List<StimMaterialQuantity> StartMaterialUsedRateBottomHole {
            get {
                return StartMaterialUsedRateBottomHoleField;
            } 
            set {
                StartMaterialUsedRateBottomHoleField = value;
                NotifyPropertyChanged("StartMaterialUsedRateBottomHole");
            }
        }

         [XmlIgnore]
         public bool StartMaterialUsedRateBottomHoleSpecified
         {
            get {
             if(StartMaterialUsedRateBottomHoleField!=null)
                return StartMaterialUsedRateBottomHoleField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> StartMaterialUsedRateBottomHoleField; 

        /// <summary>
        /// StartPresBottomhole property
        /// </summary>
		[Description("Starting bottomhole pressure.")]
        [ComponentElement]
		[XmlElement("StartPresBottomhole")]
        public PressureMeasure StartPresBottomhole {
            get {
                return StartPresBottomholeField;
            } 
            set {
                StartPresBottomholeField = value;
                NotifyPropertyChanged("StartPresBottomhole");
            }
        }

        private PressureMeasure StartPresBottomholeField; 

        /// <summary>
        /// StartPresSurface property
        /// </summary>
		[Description("Starting surface pressure.")]
        [ComponentElement]
		[XmlElement("StartPresSurface")]
        public PressureMeasure StartPresSurface {
            get {
                return StartPresSurfaceField;
            } 
            set {
                StartPresSurfaceField = value;
                NotifyPropertyChanged("StartPresSurface");
            }
        }

        private PressureMeasure StartPresSurfaceField; 

        /// <summary>
        /// StartProppantConcBottomhole property
        /// </summary>
		[Description("The beginning proppant concentration bottomhole.")]
        [ComponentElement]
		[XmlElement("StartProppantConcBottomhole")]
        public MassPerVolumeMeasure StartProppantConcBottomhole {
            get {
                return StartProppantConcBottomholeField;
            } 
            set {
                StartProppantConcBottomholeField = value;
                NotifyPropertyChanged("StartProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure StartProppantConcBottomholeField; 

        /// <summary>
        /// StartProppantConcSurface property
        /// </summary>
		[Description("The beginning proppant concentration at the surface.")]
        [ComponentElement]
		[XmlElement("StartProppantConcSurface")]
        public MassPerVolumeMeasure StartProppantConcSurface {
            get {
                return StartProppantConcSurfaceField;
            } 
            set {
                StartProppantConcSurfaceField = value;
                NotifyPropertyChanged("StartProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure StartProppantConcSurfaceField; 

        /// <summary>
        /// WellheadVol property
        /// </summary>
		[Description("Slurry volume entering the well.")]
        [ComponentElement]
		[XmlElement("WellheadVol")]
        public VolumeMeasure WellheadVol {
            get {
                return WellheadVolField;
            } 
            set {
                WellheadVolField = value;
                NotifyPropertyChanged("WellheadVol");
            }
        }

        private VolumeMeasure WellheadVolField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// MaterialUsed property
        /// </summary>
		[Description("Material used during the step")]
        [RecurringElement]
		[XmlElement("MaterialUsed")]
        public List<StimMaterialQuantity> MaterialUsed {
            get {
                return MaterialUsedField;
            } 
            set {
                MaterialUsedField = value;
                NotifyPropertyChanged("MaterialUsed");
            }
        }

         [XmlIgnore]
         public bool MaterialUsedSpecified
         {
            get {
             if(MaterialUsedField!=null)
                return MaterialUsedField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> MaterialUsedField; 

        /// <summary>
        /// MaxMaterialUsedRate property
        /// </summary>
		[RecurringElement]
		[XmlElement("MaxMaterialUsedRate")]
        public List<StimMaterialQuantity> MaxMaterialUsedRate {
            get {
                return MaxMaterialUsedRateField;
            } 
            set {
                MaxMaterialUsedRateField = value;
                NotifyPropertyChanged("MaxMaterialUsedRate");
            }
        }

         [XmlIgnore]
         public bool MaxMaterialUsedRateSpecified
         {
            get {
             if(MaxMaterialUsedRateField!=null)
                return MaxMaterialUsedRateField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> MaxMaterialUsedRateField; 

        /// <summary>
        /// Fluid property
        /// </summary>
		[ComponentElement]
		[XmlElement("Fluid")]
        public StimFluid Fluid {
            get {
                return FluidField;
            } 
            set {
                FluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

        private StimFluid FluidField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimJobStep")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PowerMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PowerMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PowerMeasure xsd type.")]
    public partial class PowerMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PowerMeasure class.
        /// </summary>
        public PowerMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PowerMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PowerMeasure(Double value, PowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PowerUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PowerUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TimeMeasure xsd type.")]
    public partial class TimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        public TimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public TimeMeasure(Double value, TimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public TimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private TimeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimEvent xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimEvent", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimEvent xsd type.")]
    public partial class StimEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Number property
        /// </summary>
		[Required]
        [Description("Event number.")]
		[XmlElement("Number")]
        public Int64? Number {
            get {
                return NumberField;
            } 
            set {
                NumberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private Int64? NumberField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date time of this event.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A short description of the event.")]
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 

        /// <summary>
        /// NumStep property
        /// </summary>
		[Description("Step number - use to reference an existing job step entry.")]
		[XmlElement("NumStep")]
        public Int64? NumStep {
            get {
                return NumStepField;
            } 
            set {
                NumStepField = value;
             if(value!=null) 
                 this.NumStepSpecified = true;
                NotifyPropertyChanged("NumStep");
            }
        }

        private Int64? NumStepField; 

        /// <summary>
        /// NumStepSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumStepSpecified {
            get {
                return NumStepSpecifiedField;
            } 
            set {
                NumStepSpecifiedField = value;
                NotifyPropertyChanged("NumStepSpecified");
            }
        }

        private Boolean NumStepSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimEvent")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimShutInPressure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimShutInPressure", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimShutInPressure xsd type.")]
    public partial class StimShutInPressure : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Pressure property
        /// </summary>
		[Required]
        [Description("The shut in pressure.")]
        [ComponentElement]
		[XmlElement("Pressure")]
        public PressureMeasure Pressure {
            get {
                return PressureField;
            } 
            set {
                PressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure PressureField; 

        /// <summary>
        /// TimeAfterShutin property
        /// </summary>
		[Required]
        [Description("The time span after shutin at which the pressure was measured.")]
        [ComponentElement]
		[XmlElement("TimeAfterShutin")]
        public TimeMeasure TimeAfterShutin {
            get {
                return TimeAfterShutinField;
            } 
            set {
                TimeAfterShutinField = value;
                NotifyPropertyChanged("TimeAfterShutin");
            }
        }

        private TimeMeasure TimeAfterShutinField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimShutInPressure")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimPumpFlowBackTest xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimPumpFlowBackTest", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimPumpFlowBackTest xsd type.")]
    public partial class StimPumpFlowBackTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Start time for the test.")]
		[XmlElement("DTimEnd")]
        public String DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private String DTimEndField; 

        /// <summary>
        /// FlowBackVolume property
        /// </summary>
		[Description("Total volume recovered during flow back test.")]
        [ComponentElement]
		[XmlElement("FlowBackVolume")]
        public VolumeMeasure FlowBackVolume {
            get {
                return FlowBackVolumeField;
            } 
            set {
                FlowBackVolumeField = value;
                NotifyPropertyChanged("FlowBackVolume");
            }
        }

        private VolumeMeasure FlowBackVolumeField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Start time for the test.")]
		[XmlElement("DTimStart")]
        public String DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private String DTimStartField; 

        /// <summary>
        /// FractureCloseDuration property
        /// </summary>
		[Description("The time required for the fracture width to become zero.")]
        [ComponentElement]
		[XmlElement("FractureCloseDuration")]
        public TimeMeasure FractureCloseDuration {
            get {
                return FractureCloseDurationField;
            } 
            set {
                FractureCloseDurationField = value;
                NotifyPropertyChanged("FractureCloseDuration");
            }
        }

        private TimeMeasure FractureCloseDurationField; 

        /// <summary>
        /// PresCasing property
        /// </summary>
		[Description("Casing pressure.")]
        [ComponentElement]
		[XmlElement("PresCasing")]
        public PressureMeasure PresCasing {
            get {
                return PresCasingField;
            } 
            set {
                PresCasingField = value;
                NotifyPropertyChanged("PresCasing");
            }
        }

        private PressureMeasure PresCasingField; 

        /// <summary>
        /// PresTubing property
        /// </summary>
		[Description("Tubing pressure.")]
        [ComponentElement]
		[XmlElement("PresTubing")]
        public PressureMeasure PresTubing {
            get {
                return PresTubingField;
            } 
            set {
                PresTubingField = value;
                NotifyPropertyChanged("PresTubing");
            }
        }

        private PressureMeasure PresTubingField; 

        /// <summary>
        /// FractureClosePres property
        /// </summary>
		[Description("The pressure when the fracture width becomes zero.")]
        [ComponentElement]
		[XmlElement("FractureClosePres")]
        public PressureMeasure FractureClosePres {
            get {
                return FractureClosePresField;
            } 
            set {
                FractureClosePresField = value;
                NotifyPropertyChanged("FractureClosePres");
            }
        }

        private PressureMeasure FractureClosePresField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Step property
        /// </summary>
		[RecurringElement]
		[XmlElement("Step")]
        public List<StimPumpFlowBackTestStep> Step {
            get {
                return StepField;
            } 
            set {
                StepField = value;
                NotifyPropertyChanged("Step");
            }
        }

         [XmlIgnore]
         public bool StepSpecified
         {
            get {
             if(StepField!=null)
                return StepField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimPumpFlowBackTestStep> StepField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimPumpFlowBackTest")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimPumpFlowBackTestStep xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimPumpFlowBackTestStep", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimPumpFlowBackTestStep xsd type.")]
    public partial class StimPumpFlowBackTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Time stamp of the pressure measurement.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// FlowbackVolume property
        /// </summary>
		[Description("Volume of flowback since start of test.")]
        [ComponentElement]
		[XmlElement("FlowbackVolume")]
        public VolumeMeasure FlowbackVolume {
            get {
                return FlowbackVolumeField;
            } 
            set {
                FlowbackVolumeField = value;
                NotifyPropertyChanged("FlowbackVolume");
            }
        }

        private VolumeMeasure FlowbackVolumeField; 

        /// <summary>
        /// FlowbackVolumeRate property
        /// </summary>
		[Description("Flowback Rate.")]
        [ComponentElement]
		[XmlElement("FlowbackVolumeRate")]
        public VolumePerTimeMeasure FlowbackVolumeRate {
            get {
                return FlowbackVolumeRateField;
            } 
            set {
                FlowbackVolumeRateField = value;
                NotifyPropertyChanged("FlowbackVolumeRate");
            }
        }

        private VolumePerTimeMeasure FlowbackVolumeRateField; 

        /// <summary>
        /// Number property
        /// </summary>
		[Required]
        [Description("The number of the step. Identifies the step within the step down test.")]
		[XmlElement("Number")]
        public Int64? Number {
            get {
                return NumberField;
            } 
            set {
                NumberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private Int64? NumberField; 

        /// <summary>
        /// BottomholeRate property
        /// </summary>
		[Description("Bottomhole flow rate for the specific step.")]
        [ComponentElement]
		[XmlElement("BottomholeRate")]
        public VolumePerTimeMeasure BottomholeRate {
            get {
                return BottomholeRateField;
            } 
            set {
                BottomholeRateField = value;
                NotifyPropertyChanged("BottomholeRate");
            }
        }

        private VolumePerTimeMeasure BottomholeRateField; 

        /// <summary>
        /// Pres property
        /// </summary>
		[Description("Surface pressure measured for the specific step.")]
        [ComponentElement]
		[XmlElement("Pres")]
        public PressureMeasure Pres {
            get {
                return PresField;
            } 
            set {
                PresField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure PresField; 

        /// <summary>
        /// PipeFriction property
        /// </summary>
		[Description("Calculated pipe friction for the specific step.")]
        [ComponentElement]
		[XmlElement("PipeFriction")]
        public PressureMeasure PipeFriction {
            get {
                return PipeFrictionField;
            } 
            set {
                PipeFrictionField = value;
                NotifyPropertyChanged("PipeFriction");
            }
        }

        private PressureMeasure PipeFrictionField; 

        /// <summary>
        /// EntryFriction property
        /// </summary>
		[Description("Calculated entry friction accounting for perforation and near  wellbore restrictions for the specific step.")]
        [ComponentElement]
		[XmlElement("EntryFriction")]
        public PressureMeasure EntryFriction {
            get {
                return EntryFrictionField;
            } 
            set {
                EntryFrictionField = value;
                NotifyPropertyChanged("EntryFriction");
            }
        }

        private PressureMeasure EntryFrictionField; 

        /// <summary>
        /// PerfFriction property
        /// </summary>
		[Description("Calculated perforation friction for the specific step.")]
        [ComponentElement]
		[XmlElement("PerfFriction")]
        public PressureMeasure PerfFriction {
            get {
                return PerfFrictionField;
            } 
            set {
                PerfFrictionField = value;
                NotifyPropertyChanged("PerfFriction");
            }
        }

        private PressureMeasure PerfFrictionField; 

        /// <summary>
        /// NearWellboreFriction property
        /// </summary>
		[Description("Calculated Near WellBore friction loss.")]
        [ComponentElement]
		[XmlElement("NearWellboreFriction")]
        public PressureMeasure NearWellboreFriction {
            get {
                return NearWellboreFrictionField;
            } 
            set {
                NearWellboreFrictionField = value;
                NotifyPropertyChanged("NearWellboreFriction");
            }
        }

        private PressureMeasure NearWellboreFrictionField; 

        /// <summary>
        /// SurfaceRate property
        /// </summary>
		[Description("Surface rate entering the well for the specific step.")]
        [ComponentElement]
		[XmlElement("SurfaceRate")]
        public VolumePerTimeMeasure SurfaceRate {
            get {
                return SurfaceRateField;
            } 
            set {
                SurfaceRateField = value;
                NotifyPropertyChanged("SurfaceRate");
            }
        }

        private VolumePerTimeMeasure SurfaceRateField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimPumpFlowBackTestStep")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimPressureFlowRate xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimPressureFlowRate", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimPressureFlowRate xsd type.")]
    public partial class StimPressureFlowRate : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Pressure property
        /// </summary>
		[Description("The pressure of the step test.")]
        [ComponentElement]
		[XmlElement("Pressure")]
        public PressureMeasure Pressure {
            get {
                return PressureField;
            } 
            set {
                PressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure PressureField; 

        /// <summary>
        /// BottomholeRate property
        /// </summary>
		[Description("The flow of the fluid at the bottomhole.")]
        [ComponentElement]
		[XmlElement("BottomholeRate")]
        public VolumePerTimeMeasure BottomholeRate {
            get {
                return BottomholeRateField;
            } 
            set {
                BottomholeRateField = value;
                NotifyPropertyChanged("BottomholeRate");
            }
        }

        private VolumePerTimeMeasure BottomholeRateField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<String> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimPressureFlowRate")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimStepTest xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimStepTest", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimStepTest xsd type.")]
    public partial class StimStepTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// FractureExtensionPres property
        /// </summary>
		[Description("The pressure necessary to extend the fracture once initiated.  The fracture extension pressure may rise slightly with increasing fracture length and/or  height because of friction pressure drop down the length of the fracture.")]
        [ComponentElement]
		[XmlElement("FractureExtensionPres")]
        public PressureMeasure FractureExtensionPres {
            get {
                return FractureExtensionPresField;
            } 
            set {
                FractureExtensionPresField = value;
                NotifyPropertyChanged("FractureExtensionPres");
            }
        }

        private PressureMeasure FractureExtensionPresField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// PresMeasurement property
        /// </summary>
		[Description("A pressure and fluid rate data reading.")]
        [RecurringElement]
		[XmlElement("PresMeasurement")]
        public List<StimPressureFlowRate> PresMeasurement {
            get {
                return PresMeasurementField;
            } 
            set {
                PresMeasurementField = value;
                NotifyPropertyChanged("PresMeasurement");
            }
        }

         [XmlIgnore]
         public bool PresMeasurementSpecified
         {
            get {
             if(PresMeasurementField!=null)
                return PresMeasurementField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimPressureFlowRate> PresMeasurementField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimStepTest")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimStepDownTest xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimStepDownTest", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimStepDownTest xsd type.")]
    public partial class StimStepDownTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// InitialShutinPres property
        /// </summary>
		[Description("The initial shutin pressure.")]
        [ComponentElement]
		[XmlElement("InitialShutinPres")]
        public PressureMeasure InitialShutinPres {
            get {
                return InitialShutinPresField;
            } 
            set {
                InitialShutinPresField = value;
                NotifyPropertyChanged("InitialShutinPres");
            }
        }

        private PressureMeasure InitialShutinPresField; 

        /// <summary>
        /// BottomholeFluidDensity property
        /// </summary>
		[Description("The density of the fluid at the bottom of the hole adjusting for bottomhole temperature and pressure during the step test.")]
        [ComponentElement]
		[XmlElement("BottomholeFluidDensity")]
        public MassPerVolumeMeasure BottomholeFluidDensity {
            get {
                return BottomholeFluidDensityField;
            } 
            set {
                BottomholeFluidDensityField = value;
                NotifyPropertyChanged("BottomholeFluidDensity");
            }
        }

        private MassPerVolumeMeasure BottomholeFluidDensityField; 

        /// <summary>
        /// DiameterEntryHole property
        /// </summary>
		[Description("Diameter of the injection point or perforation.")]
        [ComponentElement]
		[XmlElement("DiameterEntryHole")]
        public LengthMeasure DiameterEntryHole {
            get {
                return DiameterEntryHoleField;
            } 
            set {
                DiameterEntryHoleField = value;
                NotifyPropertyChanged("DiameterEntryHole");
            }
        }

        private LengthMeasure DiameterEntryHoleField; 

        /// <summary>
        /// PerforationCount property
        /// </summary>
		[Description("The number of perforations in the interval being tested.")]
		[XmlElement("PerforationCount")]
        public Int64? PerforationCount {
            get {
                return PerforationCountField;
            } 
            set {
                PerforationCountField = value;
             if(value!=null) 
                 this.PerforationCountSpecified = true;
                NotifyPropertyChanged("PerforationCount");
            }
        }

        private Int64? PerforationCountField; 

        /// <summary>
        /// PerforationCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PerforationCountSpecified {
            get {
                return PerforationCountSpecifiedField;
            } 
            set {
                PerforationCountSpecifiedField = value;
                NotifyPropertyChanged("PerforationCountSpecified");
            }
        }

        private Boolean PerforationCountSpecifiedField; 

        /// <summary>
        /// DischargeCoefficient property
        /// </summary>
		[Description("A coefficient used in the equation for calculation of pressure drop across a perforation set.")]
        [ComponentElement]
		[XmlElement("DischargeCoefficient")]
        public DimensionlessMeasure DischargeCoefficient {
            get {
                return DischargeCoefficientField;
            } 
            set {
                DischargeCoefficientField = value;
                NotifyPropertyChanged("DischargeCoefficient");
            }
        }

        private DimensionlessMeasure DischargeCoefficientField; 

        /// <summary>
        /// EffectivePerfs property
        /// </summary>
		[Description("The number of perforations in the interval being tested calculated to be open to injection determined during the step down test.")]
		[XmlElement("EffectivePerfs")]
        public Int64? EffectivePerfs {
            get {
                return EffectivePerfsField;
            } 
            set {
                EffectivePerfsField = value;
             if(value!=null) 
                 this.EffectivePerfsSpecified = true;
                NotifyPropertyChanged("EffectivePerfs");
            }
        }

        private Int64? EffectivePerfsField; 

        /// <summary>
        /// EffectivePerfsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EffectivePerfsSpecified {
            get {
                return EffectivePerfsSpecifiedField;
            } 
            set {
                EffectivePerfsSpecifiedField = value;
                NotifyPropertyChanged("EffectivePerfsSpecified");
            }
        }

        private Boolean EffectivePerfsSpecifiedField; 

        /// <summary>
        /// Step property
        /// </summary>
		[Description("The data related to a particular step in the step down test.")]
        [RecurringElement]
		[XmlElement("Step")]
        public List<StimPumpFlowBackTestStep> Step {
            get {
                return StepField;
            } 
            set {
                StepField = value;
                NotifyPropertyChanged("Step");
            }
        }

         [XmlIgnore]
         public bool StepSpecified
         {
            get {
             if(StepField!=null)
                return StepField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimPumpFlowBackTestStep> StepField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimStepDownTest")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimFetTest xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimFetTest", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimFetTest xsd type.")]
    public partial class StimFetTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// AnalysisMethod property
        /// </summary>
		[Description("An analysis method used for this FET test.")]
        [RecurringElement]
		[XmlElement("AnalysisMethod")]
        public List<StimFetTestAnalysisMethod> AnalysisMethod {
            get {
                return AnalysisMethodField;
            } 
            set {
                AnalysisMethodField = value;
                NotifyPropertyChanged("AnalysisMethod");
            }
        }

         [XmlIgnore]
         public bool AnalysisMethodSpecified
         {
            get {
             if(AnalysisMethodField!=null)
                return AnalysisMethodField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimFetTestAnalysisMethod> AnalysisMethodField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Start time for the fluid efficiency test (FET).")]
		[XmlElement("DTimStart")]
        public String DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private String DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("End time for the fluid efficiency test.")]
		[XmlElement("DTimEnd")]
        public String DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private String DTimEndField; 

        /// <summary>
        /// EndPdlDuration property
        /// </summary>
		[Description("The end of the pressure dependent leakoff portion of the fluid efficiency test.")]
        [ComponentElement]
		[XmlElement("EndPdlDuration")]
        public TimeMeasure EndPdlDuration {
            get {
                return EndPdlDurationField;
            } 
            set {
                EndPdlDurationField = value;
                NotifyPropertyChanged("EndPdlDuration");
            }
        }

        private TimeMeasure EndPdlDurationField; 

        /// <summary>
        /// FluidEfficiency property
        /// </summary>
		[Description("A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.")]
        [ComponentElement]
		[XmlElement("FluidEfficiency")]
        public VolumePerVolumeMeasure FluidEfficiency {
            get {
                return FluidEfficiencyField;
            } 
            set {
                FluidEfficiencyField = value;
                NotifyPropertyChanged("FluidEfficiency");
            }
        }

        private VolumePerVolumeMeasure FluidEfficiencyField; 

        /// <summary>
        /// FractureCloseDuration property
        /// </summary>
		[Description("The time at which the fracture effectively closes without proppant in place.")]
        [ComponentElement]
		[XmlElement("FractureCloseDuration")]
        public TimeMeasure FractureCloseDuration {
            get {
                return FractureCloseDurationField;
            } 
            set {
                FractureCloseDurationField = value;
                NotifyPropertyChanged("FractureCloseDuration");
            }
        }

        private TimeMeasure FractureCloseDurationField; 

        /// <summary>
        /// FractureClosePres property
        /// </summary>
		[Description("The pressure at which the fracture effectively closes without proppant in place.")]
        [ComponentElement]
		[XmlElement("FractureClosePres")]
        public PressureMeasure FractureClosePres {
            get {
                return FractureClosePresField;
            } 
            set {
                FractureClosePresField = value;
                NotifyPropertyChanged("FractureClosePres");
            }
        }

        private PressureMeasure FractureClosePresField; 

        /// <summary>
        /// FractureExtensionPres property
        /// </summary>
		[Description("The fracture pressure limit for an unfractured formation is the fracture initiation pressure. This is typically considered the upper bound for the minimum horizontal stress or closure pressure. A step rate test is used to determine the fracture extension pressure.")]
        [ComponentElement]
		[XmlElement("FractureExtensionPres")]
        public PressureMeasure FractureExtensionPres {
            get {
                return FractureExtensionPresField;
            } 
            set {
                FractureExtensionPresField = value;
                NotifyPropertyChanged("FractureExtensionPres");
            }
        }

        private PressureMeasure FractureExtensionPresField; 

        /// <summary>
        /// FractureGradient property
        /// </summary>
		[Description("The fracture gradient.")]
        [ComponentElement]
		[XmlElement("FractureGradient")]
        public ForcePerVolumeMeasure FractureGradient {
            get {
                return FractureGradientField;
            } 
            set {
                FractureGradientField = value;
                NotifyPropertyChanged("FractureGradient");
            }
        }

        private ForcePerVolumeMeasure FractureGradientField; 

        /// <summary>
        /// FractureLength property
        /// </summary>
		[Description("Fracture length is the length of the fracture tip to tip; fracture half length,  the length of one wing of a fracture from the wellbore to the tip.")]
        [ComponentElement]
		[XmlElement("FractureLength")]
        public LengthMeasure FractureLength {
            get {
                return FractureLengthField;
            } 
            set {
                FractureLengthField = value;
                NotifyPropertyChanged("FractureLength");
            }
        }

        private LengthMeasure FractureLengthField; 

        /// <summary>
        /// FractureWidth property
        /// </summary>
		[Description("The width of a fracture at the wellbore. Hydraulic frac width is  generated by frac fluid viscosity and/or pump rate (i.e., horsepower).")]
        [ComponentElement]
		[XmlElement("FractureWidth")]
        public LengthMeasure FractureWidth {
            get {
                return FractureWidthField;
            } 
            set {
                FractureWidthField = value;
                NotifyPropertyChanged("FractureWidth");
            }
        }

        private LengthMeasure FractureWidthField; 

        /// <summary>
        /// NetPres property
        /// </summary>
		[Description("The difference between the fracture extension pressure and the pressure that  exists in the fracture.")]
        [ComponentElement]
		[XmlElement("NetPres")]
        public PressureMeasure NetPres {
            get {
                return NetPresField;
            } 
            set {
                NetPresField = value;
                NotifyPropertyChanged("NetPres");
            }
        }

        private PressureMeasure NetPresField; 

        /// <summary>
        /// PdlCoef property
        /// </summary>
		[Description("The pressure dependent leakoff coefficient.")]
        [ComponentElement]
		[XmlElement("PdlCoef")]
        public DimensionlessMeasure PdlCoef {
            get {
                return PdlCoefField;
            } 
            set {
                PdlCoefField = value;
                NotifyPropertyChanged("PdlCoef");
            }
        }

        private DimensionlessMeasure PdlCoefField; 

        /// <summary>
        /// PorePres property
        /// </summary>
		[Description("The pressure of the liquids in the formation pores.")]
        [ComponentElement]
		[XmlElement("PorePres")]
        public PressureMeasure PorePres {
            get {
                return PorePresField;
            } 
            set {
                PorePresField = value;
                NotifyPropertyChanged("PorePres");
            }
        }

        private PressureMeasure PorePresField; 

        /// <summary>
        /// PseudoRadialPres property
        /// </summary>
		[Description("The Horner plot is used to determine if pseudo-radial flow developed during pressure decline.  If a semi-log straight line is observed and the line can be extrapolated to a reasonable value of reservoir pressure, radial or pseudo-radial flow may be affecting the decline behavior.  This suggests that the fracture is already closed and that data beyond the point of influence  need not be considered in the evaluation of closure.")]
        [ComponentElement]
		[XmlElement("PseudoRadialPres")]
        public PressureMeasure PseudoRadialPres {
            get {
                return PseudoRadialPresField;
            } 
            set {
                PseudoRadialPresField = value;
                NotifyPropertyChanged("PseudoRadialPres");
            }
        }

        private PressureMeasure PseudoRadialPresField; 

        /// <summary>
        /// ResidualPermeability property
        /// </summary>
		[Description("That permeability which remains after a fractured formation has closed, allowing the  the formation fracture face to be pressurized before the fracture is mechanically reopened.")]
        [ComponentElement]
		[XmlElement("ResidualPermeability")]
        public PermeabilityRockMeasure ResidualPermeability {
            get {
                return ResidualPermeabilityField;
            } 
            set {
                ResidualPermeabilityField = value;
                NotifyPropertyChanged("ResidualPermeability");
            }
        }

        private PermeabilityRockMeasure ResidualPermeabilityField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimFetTest")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumetricThermalExpansionMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumetricThermalExpansionMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumetricThermalExpansionMeasure xsd type.")]
    public partial class VolumetricThermalExpansionMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumetricThermalExpansionMeasure class.
        /// </summary>
        public VolumetricThermalExpansionMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumetricThermalExpansionMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumetricThermalExpansionMeasure(Double value, VolumetricThermalExpansionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public VolumetricThermalExpansionUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumetricThermalExpansionUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ThermalConductivityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ThermalConductivityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ThermalConductivityMeasure xsd type.")]
    public partial class ThermalConductivityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermalConductivityMeasure class.
        /// </summary>
        public ThermalConductivityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermalConductivityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermalConductivityMeasure(Double value, ThermalConductivityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ThermalConductivityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermalConductivityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SpecificHeatCapacityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SpecificHeatCapacityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the SpecificHeatCapacityMeasure xsd type.")]
    public partial class SpecificHeatCapacityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the SpecificHeatCapacityMeasure class.
        /// </summary>
        public SpecificHeatCapacityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the SpecificHeatCapacityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public SpecificHeatCapacityMeasure(Double value, SpecificHeatCapacityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public SpecificHeatCapacityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private SpecificHeatCapacityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimJobDiagnosticSession xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimJobDiagnosticSession", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimJobDiagnosticSession xsd type.")]
    public partial class StimJobDiagnosticSession : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the session.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Number property
        /// </summary>
		[Description("The number of this pumping diagnostics session.")]
		[XmlElement("Number")]
        public Int64? Number {
            get {
                return NumberField;
            } 
            set {
                NumberField = value;
             if(value!=null) 
                 this.NumberSpecified = true;
                NotifyPropertyChanged("Number");
            }
        }

        private Int64? NumberField; 

        /// <summary>
        /// NumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumberSpecified {
            get {
                return NumberSpecifiedField;
            } 
            set {
                NumberSpecifiedField = value;
                NotifyPropertyChanged("NumberSpecified");
            }
        }

        private Boolean NumberSpecifiedField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A description of the session.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// ChokeSize property
        /// </summary>
		[Description("The size of the choke used during flow back test.")]
        [ComponentElement]
		[XmlElement("ChokeSize")]
        public LengthMeasure ChokeSize {
            get {
                return ChokeSizeField;
            } 
            set {
                ChokeSizeField = value;
                NotifyPropertyChanged("ChokeSize");
            }
        }

        private LengthMeasure ChokeSizeField; 

        /// <summary>
        /// DTimPumpOn property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date and time pumping began.")]
		[XmlElement("DTimPumpOn")]
        public String DateTimePumpOn {
            get {
                return DTimPumpOnField;
            } 
            set {
                DTimPumpOnField = value;
                NotifyPropertyChanged("DateTimePumpOn");
            }
        }

        private String DTimPumpOnField; 

        /// <summary>
        /// DTimPumpOff property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date and time pumping ended.")]
		[XmlElement("DTimPumpOff")]
        public String DateTimePumpOff {
            get {
                return DTimPumpOffField;
            } 
            set {
                DTimPumpOffField = value;
                NotifyPropertyChanged("DateTimePumpOff");
            }
        }

        private String DTimPumpOffField; 

        /// <summary>
        /// PumpDuration property
        /// </summary>
		[Description("The time between the shutin time and the pump on time.")]
        [ComponentElement]
		[XmlElement("PumpDuration")]
        public TimeMeasure PumpDuration {
            get {
                return PumpDurationField;
            } 
            set {
                PumpDurationField = value;
                NotifyPropertyChanged("PumpDuration");
            }
        }

        private TimeMeasure PumpDurationField; 

        /// <summary>
        /// DTimWellShutin property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date and time at which a well ceases flowing and the valves are closed.")]
		[XmlElement("DTimWellShutin")]
        public String DateTimeWellShutin {
            get {
                return DTimWellShutinField;
            } 
            set {
                DTimWellShutinField = value;
                NotifyPropertyChanged("DateTimeWellShutin");
            }
        }

        private String DTimWellShutinField; 

        /// <summary>
        /// DTimFractureClose property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date and time when the fluid in the fracture is completely leaked off  into the formation and the fracture closes on its faces.")]
		[XmlElement("DTimFractureClose")]
        public String DateTimeFractureClose {
            get {
                return DTimFractureCloseField;
            } 
            set {
                DTimFractureCloseField = value;
                NotifyPropertyChanged("DateTimeFractureClose");
            }
        }

        private String DTimFractureCloseField; 

        /// <summary>
        /// AvgBottomholeTreatmentPres property
        /// </summary>
		[Description("Average bottomhole treatment pressure.")]
        [ComponentElement]
		[XmlElement("AvgBottomholeTreatmentPres")]
        public PressureMeasure AvgBottomholeTreatmentPres {
            get {
                return AvgBottomholeTreatmentPresField;
            } 
            set {
                AvgBottomholeTreatmentPresField = value;
                NotifyPropertyChanged("AvgBottomholeTreatmentPres");
            }
        }

        private PressureMeasure AvgBottomholeTreatmentPresField; 

        /// <summary>
        /// AvgBottomholeTreatmentRate property
        /// </summary>
		[Description("Average bottomhole treatment flow rate.")]
        [ComponentElement]
		[XmlElement("AvgBottomholeTreatmentRate")]
        public VolumePerTimeMeasure AvgBottomholeTreatmentRate {
            get {
                return AvgBottomholeTreatmentRateField;
            } 
            set {
                AvgBottomholeTreatmentRateField = value;
                NotifyPropertyChanged("AvgBottomholeTreatmentRate");
            }
        }

        private VolumePerTimeMeasure AvgBottomholeTreatmentRateField; 

        /// <summary>
        /// BaseFluidVol property
        /// </summary>
		[Description("Base fluid volume entering equipment.")]
        [ComponentElement]
		[XmlElement("BaseFluidVol")]
        public VolumeMeasure BaseFluidVol {
            get {
                return BaseFluidVolField;
            } 
            set {
                BaseFluidVolField = value;
                NotifyPropertyChanged("BaseFluidVol");
            }
        }

        private VolumeMeasure BaseFluidVolField; 

        /// <summary>
        /// BottomholeHydrostaticPres property
        /// </summary>
		[Description("Bottomhole hydrostatic pressure.")]
        [ComponentElement]
		[XmlElement("BottomholeHydrostaticPres")]
        public PressureMeasure BottomholeHydrostaticPres {
            get {
                return BottomholeHydrostaticPresField;
            } 
            set {
                BottomholeHydrostaticPresField = value;
                NotifyPropertyChanged("BottomholeHydrostaticPres");
            }
        }

        private PressureMeasure BottomholeHydrostaticPresField; 

        /// <summary>
        /// BubblePointPres property
        /// </summary>
		[Description("The pressure at which gas begins to break out of an under saturated oil and form a  free gas phase in the matrix or a gas cap.")]
        [ComponentElement]
		[XmlElement("BubblePointPres")]
        public PressureMeasure BubblePointPres {
            get {
                return BubblePointPresField;
            } 
            set {
                BubblePointPresField = value;
                NotifyPropertyChanged("BubblePointPres");
            }
        }

        private PressureMeasure BubblePointPresField; 

        /// <summary>
        /// FluidDensity property
        /// </summary>
		[Description("The density of the fluid.")]
        [ComponentElement]
		[XmlElement("FluidDensity")]
        public MassPerVolumeMeasure FluidDensity {
            get {
                return FluidDensityField;
            } 
            set {
                FluidDensityField = value;
                NotifyPropertyChanged("FluidDensity");
            }
        }

        private MassPerVolumeMeasure FluidDensityField; 

        /// <summary>
        /// FractureClosePres property
        /// </summary>
		[Description("The pressure when the fracture width becomes zero.")]
        [ComponentElement]
		[XmlElement("FractureClosePres")]
        public PressureMeasure FractureClosePres {
            get {
                return FractureClosePresField;
            } 
            set {
                FractureClosePresField = value;
                NotifyPropertyChanged("FractureClosePres");
            }
        }

        private PressureMeasure FractureClosePresField; 

        /// <summary>
        /// FrictionPres property
        /// </summary>
		[Description("The pressure loss due to fluid friction with the pipe while a fluid is being pumped.")]
        [ComponentElement]
		[XmlElement("FrictionPres")]
        public PressureMeasure FrictionPres {
            get {
                return FrictionPresField;
            } 
            set {
                FrictionPresField = value;
                NotifyPropertyChanged("FrictionPres");
            }
        }

        private PressureMeasure FrictionPresField; 

        /// <summary>
        /// InitialShutinPres property
        /// </summary>
		[Description("Initial shutin pressure.")]
        [ComponentElement]
		[XmlElement("InitialShutinPres")]
        public PressureMeasure InitialShutinPres {
            get {
                return InitialShutinPresField;
            } 
            set {
                InitialShutinPresField = value;
                NotifyPropertyChanged("InitialShutinPres");
            }
        }

        private PressureMeasure InitialShutinPresField; 

        /// <summary>
        /// PorePres property
        /// </summary>
		[Description("The pressure of the liquids in the formation pores.")]
        [ComponentElement]
		[XmlElement("PorePres")]
        public PressureMeasure PorePres {
            get {
                return PorePresField;
            } 
            set {
                PorePresField = value;
                NotifyPropertyChanged("PorePres");
            }
        }

        private PressureMeasure PorePresField; 

        /// <summary>
        /// WellboreVolume property
        /// </summary>
		[Description("The volume of fluid in the wellbore.")]
        [ComponentElement]
		[XmlElement("WellboreVolume")]
        public VolumeMeasure WellboreVolume {
            get {
                return WellboreVolumeField;
            } 
            set {
                WellboreVolumeField = value;
                NotifyPropertyChanged("WellboreVolume");
            }
        }

        private VolumeMeasure WellboreVolumeField; 

        /// <summary>
        /// MdSurface property
        /// </summary>
		[Description("The measured depth of the wellbore to its injection point.")]
        [ComponentElement]
		[XmlElement("MdSurface")]
        public MeasuredDepthCoord MDSurface {
            get {
                return MdSurfaceField;
            } 
            set {
                MdSurfaceField = value;
                NotifyPropertyChanged("MDSurface");
            }
        }

        private MeasuredDepthCoord MdSurfaceField; 

        /// <summary>
        /// MdBottomhole property
        /// </summary>
		[Description("The measured depth of the bottom of the hole.")]
        [ComponentElement]
		[XmlElement("MdBottomhole")]
        public MeasuredDepthCoord MDBottomhole {
            get {
                return MdBottomholeField;
            } 
            set {
                MdBottomholeField = value;
                NotifyPropertyChanged("MDBottomhole");
            }
        }

        private MeasuredDepthCoord MdBottomholeField; 

        /// <summary>
        /// MdMidPerforation property
        /// </summary>
		[Description("The measured depth of the middle perforation.")]
        [ComponentElement]
		[XmlElement("MdMidPerforation")]
        public MeasuredDepthCoord MDMidPerforation {
            get {
                return MdMidPerforationField;
            } 
            set {
                MdMidPerforationField = value;
                NotifyPropertyChanged("MDMidPerforation");
            }
        }

        private MeasuredDepthCoord MdMidPerforationField; 

        /// <summary>
        /// TvdMidPerforation property
        /// </summary>
		[Description("The true vertical depth of the middle perforation.")]
        [ComponentElement]
		[XmlElement("TvdMidPerforation")]
        public WellVerticalDepthCoord TvdMidPerforation {
            get {
                return TvdMidPerforationField;
            } 
            set {
                TvdMidPerforationField = value;
                NotifyPropertyChanged("TvdMidPerforation");
            }
        }

        private WellVerticalDepthCoord TvdMidPerforationField; 

        /// <summary>
        /// SurfaceTemperature property
        /// </summary>
		[Description("The constant earth temperature at a given depth specific to a region.")]
        [ComponentElement]
		[XmlElement("SurfaceTemperature")]
        public ThermodynamicTemperatureMeasure SurfaceTemperature {
            get {
                return SurfaceTemperatureField;
            } 
            set {
                SurfaceTemperatureField = value;
                NotifyPropertyChanged("SurfaceTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure SurfaceTemperatureField; 

        /// <summary>
        /// BottomholeTemperature property
        /// </summary>
		[Description("Static bottomhole temperature.")]
        [ComponentElement]
		[XmlElement("BottomholeTemperature")]
        public ThermodynamicTemperatureMeasure BottomholeTemperature {
            get {
                return BottomholeTemperatureField;
            } 
            set {
                BottomholeTemperatureField = value;
                NotifyPropertyChanged("BottomholeTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure BottomholeTemperatureField; 

        /// <summary>
        /// SurfaceFluidTemperature property
        /// </summary>
		[Description("Temperature of the fluid at the surface.")]
        [ComponentElement]
		[XmlElement("SurfaceFluidTemperature")]
        public ThermodynamicTemperatureMeasure SurfaceFluidTemperature {
            get {
                return SurfaceFluidTemperatureField;
            } 
            set {
                SurfaceFluidTemperatureField = value;
                NotifyPropertyChanged("SurfaceFluidTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure SurfaceFluidTemperatureField; 

        /// <summary>
        /// FluidCompressibility property
        /// </summary>
		[Description("The volume change of a fluid when pressure is applied.")]
        [ComponentElement]
		[XmlElement("FluidCompressibility")]
        public IsothermalCompressibilityMeasure FluidCompressibility {
            get {
                return FluidCompressibilityField;
            } 
            set {
                FluidCompressibilityField = value;
                NotifyPropertyChanged("FluidCompressibility");
            }
        }

        private IsothermalCompressibilityMeasure FluidCompressibilityField; 

        /// <summary>
        /// ReservoirTotalCompressibility property
        /// </summary>
		[Description("The volume change of a reservoir material when pressure is applied.")]
        [ComponentElement]
		[XmlElement("ReservoirTotalCompressibility")]
        public IsothermalCompressibilityMeasure ReservoirTotalCompressibility {
            get {
                return ReservoirTotalCompressibilityField;
            } 
            set {
                ReservoirTotalCompressibilityField = value;
                NotifyPropertyChanged("ReservoirTotalCompressibility");
            }
        }

        private IsothermalCompressibilityMeasure ReservoirTotalCompressibilityField; 

        /// <summary>
        /// FluidNprimeFactor property
        /// </summary>
		[Description("Power law component. As 'n' decreases from 1, the fluid becomes more shear thinning. Reducing 'n' produces more non-Newtonian behavior.")]
        [ComponentElement]
		[XmlElement("FluidNprimeFactor")]
        public DimensionlessMeasure FluidNprimeFactor {
            get {
                return FluidNprimeFactorField;
            } 
            set {
                FluidNprimeFactorField = value;
                NotifyPropertyChanged("FluidNprimeFactor");
            }
        }

        private DimensionlessMeasure FluidNprimeFactorField; 

        /// <summary>
        /// FluidKprimeFactor property
        /// </summary>
		[Description("The consistency index K is the shear stress or viscosity of the fluid at one sec-1 shear rate. An increasing K raises the effective viscosity.")]
        [ComponentElement]
		[XmlElement("FluidKprimeFactor")]
        public DimensionlessMeasure FluidKprimeFactor {
            get {
                return FluidKprimeFactorField;
            } 
            set {
                FluidKprimeFactorField = value;
                NotifyPropertyChanged("FluidKprimeFactor");
            }
        }

        private DimensionlessMeasure FluidKprimeFactorField; 

        /// <summary>
        /// FluidSpecificHeat property
        /// </summary>
		[Description("The heat required to raise one unit mass of a substance by one degree.")]
        [ComponentElement]
		[XmlElement("FluidSpecificHeat")]
        public SpecificHeatCapacityMeasure FluidSpecificHeat {
            get {
                return FluidSpecificHeatField;
            } 
            set {
                FluidSpecificHeatField = value;
                NotifyPropertyChanged("FluidSpecificHeat");
            }
        }

        private SpecificHeatCapacityMeasure FluidSpecificHeatField; 

        /// <summary>
        /// FluidThermalConductivity property
        /// </summary>
		[Description("In physics, thermal conductivity is the property of a material describing its ability to conduct heat.  It appears primarily in Fourier's Law for heat conduction. Thermal conductivity is measured in watts per kelvin-meter.  Multiplied by a temperature difference (in kelvins) and an area (in square meters), and divided by a  thickness (in meters), the thermal conductivity predicts the rate of energy loss (in watts) through a piece of material.")]
        [ComponentElement]
		[XmlElement("FluidThermalConductivity")]
        public ThermalConductivityMeasure FluidThermalConductivity {
            get {
                return FluidThermalConductivityField;
            } 
            set {
                FluidThermalConductivityField = value;
                NotifyPropertyChanged("FluidThermalConductivity");
            }
        }

        private ThermalConductivityMeasure FluidThermalConductivityField; 

        /// <summary>
        /// FluidThermalExpansionCoefficient property
        /// </summary>
		[Description("Dimensional response to temperature change is expressed by its coefficient of thermal expansion. When the temperature of a substance changes, the energy that is stored in the intermolecular bonds  between atoms changes. When the stored energy increases, so does the length of the molecular bonds.  As a result, solids typically expand in response to heating and contract on cooling.  The degree of expansion divided by the change in temperature is called the material's coefficient  of thermal expansion and generally varies with temperature.")]
        [ComponentElement]
		[XmlElement("FluidThermalExpansionCoefficient")]
        public VolumetricThermalExpansionMeasure FluidThermalExpansionCoefficient {
            get {
                return FluidThermalExpansionCoefficientField;
            } 
            set {
                FluidThermalExpansionCoefficientField = value;
                NotifyPropertyChanged("FluidThermalExpansionCoefficient");
            }
        }

        private VolumetricThermalExpansionMeasure FluidThermalExpansionCoefficientField; 

        /// <summary>
        /// FluidEfficiency property
        /// </summary>
		[Description("A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.")]
        [ComponentElement]
		[XmlElement("FluidEfficiency")]
        public VolumePerVolumeMeasure FluidEfficiency {
            get {
                return FluidEfficiencyField;
            } 
            set {
                FluidEfficiencyField = value;
                NotifyPropertyChanged("FluidEfficiency");
            }
        }

        private VolumePerVolumeMeasure FluidEfficiencyField; 

        /// <summary>
        /// FoamQuality property
        /// </summary>
		[Description("Foam quality percentage of foam for the job during the stimulation services.")]
        [ComponentElement]
		[XmlElement("FoamQuality")]
        public VolumePerVolumeMeasure FoamQuality {
            get {
                return FoamQualityField;
            } 
            set {
                FoamQualityField = value;
                NotifyPropertyChanged("FoamQuality");
            }
        }

        private VolumePerVolumeMeasure FoamQualityField; 

        /// <summary>
        /// PercentPad property
        /// </summary>
		[Description("The volume of the pad divided by the (volume of the pad + the volume of the proppant laden fluid).")]
        [ComponentElement]
		[XmlElement("PercentPad")]
        public VolumePerVolumeMeasure PercentPad {
            get {
                return PercentPadField;
            } 
            set {
                PercentPadField = value;
                NotifyPropertyChanged("PercentPad");
            }
        }

        private VolumePerVolumeMeasure PercentPadField; 

        /// <summary>
        /// StageNumber property
        /// </summary>
		[Description("The number of a stage associated with this diagnostics session.")]
		[XmlElement("StageNumber")]
        public Int64? StageNumber {
            get {
                return StageNumberField;
            } 
            set {
                StageNumberField = value;
             if(value!=null) 
                 this.StageNumberSpecified = true;
                NotifyPropertyChanged("StageNumber");
            }
        }

        private Int64? StageNumberField; 

        /// <summary>
        /// StageNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StageNumberSpecified {
            get {
                return StageNumberSpecifiedField;
            } 
            set {
                StageNumberSpecifiedField = value;
                NotifyPropertyChanged("StageNumberSpecified");
            }
        }

        private Boolean StageNumberSpecifiedField; 

        /// <summary>
        /// TemperatureCorrectionApplied property
        /// </summary>
		[Description("Are the calculations corrected for temperature. A value of \"true\" (or \"1\") indicates that the calculations were corrected for temperature.  A value of \"false\" (or \"0\") or not given indicates otherwise.")]
		[XmlElement("TemperatureCorrectionApplied")]
        public Boolean? TemperatureCorrectionApplied {
            get {
                return TemperatureCorrectionAppliedField;
            } 
            set {
                TemperatureCorrectionAppliedField = value;
             if(value!=null) 
                 this.TemperatureCorrectionAppliedSpecified = true;
                NotifyPropertyChanged("TemperatureCorrectionApplied");
            }
        }

        private Boolean? TemperatureCorrectionAppliedField; 

        /// <summary>
        /// TemperatureCorrectionAppliedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TemperatureCorrectionAppliedSpecified {
            get {
                return TemperatureCorrectionAppliedSpecifiedField;
            } 
            set {
                TemperatureCorrectionAppliedSpecifiedField = value;
                NotifyPropertyChanged("TemperatureCorrectionAppliedSpecified");
            }
        }

        private Boolean TemperatureCorrectionAppliedSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// FluidEfficiencyTest property
        /// </summary>
		[Description("A diagnostic test determining fluid efficiency.")]
        [RecurringElement]
		[XmlElement("FluidEfficiencyTest")]
        public List<StimFetTest> FluidEfficiencyTest {
            get {
                return FluidEfficiencyTestField;
            } 
            set {
                FluidEfficiencyTestField = value;
                NotifyPropertyChanged("FluidEfficiencyTest");
            }
        }

         [XmlIgnore]
         public bool FluidEfficiencyTestSpecified
         {
            get {
             if(FluidEfficiencyTestField!=null)
                return FluidEfficiencyTestField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimFetTest> FluidEfficiencyTestField; 

        /// <summary>
        /// StepDownTest property
        /// </summary>
		[Description("An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure. An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure.")]
        [RecurringElement]
		[XmlElement("StepDownTest")]
        public List<StimStepDownTest> StepDownTest {
            get {
                return StepDownTestField;
            } 
            set {
                StepDownTestField = value;
                NotifyPropertyChanged("StepDownTest");
            }
        }

         [XmlIgnore]
         public bool StepDownTestSpecified
         {
            get {
             if(StepDownTestField!=null)
                return StepDownTestField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimStepDownTest> StepDownTestField; 

        /// <summary>
        /// StepRateTest property
        /// </summary>
		[Description("An injection test, plotted pressure against injection rate, where a curve deflection and change of slope indicates the fracture breakdown pressure.")]
        [RecurringElement]
		[XmlElement("StepRateTest")]
        public List<StimStepTest> StepRateTest {
            get {
                return StepRateTestField;
            } 
            set {
                StepRateTestField = value;
                NotifyPropertyChanged("StepRateTest");
            }
        }

         [XmlIgnore]
         public bool StepRateTestSpecified
         {
            get {
             if(StepRateTestField!=null)
                return StepRateTestField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimStepTest> StepRateTestField; 

        /// <summary>
        /// PumpFlowBackTest property
        /// </summary>
		[Description("A diagnostic test involving flowing a well back after treatment.")]
        [RecurringElement]
		[XmlElement("PumpFlowBackTest")]
        public List<StimPumpFlowBackTest> PumpFlowBackTest {
            get {
                return PumpFlowBackTestField;
            } 
            set {
                PumpFlowBackTestField = value;
                NotifyPropertyChanged("PumpFlowBackTest");
            }
        }

         [XmlIgnore]
         public bool PumpFlowBackTestSpecified
         {
            get {
             if(PumpFlowBackTestField!=null)
                return PumpFlowBackTestField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimPumpFlowBackTest> PumpFlowBackTestField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimJobDiagnosticSession")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellVerticalDepthCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellVerticalDepthCoord", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the WellVerticalDepthCoord xsd type.")]
    public partial class WellVerticalDepthCoord : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellVerticalDepthCoord class.
        /// </summary>
        public WellVerticalDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the WellVerticalDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WellVerticalDepthCoord(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Description("Unit of measure used by this vertical depth coordinate")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
             if(value!=null) 
                 this.UomSpecified = true;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

        /// <summary>
        /// uomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UomSpecified {
            get {
                return uomSpecifiedField;
            } 
            set {
                uomSpecifiedField = value;
                NotifyPropertyChanged("UomSpecified");
            }
        }

        private Boolean uomSpecifiedField; 

		/// <summary>
        /// datum property
        /// </summary>
		[StringLength(64)]
        [Description("Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates")]
        [XmlAttribute("datum")]
		
        public String Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private String datumField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PermeabilityLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PermeabilityLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PermeabilityLengthMeasure xsd type.")]
    public partial class PermeabilityLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PermeabilityLengthMeasure class.
        /// </summary>
        public PermeabilityLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PermeabilityLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PermeabilityLengthMeasure(Double value, PermeabilityLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PermeabilityLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PermeabilityLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimISO13503_5Point xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimISO13503_5Point", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimISO13503_5Point xsd type.")]
    public partial class StimISO13503_5Point : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Conductivity property
        /// </summary>
		[Required]
        [Description("The Conductivity under Stress.")]
        [ComponentElement]
		[XmlElement("Conductivity")]
        public PermeabilityLengthMeasure Conductivity {
            get {
                return ConductivityField;
            } 
            set {
                ConductivityField = value;
                NotifyPropertyChanged("Conductivity");
            }
        }

        private PermeabilityLengthMeasure ConductivityField; 

        /// <summary>
        /// Temperature property
        /// </summary>
		[Required]
        [Description("The temperature at the time measurements were taken.")]
        [ComponentElement]
		[XmlElement("Temperature")]
        public ThermodynamicTemperatureMeasure Temperature {
            get {
                return TemperatureField;
            } 
            set {
                TemperatureField = value;
                NotifyPropertyChanged("Temperature");
            }
        }

        private ThermodynamicTemperatureMeasure TemperatureField; 

        /// <summary>
        /// Permeability property
        /// </summary>
		[Required]
        [Description("The permeability under Stress.")]
        [ComponentElement]
		[XmlElement("Permeability")]
        public PermeabilityRockMeasure Permeability {
            get {
                return PermeabilityField;
            } 
            set {
                PermeabilityField = value;
                NotifyPropertyChanged("Permeability");
            }
        }

        private PermeabilityRockMeasure PermeabilityField; 

        /// <summary>
        /// Stress property
        /// </summary>
		[Required]
        [Description("The amount of stress applied.")]
		[XmlElement("Stress")]
        public String Stress {
            get {
                return StressField;
            } 
            set {
                StressField = value;
                NotifyPropertyChanged("Stress");
            }
        }

        private String StressField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimISO13503_5Point")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ISO13503_2SieveAnalysisData xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ISO13503_2SieveAnalysisData", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ISO13503_2SieveAnalysisData xsd type.")]
    public partial class ISO13503_2SieveAnalysisData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// PercentRetained property
        /// </summary>
		[Required]
        [Description("The percentage of mass retained in sieve.")]
        [ComponentElement]
		[XmlElement("PercentRetained")]
        public MassPerMassMeasure PercentRetained {
            get {
                return PercentRetainedField;
            } 
            set {
                PercentRetainedField = value;
                NotifyPropertyChanged("PercentRetained");
            }
        }

        private MassPerMassMeasure PercentRetainedField; 

        /// <summary>
        /// SieveNumber property
        /// </summary>
		[Required]
        [Description("ASTM US Standard mesh opening size used in Sieve analysis test.  Use ‘0’ to indicate ‘Pan’.")]
		[XmlElement("SieveNumber")]
        public Int64? SieveNumber {
            get {
                return SieveNumberField;
            } 
            set {
                SieveNumberField = value;
                NotifyPropertyChanged("SieveNumber");
            }
        }

        private Int64? SieveNumberField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of ISO13503_2SieveAnalysisData")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerMassMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerMassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerMassMeasure xsd type.")]
    public partial class MassPerMassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerMassMeasure class.
        /// </summary>
        public MassPerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerMassMeasure(Double value, MassPerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MassPerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerMassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ISO13503_2CrushTestData xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ISO13503_2CrushTestData", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ISO13503_2CrushTestData xsd type.")]
    public partial class ISO13503_2CrushTestData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Fines property
        /// </summary>
		[Required]
        [Description("Mass percentage of fines after being exposed to stress.")]
        [ComponentElement]
		[XmlElement("Fines")]
        public MassPerMassMeasure Fines {
            get {
                return FinesField;
            } 
            set {
                FinesField = value;
                NotifyPropertyChanged("Fines");
            }
        }

        private MassPerMassMeasure FinesField; 

        /// <summary>
        /// Stress property
        /// </summary>
		[Required]
        [Description("Stress measured at a point during a crush test.")]
        [ComponentElement]
		[XmlElement("Stress")]
        public PressureMeasure Stress {
            get {
                return StressField;
            } 
            set {
                StressField = value;
                NotifyPropertyChanged("Stress");
            }
        }

        private PressureMeasure StressField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of ISO13503_2CrushTestData")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimISO13503_2Properties xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimISO13503_2Properties", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimISO13503_2Properties xsd type.")]
    public partial class StimISO13503_2Properties : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// AbsoluteDensity property
        /// </summary>
		[Description("Absolute density is the density the material would have if no intra-granular porosity is present. (e.g. Boyle’s Law porosimetry)")]
        [ComponentElement]
		[XmlElement("AbsoluteDensity")]
        public MassPerVolumeMeasure AbsoluteDensity {
            get {
                return AbsoluteDensityField;
            } 
            set {
                AbsoluteDensityField = value;
                NotifyPropertyChanged("AbsoluteDensity");
            }
        }

        private MassPerVolumeMeasure AbsoluteDensityField; 

        /// <summary>
        /// ClustersPercent property
        /// </summary>
		[Description("Percentage of undesirable agglomerated discrete proppant particles which typically occurs more with inefficiently processed natural sand proppants as opposed to manufactured ceramic proppants. ISO 13503-2 and API RP19C limit the mass of clusters to less than 1%.")]
        [ComponentElement]
		[XmlElement("ClustersPercent")]
        public DimensionlessMeasure ClustersPercent {
            get {
                return ClustersPercentField;
            } 
            set {
                ClustersPercentField = value;
                NotifyPropertyChanged("ClustersPercent");
            }
        }

        private DimensionlessMeasure ClustersPercentField; 

        /// <summary>
        /// KValue property
        /// </summary>
		[Description("Crush test classification indicating the highest stress level at which a proppant generated no more than 10% crushed material rounded down to the nearest 1,000 psi during a crush test. For example, a value of 14 means ‘14K’ which is 14000 psi.")]
        [ComponentElement]
		[XmlElement("KValue")]
        public DimensionlessMeasure KValue {
            get {
                return KValueField;
            } 
            set {
                KValueField = value;
                NotifyPropertyChanged("KValue");
            }
        }

        private DimensionlessMeasure KValueField; 

        /// <summary>
        /// MeanParticleDiameter property
        /// </summary>
		[Description("The mean diameter of particles in a sample of proppant.")]
        [ComponentElement]
		[XmlElement("MeanParticleDiameter")]
        public LengthMeasure MeanParticleDiameter {
            get {
                return MeanParticleDiameterField;
            } 
            set {
                MeanParticleDiameterField = value;
                NotifyPropertyChanged("MeanParticleDiameter");
            }
        }

        private LengthMeasure MeanParticleDiameterField; 

        /// <summary>
        /// MedianParticleDiameter property
        /// </summary>
		[Description("The median diameter of particles in a sample of proppant.")]
        [ComponentElement]
		[XmlElement("MedianParticleDiameter")]
        public LengthMeasure MedianParticleDiameter {
            get {
                return MedianParticleDiameterField;
            } 
            set {
                MedianParticleDiameterField = value;
                NotifyPropertyChanged("MedianParticleDiameter");
            }
        }

        private LengthMeasure MedianParticleDiameterField; 

        /// <summary>
        /// SpecificGravity property
        /// </summary>
		[Description("Not formally part of ISO 13503 .2 properties, the specific gravity is the Apparent Density of the Proppant divided by the Density of Water.")]
		[XmlElement("SpecificGravity")]
        public String SpecificGravity {
            get {
                return SpecificGravityField;
            } 
            set {
                SpecificGravityField = value;
                NotifyPropertyChanged("SpecificGravity");
            }
        }

        private String SpecificGravityField; 

        /// <summary>
        /// Roundness property
        /// </summary>
		[Description("Krumbein Roundness Shape Factor that is a measure of the relative sharpness of grain corners or of grain curvature. Krumbein and Sloss (1963) are the most widely used method of determining shape factors.")]
        [ComponentElement]
		[XmlElement("Roundness")]
        public DimensionlessMeasure Roundness {
            get {
                return RoundnessField;
            } 
            set {
                RoundnessField = value;
                NotifyPropertyChanged("Roundness");
            }
        }

        private DimensionlessMeasure RoundnessField; 

        /// <summary>
        /// AcidSolubility property
        /// </summary>
		[Description("The solubility of a proppant in 12:3 HCl:HF for 30 minutes at 150°F is an indication of the amount of soluble materials (i.e. carbonates, feldspars, iron oxides, clays, etc) present in the proppant.")]
        [ComponentElement]
		[XmlElement("AcidSolubility")]
        public MassPerMassMeasure AcidSolubility {
            get {
                return AcidSolubilityField;
            } 
            set {
                AcidSolubilityField = value;
                NotifyPropertyChanged("AcidSolubility");
            }
        }

        private MassPerMassMeasure AcidSolubilityField; 

        /// <summary>
        /// ApparentDensity property
        /// </summary>
		[Description("Apparent Density excludes extra-granular porosity by placing a known mass in a volume of fluid and determining how much of the fluid is displaced (Archimedes).")]
        [ComponentElement]
		[XmlElement("ApparentDensity")]
        public MassPerVolumeMeasure ApparentDensity {
            get {
                return ApparentDensityField;
            } 
            set {
                ApparentDensityField = value;
                NotifyPropertyChanged("ApparentDensity");
            }
        }

        private MassPerVolumeMeasure ApparentDensityField; 

        /// <summary>
        /// BulkDensity property
        /// </summary>
		[Description("Bulk Density includes both the proppant and the porosity. This is measured by filling a known volume with dry proppant and measuring the weight.")]
        [ComponentElement]
		[XmlElement("BulkDensity")]
        public MassPerVolumeMeasure BulkDensity {
            get {
                return BulkDensityField;
            } 
            set {
                BulkDensityField = value;
                NotifyPropertyChanged("BulkDensity");
            }
        }

        private MassPerVolumeMeasure BulkDensityField; 

        /// <summary>
        /// LossOnIgnition property
        /// </summary>
		[Description("A mass loss (gravimetric) test method applied to coated proppants only, which determines the mass of resin coating applied to a natural sand or manufactured proppant by means of thorough combustion of the flammable resin from the nonflammable proppant. Reported as a % of original mass.")]
        [ComponentElement]
		[XmlElement("LossOnIgnition")]
        public DimensionlessMeasure LossOnIgnition {
            get {
                return LossOnIgnitionField;
            } 
            set {
                LossOnIgnitionField = value;
                NotifyPropertyChanged("LossOnIgnition");
            }
        }

        private DimensionlessMeasure LossOnIgnitionField; 

        /// <summary>
        /// Sphericity property
        /// </summary>
		[Description("Krumbein Sphericity Shape Factor that is a measure of how closely a proppant particle approaches the shape of a sphere. Krumbein and Sloss (1963) are the most widely used method of determining shape factors.")]
        [ComponentElement]
		[XmlElement("Sphericity")]
        public DimensionlessMeasure Sphericity {
            get {
                return SphericityField;
            } 
            set {
                SphericityField = value;
                NotifyPropertyChanged("Sphericity");
            }
        }

        private DimensionlessMeasure SphericityField; 

        /// <summary>
        /// Turbidity property
        /// </summary>
		[Description("Turbidity is a measure of water clarity how much the material suspended in water decreases the passage of light through the water.  Unit of measure may be Nephelometric Turbidity Unit (NTU), but may vary based upon the detector geometry.")]
        [ComponentElement]
		[XmlElement("Turbidity")]
        public DimensionlessMeasure Turbidity {
            get {
                return TurbidityField;
            } 
            set {
                TurbidityField = value;
                NotifyPropertyChanged("Turbidity");
            }
        }

        private DimensionlessMeasure TurbidityField; 

        /// <summary>
        /// CrushTestData property
        /// </summary>
		[RecurringElement]
		[XmlElement("CrushTestData")]
        public List<ISO13503_2CrushTestData> CrushTestData {
            get {
                return CrushTestDataField;
            } 
            set {
                CrushTestDataField = value;
                NotifyPropertyChanged("CrushTestData");
            }
        }

         [XmlIgnore]
         public bool CrushTestDataSpecified
         {
            get {
             if(CrushTestDataField!=null)
                return CrushTestDataField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ISO13503_2CrushTestData> CrushTestDataField; 

        /// <summary>
        /// SieveAnalysisData property
        /// </summary>
		[RecurringElement]
		[XmlElement("SieveAnalysisData")]
        public List<ISO13503_2SieveAnalysisData> SieveAnalysisData {
            get {
                return SieveAnalysisDataField;
            } 
            set {
                SieveAnalysisDataField = value;
                NotifyPropertyChanged("SieveAnalysisData");
            }
        }

         [XmlIgnore]
         public bool SieveAnalysisDataSpecified
         {
            get {
             if(SieveAnalysisDataField!=null)
                return SieveAnalysisDataField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ISO13503_2SieveAnalysisData> SieveAnalysisDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimISO13503_2Properties")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AreaPerMassMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AreaPerMassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AreaPerMassMeasure xsd type.")]
    public partial class AreaPerMassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaPerMassMeasure class.
        /// </summary>
        public AreaPerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaPerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaPerMassMeasure(Double value, AreaPerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public AreaPerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaPerMassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimMaterial xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimAdditive))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimProppantAgent))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimMaterial", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimMaterial xsd type.")]
    public partial class StimMaterial : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		
		[XmlElement("Kind")]
        public StimMaterialKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
             if(value!=null) 
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private StimMaterialKind? KindField; 

        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private Boolean KindSpecifiedField; 

        /// <summary>
        /// Name property
        /// </summary>
		
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Supplier property
        /// </summary>
		
		[XmlElement("Supplier")]
        public String Supplier {
            get {
                return SupplierField;
            } 
            set {
                SupplierField = value;
                NotifyPropertyChanged("Supplier");
            }
        }

        private String SupplierField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimAdditive xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimAdditive", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimAdditive xsd type.")]
    public partial class StimAdditive : StimMaterial, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// AdditiveKind property
        /// </summary>
		[Description("Additive type or function from the enumeration 'StimAdditiveKind'.")]
		[XmlElement("AdditiveKind")]
        public StimAdditiveKind? AdditiveKind {
            get {
                return AdditiveKindField;
            } 
            set {
                AdditiveKindField = value;
             if(value!=null) 
                 this.AdditiveKindSpecified = true;
                NotifyPropertyChanged("AdditiveKind");
            }
        }

        private StimAdditiveKind? AdditiveKindField; 

        /// <summary>
        /// AdditiveKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AdditiveKindSpecified {
            get {
                return AdditiveKindSpecifiedField;
            } 
            set {
                AdditiveKindSpecifiedField = value;
                NotifyPropertyChanged("AdditiveKindSpecified");
            }
        }

        private Boolean AdditiveKindSpecifiedField; 

        /// <summary>
        /// Type property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("The type of additive that is used which can represent a suppliers description or type of AdditiveKind.  For example, 5% HCl could be the type when AdditiveKind=acid.")]
		[XmlElement("Type")]
        public String Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String TypeField; 

        /// <summary>
        /// SupplierCode property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("A code used to identify the supplier of the additive.")]
		[XmlElement("SupplierCode")]
        public String SupplierCode {
            get {
                return SupplierCodeField;
            } 
            set {
                SupplierCodeField = value;
                NotifyPropertyChanged("SupplierCode");
            }
        }

        private String SupplierCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimProppantAgent xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimProppantAgent", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimProppantAgent xsd type.")]
    public partial class StimProppantAgent : StimMaterial, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// FrictionCoefficientLaminar property
        /// </summary>
		[Description("Laminar Flow Friction Coefficient.")]
        [ComponentElement]
		[XmlElement("FrictionCoefficientLaminar")]
        public DimensionlessMeasure FrictionCoefficientLaminar {
            get {
                return FrictionCoefficientLaminarField;
            } 
            set {
                FrictionCoefficientLaminarField = value;
                NotifyPropertyChanged("FrictionCoefficientLaminar");
            }
        }

        private DimensionlessMeasure FrictionCoefficientLaminarField; 

        /// <summary>
        /// MassAbsorptionCoefficient property
        /// </summary>
		[Description("Characterizes how easily radiation passes through a material. This can be used to compute the concentration of proppant in a slurry using a densitometer.")]
        [ComponentElement]
		[XmlElement("MassAbsorptionCoefficient")]
        public AreaPerMassMeasure MassAbsorptionCoefficient {
            get {
                return MassAbsorptionCoefficientField;
            } 
            set {
                MassAbsorptionCoefficientField = value;
                NotifyPropertyChanged("MassAbsorptionCoefficient");
            }
        }

        private AreaPerMassMeasure MassAbsorptionCoefficientField; 

        /// <summary>
        /// FrictionCoefficientTurbulent property
        /// </summary>
		[Description("Turbulent Flow Friction Coefficient.")]
        [ComponentElement]
		[XmlElement("FrictionCoefficientTurbulent")]
        public DimensionlessMeasure FrictionCoefficientTurbulent {
            get {
                return FrictionCoefficientTurbulentField;
            } 
            set {
                FrictionCoefficientTurbulentField = value;
                NotifyPropertyChanged("FrictionCoefficientTurbulent");
            }
        }

        private DimensionlessMeasure FrictionCoefficientTurbulentField; 

        /// <summary>
        /// MeshSizeHigh property
        /// </summary>
		[Description("High value of Sieve mesh size - for 40/70 Sand, this value would be 70.")]
		[XmlElement("MeshSizeHigh")]
        public Int64? MeshSizeHigh {
            get {
                return MeshSizeHighField;
            } 
            set {
                MeshSizeHighField = value;
             if(value!=null) 
                 this.MeshSizeHighSpecified = true;
                NotifyPropertyChanged("MeshSizeHigh");
            }
        }

        private Int64? MeshSizeHighField; 

        /// <summary>
        /// MeshSizeHighSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MeshSizeHighSpecified {
            get {
                return MeshSizeHighSpecifiedField;
            } 
            set {
                MeshSizeHighSpecifiedField = value;
                NotifyPropertyChanged("MeshSizeHighSpecified");
            }
        }

        private Boolean MeshSizeHighSpecifiedField; 

        /// <summary>
        /// MeshSizeLow property
        /// </summary>
		[Description("Low value of Sieve mesh size - for 40/70 Sand, this value would be 40.")]
		[XmlElement("MeshSizeLow")]
        public Int64? MeshSizeLow {
            get {
                return MeshSizeLowField;
            } 
            set {
                MeshSizeLowField = value;
             if(value!=null) 
                 this.MeshSizeLowSpecified = true;
                NotifyPropertyChanged("MeshSizeLow");
            }
        }

        private Int64? MeshSizeLowField; 

        /// <summary>
        /// MeshSizeLowSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MeshSizeLowSpecified {
            get {
                return MeshSizeLowSpecifiedField;
            } 
            set {
                MeshSizeLowSpecifiedField = value;
                NotifyPropertyChanged("MeshSizeLowSpecified");
            }
        }

        private Boolean MeshSizeLowSpecifiedField; 

        /// <summary>
        /// UnconfinedCompressiveStrength property
        /// </summary>
		[Description("The unconfined compressive strength of the proppant.")]
        [ComponentElement]
		[XmlElement("UnconfinedCompressiveStrength")]
        public PressureMeasure UnconfinedCompressiveStrength {
            get {
                return UnconfinedCompressiveStrengthField;
            } 
            set {
                UnconfinedCompressiveStrengthField = value;
                NotifyPropertyChanged("UnconfinedCompressiveStrength");
            }
        }

        private PressureMeasure UnconfinedCompressiveStrengthField; 

        /// <summary>
        /// ProppantAgentKind property
        /// </summary>
		[Description("Proppant type or Function.")]
		[XmlElement("ProppantAgentKind")]
        public String ProppantAgentKind {
            get {
                return ProppantAgentKindField;
            } 
            set {
                ProppantAgentKindField = value;
                NotifyPropertyChanged("ProppantAgentKind");
            }
        }

        private String ProppantAgentKindField; 

        /// <summary>
        /// ISO13503_2Properties property
        /// </summary>
		[RecurringElement]
		[XmlElement("ISO13503_2Properties")]
        public List<StimISO13503_2Properties> ISO13503_2Properties {
            get {
                return ISO13503_2PropertiesField;
            } 
            set {
                ISO13503_2PropertiesField = value;
                NotifyPropertyChanged("ISO13503_2Properties");
            }
        }

         [XmlIgnore]
         public bool ISO13503_2PropertiesSpecified
         {
            get {
             if(ISO13503_2PropertiesField!=null)
                return ISO13503_2PropertiesField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimISO13503_2Properties> ISO13503_2PropertiesField; 

        /// <summary>
        /// ISO13503_5Point property
        /// </summary>
		[RecurringElement]
		[XmlElement("ISO13503_5Point")]
        public List<StimISO13503_5Point> ISO13503_5Point {
            get {
                return ISO13503_5PointField;
            } 
            set {
                ISO13503_5PointField = value;
                NotifyPropertyChanged("ISO13503_5Point");
            }
        }

         [XmlIgnore]
         public bool ISO13503_5PointSpecified
         {
            get {
             if(ISO13503_5PointField!=null)
                return ISO13503_5PointField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimISO13503_5Point> ISO13503_5PointField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimJobMaterialCatalog xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimJobMaterialCatalog", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimJobMaterialCatalog xsd type.")]
    public partial class StimJobMaterialCatalog : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Additives property
        /// </summary>
		[Description("List of additives in the catalog.")]
        [RecurringElement]
		[XmlElement("Additives")]
        public List<StimAdditive> Additives {
            get {
                return AdditivesField;
            } 
            set {
                AdditivesField = value;
                NotifyPropertyChanged("Additives");
            }
        }

         [XmlIgnore]
         public bool AdditivesSpecified
         {
            get {
             if(AdditivesField!=null)
                return AdditivesField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimAdditive> AdditivesField; 

        /// <summary>
        /// ProppantAgents property
        /// </summary>
		[Description("List of proppant agents in the catalog.")]
        [RecurringElement]
		[XmlElement("ProppantAgents")]
        public List<StimProppantAgent> ProppantAgents {
            get {
                return ProppantAgentsField;
            } 
            set {
                ProppantAgentsField = value;
                NotifyPropertyChanged("ProppantAgents");
            }
        }

         [XmlIgnore]
         public bool ProppantAgentsSpecified
         {
            get {
             if(ProppantAgentsField!=null)
                return ProppantAgentsField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimProppantAgent> ProppantAgentsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SurfaceEquipment xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SurfaceEquipment", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the SurfaceEquipment xsd type.")]
    public partial class SurfaceEquipment : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("Description of item and details.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// PresRating property
        /// </summary>
		[Description("Pressure rating of the item.")]
        [ComponentElement]
		[XmlElement("PresRating")]
        public PressureMeasure PresRating {
            get {
                return PresRatingField;
            } 
            set {
                PresRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure PresRatingField; 

        /// <summary>
        /// TypeSurfEquip property
        /// </summary>
		[Required]
        [Description("Surface equipment type (IADC1-4,Custom, Coiled Tubing).")]
		[XmlElement("TypeSurfEquip")]
        public SurfEquipType? TypeSurfEquip {
            get {
                return TypeSurfEquipField;
            } 
            set {
                TypeSurfEquipField = value;
                NotifyPropertyChanged("TypeSurfEquip");
            }
        }

        private SurfEquipType? TypeSurfEquipField; 

        /// <summary>
        /// UsePumpDischarge property
        /// </summary>
		[Description("Use pump discharge Line. Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("UsePumpDischarge")]
        public Boolean? UsePumpDischarge {
            get {
                return UsePumpDischargeField;
            } 
            set {
                UsePumpDischargeField = value;
             if(value!=null) 
                 this.UsePumpDischargeSpecified = true;
                NotifyPropertyChanged("UsePumpDischarge");
            }
        }

        private Boolean? UsePumpDischargeField; 

        /// <summary>
        /// UsePumpDischargeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UsePumpDischargeSpecified {
            get {
                return UsePumpDischargeSpecifiedField;
            } 
            set {
                UsePumpDischargeSpecifiedField = value;
                NotifyPropertyChanged("UsePumpDischargeSpecified");
            }
        }

        private Boolean UsePumpDischargeSpecifiedField; 

        /// <summary>
        /// UseStandpipe property
        /// </summary>
		[Description("Use standpipe geometry.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("UseStandpipe")]
        public Boolean? UseStandpipe {
            get {
                return UseStandpipeField;
            } 
            set {
                UseStandpipeField = value;
             if(value!=null) 
                 this.UseStandpipeSpecified = true;
                NotifyPropertyChanged("UseStandpipe");
            }
        }

        private Boolean? UseStandpipeField; 

        /// <summary>
        /// UseStandpipeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UseStandpipeSpecified {
            get {
                return UseStandpipeSpecifiedField;
            } 
            set {
                UseStandpipeSpecifiedField = value;
                NotifyPropertyChanged("UseStandpipeSpecified");
            }
        }

        private Boolean UseStandpipeSpecifiedField; 

        /// <summary>
        /// UseHose property
        /// </summary>
		[Description("Use kelly hose geometry.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("UseHose")]
        public Boolean? UseHose {
            get {
                return UseHoseField;
            } 
            set {
                UseHoseField = value;
             if(value!=null) 
                 this.UseHoseSpecified = true;
                NotifyPropertyChanged("UseHose");
            }
        }

        private Boolean? UseHoseField; 

        /// <summary>
        /// UseHoseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UseHoseSpecified {
            get {
                return UseHoseSpecifiedField;
            } 
            set {
                UseHoseSpecifiedField = value;
                NotifyPropertyChanged("UseHoseSpecified");
            }
        }

        private Boolean UseHoseSpecifiedField; 

        /// <summary>
        /// UseSwivel property
        /// </summary>
		[Description("Use swivel geometry.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("UseSwivel")]
        public Boolean? UseSwivel {
            get {
                return UseSwivelField;
            } 
            set {
                UseSwivelField = value;
             if(value!=null) 
                 this.UseSwivelSpecified = true;
                NotifyPropertyChanged("UseSwivel");
            }
        }

        private Boolean? UseSwivelField; 

        /// <summary>
        /// UseSwivelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UseSwivelSpecified {
            get {
                return UseSwivelSpecifiedField;
            } 
            set {
                UseSwivelSpecifiedField = value;
                NotifyPropertyChanged("UseSwivelSpecified");
            }
        }

        private Boolean UseSwivelSpecifiedField; 

        /// <summary>
        /// UseKelly property
        /// </summary>
		[Description("Use kelly geometry.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("UseKelly")]
        public Boolean? UseKelly {
            get {
                return UseKellyField;
            } 
            set {
                UseKellyField = value;
             if(value!=null) 
                 this.UseKellySpecified = true;
                NotifyPropertyChanged("UseKelly");
            }
        }

        private Boolean? UseKellyField; 

        /// <summary>
        /// UseKellySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UseKellySpecified {
            get {
                return UseKellySpecifiedField;
            } 
            set {
                UseKellySpecifiedField = value;
                NotifyPropertyChanged("UseKellySpecified");
            }
        }

        private Boolean UseKellySpecifiedField; 

        /// <summary>
        /// UseTopStack property
        /// </summary>
		[Description("Use top stack height.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("UseTopStack")]
        public Boolean? UseTopStack {
            get {
                return UseTopStackField;
            } 
            set {
                UseTopStackField = value;
             if(value!=null) 
                 this.UseTopStackSpecified = true;
                NotifyPropertyChanged("UseTopStack");
            }
        }

        private Boolean? UseTopStackField; 

        /// <summary>
        /// UseTopStackSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UseTopStackSpecified {
            get {
                return UseTopStackSpecifiedField;
            } 
            set {
                UseTopStackSpecifiedField = value;
                NotifyPropertyChanged("UseTopStackSpecified");
            }
        }

        private Boolean UseTopStackSpecifiedField; 

        /// <summary>
        /// UseInjStack property
        /// </summary>
		[Description("Use injector stack height.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("UseInjStack")]
        public Boolean? UseInjStack {
            get {
                return UseInjStackField;
            } 
            set {
                UseInjStackField = value;
             if(value!=null) 
                 this.UseInjStackSpecified = true;
                NotifyPropertyChanged("UseInjStack");
            }
        }

        private Boolean? UseInjStackField; 

        /// <summary>
        /// UseInjStackSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UseInjStackSpecified {
            get {
                return UseInjStackSpecifiedField;
            } 
            set {
                UseInjStackSpecifiedField = value;
                NotifyPropertyChanged("UseInjStackSpecified");
            }
        }

        private Boolean UseInjStackSpecifiedField; 

        /// <summary>
        /// UseSurfaceIron property
        /// </summary>
		[Description("Use surface iron description.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("UseSurfaceIron")]
        public Boolean? UseSurfaceIron {
            get {
                return UseSurfaceIronField;
            } 
            set {
                UseSurfaceIronField = value;
             if(value!=null) 
                 this.UseSurfaceIronSpecified = true;
                NotifyPropertyChanged("UseSurfaceIron");
            }
        }

        private Boolean? UseSurfaceIronField; 

        /// <summary>
        /// UseSurfaceIronSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UseSurfaceIronSpecified {
            get {
                return UseSurfaceIronSpecifiedField;
            } 
            set {
                UseSurfaceIronSpecifiedField = value;
                NotifyPropertyChanged("UseSurfaceIronSpecified");
            }
        }

        private Boolean UseSurfaceIronSpecifiedField; 

        /// <summary>
        /// IdStandpipe property
        /// </summary>
		[Description("Inner diameter of standpipe.")]
        [ComponentElement]
		[XmlElement("IdStandpipe")]
        public LengthMeasure IdStandpipe {
            get {
                return IdStandpipeField;
            } 
            set {
                IdStandpipeField = value;
                NotifyPropertyChanged("IdStandpipe");
            }
        }

        private LengthMeasure IdStandpipeField; 

        /// <summary>
        /// LenStandpipe property
        /// </summary>
		[Description("Length of standpipe.")]
        [ComponentElement]
		[XmlElement("LenStandpipe")]
        public LengthMeasure LenStandpipe {
            get {
                return LenStandpipeField;
            } 
            set {
                LenStandpipeField = value;
                NotifyPropertyChanged("LenStandpipe");
            }
        }

        private LengthMeasure LenStandpipeField; 

        /// <summary>
        /// IdHose property
        /// </summary>
		[Description("Inner diameter of kelly hose.")]
        [ComponentElement]
		[XmlElement("IdHose")]
        public LengthMeasure IdHose {
            get {
                return IdHoseField;
            } 
            set {
                IdHoseField = value;
                NotifyPropertyChanged("IdHose");
            }
        }

        private LengthMeasure IdHoseField; 

        /// <summary>
        /// LenHose property
        /// </summary>
		[Description("Length of kelly hose.")]
        [ComponentElement]
		[XmlElement("LenHose")]
        public LengthMeasure LenHose {
            get {
                return LenHoseField;
            } 
            set {
                LenHoseField = value;
                NotifyPropertyChanged("LenHose");
            }
        }

        private LengthMeasure LenHoseField; 

        /// <summary>
        /// IdSwivel property
        /// </summary>
		[Description("Inner diameter of swivel.")]
        [ComponentElement]
		[XmlElement("IdSwivel")]
        public LengthMeasure IdSwivel {
            get {
                return IdSwivelField;
            } 
            set {
                IdSwivelField = value;
                NotifyPropertyChanged("IdSwivel");
            }
        }

        private LengthMeasure IdSwivelField; 

        /// <summary>
        /// LenSwivel property
        /// </summary>
		[Description("Length of swivel.")]
        [ComponentElement]
		[XmlElement("LenSwivel")]
        public LengthMeasure LenSwivel {
            get {
                return LenSwivelField;
            } 
            set {
                LenSwivelField = value;
                NotifyPropertyChanged("LenSwivel");
            }
        }

        private LengthMeasure LenSwivelField; 

        /// <summary>
        /// IdKelly property
        /// </summary>
		[Description("Inner diameter of kelly hose.")]
        [ComponentElement]
		[XmlElement("IdKelly")]
        public LengthMeasure IdKelly {
            get {
                return IdKellyField;
            } 
            set {
                IdKellyField = value;
                NotifyPropertyChanged("IdKelly");
            }
        }

        private LengthMeasure IdKellyField; 

        /// <summary>
        /// LenKelly property
        /// </summary>
		[Description("Length of kelly.")]
        [ComponentElement]
		[XmlElement("LenKelly")]
        public LengthMeasure LenKelly {
            get {
                return LenKellyField;
            } 
            set {
                LenKellyField = value;
                NotifyPropertyChanged("LenKelly");
            }
        }

        private LengthMeasure LenKellyField; 

        /// <summary>
        /// IdSurfaceIron property
        /// </summary>
		[Description("Inner diameter of surface iron.")]
        [ComponentElement]
		[XmlElement("IdSurfaceIron")]
        public LengthMeasure IdSurfaceIron {
            get {
                return IdSurfaceIronField;
            } 
            set {
                IdSurfaceIronField = value;
                NotifyPropertyChanged("IdSurfaceIron");
            }
        }

        private LengthMeasure IdSurfaceIronField; 

        /// <summary>
        /// LenSurfaceIron property
        /// </summary>
		[Description("Length of surface iron.")]
        [ComponentElement]
		[XmlElement("LenSurfaceIron")]
        public LengthMeasure LenSurfaceIron {
            get {
                return LenSurfaceIronField;
            } 
            set {
                LenSurfaceIronField = value;
                NotifyPropertyChanged("LenSurfaceIron");
            }
        }

        private LengthMeasure LenSurfaceIronField; 

        /// <summary>
        /// HtSurfaceIron property
        /// </summary>
		[Description("Height of surface iron.")]
        [ComponentElement]
		[XmlElement("HtSurfaceIron")]
        public LengthMeasure HeightSurfaceIron {
            get {
                return HtSurfaceIronField;
            } 
            set {
                HtSurfaceIronField = value;
                NotifyPropertyChanged("HeightSurfaceIron");
            }
        }

        private LengthMeasure HtSurfaceIronField; 

        /// <summary>
        /// IdDischargeLine property
        /// </summary>
		[Description("Coiled tubing - Inner diameter of pump discharge line.")]
        [ComponentElement]
		[XmlElement("IdDischargeLine")]
        public LengthMeasure IdDischargeLine {
            get {
                return IdDischargeLineField;
            } 
            set {
                IdDischargeLineField = value;
                NotifyPropertyChanged("IdDischargeLine");
            }
        }

        private LengthMeasure IdDischargeLineField; 

        /// <summary>
        /// LenDischargeLine property
        /// </summary>
		[Description("Coiled tubing - Length of pump discharge line.")]
        [ComponentElement]
		[XmlElement("LenDischargeLine")]
        public LengthMeasure LenDischargeLine {
            get {
                return LenDischargeLineField;
            } 
            set {
                LenDischargeLineField = value;
                NotifyPropertyChanged("LenDischargeLine");
            }
        }

        private LengthMeasure LenDischargeLineField; 

        /// <summary>
        /// CtWrapType property
        /// </summary>
		[StringLength(64)]
        [Description("Coiled tubing - Coiled tubing wrap type.")]
		[XmlElement("CtWrapType")]
        public String CTWrapType {
            get {
                return CtWrapTypeField;
            } 
            set {
                CtWrapTypeField = value;
                NotifyPropertyChanged("CTWrapType");
            }
        }

        private String CtWrapTypeField; 

        /// <summary>
        /// OdReel property
        /// </summary>
		[Description("Coiled tubing - Specifies the OD of the coiled tubing reel.")]
        [ComponentElement]
		[XmlElement("OdReel")]
        public LengthMeasure OuterDiameterReel {
            get {
                return OdReelField;
            } 
            set {
                OdReelField = value;
                NotifyPropertyChanged("OuterDiameterReel");
            }
        }

        private LengthMeasure OdReelField; 

        /// <summary>
        /// OdCore property
        /// </summary>
		[Description("Coiled tubing - Outer diameter of the reel core that the coiled tubing is wrapped around.")]
        [ComponentElement]
		[XmlElement("OdCore")]
        public LengthMeasure OuterDiameterCore {
            get {
                return OdCoreField;
            } 
            set {
                OdCoreField = value;
                NotifyPropertyChanged("OuterDiameterCore");
            }
        }

        private LengthMeasure OdCoreField; 

        /// <summary>
        /// WidReelWrap property
        /// </summary>
		[Description("Coiled tubing - Width of the reel core. This is the inside dimension.")]
        [ComponentElement]
		[XmlElement("WidReelWrap")]
        public LengthMeasure WidReelWrap {
            get {
                return WidReelWrapField;
            } 
            set {
                WidReelWrapField = value;
                NotifyPropertyChanged("WidReelWrap");
            }
        }

        private LengthMeasure WidReelWrapField; 

        /// <summary>
        /// LenReel property
        /// </summary>
		[Description("Coiled tubing - Length of the coiled tubing remaining on the reel.")]
        [ComponentElement]
		[XmlElement("LenReel")]
        public LengthMeasure LenReel {
            get {
                return LenReelField;
            } 
            set {
                LenReelField = value;
                NotifyPropertyChanged("LenReel");
            }
        }

        private LengthMeasure LenReelField; 

        /// <summary>
        /// InjStkUp property
        /// </summary>
		[Description("Coiled tubing - Injector Stack Up.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("InjStkUp")]
        public Boolean? InjStkUp {
            get {
                return InjStkUpField;
            } 
            set {
                InjStkUpField = value;
             if(value!=null) 
                 this.InjStkUpSpecified = true;
                NotifyPropertyChanged("InjStkUp");
            }
        }

        private Boolean? InjStkUpField; 

        /// <summary>
        /// InjStkUpSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean InjStkUpSpecified {
            get {
                return InjStkUpSpecifiedField;
            } 
            set {
                InjStkUpSpecifiedField = value;
                NotifyPropertyChanged("InjStkUpSpecified");
            }
        }

        private Boolean InjStkUpSpecifiedField; 

        /// <summary>
        /// HtInjStk property
        /// </summary>
		[Description("Coiled tubing -The length of tubing from the end of the coil reel to the rotary kelly bushing.  Basically we define what is in the hole and on the reel.  This measurement takes into account  the 20 or so feet of tubing that is being straightened and shoved through the injector head.")]
        [ComponentElement]
		[XmlElement("HtInjStk")]
        public LengthMeasure HeightInjStk {
            get {
                return HtInjStkField;
            } 
            set {
                HtInjStkField = value;
                NotifyPropertyChanged("HeightInjStk");
            }
        }

        private LengthMeasure HtInjStkField; 

        /// <summary>
        /// UmbInside property
        /// </summary>
		[Description("Coiled tubing - Umbilical inside, true/false check box so that you can account for the  wireline inside the coiled tubing.  With this pressure loss calculation, you can calculate  for the strings used for logging, wire line coring, etc.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("UmbInside")]
        public Boolean? UmbInside {
            get {
                return UmbInsideField;
            } 
            set {
                UmbInsideField = value;
             if(value!=null) 
                 this.UmbInsideSpecified = true;
                NotifyPropertyChanged("UmbInside");
            }
        }

        private Boolean? UmbInsideField; 

        /// <summary>
        /// UmbInsideSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UmbInsideSpecified {
            get {
                return UmbInsideSpecifiedField;
            } 
            set {
                UmbInsideSpecifiedField = value;
                NotifyPropertyChanged("UmbInsideSpecified");
            }
        }

        private Boolean UmbInsideSpecifiedField; 

        /// <summary>
        /// OdUmbilical property
        /// </summary>
		[Description("Coiled tubing - Outer diameter of the umbilical.")]
        [ComponentElement]
		[XmlElement("OdUmbilical")]
        public LengthMeasure OuterDiameterUmbilical {
            get {
                return OdUmbilicalField;
            } 
            set {
                OdUmbilicalField = value;
                NotifyPropertyChanged("OuterDiameterUmbilical");
            }
        }

        private LengthMeasure OdUmbilicalField; 

        /// <summary>
        /// LenUmbilical property
        /// </summary>
		[Description("Coiled tubing - Length of the umbilical.")]
        [ComponentElement]
		[XmlElement("LenUmbilical")]
        public LengthMeasure LenUmbilical {
            get {
                return LenUmbilicalField;
            } 
            set {
                LenUmbilicalField = value;
                NotifyPropertyChanged("LenUmbilical");
            }
        }

        private LengthMeasure LenUmbilicalField; 

        /// <summary>
        /// IdTopStk property
        /// </summary>
		[Description("Top drive - Inner diameter of top stack.")]
        [ComponentElement]
		[XmlElement("IdTopStk")]
        public LengthMeasure IdTopStk {
            get {
                return IdTopStkField;
            } 
            set {
                IdTopStkField = value;
                NotifyPropertyChanged("IdTopStk");
            }
        }

        private LengthMeasure IdTopStkField; 

        /// <summary>
        /// HtTopStk property
        /// </summary>
		[Description("Top drive - The distance that the mud travels from the end of the standpipe  hose to the drill pipe connection at the bottom of the top drive. We are measuring the  distance that the mud will flow through the top drive.")]
        [ComponentElement]
		[XmlElement("HtTopStk")]
        public LengthMeasure HeightTopStk {
            get {
                return HtTopStkField;
            } 
            set {
                HtTopStkField = value;
                NotifyPropertyChanged("HeightTopStk");
            }
        }

        private LengthMeasure HtTopStkField; 

        /// <summary>
        /// HtFlange property
        /// </summary>
		[Description("Height of flange. If you select Top Drive Stackup Height, Swivel and Kelly are disabled so that you can specify the top-drive rotary system.")]
        [ComponentElement]
		[XmlElement("HtFlange")]
        public LengthMeasure HeightFlange {
            get {
                return HtFlangeField;
            } 
            set {
                HtFlangeField = value;
                NotifyPropertyChanged("HeightFlange");
            }
        }

        private LengthMeasure HtFlangeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Degasser xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Degasser", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Degasser xsd type.")]
    public partial class Degasser : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
		[XmlElement("Manufacturer")]
        public String Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String ManufacturerField; 

        /// <summary>
        /// Model property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturers designated model.")]
		[XmlElement("Model")]
        public String Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String ModelField; 

        /// <summary>
        /// DTimInstall property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of installation.")]
		[XmlElement("DTimInstall")]
        public String DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private String DTimInstallField; 

        /// <summary>
        /// DTimRemove property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Removal date and time.")]
		[XmlElement("DTimRemove")]
        public String DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private String DTimRemoveField; 

        /// <summary>
        /// Type property
        /// </summary>
		[StringLength(64)]
        [Description("Description for the type of object.")]
		[XmlElement("Type")]
        public String Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String TypeField; 

        /// <summary>
        /// Owner property
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
		[XmlElement("Owner")]
        public String Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String OwnerField; 

        /// <summary>
        /// Height property
        /// </summary>
		[Description("Height of separator.")]
        [ComponentElement]
		[XmlElement("Height")]
        public LengthMeasure Height {
            get {
                return HeightField;
            } 
            set {
                HeightField = value;
                NotifyPropertyChanged("Height");
            }
        }

        private LengthMeasure HeightField; 

        /// <summary>
        /// Len property
        /// </summary>
		[Description("Length of separator.")]
        [ComponentElement]
		[XmlElement("Len")]
        public LengthMeasure Len {
            get {
                return LenField;
            } 
            set {
                LenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure LenField; 

        /// <summary>
        /// Id property
        /// </summary>
		[Description("Internal diameter of object.")]
        [ComponentElement]
		[XmlElement("Id")]
        public LengthMeasure Id {
            get {
                return IdField;
            } 
            set {
                IdField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private LengthMeasure IdField; 

        /// <summary>
        /// CapFlow property
        /// </summary>
		[Description("Maximum pump rate at which the unit will efficiently operate.")]
        [ComponentElement]
		[XmlElement("CapFlow")]
        public VolumePerTimeMeasure CapFlow {
            get {
                return CapFlowField;
            } 
            set {
                CapFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumePerTimeMeasure CapFlowField; 

        /// <summary>
        /// AreaSeparatorFlow property
        /// </summary>
		[Description("Flow area of separator.")]
        [ComponentElement]
		[XmlElement("AreaSeparatorFlow")]
        public AreaMeasure AreaSeparatorFlow {
            get {
                return AreaSeparatorFlowField;
            } 
            set {
                AreaSeparatorFlowField = value;
                NotifyPropertyChanged("AreaSeparatorFlow");
            }
        }

        private AreaMeasure AreaSeparatorFlowField; 

        /// <summary>
        /// HtMudSeal property
        /// </summary>
		[Description("Depth of trip-tank fluid level to provide back pressure against separator flow.")]
        [ComponentElement]
		[XmlElement("HtMudSeal")]
        public LengthMeasure HeightMudSeal {
            get {
                return HtMudSealField;
            } 
            set {
                HtMudSealField = value;
                NotifyPropertyChanged("HeightMudSeal");
            }
        }

        private LengthMeasure HtMudSealField; 

        /// <summary>
        /// IdInlet property
        /// </summary>
		[Description("Internal diameter of inlet line.")]
        [ComponentElement]
		[XmlElement("IdInlet")]
        public LengthMeasure IdInlet {
            get {
                return IdInletField;
            } 
            set {
                IdInletField = value;
                NotifyPropertyChanged("IdInlet");
            }
        }

        private LengthMeasure IdInletField; 

        /// <summary>
        /// IdVentLine property
        /// </summary>
		[Description("Internal diameter of vent line.")]
        [ComponentElement]
		[XmlElement("IdVentLine")]
        public LengthMeasure IdVentLine {
            get {
                return IdVentLineField;
            } 
            set {
                IdVentLineField = value;
                NotifyPropertyChanged("IdVentLine");
            }
        }

        private LengthMeasure IdVentLineField; 

        /// <summary>
        /// LenVentLine property
        /// </summary>
		[Description("Length of vent line.")]
        [ComponentElement]
		[XmlElement("LenVentLine")]
        public LengthMeasure LenVentLine {
            get {
                return LenVentLineField;
            } 
            set {
                LenVentLineField = value;
                NotifyPropertyChanged("LenVentLine");
            }
        }

        private LengthMeasure LenVentLineField; 

        /// <summary>
        /// CapGasSep property
        /// </summary>
		[Description("Safe gas separating capacity.")]
        [ComponentElement]
		[XmlElement("CapGasSep")]
        public VolumePerTimeMeasure CapGasSep {
            get {
                return CapGasSepField;
            } 
            set {
                CapGasSepField = value;
                NotifyPropertyChanged("CapGasSep");
            }
        }

        private VolumePerTimeMeasure CapGasSepField; 

        /// <summary>
        /// CapBlowdown property
        /// </summary>
		[Description("Gas vent rate at which the vent line pressure drop exceeds the hydrostatic  head due to the mud seal.")]
        [ComponentElement]
		[XmlElement("CapBlowdown")]
        public VolumePerTimeMeasure CapBlowdown {
            get {
                return CapBlowdownField;
            } 
            set {
                CapBlowdownField = value;
                NotifyPropertyChanged("CapBlowdown");
            }
        }

        private VolumePerTimeMeasure CapBlowdownField; 

        /// <summary>
        /// PresRating property
        /// </summary>
		[Description("Pressure rating of the item.")]
        [ComponentElement]
		[XmlElement("PresRating")]
        public PressureMeasure PresRating {
            get {
                return PresRatingField;
            } 
            set {
                PresRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure PresRatingField; 

        /// <summary>
        /// TempRating property
        /// </summary>
		[Description("Temperature rating of separator.")]
        [ComponentElement]
		[XmlElement("TempRating")]
        public ThermodynamicTemperatureMeasure TempRating {
            get {
                return TempRatingField;
            } 
            set {
                TempRatingField = value;
                NotifyPropertyChanged("TempRating");
            }
        }

        private ThermodynamicTemperatureMeasure TempRatingField; 

        /// <summary>
        /// NameTag property
        /// </summary>
		[Description("An identification tag for the degasser. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         [XmlIgnore]
         public bool NameTagSpecified
         {
            get {
             if(NameTagField!=null)
                return NameTagField.Count>0?true:false;
             else return false;
            } 
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Degasser")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AreaMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AreaMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AreaMeasure xsd type.")]
    public partial class AreaMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        public AreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaMeasure(Double value, AreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public AreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the NameTag xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NameTag", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the NameTag xsd type.")]
    public partial class NameTag : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The physical identification string of the equipment tag.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// NumberingScheme property
        /// </summary>
		[Required]
        [StringLength(40)]
        [Description("The format or encoding specification of the equipment tag.  The tag may contain may different pieces of information and knowledge of that  information is inherent in the specification.  The \"identification string\" is a mandatory part of the information in a tag.")]
		[XmlElement("NumberingScheme")]
        public String NumberingScheme {
            get {
                return NumberingSchemeField;
            } 
            set {
                NumberingSchemeField = value;
                NotifyPropertyChanged("NumberingScheme");
            }
        }

        private String NumberingSchemeField; 

        /// <summary>
        /// Technology property
        /// </summary>
		[StringLength(40)]
        [Description("Identifies the general type of identifier on an item.  If multiple identifiers exist on an item, a separate description set for each identifier should be created.   For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling.  The barcode label may in turn be an RFID equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label'  - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label'  - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.")]
		[XmlElement("Technology")]
        public String Technology {
            get {
                return TechnologyField;
            } 
            set {
                TechnologyField = value;
                NotifyPropertyChanged("Technology");
            }
        }

        private String TechnologyField; 

        /// <summary>
        /// Location property
        /// </summary>
		[StringLength(40)]
        [Description("An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item.  This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener.  'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item.  Most non-downhole tools will use either 'body', 'other' or not specified as the location tends to lose value with smaller or non threaded items.")]
		[XmlElement("Location")]
        public String Location {
            get {
                return LocationField;
            } 
            set {
                LocationField = value;
                NotifyPropertyChanged("Location");
            }
        }

        private String LocationField; 

        /// <summary>
        /// InstallationDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("When the tag was installed in or on the item.")]
		[XmlElement("InstallationDate")]
        public String InstallationDate {
            get {
                return InstallationDateField;
            } 
            set {
                InstallationDateField = value;
                NotifyPropertyChanged("InstallationDate");
            }
        }

        private String InstallationDateField; 

        /// <summary>
        /// InstallationCompany property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the company that installed the tag.")]
		[XmlElement("InstallationCompany")]
        public String InstallationCompany {
            get {
                return InstallationCompanyField;
            } 
            set {
                InstallationCompanyField = value;
                NotifyPropertyChanged("InstallationCompany");
            }
        }

        private String InstallationCompanyField; 

        /// <summary>
        /// MountingCode property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to a manufacturers or installers installation  description, code, or method.")]
		[XmlElement("MountingCode")]
        public String MountingCode {
            get {
                return MountingCodeField;
            } 
            set {
                MountingCodeField = value;
                NotifyPropertyChanged("MountingCode");
            }
        }

        private String MountingCodeField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A comment or remark about the tag.")]
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of NameTag")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Hydrocyclone xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Hydrocyclone", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Hydrocyclone xsd type.")]
    public partial class Hydrocyclone : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
		[XmlElement("Manufacturer")]
        public String Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String ManufacturerField; 

        /// <summary>
        /// Model property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturers designated model.")]
		[XmlElement("Model")]
        public String Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String ModelField; 

        /// <summary>
        /// DTimInstall property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of installation.")]
		[XmlElement("DTimInstall")]
        public String DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private String DTimInstallField; 

        /// <summary>
        /// DTimRemove property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Removal date and time.")]
		[XmlElement("DTimRemove")]
        public String DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private String DTimRemoveField; 

        /// <summary>
        /// Type property
        /// </summary>
		[StringLength(64)]
        [Description("Description for the type of object.")]
		[XmlElement("Type")]
        public String Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String TypeField; 

        /// <summary>
        /// DescCone property
        /// </summary>
		[StringLength(64)]
        [Description("Cones description.")]
		[XmlElement("DescCone")]
        public String DescCone {
            get {
                return DescConeField;
            } 
            set {
                DescConeField = value;
                NotifyPropertyChanged("DescCone");
            }
        }

        private String DescConeField; 

        /// <summary>
        /// Owner property
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
		[XmlElement("Owner")]
        public String Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String OwnerField; 

        /// <summary>
        /// NameTag property
        /// </summary>
		[Description("An identification tag for the hydrocyclone. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         [XmlIgnore]
         public bool NameTagSpecified
         {
            get {
             if(NameTagField!=null)
                return NameTagField.Count>0?true:false;
             else return false;
            } 
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Hydrocyclone")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Centrifuge xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Centrifuge", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Centrifuge xsd type.")]
    public partial class Centrifuge : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
		[XmlElement("Manufacturer")]
        public String Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String ManufacturerField; 

        /// <summary>
        /// Model property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturers designated model.")]
		[XmlElement("Model")]
        public String Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String ModelField; 

        /// <summary>
        /// DTimInstall property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of installation.")]
		[XmlElement("DTimInstall")]
        public String DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private String DTimInstallField; 

        /// <summary>
        /// DTimRemove property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Removal date and time.")]
		[XmlElement("DTimRemove")]
        public String DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private String DTimRemoveField; 

        /// <summary>
        /// Type property
        /// </summary>
		[StringLength(64)]
        [Description("Description for the type of object.")]
		[XmlElement("Type")]
        public String Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String TypeField; 

        /// <summary>
        /// CapFlow property
        /// </summary>
		[Description("Maximum pump rate at which the unit will efficiently operate.")]
        [ComponentElement]
		[XmlElement("CapFlow")]
        public VolumePerTimeMeasure CapFlow {
            get {
                return CapFlowField;
            } 
            set {
                CapFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumePerTimeMeasure CapFlowField; 

        /// <summary>
        /// Owner property
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
		[XmlElement("Owner")]
        public String Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String OwnerField; 

        /// <summary>
        /// NameTag property
        /// </summary>
		[Description("An identification tag for the centrifuge. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         [XmlIgnore]
         public bool NameTagSpecified
         {
            get {
             if(NameTagField!=null)
                return NameTagField.Count>0?true:false;
             else return false;
            } 
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Centrifuge")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudPump xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudPump", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudPump xsd type.")]
    public partial class MudPump : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("Relative pump number. One-based.")]
		[XmlElement("Index")]
        public Int32? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private Int32? IndexField; 

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
		[XmlElement("Manufacturer")]
        public String Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String ManufacturerField; 

        /// <summary>
        /// Model property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturers designated model.")]
		[XmlElement("Model")]
        public String Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String ModelField; 

        /// <summary>
        /// DTimInstall property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of pump installation.")]
		[XmlElement("DTimInstall")]
        public String DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private String DTimInstallField; 

        /// <summary>
        /// DTimRemove property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time the pump was removed.")]
		[XmlElement("DTimRemove")]
        public String DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private String DTimRemoveField; 

        /// <summary>
        /// Owner property
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
		[XmlElement("Owner")]
        public String Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String OwnerField; 

        /// <summary>
        /// TypePump property
        /// </summary>
		[Description("Pump type reference list.")]
		[XmlElement("TypePump")]
        public PumpType? TypePump {
            get {
                return TypePumpField;
            } 
            set {
                TypePumpField = value;
             if(value!=null) 
                 this.TypePumpSpecified = true;
                NotifyPropertyChanged("TypePump");
            }
        }

        private PumpType? TypePumpField; 

        /// <summary>
        /// TypePumpSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypePumpSpecified {
            get {
                return TypePumpSpecifiedField;
            } 
            set {
                TypePumpSpecifiedField = value;
                NotifyPropertyChanged("TypePumpSpecified");
            }
        }

        private Boolean TypePumpSpecifiedField; 

        /// <summary>
        /// NumCyl property
        /// </summary>
		[Description("Number of cylinders (3=single acting, 2 = double acting)")]
		[XmlElement("NumCyl")]
        public Int32? NumCyl {
            get {
                return NumCylField;
            } 
            set {
                NumCylField = value;
             if(value!=null) 
                 this.NumCylSpecified = true;
                NotifyPropertyChanged("NumCyl");
            }
        }

        private Int32? NumCylField; 

        /// <summary>
        /// NumCylSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumCylSpecified {
            get {
                return NumCylSpecifiedField;
            } 
            set {
                NumCylSpecifiedField = value;
                NotifyPropertyChanged("NumCylSpecified");
            }
        }

        private Boolean NumCylSpecifiedField; 

        /// <summary>
        /// OdRod property
        /// </summary>
		[Description("Rod outer diameter.")]
        [ComponentElement]
		[XmlElement("OdRod")]
        public LengthMeasure OuterDiameterRod {
            get {
                return OdRodField;
            } 
            set {
                OdRodField = value;
                NotifyPropertyChanged("OuterDiameterRod");
            }
        }

        private LengthMeasure OdRodField; 

        /// <summary>
        /// IdLiner property
        /// </summary>
		[Required]
        [Description("Inner diameter of the pump liner.")]
        [ComponentElement]
		[XmlElement("IdLiner")]
        public LengthMeasure LinerSize {
            get {
                return IdLinerField;
            } 
            set {
                IdLinerField = value;
                NotifyPropertyChanged("LinerSize");
            }
        }

        private LengthMeasure IdLinerField; 

        /// <summary>
        /// PumpAction property
        /// </summary>
		[Description("Pump action. 1 = Single acting, 2 = double acting.")]
		[XmlElement("PumpAction")]
        public Int16? PumpAction {
            get {
                return PumpActionField;
            } 
            set {
                PumpActionField = value;
             if(value!=null) 
                 this.PumpActionSpecified = true;
                NotifyPropertyChanged("PumpAction");
            }
        }

        private Int16? PumpActionField; 

        /// <summary>
        /// PumpActionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PumpActionSpecified {
            get {
                return PumpActionSpecifiedField;
            } 
            set {
                PumpActionSpecifiedField = value;
                NotifyPropertyChanged("PumpActionSpecified");
            }
        }

        private Boolean PumpActionSpecifiedField; 

        /// <summary>
        /// Eff property
        /// </summary>
		[Description("Efficiency of the pump.")]
        [ComponentElement]
		[XmlElement("Eff")]
        public PowerPerPowerMeasure Eff {
            get {
                return EffField;
            } 
            set {
                EffField = value;
                NotifyPropertyChanged("Eff");
            }
        }

        private PowerPerPowerMeasure EffField; 

        /// <summary>
        /// LenStroke property
        /// </summary>
		[Description("Stroke length.")]
        [ComponentElement]
		[XmlElement("LenStroke")]
        public LengthMeasure LenStroke {
            get {
                return LenStrokeField;
            } 
            set {
                LenStrokeField = value;
                NotifyPropertyChanged("LenStroke");
            }
        }

        private LengthMeasure LenStrokeField; 

        /// <summary>
        /// PresMx property
        /// </summary>
		[Description("Maximum pump pressure.")]
        [ComponentElement]
		[XmlElement("PresMx")]
        public PressureMeasure PresMax {
            get {
                return PresMxField;
            } 
            set {
                PresMxField = value;
                NotifyPropertyChanged("PresMax");
            }
        }

        private PressureMeasure PresMxField; 

        /// <summary>
        /// PowHydMx property
        /// </summary>
		[Description("Maximum hydraulics horsepower.")]
        [ComponentElement]
		[XmlElement("PowHydMx")]
        public PowerMeasure PowHydMax {
            get {
                return PowHydMxField;
            } 
            set {
                PowHydMxField = value;
                NotifyPropertyChanged("PowHydMax");
            }
        }

        private PowerMeasure PowHydMxField; 

        /// <summary>
        /// SpmMx property
        /// </summary>
		[Description("Maximum Speed.")]
        [ComponentElement]
		[XmlElement("SpmMx")]
        public AngularVelocityMeasure SpmMax {
            get {
                return SpmMxField;
            } 
            set {
                SpmMxField = value;
                NotifyPropertyChanged("SpmMax");
            }
        }

        private AngularVelocityMeasure SpmMxField; 

        /// <summary>
        /// Displacement property
        /// </summary>
		[Required]
        [Description("Pump displacement.")]
        [ComponentElement]
		[XmlElement("Displacement")]
        public VolumeMeasure Displacement {
            get {
                return DisplacementField;
            } 
            set {
                DisplacementField = value;
                NotifyPropertyChanged("Displacement");
            }
        }

        private VolumeMeasure DisplacementField; 

        /// <summary>
        /// PresDamp property
        /// </summary>
		[Description("Pulsation dampener pressure.")]
        [ComponentElement]
		[XmlElement("PresDamp")]
        public PressureMeasure PresDamp {
            get {
                return PresDampField;
            } 
            set {
                PresDampField = value;
                NotifyPropertyChanged("PresDamp");
            }
        }

        private PressureMeasure PresDampField; 

        /// <summary>
        /// VolDamp property
        /// </summary>
		[Description("Pulsation dampener volume.")]
        [ComponentElement]
		[XmlElement("VolDamp")]
        public VolumeMeasure VolDamp {
            get {
                return VolDampField;
            } 
            set {
                VolDampField = value;
                NotifyPropertyChanged("VolDamp");
            }
        }

        private VolumeMeasure VolDampField; 

        /// <summary>
        /// PowMechMx property
        /// </summary>
		[Description("Maximum mechanical power.")]
        [ComponentElement]
		[XmlElement("PowMechMx")]
        public PowerMeasure PowMechMax {
            get {
                return PowMechMxField;
            } 
            set {
                PowMechMxField = value;
                NotifyPropertyChanged("PowMechMax");
            }
        }

        private PowerMeasure PowMechMxField; 

        /// <summary>
        /// NameTag property
        /// </summary>
		[Description("An identification tag for the pump. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         [XmlIgnore]
         public bool NameTagSpecified
         {
            get {
             if(NameTagField!=null)
                return NameTagField.Count>0?true:false;
             else return false;
            } 
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of MudPump")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PowerPerPowerMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PowerPerPowerMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PowerPerPowerMeasure xsd type.")]
    public partial class PowerPerPowerMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PowerPerPowerMeasure class.
        /// </summary>
        public PowerPerPowerMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PowerPerPowerMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PowerPerPowerMeasure(Double value, PowerPerPowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PowerPerPowerUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PowerPerPowerUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AngularVelocityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AngularVelocityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AngularVelocityMeasure xsd type.")]
    public partial class AngularVelocityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AngularVelocityMeasure class.
        /// </summary>
        public AngularVelocityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AngularVelocityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AngularVelocityMeasure(Double value, AngularVelocityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public AngularVelocityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AngularVelocityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Pit xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Pit", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Pit xsd type.")]
    public partial class Pit : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("Relative pit number of all pits on the rig. One-based.")]
		[XmlElement("Index")]
        public Int32? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private Int32? IndexField; 

        /// <summary>
        /// DTimInstall property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of installation.")]
		[XmlElement("DTimInstall")]
        public String DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private String DTimInstallField; 

        /// <summary>
        /// DTimRemove property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Removal date and time.")]
		[XmlElement("DTimRemove")]
        public String DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private String DTimRemoveField; 

        /// <summary>
        /// CapMx property
        /// </summary>
		[Required]
        [Description("Maximum pit capacity.")]
        [ComponentElement]
		[XmlElement("CapMx")]
        public VolumeMeasure CapMax {
            get {
                return CapMxField;
            } 
            set {
                CapMxField = value;
                NotifyPropertyChanged("CapMax");
            }
        }

        private VolumeMeasure CapMxField; 

        /// <summary>
        /// Owner property
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
		[XmlElement("Owner")]
        public String Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String OwnerField; 

        /// <summary>
        /// TypePit property
        /// </summary>
		[Description("The type of pit.")]
		[XmlElement("TypePit")]
        public PitType? TypePit {
            get {
                return TypePitField;
            } 
            set {
                TypePitField = value;
             if(value!=null) 
                 this.TypePitSpecified = true;
                NotifyPropertyChanged("TypePit");
            }
        }

        private PitType? TypePitField; 

        /// <summary>
        /// TypePitSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypePitSpecified {
            get {
                return TypePitSpecifiedField;
            } 
            set {
                TypePitSpecifiedField = value;
                NotifyPropertyChanged("TypePitSpecified");
            }
        }

        private Boolean TypePitSpecifiedField; 

        /// <summary>
        /// IsActive property
        /// </summary>
		[Description("Flag to indicate if Pit is part of the active system.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("IsActive")]
        public Boolean? IsActive {
            get {
                return IsActiveField;
            } 
            set {
                IsActiveField = value;
             if(value!=null) 
                 this.IsActiveSpecified = true;
                NotifyPropertyChanged("IsActive");
            }
        }

        private Boolean? IsActiveField; 

        /// <summary>
        /// IsActiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsActiveSpecified {
            get {
                return IsActiveSpecifiedField;
            } 
            set {
                IsActiveSpecifiedField = value;
                NotifyPropertyChanged("IsActiveSpecified");
            }
        }

        private Boolean IsActiveSpecifiedField; 

        /// <summary>
        /// NameTag property
        /// </summary>
		[Description("An identification tag for the pit. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         [XmlIgnore]
         public bool NameTagSpecified
         {
            get {
             if(NameTagField!=null)
                return NameTagField.Count>0?true:false;
             else return false;
            } 
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Pit")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BopComponent xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BopComponent", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BopComponent xsd type.")]
    public partial class BopComponent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TypeBopComp property
        /// </summary>
		[Description("Type of ram/preventer.")]
		[XmlElement("TypeBopComp")]
        public BopType? TypeBopComp {
            get {
                return TypeBopCompField;
            } 
            set {
                TypeBopCompField = value;
             if(value!=null) 
                 this.TypeBopCompSpecified = true;
                NotifyPropertyChanged("TypeBopComp");
            }
        }

        private BopType? TypeBopCompField; 

        /// <summary>
        /// TypeBopCompSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeBopCompSpecified {
            get {
                return TypeBopCompSpecifiedField;
            } 
            set {
                TypeBopCompSpecifiedField = value;
                NotifyPropertyChanged("TypeBopCompSpecified");
            }
        }

        private Boolean TypeBopCompSpecifiedField; 

        /// <summary>
        /// DescComp property
        /// </summary>
		[StringLength(64)]
        [Description("Description of component.")]
		[XmlElement("DescComp")]
        public String DescComp {
            get {
                return DescCompField;
            } 
            set {
                DescCompField = value;
                NotifyPropertyChanged("DescComp");
            }
        }

        private String DescCompField; 

        /// <summary>
        /// IdPassThru property
        /// </summary>
		[Description("Inner diameter that tubulars can pass thru.")]
        [ComponentElement]
		[XmlElement("IdPassThru")]
        public LengthMeasure IdPassThru {
            get {
                return IdPassThruField;
            } 
            set {
                IdPassThruField = value;
                NotifyPropertyChanged("IdPassThru");
            }
        }

        private LengthMeasure IdPassThruField; 

        /// <summary>
        /// PresWork property
        /// </summary>
		[Description("Working rating pressure of the component.")]
        [ComponentElement]
		[XmlElement("PresWork")]
        public PressureMeasure PresWork {
            get {
                return PresWorkField;
            } 
            set {
                PresWorkField = value;
                NotifyPropertyChanged("PresWork");
            }
        }

        private PressureMeasure PresWorkField; 

        /// <summary>
        /// DiaCloseMn property
        /// </summary>
		[Description("Minimum diameter of component it will seal.")]
        [ComponentElement]
		[XmlElement("DiaCloseMn")]
        public LengthMeasure DiaCloseMin {
            get {
                return DiaCloseMnField;
            } 
            set {
                DiaCloseMnField = value;
                NotifyPropertyChanged("DiaCloseMin");
            }
        }

        private LengthMeasure DiaCloseMnField; 

        /// <summary>
        /// DiaCloseMx property
        /// </summary>
		[Description("Maximum diameter of component it will seal.")]
        [ComponentElement]
		[XmlElement("DiaCloseMx")]
        public LengthMeasure DiaCloseMax {
            get {
                return DiaCloseMxField;
            } 
            set {
                DiaCloseMxField = value;
                NotifyPropertyChanged("DiaCloseMax");
            }
        }

        private LengthMeasure DiaCloseMxField; 

        /// <summary>
        /// Nomenclature property
        /// </summary>
		[StringLength(64)]
        [Description("Arrangement nomenclature for the Blow Out Preventer stack (e.g. S, R, A).")]
		[XmlElement("Nomenclature")]
        public String Nomenclature {
            get {
                return NomenclatureField;
            } 
            set {
                NomenclatureField = value;
                NotifyPropertyChanged("Nomenclature");
            }
        }

        private String NomenclatureField; 

        /// <summary>
        /// IsVariable property
        /// </summary>
		[Description("Is Ram bore variable or single size? Defaults to false.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("IsVariable")]
        public Boolean? IsVariable {
            get {
                return IsVariableField;
            } 
            set {
                IsVariableField = value;
             if(value!=null) 
                 this.IsVariableSpecified = true;
                NotifyPropertyChanged("IsVariable");
            }
        }

        private Boolean? IsVariableField; 

        /// <summary>
        /// IsVariableSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsVariableSpecified {
            get {
                return IsVariableSpecifiedField;
            } 
            set {
                IsVariableSpecifiedField = value;
                NotifyPropertyChanged("IsVariableSpecified");
            }
        }

        private Boolean IsVariableSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of BopComponent")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Bop xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Bop", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Bop xsd type.")]
    public partial class Bop : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
		[XmlElement("Manufacturer")]
        public String Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String ManufacturerField; 

        /// <summary>
        /// Model property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturers designated model.")]
		[XmlElement("Model")]
        public String Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String ModelField; 

        /// <summary>
        /// DTimInstall property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of installation.")]
		[XmlElement("DTimInstall")]
        public String DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private String DTimInstallField; 

        /// <summary>
        /// DTimRemove property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Removal Date.")]
		[XmlElement("DTimRemove")]
        public String DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private String DTimRemoveField; 

        /// <summary>
        /// NameTag property
        /// </summary>
		[Description("An identification tag for the blow out preventer. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         [XmlIgnore]
         public bool NameTagSpecified
         {
            get {
             if(NameTagField!=null)
                return NameTagField.Count>0?true:false;
             else return false;
            } 
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// TypeConnectionBop property
        /// </summary>
		[StringLength(64)]
        [Description("Type of connection to Blow Out Preventer.")]
		[XmlElement("TypeConnectionBop")]
        public String TypeConnectionBop {
            get {
                return TypeConnectionBopField;
            } 
            set {
                TypeConnectionBopField = value;
                NotifyPropertyChanged("TypeConnectionBop");
            }
        }

        private String TypeConnectionBopField; 

        /// <summary>
        /// SizeConnectionBop property
        /// </summary>
		[Description("Size of connection to Blow Out Preventer.")]
        [ComponentElement]
		[XmlElement("SizeConnectionBop")]
        public LengthMeasure SizeConnectionBop {
            get {
                return SizeConnectionBopField;
            } 
            set {
                SizeConnectionBopField = value;
                NotifyPropertyChanged("SizeConnectionBop");
            }
        }

        private LengthMeasure SizeConnectionBopField; 

        /// <summary>
        /// PresBopRating property
        /// </summary>
		[Required]
        [Description("Maximum Pressure rating of Blow Out Preventer.")]
        [ComponentElement]
		[XmlElement("PresBopRating")]
        public PressureMeasure PresBopRating {
            get {
                return PresBopRatingField;
            } 
            set {
                PresBopRatingField = value;
                NotifyPropertyChanged("PresBopRating");
            }
        }

        private PressureMeasure PresBopRatingField; 

        /// <summary>
        /// SizeBopSys property
        /// </summary>
		[Required]
        [Description("Maximum tubulars passable through Blow Out Preventer.")]
        [ComponentElement]
		[XmlElement("SizeBopSys")]
        public LengthMeasure SizeBopSys {
            get {
                return SizeBopSysField;
            } 
            set {
                SizeBopSysField = value;
                NotifyPropertyChanged("SizeBopSys");
            }
        }

        private LengthMeasure SizeBopSysField; 

        /// <summary>
        /// RotBop property
        /// </summary>
		[Description("Is this a Rotating Blow Out Preventer? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("RotBop")]
        public Boolean? RotBop {
            get {
                return RotBopField;
            } 
            set {
                RotBopField = value;
             if(value!=null) 
                 this.RotBopSpecified = true;
                NotifyPropertyChanged("RotBop");
            }
        }

        private Boolean? RotBopField; 

        /// <summary>
        /// RotBopSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RotBopSpecified {
            get {
                return RotBopSpecifiedField;
            } 
            set {
                RotBopSpecifiedField = value;
                NotifyPropertyChanged("RotBopSpecified");
            }
        }

        private Boolean RotBopSpecifiedField; 

        /// <summary>
        /// IdBoosterLine property
        /// </summary>
		[Description("Inner diameter of Booster Line.")]
        [ComponentElement]
		[XmlElement("IdBoosterLine")]
        public LengthMeasure IdBoosterLine {
            get {
                return IdBoosterLineField;
            } 
            set {
                IdBoosterLineField = value;
                NotifyPropertyChanged("IdBoosterLine");
            }
        }

        private LengthMeasure IdBoosterLineField; 

        /// <summary>
        /// OdBoosterLine property
        /// </summary>
		[Description("Outer diameter of Booster Line.")]
        [ComponentElement]
		[XmlElement("OdBoosterLine")]
        public LengthMeasure OuterDiameterBoosterLine {
            get {
                return OdBoosterLineField;
            } 
            set {
                OdBoosterLineField = value;
                NotifyPropertyChanged("OuterDiameterBoosterLine");
            }
        }

        private LengthMeasure OdBoosterLineField; 

        /// <summary>
        /// LenBoosterLine property
        /// </summary>
		[Description("Length of Booster Line along riser.")]
        [ComponentElement]
		[XmlElement("LenBoosterLine")]
        public LengthMeasure LenBoosterLine {
            get {
                return LenBoosterLineField;
            } 
            set {
                LenBoosterLineField = value;
                NotifyPropertyChanged("LenBoosterLine");
            }
        }

        private LengthMeasure LenBoosterLineField; 

        /// <summary>
        /// IdSurfLine property
        /// </summary>
		[Description("Inner diameter of Surface Line.")]
        [ComponentElement]
		[XmlElement("IdSurfLine")]
        public LengthMeasure IdSurfLine {
            get {
                return IdSurfLineField;
            } 
            set {
                IdSurfLineField = value;
                NotifyPropertyChanged("IdSurfLine");
            }
        }

        private LengthMeasure IdSurfLineField; 

        /// <summary>
        /// OdSurfLine property
        /// </summary>
		[Description("Outer diameter of Surface Line.")]
        [ComponentElement]
		[XmlElement("OdSurfLine")]
        public LengthMeasure OuterDiameterSurfLine {
            get {
                return OdSurfLineField;
            } 
            set {
                OdSurfLineField = value;
                NotifyPropertyChanged("OuterDiameterSurfLine");
            }
        }

        private LengthMeasure OdSurfLineField; 

        /// <summary>
        /// LenSurfLine property
        /// </summary>
		[Description("Length of Choke Line along riser.")]
        [ComponentElement]
		[XmlElement("LenSurfLine")]
        public LengthMeasure LenSurfLine {
            get {
                return LenSurfLineField;
            } 
            set {
                LenSurfLineField = value;
                NotifyPropertyChanged("LenSurfLine");
            }
        }

        private LengthMeasure LenSurfLineField; 

        /// <summary>
        /// IdChkLine property
        /// </summary>
		[Description("Inner diameter of Choke Line.")]
        [ComponentElement]
		[XmlElement("IdChkLine")]
        public LengthMeasure IdChkLine {
            get {
                return IdChkLineField;
            } 
            set {
                IdChkLineField = value;
                NotifyPropertyChanged("IdChkLine");
            }
        }

        private LengthMeasure IdChkLineField; 

        /// <summary>
        /// OdChkLine property
        /// </summary>
		[Description("Outer diameter of Choke Line.")]
        [ComponentElement]
		[XmlElement("OdChkLine")]
        public LengthMeasure OuterDiameterChkLine {
            get {
                return OdChkLineField;
            } 
            set {
                OdChkLineField = value;
                NotifyPropertyChanged("OuterDiameterChkLine");
            }
        }

        private LengthMeasure OdChkLineField; 

        /// <summary>
        /// LenChkLine property
        /// </summary>
		[Description("Length of Choke Line along riser.")]
        [ComponentElement]
		[XmlElement("LenChkLine")]
        public LengthMeasure LenChkLine {
            get {
                return LenChkLineField;
            } 
            set {
                LenChkLineField = value;
                NotifyPropertyChanged("LenChkLine");
            }
        }

        private LengthMeasure LenChkLineField; 

        /// <summary>
        /// IdKillLine property
        /// </summary>
		[Description("Inner diameter of Kill Line.")]
        [ComponentElement]
		[XmlElement("IdKillLine")]
        public LengthMeasure IdKillLine {
            get {
                return IdKillLineField;
            } 
            set {
                IdKillLineField = value;
                NotifyPropertyChanged("IdKillLine");
            }
        }

        private LengthMeasure IdKillLineField; 

        /// <summary>
        /// OdKillLine property
        /// </summary>
		[Description("Outer diameter of Kill Line.")]
        [ComponentElement]
		[XmlElement("OdKillLine")]
        public LengthMeasure OuterDiameterKillLine {
            get {
                return OdKillLineField;
            } 
            set {
                OdKillLineField = value;
                NotifyPropertyChanged("OuterDiameterKillLine");
            }
        }

        private LengthMeasure OdKillLineField; 

        /// <summary>
        /// LenKillLine property
        /// </summary>
		[Description("Length of Kill Line.")]
        [ComponentElement]
		[XmlElement("LenKillLine")]
        public LengthMeasure LenKillLine {
            get {
                return LenKillLineField;
            } 
            set {
                LenKillLineField = value;
                NotifyPropertyChanged("LenKillLine");
            }
        }

        private LengthMeasure LenKillLineField; 

        /// <summary>
        /// TypeDiverter property
        /// </summary>
		[StringLength(64)]
        [Description("Diverter description.")]
		[XmlElement("TypeDiverter")]
        public String TypeDiverter {
            get {
                return TypeDiverterField;
            } 
            set {
                TypeDiverterField = value;
                NotifyPropertyChanged("TypeDiverter");
            }
        }

        private String TypeDiverterField; 

        /// <summary>
        /// DiaDiverter property
        /// </summary>
		[Description("Diameter of diverter.")]
        [ComponentElement]
		[XmlElement("DiaDiverter")]
        public LengthMeasure DiaDiverter {
            get {
                return DiaDiverterField;
            } 
            set {
                DiaDiverterField = value;
                NotifyPropertyChanged("DiaDiverter");
            }
        }

        private LengthMeasure DiaDiverterField; 

        /// <summary>
        /// PresWorkDiverter property
        /// </summary>
		[Description("Working rating pressure of the component.")]
        [ComponentElement]
		[XmlElement("PresWorkDiverter")]
        public PressureMeasure PresWorkDiverter {
            get {
                return PresWorkDiverterField;
            } 
            set {
                PresWorkDiverterField = value;
                NotifyPropertyChanged("PresWorkDiverter");
            }
        }

        private PressureMeasure PresWorkDiverterField; 

        /// <summary>
        /// Accumulator property
        /// </summary>
		[StringLength(64)]
        [Description("Type of accumulator/description.")]
		[XmlElement("Accumulator")]
        public String Accumulator {
            get {
                return AccumulatorField;
            } 
            set {
                AccumulatorField = value;
                NotifyPropertyChanged("Accumulator");
            }
        }

        private String AccumulatorField; 

        /// <summary>
        /// CapAccFluid property
        /// </summary>
		[Description("Accumulator fluid capacity.")]
        [ComponentElement]
		[XmlElement("CapAccFluid")]
        public VolumeMeasure CapAccFluid {
            get {
                return CapAccFluidField;
            } 
            set {
                CapAccFluidField = value;
                NotifyPropertyChanged("CapAccFluid");
            }
        }

        private VolumeMeasure CapAccFluidField; 

        /// <summary>
        /// PresAccPreCharge property
        /// </summary>
		[Description("Accumulator pre-charge pressure.")]
        [ComponentElement]
		[XmlElement("PresAccPreCharge")]
        public PressureMeasure PresAccPreCharge {
            get {
                return PresAccPreChargeField;
            } 
            set {
                PresAccPreChargeField = value;
                NotifyPropertyChanged("PresAccPreCharge");
            }
        }

        private PressureMeasure PresAccPreChargeField; 

        /// <summary>
        /// VolAccPreCharge property
        /// </summary>
		[Description("Accumulator pre-charge volume")]
        [ComponentElement]
		[XmlElement("VolAccPreCharge")]
        public VolumeMeasure VolAccPreCharge {
            get {
                return VolAccPreChargeField;
            } 
            set {
                VolAccPreChargeField = value;
                NotifyPropertyChanged("VolAccPreCharge");
            }
        }

        private VolumeMeasure VolAccPreChargeField; 

        /// <summary>
        /// PresAccOpRating property
        /// </summary>
		[Description("Accumulator operating pressure rating.")]
        [ComponentElement]
		[XmlElement("PresAccOpRating")]
        public PressureMeasure PresAccOperatingRating {
            get {
                return PresAccOpRatingField;
            } 
            set {
                PresAccOpRatingField = value;
                NotifyPropertyChanged("PresAccOperatingRating");
            }
        }

        private PressureMeasure PresAccOpRatingField; 

        /// <summary>
        /// TypeControlManifold property
        /// </summary>
		[StringLength(64)]
        [Description("Blow Out Preventer Control System.")]
		[XmlElement("TypeControlManifold")]
        public String TypeControlManifold {
            get {
                return TypeControlManifoldField;
            } 
            set {
                TypeControlManifoldField = value;
                NotifyPropertyChanged("TypeControlManifold");
            }
        }

        private String TypeControlManifoldField; 

        /// <summary>
        /// DescControlManifold property
        /// </summary>
		[StringLength(2000)]
        [Description("Description of control system.")]
		[XmlElement("DescControlManifold")]
        public String DescControlManifold {
            get {
                return DescControlManifoldField;
            } 
            set {
                DescControlManifoldField = value;
                NotifyPropertyChanged("DescControlManifold");
            }
        }

        private String DescControlManifoldField; 

        /// <summary>
        /// TypeChokeManifold property
        /// </summary>
		[StringLength(64)]
        [Description("Type of choke manifold.")]
		[XmlElement("TypeChokeManifold")]
        public String TypeChokeManifold {
            get {
                return TypeChokeManifoldField;
            } 
            set {
                TypeChokeManifoldField = value;
                NotifyPropertyChanged("TypeChokeManifold");
            }
        }

        private String TypeChokeManifoldField; 

        /// <summary>
        /// PresChokeManifold property
        /// </summary>
		[Description("Choke manifold pressure.")]
        [ComponentElement]
		[XmlElement("PresChokeManifold")]
        public PressureMeasure PresChokeManifold {
            get {
                return PresChokeManifoldField;
            } 
            set {
                PresChokeManifoldField = value;
                NotifyPropertyChanged("PresChokeManifold");
            }
        }

        private PressureMeasure PresChokeManifoldField; 

        /// <summary>
        /// BopComponent property
        /// </summary>
		[RecurringElement]
		[XmlElement("BopComponent")]
        public List<BopComponent> BopComponent {
            get {
                return BopComponentField;
            } 
            set {
                BopComponentField = value;
                NotifyPropertyChanged("BopComponent");
            }
        }

         [XmlIgnore]
         public bool BopComponentSpecified
         {
            get {
             if(BopComponentField!=null)
                return BopComponentField.Count>0?true:false;
             else return false;
            } 
         }
        private List<BopComponent> BopComponentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Shaker xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Shaker", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Shaker xsd type.")]
    public partial class Shaker : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the shaker.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
		[XmlElement("Manufacturer")]
        public String Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String ManufacturerField; 

        /// <summary>
        /// Model property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturers designated model.")]
		[XmlElement("Model")]
        public String Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String ModelField; 

        /// <summary>
        /// DTimInstall property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of installation.")]
		[XmlElement("DTimInstall")]
        public String DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private String DTimInstallField; 

        /// <summary>
        /// DTimRemove property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Removal date and time.")]
		[XmlElement("DTimRemove")]
        public String DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private String DTimRemoveField; 

        /// <summary>
        /// Type property
        /// </summary>
		[StringLength(64)]
        [Description("Description for the type of object.")]
		[XmlElement("Type")]
        public String Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String TypeField; 

        /// <summary>
        /// LocationShaker property
        /// </summary>
		[StringLength(64)]
        [Description("Shaker location on rig.")]
		[XmlElement("LocationShaker")]
        public String LocationShaker {
            get {
                return LocationShakerField;
            } 
            set {
                LocationShakerField = value;
                NotifyPropertyChanged("LocationShaker");
            }
        }

        private String LocationShakerField; 

        /// <summary>
        /// NumDecks property
        /// </summary>
		[Description("Number of decks.")]
		[XmlElement("NumDecks")]
        public Int32? NumDecks {
            get {
                return NumDecksField;
            } 
            set {
                NumDecksField = value;
             if(value!=null) 
                 this.NumDecksSpecified = true;
                NotifyPropertyChanged("NumDecks");
            }
        }

        private Int32? NumDecksField; 

        /// <summary>
        /// NumDecksSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumDecksSpecified {
            get {
                return NumDecksSpecifiedField;
            } 
            set {
                NumDecksSpecifiedField = value;
                NotifyPropertyChanged("NumDecksSpecified");
            }
        }

        private Boolean NumDecksSpecifiedField; 

        /// <summary>
        /// NumCascLevel property
        /// </summary>
		[Description("Number of cascade levels.")]
		[XmlElement("NumCascLevel")]
        public Int32? NumCascLevel {
            get {
                return NumCascLevelField;
            } 
            set {
                NumCascLevelField = value;
             if(value!=null) 
                 this.NumCascLevelSpecified = true;
                NotifyPropertyChanged("NumCascLevel");
            }
        }

        private Int32? NumCascLevelField; 

        /// <summary>
        /// NumCascLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumCascLevelSpecified {
            get {
                return NumCascLevelSpecifiedField;
            } 
            set {
                NumCascLevelSpecifiedField = value;
                NotifyPropertyChanged("NumCascLevelSpecified");
            }
        }

        private Boolean NumCascLevelSpecifiedField; 

        /// <summary>
        /// MudCleaner property
        /// </summary>
		[Description("Is part of mud cleaning assembly as opposed to discrete Shale Shaker.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("MudCleaner")]
        public Boolean? MudCleaner {
            get {
                return MudCleanerField;
            } 
            set {
                MudCleanerField = value;
             if(value!=null) 
                 this.MudCleanerSpecified = true;
                NotifyPropertyChanged("MudCleaner");
            }
        }

        private Boolean? MudCleanerField; 

        /// <summary>
        /// MudCleanerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MudCleanerSpecified {
            get {
                return MudCleanerSpecifiedField;
            } 
            set {
                MudCleanerSpecifiedField = value;
                NotifyPropertyChanged("MudCleanerSpecified");
            }
        }

        private Boolean MudCleanerSpecifiedField; 

        /// <summary>
        /// CapFlow property
        /// </summary>
		[Description("Maximum pump rate at which the unit will efficiently operate.")]
        [ComponentElement]
		[XmlElement("CapFlow")]
        public VolumePerTimeMeasure CapFlow {
            get {
                return CapFlowField;
            } 
            set {
                CapFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumePerTimeMeasure CapFlowField; 

        /// <summary>
        /// Owner property
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
		[XmlElement("Owner")]
        public String Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String OwnerField; 

        /// <summary>
        /// SizeMeshMn property
        /// </summary>
		[Description("Minimum mesh size.")]
        [ComponentElement]
		[XmlElement("SizeMeshMn")]
        public LengthMeasure SizeMeshMin {
            get {
                return SizeMeshMnField;
            } 
            set {
                SizeMeshMnField = value;
                NotifyPropertyChanged("SizeMeshMin");
            }
        }

        private LengthMeasure SizeMeshMnField; 

        /// <summary>
        /// NameTag property
        /// </summary>
		[Description("An identification tag for the shaker. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         [XmlIgnore]
         public bool NameTagSpecified
         {
            get {
             if(NameTagField!=null)
                return NameTagField.Count>0?true:false;
             else return false;
            } 
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Shaker")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudlogParameter xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudlogParameter", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudlogParameter xsd type.")]
    public partial class MudlogParameter : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MudlogParameter class.
        /// </summary>
        public MudlogParameter() {}

        /// <summary>
        /// Initializes a new instance of the MudlogParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public MudlogParameter(GenericMeasure value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Description("Measured depth interval which is the focus of this parameter")]
        [ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("The value of the MudLog Paarameter")]
        [ComponentElement]
		[XmlElement("Value")]
        public GenericMeasure Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private GenericMeasure ValueField; 

        /// <summary>
        /// Citation property
        /// </summary>
		[Required]
        [Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the MudLog Parameter")]
        [ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of MudLog Parameter")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GenericMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GenericMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GenericMeasure xsd type.")]
    public partial class GenericMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the GenericMeasure class.
        /// </summary>
        public GenericMeasure() {}

        /// <summary>
        /// Initializes a new instance of the GenericMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public GenericMeasure(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[StringLength(32)]
        [XmlAttribute("uom")]
		
        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Citation xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Citation", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the Citation xsd type.")]
    public partial class Citation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("One line description/name of the RESQML object.  This is the equivalent in ISO 19115 of CI_Citation.title  Legacy DCGroup - title")]
		[XmlElement("Title")]
        public String Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private String TitleField; 

        /// <summary>
        /// Originator property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name (or other human-readable identifier) of the person who initially originated the object or RESQML document in the source application. If that information is not available, the user who created the RESQML format file. The originator remains the same as the object is subsequently edited.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is \"originator\".  Legacy DCGroup - author")]
		[XmlElement("Originator")]
        public String Originator {
            get {
                return OriginatorField;
            } 
            set {
                OriginatorField = value;
                NotifyPropertyChanged("Originator");
            }
        }

        private String OriginatorField; 

        /// <summary>
        /// Creation property
        /// </summary>
		[Required]
        [Description("Date and time the document was created in the source application or, if that information is not available, when it was saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation\"  The type is the Energistics timestamp datatype which is the W3C xs:dateTime with the optional timezone offset from UTC made mandatory.  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - created")]
		[XmlElement("Creation")]
        public DateTime? Creation {
            get {
                return CreationField;
            } 
            set {
                CreationField = value;
                NotifyPropertyChanged("Creation");
            }
        }

        private DateTime? CreationField; 

        /// <summary>
        /// Format property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.  The ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.  SIG Implementation Notes  1. RESQML   - Legacy DCGroup from v1.1 - publisher - fileExtension is not relevant and will be ignored if present. - vendor and applicationName are mandatory.")]
		[XmlElement("Format")]
        public String Format {
            get {
                return FormatField;
            } 
            set {
                FormatField = value;
                NotifyPropertyChanged("Format");
            }
        }

        private String FormatField; 

        /// <summary>
        /// Editor property
        /// </summary>
		[StringLength(64)]
        [Description("Name (or other human-readable identifier) of the last person who updated the object.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is \"editor\".  Legacy DCGroup - contributor")]
		[XmlElement("Editor")]
        public String Editor {
            get {
                return EditorField;
            } 
            set {
                EditorField = value;
                NotifyPropertyChanged("Editor");
            }
        }

        private String EditorField; 

        /// <summary>
        /// LastUpdate property
        /// </summary>
		[Description("Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate\"  The type is the Energistics timestamp datatype which is the W3C xs:dateTime with the optional timezone offset from UTC made mandatory.  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - modified")]
		[XmlElement("LastUpdate")]
        public DateTime? LastUpdate {
            get {
                return LastUpdateField;
            } 
            set {
                LastUpdateField = value;
             if(value!=null) 
                 this.LastUpdateSpecified = true;
                NotifyPropertyChanged("LastUpdate");
            }
        }

        private DateTime? LastUpdateField; 

        /// <summary>
        /// LastUpdateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean LastUpdateSpecified {
            get {
                return LastUpdateSpecifiedField;
            } 
            set {
                LastUpdateSpecifiedField = value;
                NotifyPropertyChanged("LastUpdateSpecified");
            }
        }

        private Boolean LastUpdateSpecifiedField; 

        /// <summary>
        /// VersionString property
        /// </summary>
		[StringLength(64)]
		[XmlElement("VersionString")]
        public String VersionString {
            get {
                return VersionStringField;
            } 
            set {
                VersionStringField = value;
                NotifyPropertyChanged("VersionString");
            }
        }

        private String VersionStringField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("User descriptive comments about the object. Intended for end-user use (human readable); not necessarily meant to be used by software.  This is the equivalent of the ISO 19115 abstract.CharacterString  Legacy DCGroup - description")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// DescriptiveKeywords property
        /// </summary>
		[StringLength(2000)]
        [Description("Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.  This is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords  Legacy DCGroup - subject")]
		[XmlElement("DescriptiveKeywords")]
        public String DescriptiveKeywords {
            get {
                return DescriptiveKeywordsField;
            } 
            set {
                DescriptiveKeywordsField = value;
                NotifyPropertyChanged("DescriptiveKeywords");
            }
        }

        private String DescriptiveKeywordsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GasPeak xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GasPeak", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GasPeak xsd type.")]
    public partial class GasPeak : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PeakType property
        /// </summary>
		[Required]
        [Description("Type of gas peak")]
		[XmlElement("PeakType")]
        public GasPeakType? PeakType {
            get {
                return PeakTypeField;
            } 
            set {
                PeakTypeField = value;
                NotifyPropertyChanged("PeakType");
            }
        }

        private GasPeakType? PeakTypeField; 

        /// <summary>
        /// MdPeak property
        /// </summary>
		[Description("Measured depth at which gas reading was made")]
        [ComponentElement]
		[XmlElement("MdPeak")]
        public LengthMeasure MDPeak {
            get {
                return MdPeakField;
            } 
            set {
                MdPeakField = value;
                NotifyPropertyChanged("MDPeak");
            }
        }

        private LengthMeasure MdPeakField; 

        /// <summary>
        /// AverageGas property
        /// </summary>
		[Description("Average total gas")]
        [ComponentElement]
		[XmlElement("AverageGas")]
        public VolumePerVolumeMeasure AverageGas {
            get {
                return AverageGasField;
            } 
            set {
                AverageGasField = value;
                NotifyPropertyChanged("AverageGas");
            }
        }

        private VolumePerVolumeMeasure AverageGasField; 

        /// <summary>
        /// PeakGas property
        /// </summary>
		[Description("Peak gas reading")]
        [ComponentElement]
		[XmlElement("PeakGas")]
        public VolumePerVolumeMeasure PeakGas {
            get {
                return PeakGasField;
            } 
            set {
                PeakGasField = value;
                NotifyPropertyChanged("PeakGas");
            }
        }

        private VolumePerVolumeMeasure PeakGasField; 

        /// <summary>
        /// BackgroundGas property
        /// </summary>
		[Description("Background gas reading")]
        [ComponentElement]
		[XmlElement("BackgroundGas")]
        public VolumePerVolumeMeasure BackgroundGas {
            get {
                return BackgroundGasField;
            } 
            set {
                BackgroundGasField = value;
                NotifyPropertyChanged("BackgroundGas");
            }
        }

        private VolumePerVolumeMeasure BackgroundGasField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DataObjectReference xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DataObjectReference", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DataObjectReference xsd type.")]
    public partial class DataObjectReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ContentType property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("The content type of the referenced element.")]
		[XmlElement("ContentType")]
        public String ContentType {
            get {
                return ContentTypeField;
            } 
            set {
                ContentTypeField = value;
                NotifyPropertyChanged("ContentType");
            }
        }

        private String ContentTypeField; 

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("The Title of the referenced object. The Title of a top level element would be inherited from AbstractObject and must be present on any referenced object.")]
		[XmlElement("Title")]
        public String Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private String TitleField; 

        /// <summary>
        /// Uuid property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("Reference to an object using its global UID.")]
		[XmlElement("Uuid")]
        public String Uuid {
            get {
                return UuidField;
            } 
            set {
                UuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private String UuidField; 

        /// <summary>
        /// UuidAuthority property
        /// </summary>
		[StringLength(64)]
        [Description("The authority that issued and maintains the uuid of the referenced object. Used mainly in alias context.")]
		[XmlElement("UuidAuthority")]
        public String UuidAuthority {
            get {
                return UuidAuthorityField;
            } 
            set {
                UuidAuthorityField = value;
                NotifyPropertyChanged("UuidAuthority");
            }
        }

        private String UuidAuthorityField; 

        /// <summary>
        /// Uri property
        /// </summary>
		[Description("This is the URI of a referenced object.   Do not use this to store the path and file names of an external object - that is done through the External Dataset machinery.  This element is intended for use with the Energistics Transfer Protocol.")]
		[XmlElement("Uri", DataType="anyURI")]
        public String Uri {
            get {
                return UriField;
            } 
            set {
                UriField = value;
                NotifyPropertyChanged("Uri");
            }
        }

        private String UriField; 

        /// <summary>
        /// VersionString property
        /// </summary>
		[StringLength(64)]
        [Description("Indicates the version of the object which is referenced.")]
		[XmlElement("VersionString")]
        public String VersionString {
            get {
                return VersionStringField;
            } 
            set {
                VersionStringField = value;
                NotifyPropertyChanged("VersionString");
            }
        }

        private String VersionStringField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GasInMud xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GasInMud", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GasInMud xsd type.")]
    public partial class GasInMud : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average property
        /// </summary>
		[Description("Average percentage of gas in mud")]
        [ComponentElement]
		[XmlElement("Average")]
        public VolumePerVolumeMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private VolumePerVolumeMeasure AverageField; 

        /// <summary>
        /// Maximum property
        /// </summary>
		[Description("Maximum percentage of gas in mud")]
        [ComponentElement]
		[XmlElement("Maximum")]
        public VolumePerVolumeMeasure Maximum {
            get {
                return MaximumField;
            } 
            set {
                MaximumField = value;
                NotifyPropertyChanged("Maximum");
            }
        }

        private VolumePerVolumeMeasure MaximumField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudGas xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudGas", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudGas xsd type.")]
    public partial class MudGas : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GasInMud property
        /// </summary>
		[ComponentElement]
		[XmlElement("GasInMud")]
        public GasInMud GasInMud {
            get {
                return GasInMudField;
            } 
            set {
                GasInMudField = value;
                NotifyPropertyChanged("GasInMud");
            }
        }

        private GasInMud GasInMudField; 

        /// <summary>
        /// GasPeak property
        /// </summary>
		[RecurringElement]
		[XmlElement("GasPeak")]
        public List<GasPeak> GasPeak {
            get {
                return GasPeakField;
            } 
            set {
                GasPeakField = value;
                NotifyPropertyChanged("GasPeak");
            }
        }

         [XmlIgnore]
         public bool GasPeakSpecified
         {
            get {
             if(GasPeakField!=null)
                return GasPeakField.Count>0?true:false;
             else return false;
            } 
         }
        private List<GasPeak> GasPeakField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DxcStatistics xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DxcStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DxcStatistics xsd type.")]
    public partial class DxcStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average property
        /// </summary>
		[Required]
        [Description("Average drilling coefficient  through Interval")]
        [ComponentElement]
		[XmlElement("Average")]
        public DimensionlessMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private DimensionlessMeasure AverageField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Description("Log Channel from which the drilling coefficient statistics were calculated")]
        [ComponentElement]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EcdStatistics xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EcdStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the EcdStatistics xsd type.")]
    public partial class EcdStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average property
        /// </summary>
		[Required]
        [Description("Average equivalent circulating density at td through Interval")]
        [ComponentElement]
		[XmlElement("Average")]
        public MassPerVolumeMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private MassPerVolumeMeasure AverageField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Description("Log Channel from which the equivalent circulating density at td statistics were calculated")]
        [ComponentElement]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudDensityStatistics xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudDensityStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudDensityStatistics xsd type.")]
    public partial class MudDensityStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average property
        /// </summary>
		[Required]
        [Description("Average mud density through Interval")]
        [ComponentElement]
		[XmlElement("Average")]
        public MassPerVolumeMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private MassPerVolumeMeasure AverageField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Description("Log Channel from which the mud density statistics were calculated")]
        [ComponentElement]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RpmStatistics xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RpmStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RpmStatistics xsd type.")]
    public partial class RpmStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average property
        /// </summary>
		[Required]
        [Description("Average turn rate bit through Interval")]
        [ComponentElement]
		[XmlElement("Average")]
        public AngularVelocityMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private AngularVelocityMeasure AverageField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Description("Log Channel from which the turn rate statistics were calculated")]
        [ComponentElement]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ElectricCurrentMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ElectricCurrentMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ElectricCurrentMeasure xsd type.")]
    public partial class ElectricCurrentMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        public ElectricCurrentMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricCurrentMeasure(Double value, ElectricCurrentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ElectricCurrentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricCurrentUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TorqueCurrentStatistics xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TorqueCurrentStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TorqueCurrentStatistics xsd type.")]
    public partial class TorqueCurrentStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average property
        /// </summary>
		[Required]
        [Description("Average electric current through Interval")]
        [ComponentElement]
		[XmlElement("Average")]
        public ElectricCurrentMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private ElectricCurrentMeasure AverageField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Description("Log Channel from which the electric current statistics were calculated")]
        [ComponentElement]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TorqueStatistics xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TorqueStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TorqueStatistics xsd type.")]
    public partial class TorqueStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average property
        /// </summary>
		[Required]
        [Description("Average torque through Interval")]
        [ComponentElement]
		[XmlElement("Average")]
        public MomentOfForceMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private MomentOfForceMeasure AverageField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Description("Log Channel from which the torque statistics were calculated")]
        [ComponentElement]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MomentOfForceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MomentOfForceMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MomentOfForceMeasure xsd type.")]
    public partial class MomentOfForceMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MomentOfForceMeasure class.
        /// </summary>
        public MomentOfForceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MomentOfForceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MomentOfForceMeasure(Double value, MomentOfForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MomentOfForceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MomentOfForceUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WobStatistics xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WobStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the WobStatistics xsd type.")]
    public partial class WobStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average property
        /// </summary>
		[Required]
        [Description("Average weight on bit through Interval")]
        [ComponentElement]
		[XmlElement("Average")]
        public ForceMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private ForceMeasure AverageField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Description("Log Channel from which the WOB statistics were calculated")]
        [ComponentElement]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ForceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ForceMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ForceMeasure xsd type.")]
    public partial class ForceMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForceMeasure class.
        /// </summary>
        public ForceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForceMeasure(Double value, ForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ForceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForceUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RopStatistics xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RopStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RopStatistics xsd type.")]
    public partial class RopStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average property
        /// </summary>
		[Description("Average rate of penetration through Interval")]
        [ComponentElement]
		[XmlElement("Average")]
        public LengthPerTimeMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private LengthPerTimeMeasure AverageField; 

        /// <summary>
        /// Minimum property
        /// </summary>
		[Description("Minimum rate of penetration through Interval")]
        [ComponentElement]
		[XmlElement("Minimum")]
        public LengthPerTimeMeasure Minimum {
            get {
                return MinimumField;
            } 
            set {
                MinimumField = value;
                NotifyPropertyChanged("Minimum");
            }
        }

        private LengthPerTimeMeasure MinimumField; 

        /// <summary>
        /// Maximum property
        /// </summary>
		[Description("Maximum rate of penetration through Interval")]
        [ComponentElement]
		[XmlElement("Maximum")]
        public LengthPerTimeMeasure Maximum {
            get {
                return MaximumField;
            } 
            set {
                MaximumField = value;
                NotifyPropertyChanged("Maximum");
            }
        }

        private LengthPerTimeMeasure MaximumField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Description("Log Channel from which the ROP statistics were calculated")]
        [ComponentElement]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthPerTimeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthPerTimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthPerTimeMeasure xsd type.")]
    public partial class LengthPerTimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthPerTimeMeasure class.
        /// </summary>
        public LengthPerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthPerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthPerTimeMeasure(Double value, LengthPerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public LengthPerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthPerTimeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillingParameters xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillingParameters", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillingParameters xsd type.")]
    public partial class DrillingParameters : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Rop property
        /// </summary>
		[Description("Rate of penetration through interval")]
		[XmlElement("Rop")]
        public RopStatistics Rop {
            get {
                return RopField;
            } 
            set {
                RopField = value;
                NotifyPropertyChanged("Rop");
            }
        }

        private RopStatistics RopField; 

        /// <summary>
        /// AverageWeightOnBit property
        /// </summary>
		[Description("Surface weight on bit - average through interval")]
        [ComponentElement]
		[XmlElement("AverageWeightOnBit")]
        public WobStatistics AverageWeightOnBit {
            get {
                return AverageWeightOnBitField;
            } 
            set {
                AverageWeightOnBitField = value;
                NotifyPropertyChanged("AverageWeightOnBit");
            }
        }

        private WobStatistics AverageWeightOnBitField; 

        /// <summary>
        /// AverageTorque property
        /// </summary>
		[Description("Average torque through interval")]
        [ComponentElement]
		[XmlElement("AverageTorque")]
        public TorqueStatistics AverageTorque {
            get {
                return AverageTorqueField;
            } 
            set {
                AverageTorqueField = value;
                NotifyPropertyChanged("AverageTorque");
            }
        }

        private TorqueStatistics AverageTorqueField; 

        /// <summary>
        /// AverageTorqueCurrent property
        /// </summary>
		[Description("Average torque current through interval. This is the raw measurement from which the average torque could be calculated")]
        [ComponentElement]
		[XmlElement("AverageTorqueCurrent")]
        public TorqueCurrentStatistics AverageTorqueCurrent {
            get {
                return AverageTorqueCurrentField;
            } 
            set {
                AverageTorqueCurrentField = value;
                NotifyPropertyChanged("AverageTorqueCurrent");
            }
        }

        private TorqueCurrentStatistics AverageTorqueCurrentField; 

        /// <summary>
        /// AverageTurnRate property
        /// </summary>
		[Description("Average turn rate through interval (commonly in rpm)")]
        [ComponentElement]
		[XmlElement("AverageTurnRate")]
        public RpmStatistics AverageTurnRate {
            get {
                return AverageTurnRateField;
            } 
            set {
                AverageTurnRateField = value;
                NotifyPropertyChanged("AverageTurnRate");
            }
        }

        private RpmStatistics AverageTurnRateField; 

        /// <summary>
        /// AverageMudDensity property
        /// </summary>
		[Description("Average mud density through the interval")]
        [ComponentElement]
		[XmlElement("AverageMudDensity")]
        public MudDensityStatistics AverageMudDensity {
            get {
                return AverageMudDensityField;
            } 
            set {
                AverageMudDensityField = value;
                NotifyPropertyChanged("AverageMudDensity");
            }
        }

        private MudDensityStatistics AverageMudDensityField; 

        /// <summary>
        /// AverageEcdAtTd property
        /// </summary>
		[Description("Average effective circulating density at TD through Interval")]
        [ComponentElement]
		[XmlElement("AverageEcdAtTd")]
        public EcdStatistics AverageEcdAtTd {
            get {
                return AverageEcdAtTdField;
            } 
            set {
                AverageEcdAtTdField = value;
                NotifyPropertyChanged("AverageEcdAtTd");
            }
        }

        private EcdStatistics AverageEcdAtTdField; 

        /// <summary>
        /// AverageDrillingCoefficient property
        /// </summary>
		[Description("Average drilling exponent through Interval")]
        [ComponentElement]
		[XmlElement("AverageDrillingCoefficient")]
        public DxcStatistics AverageDrillingCoefficient {
            get {
                return AverageDrillingCoefficientField;
            } 
            set {
                AverageDrillingCoefficientField = value;
                NotifyPropertyChanged("AverageDrillingCoefficient");
            }
        }

        private DxcStatistics AverageDrillingCoefficientField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Chromatograph xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Chromatograph", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Chromatograph xsd type.")]
    public partial class Chromatograph : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ChromatographMdInterval property
        /// </summary>
		[Description("Measured interval related to the chromatograph results")]
        [ComponentElement]
		[XmlElement("ChromatographMdInterval")]
        public MdInterval ChromatographMDInterval {
            get {
                return ChromatographMdIntervalField;
            } 
            set {
                ChromatographMdIntervalField = value;
                NotifyPropertyChanged("ChromatographMDInterval");
            }
        }

        private MdInterval ChromatographMdIntervalField; 

        /// <summary>
        /// DateTimeGasSampleProcessed property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date and time at which the gas sample was processed.")]
		[XmlElement("DateTimeGasSampleProcessed")]
        public String DateTimeGasSampleProcessed {
            get {
                return DateTimeGasSampleProcessedField;
            } 
            set {
                DateTimeGasSampleProcessedField = value;
                NotifyPropertyChanged("DateTimeGasSampleProcessed");
            }
        }

        private String DateTimeGasSampleProcessedField; 

        /// <summary>
        /// ChromatographType property
        /// </summary>
		[StringLength(64)]
        [Description("Chromatograph type.")]
		[XmlElement("ChromatographType")]
        public String ChromatographType {
            get {
                return ChromatographTypeField;
            } 
            set {
                ChromatographTypeField = value;
                NotifyPropertyChanged("ChromatographType");
            }
        }

        private String ChromatographTypeField; 

        /// <summary>
        /// ETimChromCycle property
        /// </summary>
		[Description("Chromatograph cycle time. Commonly in seconds.")]
        [ComponentElement]
		[XmlElement("ETimChromCycle")]
        public TimeMeasure ETimeChromCycle {
            get {
                return ETimChromCycleField;
            } 
            set {
                ETimChromCycleField = value;
                NotifyPropertyChanged("ETimeChromCycle");
            }
        }

        private TimeMeasure ETimChromCycleField; 

        /// <summary>
        /// ChromReportTime property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Chromatograph integrator report time, format may be variable due to recording equipment")]
		[XmlElement("ChromReportTime")]
        public String ChromReportTime {
            get {
                return ChromReportTimeField;
            } 
            set {
                ChromReportTimeField = value;
                NotifyPropertyChanged("ChromReportTime");
            }
        }

        private String ChromReportTimeField; 

        /// <summary>
        /// MudWeightIn property
        /// </summary>
		[Description("Mud density in (active pits).")]
        [ComponentElement]
		[XmlElement("MudWeightIn")]
        public MassPerVolumeMeasure MudWeightIn {
            get {
                return MudWeightInField;
            } 
            set {
                MudWeightInField = value;
                NotifyPropertyChanged("MudWeightIn");
            }
        }

        private MassPerVolumeMeasure MudWeightInField; 

        /// <summary>
        /// MudWeightOut property
        /// </summary>
		[Description("Mud density out (flowline).")]
        [ComponentElement]
		[XmlElement("MudWeightOut")]
        public MassPerVolumeMeasure MudWeightOut {
            get {
                return MudWeightOutField;
            } 
            set {
                MudWeightOutField = value;
                NotifyPropertyChanged("MudWeightOut");
            }
        }

        private MassPerVolumeMeasure MudWeightOutField; 

        /// <summary>
        /// MethAv property
        /// </summary>
		[Description("Methane (C1) ppm (average).")]
        [ComponentElement]
		[XmlElement("MethAv")]
        public VolumePerVolumeMeasure MethAverage {
            get {
                return MethAvField;
            } 
            set {
                MethAvField = value;
                NotifyPropertyChanged("MethAverage");
            }
        }

        private VolumePerVolumeMeasure MethAvField; 

        /// <summary>
        /// MethMn property
        /// </summary>
		[Description("Methane (C1) ppm (minimum).")]
        [ComponentElement]
		[XmlElement("MethMn")]
        public VolumePerVolumeMeasure MethMin {
            get {
                return MethMnField;
            } 
            set {
                MethMnField = value;
                NotifyPropertyChanged("MethMin");
            }
        }

        private VolumePerVolumeMeasure MethMnField; 

        /// <summary>
        /// MethMx property
        /// </summary>
		[Description("Methane (C1) ppm (maximum).")]
        [ComponentElement]
		[XmlElement("MethMx")]
        public VolumePerVolumeMeasure MethMax {
            get {
                return MethMxField;
            } 
            set {
                MethMxField = value;
                NotifyPropertyChanged("MethMax");
            }
        }

        private VolumePerVolumeMeasure MethMxField; 

        /// <summary>
        /// EthAv property
        /// </summary>
		[Description("Ethane (C2) ppm (average).")]
        [ComponentElement]
		[XmlElement("EthAv")]
        public VolumePerVolumeMeasure EthAverage {
            get {
                return EthAvField;
            } 
            set {
                EthAvField = value;
                NotifyPropertyChanged("EthAverage");
            }
        }

        private VolumePerVolumeMeasure EthAvField; 

        /// <summary>
        /// EthMn property
        /// </summary>
		[Description("Ethane (C2) ppm (minimum).")]
        [ComponentElement]
		[XmlElement("EthMn")]
        public VolumePerVolumeMeasure EthMin {
            get {
                return EthMnField;
            } 
            set {
                EthMnField = value;
                NotifyPropertyChanged("EthMin");
            }
        }

        private VolumePerVolumeMeasure EthMnField; 

        /// <summary>
        /// EthMx property
        /// </summary>
		[Description("Ethane (C2) ppm (maximum).")]
        [ComponentElement]
		[XmlElement("EthMx")]
        public VolumePerVolumeMeasure EthMax {
            get {
                return EthMxField;
            } 
            set {
                EthMxField = value;
                NotifyPropertyChanged("EthMax");
            }
        }

        private VolumePerVolumeMeasure EthMxField; 

        /// <summary>
        /// PropAv property
        /// </summary>
		[Description("Propane (C3) ppm (average).")]
        [ComponentElement]
		[XmlElement("PropAv")]
        public VolumePerVolumeMeasure PropAverage {
            get {
                return PropAvField;
            } 
            set {
                PropAvField = value;
                NotifyPropertyChanged("PropAverage");
            }
        }

        private VolumePerVolumeMeasure PropAvField; 

        /// <summary>
        /// PropMn property
        /// </summary>
		[Description("Propane (C3) ppm (minimum).")]
        [ComponentElement]
		[XmlElement("PropMn")]
        public VolumePerVolumeMeasure PropMin {
            get {
                return PropMnField;
            } 
            set {
                PropMnField = value;
                NotifyPropertyChanged("PropMin");
            }
        }

        private VolumePerVolumeMeasure PropMnField; 

        /// <summary>
        /// PropMx property
        /// </summary>
		[Description("Propane (C3) ppm (maximum).")]
        [ComponentElement]
		[XmlElement("PropMx")]
        public VolumePerVolumeMeasure PropMax {
            get {
                return PropMxField;
            } 
            set {
                PropMxField = value;
                NotifyPropertyChanged("PropMax");
            }
        }

        private VolumePerVolumeMeasure PropMxField; 

        /// <summary>
        /// IbutAv property
        /// </summary>
		[Description("iso-Butane (iC4) ppm (average).")]
        [ComponentElement]
		[XmlElement("IbutAv")]
        public VolumePerVolumeMeasure IbutAverage {
            get {
                return IbutAvField;
            } 
            set {
                IbutAvField = value;
                NotifyPropertyChanged("IbutAverage");
            }
        }

        private VolumePerVolumeMeasure IbutAvField; 

        /// <summary>
        /// IbutMn property
        /// </summary>
		[Description("iso-Butane (iC4) ppm (minimum).")]
        [ComponentElement]
		[XmlElement("IbutMn")]
        public VolumePerVolumeMeasure IbutMin {
            get {
                return IbutMnField;
            } 
            set {
                IbutMnField = value;
                NotifyPropertyChanged("IbutMin");
            }
        }

        private VolumePerVolumeMeasure IbutMnField; 

        /// <summary>
        /// IbutMx property
        /// </summary>
		[Description("iso-Butane (iC4) ppm (maximum).")]
        [ComponentElement]
		[XmlElement("IbutMx")]
        public VolumePerVolumeMeasure IbutMax {
            get {
                return IbutMxField;
            } 
            set {
                IbutMxField = value;
                NotifyPropertyChanged("IbutMax");
            }
        }

        private VolumePerVolumeMeasure IbutMxField; 

        /// <summary>
        /// NbutAv property
        /// </summary>
		[Description("nor-Butane (nC4) ppm (average).")]
        [ComponentElement]
		[XmlElement("NbutAv")]
        public VolumePerVolumeMeasure NbutAverage {
            get {
                return NbutAvField;
            } 
            set {
                NbutAvField = value;
                NotifyPropertyChanged("NbutAverage");
            }
        }

        private VolumePerVolumeMeasure NbutAvField; 

        /// <summary>
        /// NbutMn property
        /// </summary>
		[Description("nor-Butane (nC4) ppm (minimum).")]
        [ComponentElement]
		[XmlElement("NbutMn")]
        public VolumePerVolumeMeasure NbutMin {
            get {
                return NbutMnField;
            } 
            set {
                NbutMnField = value;
                NotifyPropertyChanged("NbutMin");
            }
        }

        private VolumePerVolumeMeasure NbutMnField; 

        /// <summary>
        /// NbutMx property
        /// </summary>
		[Description("nor-Butane (nC4) ppm (maximum).")]
        [ComponentElement]
		[XmlElement("NbutMx")]
        public VolumePerVolumeMeasure NbutMax {
            get {
                return NbutMxField;
            } 
            set {
                NbutMxField = value;
                NotifyPropertyChanged("NbutMax");
            }
        }

        private VolumePerVolumeMeasure NbutMxField; 

        /// <summary>
        /// IpentAv property
        /// </summary>
		[Description("iso-Pentane (iC5) ppm (average).")]
        [ComponentElement]
		[XmlElement("IpentAv")]
        public VolumePerVolumeMeasure IpentAverage {
            get {
                return IpentAvField;
            } 
            set {
                IpentAvField = value;
                NotifyPropertyChanged("IpentAverage");
            }
        }

        private VolumePerVolumeMeasure IpentAvField; 

        /// <summary>
        /// IpentMn property
        /// </summary>
		[Description("iso-Pentane (iC5) ppm (minimum).")]
        [ComponentElement]
		[XmlElement("IpentMn")]
        public VolumePerVolumeMeasure IpentMin {
            get {
                return IpentMnField;
            } 
            set {
                IpentMnField = value;
                NotifyPropertyChanged("IpentMin");
            }
        }

        private VolumePerVolumeMeasure IpentMnField; 

        /// <summary>
        /// IpentMx property
        /// </summary>
		[Description("iso-Pentane (iC5) ppm (maximum).")]
        [ComponentElement]
		[XmlElement("IpentMx")]
        public VolumePerVolumeMeasure IpentMax {
            get {
                return IpentMxField;
            } 
            set {
                IpentMxField = value;
                NotifyPropertyChanged("IpentMax");
            }
        }

        private VolumePerVolumeMeasure IpentMxField; 

        /// <summary>
        /// NpentAv property
        /// </summary>
		[Description("nor-Pentane (nC5) ppm (average).")]
        [ComponentElement]
		[XmlElement("NpentAv")]
        public VolumePerVolumeMeasure NpentAverage {
            get {
                return NpentAvField;
            } 
            set {
                NpentAvField = value;
                NotifyPropertyChanged("NpentAverage");
            }
        }

        private VolumePerVolumeMeasure NpentAvField; 

        /// <summary>
        /// NpentMn property
        /// </summary>
		[Description("nor-Pentane (nC5) ppm (minimum).")]
        [ComponentElement]
		[XmlElement("NpentMn")]
        public VolumePerVolumeMeasure NpentMin {
            get {
                return NpentMnField;
            } 
            set {
                NpentMnField = value;
                NotifyPropertyChanged("NpentMin");
            }
        }

        private VolumePerVolumeMeasure NpentMnField; 

        /// <summary>
        /// NpentMx property
        /// </summary>
		[Description("nor-Pentane (nC5) ppm (maximum).")]
        [ComponentElement]
		[XmlElement("NpentMx")]
        public VolumePerVolumeMeasure NpentMax {
            get {
                return NpentMxField;
            } 
            set {
                NpentMxField = value;
                NotifyPropertyChanged("NpentMax");
            }
        }

        private VolumePerVolumeMeasure NpentMxField; 

        /// <summary>
        /// EpentAv property
        /// </summary>
		[Description("neo-Pentane (eC5) ppm (average).")]
        [ComponentElement]
		[XmlElement("EpentAv")]
        public VolumePerVolumeMeasure EpentAverage {
            get {
                return EpentAvField;
            } 
            set {
                EpentAvField = value;
                NotifyPropertyChanged("EpentAverage");
            }
        }

        private VolumePerVolumeMeasure EpentAvField; 

        /// <summary>
        /// EpentMn property
        /// </summary>
		[Description("neo-Pentane (eC5) ppm (minimum).")]
        [ComponentElement]
		[XmlElement("EpentMn")]
        public VolumePerVolumeMeasure EpentMin {
            get {
                return EpentMnField;
            } 
            set {
                EpentMnField = value;
                NotifyPropertyChanged("EpentMin");
            }
        }

        private VolumePerVolumeMeasure EpentMnField; 

        /// <summary>
        /// EpentMx property
        /// </summary>
		[Description("neo-Pentane (eC5) ppm (maximum).")]
        [ComponentElement]
		[XmlElement("EpentMx")]
        public VolumePerVolumeMeasure EpentMax {
            get {
                return EpentMxField;
            } 
            set {
                EpentMxField = value;
                NotifyPropertyChanged("EpentMax");
            }
        }

        private VolumePerVolumeMeasure EpentMxField; 

        /// <summary>
        /// IhexAv property
        /// </summary>
		[Description("iso-Hexane (iC6) ppm (average).")]
        [ComponentElement]
		[XmlElement("IhexAv")]
        public VolumePerVolumeMeasure IhexAverage {
            get {
                return IhexAvField;
            } 
            set {
                IhexAvField = value;
                NotifyPropertyChanged("IhexAverage");
            }
        }

        private VolumePerVolumeMeasure IhexAvField; 

        /// <summary>
        /// IhexMn property
        /// </summary>
		[Description("iso-Hexane (iC6) ppm (minimum).")]
        [ComponentElement]
		[XmlElement("IhexMn")]
        public VolumePerVolumeMeasure IhexMin {
            get {
                return IhexMnField;
            } 
            set {
                IhexMnField = value;
                NotifyPropertyChanged("IhexMin");
            }
        }

        private VolumePerVolumeMeasure IhexMnField; 

        /// <summary>
        /// IhexMx property
        /// </summary>
		[Description("iso-Hexane (iC6) ppm (maximum).")]
        [ComponentElement]
		[XmlElement("IhexMx")]
        public VolumePerVolumeMeasure IhexMax {
            get {
                return IhexMxField;
            } 
            set {
                IhexMxField = value;
                NotifyPropertyChanged("IhexMax");
            }
        }

        private VolumePerVolumeMeasure IhexMxField; 

        /// <summary>
        /// NhexAv property
        /// </summary>
		[Description("nor-Hexane (nC6) ppm (average).")]
        [ComponentElement]
		[XmlElement("NhexAv")]
        public VolumePerVolumeMeasure NhexAverage {
            get {
                return NhexAvField;
            } 
            set {
                NhexAvField = value;
                NotifyPropertyChanged("NhexAverage");
            }
        }

        private VolumePerVolumeMeasure NhexAvField; 

        /// <summary>
        /// NhexMn property
        /// </summary>
		[Description("nor-Hexane (nC6) ppm (minimum).")]
        [ComponentElement]
		[XmlElement("NhexMn")]
        public VolumePerVolumeMeasure NhexMin {
            get {
                return NhexMnField;
            } 
            set {
                NhexMnField = value;
                NotifyPropertyChanged("NhexMin");
            }
        }

        private VolumePerVolumeMeasure NhexMnField; 

        /// <summary>
        /// NhexMx property
        /// </summary>
		[Description("nor-Hexane (nC6) ppm (maximum).")]
        [ComponentElement]
		[XmlElement("NhexMx")]
        public VolumePerVolumeMeasure NhexMax {
            get {
                return NhexMxField;
            } 
            set {
                NhexMxField = value;
                NotifyPropertyChanged("NhexMax");
            }
        }

        private VolumePerVolumeMeasure NhexMxField; 

        /// <summary>
        /// Co2Av property
        /// </summary>
		[Description("Carbon Dioxide ppm (average).")]
        [ComponentElement]
		[XmlElement("Co2Av")]
        public VolumePerVolumeMeasure Co2Average {
            get {
                return Co2AvField;
            } 
            set {
                Co2AvField = value;
                NotifyPropertyChanged("Co2Average");
            }
        }

        private VolumePerVolumeMeasure Co2AvField; 

        /// <summary>
        /// Co2Mn property
        /// </summary>
		[Description("Carbon Dioxide ppm (minimum).")]
        [ComponentElement]
		[XmlElement("Co2Mn")]
        public VolumePerVolumeMeasure Co2Min {
            get {
                return Co2MnField;
            } 
            set {
                Co2MnField = value;
                NotifyPropertyChanged("Co2Min");
            }
        }

        private VolumePerVolumeMeasure Co2MnField; 

        /// <summary>
        /// Co2Mx property
        /// </summary>
		[Description("Carbon Dioxide ppm (maximum).")]
        [ComponentElement]
		[XmlElement("Co2Mx")]
        public VolumePerVolumeMeasure Co2Max {
            get {
                return Co2MxField;
            } 
            set {
                Co2MxField = value;
                NotifyPropertyChanged("Co2Max");
            }
        }

        private VolumePerVolumeMeasure Co2MxField; 

        /// <summary>
        /// H2sAv property
        /// </summary>
		[Description("Hydrogen Sulfide (average) ppm.")]
        [ComponentElement]
		[XmlElement("H2sAv")]
        public VolumePerVolumeMeasure H2sAverage {
            get {
                return H2sAvField;
            } 
            set {
                H2sAvField = value;
                NotifyPropertyChanged("H2sAverage");
            }
        }

        private VolumePerVolumeMeasure H2sAvField; 

        /// <summary>
        /// H2sMn property
        /// </summary>
		[Description("Hydrogen Sulfide (minimum) ppm.")]
        [ComponentElement]
		[XmlElement("H2sMn")]
        public VolumePerVolumeMeasure H2sMin {
            get {
                return H2sMnField;
            } 
            set {
                H2sMnField = value;
                NotifyPropertyChanged("H2sMin");
            }
        }

        private VolumePerVolumeMeasure H2sMnField; 

        /// <summary>
        /// H2sMx property
        /// </summary>
		[Description("Hydrogen Sulfide (maximum) ppm.")]
        [ComponentElement]
		[XmlElement("H2sMx")]
        public VolumePerVolumeMeasure H2sMax {
            get {
                return H2sMxField;
            } 
            set {
                H2sMxField = value;
                NotifyPropertyChanged("H2sMax");
            }
        }

        private VolumePerVolumeMeasure H2sMxField; 

        /// <summary>
        /// Acetylene property
        /// </summary>
		[Description("Acetylene.")]
        [ComponentElement]
		[XmlElement("Acetylene")]
        public VolumePerVolumeMeasure Acetylene {
            get {
                return AcetyleneField;
            } 
            set {
                AcetyleneField = value;
                NotifyPropertyChanged("Acetylene");
            }
        }

        private VolumePerVolumeMeasure AcetyleneField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[ComponentElement]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the MudlogReportInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_MudLogReportInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the MudlogReportInterval xsd type.")]
    public partial class MudlogReportInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("Measured depth interval")]
        [ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// CuttingsGeologyInterval property
        /// </summary>
		[Description("The cuttings geology interval that is part of this mudlog report")]
        [ComponentElement]
		[XmlElement("CuttingsGeologyInterval")]
        public CuttingsGeologyInterval CuttingsGeologyInterval {
            get {
                return CuttingsGeologyIntervalField;
            } 
            set {
                CuttingsGeologyIntervalField = value;
                NotifyPropertyChanged("CuttingsGeologyInterval");
            }
        }

        private CuttingsGeologyInterval CuttingsGeologyIntervalField; 

        /// <summary>
        /// InterpretedGeologyInterval property
        /// </summary>
		[Description("The interpreted geology interval that is part of this mudlog report")]
        [ComponentElement]
		[XmlElement("InterpretedGeologyInterval")]
        public InterpretedGeologyInterval InterpretedGeologyInterval {
            get {
                return InterpretedGeologyIntervalField;
            } 
            set {
                InterpretedGeologyIntervalField = value;
                NotifyPropertyChanged("InterpretedGeologyInterval");
            }
        }

        private InterpretedGeologyInterval InterpretedGeologyIntervalField; 

        /// <summary>
        /// ShowEvaluationInterval property
        /// </summary>
		[Description("The show evaluation interval that is part of this mudlog report")]
        [ComponentElement]
		[XmlElement("ShowEvaluationInterval")]
        public ShowEvaluationInterval ShowEvaluationInterval {
            get {
                return ShowEvaluationIntervalField;
            } 
            set {
                ShowEvaluationIntervalField = value;
                NotifyPropertyChanged("ShowEvaluationInterval");
            }
        }

        private ShowEvaluationInterval ShowEvaluationIntervalField; 

        /// <summary>
        /// Chromatograph property
        /// </summary>
		[ComponentElement]
		[XmlElement("Chromatograph")]
        public Chromatograph Chromatograph {
            get {
                return ChromatographField;
            } 
            set {
                ChromatographField = value;
                NotifyPropertyChanged("Chromatograph");
            }
        }

        private Chromatograph ChromatographField; 

        /// <summary>
        /// DrillingParameters property
        /// </summary>
		[RecurringElement]
		[XmlElement("DrillingParameters")]
        public List<DrillingParameters> DrillingParameters {
            get {
                return DrillingParametersField;
            } 
            set {
                DrillingParametersField = value;
                NotifyPropertyChanged("DrillingParameters");
            }
        }

         [XmlIgnore]
         public bool DrillingParametersSpecified
         {
            get {
             if(DrillingParametersField!=null)
                return DrillingParametersField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillingParameters> DrillingParametersField; 

        /// <summary>
        /// MudGas property
        /// </summary>
		[RecurringElement]
		[XmlElement("MudGas")]
        public List<MudGas> MudGas {
            get {
                return MudGasField;
            } 
            set {
                MudGasField = value;
                NotifyPropertyChanged("MudGas");
            }
        }

         [XmlIgnore]
         public bool MudGasSpecified
         {
            get {
             if(MudGasField!=null)
                return MudGasField.Count>0?true:false;
             else return false;
            } 
         }
        private List<MudGas> MudGasField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of MudLog Report Interval")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CuttingsGeologyInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_CuttingsInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the CuttingsGeologyInterval xsd type.")]
    public partial class CuttingsGeologyInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("The measured depth interval which is represented by the cuttings described here.")]
        [ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// Citation property
        /// </summary>
		[Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the CuttingsGeologyInterval")]
        [ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// DensBulk property
        /// </summary>
		[Description("Sample bulk density for the interval.")]
        [ComponentElement]
		[XmlElement("DensBulk")]
        public MassPerVolumeMeasure DensBulk {
            get {
                return DensBulkField;
            } 
            set {
                DensBulkField = value;
                NotifyPropertyChanged("DensBulk");
            }
        }

        private MassPerVolumeMeasure DensBulkField; 

        /// <summary>
        /// DensShale property
        /// </summary>
		[Description("Shale density for the interval.")]
        [ComponentElement]
		[XmlElement("DensShale")]
        public MassPerVolumeMeasure DensShale {
            get {
                return DensShaleField;
            } 
            set {
                DensShaleField = value;
                NotifyPropertyChanged("DensShale");
            }
        }

        private MassPerVolumeMeasure DensShaleField; 

        /// <summary>
        /// Calcite property
        /// </summary>
		[Description("Calcimetry calcite percentage.")]
        [ComponentElement]
		[XmlElement("Calcite")]
        public VolumePerVolumeMeasure Calcite {
            get {
                return CalciteField;
            } 
            set {
                CalciteField = value;
                NotifyPropertyChanged("Calcite");
            }
        }

        private VolumePerVolumeMeasure CalciteField; 

        /// <summary>
        /// CalcStab property
        /// </summary>
		[Description("Calcimetry stabilized percentage.")]
        [ComponentElement]
		[XmlElement("CalcStab")]
        public VolumePerVolumeMeasure CalcStab {
            get {
                return CalcStabField;
            } 
            set {
                CalcStabField = value;
                NotifyPropertyChanged("CalcStab");
            }
        }

        private VolumePerVolumeMeasure CalcStabField; 

        /// <summary>
        /// Cec property
        /// </summary>
		[Description("Cuttings cationic exchange capacity. Temporarily calling this a DimensionlessMeasure")]
        [ComponentElement]
		[XmlElement("Cec")]
        public DimensionlessMeasure Cec {
            get {
                return CecField;
            } 
            set {
                CecField = value;
                NotifyPropertyChanged("Cec");
            }
        }

        private DimensionlessMeasure CecField; 

        /// <summary>
        /// Dolomite property
        /// </summary>
		[Description("Calcimetry dolomite percentage.")]
        [ComponentElement]
		[XmlElement("Dolomite")]
        public VolumePerVolumeMeasure Dolomite {
            get {
                return DolomiteField;
            } 
            set {
                DolomiteField = value;
                NotifyPropertyChanged("Dolomite");
            }
        }

        private VolumePerVolumeMeasure DolomiteField; 

        /// <summary>
        /// SizeMin property
        /// </summary>
		[Description("Minimum size.")]
        [ComponentElement]
		[XmlElement("SizeMin")]
        public LengthMeasure SizeMin {
            get {
                return SizeMinField;
            } 
            set {
                SizeMinField = value;
                NotifyPropertyChanged("SizeMin");
            }
        }

        private LengthMeasure SizeMinField; 

        /// <summary>
        /// SizeMax property
        /// </summary>
		[Description("Maximum size.")]
        [ComponentElement]
		[XmlElement("SizeMax")]
        public LengthMeasure SizeMax {
            get {
                return SizeMaxField;
            } 
            set {
                SizeMaxField = value;
                NotifyPropertyChanged("SizeMax");
            }
        }

        private LengthMeasure SizeMaxField; 

        /// <summary>
        /// Qft property
        /// </summary>
		[Description("Fluorescence as measured using a device licensed for the Quantitative Fluorescence Technique.")]
        [ComponentElement]
		[XmlElement("Qft")]
        public IlluminanceMeasure Qft {
            get {
                return QftField;
            } 
            set {
                QftField = value;
                NotifyPropertyChanged("Qft");
            }
        }

        private IlluminanceMeasure QftField; 

        /// <summary>
        /// CleaningMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Sample treatment: cleaning method.")]
		[XmlElement("CleaningMethod")]
        public String CleaningMethod {
            get {
                return CleaningMethodField;
            } 
            set {
                CleaningMethodField = value;
                NotifyPropertyChanged("CleaningMethod");
            }
        }

        private String CleaningMethodField; 

        /// <summary>
        /// DryingMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Sample treatment: drying method.")]
		[XmlElement("DryingMethod")]
        public String DryingMethod {
            get {
                return DryingMethodField;
            } 
            set {
                DryingMethodField = value;
                NotifyPropertyChanged("DryingMethod");
            }
        }

        private String DryingMethodField; 

        /// <summary>
        /// CuttingsIntervalLithology property
        /// </summary>
		[RecurringElement]
		[XmlElement("CuttingsIntervalLithology")]
        public List<CuttingsIntervalLithology> CuttingsIntervalLithology {
            get {
                return CuttingsIntervalLithologyField;
            } 
            set {
                CuttingsIntervalLithologyField = value;
                NotifyPropertyChanged("CuttingsIntervalLithology");
            }
        }

         [XmlIgnore]
         public bool CuttingsIntervalLithologySpecified
         {
            get {
             if(CuttingsIntervalLithologyField!=null)
                return CuttingsIntervalLithologyField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CuttingsIntervalLithology> CuttingsIntervalLithologyField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of CuttingsGeologyInterval")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IlluminanceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IlluminanceMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IlluminanceMeasure xsd type.")]
    public partial class IlluminanceMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IlluminanceMeasure class.
        /// </summary>
        public IlluminanceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the IlluminanceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IlluminanceMeasure(Double value, IlluminanceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public IlluminanceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private IlluminanceUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CuttingsIntervalLithology xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CuttingsIntervalLithology", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CuttingsIntervalLithology xsd type.")]
    public partial class CuttingsIntervalLithology : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [StringLength(40)]
        [Description("The geological name for the type of lithology from the enum table listing a  subset of the OneGeology / CGI defined formation types.")]
		[XmlElement("Kind")]
        public String Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private String KindField; 

        /// <summary>
        /// LithPc property
        /// </summary>
		[Required]
        [Description("The lithology represents the portion of the sampled interval this lithology type relates to. The total of the lithologies within an interval should add up to 100 percent. If LithologySource in cs-geology is \"interpreted\" only 100% is allowed. If \"core\" or \"cuttings\" then recommended useage is the creating application uses blocks of 10%. i.e. 10, 20, 30, 40, 50, 60, 70, 80, 90, 100. Ideally the input application should enforce a total of 100% for every defined depth interval. If the total for a depth interval does not add up to 100%, the \"undifferentiated\" code should be used to fill out to 100%.")]
        [ComponentElement]
		[XmlElement("LithPc")]
        public VolumePerVolumeMeasure LithPercent {
            get {
                return LithPcField;
            } 
            set {
                LithPcField = value;
                NotifyPropertyChanged("LithPercent");
            }
        }

        private VolumePerVolumeMeasure LithPcField; 

        /// <summary>
        /// Citation property
        /// </summary>
		[Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the CuttingsIntervalLithology")]
        [ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// CodeLith property
        /// </summary>
		[StringLength(64)]
        [Description("A custom Lithology encoding sceme if desired. (It is recommended that if used, this follows the NPD required useage with the numeric values noted in the enum tables, which was the original intent for this item).  The NPD Coding System assigned a digital code to the main lithologies as per the Norwegian Blue Book data standards. The code was then derived by Lithology = (Main lithology * 10) + cement + (modifier / 100). Example: Calcite cemented silty micaceous sandstone: ( 33 * 10 ) + 1 + (21 / 100) gives a numeric code of 331.21. However the NPD is also working through Energistics/Ceasar to potentially change this useage.) This should not be used for mnemonics, as those vary by operator, and if an abbreviation is  required a local look up table should be used by the rendering client, based on Lithology Type.")]
		[XmlElement("CodeLith")]
        public String CodeLith {
            get {
                return CodeLithField;
            } 
            set {
                CodeLithField = value;
                NotifyPropertyChanged("CodeLith");
            }
        }

        private String CodeLithField; 

        /// <summary>
        /// Color property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology color description, from Shell 1995 4.3.3.1 and 4.3.3.2 Colors. with the addition of Frosted. eg black blue brown buff green grey olive orange pink purple red translucent frosted white yellow, modified by dark, light, moderate, medium, mottled, variegated, slight, weak, strong, vivid.")]
		[XmlElement("Color")]
        public String Color {
            get {
                return ColorField;
            } 
            set {
                ColorField = value;
                NotifyPropertyChanged("Color");
            }
        }

        private String ColorField; 

        /// <summary>
        /// Texture property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology matrix texture description from Shell 1995 4.3.2.6. crystalline, (often \"feather-edge\" appearance on breaking),  friable, dull, earthy,  chalky, (particle size less than 20m; often exhibits capillary imbibition) visibly particulate, granular,   sucrosic, (often exhibits capillary imbibition). e.g.: compact interlocking, particulate, (Gradational textures are quite common,) chalky matrix with sucrosic patches, (Composite textures also occur)")]
		[XmlElement("Texture")]
        public String Texture {
            get {
                return TextureField;
            } 
            set {
                TextureField = value;
                NotifyPropertyChanged("Texture");
            }
        }

        private String TextureField; 

        /// <summary>
        /// Hardness property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Mineral hardness. (Typically this will rarely be used as mineral hardness is not typically recorded. What is recorded is typically compaction. It is retained though for use defined as per Mohs scale of mineral hardness.)")]
		[XmlElement("Hardness")]
        public String Hardness {
            get {
                return HardnessField;
            } 
            set {
                HardnessField = value;
                NotifyPropertyChanged("Hardness");
            }
        }

        private String HardnessField; 

        /// <summary>
        /// Compaction property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology compaction from Shell 1995 4.3.1.5. not compacted, slightly compacted, compacted, strongly compacted, friable, indurated, hard.")]
		[XmlElement("Compaction")]
        public String Compaction {
            get {
                return CompactionField;
            } 
            set {
                CompactionField = value;
                NotifyPropertyChanged("Compaction");
            }
        }

        private String CompactionField; 

        /// <summary>
        /// SizeGrain property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology grain size description. Defined from Shell 4.3.1.1.(Wentworth) modified to remove the ambiguous term Pelite.  Size ranges in millimeter (or micrometer) and Inches. LT 256 mmLT 10.1 in \"boulder\"; 64-256 mm2.5-10.1 in\"cobble\"; 32-64 mm1.26-2.5 in\"very coarse gravel\"; 16-32 mm0.63-1.26 in\"coarse gravel\"; 8-16 mm0.31-0.63 in\"medium gravel\"; 4-8 mm0.157-0.31 in\"fine gravel\"; 2-4 mm0.079-0.157 in\"very fine gravel\"; 1-2 mm0.039-0.079 in\"very coarse sand\"; 0.5-1 mm0.020-0.039 in\"coarse sand\"; 0.25-0.5 mm0.010-0.020 in\"medium sand\"; 125-250 um0.0049-0.010 in\"fine sand\"; 62.5-125 um0.0025-0.0049 in\"very fine sand\"; 3.90625-62.5 um0.00015-0.0025 in\"silt\"; LT 3.90625 umLT 0.00015 in\"clay\"; LT 1 umLT 0.000039 in \"colloid\"")]
		[XmlElement("SizeGrain")]
        public String SizeGrain {
            get {
                return SizeGrainField;
            } 
            set {
                SizeGrainField = value;
                NotifyPropertyChanged("SizeGrain");
            }
        }

        private String SizeGrainField; 

        /// <summary>
        /// Roundness property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology roundness description from Shell 4.3.1.3 Roundness (roundness refers to modal size class). very angular, angular, subangular, subrounded, rounded, well rounded.")]
		[XmlElement("Roundness")]
        public String Roundness {
            get {
                return RoundnessField;
            } 
            set {
                RoundnessField = value;
                NotifyPropertyChanged("Roundness");
            }
        }

        private String RoundnessField; 

        /// <summary>
        /// Sphericity property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology sphericity description for the modal size class of grains in the sample, defined as per Shell 4.3.1.4 Sphericity. very elongated, elongated, slightly elongated, slightly spherical, spherical, very spherical")]
		[XmlElement("Sphericity")]
        public String Sphericity {
            get {
                return SphericityField;
            } 
            set {
                SphericityField = value;
                NotifyPropertyChanged("Sphericity");
            }
        }

        private String SphericityField; 

        /// <summary>
        /// Sorting property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology sorting descriptione from Shell 4.3.1.2 Sorting. very poorly sorted, unsorted, poorly sorted, poorly to moderately well sorted, moderately well sorted, well sorted, very well sorted, unimodally sorted, bimodally sorted.")]
		[XmlElement("Sorting")]
        public String Sorting {
            get {
                return SortingField;
            } 
            set {
                SortingField = value;
                NotifyPropertyChanged("Sorting");
            }
        }

        private String SortingField; 

        /// <summary>
        /// MatrixCement property
        /// </summary>
		[StringLength(40)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology matrix/cement description. Terms will be as defined in the enumeration table. eg. \"calcite\" (Common) \"dolomite\", \"ankerite\" (eg. North Sea HPHT reservoirs such as Elgin and Franklin have almost pure Ankerite cementation, \"siderite\" (Sherwood sandstones, southern UK typical Siderite cements), \"quartz\" (grain to grain contact cementation or secondary quartz deposition), \"kaolinite\", \"illite\" (eg. Village Fields North Sea), \"smectite\",\"chlorite\" (Teg, Algeria.)")]
		[XmlElement("MatrixCement")]
        public String MatrixCement {
            get {
                return MatrixCementField;
            } 
            set {
                MatrixCementField = value;
                NotifyPropertyChanged("MatrixCement");
            }
        }

        private String MatrixCementField; 

        /// <summary>
        /// PorosityVisible property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology visible porosity description. Defined after BakerHughes definitions, as opposed to Shell, which has no linkage to actual numeric estimates. The theoretical maximum porosity for a clastic rock is about 26%. This is normally much reduced by other factors. When estimating porosities use: MT 15% \"good\" 10 to 15% \"fair\" 5 to 10% \"poor\" LT 5% \"trace\" 0 \"none\"")]
		[XmlElement("PorosityVisible")]
        public String PorosityVisible {
            get {
                return PorosityVisibleField;
            } 
            set {
                PorosityVisibleField = value;
                NotifyPropertyChanged("PorosityVisible");
            }
        }

        private String PorosityVisibleField; 

        /// <summary>
        /// PorosityFabric property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Visible porosity fabric description from after Shell 4.3.2.1 and 4.3.2.2. intergranular (particle size greater than 20m), fine interparticle (particle size less than 20m), intercrystalline, intragranular, intraskeletal, intracrystalline, mouldic, fenestral, shelter, framework, stylolitic, replacement, solution, vuggy, channel, cavernous.")]
		[XmlElement("PorosityFabric")]
        public String PorosityFabric {
            get {
                return PorosityFabricField;
            } 
            set {
                PorosityFabricField = value;
                NotifyPropertyChanged("PorosityFabric");
            }
        }

        private String PorosityFabricField; 

        /// <summary>
        /// Permeability property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology permeability description from Shell 4.3.2.5. In future these would benefit from quantification. tight, slightly, fairly, highly.")]
		[XmlElement("Permeability")]
        public String Permeability {
            get {
                return PermeabilityField;
            } 
            set {
                PermeabilityField = value;
                NotifyPropertyChanged("Permeability");
            }
        }

        private String PermeabilityField; 

        /// <summary>
        /// Shows property
        /// </summary>
		[RecurringElement]
		[XmlElement("Shows")]
        public List<CuttingsIntervalShow> Shows {
            get {
                return ShowsField;
            } 
            set {
                ShowsField = value;
                NotifyPropertyChanged("Shows");
            }
        }

         [XmlIgnore]
         public bool ShowsSpecified
         {
            get {
             if(ShowsField!=null)
                return ShowsField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CuttingsIntervalShow> ShowsField; 

        /// <summary>
        /// Qualifier property
        /// </summary>
		[RecurringElement]
		[XmlElement("Qualifier")]
        public List<LithologyQualifier> Qualifier {
            get {
                return QualifierField;
            } 
            set {
                QualifierField = value;
                NotifyPropertyChanged("Qualifier");
            }
        }

         [XmlIgnore]
         public bool QualifierSpecified
         {
            get {
             if(QualifierField!=null)
                return QualifierField.Count>0?true:false;
             else return false;
            } 
         }
        private List<LithologyQualifier> QualifierField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of CuttingsIntervalLithology")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CuttingsIntervalShow xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CuttingsIntervalShow", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CuttingsIntervalShow xsd type.")]
    public partial class CuttingsIntervalShow : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Citation property
        /// </summary>
		[Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the CuttingsIntervalShow")]
        [ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// ShowRating property
        /// </summary>
		[Description("Show Rating.")]
		[XmlElement("ShowRating")]
        public ShowRating? ShowRating {
            get {
                return ShowRatingField;
            } 
            set {
                ShowRatingField = value;
             if(value!=null) 
                 this.ShowRatingSpecified = true;
                NotifyPropertyChanged("ShowRating");
            }
        }

        private ShowRating? ShowRatingField; 

        /// <summary>
        /// ShowRatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ShowRatingSpecified {
            get {
                return ShowRatingSpecifiedField;
            } 
            set {
                ShowRatingSpecifiedField = value;
                NotifyPropertyChanged("ShowRatingSpecified");
            }
        }

        private Boolean ShowRatingSpecifiedField; 

        /// <summary>
        /// StainColor property
        /// </summary>
		[StringLength(64)]
        [Description("Visible Stain Color.")]
		[XmlElement("StainColor")]
        public String StainColor {
            get {
                return StainColorField;
            } 
            set {
                StainColorField = value;
                NotifyPropertyChanged("StainColor");
            }
        }

        private String StainColorField; 

        /// <summary>
        /// StainDistr property
        /// </summary>
		[StringLength(64)]
        [Description("Visible Stain Distribution.")]
		[XmlElement("StainDistr")]
        public String StainDistr {
            get {
                return StainDistrField;
            } 
            set {
                StainDistrField = value;
                NotifyPropertyChanged("StainDistr");
            }
        }

        private String StainDistrField; 

        /// <summary>
        /// StainPc property
        /// </summary>
		[Description("Visible Stain (commonly in percent).")]
        [ComponentElement]
		[XmlElement("StainPc")]
        public AreaPerAreaMeasure StainPercent {
            get {
                return StainPcField;
            } 
            set {
                StainPcField = value;
                NotifyPropertyChanged("StainPercent");
            }
        }

        private AreaPerAreaMeasure StainPcField; 

        /// <summary>
        /// CutSpeed property
        /// </summary>
		[Description("Cut speed.")]
		[XmlElement("CutSpeed")]
        public ShowSpeed? CutSpeed {
            get {
                return CutSpeedField;
            } 
            set {
                CutSpeedField = value;
             if(value!=null) 
                 this.CutSpeedSpecified = true;
                NotifyPropertyChanged("CutSpeed");
            }
        }

        private ShowSpeed? CutSpeedField; 

        /// <summary>
        /// CutSpeedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CutSpeedSpecified {
            get {
                return CutSpeedSpecifiedField;
            } 
            set {
                CutSpeedSpecifiedField = value;
                NotifyPropertyChanged("CutSpeedSpecified");
            }
        }

        private Boolean CutSpeedSpecifiedField; 

        /// <summary>
        /// CutColor property
        /// </summary>
		[StringLength(64)]
        [Description("Cut color.")]
		[XmlElement("CutColor")]
        public String CutColor {
            get {
                return CutColorField;
            } 
            set {
                CutColorField = value;
                NotifyPropertyChanged("CutColor");
            }
        }

        private String CutColorField; 

        /// <summary>
        /// CutStrength property
        /// </summary>
		[StringLength(64)]
        [Description("Cut strength.")]
		[XmlElement("CutStrength")]
        public String CutStrength {
            get {
                return CutStrengthField;
            } 
            set {
                CutStrengthField = value;
                NotifyPropertyChanged("CutStrength");
            }
        }

        private String CutStrengthField; 

        /// <summary>
        /// CutForm property
        /// </summary>
		[Description("Cut formulation.")]
		[XmlElement("CutForm")]
        public ShowLevel? CutForm {
            get {
                return CutFormField;
            } 
            set {
                CutFormField = value;
             if(value!=null) 
                 this.CutFormSpecified = true;
                NotifyPropertyChanged("CutForm");
            }
        }

        private ShowLevel? CutFormField; 

        /// <summary>
        /// CutFormSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CutFormSpecified {
            get {
                return CutFormSpecifiedField;
            } 
            set {
                CutFormSpecifiedField = value;
                NotifyPropertyChanged("CutFormSpecified");
            }
        }

        private Boolean CutFormSpecifiedField; 

        /// <summary>
        /// CutLevel property
        /// </summary>
		[StringLength(64)]
        [Description("Cut level (Faint, Bright, etc.).")]
		[XmlElement("CutLevel")]
        public String CutLevel {
            get {
                return CutLevelField;
            } 
            set {
                CutLevelField = value;
                NotifyPropertyChanged("CutLevel");
            }
        }

        private String CutLevelField; 

        /// <summary>
        /// CutFlorForm property
        /// </summary>
		[Description("Cut fluorescence form.")]
		[XmlElement("CutFlorForm")]
        public ShowLevel? CutFlorForm {
            get {
                return CutFlorFormField;
            } 
            set {
                CutFlorFormField = value;
             if(value!=null) 
                 this.CutFlorFormSpecified = true;
                NotifyPropertyChanged("CutFlorForm");
            }
        }

        private ShowLevel? CutFlorFormField; 

        /// <summary>
        /// CutFlorFormSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CutFlorFormSpecified {
            get {
                return CutFlorFormSpecifiedField;
            } 
            set {
                CutFlorFormSpecifiedField = value;
                NotifyPropertyChanged("CutFlorFormSpecified");
            }
        }

        private Boolean CutFlorFormSpecifiedField; 

        /// <summary>
        /// CutFlorColor property
        /// </summary>
		[StringLength(64)]
        [Description("Cut fluorescence color.")]
		[XmlElement("CutFlorColor")]
        public String CutFlorColor {
            get {
                return CutFlorColorField;
            } 
            set {
                CutFlorColorField = value;
                NotifyPropertyChanged("CutFlorColor");
            }
        }

        private String CutFlorColorField; 

        /// <summary>
        /// CutFlorStrength property
        /// </summary>
		[StringLength(64)]
        [Description("Cut fluorescence strength.")]
		[XmlElement("CutFlorStrength")]
        public String CutFlorStrength {
            get {
                return CutFlorStrengthField;
            } 
            set {
                CutFlorStrengthField = value;
                NotifyPropertyChanged("CutFlorStrength");
            }
        }

        private String CutFlorStrengthField; 

        /// <summary>
        /// CutFlorSpeed property
        /// </summary>
		[Description("Cut fluorescence speed.")]
		[XmlElement("CutFlorSpeed")]
        public ShowSpeed? CutFlorSpeed {
            get {
                return CutFlorSpeedField;
            } 
            set {
                CutFlorSpeedField = value;
             if(value!=null) 
                 this.CutFlorSpeedSpecified = true;
                NotifyPropertyChanged("CutFlorSpeed");
            }
        }

        private ShowSpeed? CutFlorSpeedField; 

        /// <summary>
        /// CutFlorSpeedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CutFlorSpeedSpecified {
            get {
                return CutFlorSpeedSpecifiedField;
            } 
            set {
                CutFlorSpeedSpecifiedField = value;
                NotifyPropertyChanged("CutFlorSpeedSpecified");
            }
        }

        private Boolean CutFlorSpeedSpecifiedField; 

        /// <summary>
        /// CutFlorLevel property
        /// </summary>
		[Description("Cut fluorescence level.")]
		[XmlElement("CutFlorLevel")]
        public ShowFluorescence? CutFlorLevel {
            get {
                return CutFlorLevelField;
            } 
            set {
                CutFlorLevelField = value;
             if(value!=null) 
                 this.CutFlorLevelSpecified = true;
                NotifyPropertyChanged("CutFlorLevel");
            }
        }

        private ShowFluorescence? CutFlorLevelField; 

        /// <summary>
        /// CutFlorLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CutFlorLevelSpecified {
            get {
                return CutFlorLevelSpecifiedField;
            } 
            set {
                CutFlorLevelSpecifiedField = value;
                NotifyPropertyChanged("CutFlorLevelSpecified");
            }
        }

        private Boolean CutFlorLevelSpecifiedField; 

        /// <summary>
        /// NatFlorColor property
        /// </summary>
		[StringLength(64)]
        [Description("Natural Fluorescence Color.")]
		[XmlElement("NatFlorColor")]
        public String NatFlorColor {
            get {
                return NatFlorColorField;
            } 
            set {
                NatFlorColorField = value;
                NotifyPropertyChanged("NatFlorColor");
            }
        }

        private String NatFlorColorField; 

        /// <summary>
        /// NatFlorPc property
        /// </summary>
		[Description("Natural fluorescence (commonly in percent).")]
        [ComponentElement]
		[XmlElement("NatFlorPc")]
        public AreaPerAreaMeasure NatFlorPercent {
            get {
                return NatFlorPcField;
            } 
            set {
                NatFlorPcField = value;
                NotifyPropertyChanged("NatFlorPercent");
            }
        }

        private AreaPerAreaMeasure NatFlorPcField; 

        /// <summary>
        /// NatFlorLevel property
        /// </summary>
		[Description("Natural fluorescence level.")]
		[XmlElement("NatFlorLevel")]
        public ShowFluorescence? NatFlorLevel {
            get {
                return NatFlorLevelField;
            } 
            set {
                NatFlorLevelField = value;
             if(value!=null) 
                 this.NatFlorLevelSpecified = true;
                NotifyPropertyChanged("NatFlorLevel");
            }
        }

        private ShowFluorescence? NatFlorLevelField; 

        /// <summary>
        /// NatFlorLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NatFlorLevelSpecified {
            get {
                return NatFlorLevelSpecifiedField;
            } 
            set {
                NatFlorLevelSpecifiedField = value;
                NotifyPropertyChanged("NatFlorLevelSpecified");
            }
        }

        private Boolean NatFlorLevelSpecifiedField; 

        /// <summary>
        /// NatFlorDesc property
        /// </summary>
		[StringLength(64)]
        [Description("Natural fluorescence description.")]
		[XmlElement("NatFlorDesc")]
        public String NatFlorDesc {
            get {
                return NatFlorDescField;
            } 
            set {
                NatFlorDescField = value;
                NotifyPropertyChanged("NatFlorDesc");
            }
        }

        private String NatFlorDescField; 

        /// <summary>
        /// ResidueColor property
        /// </summary>
		[StringLength(64)]
        [Description("Residue color.")]
		[XmlElement("ResidueColor")]
        public String ResidueColor {
            get {
                return ResidueColorField;
            } 
            set {
                ResidueColorField = value;
                NotifyPropertyChanged("ResidueColor");
            }
        }

        private String ResidueColorField; 

        /// <summary>
        /// ImpregnatedLitho property
        /// </summary>
		[StringLength(64)]
        [Description("Impregnated lithology.")]
		[XmlElement("ImpregnatedLitho")]
        public String ImpregnatedLitho {
            get {
                return ImpregnatedLithoField;
            } 
            set {
                ImpregnatedLithoField = value;
                NotifyPropertyChanged("ImpregnatedLitho");
            }
        }

        private String ImpregnatedLithoField; 

        /// <summary>
        /// Odor property
        /// </summary>
		[StringLength(64)]
        [Description("Description of any hydrocarbon type odors smelled.")]
		[XmlElement("Odor")]
        public String Odor {
            get {
                return OdorField;
            } 
            set {
                OdorField = value;
                NotifyPropertyChanged("Odor");
            }
        }

        private String OdorField; 

        /// <summary>
        /// CuttingFluid property
        /// </summary>
		[StringLength(64)]
        [Description("Description of any hydrocarbon type odors smelled")]
		[XmlElement("CuttingFluid")]
        public String CuttingFluid {
            get {
                return CuttingFluidField;
            } 
            set {
                CuttingFluidField = value;
                NotifyPropertyChanged("CuttingFluid");
            }
        }

        private String CuttingFluidField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of CuttingsIntervalShow")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AreaPerAreaMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AreaPerAreaMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AreaPerAreaMeasure xsd type.")]
    public partial class AreaPerAreaMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaPerAreaMeasure class.
        /// </summary>
        public AreaPerAreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaPerAreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaPerAreaMeasure(Double value, AreaPerAreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public AreaPerAreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaPerAreaUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LithologyQualifier xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LithologyQualifier", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the LithologyQualifier xsd type.")]
    public partial class LithologyQualifier : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [StringLength(40)]
        [Description("The type of qualifier.")]
		[XmlElement("Kind")]
        public String Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private String KindField; 

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Description("The measured depth interval represented by the qualifier. This must be within the range of the parent geologic interval. If MdInterval is not given then the qualifier is deemed to exist over the entire depth range of the parent geologyInterval.")]
        [ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// Abundance property
        /// </summary>
		[Description("The relative abundance of the qualifier estimated based on a \"visual area\" basis by inspecting the cuttings  spread out on the shaker table prior to washing, or in the sample tray after washing. This represents the upper bound of the observed range, and is in the following increments at the upper bound. 1 = less than or equal to 1%, 2 = greater than or equal to 1 and less than 2%, 5 = greater than or equal to 2 and less than 5% and then in 5% increments, 10 (=5-10%), 15 (=10-15%) up to 100(=95-100%). The end user can then elect  to either display  the %, or map then to an operator specific term or coding, i.e. 1 less then or equal to 1%=Rare Trace, or occasional, or very sparse etc., depending on the the end users' terminology.)")]
        [ComponentElement]
		[XmlElement("Abundance")]
        public VolumePerVolumeMeasure Abundance {
            get {
                return AbundanceField;
            } 
            set {
                AbundanceField = value;
                NotifyPropertyChanged("Abundance");
            }
        }

        private VolumePerVolumeMeasure AbundanceField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of the qualifier.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of LithologyQualifier")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the InterpretedGeologyInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_InterpretedGeologyInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the InterpretedGeologyInterval xsd type.")]
    public partial class InterpretedGeologyInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("The measured depth interval which is described by this interpreted geology.")]
        [ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// Citation property
        /// </summary>
		[Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the InterpretedGeologyInterval")]
        [ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// GeochronologicalUnit property
        /// </summary>
		[Description("The name of a Geochronology, with the \"kind\" attribute specifying the geochronological time span")]
        [RecurringElement]
		[XmlElement("GeochronologicalUnit")]
        public List<GeochronologicalUnit> GeochronologicalUnit {
            get {
                return GeochronologicalUnitField;
            } 
            set {
                GeochronologicalUnitField = value;
                NotifyPropertyChanged("GeochronologicalUnit");
            }
        }

         [XmlIgnore]
         public bool GeochronologicalUnitSpecified
         {
            get {
             if(GeochronologicalUnitField!=null)
                return GeochronologicalUnitField.Count>0?true:false;
             else return false;
            } 
         }
        private List<GeochronologicalUnit> GeochronologicalUnitField; 

        /// <summary>
        /// LithostratigraphicUnit property
        /// </summary>
		[Description("Specifies the unit of lithostratigraphy.")]
        [RecurringElement]
		[XmlElement("LithostratigraphicUnit")]
        public List<LithostratigraphicUnit> LithostratigraphicUnit {
            get {
                return LithostratigraphicUnitField;
            } 
            set {
                LithostratigraphicUnitField = value;
                NotifyPropertyChanged("LithostratigraphicUnit");
            }
        }

         [XmlIgnore]
         public bool LithostratigraphicUnitSpecified
         {
            get {
             if(LithostratigraphicUnitField!=null)
                return LithostratigraphicUnitField.Count>0?true:false;
             else return false;
            } 
         }
        private List<LithostratigraphicUnit> LithostratigraphicUnitField; 

        /// <summary>
        /// InterpretedLithology property
        /// </summary>
		[ComponentElement]
		[XmlElement("InterpretedLithology")]
        public InterpretedIntervalLithology InterpretedLithology {
            get {
                return InterpretedLithologyField;
            } 
            set {
                InterpretedLithologyField = value;
                NotifyPropertyChanged("InterpretedLithology");
            }
        }

        private InterpretedIntervalLithology InterpretedLithologyField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of InterpretedGeologyInterval")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeochronologicalUnit xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeochronologicalUnit", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GeochronologicalUnit xsd type.")]
    public partial class GeochronologicalUnit : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the GeochronologicalUnit class.
        /// </summary>
        public GeochronologicalUnit() {}

        /// <summary>
        /// Initializes a new instance of the GeochronologicalUnit class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public GeochronologicalUnit(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// authority property
        /// </summary>
		[StringLength(64)]
        [Description("Person or collective body responsible for authorizing the information.")]
        [XmlAttribute("authority")]
		
        public String Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private String authorityField; 

		/// <summary>
        /// kind property
        /// </summary>
		[Description("Defines the time spans in Geochronology")]
        [XmlAttribute("kind")]
		
        public GeochronologicalRank Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
             if(value!=null) 
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private GeochronologicalRank kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private Boolean kindSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LithostratigraphicUnit xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LithostratigraphicUnit", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the LithostratigraphicUnit xsd type.")]
    public partial class LithostratigraphicUnit : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LithostratigraphicUnit class.
        /// </summary>
        public LithostratigraphicUnit() {}

        /// <summary>
        /// Initializes a new instance of the LithostratigraphicUnit class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public LithostratigraphicUnit(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// authority property
        /// </summary>
		[StringLength(64)]
        [Description("Person or collective body responsible for authorizing the information.")]
        [XmlAttribute("authority")]
		
        public String Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private String authorityField; 

		/// <summary>
        /// kind property
        /// </summary>
		[Description("Specifies the lithostratigraphic unit-hierarchy (Group, Formation, Member or Bed)")]
        [XmlAttribute("kind")]
		
        public LithostratigraphicRank Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
             if(value!=null) 
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private LithostratigraphicRank kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private Boolean kindSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the InterpretedIntervalLithology xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="InterpretedIntervalLithology", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the InterpretedIntervalLithology xsd type.")]
    public partial class InterpretedIntervalLithology : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [StringLength(40)]
        [Description("The geological name for the type of lithology from the enum table listing a  subset of the OneGeology / CGI defined formation types.")]
		[XmlElement("Kind")]
        public String Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private String KindField; 

        /// <summary>
        /// Citation property
        /// </summary>
		[Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the InterpretedIntervalLithology")]
        [ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// CodeLith property
        /// </summary>
		[StringLength(64)]
        [Description("A custom Lithology encoding sceme if desired. (It is recommended that if used, this follows the NPD required useage with the numeric values noted in the enum tables, which was the original intent for this item).  The NPD Coding System assigned a digital code to the main lithologies as per the Norwegian Blue Book data standards. The code was then derived by Lithology = (Main lithology * 10) + cement + (modifier / 100). Example: Calcite cemented silty micaceous sandstone: ( 33 * 10 ) + 1 + (21 / 100) gives a numeric code of 331.21. However the NPD is also working through Energistics/Ceasar to potentially change this useage.) This should not be used for mnemonics, as those vary by operator, and if an abbreviation is  required a local look up table should be used by the rendering client, based on Lithology Type.")]
		[XmlElement("CodeLith")]
        public String CodeLith {
            get {
                return CodeLithField;
            } 
            set {
                CodeLithField = value;
                NotifyPropertyChanged("CodeLith");
            }
        }

        private String CodeLithField; 

        /// <summary>
        /// Color property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology color description, from Shell 1995 4.3.3.1 and 4.3.3.2 Colors. with the addition of Frosted. eg black blue brown buff green grey olive orange pink purple red translucent frosted white yellow, modified by dark, light, moderate, medium, mottled, variegated, slight, weak, strong, vivid.")]
		[XmlElement("Color")]
        public String Color {
            get {
                return ColorField;
            } 
            set {
                ColorField = value;
                NotifyPropertyChanged("Color");
            }
        }

        private String ColorField; 

        /// <summary>
        /// Texture property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology matrix texture description from Shell 1995 4.3.2.6. crystalline, (often \"feather-edge\" appearance on breaking),  friable, dull, earthy,  chalky, (particle size less than 20m; often exhibits capillary imbibition) visibly particulate, granular,   sucrosic, (often exhibits capillary imbibition). e.g.: compact interlocking, particulate, (Gradational textures are quite common,) chalky matrix with sucrosic patches, (Composite textures also occur)")]
		[XmlElement("Texture")]
        public String Texture {
            get {
                return TextureField;
            } 
            set {
                TextureField = value;
                NotifyPropertyChanged("Texture");
            }
        }

        private String TextureField; 

        /// <summary>
        /// Hardness property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Mineral hardness. (Typically this will rarely be used as mineral hardness is not typically recorded. What is recorded is typically compaction. It is retained though for use defined as per Mohs scale of mineral hardness.)")]
		[XmlElement("Hardness")]
        public String Hardness {
            get {
                return HardnessField;
            } 
            set {
                HardnessField = value;
                NotifyPropertyChanged("Hardness");
            }
        }

        private String HardnessField; 

        /// <summary>
        /// Compaction property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology compaction from Shell 1995 4.3.1.5. not compacted, slightly compacted, compacted, strongly compacted, friable, indurated, hard.")]
		[XmlElement("Compaction")]
        public String Compaction {
            get {
                return CompactionField;
            } 
            set {
                CompactionField = value;
                NotifyPropertyChanged("Compaction");
            }
        }

        private String CompactionField; 

        /// <summary>
        /// SizeGrain property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology grain size description. Defined from Shell 4.3.1.1.(Wentworth) modified to remove the ambiguous term Pelite.  Size ranges in millimeter (or micrometer) and Inches. LT 256 mmLT 10.1 in \"boulder\"; 64-256 mm2.5-10.1 in\"cobble\"; 32-64 mm1.26-2.5 in\"very coarse gravel\"; 16-32 mm0.63-1.26 in\"coarse gravel\"; 8-16 mm0.31-0.63 in\"medium gravel\"; 4-8 mm0.157-0.31 in\"fine gravel\"; 2-4 mm0.079-0.157 in\"very fine gravel\"; 1-2 mm0.039-0.079 in\"very coarse sand\"; 0.5-1 mm0.020-0.039 in\"coarse sand\"; 0.25-0.5 mm0.010-0.020 in\"medium sand\"; 125-250 um0.0049-0.010 in\"fine sand\"; 62.5-125 um0.0025-0.0049 in\"very fine sand\"; 3.90625-62.5 um0.00015-0.0025 in\"silt\"; LT 3.90625 umLT 0.00015 in\"clay\"; LT 1 umLT 0.000039 in \"colloid\"")]
		[XmlElement("SizeGrain")]
        public String SizeGrain {
            get {
                return SizeGrainField;
            } 
            set {
                SizeGrainField = value;
                NotifyPropertyChanged("SizeGrain");
            }
        }

        private String SizeGrainField; 

        /// <summary>
        /// Roundness property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology roundness description from Shell 4.3.1.3 Roundness (roundness refers to modal size class). very angular, angular, subangular, subrounded, rounded, well rounded.")]
		[XmlElement("Roundness")]
        public String Roundness {
            get {
                return RoundnessField;
            } 
            set {
                RoundnessField = value;
                NotifyPropertyChanged("Roundness");
            }
        }

        private String RoundnessField; 

        /// <summary>
        /// Sorting property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology sorting descriptione from Shell 4.3.1.2 Sorting. very poorly sorted, unsorted, poorly sorted, poorly to moderately well sorted, moderately well sorted, well sorted, very well sorted, unimodally sorted, bimodally sorted.")]
		[XmlElement("Sorting")]
        public String Sorting {
            get {
                return SortingField;
            } 
            set {
                SortingField = value;
                NotifyPropertyChanged("Sorting");
            }
        }

        private String SortingField; 

        /// <summary>
        /// Sphericity property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology sphericity description for the modal size class of grains in the sample, defined as per Shell 4.3.1.4 Sphericity. very elongated, elongated, slightly elongated, slightly spherical, spherical, very spherical")]
		[XmlElement("Sphericity")]
        public String Sphericity {
            get {
                return SphericityField;
            } 
            set {
                SphericityField = value;
                NotifyPropertyChanged("Sphericity");
            }
        }

        private String SphericityField; 

        /// <summary>
        /// MatrixCement property
        /// </summary>
		[StringLength(40)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology matrix/cement description. Terms will be as defined in the enumeration table. eg. \"calcite\" (Common) \"dolomite\", \"ankerite\" (eg. North Sea HPHT reservoirs such as Elgin and Franklin have almost pure Ankerite cementation, \"siderite\" (Sherwood sandstones, southern UK typical Siderite cements), \"quartz\" (grain to grain contact cementation or secondary quartz deposition), \"kaolinite\", \"illite\" (eg. Village Fields North Sea), \"smectite\",\"chlorite\" (Teg, Algeria.)")]
		[XmlElement("MatrixCement")]
        public String MatrixCement {
            get {
                return MatrixCementField;
            } 
            set {
                MatrixCementField = value;
                NotifyPropertyChanged("MatrixCement");
            }
        }

        private String MatrixCementField; 

        /// <summary>
        /// PorosityVisible property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology visible porosity description. Defined after BakerHughes definitions, as opposed to Shell, which has no linkage to actual numeric estimates. The theoretical maximum porosity for a clastic rock is about 26%. This is normally much reduced by other factors. When estimating porosities use: MT 15% \"good\" 10 to 15% \"fair\" 5 to 10% \"poor\" LT 5% \"trace\" 0 \"none\"")]
		[XmlElement("PorosityVisible")]
        public String PorosityVisible {
            get {
                return PorosityVisibleField;
            } 
            set {
                PorosityVisibleField = value;
                NotifyPropertyChanged("PorosityVisible");
            }
        }

        private String PorosityVisibleField; 

        /// <summary>
        /// PorosityFabric property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Visible porosity fabric description from after Shell 4.3.2.1 and 4.3.2.2. intergranular (particle size greater than 20m), fine interparticle (particle size less than 20m), intercrystalline, intragranular, intraskeletal, intracrystalline, mouldic, fenestral, shelter, framework, stylolitic, replacement, solution, vuggy, channel, cavernous.")]
		[XmlElement("PorosityFabric")]
        public String PorosityFabric {
            get {
                return PorosityFabricField;
            } 
            set {
                PorosityFabricField = value;
                NotifyPropertyChanged("PorosityFabric");
            }
        }

        private String PorosityFabricField; 

        /// <summary>
        /// Permeability property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology permeability description from Shell 4.3.2.5. In future these would benefit from quantification. tight, slightly, fairly, highly.")]
		[XmlElement("Permeability")]
        public String Permeability {
            get {
                return PermeabilityField;
            } 
            set {
                PermeabilityField = value;
                NotifyPropertyChanged("Permeability");
            }
        }

        private String PermeabilityField; 

        /// <summary>
        /// Qualifier property
        /// </summary>
		[RecurringElement]
		[XmlElement("Qualifier")]
        public List<LithologyQualifier> Qualifier {
            get {
                return QualifierField;
            } 
            set {
                QualifierField = value;
                NotifyPropertyChanged("Qualifier");
            }
        }

         [XmlIgnore]
         public bool QualifierSpecified
         {
            get {
             if(QualifierField!=null)
                return QualifierField.Count>0?true:false;
             else return false;
            } 
         }
        private List<LithologyQualifier> QualifierField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of InterpretedIntervalLithology")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the ShowEvaluationInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_EvaluatedIntervalShow", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the ShowEvaluationInterval xsd type.")]
    public partial class ShowEvaluationInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("The measured depth interval over which the show is evaluated.")]
        [ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// Citation property
        /// </summary>
		[Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the ShowEvaluationInterval")]
        [ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// ShowFluid property
        /// </summary>
		[Required]
		[XmlElement("ShowFluid")]
        public ShowFluid? ShowFluid {
            get {
                return ShowFluidField;
            } 
            set {
                ShowFluidField = value;
                NotifyPropertyChanged("ShowFluid");
            }
        }

        private ShowFluid? ShowFluidField; 

        /// <summary>
        /// ShowRating property
        /// </summary>
		[Description("Show Rating.")]
		[XmlElement("ShowRating")]
        public ShowRating? ShowRating {
            get {
                return ShowRatingField;
            } 
            set {
                ShowRatingField = value;
             if(value!=null) 
                 this.ShowRatingSpecified = true;
                NotifyPropertyChanged("ShowRating");
            }
        }

        private ShowRating? ShowRatingField; 

        /// <summary>
        /// ShowRatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ShowRatingSpecified {
            get {
                return ShowRatingSpecifiedField;
            } 
            set {
                ShowRatingSpecifiedField = value;
                NotifyPropertyChanged("ShowRatingSpecified");
            }
        }

        private Boolean ShowRatingSpecifiedField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of ShowEvaluationInterval")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegTrackCurve xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegTrackCurve", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegTrackCurve xsd type.")]
    public partial class DepthRegTrackCurve : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// CurveInfo property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Curve mnemonic")]
		[XmlElement("CurveInfo")]
        public String CurveInfo {
            get {
                return CurveInfoField;
            } 
            set {
                CurveInfoField = value;
                NotifyPropertyChanged("CurveInfo");
            }
        }

        private String CurveInfoField; 

        /// <summary>
        /// LineStyle property
        /// </summary>
		[Required]
        [Description("Image line style")]
		[XmlElement("LineStyle")]
        public LineStyle? LineStyle {
            get {
                return LineStyleField;
            } 
            set {
                LineStyleField = value;
                NotifyPropertyChanged("LineStyle");
            }
        }

        private LineStyle? LineStyleField; 

        /// <summary>
        /// LineWeight property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Description of line graveness")]
		[XmlElement("LineWeight")]
        public String LineWeight {
            get {
                return LineWeightField;
            } 
            set {
                LineWeightField = value;
                NotifyPropertyChanged("LineWeight");
            }
        }

        private String LineWeightField; 

        /// <summary>
        /// LineColor property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Color of this line")]
		[XmlElement("LineColor")]
        public String LineColor {
            get {
                return LineColorField;
            } 
            set {
                LineColorField = value;
                NotifyPropertyChanged("LineColor");
            }
        }

        private String LineColorField; 

        /// <summary>
        /// CurveScaleType property
        /// </summary>
		[Required]
        [Description("Scale linearity")]
		[XmlElement("CurveScaleType")]
        public ScaleType? CurveScaleType {
            get {
                return CurveScaleTypeField;
            } 
            set {
                CurveScaleTypeField = value;
                NotifyPropertyChanged("CurveScaleType");
            }
        }

        private ScaleType? CurveScaleTypeField; 

        /// <summary>
        /// CurveUnit property
        /// </summary>
		[Required]
        [Description("Unit of data represented")]
		[XmlElement("CurveUnit")]
        public String CurveUnit {
            get {
                return CurveUnitField;
            } 
            set {
                CurveUnitField = value;
                NotifyPropertyChanged("CurveUnit");
            }
        }

        private String CurveUnitField; 

        /// <summary>
        /// CurveLeftScaleValue property
        /// </summary>
		[Required]
        [Description("Scale value on the left axis")]
		[XmlElement("CurveLeftScaleValue")]
        public Double? CurveLeftScaleValue {
            get {
                return CurveLeftScaleValueField;
            } 
            set {
                CurveLeftScaleValueField = value;
                NotifyPropertyChanged("CurveLeftScaleValue");
            }
        }

        private Double? CurveLeftScaleValueField; 

        /// <summary>
        /// CurveRightScaleValue property
        /// </summary>
		[Required]
        [Description("Scale value on the right axis")]
		[XmlElement("CurveRightScaleValue")]
        public Double? CurveRightScaleValue {
            get {
                return CurveRightScaleValueField;
            } 
            set {
                CurveRightScaleValueField = value;
                NotifyPropertyChanged("CurveRightScaleValue");
            }
        }

        private Double? CurveRightScaleValueField; 

        /// <summary>
        /// CurveBackupScaleType property
        /// </summary>
		[Required]
        [Description("Scale of the backup curve")]
		[XmlElement("CurveBackupScaleType")]
        public BackupScaleType? CurveBackupScaleType {
            get {
                return CurveBackupScaleTypeField;
            } 
            set {
                CurveBackupScaleTypeField = value;
                NotifyPropertyChanged("CurveBackupScaleType");
            }
        }

        private BackupScaleType? CurveBackupScaleTypeField; 

        /// <summary>
        /// CurveScaleRect property
        /// </summary>
		[Description("Coordinates of rectangle representing the area describing the scale.")]
        [RecurringElement]
		[XmlElement("CurveScaleRect")]
        public List<DepthRegRectangle> CurveScaleRect {
            get {
                return CurveScaleRectField;
            } 
            set {
                CurveScaleRectField = value;
                NotifyPropertyChanged("CurveScaleRect");
            }
        }

         [XmlIgnore]
         public bool CurveScaleRectSpecified
         {
            get {
             if(CurveScaleRectField!=null)
                return CurveScaleRectField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegRectangle> CurveScaleRectField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("Details of the line")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for the curve.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegRectangle xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegRectangle", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegRectangle xsd type.")]
    public partial class DepthRegRectangle : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Ul property
        /// </summary>
		[Description("The upper left point of a rectangular region.")]
        [ComponentElement]
		[XmlElement("Ul")]
        public DepthRegPoint UpperLeft {
            get {
                return UlField;
            } 
            set {
                UlField = value;
                NotifyPropertyChanged("UpperLeft");
            }
        }

        private DepthRegPoint UlField; 

        /// <summary>
        /// Ur property
        /// </summary>
		[Description("The upper right  point of a rectangular region.")]
        [ComponentElement]
		[XmlElement("Ur")]
        public DepthRegPoint UpperRight {
            get {
                return UrField;
            } 
            set {
                UrField = value;
                NotifyPropertyChanged("UpperRight");
            }
        }

        private DepthRegPoint UrField; 

        /// <summary>
        /// Ll property
        /// </summary>
		[Description("The lower left point of a rectangular region.")]
        [ComponentElement]
		[XmlElement("Ll")]
        public DepthRegPoint LowerLeft {
            get {
                return LlField;
            } 
            set {
                LlField = value;
                NotifyPropertyChanged("LowerLeft");
            }
        }

        private DepthRegPoint LlField; 

        /// <summary>
        /// Lr property
        /// </summary>
		[Description("The lower right point of a rectangular region.")]
        [ComponentElement]
		[XmlElement("Lr")]
        public DepthRegPoint LowerRight {
            get {
                return LrField;
            } 
            set {
                LrField = value;
                NotifyPropertyChanged("LowerRight");
            }
        }

        private DepthRegPoint LrField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for the rectangular area.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegPoint xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegPoint", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegPoint xsd type.")]
    public partial class DepthRegPoint : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// X property
        /// </summary>
		[Required]
        [Description("The x pixel position of a point.")]
		[XmlElement("X")]
        public Int64? X {
            get {
                return XField;
            } 
            set {
                XField = value;
                NotifyPropertyChanged("X");
            }
        }

        private Int64? XField; 

        /// <summary>
        /// Y property
        /// </summary>
		[Required]
        [Description("The y pixel position of a point.")]
		[XmlElement("Y")]
        public Int64? Y {
            get {
                return YField;
            } 
            set {
                YField = value;
                NotifyPropertyChanged("Y");
            }
        }

        private Int64? YField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegTrack xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegTrack", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegTrack xsd type.")]
    public partial class DepthRegTrack : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("A label associated with the track.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Type property
        /// </summary>
		[Required]
        [Description("The kind of track.")]
		[XmlElement("Type")]
        public LogTrackType? Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private LogTrackType? TypeField; 

        /// <summary>
        /// LeftEdge property
        /// </summary>
		[Required]
        [Description("The position of the left edge of the track.")]
		[XmlElement("LeftEdge")]
        public Int64? LeftEdge {
            get {
                return LeftEdgeField;
            } 
            set {
                LeftEdgeField = value;
                NotifyPropertyChanged("LeftEdge");
            }
        }

        private Int64? LeftEdgeField; 

        /// <summary>
        /// RightEdge property
        /// </summary>
		[Required]
        [Description("The position of the right edge of the track.")]
		[XmlElement("RightEdge")]
        public Int64? RightEdge {
            get {
                return RightEdgeField;
            } 
            set {
                RightEdgeField = value;
                NotifyPropertyChanged("RightEdge");
            }
        }

        private Int64? RightEdgeField; 

        /// <summary>
        /// TrackCurveScaleRect property
        /// </summary>
		[Description("Coordinates of rectangle representing the track.")]
        [RecurringElement]
		[XmlElement("TrackCurveScaleRect")]
        public List<DepthRegRectangle> TrackCurveScaleRect {
            get {
                return TrackCurveScaleRectField;
            } 
            set {
                TrackCurveScaleRectField = value;
                NotifyPropertyChanged("TrackCurveScaleRect");
            }
        }

         [XmlIgnore]
         public bool TrackCurveScaleRectSpecified
         {
            get {
             if(TrackCurveScaleRectField!=null)
                return TrackCurveScaleRectField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegRectangle> TrackCurveScaleRectField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// AssociatedCurve property
        /// </summary>
		[RecurringElement]
		[XmlElement("AssociatedCurve")]
        public List<DepthRegTrackCurve> AssociatedCurve {
            get {
                return AssociatedCurveField;
            } 
            set {
                AssociatedCurveField = value;
                NotifyPropertyChanged("AssociatedCurve");
            }
        }

         [XmlIgnore]
         public bool AssociatedCurveSpecified
         {
            get {
             if(AssociatedCurveField!=null)
                return AssociatedCurveField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegTrackCurve> AssociatedCurveField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for the track.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegParameter xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegParameter", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegParameter xsd type.")]
    public partial class DepthRegParameter : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DepthRegParameter class.
        /// </summary>
        public DepthRegParameter() {}

        /// <summary>
        /// Initializes a new instance of the DepthRegParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public DepthRegParameter(GenericMeasure value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Mnemonic property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A dictionary-controlled mnemonic.")]
		[XmlElement("Mnemonic")]
        public String Mnemonic {
            get {
                return MnemonicField;
            } 
            set {
                MnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private String MnemonicField; 

        /// <summary>
        /// Dictionary property
        /// </summary>
		[StringLength(64)]
        [Description("The name or identifier of the controlling dictionary.")]
		[XmlElement("Dictionary")]
        public String Dictionary {
            get {
                return DictionaryField;
            } 
            set {
                DictionaryField = value;
                NotifyPropertyChanged("Dictionary");
            }
        }

        private String DictionaryField; 

        /// <summary>
        /// TopIndex property
        /// </summary>
		[Description("The upper limit of a vertical region for which the parameter value is applicable.  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
		[XmlElement("TopIndex")]
        public GenericMeasure TopIndex {
            get {
                return TopIndexField;
            } 
            set {
                TopIndexField = value;
                NotifyPropertyChanged("TopIndex");
            }
        }

        private GenericMeasure TopIndexField; 

        /// <summary>
        /// BottomIndex property
        /// </summary>
		[Description("The lower limit of a vertical region for which the parameter value is applicable.  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
		[XmlElement("BottomIndex")]
        public GenericMeasure BottomIndex {
            get {
                return BottomIndexField;
            } 
            set {
                BottomIndexField = value;
                NotifyPropertyChanged("BottomIndex");
            }
        }

        private GenericMeasure BottomIndexField; 

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("The value assigned to the parameter.   The unit of measure should be consistent with the property implied by 'mnemonic' in 'dictionary'. If the value is unitless, then use a unit of 'Euc'.")]
        [ComponentElement]
		[XmlElement("Value")]
        public GenericMeasure Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private GenericMeasure ValueField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A description or definition for the mnemonic; required when ../dictionary is absent.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for the parameter.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegCalibrationPoint xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegCalibrationPoint", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegCalibrationPoint xsd type.")]
    public partial class DepthRegCalibrationPoint : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("The index (depth or time) for the calibration point.    The uom value must be consistent with the indexType.")]
        [ComponentElement]
		[XmlElement("Index")]
        public GenericMeasure Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private GenericMeasure IndexField; 

        /// <summary>
        /// Track property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the track containing the point.")]
		[XmlElement("Track")]
        public String Track {
            get {
                return TrackField;
            } 
            set {
                TrackField = value;
                NotifyPropertyChanged("Track");
            }
        }

        private String TrackField; 

        /// <summary>
        /// Role property
        /// </summary>
		[Required]
        [Description("The horizontal position on the grid which the calibration point represents.")]
		[XmlElement("Role")]
        public CalibrationPointRole? Role {
            get {
                return RoleField;
            } 
            set {
                RoleField = value;
                NotifyPropertyChanged("Role");
            }
        }

        private CalibrationPointRole? RoleField; 

        /// <summary>
        /// CurveName property
        /// </summary>
		[StringLength(64)]
        [Description("Facilitates searching for logs based on curve type.")]
		[XmlElement("CurveName")]
        public String CurveName {
            get {
                return CurveNameField;
            } 
            set {
                CurveNameField = value;
                NotifyPropertyChanged("CurveName");
            }
        }

        private String CurveNameField; 

        /// <summary>
        /// Fraction property
        /// </summary>
		[Description("An intermediate point from left edge to right edge (required when role is \"fraction\", not allowed otherwise); used to extrapolate the rectified position of a track boundary which has wandered off the edge of the image.")]
        [ComponentElement]
		[XmlElement("Fraction")]
        public DimensionlessMeasure Fraction {
            get {
                return FractionField;
            } 
            set {
                FractionField = value;
                NotifyPropertyChanged("Fraction");
            }
        }

        private DimensionlessMeasure FractionField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[Description("Comments about the log section.")]
        [RecurringElement]
		[XmlElement("Comment")]
        public List<String> Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         [XmlIgnore]
         public bool CommentSpecified
         {
            get {
             if(CommentField!=null)
                return CommentField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> CommentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Parameter property
        /// </summary>
		[RecurringElement]
		[XmlElement("Parameter")]
        public List<DepthRegParameter> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         [XmlIgnore]
         public bool ParameterSpecified
         {
            get {
             if(ParameterField!=null)
                return ParameterField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegParameter> ParameterField; 

        /// <summary>
        /// Point property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Point")]
        public DepthRegPoint Point {
            get {
                return PointField;
            } 
            set {
                PointField = value;
                NotifyPropertyChanged("Point");
            }
        }

        private DepthRegPoint PointField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for the calibration point.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegLogSection xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegLogSection", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegLogSection xsd type.")]
    public partial class DepthRegLogSection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// LogSectionSequenceNumber property
        /// </summary>
		[Required]
        [Description("Zero-based index in log sections, in order of appearance.")]
		[XmlElement("LogSectionSequenceNumber")]
        public Int64? LogSectionSequenceNumber {
            get {
                return LogSectionSequenceNumberField;
            } 
            set {
                LogSectionSequenceNumberField = value;
                NotifyPropertyChanged("LogSectionSequenceNumber");
            }
        }

        private Int64? LogSectionSequenceNumberField; 

        /// <summary>
        /// LogSectionType property
        /// </summary>
		[Description("Type of log section.")]
		[XmlElement("LogSectionType")]
        public LogSectionType? LogSectionType {
            get {
                return LogSectionTypeField;
            } 
            set {
                LogSectionTypeField = value;
             if(value!=null) 
                 this.LogSectionTypeSpecified = true;
                NotifyPropertyChanged("LogSectionType");
            }
        }

        private LogSectionType? LogSectionTypeField; 

        /// <summary>
        /// LogSectionTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean LogSectionTypeSpecified {
            get {
                return LogSectionTypeSpecifiedField;
            } 
            set {
                LogSectionTypeSpecifiedField = value;
                NotifyPropertyChanged("LogSectionTypeSpecified");
            }
        }

        private Boolean LogSectionTypeSpecifiedField; 

        /// <summary>
        /// LogSectionName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of log section;  used to distinguish log sections of same type.")]
		[XmlElement("LogSectionName")]
        public String LogSectionName {
            get {
                return LogSectionNameField;
            } 
            set {
                LogSectionNameField = value;
                NotifyPropertyChanged("LogSectionName");
            }
        }

        private String LogSectionNameField; 

        /// <summary>
        /// LogMatrix property
        /// </summary>
		[StringLength(64)]
        [Description("Log matrix assumed for porosity computations.")]
		[XmlElement("LogMatrix")]
        public String LogMatrix {
            get {
                return LogMatrixField;
            } 
            set {
                LogMatrixField = value;
                NotifyPropertyChanged("LogMatrix");
            }
        }

        private String LogMatrixField; 

        /// <summary>
        /// ScaleNumerator property
        /// </summary>
		[Description("The numerator of the index (depth or time) scale of the original log, e. g. \"5 in\".")]
        [ComponentElement]
		[XmlElement("ScaleNumerator")]
        public LengthMeasure ScaleNumerator {
            get {
                return ScaleNumeratorField;
            } 
            set {
                ScaleNumeratorField = value;
                NotifyPropertyChanged("ScaleNumerator");
            }
        }

        private LengthMeasure ScaleNumeratorField; 

        /// <summary>
        /// ScaleDenominator property
        /// </summary>
		[Description("The denominator of the index (depth or time) scale of the original log, e. g. \"100 ft\".  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
		[XmlElement("ScaleDenominator")]
        public GenericMeasure ScaleDenominator {
            get {
                return ScaleDenominatorField;
            } 
            set {
                ScaleDenominatorField = value;
                NotifyPropertyChanged("ScaleDenominator");
            }
        }

        private GenericMeasure ScaleDenominatorField; 

        /// <summary>
        /// IndexType property
        /// </summary>
		[Required]
        [Description("Primary index type. For date-time indexes, any specified index values should be defined as a time offset (e.g., in seconds) from the creationDate of the well log.")]
		[XmlElement("IndexType")]
        public LogIndexType? IndexType {
            get {
                return IndexTypeField;
            } 
            set {
                IndexTypeField = value;
                NotifyPropertyChanged("IndexType");
            }
        }

        private LogIndexType? IndexTypeField; 

        /// <summary>
        /// IndexUom property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Index uom of original log.")]
		[XmlElement("IndexUom")]
        public String IndexUom {
            get {
                return IndexUomField;
            } 
            set {
                IndexUomField = value;
                NotifyPropertyChanged("IndexUom");
            }
        }

        private String IndexUomField; 

        /// <summary>
        /// IndexReference property
        /// </summary>
		[Description("The origin for vertical coordinates on the original log. If this is not specified, information about the datum should be specified in comment.")]
		[XmlElement("IndexReference")]
        public ElevCodeEnum? IndexReference {
            get {
                return IndexReferenceField;
            } 
            set {
                IndexReferenceField = value;
             if(value!=null) 
                 this.IndexReferenceSpecified = true;
                NotifyPropertyChanged("IndexReference");
            }
        }

        private ElevCodeEnum? IndexReferenceField; 

        /// <summary>
        /// IndexReferenceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IndexReferenceSpecified {
            get {
                return IndexReferenceSpecifiedField;
            } 
            set {
                IndexReferenceSpecifiedField = value;
                NotifyPropertyChanged("IndexReferenceSpecified");
            }
        }

        private Boolean IndexReferenceSpecifiedField; 

        /// <summary>
        /// Log property
        /// </summary>
		[Description("The log ID being referred to by this section.")]
        [ComponentElement]
		[XmlElement("Log")]
        public DataObjectReference Log {
            get {
                return LogField;
            } 
            set {
                LogField = value;
                NotifyPropertyChanged("Log");
            }
        }

        private DataObjectReference LogField; 

        /// <summary>
        /// MinInterval property
        /// </summary>
		[Required]
        [Description("Minimum of range of index values.  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
		[XmlElement("MinInterval")]
        public GenericMeasure MinInterval {
            get {
                return MinIntervalField;
            } 
            set {
                MinIntervalField = value;
                NotifyPropertyChanged("MinInterval");
            }
        }

        private GenericMeasure MinIntervalField; 

        /// <summary>
        /// MaxInterval property
        /// </summary>
		[Required]
        [Description("Maximum of range of index values. '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
		[XmlElement("MaxInterval")]
        public GenericMeasure MaxInterval {
            get {
                return MaxIntervalField;
            } 
            set {
                MaxIntervalField = value;
                NotifyPropertyChanged("MaxInterval");
            }
        }

        private GenericMeasure MaxIntervalField; 

        /// <summary>
        /// VerticalLabel property
        /// </summary>
		[StringLength(2000)]
        [Description("Vertical log scale label (Ex. “1 IN/100 F”).")]
		[XmlElement("VerticalLabel")]
        public String VerticalLabel {
            get {
                return VerticalLabelField;
            } 
            set {
                VerticalLabelField = value;
                NotifyPropertyChanged("VerticalLabel");
            }
        }

        private String VerticalLabelField; 

        /// <summary>
        /// VerticalRatio property
        /// </summary>
		[StringLength(2000)]
        [Description("Second term of the vertical scale ratio (Ex. “240” for a 5 inch per 100 Foot log section).")]
		[XmlElement("VerticalRatio")]
        public String VerticalRatio {
            get {
                return VerticalRatioField;
            } 
            set {
                VerticalRatioField = value;
                NotifyPropertyChanged("VerticalRatio");
            }
        }

        private String VerticalRatioField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments about the calibration.")]
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// UpperCurveScaleRect property
        /// </summary>
		[Description("Boundaries of the Upper Curve Scale (or horizontal scale) section for this log section.")]
        [RecurringElement]
		[XmlElement("UpperCurveScaleRect")]
        public List<DepthRegRectangle> UpperCurveScaleRect {
            get {
                return UpperCurveScaleRectField;
            } 
            set {
                UpperCurveScaleRectField = value;
                NotifyPropertyChanged("UpperCurveScaleRect");
            }
        }

         [XmlIgnore]
         public bool UpperCurveScaleRectSpecified
         {
            get {
             if(UpperCurveScaleRectField!=null)
                return UpperCurveScaleRectField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegRectangle> UpperCurveScaleRectField; 

        /// <summary>
        /// CalibrationPoint property
        /// </summary>
		[Description("Generally this associates an X, Y value pair with a depth value from the log section.")]
        [RecurringElement]
		[XmlElement("CalibrationPoint")]
        public List<DepthRegCalibrationPoint> CalibrationPoint {
            get {
                return CalibrationPointField;
            } 
            set {
                CalibrationPointField = value;
                NotifyPropertyChanged("CalibrationPoint");
            }
        }

         [XmlIgnore]
         public bool CalibrationPointSpecified
         {
            get {
             if(CalibrationPointField!=null)
                return CalibrationPointField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegCalibrationPoint> CalibrationPointField; 

        /// <summary>
        /// WhiteSpace property
        /// </summary>
		[Description("Defines blank space occurring within a log section in an image.")]
        [RecurringElement]
		[XmlElement("WhiteSpace")]
        public List<DepthRegRectangle> WhiteSpace {
            get {
                return WhiteSpaceField;
            } 
            set {
                WhiteSpaceField = value;
                NotifyPropertyChanged("WhiteSpace");
            }
        }

         [XmlIgnore]
         public bool WhiteSpaceSpecified
         {
            get {
             if(WhiteSpaceField!=null)
                return WhiteSpaceField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegRectangle> WhiteSpaceField; 

        /// <summary>
        /// LowerCurveScaleRect property
        /// </summary>
		[Description("Boundaries of the Lower Curve Scale (or horizontal scale) section for this log section.")]
        [RecurringElement]
		[XmlElement("LowerCurveScaleRect")]
        public List<DepthRegRectangle> LowerCurveScaleRect {
            get {
                return LowerCurveScaleRectField;
            } 
            set {
                LowerCurveScaleRectField = value;
                NotifyPropertyChanged("LowerCurveScaleRect");
            }
        }

         [XmlIgnore]
         public bool LowerCurveScaleRectSpecified
         {
            get {
             if(LowerCurveScaleRectField!=null)
                return LowerCurveScaleRectField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegRectangle> LowerCurveScaleRectField; 

        /// <summary>
        /// LogSectionRect property
        /// </summary>
		[Description("The bounding rectangle of this log section.")]
        [RecurringElement]
		[XmlElement("LogSectionRect")]
        public List<DepthRegRectangle> LogSectionRect {
            get {
                return LogSectionRectField;
            } 
            set {
                LogSectionRectField = value;
                NotifyPropertyChanged("LogSectionRect");
            }
        }

         [XmlIgnore]
         public bool LogSectionRectSpecified
         {
            get {
             if(LogSectionRectField!=null)
                return LogSectionRectField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegRectangle> LogSectionRectField; 

        /// <summary>
        /// Parameter property
        /// </summary>
		[RecurringElement]
		[XmlElement("Parameter")]
        public List<DepthRegParameter> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         [XmlIgnore]
         public bool ParameterSpecified
         {
            get {
             if(ParameterField!=null)
                return ParameterField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegParameter> ParameterField; 

        /// <summary>
        /// Track property
        /// </summary>
		[RecurringElement]
		[XmlElement("Track")]
        public List<DepthRegTrack> Track {
            get {
                return TrackField;
            } 
            set {
                TrackField = value;
                NotifyPropertyChanged("Track");
            }
        }

         [XmlIgnore]
         public bool TrackSpecified
         {
            get {
             if(TrackField!=null)
                return TrackField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegTrack> TrackField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for the log section.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegLogRect xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegLogRect", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegLogRect xsd type.")]
    public partial class DepthRegLogRect : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Type property
        /// </summary>
		[Description("A region of an image containing a log section image.")]
		[XmlElement("Type")]
        public LogRectangleType? Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
             if(value!=null) 
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private LogRectangleType? TypeField; 

        /// <summary>
        /// TypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeSpecified {
            get {
                return TypeSpecifiedField;
            } 
            set {
                TypeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private Boolean TypeSpecifiedField; 

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of a rectangular section.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Position property
        /// </summary>
		[ComponentElement]
		[XmlElement("Position")]
        public DepthRegRectangle Position {
            get {
                return PositionField;
            } 
            set {
                PositionField = value;
                NotifyPropertyChanged("Position");
            }
        }

        private DepthRegRectangle PositionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for the for a log section.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DigitalStorageMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DigitalStorageMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DigitalStorageMeasure xsd type.")]
    public partial class DigitalStorageMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DigitalStorageMeasure class.
        /// </summary>
        public DigitalStorageMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DigitalStorageMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DigitalStorageMeasure(Double value, DigitalStorageUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public DigitalStorageUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DigitalStorageUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MemberObject xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MemberObject", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MemberObject xsd type.")]
    public partial class MemberObject : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// IndexType property
        /// </summary>
		[Description("For a log object, this specifies the kind of the index curve for the log. This is only relevant for a systematically growing object.")]
		[XmlElement("IndexType")]
        public LogIndexType? IndexType {
            get {
                return IndexTypeField;
            } 
            set {
                IndexTypeField = value;
             if(value!=null) 
                 this.IndexTypeSpecified = true;
                NotifyPropertyChanged("IndexType");
            }
        }

        private LogIndexType? IndexTypeField; 

        /// <summary>
        /// IndexTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IndexTypeSpecified {
            get {
                return IndexTypeSpecifiedField;
            } 
            set {
                IndexTypeSpecifiedField = value;
                NotifyPropertyChanged("IndexTypeSpecified");
            }
        }

        private Boolean IndexTypeSpecifiedField; 

        /// <summary>
        /// RangeMin property
        /// </summary>
		[Description("The minimum growing-object index value that applies to this group. The significance of this range is defined by the groupType.")]
        [ComponentElement]
		[XmlElement("RangeMin")]
        public GenericMeasure RangeMin {
            get {
                return RangeMinField;
            } 
            set {
                RangeMinField = value;
                NotifyPropertyChanged("RangeMin");
            }
        }

        private GenericMeasure RangeMinField; 

        /// <summary>
        /// RangeMax property
        /// </summary>
		[Description("The maximum growing-object index value that applies to this group. The significance of this range is defined by the groupType.")]
        [ComponentElement]
		[XmlElement("RangeMax")]
        public GenericMeasure RangeMax {
            get {
                return RangeMaxField;
            } 
            set {
                RangeMaxField = value;
                NotifyPropertyChanged("RangeMax");
            }
        }

        private GenericMeasure RangeMaxField; 

        /// <summary>
        /// RangeDateTimeMin property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The minimum log date-time index value that applies to this group. The significance of this range is defined by the groupType.")]
		[XmlElement("RangeDateTimeMin")]
        public String RangeDateTimeMin {
            get {
                return RangeDateTimeMinField;
            } 
            set {
                RangeDateTimeMinField = value;
                NotifyPropertyChanged("RangeDateTimeMin");
            }
        }

        private String RangeDateTimeMinField; 

        /// <summary>
        /// RangeDateTimeMax property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The maximum log date-time index value that applies to this group. The significance of this range is defined by the groupType.")]
		[XmlElement("RangeDateTimeMax")]
        public String RangeDateTimeMax {
            get {
                return RangeDateTimeMaxField;
            } 
            set {
                RangeDateTimeMaxField = value;
                NotifyPropertyChanged("RangeDateTimeMax");
            }
        }

        private String RangeDateTimeMaxField; 

        /// <summary>
        /// MnemonicList property
        /// </summary>
		[Description("A comma delimited list of log curve mnemonics. Each mnemonic should only occur once in the list. If not specified then the group applies to all curves in the log.")]
		[XmlElement("MnemonicList")]
        public String MnemonicList {
            get {
                return MnemonicListField;
            } 
            set {
                MnemonicListField = value;
                NotifyPropertyChanged("MnemonicList");
            }
        }

        private String MnemonicListField; 

        /// <summary>
        /// ReferenceDepth property
        /// </summary>
		[Description("A measured depth related to this group.  This does not necessarily represent an actual depth within a growing-object. The significance of this depth is defined by the groupType.")]
        [ComponentElement]
		[XmlElement("ReferenceDepth")]
        public MeasuredDepthCoord ReferenceDepth {
            get {
                return ReferenceDepthField;
            } 
            set {
                ReferenceDepthField = value;
                NotifyPropertyChanged("ReferenceDepth");
            }
        }

        private MeasuredDepthCoord ReferenceDepthField; 

        /// <summary>
        /// ReferenceDateTime property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("A date and time related to this group.  This does not necessarily represent an actual index within a growing-object. The significance of this time is defined by the groupType.")]
		[XmlElement("ReferenceDateTime")]
        public String ReferenceDateTime {
            get {
                return ReferenceDateTimeField;
            } 
            set {
                ReferenceDateTimeField = value;
                NotifyPropertyChanged("ReferenceDateTime");
            }
        }

        private String ReferenceDateTimeField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Sequence3 property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Sequence3")]
        public ObjectSequence Sequence3 {
            get {
                return Sequence3Field;
            } 
            set {
                Sequence3Field = value;
                NotifyPropertyChanged("Sequence3");
            }
        }

        private ObjectSequence Sequence3Field; 

        /// <summary>
        /// ObjectReference property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("ObjectReference")]
        public DataObjectReference ObjectReference {
            get {
                return ObjectReferenceField;
            } 
            set {
                ObjectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private DataObjectReference ObjectReferenceField; 

        /// <summary>
        /// Sequence1 property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Sequence1")]
        public ObjectSequence Sequence1 {
            get {
                return Sequence1Field;
            } 
            set {
                Sequence1Field = value;
                NotifyPropertyChanged("Sequence1");
            }
        }

        private ObjectSequence Sequence1Field; 

        /// <summary>
        /// Param property
        /// </summary>
		[RecurringElement]
		[XmlElement("Param")]
        public List<IndexedObject> Param {
            get {
                return ParamField;
            } 
            set {
                ParamField = value;
                NotifyPropertyChanged("Param");
            }
        }

         [XmlIgnore]
         public bool ParamSpecified
         {
            get {
             if(ParamField!=null)
                return ParamField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IndexedObject> ParamField; 

        /// <summary>
        /// Sequence2 property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Sequence2")]
        public ObjectSequence Sequence2 {
            get {
                return Sequence2Field;
            } 
            set {
                Sequence2Field = value;
                NotifyPropertyChanged("Sequence2");
            }
        }

        private ObjectSequence Sequence2Field; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of MemberObject")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ObjectSequence xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ObjectSequence", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ObjectSequence xsd type.")]
    public partial class ObjectSequence : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// description property
        /// </summary>
		[StringLength(2000)]
        [Description("The description of this object sequence.")]
        [XmlAttribute("description")]
		
        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IndexedObject xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IndexedObject", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IndexedObject xsd type.")]
    public partial class IndexedObject : Object, IDataObject, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IndexedObject class.
        /// </summary>
        public IndexedObject() {}

        /// <summary>
        /// Initializes a new instance of the IndexedObject class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IndexedObject(String value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// index property
        /// </summary>
		[Description("Index used to qualify this indexed object")]
        [XmlAttribute("index")]
		
        public Int32 Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
             if(value!=null) 
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private Int32 indexField; 

        /// <summary>
        /// indexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IndexSpecified {
            get {
                return indexSpecifiedField;
            } 
            set {
                indexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private Boolean indexSpecifiedField; 

		/// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("Name of this IndexedObject")]
        [XmlAttribute("name")]
		
        public String Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String nameField; 

		/// <summary>
        /// uom property
        /// </summary>
		[StringLength(32)]
        [Description("Unit of measure used by this Indexed Object")]
        [XmlAttribute("uom")]
		
        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 

		/// <summary>
        /// description property
        /// </summary>
		[StringLength(2000)]
        [Description("Description of this IndexedObject")]
        [XmlAttribute("description")]
		
        public String Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String descriptionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IndexedObject")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(40)]
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Participant xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Participant", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Participant xsd type.")]
    public partial class Participant : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ExtNameValues property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtNameValues")]
        public List<ExtensionNameValue> ExtNameValues {
            get {
                return ExtNameValuesField;
            } 
            set {
                ExtNameValuesField = value;
                NotifyPropertyChanged("ExtNameValues");
            }
        }

         [XmlIgnore]
         public bool ExtNameValuesSpecified
         {
            get {
             if(ExtNameValuesField!=null)
                return ExtNameValuesField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtNameValuesField; 

        /// <summary>
        /// Participant1 property
        /// </summary>
		[RecurringElement]
		[XmlElement("Participant")]
        public List<MemberObject> Participant1 {
            get {
                return Participant1Field;
            } 
            set {
                Participant1Field = value;
                NotifyPropertyChanged("Participant1");
            }
        }

         [XmlIgnore]
         public bool Participant1Specified
         {
            get {
             if(Participant1Field!=null)
                return Participant1Field.Count>0?true:false;
             else return false;
            } 
         }
        private List<MemberObject> Participant1Field; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DownholeStringReference xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DownholeStringReference", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DownholeStringReference xsd type.")]
    public partial class DownholeStringReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// StringEquipmentReferenceId property
        /// </summary>
		[Description("Reference to string equipment")]
        [RecurringElement]
		[XmlElement("StringEquipmentReferenceId")]
        public List<String> StringEquipmentReferenceId {
            get {
                return StringEquipmentReferenceIdField;
            } 
            set {
                StringEquipmentReferenceIdField = value;
                NotifyPropertyChanged("StringEquipmentReferenceId");
            }
        }

         [XmlIgnore]
         public bool StringEquipmentReferenceIdSpecified
         {
            get {
             if(StringEquipmentReferenceIdField!=null)
                return StringEquipmentReferenceIdField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> StringEquipmentReferenceIdField; 

		/// <summary>
        /// downholeStringReferenceId property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to downhole string")]
        [XmlAttribute("downholeStringReferenceId")]
		
        public String DownholeStringReferenceId {
            get {
                return downholeStringReferenceIdField;
            } 
            set {
                downholeStringReferenceIdField = value;
                NotifyPropertyChanged("DownholeStringReferenceId");
            }
        }

        private String downholeStringReferenceIdField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BoreholeStringReference xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BoreholeStringReference", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BoreholeStringReference xsd type.")]
    public partial class BoreholeStringReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// StringEquipmentReferenceId property
        /// </summary>
		[Description("Reference to string equipment")]
        [RecurringElement]
		[XmlElement("StringEquipmentReferenceId")]
        public List<String> StringEquipmentReferenceId {
            get {
                return StringEquipmentReferenceIdField;
            } 
            set {
                StringEquipmentReferenceIdField = value;
                NotifyPropertyChanged("StringEquipmentReferenceId");
            }
        }

         [XmlIgnore]
         public bool StringEquipmentReferenceIdSpecified
         {
            get {
             if(StringEquipmentReferenceIdField!=null)
                return StringEquipmentReferenceIdField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> StringEquipmentReferenceIdField; 

		/// <summary>
        /// boreholeStringReferenceId property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to borehole String")]
        [XmlAttribute("boreholeStringReferenceId")]
		
        public String BoreholeStringReferenceId {
            get {
                return boreholeStringReferenceIdField;
            } 
            set {
                boreholeStringReferenceIdField = value;
                NotifyPropertyChanged("BoreholeStringReferenceId");
            }
        }

        private String boreholeStringReferenceIdField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DownholeComponentReference xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DownholeComponentReference", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DownholeComponentReference xsd type.")]
    public partial class DownholeComponentReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// StringEquipmentReferenceId property
        /// </summary>
		[Description("Reference to string equipment")]
        [RecurringElement]
		[XmlElement("StringEquipmentReferenceId")]
        public List<String> StringEquipmentReferenceId {
            get {
                return StringEquipmentReferenceIdField;
            } 
            set {
                StringEquipmentReferenceIdField = value;
                NotifyPropertyChanged("StringEquipmentReferenceId");
            }
        }

         [XmlIgnore]
         public bool StringEquipmentReferenceIdSpecified
         {
            get {
             if(StringEquipmentReferenceIdField!=null)
                return StringEquipmentReferenceIdField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> StringEquipmentReferenceIdField; 

        /// <summary>
        /// PerforationSetReferenceId property
        /// </summary>
		[Description("Reference to perforation set")]
        [RecurringElement]
		[XmlElement("PerforationSetReferenceId")]
        public List<String> PerforationSetReferenceId {
            get {
                return PerforationSetReferenceIdField;
            } 
            set {
                PerforationSetReferenceIdField = value;
                NotifyPropertyChanged("PerforationSetReferenceId");
            }
        }

         [XmlIgnore]
         public bool PerforationSetReferenceIdSpecified
         {
            get {
             if(PerforationSetReferenceIdField!=null)
                return PerforationSetReferenceIdField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> PerforationSetReferenceIdField; 

        /// <summary>
        /// BoreholeStringReference property
        /// </summary>
		[RecurringElement]
		[XmlElement("BoreholeStringReference")]
        public List<BoreholeStringReference> BoreholeStringReference {
            get {
                return BoreholeStringReferenceField;
            } 
            set {
                BoreholeStringReferenceField = value;
                NotifyPropertyChanged("BoreholeStringReference");
            }
        }

         [XmlIgnore]
         public bool BoreholeStringReferenceSpecified
         {
            get {
             if(BoreholeStringReferenceField!=null)
                return BoreholeStringReferenceField.Count>0?true:false;
             else return false;
            } 
         }
        private List<BoreholeStringReference> BoreholeStringReferenceField; 

        /// <summary>
        /// DownholeStringsReference property
        /// </summary>
		[RecurringElement]
		[XmlElement("DownholeStringsReference")]
        public List<DownholeStringReference> DownholeStringsReference {
            get {
                return DownholeStringsReferenceField;
            } 
            set {
                DownholeStringsReferenceField = value;
                NotifyPropertyChanged("DownholeStringsReference");
            }
        }

         [XmlIgnore]
         public bool DownholeStringsReferenceSpecified
         {
            get {
             if(DownholeStringsReferenceField!=null)
                return DownholeStringsReferenceField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DownholeStringReference> DownholeStringsReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Perforating xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Perforating", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Perforating xsd type.")]
    public partial class Perforating : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StageNumber property
        /// </summary>
		
		[XmlElement("StageNumber")]
        public Int32? StageNumber {
            get {
                return StageNumberField;
            } 
            set {
                StageNumberField = value;
             if(value!=null) 
                 this.StageNumberSpecified = true;
                NotifyPropertyChanged("StageNumber");
            }
        }

        private Int32? StageNumberField; 

        /// <summary>
        /// StageNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StageNumberSpecified {
            get {
                return StageNumberSpecifiedField;
            } 
            set {
                StageNumberSpecifiedField = value;
                NotifyPropertyChanged("StageNumberSpecified");
            }
        }

        private Boolean StageNumberSpecifiedField; 

        /// <summary>
        /// BottomPackerSet property
        /// </summary>
		[ComponentElement]
		[XmlElement("BottomPackerSet")]
        public MeasuredDepthCoord BottomPackerSet {
            get {
                return BottomPackerSetField;
            } 
            set {
                BottomPackerSetField = value;
                NotifyPropertyChanged("BottomPackerSet");
            }
        }

        private MeasuredDepthCoord BottomPackerSetField; 

        /// <summary>
        /// PerforationFluidType property
        /// </summary>
		
		[XmlElement("PerforationFluidType")]
        public String PerforationFluidType {
            get {
                return PerforationFluidTypeField;
            } 
            set {
                PerforationFluidTypeField = value;
                NotifyPropertyChanged("PerforationFluidType");
            }
        }

        private String PerforationFluidTypeField; 

        /// <summary>
        /// HydrostaticPressure property
        /// </summary>
		[ComponentElement]
		[XmlElement("HydrostaticPressure")]
        public PressureMeasure HydrostaticPressure {
            get {
                return HydrostaticPressureField;
            } 
            set {
                HydrostaticPressureField = value;
                NotifyPropertyChanged("HydrostaticPressure");
            }
        }

        private PressureMeasure HydrostaticPressureField; 

        /// <summary>
        /// SurfacePressure property
        /// </summary>
		[ComponentElement]
		[XmlElement("SurfacePressure")]
        public PressureMeasure SurfacePressure {
            get {
                return SurfacePressureField;
            } 
            set {
                SurfacePressureField = value;
                NotifyPropertyChanged("SurfacePressure");
            }
        }

        private PressureMeasure SurfacePressureField; 

        /// <summary>
        /// ReservoirPressure property
        /// </summary>
		[ComponentElement]
		[XmlElement("ReservoirPressure")]
        public PressureMeasure ReservoirPressure {
            get {
                return ReservoirPressureField;
            } 
            set {
                ReservoirPressureField = value;
                NotifyPropertyChanged("ReservoirPressure");
            }
        }

        private PressureMeasure ReservoirPressureField; 

        /// <summary>
        /// FluidDensity property
        /// </summary>
		[ComponentElement]
		[XmlElement("FluidDensity")]
        public MassPerMassMeasure FluidDensity {
            get {
                return FluidDensityField;
            } 
            set {
                FluidDensityField = value;
                NotifyPropertyChanged("FluidDensity");
            }
        }

        private MassPerMassMeasure FluidDensityField; 

        /// <summary>
        /// FluidLevel property
        /// </summary>
		[ComponentElement]
		[XmlElement("FluidLevel")]
        public MeasuredDepthCoord FluidLevel {
            get {
                return FluidLevelField;
            } 
            set {
                FluidLevelField = value;
                NotifyPropertyChanged("FluidLevel");
            }
        }

        private MeasuredDepthCoord FluidLevelField; 

        /// <summary>
        /// ConveyanceMethod property
        /// </summary>
		
		[XmlElement("ConveyanceMethod")]
        public String ConveyanceMethod {
            get {
                return ConveyanceMethodField;
            } 
            set {
                ConveyanceMethodField = value;
                NotifyPropertyChanged("ConveyanceMethod");
            }
        }

        private String ConveyanceMethodField; 

        /// <summary>
        /// ShotsPlanned property
        /// </summary>
		
		[XmlElement("ShotsPlanned")]
        public Int32? ShotsPlanned {
            get {
                return ShotsPlannedField;
            } 
            set {
                ShotsPlannedField = value;
             if(value!=null) 
                 this.ShotsPlannedSpecified = true;
                NotifyPropertyChanged("ShotsPlanned");
            }
        }

        private Int32? ShotsPlannedField; 

        /// <summary>
        /// ShotsPlannedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ShotsPlannedSpecified {
            get {
                return ShotsPlannedSpecifiedField;
            } 
            set {
                ShotsPlannedSpecifiedField = value;
                NotifyPropertyChanged("ShotsPlannedSpecified");
            }
        }

        private Boolean ShotsPlannedSpecifiedField; 

        /// <summary>
        /// ShotsDensity property
        /// </summary>
		[ComponentElement]
		[XmlElement("ShotsDensity")]
        public ReciprocalLengthMeasure ShotsDensity {
            get {
                return ShotsDensityField;
            } 
            set {
                ShotsDensityField = value;
                NotifyPropertyChanged("ShotsDensity");
            }
        }

        private ReciprocalLengthMeasure ShotsDensityField; 

        /// <summary>
        /// ShotsMisfired property
        /// </summary>
		
		[XmlElement("ShotsMisfired")]
        public Int32? ShotsMisfired {
            get {
                return ShotsMisfiredField;
            } 
            set {
                ShotsMisfiredField = value;
             if(value!=null) 
                 this.ShotsMisfiredSpecified = true;
                NotifyPropertyChanged("ShotsMisfired");
            }
        }

        private Int32? ShotsMisfiredField; 

        /// <summary>
        /// ShotsMisfiredSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ShotsMisfiredSpecified {
            get {
                return ShotsMisfiredSpecifiedField;
            } 
            set {
                ShotsMisfiredSpecifiedField = value;
                NotifyPropertyChanged("ShotsMisfiredSpecified");
            }
        }

        private Boolean ShotsMisfiredSpecifiedField; 

        /// <summary>
        /// Orientation property
        /// </summary>
		
		[XmlElement("Orientation")]
        public String Orientation {
            get {
                return OrientationField;
            } 
            set {
                OrientationField = value;
                NotifyPropertyChanged("Orientation");
            }
        }

        private String OrientationField; 

        /// <summary>
        /// OrientationMethod property
        /// </summary>
		
		[XmlElement("OrientationMethod")]
        public String OrientationMethod {
            get {
                return OrientationMethodField;
            } 
            set {
                OrientationMethodField = value;
                NotifyPropertyChanged("OrientationMethod");
            }
        }

        private String OrientationMethodField; 

        /// <summary>
        /// PerforationCompany property
        /// </summary>
		
		[XmlElement("PerforationCompany")]
        public String PerforationCompany {
            get {
                return PerforationCompanyField;
            } 
            set {
                PerforationCompanyField = value;
                NotifyPropertyChanged("PerforationCompany");
            }
        }

        private String PerforationCompanyField; 

        /// <summary>
        /// CarrierManufacturer property
        /// </summary>
		
		[XmlElement("CarrierManufacturer")]
        public String CarrierManufacturer {
            get {
                return CarrierManufacturerField;
            } 
            set {
                CarrierManufacturerField = value;
                NotifyPropertyChanged("CarrierManufacturer");
            }
        }

        private String CarrierManufacturerField; 

        /// <summary>
        /// CarrierSize property
        /// </summary>
		[ComponentElement]
		[XmlElement("CarrierSize")]
        public LengthMeasure CarrierSize {
            get {
                return CarrierSizeField;
            } 
            set {
                CarrierSizeField = value;
                NotifyPropertyChanged("CarrierSize");
            }
        }

        private LengthMeasure CarrierSizeField; 

        /// <summary>
        /// CarrierDescription property
        /// </summary>
		
		[XmlElement("CarrierDescription")]
        public String CarrierDescription {
            get {
                return CarrierDescriptionField;
            } 
            set {
                CarrierDescriptionField = value;
                NotifyPropertyChanged("CarrierDescription");
            }
        }

        private String CarrierDescriptionField; 

        /// <summary>
        /// ChargeManufacturer property
        /// </summary>
		
		[XmlElement("ChargeManufacturer")]
        public String ChargeManufacturer {
            get {
                return ChargeManufacturerField;
            } 
            set {
                ChargeManufacturerField = value;
                NotifyPropertyChanged("ChargeManufacturer");
            }
        }

        private String ChargeManufacturerField; 

        /// <summary>
        /// ChargeSize property
        /// </summary>
		[ComponentElement]
		[XmlElement("ChargeSize")]
        public LengthMeasure ChargeSize {
            get {
                return ChargeSizeField;
            } 
            set {
                ChargeSizeField = value;
                NotifyPropertyChanged("ChargeSize");
            }
        }

        private LengthMeasure ChargeSizeField; 

        /// <summary>
        /// ChargeWeight property
        /// </summary>
		[ComponentElement]
		[XmlElement("ChargeWeight")]
        public MassMeasure ChargeWeight {
            get {
                return ChargeWeightField;
            } 
            set {
                ChargeWeightField = value;
                NotifyPropertyChanged("ChargeWeight");
            }
        }

        private MassMeasure ChargeWeightField; 

        /// <summary>
        /// ChargeType property
        /// </summary>
		
		[XmlElement("ChargeType")]
        public String ChargeType {
            get {
                return ChargeTypeField;
            } 
            set {
                ChargeTypeField = value;
                NotifyPropertyChanged("ChargeType");
            }
        }

        private String ChargeTypeField; 

        /// <summary>
        /// RefLog property
        /// </summary>
		
		[XmlElement("RefLog")]
        public String RefLog {
            get {
                return RefLogField;
            } 
            set {
                RefLogField = value;
                NotifyPropertyChanged("RefLog");
            }
        }

        private String RefLogField; 

        /// <summary>
        /// GunCentralized property
        /// </summary>
		
		[XmlElement("GunCentralized")]
        public String GunCentralized {
            get {
                return GunCentralizedField;
            } 
            set {
                GunCentralizedField = value;
                NotifyPropertyChanged("GunCentralized");
            }
        }

        private String GunCentralizedField; 

        /// <summary>
        /// GunSize property
        /// </summary>
		[ComponentElement]
		[XmlElement("GunSize")]
        public LengthMeasure GunSize {
            get {
                return GunSizeField;
            } 
            set {
                GunSizeField = value;
                NotifyPropertyChanged("GunSize");
            }
        }

        private LengthMeasure GunSizeField; 

        /// <summary>
        /// GunDesciption property
        /// </summary>
		
		[XmlElement("GunDesciption")]
        public String GunDesciption {
            get {
                return GunDesciptionField;
            } 
            set {
                GunDesciptionField = value;
                NotifyPropertyChanged("GunDesciption");
            }
        }

        private String GunDesciptionField; 

        /// <summary>
        /// GunLeftInHole property
        /// </summary>
		
		[XmlElement("GunLeftInHole")]
        public Boolean? GunLeftInHole {
            get {
                return GunLeftInHoleField;
            } 
            set {
                GunLeftInHoleField = value;
             if(value!=null) 
                 this.GunLeftInHoleSpecified = true;
                NotifyPropertyChanged("GunLeftInHole");
            }
        }

        private Boolean? GunLeftInHoleField; 

        /// <summary>
        /// GunLeftInHoleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean GunLeftInHoleSpecified {
            get {
                return GunLeftInHoleSpecifiedField;
            } 
            set {
                GunLeftInHoleSpecifiedField = value;
                NotifyPropertyChanged("GunLeftInHoleSpecified");
            }
        }

        private Boolean GunLeftInHoleSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReciprocalLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReciprocalLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ReciprocalLengthMeasure xsd type.")]
    public partial class ReciprocalLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ReciprocalLengthMeasure class.
        /// </summary>
        public ReciprocalLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ReciprocalLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ReciprocalLengthMeasure(Double value, ReciprocalLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ReciprocalLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ReciprocalLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractEventExtension xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DownholeExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidReportExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PerforatingExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WaitingOnExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PressureTestExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JobExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AcidizefracExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BHPExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LostCirculationExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DirectionalSurveyExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CleanFillExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementExtension))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractEventExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractEventExtension xsd type.")]
    public abstract partial class AbstractEventExtension : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DownholeExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DownholeExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DownholeExtension xsd type.")]
    public partial class DownholeExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// DownholeComponentRefID property
        /// </summary>
		
		[XmlElement("DownholeComponentRefID")]
        public String DownholeComponentRefID {
            get {
                return DownholeComponentRefIDField;
            } 
            set {
                DownholeComponentRefIDField = value;
                NotifyPropertyChanged("DownholeComponentRefID");
            }
        }

        private String DownholeComponentRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CustomData xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CustomData", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the CustomData xsd type.")]
    public partial class CustomData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Any property
        /// </summary>
		[RecurringElement]
		[XmlElement("Any")]
        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

         [XmlIgnore]
         public bool AnySpecified
         {
            get {
             if(AnyField!=null)
                return AnyField.Count>0?true:false;
             else return false;
            } 
         }
        private List<XmlElement> AnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidReportExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidReportExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the FluidReportExtension xsd type.")]
    public partial class FluidReportExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// FluidReportRefID property
        /// </summary>
		
		[XmlElement("FluidReportRefID")]
        public String FluidReportRefID {
            get {
                return FluidReportRefIDField;
            } 
            set {
                FluidReportRefIDField = value;
                NotifyPropertyChanged("FluidReportRefID");
            }
        }

        private String FluidReportRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerforatingExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerforatingExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerforatingExtension xsd type.")]
    public partial class PerforatingExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// PerforationSetRefID property
        /// </summary>
		
		[XmlElement("PerforationSetRefID")]
        public String PerforationSetRefID {
            get {
                return PerforationSetRefIDField;
            } 
            set {
                PerforationSetRefIDField = value;
                NotifyPropertyChanged("PerforationSetRefID");
            }
        }

        private String PerforationSetRefIDField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

        /// <summary>
        /// Perforating property
        /// </summary>
		[RecurringElement]
		[XmlElement("Perforating")]
        public List<Perforating> Perforating {
            get {
                return PerforatingField;
            } 
            set {
                PerforatingField = value;
                NotifyPropertyChanged("Perforating");
            }
        }

         [XmlIgnore]
         public bool PerforatingSpecified
         {
            get {
             if(PerforatingField!=null)
                return PerforatingField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Perforating> PerforatingField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WaitingOnExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WaitingOnExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the WaitingOnExtension xsd type.")]
    public partial class WaitingOnExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// SubCategory property
        /// </summary>
		
		[XmlElement("SubCategory")]
        public String SubCategory {
            get {
                return SubCategoryField;
            } 
            set {
                SubCategoryField = value;
                NotifyPropertyChanged("SubCategory");
            }
        }

        private String SubCategoryField; 

        /// <summary>
        /// ChargeTypeCode property
        /// </summary>
		
		[XmlElement("ChargeTypeCode")]
        public String ChargeTypeCode {
            get {
                return ChargeTypeCodeField;
            } 
            set {
                ChargeTypeCodeField = value;
                NotifyPropertyChanged("ChargeTypeCode");
            }
        }

        private String ChargeTypeCodeField; 

        /// <summary>
        /// BusinessOrgWaitingOn property
        /// </summary>
		
		[XmlElement("BusinessOrgWaitingOn")]
        public String BusinessOrgWaitingOn {
            get {
                return BusinessOrgWaitingOnField;
            } 
            set {
                BusinessOrgWaitingOnField = value;
                NotifyPropertyChanged("BusinessOrgWaitingOn");
            }
        }

        private String BusinessOrgWaitingOnField; 

        /// <summary>
        /// IsNoChargeToProducer property
        /// </summary>
		
		[XmlElement("IsNoChargeToProducer")]
        public Boolean? IsNoChargeToProducer {
            get {
                return IsNoChargeToProducerField;
            } 
            set {
                IsNoChargeToProducerField = value;
             if(value!=null) 
                 this.IsNoChargeToProducerSpecified = true;
                NotifyPropertyChanged("IsNoChargeToProducer");
            }
        }

        private Boolean? IsNoChargeToProducerField; 

        /// <summary>
        /// IsNoChargeToProducerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsNoChargeToProducerSpecified {
            get {
                return IsNoChargeToProducerSpecifiedField;
            } 
            set {
                IsNoChargeToProducerSpecifiedField = value;
                NotifyPropertyChanged("IsNoChargeToProducerSpecified");
            }
        }

        private Boolean IsNoChargeToProducerSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PressureTestExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PressureTestExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PressureTestExtension xsd type.")]
    public partial class PressureTestExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// DiaOrificeSize property
        /// </summary>
		[ComponentElement]
		[XmlElement("DiaOrificeSize")]
        public LengthMeasure DiaOrificeSize {
            get {
                return DiaOrificeSizeField;
            } 
            set {
                DiaOrificeSizeField = value;
                NotifyPropertyChanged("DiaOrificeSize");
            }
        }

        private LengthMeasure DiaOrificeSizeField; 

        /// <summary>
        /// DTimeNextTestDate property
        /// </summary>
		
		[XmlElement("DTimeNextTestDate")]
        public String DTimeNextTestDate {
            get {
                return DTimeNextTestDateField;
            } 
            set {
                DTimeNextTestDateField = value;
                NotifyPropertyChanged("DTimeNextTestDate");
            }
        }

        private String DTimeNextTestDateField; 

        /// <summary>
        /// FlowrateRateBled property
        /// </summary>
		[ComponentElement]
		[XmlElement("FlowrateRateBled")]
        public VolumePerTimeMeasure FlowrateRateBled {
            get {
                return FlowrateRateBledField;
            } 
            set {
                FlowrateRateBledField = value;
                NotifyPropertyChanged("FlowrateRateBled");
            }
        }

        private VolumePerTimeMeasure FlowrateRateBledField; 

        /// <summary>
        /// IdentifierJob property
        /// </summary>
		
		[XmlElement("IdentifierJob")]
        public String IdentifierJob {
            get {
                return IdentifierJobField;
            } 
            set {
                IdentifierJobField = value;
                NotifyPropertyChanged("IdentifierJob");
            }
        }

        private String IdentifierJobField; 

        /// <summary>
        /// IsSuccess property
        /// </summary>
		
		[XmlElement("IsSuccess")]
        public Boolean? IsSuccess {
            get {
                return IsSuccessField;
            } 
            set {
                IsSuccessField = value;
             if(value!=null) 
                 this.IsSuccessSpecified = true;
                NotifyPropertyChanged("IsSuccess");
            }
        }

        private Boolean? IsSuccessField; 

        /// <summary>
        /// IsSuccessSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsSuccessSpecified {
            get {
                return IsSuccessSpecifiedField;
            } 
            set {
                IsSuccessSpecifiedField = value;
                NotifyPropertyChanged("IsSuccessSpecified");
            }
        }

        private Boolean IsSuccessSpecifiedField; 

        /// <summary>
        /// MaxPressureDuration property
        /// </summary>
		[ComponentElement]
		[XmlElement("MaxPressureDuration")]
        public PressureMeasure MaxPressureDuration {
            get {
                return MaxPressureDurationField;
            } 
            set {
                MaxPressureDurationField = value;
                NotifyPropertyChanged("MaxPressureDuration");
            }
        }

        private PressureMeasure MaxPressureDurationField; 

        /// <summary>
        /// CirculatingPosition property
        /// </summary>
		
		[XmlElement("CirculatingPosition")]
        public String CirculatingPosition {
            get {
                return CirculatingPositionField;
            } 
            set {
                CirculatingPositionField = value;
                NotifyPropertyChanged("CirculatingPosition");
            }
        }

        private String CirculatingPositionField; 

        /// <summary>
        /// FluidBledType property
        /// </summary>
		
		[XmlElement("FluidBledType")]
        public String FluidBledType {
            get {
                return FluidBledTypeField;
            } 
            set {
                FluidBledTypeField = value;
                NotifyPropertyChanged("FluidBledType");
            }
        }

        private String FluidBledTypeField; 

        /// <summary>
        /// OrientationMethod property
        /// </summary>
		
		[XmlElement("OrientationMethod")]
        public String OrientationMethod {
            get {
                return OrientationMethodField;
            } 
            set {
                OrientationMethodField = value;
                NotifyPropertyChanged("OrientationMethod");
            }
        }

        private String OrientationMethodField; 

        /// <summary>
        /// TestFluidType property
        /// </summary>
		
		[XmlElement("TestFluidType")]
        public String TestFluidType {
            get {
                return TestFluidTypeField;
            } 
            set {
                TestFluidTypeField = value;
                NotifyPropertyChanged("TestFluidType");
            }
        }

        private String TestFluidTypeField; 

        /// <summary>
        /// TestSubType property
        /// </summary>
		
		[XmlElement("TestSubType")]
        public String TestSubType {
            get {
                return TestSubTypeField;
            } 
            set {
                TestSubTypeField = value;
                NotifyPropertyChanged("TestSubType");
            }
        }

        private String TestSubTypeField; 

        /// <summary>
        /// TestType property
        /// </summary>
		
		[XmlElement("TestType")]
        public String TestType {
            get {
                return TestTypeField;
            } 
            set {
                TestTypeField = value;
                NotifyPropertyChanged("TestType");
            }
        }

        private String TestTypeField; 

        /// <summary>
        /// AnnulusPressure property
        /// </summary>
		[ComponentElement]
		[XmlElement("AnnulusPressure")]
        public PressureMeasure AnnulusPressure {
            get {
                return AnnulusPressureField;
            } 
            set {
                AnnulusPressureField = value;
                NotifyPropertyChanged("AnnulusPressure");
            }
        }

        private PressureMeasure AnnulusPressureField; 

        /// <summary>
        /// WellPressureUsed property
        /// </summary>
		
		[XmlElement("WellPressureUsed")]
        public String WellPressureUsed {
            get {
                return WellPressureUsedField;
            } 
            set {
                WellPressureUsedField = value;
                NotifyPropertyChanged("WellPressureUsed");
            }
        }

        private String WellPressureUsedField; 

        /// <summary>
        /// Str10Reference property
        /// </summary>
		
		[XmlElement("Str10Reference")]
        public String Str10Reference {
            get {
                return Str10ReferenceField;
            } 
            set {
                Str10ReferenceField = value;
                NotifyPropertyChanged("Str10Reference");
            }
        }

        private String Str10ReferenceField; 

        /// <summary>
        /// UidAssembly property
        /// </summary>
		
		[XmlElement("UidAssembly")]
        public String UidAssembly {
            get {
                return UidAssemblyField;
            } 
            set {
                UidAssemblyField = value;
                NotifyPropertyChanged("UidAssembly");
            }
        }

        private String UidAssemblyField; 

        /// <summary>
        /// VolumeBled property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolumeBled")]
        public VolumeMeasure VolumeBled {
            get {
                return VolumeBledField;
            } 
            set {
                VolumeBledField = value;
                NotifyPropertyChanged("VolumeBled");
            }
        }

        private VolumeMeasure VolumeBledField; 

        /// <summary>
        /// VolumeLost property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolumeLost")]
        public VolumeMeasure VolumeLost {
            get {
                return VolumeLostField;
            } 
            set {
                VolumeLostField = value;
                NotifyPropertyChanged("VolumeLost");
            }
        }

        private VolumeMeasure VolumeLostField; 

        /// <summary>
        /// VolumePumped property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolumePumped")]
        public VolumeMeasure VolumePumped {
            get {
                return VolumePumpedField;
            } 
            set {
                VolumePumpedField = value;
                NotifyPropertyChanged("VolumePumped");
            }
        }

        private VolumeMeasure VolumePumpedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the JobExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="JobExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the JobExtension xsd type.")]
    public partial class JobExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// JobReason property
        /// </summary>
		
		[XmlElement("JobReason")]
        public String JobReason {
            get {
                return JobReasonField;
            } 
            set {
                JobReasonField = value;
                NotifyPropertyChanged("JobReason");
            }
        }

        private String JobReasonField; 

        /// <summary>
        /// JobStatus property
        /// </summary>
		
		[XmlElement("JobStatus")]
        public String JobStatus {
            get {
                return JobStatusField;
            } 
            set {
                JobStatusField = value;
                NotifyPropertyChanged("JobStatus");
            }
        }

        private String JobStatusField; 

        /// <summary>
        /// PrimaryMotivationForJob property
        /// </summary>
		
		[XmlElement("PrimaryMotivationForJob")]
        public String PrimaryMotivationForJob {
            get {
                return PrimaryMotivationForJobField;
            } 
            set {
                PrimaryMotivationForJobField = value;
                NotifyPropertyChanged("PrimaryMotivationForJob");
            }
        }

        private String PrimaryMotivationForJobField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AcidizefracExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AcidizefracExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AcidizefracExtension xsd type.")]
    public partial class AcidizefracExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// StimJobID property
        /// </summary>
		
		[XmlElement("StimJobID")]
        public String StimJobID {
            get {
                return StimJobIDField;
            } 
            set {
                StimJobIDField = value;
                NotifyPropertyChanged("StimJobID");
            }
        }

        private String StimJobIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BHPExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BHPExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BHPExtension xsd type.")]
    public partial class BHPExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// BHPRefID property
        /// </summary>
		
		[XmlElement("BHPRefID")]
        public String BHPRefID {
            get {
                return BHPRefIDField;
            } 
            set {
                BHPRefIDField = value;
                NotifyPropertyChanged("BHPRefID");
            }
        }

        private String BHPRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LostCirculationExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LostCirculationExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the LostCirculationExtension xsd type.")]
    public partial class LostCirculationExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// VolumeLost property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolumeLost")]
        public VolumeMeasure VolumeLost {
            get {
                return VolumeLostField;
            } 
            set {
                VolumeLostField = value;
                NotifyPropertyChanged("VolumeLost");
            }
        }

        private VolumeMeasure VolumeLostField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DirectionalSurveyExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DirectionalSurveyExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DirectionalSurveyExtension xsd type.")]
    public partial class DirectionalSurveyExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// TrajectoryRefID property
        /// </summary>
		
		[XmlElement("TrajectoryRefID")]
        public String TrajectoryRefID {
            get {
                return TrajectoryRefIDField;
            } 
            set {
                TrajectoryRefIDField = value;
                NotifyPropertyChanged("TrajectoryRefID");
            }
        }

        private String TrajectoryRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CleanFillExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CleanFillExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CleanFillExtension xsd type.")]
    public partial class CleanFillExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// FillCleaningMethod property
        /// </summary>
		
		[XmlElement("FillCleaningMethod")]
        public String FillCleaningMethod {
            get {
                return FillCleaningMethodField;
            } 
            set {
                FillCleaningMethodField = value;
                NotifyPropertyChanged("FillCleaningMethod");
            }
        }

        private String FillCleaningMethodField; 

        /// <summary>
        /// ToolSize property
        /// </summary>
		[ComponentElement]
		[XmlElement("ToolSize")]
        public LengthMeasure ToolSize {
            get {
                return ToolSizeField;
            } 
            set {
                ToolSizeField = value;
                NotifyPropertyChanged("ToolSize");
            }
        }

        private LengthMeasure ToolSizeField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementExtension xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementExtension xsd type.")]
    public partial class CementExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// CementJobRefID property
        /// </summary>
		
		[XmlElement("CementJobRefID")]
        public String CementJobRefID {
            get {
                return CementJobRefIDField;
            } 
            set {
                CementJobRefIDField = value;
                NotifyPropertyChanged("CementJobRefID");
            }
        }

        private String CementJobRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EventType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EventType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the EventType xsd type.")]
    public partial class EventType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EventType class.
        /// </summary>
        public EventType() {}

        /// <summary>
        /// Initializes a new instance of the EventType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public EventType(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// Class property
        /// </summary>
		[Description("The type of the event (job, daily report, etc.)")]
        [XmlAttribute("Class")]
		
        public String Class {
            get {
                return ClassField;
            } 
            set {
                ClassField = value;
                NotifyPropertyChanged("Class");
            }
        }

        private String ClassField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PumpOp xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PumpOp", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PumpOp xsd type.")]
    public partial class PumpOp : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time the information is related to.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Pump property
        /// </summary>
		[Required]
        [Description("This is a pointer to the corresponding pump on the rig.")]
		[XmlElement("Pump")]
        public Int32? Pump {
            get {
                return PumpField;
            } 
            set {
                PumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

        private Int32? PumpField; 

        /// <summary>
        /// TypeOperation property
        /// </summary>
		[Description("Type of pump operation.")]
		[XmlElement("TypeOperation")]
        public PumpOpType? TypeOperation {
            get {
                return TypeOperationField;
            } 
            set {
                TypeOperationField = value;
             if(value!=null) 
                 this.TypeOperationSpecified = true;
                NotifyPropertyChanged("TypeOperation");
            }
        }

        private PumpOpType? TypeOperationField; 

        /// <summary>
        /// TypeOperationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeOperationSpecified {
            get {
                return TypeOperationSpecifiedField;
            } 
            set {
                TypeOperationSpecifiedField = value;
                NotifyPropertyChanged("TypeOperationSpecified");
            }
        }

        private Boolean TypeOperationSpecifiedField; 

        /// <summary>
        /// IdLiner property
        /// </summary>
		[Description("Liner size.")]
        [ComponentElement]
		[XmlElement("IdLiner")]
        public LengthMeasure LinerSize {
            get {
                return IdLinerField;
            } 
            set {
                IdLinerField = value;
                NotifyPropertyChanged("LinerSize");
            }
        }

        private LengthMeasure IdLinerField; 

        /// <summary>
        /// LenStroke property
        /// </summary>
		[Description("Stroke Length.")]
        [ComponentElement]
		[XmlElement("LenStroke")]
        public LengthMeasure LenStroke {
            get {
                return LenStrokeField;
            } 
            set {
                LenStrokeField = value;
                NotifyPropertyChanged("LenStroke");
            }
        }

        private LengthMeasure LenStrokeField; 

        /// <summary>
        /// RateStroke property
        /// </summary>
		[Required]
        [Description("Pump rate (Strokes per minute).")]
        [ComponentElement]
		[XmlElement("RateStroke")]
        public AngularVelocityMeasure RateStroke {
            get {
                return RateStrokeField;
            } 
            set {
                RateStrokeField = value;
                NotifyPropertyChanged("RateStroke");
            }
        }

        private AngularVelocityMeasure RateStrokeField; 

        /// <summary>
        /// Pressure property
        /// </summary>
		[Required]
        [Description("Pump pressure recorded.")]
        [ComponentElement]
		[XmlElement("Pressure")]
        public PressureMeasure Pressure {
            get {
                return PressureField;
            } 
            set {
                PressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure PressureField; 

        /// <summary>
        /// PcEfficiency property
        /// </summary>
		[Description("Pump efficiency.")]
        [ComponentElement]
		[XmlElement("PcEfficiency")]
        public PowerPerPowerMeasure PercentEfficiency {
            get {
                return PcEfficiencyField;
            } 
            set {
                PcEfficiencyField = value;
                NotifyPropertyChanged("PercentEfficiency");
            }
        }

        private PowerPerPowerMeasure PcEfficiencyField; 

        /// <summary>
        /// PumpOutput property
        /// </summary>
		[Description("Pump output (incl. for efficiency).")]
        [ComponentElement]
		[XmlElement("PumpOutput")]
        public VolumePerTimeMeasure PumpOutput {
            get {
                return PumpOutputField;
            } 
            set {
                PumpOutputField = value;
                NotifyPropertyChanged("PumpOutput");
            }
        }

        private VolumePerTimeMeasure PumpOutputField; 

        /// <summary>
        /// MdBit property
        /// </summary>
		[Description("Along hole measured depth of measurement from the drill datum.")]
        [ComponentElement]
		[XmlElement("MdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return MdBitField;
            } 
            set {
                MdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord MdBitField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of PumpOp")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PitVolume xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PitVolume", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PitVolume xsd type.")]
    public partial class PitVolume : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Pit property
        /// </summary>
		[Required]
        [Description("This is a pointer to the corresponding pit on the rig.")]
		[XmlElement("Pit")]
        public Int32? Pit {
            get {
                return PitField;
            } 
            set {
                PitField = value;
                NotifyPropertyChanged("Pit");
            }
        }

        private Int32? PitField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time the information is related to.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// VolPit property
        /// </summary>
		[Required]
        [Description("Volume of fluid in pit.")]
        [ComponentElement]
		[XmlElement("VolPit")]
        public VolumeMeasure VolPit {
            get {
                return VolPitField;
            } 
            set {
                VolPitField = value;
                NotifyPropertyChanged("VolPit");
            }
        }

        private VolumeMeasure VolPitField; 

        /// <summary>
        /// DensFluid property
        /// </summary>
		[Description("Density of fluid in pit.")]
        [ComponentElement]
		[XmlElement("DensFluid")]
        public MassPerVolumeMeasure DensFluid {
            get {
                return DensFluidField;
            } 
            set {
                DensFluidField = value;
                NotifyPropertyChanged("DensFluid");
            }
        }

        private MassPerVolumeMeasure DensFluidField; 

        /// <summary>
        /// DescFluid property
        /// </summary>
		[StringLength(64)]
        [Description("Fluid description.")]
		[XmlElement("DescFluid")]
        public String DescFluid {
            get {
                return DescFluidField;
            } 
            set {
                DescFluidField = value;
                NotifyPropertyChanged("DescFluid");
            }
        }

        private String DescFluidField; 

        /// <summary>
        /// VisFunnel property
        /// </summary>
		[Description("Funnel viscosity in seconds.")]
        [ComponentElement]
		[XmlElement("VisFunnel")]
        public TimeMeasure VisFunnel {
            get {
                return VisFunnelField;
            } 
            set {
                VisFunnelField = value;
                NotifyPropertyChanged("VisFunnel");
            }
        }

        private TimeMeasure VisFunnelField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of PitVolume")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Scr xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Scr", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Scr xsd type.")]
    public partial class Scr : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[Required]
        [RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time the information is related to.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Pump property
        /// </summary>
		[Required]
        [Description("This is a pointer to the corresponding pump on the rig.")]
		[XmlElement("Pump")]
        public Int32? Pump {
            get {
                return PumpField;
            } 
            set {
                PumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

        private Int32? PumpField; 

        /// <summary>
        /// TypeScr property
        /// </summary>
		[Required]
        [Description("Type of slow circulation rate.")]
		[XmlElement("TypeScr")]
        public ScrType? TypeScr {
            get {
                return TypeScrField;
            } 
            set {
                TypeScrField = value;
                NotifyPropertyChanged("TypeScr");
            }
        }

        private ScrType? TypeScrField; 

        /// <summary>
        /// RateStroke property
        /// </summary>
		[Required]
        [Description("Pump stroke rate.")]
        [ComponentElement]
		[XmlElement("RateStroke")]
        public AngularVelocityMeasure RateStroke {
            get {
                return RateStrokeField;
            } 
            set {
                RateStrokeField = value;
                NotifyPropertyChanged("RateStroke");
            }
        }

        private AngularVelocityMeasure RateStrokeField; 

        /// <summary>
        /// PresRecorded property
        /// </summary>
		[Required]
        [Description("Recorded pump pressure for the stroke rate.")]
        [ComponentElement]
		[XmlElement("PresRecorded")]
        public PressureMeasure PresRecorded {
            get {
                return PresRecordedField;
            } 
            set {
                PresRecordedField = value;
                NotifyPropertyChanged("PresRecorded");
            }
        }

        private PressureMeasure PresRecordedField; 

        /// <summary>
        /// MdBit property
        /// </summary>
		[Description("Along hole measured depth of measurement from the drill datum.")]
        [ComponentElement]
		[XmlElement("MdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return MdBitField;
            } 
            set {
                MdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord MdBitField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Scr")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DayCost xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DayCost", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DayCost xsd type.")]
    public partial class DayCost : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// NumAFE property
        /// </summary>
		[StringLength(64)]
        [Description("AFE number that this cost item applies to.")]
		[XmlElement("NumAFE")]
        public String NumAFE {
            get {
                return NumAFEField;
            } 
            set {
                NumAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private String NumAFEField; 

        /// <summary>
        /// CostGroup property
        /// </summary>
		[StringLength(64)]
        [Description("Cost group code.")]
		[XmlElement("CostGroup")]
        public String CostGroup {
            get {
                return CostGroupField;
            } 
            set {
                CostGroupField = value;
                NotifyPropertyChanged("CostGroup");
            }
        }

        private String CostGroupField; 

        /// <summary>
        /// CostClass property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Cost class code.")]
		[XmlElement("CostClass")]
        public String CostClass {
            get {
                return CostClassField;
            } 
            set {
                CostClassField = value;
                NotifyPropertyChanged("CostClass");
            }
        }

        private String CostClassField; 

        /// <summary>
        /// CostCode property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Cost code.")]
		[XmlElement("CostCode")]
        public String CostCode {
            get {
                return CostCodeField;
            } 
            set {
                CostCodeField = value;
                NotifyPropertyChanged("CostCode");
            }
        }

        private String CostCodeField; 

        /// <summary>
        /// CostSubCode property
        /// </summary>
		[StringLength(64)]
        [Description("Cost subcode.")]
		[XmlElement("CostSubCode")]
        public String CostSubCode {
            get {
                return CostSubCodeField;
            } 
            set {
                CostSubCodeField = value;
                NotifyPropertyChanged("CostSubCode");
            }
        }

        private String CostSubCodeField; 

        /// <summary>
        /// CostItemDescription property
        /// </summary>
		[StringLength(64)]
        [Description("Description of cost item.")]
		[XmlElement("CostItemDescription")]
        public String CostItemDescription {
            get {
                return CostItemDescriptionField;
            } 
            set {
                CostItemDescriptionField = value;
                NotifyPropertyChanged("CostItemDescription");
            }
        }

        private String CostItemDescriptionField; 

        /// <summary>
        /// ItemKind property
        /// </summary>
		[StringLength(32)]
        [Description("The kind of cost item specified (e.g., rig dayrate, joints casing).")]
		[XmlElement("ItemKind")]
        public String ItemKind {
            get {
                return ItemKindField;
            } 
            set {
                ItemKindField = value;
                NotifyPropertyChanged("ItemKind");
            }
        }

        private String ItemKindField; 

        /// <summary>
        /// ItemSize property
        /// </summary>
		[Description("Size of one cost item.")]
		[XmlElement("ItemSize")]
        public Double? ItemSize {
            get {
                return ItemSizeField;
            } 
            set {
                ItemSizeField = value;
             if(value!=null) 
                 this.ItemSizeSpecified = true;
                NotifyPropertyChanged("ItemSize");
            }
        }

        private Double? ItemSizeField; 

        /// <summary>
        /// ItemSizeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ItemSizeSpecified {
            get {
                return ItemSizeSpecifiedField;
            } 
            set {
                ItemSizeSpecifiedField = value;
                NotifyPropertyChanged("ItemSizeSpecified");
            }
        }

        private Boolean ItemSizeSpecifiedField; 

        /// <summary>
        /// QtyItem property
        /// </summary>
		[Description("Number of cost items used that day e.g. 1 rig dayrate, 30 joints casing.")]
		[XmlElement("QtyItem")]
        public Int32? QtyItem {
            get {
                return QtyItemField;
            } 
            set {
                QtyItemField = value;
             if(value!=null) 
                 this.QtyItemSpecified = true;
                NotifyPropertyChanged("QtyItem");
            }
        }

        private Int32? QtyItemField; 

        /// <summary>
        /// QtyItemSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean QtyItemSpecified {
            get {
                return QtyItemSpecifiedField;
            } 
            set {
                QtyItemSpecifiedField = value;
                NotifyPropertyChanged("QtyItemSpecified");
            }
        }

        private Boolean QtyItemSpecifiedField; 

        /// <summary>
        /// NumInvoice property
        /// </summary>
		[StringLength(64)]
        [Description("Invoice number for cost item, bill sent to Operator.")]
		[XmlElement("NumInvoice")]
        public String NumInvoice {
            get {
                return NumInvoiceField;
            } 
            set {
                NumInvoiceField = value;
                NotifyPropertyChanged("NumInvoice");
            }
        }

        private String NumInvoiceField; 

        /// <summary>
        /// NumPO property
        /// </summary>
		[StringLength(64)]
        [Description("Purchase order number, provided by Operator.")]
		[XmlElement("NumPO")]
        public String NumPO {
            get {
                return NumPOField;
            } 
            set {
                NumPOField = value;
                NotifyPropertyChanged("NumPO");
            }
        }

        private String NumPOField; 

        /// <summary>
        /// NumTicket property
        /// </summary>
		[StringLength(64)]
        [Description("Field Ticket number, issued by service company on location.")]
		[XmlElement("NumTicket")]
        public String NumTicket {
            get {
                return NumTicketField;
            } 
            set {
                NumTicketField = value;
                NotifyPropertyChanged("NumTicket");
            }
        }

        private String NumTicketField; 

        /// <summary>
        /// IsCarryOver property
        /// </summary>
		[Description("Is this item carried from day to day? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("IsCarryOver")]
        public Boolean? IsCarryOver {
            get {
                return IsCarryOverField;
            } 
            set {
                IsCarryOverField = value;
             if(value!=null) 
                 this.IsCarryOverSpecified = true;
                NotifyPropertyChanged("IsCarryOver");
            }
        }

        private Boolean? IsCarryOverField; 

        /// <summary>
        /// IsCarryOverSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsCarryOverSpecified {
            get {
                return IsCarryOverSpecifiedField;
            } 
            set {
                IsCarryOverSpecifiedField = value;
                NotifyPropertyChanged("IsCarryOverSpecified");
            }
        }

        private Boolean IsCarryOverSpecifiedField; 

        /// <summary>
        /// IsRental property
        /// </summary>
		[Description("Is this item a rental? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("IsRental")]
        public Boolean? IsRental {
            get {
                return IsRentalField;
            } 
            set {
                IsRentalField = value;
             if(value!=null) 
                 this.IsRentalSpecified = true;
                NotifyPropertyChanged("IsRental");
            }
        }

        private Boolean? IsRentalField; 

        /// <summary>
        /// IsRentalSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsRentalSpecified {
            get {
                return IsRentalSpecifiedField;
            } 
            set {
                IsRentalSpecifiedField = value;
                NotifyPropertyChanged("IsRentalSpecified");
            }
        }

        private Boolean IsRentalSpecifiedField; 

        /// <summary>
        /// NameTag property
        /// </summary>
		[Description("An identification tag for the item. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         [XmlIgnore]
         public bool NameTagSpecified
         {
            get {
             if(NameTagField!=null)
                return NameTagField.Count>0?true:false;
             else return false;
            } 
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// NumSerial property
        /// </summary>
		[StringLength(64)]
        [Description("Serial number.")]
		[XmlElement("NumSerial")]
        public String NumSerial {
            get {
                return NumSerialField;
            } 
            set {
                NumSerialField = value;
                NotifyPropertyChanged("NumSerial");
            }
        }

        private String NumSerialField; 

        /// <summary>
        /// NameVendor property
        /// </summary>
		[StringLength(64)]
        [Description("Name of vendor.")]
		[XmlElement("NameVendor")]
        public String NameVendor {
            get {
                return NameVendorField;
            } 
            set {
                NameVendorField = value;
                NotifyPropertyChanged("NameVendor");
            }
        }

        private String NameVendorField; 

        /// <summary>
        /// NumVendor property
        /// </summary>
		[StringLength(64)]
        [Description("Vendor number.")]
		[XmlElement("NumVendor")]
        public String NumVendor {
            get {
                return NumVendorField;
            } 
            set {
                NumVendorField = value;
                NotifyPropertyChanged("NumVendor");
            }
        }

        private String NumVendorField; 

        /// <summary>
        /// Pool property
        /// </summary>
		[StringLength(64)]
        [Description("Name of pool/reservoir that this cost item can be accounted to.")]
		[XmlElement("Pool")]
        public String Pool {
            get {
                return PoolField;
            } 
            set {
                PoolField = value;
                NotifyPropertyChanged("Pool");
            }
        }

        private String PoolField; 

        /// <summary>
        /// Estimated property
        /// </summary>
		[Description("Is this an estimated cost? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("Estimated")]
        public Boolean? Estimated {
            get {
                return EstimatedField;
            } 
            set {
                EstimatedField = value;
             if(value!=null) 
                 this.EstimatedSpecified = true;
                NotifyPropertyChanged("Estimated");
            }
        }

        private Boolean? EstimatedField; 

        /// <summary>
        /// EstimatedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EstimatedSpecified {
            get {
                return EstimatedSpecifiedField;
            } 
            set {
                EstimatedSpecifiedField = value;
                NotifyPropertyChanged("EstimatedSpecified");
            }
        }

        private Boolean EstimatedSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// CostAmount property
        /// </summary>
		[Description("Cost for the item for this record.")]
        [ComponentElement]
		[XmlElement("CostAmount")]
        public Cost CostAmount {
            get {
                return CostAmountField;
            } 
            set {
                CostAmountField = value;
                NotifyPropertyChanged("CostAmount");
            }
        }

        private Cost CostAmountField; 

        /// <summary>
        /// CostPerItem property
        /// </summary>
		[Description("Cost per cost item, assume same currency.")]
        [ComponentElement]
		[XmlElement("CostPerItem")]
        public Cost CostPerItem {
            get {
                return CostPerItemField;
            } 
            set {
                CostPerItemField = value;
                NotifyPropertyChanged("CostPerItem");
            }
        }

        private Cost CostPerItemField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DayCost")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Cost xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Cost", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Cost xsd type.")]
    public partial class Cost : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// currency property
        /// </summary>
		[StringLength(64)]
        [Description("Currency used for this Cost")]
        [XmlAttribute("currency")]
		
        public String Currency {
            get {
                return currencyField;
            } 
            set {
                currencyField = value;
                NotifyPropertyChanged("Currency");
            }
        }

        private String currencyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Personnel xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Personnel", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Personnel xsd type.")]
    public partial class Personnel : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Company property
        /// </summary>
		[StringLength(64)]
        [Description("Name of company.")]
		[XmlElement("Company")]
        public String Company {
            get {
                return CompanyField;
            } 
            set {
                CompanyField = value;
                NotifyPropertyChanged("Company");
            }
        }

        private String CompanyField; 

        /// <summary>
        /// TypeService property
        /// </summary>
		[StringLength(64)]
        [Description("Service provided by the company.")]
		[XmlElement("TypeService")]
        public String TypeService {
            get {
                return TypeServiceField;
            } 
            set {
                TypeServiceField = value;
                NotifyPropertyChanged("TypeService");
            }
        }

        private String TypeServiceField; 

        /// <summary>
        /// NumPeople property
        /// </summary>
		[Description("Number of people on board for that company.")]
		[XmlElement("NumPeople")]
        public Int32? NumPeople {
            get {
                return NumPeopleField;
            } 
            set {
                NumPeopleField = value;
             if(value!=null) 
                 this.NumPeopleSpecified = true;
                NotifyPropertyChanged("NumPeople");
            }
        }

        private Int32? NumPeopleField; 

        /// <summary>
        /// NumPeopleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumPeopleSpecified {
            get {
                return NumPeopleSpecifiedField;
            } 
            set {
                NumPeopleSpecifiedField = value;
                NotifyPropertyChanged("NumPeopleSpecified");
            }
        }

        private Boolean NumPeopleSpecifiedField; 

        /// <summary>
        /// TotalTime property
        /// </summary>
		[Description("Total time worked by the company (commonly in hours).")]
        [ComponentElement]
		[XmlElement("TotalTime")]
        public TimeMeasure TotalTime {
            get {
                return TotalTimeField;
            } 
            set {
                TotalTimeField = value;
                NotifyPropertyChanged("TotalTime");
            }
        }

        private TimeMeasure TotalTimeField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Personnel")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudLosses xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudLosses", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudLosses xsd type.")]
    public partial class MudLosses : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VolLostShakerSurf property
        /// </summary>
		[Description("Volume of mud lost at shakers (at surface).")]
        [ComponentElement]
		[XmlElement("VolLostShakerSurf")]
        public VolumeMeasure VolLostShakerSurf {
            get {
                return VolLostShakerSurfField;
            } 
            set {
                VolLostShakerSurfField = value;
                NotifyPropertyChanged("VolLostShakerSurf");
            }
        }

        private VolumeMeasure VolLostShakerSurfField; 

        /// <summary>
        /// VolLostMudCleanerSurf property
        /// </summary>
		[Description("Volume of mud lost in mud cleaning equipment (at surface).")]
        [ComponentElement]
		[XmlElement("VolLostMudCleanerSurf")]
        public VolumeMeasure VolLostMudCleanerSurf {
            get {
                return VolLostMudCleanerSurfField;
            } 
            set {
                VolLostMudCleanerSurfField = value;
                NotifyPropertyChanged("VolLostMudCleanerSurf");
            }
        }

        private VolumeMeasure VolLostMudCleanerSurfField; 

        /// <summary>
        /// VolLostPitsSurf property
        /// </summary>
		[Description("Volume of mud lost in pit room (at surface).")]
        [ComponentElement]
		[XmlElement("VolLostPitsSurf")]
        public VolumeMeasure VolLostPitsSurf {
            get {
                return VolLostPitsSurfField;
            } 
            set {
                VolLostPitsSurfField = value;
                NotifyPropertyChanged("VolLostPitsSurf");
            }
        }

        private VolumeMeasure VolLostPitsSurfField; 

        /// <summary>
        /// VolLostTrippingSurf property
        /// </summary>
		[Description("Volume of mud lost while tripping (at surface).")]
        [ComponentElement]
		[XmlElement("VolLostTrippingSurf")]
        public VolumeMeasure VolLostTrippingSurf {
            get {
                return VolLostTrippingSurfField;
            } 
            set {
                VolLostTrippingSurfField = value;
                NotifyPropertyChanged("VolLostTrippingSurf");
            }
        }

        private VolumeMeasure VolLostTrippingSurfField; 

        /// <summary>
        /// VolLostOtherSurf property
        /// </summary>
		[Description("Surface volume lost other location.")]
        [ComponentElement]
		[XmlElement("VolLostOtherSurf")]
        public VolumeMeasure VolLostOtherSurf {
            get {
                return VolLostOtherSurfField;
            } 
            set {
                VolLostOtherSurfField = value;
                NotifyPropertyChanged("VolLostOtherSurf");
            }
        }

        private VolumeMeasure VolLostOtherSurfField; 

        /// <summary>
        /// VolTotMudLostSurf property
        /// </summary>
		[Description("Total volume of mud lost at surface.")]
        [ComponentElement]
		[XmlElement("VolTotMudLostSurf")]
        public VolumeMeasure VolTotMudLostSurf {
            get {
                return VolTotMudLostSurfField;
            } 
            set {
                VolTotMudLostSurfField = value;
                NotifyPropertyChanged("VolTotMudLostSurf");
            }
        }

        private VolumeMeasure VolTotMudLostSurfField; 

        /// <summary>
        /// VolLostCircHole property
        /// </summary>
		[Description("Mud volume lost downhole while circulating.")]
        [ComponentElement]
		[XmlElement("VolLostCircHole")]
        public VolumeMeasure VolLostCircHole {
            get {
                return VolLostCircHoleField;
            } 
            set {
                VolLostCircHoleField = value;
                NotifyPropertyChanged("VolLostCircHole");
            }
        }

        private VolumeMeasure VolLostCircHoleField; 

        /// <summary>
        /// VolLostCsgHole property
        /// </summary>
		[Description("Mud volume lost downhole while running casing.")]
        [ComponentElement]
		[XmlElement("VolLostCsgHole")]
        public VolumeMeasure VolLostCsgHole {
            get {
                return VolLostCsgHoleField;
            } 
            set {
                VolLostCsgHoleField = value;
                NotifyPropertyChanged("VolLostCsgHole");
            }
        }

        private VolumeMeasure VolLostCsgHoleField; 

        /// <summary>
        /// VolLostCmtHole property
        /// </summary>
		[Description("Mud volume lost downhole while cementing.")]
        [ComponentElement]
		[XmlElement("VolLostCmtHole")]
        public VolumeMeasure VolLostCmtHole {
            get {
                return VolLostCmtHoleField;
            } 
            set {
                VolLostCmtHoleField = value;
                NotifyPropertyChanged("VolLostCmtHole");
            }
        }

        private VolumeMeasure VolLostCmtHoleField; 

        /// <summary>
        /// VolLostBhdCsgHole property
        /// </summary>
		[Description("Mud volume lost downhole behind casing.")]
        [ComponentElement]
		[XmlElement("VolLostBhdCsgHole")]
        public VolumeMeasure VolLostBhdCsgHole {
            get {
                return VolLostBhdCsgHoleField;
            } 
            set {
                VolLostBhdCsgHoleField = value;
                NotifyPropertyChanged("VolLostBhdCsgHole");
            }
        }

        private VolumeMeasure VolLostBhdCsgHoleField; 

        /// <summary>
        /// VolLostAbandonHole property
        /// </summary>
		[Description("Mud volume lost downhole during abandonment.")]
        [ComponentElement]
		[XmlElement("VolLostAbandonHole")]
        public VolumeMeasure VolLostAbandonHole {
            get {
                return VolLostAbandonHoleField;
            } 
            set {
                VolLostAbandonHoleField = value;
                NotifyPropertyChanged("VolLostAbandonHole");
            }
        }

        private VolumeMeasure VolLostAbandonHoleField; 

        /// <summary>
        /// VolLostOtherHole property
        /// </summary>
		[Description("Mud volume lost downhole from other location.")]
        [ComponentElement]
		[XmlElement("VolLostOtherHole")]
        public VolumeMeasure VolLostOtherHole {
            get {
                return VolLostOtherHoleField;
            } 
            set {
                VolLostOtherHoleField = value;
                NotifyPropertyChanged("VolLostOtherHole");
            }
        }

        private VolumeMeasure VolLostOtherHoleField; 

        /// <summary>
        /// VolTotMudLostHole property
        /// </summary>
		[Description("Total volume of mud lost downhole.")]
        [ComponentElement]
		[XmlElement("VolTotMudLostHole")]
        public VolumeMeasure VolTotMudLostHole {
            get {
                return VolTotMudLostHoleField;
            } 
            set {
                VolTotMudLostHoleField = value;
                NotifyPropertyChanged("VolTotMudLostHole");
            }
        }

        private VolumeMeasure VolTotMudLostHoleField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudVolume xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudVolume", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudVolume xsd type.")]
    public partial class MudVolume : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VolTotMudStart property
        /// </summary>
		[Description("Total volume of mud at start of report interval (including pits and hole).")]
        [ComponentElement]
		[XmlElement("VolTotMudStart")]
        public VolumeMeasure VolTotMudStart {
            get {
                return VolTotMudStartField;
            } 
            set {
                VolTotMudStartField = value;
                NotifyPropertyChanged("VolTotMudStart");
            }
        }

        private VolumeMeasure VolTotMudStartField; 

        /// <summary>
        /// VolMudDumped property
        /// </summary>
		[Description("Volume of mud dumped.")]
        [ComponentElement]
		[XmlElement("VolMudDumped")]
        public VolumeMeasure VolMudDumped {
            get {
                return VolMudDumpedField;
            } 
            set {
                VolMudDumpedField = value;
                NotifyPropertyChanged("VolMudDumped");
            }
        }

        private VolumeMeasure VolMudDumpedField; 

        /// <summary>
        /// VolMudReceived property
        /// </summary>
		[Description("Volume of mud received from mud warehouse.")]
        [ComponentElement]
		[XmlElement("VolMudReceived")]
        public VolumeMeasure VolMudReceived {
            get {
                return VolMudReceivedField;
            } 
            set {
                VolMudReceivedField = value;
                NotifyPropertyChanged("VolMudReceived");
            }
        }

        private VolumeMeasure VolMudReceivedField; 

        /// <summary>
        /// VolMudReturned property
        /// </summary>
		[Description("Volume of mud returned to mud warehouse.")]
        [ComponentElement]
		[XmlElement("VolMudReturned")]
        public VolumeMeasure VolMudReturned {
            get {
                return VolMudReturnedField;
            } 
            set {
                VolMudReturnedField = value;
                NotifyPropertyChanged("VolMudReturned");
            }
        }

        private VolumeMeasure VolMudReturnedField; 

        /// <summary>
        /// VolMudBuilt property
        /// </summary>
		[Description("Volume of mud built.")]
        [ComponentElement]
		[XmlElement("VolMudBuilt")]
        public VolumeMeasure VolMudBuilt {
            get {
                return VolMudBuiltField;
            } 
            set {
                VolMudBuiltField = value;
                NotifyPropertyChanged("VolMudBuilt");
            }
        }

        private VolumeMeasure VolMudBuiltField; 

        /// <summary>
        /// VolMudString property
        /// </summary>
		[Description("Volume of mud contained within active string.")]
        [ComponentElement]
		[XmlElement("VolMudString")]
        public VolumeMeasure VolMudString {
            get {
                return VolMudStringField;
            } 
            set {
                VolMudStringField = value;
                NotifyPropertyChanged("VolMudString");
            }
        }

        private VolumeMeasure VolMudStringField; 

        /// <summary>
        /// VolMudCasing property
        /// </summary>
		[Description("Volume of mud contained in casing annulus.")]
        [ComponentElement]
		[XmlElement("VolMudCasing")]
        public VolumeMeasure VolMudCasing {
            get {
                return VolMudCasingField;
            } 
            set {
                VolMudCasingField = value;
                NotifyPropertyChanged("VolMudCasing");
            }
        }

        private VolumeMeasure VolMudCasingField; 

        /// <summary>
        /// VolMudHole property
        /// </summary>
		[Description("Volume of mud contained in open hole annulus.")]
        [ComponentElement]
		[XmlElement("VolMudHole")]
        public VolumeMeasure VolMudHole {
            get {
                return VolMudHoleField;
            } 
            set {
                VolMudHoleField = value;
                NotifyPropertyChanged("VolMudHole");
            }
        }

        private VolumeMeasure VolMudHoleField; 

        /// <summary>
        /// VolMudRiser property
        /// </summary>
		[Description("Volume of mud contained in riser section annulus.")]
        [ComponentElement]
		[XmlElement("VolMudRiser")]
        public VolumeMeasure VolMudRiser {
            get {
                return VolMudRiserField;
            } 
            set {
                VolMudRiserField = value;
                NotifyPropertyChanged("VolMudRiser");
            }
        }

        private VolumeMeasure VolMudRiserField; 

        /// <summary>
        /// VolTotMudEnd property
        /// </summary>
		[Description("Total volume of mud at the end of the report interval (including pits and hole).")]
        [ComponentElement]
		[XmlElement("VolTotMudEnd")]
        public VolumeMeasure VolTotMudEnd {
            get {
                return VolTotMudEndField;
            } 
            set {
                VolTotMudEndField = value;
                NotifyPropertyChanged("VolTotMudEnd");
            }
        }

        private VolumeMeasure VolTotMudEndField; 

        /// <summary>
        /// MudLosses property
        /// </summary>
		
		[XmlElement("MudLosses")]
        public MudLosses MudLosses {
            get {
                return MudLossesField;
            } 
            set {
                MudLossesField = value;
                NotifyPropertyChanged("MudLosses");
            }
        }

        private MudLosses MudLossesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Inventory xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Inventory", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Inventory xsd type.")]
    public partial class Inventory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name or type of inventory item.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// QtyStart property
        /// </summary>
		[Description("Start quantity for report interval.")]
		[XmlElement("QtyStart")]
        public Int32? QtyStart {
            get {
                return QtyStartField;
            } 
            set {
                QtyStartField = value;
             if(value!=null) 
                 this.QtyStartSpecified = true;
                NotifyPropertyChanged("QtyStart");
            }
        }

        private Int32? QtyStartField; 

        /// <summary>
        /// QtyStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean QtyStartSpecified {
            get {
                return QtyStartSpecifiedField;
            } 
            set {
                QtyStartSpecifiedField = value;
                NotifyPropertyChanged("QtyStartSpecified");
            }
        }

        private Boolean QtyStartSpecifiedField; 

        /// <summary>
        /// QtyAdjustment property
        /// </summary>
		[Description("Daily quantity adjustment/correction.")]
		[XmlElement("QtyAdjustment")]
        public Int32? QtyAdjustment {
            get {
                return QtyAdjustmentField;
            } 
            set {
                QtyAdjustmentField = value;
             if(value!=null) 
                 this.QtyAdjustmentSpecified = true;
                NotifyPropertyChanged("QtyAdjustment");
            }
        }

        private Int32? QtyAdjustmentField; 

        /// <summary>
        /// QtyAdjustmentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean QtyAdjustmentSpecified {
            get {
                return QtyAdjustmentSpecifiedField;
            } 
            set {
                QtyAdjustmentSpecifiedField = value;
                NotifyPropertyChanged("QtyAdjustmentSpecified");
            }
        }

        private Boolean QtyAdjustmentSpecifiedField; 

        /// <summary>
        /// QtyReceived property
        /// </summary>
		[Description("Quantity received at site.")]
		[XmlElement("QtyReceived")]
        public Int32? QtyReceived {
            get {
                return QtyReceivedField;
            } 
            set {
                QtyReceivedField = value;
             if(value!=null) 
                 this.QtyReceivedSpecified = true;
                NotifyPropertyChanged("QtyReceived");
            }
        }

        private Int32? QtyReceivedField; 

        /// <summary>
        /// QtyReceivedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean QtyReceivedSpecified {
            get {
                return QtyReceivedSpecifiedField;
            } 
            set {
                QtyReceivedSpecifiedField = value;
                NotifyPropertyChanged("QtyReceivedSpecified");
            }
        }

        private Boolean QtyReceivedSpecifiedField; 

        /// <summary>
        /// QtyReturned property
        /// </summary>
		[Description("Quantity returned to base from site.")]
		[XmlElement("QtyReturned")]
        public Int32? QtyReturned {
            get {
                return QtyReturnedField;
            } 
            set {
                QtyReturnedField = value;
             if(value!=null) 
                 this.QtyReturnedSpecified = true;
                NotifyPropertyChanged("QtyReturned");
            }
        }

        private Int32? QtyReturnedField; 

        /// <summary>
        /// QtyReturnedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean QtyReturnedSpecified {
            get {
                return QtyReturnedSpecifiedField;
            } 
            set {
                QtyReturnedSpecifiedField = value;
                NotifyPropertyChanged("QtyReturnedSpecified");
            }
        }

        private Boolean QtyReturnedSpecifiedField; 

        /// <summary>
        /// QtyUsed property
        /// </summary>
		[Description("Quantity used for the report period")]
		[XmlElement("QtyUsed")]
        public Int32? QtyUsed {
            get {
                return QtyUsedField;
            } 
            set {
                QtyUsedField = value;
             if(value!=null) 
                 this.QtyUsedSpecified = true;
                NotifyPropertyChanged("QtyUsed");
            }
        }

        private Int32? QtyUsedField; 

        /// <summary>
        /// QtyUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean QtyUsedSpecified {
            get {
                return QtyUsedSpecifiedField;
            } 
            set {
                QtyUsedSpecifiedField = value;
                NotifyPropertyChanged("QtyUsedSpecified");
            }
        }

        private Boolean QtyUsedSpecifiedField; 

        /// <summary>
        /// QtyOnLocation property
        /// </summary>
		[Description("Amount of item remaining on location after all adjustments for the report interval.")]
		[XmlElement("QtyOnLocation")]
        public Int32? QtyOnLocation {
            get {
                return QtyOnLocationField;
            } 
            set {
                QtyOnLocationField = value;
             if(value!=null) 
                 this.QtyOnLocationSpecified = true;
                NotifyPropertyChanged("QtyOnLocation");
            }
        }

        private Int32? QtyOnLocationField; 

        /// <summary>
        /// QtyOnLocationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean QtyOnLocationSpecified {
            get {
                return QtyOnLocationSpecifiedField;
            } 
            set {
                QtyOnLocationSpecifiedField = value;
                NotifyPropertyChanged("QtyOnLocationSpecified");
            }
        }

        private Boolean QtyOnLocationSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// CostItem property
        /// </summary>
		[Description("Cost for the product for the interval.")]
        [ComponentElement]
		[XmlElement("CostItem")]
        public Cost CostItem {
            get {
                return CostItemField;
            } 
            set {
                CostItemField = value;
                NotifyPropertyChanged("CostItem");
            }
        }

        private Cost CostItemField; 

        /// <summary>
        /// PricePerUnit property
        /// </summary>
		[Description("Price per item unit, assume same currency for all items.")]
        [ComponentElement]
		[XmlElement("PricePerUnit")]
        public Cost PricePerUnit {
            get {
                return PricePerUnitField;
            } 
            set {
                PricePerUnitField = value;
                NotifyPropertyChanged("PricePerUnit");
            }
        }

        private Cost PricePerUnitField; 

        /// <summary>
        /// ItemVolPerUnit property
        /// </summary>
        [XmlElement("ItemVolPerUnit")]
        public VolumeMeasure ItemVolPerUnit {
            get {
                return ItemVolPerUnitField;
            } 
            set {
                ItemVolPerUnitField = value;
                ItemVolPerUnitSpecified = (value!=null);
                NotifyPropertyChanged("ItemVolPerUnit");
            }
        }

        private VolumeMeasure ItemVolPerUnitField; 
        /// <summary>
        /// bool to indicate if ItemVolPerUnit has been set. Used for serialization.
        /// </summary>
        private bool itemVolPerUnitSpecified = false; 
         [XmlIgnore]
         public bool ItemVolPerUnitSpecified
         {
            get {
                return itemVolPerUnitSpecified;
            } 
            set {
                itemVolPerUnitSpecified= value;
            } 
         }

        /// <summary>
        /// ItemWtPerUnit property
        /// </summary>
        [XmlElement("ItemWtPerUnit")]
        public MassMeasure ItemWeightPerUnit {
            get {
                return ItemWtPerUnitField;
            } 
            set {
                ItemWtPerUnitField = value;
                ItemWeightPerUnitSpecified = (value!=null);
                NotifyPropertyChanged("ItemWeightPerUnit");
            }
        }

        private MassMeasure ItemWtPerUnitField; 
        /// <summary>
        /// bool to indicate if ItemWeightPerUnit has been set. Used for serialization.
        /// </summary>
        private bool itemWeightPerUnitSpecified = false; 
         [XmlIgnore]
         public bool ItemWeightPerUnitSpecified
         {
            get {
                return itemWeightPerUnitSpecified;
            } 
            set {
                itemWeightPerUnitSpecified= value;
            } 
         }


		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Inventory")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Weather xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Weather", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Weather xsd type.")]
    public partial class Weather : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[Required]
        [RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time the information is related to.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Agency property
        /// </summary>
		[StringLength(64)]
        [Description("Name of company that supplied the data.")]
		[XmlElement("Agency")]
        public String Agency {
            get {
                return AgencyField;
            } 
            set {
                AgencyField = value;
                NotifyPropertyChanged("Agency");
            }
        }

        private String AgencyField; 

        /// <summary>
        /// BarometricPressure property
        /// </summary>
		[Description("Atmospheric pressure.")]
        [ComponentElement]
		[XmlElement("BarometricPressure")]
        public PressureMeasure BarometricPressure {
            get {
                return BarometricPressureField;
            } 
            set {
                BarometricPressureField = value;
                NotifyPropertyChanged("BarometricPressure");
            }
        }

        private PressureMeasure BarometricPressureField; 

        /// <summary>
        /// BeaufortScaleNumber property
        /// </summary>
		[Description("The Beaufort wind scale is a system used to estimate and report wind speeds  when no measuring apparatus is available. It was invented in the early 19th Century by Admiral  Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions.")]
		[XmlElement("BeaufortScaleNumber")]
        public Int16? BeaufortScaleNumber {
            get {
                return BeaufortScaleNumberField;
            } 
            set {
                BeaufortScaleNumberField = value;
             if(value!=null) 
                 this.BeaufortScaleNumberSpecified = true;
                NotifyPropertyChanged("BeaufortScaleNumber");
            }
        }

        private Int16? BeaufortScaleNumberField; 

        /// <summary>
        /// BeaufortScaleNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean BeaufortScaleNumberSpecified {
            get {
                return BeaufortScaleNumberSpecifiedField;
            } 
            set {
                BeaufortScaleNumberSpecifiedField = value;
                NotifyPropertyChanged("BeaufortScaleNumberSpecified");
            }
        }

        private Boolean BeaufortScaleNumberSpecifiedField; 

        /// <summary>
        /// TempSurfaceMn property
        /// </summary>
		[Description("Minimum temperature above ground. Temperature of the atmosphere.")]
        [ComponentElement]
		[XmlElement("TempSurfaceMn")]
        public ThermodynamicTemperatureMeasure TempSurfaceMin {
            get {
                return TempSurfaceMnField;
            } 
            set {
                TempSurfaceMnField = value;
                NotifyPropertyChanged("TempSurfaceMin");
            }
        }

        private ThermodynamicTemperatureMeasure TempSurfaceMnField; 

        /// <summary>
        /// TempSurfaceMx property
        /// </summary>
		[Description("Maximum temperature above ground.")]
        [ComponentElement]
		[XmlElement("TempSurfaceMx")]
        public ThermodynamicTemperatureMeasure TempSurfaceMax {
            get {
                return TempSurfaceMxField;
            } 
            set {
                TempSurfaceMxField = value;
                NotifyPropertyChanged("TempSurfaceMax");
            }
        }

        private ThermodynamicTemperatureMeasure TempSurfaceMxField; 

        /// <summary>
        /// TempWindChill property
        /// </summary>
		[Description("A measure of the combined chilling effect of wind and low temperature on  living things, also named chill factor, e.g., according to US weather service table, an air  temperature of 30 degF with a 10 mi/h corresponds to a windchill of 22 degF.")]
        [ComponentElement]
		[XmlElement("TempWindChill")]
        public ThermodynamicTemperatureMeasure TempWindChill {
            get {
                return TempWindChillField;
            } 
            set {
                TempWindChillField = value;
                NotifyPropertyChanged("TempWindChill");
            }
        }

        private ThermodynamicTemperatureMeasure TempWindChillField; 

        /// <summary>
        /// Tempsea property
        /// </summary>
		[Description("Sea temperature.")]
        [ComponentElement]
		[XmlElement("Tempsea")]
        public ThermodynamicTemperatureMeasure Tempsea {
            get {
                return TempseaField;
            } 
            set {
                TempseaField = value;
                NotifyPropertyChanged("Tempsea");
            }
        }

        private ThermodynamicTemperatureMeasure TempseaField; 

        /// <summary>
        /// Visibility property
        /// </summary>
		[Description("Horizontal visibility.")]
        [ComponentElement]
		[XmlElement("Visibility")]
        public LengthMeasure Visibility {
            get {
                return VisibilityField;
            } 
            set {
                VisibilityField = value;
                NotifyPropertyChanged("Visibility");
            }
        }

        private LengthMeasure VisibilityField; 

        /// <summary>
        /// AziWave property
        /// </summary>
		[Description("The direction from which the waves are coming, measured from true north.")]
        [ComponentElement]
		[XmlElement("AziWave")]
        public PlaneAngleMeasure AziWave {
            get {
                return AziWaveField;
            } 
            set {
                AziWaveField = value;
                NotifyPropertyChanged("AziWave");
            }
        }

        private PlaneAngleMeasure AziWaveField; 

        /// <summary>
        /// HtWave property
        /// </summary>
		[Description("Average height of the waves.")]
        [ComponentElement]
		[XmlElement("HtWave")]
        public LengthMeasure HeightWave {
            get {
                return HtWaveField;
            } 
            set {
                HtWaveField = value;
                NotifyPropertyChanged("HeightWave");
            }
        }

        private LengthMeasure HtWaveField; 

        /// <summary>
        /// SignificantWave property
        /// </summary>
		[Description("An average of the higher 1/3 of the wave heights passing during a   sample period (typically 20 to 30 minutes).")]
        [ComponentElement]
		[XmlElement("SignificantWave")]
        public LengthMeasure SignificantWave {
            get {
                return SignificantWaveField;
            } 
            set {
                SignificantWaveField = value;
                NotifyPropertyChanged("SignificantWave");
            }
        }

        private LengthMeasure SignificantWaveField; 

        /// <summary>
        /// MaxWave property
        /// </summary>
		[Description("The maximum wave height.")]
        [ComponentElement]
		[XmlElement("MaxWave")]
        public LengthMeasure MaxWave {
            get {
                return MaxWaveField;
            } 
            set {
                MaxWaveField = value;
                NotifyPropertyChanged("MaxWave");
            }
        }

        private LengthMeasure MaxWaveField; 

        /// <summary>
        /// PeriodWave property
        /// </summary>
		[Description("The elapsed time between the passing of two wave tops.")]
        [ComponentElement]
		[XmlElement("PeriodWave")]
        public TimeMeasure PeriodWave {
            get {
                return PeriodWaveField;
            } 
            set {
                PeriodWaveField = value;
                NotifyPropertyChanged("PeriodWave");
            }
        }

        private TimeMeasure PeriodWaveField; 

        /// <summary>
        /// AziWind property
        /// </summary>
		[Description("The direction from which the wind is blowing, measured from true north.")]
        [ComponentElement]
		[XmlElement("AziWind")]
        public PlaneAngleMeasure AziWind {
            get {
                return AziWindField;
            } 
            set {
                AziWindField = value;
                NotifyPropertyChanged("AziWind");
            }
        }

        private PlaneAngleMeasure AziWindField; 

        /// <summary>
        /// VelWind property
        /// </summary>
		[Description("Wind speed.")]
        [ComponentElement]
		[XmlElement("VelWind")]
        public LengthPerTimeMeasure VelWind {
            get {
                return VelWindField;
            } 
            set {
                VelWindField = value;
                NotifyPropertyChanged("VelWind");
            }
        }

        private LengthPerTimeMeasure VelWindField; 

        /// <summary>
        /// TypePrecip property
        /// </summary>
		[StringLength(64)]
        [Description("Type of precipitation.")]
		[XmlElement("TypePrecip")]
        public String TypePrecip {
            get {
                return TypePrecipField;
            } 
            set {
                TypePrecipField = value;
                NotifyPropertyChanged("TypePrecip");
            }
        }

        private String TypePrecipField; 

        /// <summary>
        /// AmtPrecip property
        /// </summary>
		[Description("Amount of precipitation.")]
        [ComponentElement]
		[XmlElement("AmtPrecip")]
        public LengthMeasure AmtPrecip {
            get {
                return AmtPrecipField;
            } 
            set {
                AmtPrecipField = value;
                NotifyPropertyChanged("AmtPrecip");
            }
        }

        private LengthMeasure AmtPrecipField; 

        /// <summary>
        /// CoverCloud property
        /// </summary>
		[StringLength(64)]
        [Description("Description of cloud cover.")]
		[XmlElement("CoverCloud")]
        public String CoverCloud {
            get {
                return CoverCloudField;
            } 
            set {
                CoverCloudField = value;
                NotifyPropertyChanged("CoverCloud");
            }
        }

        private String CoverCloudField; 

        /// <summary>
        /// CeilingCloud property
        /// </summary>
		[Description("Height of cloud cover.")]
        [ComponentElement]
		[XmlElement("CeilingCloud")]
        public LengthMeasure CeilingCloud {
            get {
                return CeilingCloudField;
            } 
            set {
                CeilingCloudField = value;
                NotifyPropertyChanged("CeilingCloud");
            }
        }

        private LengthMeasure CeilingCloudField; 

        /// <summary>
        /// CurrentSea property
        /// </summary>
		[Description("Current speed.")]
        [ComponentElement]
		[XmlElement("CurrentSea")]
        public LengthPerTimeMeasure CurrentSea {
            get {
                return CurrentSeaField;
            } 
            set {
                CurrentSeaField = value;
                NotifyPropertyChanged("CurrentSea");
            }
        }

        private LengthPerTimeMeasure CurrentSeaField; 

        /// <summary>
        /// AziCurrentSea property
        /// </summary>
		[Description("Azimuth of current.")]
        [ComponentElement]
		[XmlElement("AziCurrentSea")]
        public PlaneAngleMeasure AziCurrentSea {
            get {
                return AziCurrentSeaField;
            } 
            set {
                AziCurrentSeaField = value;
                NotifyPropertyChanged("AziCurrentSea");
            }
        }

        private PlaneAngleMeasure AziCurrentSeaField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
		[XmlElement("Comments")]
        public String Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String CommentsField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Weather")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PlaneAngleMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PlaneAngleMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PlaneAngleMeasure xsd type.")]
    public partial class PlaneAngleMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        public PlaneAngleMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PlaneAngleMeasure(Double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public PlaneAngleUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PlaneAngleUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SupportCraft xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SupportCraft", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the SupportCraft xsd type.")]
    public partial class SupportCraft : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for support craft.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// TypeSupportCraft property
        /// </summary>
		[Required]
        [Description("Type of support craft (eg. Barge, helicopter, tug boat)")]
		[XmlElement("TypeSupportCraft")]
        public SupportCraftType? TypeSupportCraft {
            get {
                return TypeSupportCraftField;
            } 
            set {
                TypeSupportCraftField = value;
                NotifyPropertyChanged("TypeSupportCraft");
            }
        }

        private SupportCraftType? TypeSupportCraftField; 

        /// <summary>
        /// DTimArrived property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time when vehicle arrived at rig site.")]
		[XmlElement("DTimArrived")]
        public String DateTimeArrived {
            get {
                return DTimArrivedField;
            } 
            set {
                DTimArrivedField = value;
                NotifyPropertyChanged("DateTimeArrived");
            }
        }

        private String DTimArrivedField; 

        /// <summary>
        /// DTimDeparted property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time when vehicle departed rig site.")]
		[XmlElement("DTimDeparted")]
        public String DateTimeDeparted {
            get {
                return DTimDepartedField;
            } 
            set {
                DTimDepartedField = value;
                NotifyPropertyChanged("DateTimeDeparted");
            }
        }

        private String DTimDepartedField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
		[XmlElement("Comments")]
        public String Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String CommentsField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of SupportCraft")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Incident xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Incident", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Incident xsd type.")]
    public partial class Incident : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[Required]
        [RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time the information is related to.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Reporter property
        /// </summary>
		[StringLength(64)]
        [Description("Name of person who prepared incident report.")]
		[XmlElement("Reporter")]
        public String Reporter {
            get {
                return ReporterField;
            } 
            set {
                ReporterField = value;
                NotifyPropertyChanged("Reporter");
            }
        }

        private String ReporterField; 

        /// <summary>
        /// NumMinorInjury property
        /// </summary>
		[Description("Number of personnel with minor injuries.")]
		[XmlElement("NumMinorInjury")]
        public Int32? NumMinorInjury {
            get {
                return NumMinorInjuryField;
            } 
            set {
                NumMinorInjuryField = value;
             if(value!=null) 
                 this.NumMinorInjurySpecified = true;
                NotifyPropertyChanged("NumMinorInjury");
            }
        }

        private Int32? NumMinorInjuryField; 

        /// <summary>
        /// NumMinorInjurySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumMinorInjurySpecified {
            get {
                return NumMinorInjurySpecifiedField;
            } 
            set {
                NumMinorInjurySpecifiedField = value;
                NotifyPropertyChanged("NumMinorInjurySpecified");
            }
        }

        private Boolean NumMinorInjurySpecifiedField; 

        /// <summary>
        /// NumMajorInjury property
        /// </summary>
		[Description("Number of personnel with major injuries.")]
		[XmlElement("NumMajorInjury")]
        public Int32? NumMajorInjury {
            get {
                return NumMajorInjuryField;
            } 
            set {
                NumMajorInjuryField = value;
             if(value!=null) 
                 this.NumMajorInjurySpecified = true;
                NotifyPropertyChanged("NumMajorInjury");
            }
        }

        private Int32? NumMajorInjuryField; 

        /// <summary>
        /// NumMajorInjurySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumMajorInjurySpecified {
            get {
                return NumMajorInjurySpecifiedField;
            } 
            set {
                NumMajorInjurySpecifiedField = value;
                NotifyPropertyChanged("NumMajorInjurySpecified");
            }
        }

        private Boolean NumMajorInjurySpecifiedField; 

        /// <summary>
        /// NumFatality property
        /// </summary>
		[Description("Number of personnel killed in incident.")]
		[XmlElement("NumFatality")]
        public Int32? NumFatality {
            get {
                return NumFatalityField;
            } 
            set {
                NumFatalityField = value;
             if(value!=null) 
                 this.NumFatalitySpecified = true;
                NotifyPropertyChanged("NumFatality");
            }
        }

        private Int32? NumFatalityField; 

        /// <summary>
        /// NumFatalitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumFatalitySpecified {
            get {
                return NumFatalitySpecifiedField;
            } 
            set {
                NumFatalitySpecifiedField = value;
                NotifyPropertyChanged("NumFatalitySpecified");
            }
        }

        private Boolean NumFatalitySpecifiedField; 

        /// <summary>
        /// IsNearMiss property
        /// </summary>
		[Description("Near miss incident occurrence?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("IsNearMiss")]
        public Boolean? IsNearMiss {
            get {
                return IsNearMissField;
            } 
            set {
                IsNearMissField = value;
             if(value!=null) 
                 this.IsNearMissSpecified = true;
                NotifyPropertyChanged("IsNearMiss");
            }
        }

        private Boolean? IsNearMissField; 

        /// <summary>
        /// IsNearMissSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsNearMissSpecified {
            get {
                return IsNearMissSpecifiedField;
            } 
            set {
                IsNearMissSpecifiedField = value;
                NotifyPropertyChanged("IsNearMissSpecified");
            }
        }

        private Boolean IsNearMissSpecifiedField; 

        /// <summary>
        /// DescLocation property
        /// </summary>
		[StringLength(64)]
        [Description("Location description.")]
		[XmlElement("DescLocation")]
        public String DescLocation {
            get {
                return DescLocationField;
            } 
            set {
                DescLocationField = value;
                NotifyPropertyChanged("DescLocation");
            }
        }

        private String DescLocationField; 

        /// <summary>
        /// DescAccident property
        /// </summary>
		[StringLength(2000)]
        [Description("Accident description.")]
		[XmlElement("DescAccident")]
        public String DescAccident {
            get {
                return DescAccidentField;
            } 
            set {
                DescAccidentField = value;
                NotifyPropertyChanged("DescAccident");
            }
        }

        private String DescAccidentField; 

        /// <summary>
        /// RemedialActionDesc property
        /// </summary>
		[StringLength(2000)]
        [Description("Remedial action description.")]
		[XmlElement("RemedialActionDesc")]
        public String RemedialActionDesc {
            get {
                return RemedialActionDescField;
            } 
            set {
                RemedialActionDescField = value;
                NotifyPropertyChanged("RemedialActionDesc");
            }
        }

        private String RemedialActionDescField; 

        /// <summary>
        /// CauseDesc property
        /// </summary>
		[StringLength(2000)]
        [Description("Cause description.")]
		[XmlElement("CauseDesc")]
        public String CauseDesc {
            get {
                return CauseDescField;
            } 
            set {
                CauseDescField = value;
                NotifyPropertyChanged("CauseDesc");
            }
        }

        private String CauseDescField; 

        /// <summary>
        /// ETimLostGross property
        /// </summary>
		[Description("Number of hours lost due to incident.")]
        [ComponentElement]
		[XmlElement("ETimLostGross")]
        public TimeMeasure ETimeLostGross {
            get {
                return ETimLostGrossField;
            } 
            set {
                ETimLostGrossField = value;
                NotifyPropertyChanged("ETimeLostGross");
            }
        }

        private TimeMeasure ETimLostGrossField; 

        /// <summary>
        /// CostLossGross property
        /// </summary>
		[Description("Gross estimate of cost incurred due to incident.")]
        [ComponentElement]
		[XmlElement("CostLossGross")]
        public Cost CostLossGross {
            get {
                return CostLossGrossField;
            } 
            set {
                CostLossGrossField = value;
                NotifyPropertyChanged("CostLossGross");
            }
        }

        private Cost CostLossGrossField; 

        /// <summary>
        /// ResponsibleCompany property
        /// </summary>
		[StringLength(64)]
        [Description("Name of company that caused incident.")]
		[XmlElement("ResponsibleCompany")]
        public String ResponsibleCompany {
            get {
                return ResponsibleCompanyField;
            } 
            set {
                ResponsibleCompanyField = value;
                NotifyPropertyChanged("ResponsibleCompany");
            }
        }

        private String ResponsibleCompanyField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Incident")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Hse xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Hse", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Hse xsd type.")]
    public partial class Hse : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DaysIncFree property
        /// </summary>
		[Description("Incident free duration (commonly in days).")]
        [ComponentElement]
		[XmlElement("DaysIncFree")]
        public TimeMeasure DaysIncFree {
            get {
                return DaysIncFreeField;
            } 
            set {
                DaysIncFreeField = value;
                NotifyPropertyChanged("DaysIncFree");
            }
        }

        private TimeMeasure DaysIncFreeField; 

        /// <summary>
        /// LastCsgPresTest property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Last casing pressure test date and time.")]
		[XmlElement("LastCsgPresTest")]
        public String LastCsgPresTest {
            get {
                return LastCsgPresTestField;
            } 
            set {
                LastCsgPresTestField = value;
                NotifyPropertyChanged("LastCsgPresTest");
            }
        }

        private String LastCsgPresTestField; 

        /// <summary>
        /// PresLastCsg property
        /// </summary>
		[Description("Last casing pressure test pressure.")]
        [ComponentElement]
		[XmlElement("PresLastCsg")]
        public PressureMeasure PresLastCsg {
            get {
                return PresLastCsgField;
            } 
            set {
                PresLastCsgField = value;
                NotifyPropertyChanged("PresLastCsg");
            }
        }

        private PressureMeasure PresLastCsgField; 

        /// <summary>
        /// LastBopPresTest property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Last blow out preventer pressure test.")]
		[XmlElement("LastBopPresTest")]
        public String LastBopPresTest {
            get {
                return LastBopPresTestField;
            } 
            set {
                LastBopPresTestField = value;
                NotifyPropertyChanged("LastBopPresTest");
            }
        }

        private String LastBopPresTestField; 

        /// <summary>
        /// NextBopPresTest property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Next blow out preventer pressure test.")]
		[XmlElement("NextBopPresTest")]
        public String NextBopPresTest {
            get {
                return NextBopPresTestField;
            } 
            set {
                NextBopPresTestField = value;
                NotifyPropertyChanged("NextBopPresTest");
            }
        }

        private String NextBopPresTestField; 

        /// <summary>
        /// PresStdPipe property
        /// </summary>
		[Description("Standpipe manifold pressure tested to.")]
        [ComponentElement]
		[XmlElement("PresStdPipe")]
        public PressureMeasure PresStdPipe {
            get {
                return PresStdPipeField;
            } 
            set {
                PresStdPipeField = value;
                NotifyPropertyChanged("PresStdPipe");
            }
        }

        private PressureMeasure PresStdPipeField; 

        /// <summary>
        /// PresKellyHose property
        /// </summary>
		[Description("Kelly hose pressure tested to.")]
        [ComponentElement]
		[XmlElement("PresKellyHose")]
        public PressureMeasure PresKellyHose {
            get {
                return PresKellyHoseField;
            } 
            set {
                PresKellyHoseField = value;
                NotifyPropertyChanged("PresKellyHose");
            }
        }

        private PressureMeasure PresKellyHoseField; 

        /// <summary>
        /// PresDiverter property
        /// </summary>
		[Description("Blow out preventer diverter pressure tested to.")]
        [ComponentElement]
		[XmlElement("PresDiverter")]
        public PressureMeasure PresDiverter {
            get {
                return PresDiverterField;
            } 
            set {
                PresDiverterField = value;
                NotifyPropertyChanged("PresDiverter");
            }
        }

        private PressureMeasure PresDiverterField; 

        /// <summary>
        /// PresAnnular property
        /// </summary>
		[Description("Blow out preventer annular preventer pressure tested to.")]
        [ComponentElement]
		[XmlElement("PresAnnular")]
        public PressureMeasure PresAnnular {
            get {
                return PresAnnularField;
            } 
            set {
                PresAnnularField = value;
                NotifyPropertyChanged("PresAnnular");
            }
        }

        private PressureMeasure PresAnnularField; 

        /// <summary>
        /// PresRams property
        /// </summary>
		[Description("Blow out preventer ram pressure tested to.")]
        [ComponentElement]
		[XmlElement("PresRams")]
        public PressureMeasure PresRams {
            get {
                return PresRamsField;
            } 
            set {
                PresRamsField = value;
                NotifyPropertyChanged("PresRams");
            }
        }

        private PressureMeasure PresRamsField; 

        /// <summary>
        /// PresChokeLine property
        /// </summary>
		[Description("Choke line pressure tested to.")]
        [ComponentElement]
		[XmlElement("PresChokeLine")]
        public PressureMeasure PresChokeLine {
            get {
                return PresChokeLineField;
            } 
            set {
                PresChokeLineField = value;
                NotifyPropertyChanged("PresChokeLine");
            }
        }

        private PressureMeasure PresChokeLineField; 

        /// <summary>
        /// PresChokeMan property
        /// </summary>
		[Description("Choke line manifold pressure tested to.")]
        [ComponentElement]
		[XmlElement("PresChokeMan")]
        public PressureMeasure PresChokeMan {
            get {
                return PresChokeManField;
            } 
            set {
                PresChokeManField = value;
                NotifyPropertyChanged("PresChokeMan");
            }
        }

        private PressureMeasure PresChokeManField; 

        /// <summary>
        /// LastFireBoatDrill property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Last fire or boat drill.")]
		[XmlElement("LastFireBoatDrill")]
        public String LastFireBoatDrill {
            get {
                return LastFireBoatDrillField;
            } 
            set {
                LastFireBoatDrillField = value;
                NotifyPropertyChanged("LastFireBoatDrill");
            }
        }

        private String LastFireBoatDrillField; 

        /// <summary>
        /// LastAbandonDrill property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Last abandonment drill.")]
		[XmlElement("LastAbandonDrill")]
        public String LastAbandonDrill {
            get {
                return LastAbandonDrillField;
            } 
            set {
                LastAbandonDrillField = value;
                NotifyPropertyChanged("LastAbandonDrill");
            }
        }

        private String LastAbandonDrillField; 

        /// <summary>
        /// LastRigInspection property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Last rig inspection/check.")]
		[XmlElement("LastRigInspection")]
        public String LastRigInspection {
            get {
                return LastRigInspectionField;
            } 
            set {
                LastRigInspectionField = value;
                NotifyPropertyChanged("LastRigInspection");
            }
        }

        private String LastRigInspectionField; 

        /// <summary>
        /// LastSafetyMeeting property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Last safety meeting.")]
		[XmlElement("LastSafetyMeeting")]
        public String LastSafetyMeeting {
            get {
                return LastSafetyMeetingField;
            } 
            set {
                LastSafetyMeetingField = value;
                NotifyPropertyChanged("LastSafetyMeeting");
            }
        }

        private String LastSafetyMeetingField; 

        /// <summary>
        /// LastSafetyInspection property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Last safety inspection.")]
		[XmlElement("LastSafetyInspection")]
        public String LastSafetyInspection {
            get {
                return LastSafetyInspectionField;
            } 
            set {
                LastSafetyInspectionField = value;
                NotifyPropertyChanged("LastSafetyInspection");
            }
        }

        private String LastSafetyInspectionField; 

        /// <summary>
        /// LastTripDrill property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Last trip drill.")]
		[XmlElement("LastTripDrill")]
        public String LastTripDrill {
            get {
                return LastTripDrillField;
            } 
            set {
                LastTripDrillField = value;
                NotifyPropertyChanged("LastTripDrill");
            }
        }

        private String LastTripDrillField; 

        /// <summary>
        /// LastDiverterDrill property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Last diverter drill.")]
		[XmlElement("LastDiverterDrill")]
        public String LastDiverterDrill {
            get {
                return LastDiverterDrillField;
            } 
            set {
                LastDiverterDrillField = value;
                NotifyPropertyChanged("LastDiverterDrill");
            }
        }

        private String LastDiverterDrillField; 

        /// <summary>
        /// LastBopDrill property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Last blow out preventer drill.")]
		[XmlElement("LastBopDrill")]
        public String LastBopDrill {
            get {
                return LastBopDrillField;
            } 
            set {
                LastBopDrillField = value;
                NotifyPropertyChanged("LastBopDrill");
            }
        }

        private String LastBopDrillField; 

        /// <summary>
        /// RegAgencyInsp property
        /// </summary>
		[Description("Governmental regulatory inspection agency inspection?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("RegAgencyInsp")]
        public Boolean? RegAgencyInsp {
            get {
                return RegAgencyInspField;
            } 
            set {
                RegAgencyInspField = value;
             if(value!=null) 
                 this.RegAgencyInspSpecified = true;
                NotifyPropertyChanged("RegAgencyInsp");
            }
        }

        private Boolean? RegAgencyInspField; 

        /// <summary>
        /// RegAgencyInspSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RegAgencyInspSpecified {
            get {
                return RegAgencyInspSpecifiedField;
            } 
            set {
                RegAgencyInspSpecifiedField = value;
                NotifyPropertyChanged("RegAgencyInspSpecified");
            }
        }

        private Boolean RegAgencyInspSpecifiedField; 

        /// <summary>
        /// NonComplianceIssued property
        /// </summary>
		[Description("Inspection non-compliance notice served?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("NonComplianceIssued")]
        public Boolean? NonComplianceIssued {
            get {
                return NonComplianceIssuedField;
            } 
            set {
                NonComplianceIssuedField = value;
             if(value!=null) 
                 this.NonComplianceIssuedSpecified = true;
                NotifyPropertyChanged("NonComplianceIssued");
            }
        }

        private Boolean? NonComplianceIssuedField; 

        /// <summary>
        /// NonComplianceIssuedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NonComplianceIssuedSpecified {
            get {
                return NonComplianceIssuedSpecifiedField;
            } 
            set {
                NonComplianceIssuedSpecifiedField = value;
                NotifyPropertyChanged("NonComplianceIssuedSpecified");
            }
        }

        private Boolean NonComplianceIssuedSpecifiedField; 

        /// <summary>
        /// NumStopCards property
        /// </summary>
		[Description("Number of Health, Safety and Environment incidents reported.")]
		[XmlElement("NumStopCards")]
        public Int32? NumStopCards {
            get {
                return NumStopCardsField;
            } 
            set {
                NumStopCardsField = value;
             if(value!=null) 
                 this.NumStopCardsSpecified = true;
                NotifyPropertyChanged("NumStopCards");
            }
        }

        private Int32? NumStopCardsField; 

        /// <summary>
        /// NumStopCardsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumStopCardsSpecified {
            get {
                return NumStopCardsSpecifiedField;
            } 
            set {
                NumStopCardsSpecifiedField = value;
                NotifyPropertyChanged("NumStopCardsSpecified");
            }
        }

        private Boolean NumStopCardsSpecifiedField; 

        /// <summary>
        /// FluidDischarged property
        /// </summary>
		[Description("Daily whole mud discarded.")]
        [ComponentElement]
		[XmlElement("FluidDischarged")]
        public VolumeMeasure FluidDischarged {
            get {
                return FluidDischargedField;
            } 
            set {
                FluidDischargedField = value;
                NotifyPropertyChanged("FluidDischarged");
            }
        }

        private VolumeMeasure FluidDischargedField; 

        /// <summary>
        /// VolCtgDischarged property
        /// </summary>
		[Description("Volume of cuttings discharged.")]
        [ComponentElement]
		[XmlElement("VolCtgDischarged")]
        public VolumeMeasure VolCtgDischarged {
            get {
                return VolCtgDischargedField;
            } 
            set {
                VolCtgDischargedField = value;
                NotifyPropertyChanged("VolCtgDischarged");
            }
        }

        private VolumeMeasure VolCtgDischargedField; 

        /// <summary>
        /// VolOilCtgDischarge property
        /// </summary>
		[Description("Oil on cuttings daily discharge.")]
        [ComponentElement]
		[XmlElement("VolOilCtgDischarge")]
        public VolumeMeasure VolOilCtgDischarge {
            get {
                return VolOilCtgDischargeField;
            } 
            set {
                VolOilCtgDischargeField = value;
                NotifyPropertyChanged("VolOilCtgDischarge");
            }
        }

        private VolumeMeasure VolOilCtgDischargeField; 

        /// <summary>
        /// WasteDischarged property
        /// </summary>
		[Description("Volume of sanitary waste discharged.")]
        [ComponentElement]
		[XmlElement("WasteDischarged")]
        public VolumeMeasure WasteDischarged {
            get {
                return WasteDischargedField;
            } 
            set {
                WasteDischargedField = value;
                NotifyPropertyChanged("WasteDischarged");
            }
        }

        private VolumeMeasure WasteDischargedField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
		[XmlElement("Comments")]
        public String Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String CommentsField; 

        /// <summary>
        /// Incident property
        /// </summary>
		[RecurringElement]
		[XmlElement("Incident")]
        public List<Incident> Incident {
            get {
                return IncidentField;
            } 
            set {
                IncidentField = value;
                NotifyPropertyChanged("Incident");
            }
        }

         [XmlIgnore]
         public bool IncidentSpecified
         {
            get {
             if(IncidentField!=null)
                return IncidentField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Incident> IncidentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ShakerScreen xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ShakerScreen", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ShakerScreen xsd type.")]
    public partial class ShakerScreen : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that activities started.")]
		[XmlElement("DTimStart")]
        public String DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private String DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time activities were completed.")]
		[XmlElement("DTimEnd")]
        public String DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private String DTimEndField; 

        /// <summary>
        /// NumDeck property
        /// </summary>
		[Description("Deck number mesh installed on.")]
		[XmlElement("NumDeck")]
        public Int32? NumDeck {
            get {
                return NumDeckField;
            } 
            set {
                NumDeckField = value;
             if(value!=null) 
                 this.NumDeckSpecified = true;
                NotifyPropertyChanged("NumDeck");
            }
        }

        private Int32? NumDeckField; 

        /// <summary>
        /// NumDeckSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumDeckSpecified {
            get {
                return NumDeckSpecifiedField;
            } 
            set {
                NumDeckSpecifiedField = value;
                NotifyPropertyChanged("NumDeckSpecified");
            }
        }

        private Boolean NumDeckSpecifiedField; 

        /// <summary>
        /// MeshX property
        /// </summary>
		[Description("Mesh size in the X direction.")]
        [ComponentElement]
		[XmlElement("MeshX")]
        public LengthMeasure MeshX {
            get {
                return MeshXField;
            } 
            set {
                MeshXField = value;
                NotifyPropertyChanged("MeshX");
            }
        }

        private LengthMeasure MeshXField; 

        /// <summary>
        /// MeshY property
        /// </summary>
		[Description("Mesh size in the Y direction.")]
        [ComponentElement]
		[XmlElement("MeshY")]
        public LengthMeasure MeshY {
            get {
                return MeshYField;
            } 
            set {
                MeshYField = value;
                NotifyPropertyChanged("MeshY");
            }
        }

        private LengthMeasure MeshYField; 

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
		[XmlElement("Manufacturer")]
        public String Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String ManufacturerField; 

        /// <summary>
        /// Model property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturers designated model.")]
		[XmlElement("Model")]
        public String Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String ModelField; 

        /// <summary>
        /// CutPoint property
        /// </summary>
		[Description("Shaker screen cut point - the maximum size that  will pass through the screen.")]
        [ComponentElement]
		[XmlElement("CutPoint")]
        public LengthMeasure CutPoint {
            get {
                return CutPointField;
            } 
            set {
                CutPointField = value;
                NotifyPropertyChanged("CutPoint");
            }
        }

        private LengthMeasure CutPointField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ShakerOp xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ShakerOp", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ShakerOp xsd type.")]
    public partial class ShakerOp : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Shaker property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the shaker that is characterized by this report.")]
		[XmlElement("Shaker")]
        public String Shaker {
            get {
                return ShakerField;
            } 
            set {
                ShakerField = value;
                NotifyPropertyChanged("Shaker");
            }
        }

        private String ShakerField; 

        /// <summary>
        /// MdHole property
        /// </summary>
		[Description("Hole measured depth at time of measurement.")]
        [ComponentElement]
		[XmlElement("MdHole")]
        public MeasuredDepthCoord MDHole {
            get {
                return MdHoleField;
            } 
            set {
                MdHoleField = value;
                NotifyPropertyChanged("MDHole");
            }
        }

        private MeasuredDepthCoord MdHoleField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time the information is related to.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// HoursRun property
        /// </summary>
		[Description("Hours run for this operation.")]
        [ComponentElement]
		[XmlElement("HoursRun")]
        public TimeMeasure HoursRun {
            get {
                return HoursRunField;
            } 
            set {
                HoursRunField = value;
                NotifyPropertyChanged("HoursRun");
            }
        }

        private TimeMeasure HoursRunField; 

        /// <summary>
        /// PcScreenCovered property
        /// </summary>
		[Description("Percent of screen covered by cuttings.")]
        [ComponentElement]
		[XmlElement("PcScreenCovered")]
        public AreaPerAreaMeasure PercentScreenCovered {
            get {
                return PcScreenCoveredField;
            } 
            set {
                PcScreenCoveredField = value;
                NotifyPropertyChanged("PercentScreenCovered");
            }
        }

        private AreaPerAreaMeasure PcScreenCoveredField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ShakerScreen property
        /// </summary>
		[ComponentElement]
		[XmlElement("ShakerScreen")]
        public ShakerScreen ShakerScreen {
            get {
                return ShakerScreenField;
            } 
            set {
                ShakerScreenField = value;
                NotifyPropertyChanged("ShakerScreen");
            }
        }

        private ShakerScreen ShakerScreenField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of ShakerOp")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RigResponse xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RigResponse", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RigResponse xsd type.")]
    public partial class RigResponse : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// RigHeading property
        /// </summary>
		[Description("Direction, relative to true north, to which the rig is facing.")]
        [ComponentElement]
		[XmlElement("RigHeading")]
        public PlaneAngleMeasure RigHeading {
            get {
                return RigHeadingField;
            } 
            set {
                RigHeadingField = value;
                NotifyPropertyChanged("RigHeading");
            }
        }

        private PlaneAngleMeasure RigHeadingField; 

        /// <summary>
        /// RigHeave property
        /// </summary>
		[Description("Maximum amplitude of the vertical motion of the rig.")]
        [ComponentElement]
		[XmlElement("RigHeave")]
        public LengthMeasure RigHeave {
            get {
                return RigHeaveField;
            } 
            set {
                RigHeaveField = value;
                NotifyPropertyChanged("RigHeave");
            }
        }

        private LengthMeasure RigHeaveField; 

        /// <summary>
        /// RigPitchAngle property
        /// </summary>
		[Description("Measure of the fore-aft rotational movement of the rig due the combined  effects of wind and waves; measured as the angle from horizontal")]
        [ComponentElement]
		[XmlElement("RigPitchAngle")]
        public PlaneAngleMeasure RigPitchAngle {
            get {
                return RigPitchAngleField;
            } 
            set {
                RigPitchAngleField = value;
                NotifyPropertyChanged("RigPitchAngle");
            }
        }

        private PlaneAngleMeasure RigPitchAngleField; 

        /// <summary>
        /// RigRollAngle property
        /// </summary>
		[Description("Measure of the side-to-side rotational movement of the rig due the combined  effects of wind and waves; measured as the angle from vertical")]
        [ComponentElement]
		[XmlElement("RigRollAngle")]
        public PlaneAngleMeasure RigRollAngle {
            get {
                return RigRollAngleField;
            } 
            set {
                RigRollAngleField = value;
                NotifyPropertyChanged("RigRollAngle");
            }
        }

        private PlaneAngleMeasure RigRollAngleField; 

        /// <summary>
        /// RiserAngle property
        /// </summary>
		[Description("Angle of the marine riser with the vertical.")]
        [ComponentElement]
		[XmlElement("RiserAngle")]
        public PlaneAngleMeasure RiserAngle {
            get {
                return RiserAngleField;
            } 
            set {
                RiserAngleField = value;
                NotifyPropertyChanged("RiserAngle");
            }
        }

        private PlaneAngleMeasure RiserAngleField; 

        /// <summary>
        /// RiserDirection property
        /// </summary>
		[Description("Direction of the marine riser.")]
        [ComponentElement]
		[XmlElement("RiserDirection")]
        public PlaneAngleMeasure RiserDirection {
            get {
                return RiserDirectionField;
            } 
            set {
                RiserDirectionField = value;
                NotifyPropertyChanged("RiserDirection");
            }
        }

        private PlaneAngleMeasure RiserDirectionField; 

        /// <summary>
        /// RiserTension property
        /// </summary>
		[Description("Tension of the marine riser.")]
        [ComponentElement]
		[XmlElement("RiserTension")]
        public ForceMeasure RiserTension {
            get {
                return RiserTensionField;
            } 
            set {
                RiserTensionField = value;
                NotifyPropertyChanged("RiserTension");
            }
        }

        private ForceMeasure RiserTensionField; 

        /// <summary>
        /// VariableDeckLoad property
        /// </summary>
		[Description("Current temporary load on the rig deck.")]
        [ComponentElement]
		[XmlElement("VariableDeckLoad")]
        public ForceMeasure VariableDeckLoad {
            get {
                return VariableDeckLoadField;
            } 
            set {
                VariableDeckLoadField = value;
                NotifyPropertyChanged("VariableDeckLoad");
            }
        }

        private ForceMeasure VariableDeckLoadField; 

        /// <summary>
        /// TotalDeckLoad property
        /// </summary>
		[Description("Total deck load.")]
        [ComponentElement]
		[XmlElement("TotalDeckLoad")]
        public ForceMeasure TotalDeckLoad {
            get {
                return TotalDeckLoadField;
            } 
            set {
                TotalDeckLoadField = value;
                NotifyPropertyChanged("TotalDeckLoad");
            }
        }

        private ForceMeasure TotalDeckLoadField; 

        /// <summary>
        /// GuideBaseAngle property
        /// </summary>
		[Description("Direction of the guide base.")]
        [ComponentElement]
		[XmlElement("GuideBaseAngle")]
        public PlaneAngleMeasure GuideBaseAngle {
            get {
                return GuideBaseAngleField;
            } 
            set {
                GuideBaseAngleField = value;
                NotifyPropertyChanged("GuideBaseAngle");
            }
        }

        private PlaneAngleMeasure GuideBaseAngleField; 

        /// <summary>
        /// BallJointAngle property
        /// </summary>
		[Description("Angle between riser and blow out preventer at the flex joint.")]
        [ComponentElement]
		[XmlElement("BallJointAngle")]
        public PlaneAngleMeasure BallJointAngle {
            get {
                return BallJointAngleField;
            } 
            set {
                BallJointAngleField = value;
                NotifyPropertyChanged("BallJointAngle");
            }
        }

        private PlaneAngleMeasure BallJointAngleField; 

        /// <summary>
        /// BallJointDirection property
        /// </summary>
		[Description("Direction of the ball joint.")]
        [ComponentElement]
		[XmlElement("BallJointDirection")]
        public PlaneAngleMeasure BallJointDirection {
            get {
                return BallJointDirectionField;
            } 
            set {
                BallJointDirectionField = value;
                NotifyPropertyChanged("BallJointDirection");
            }
        }

        private PlaneAngleMeasure BallJointDirectionField; 

        /// <summary>
        /// OffsetRig property
        /// </summary>
		[Description("Horizontal displacement of the rig relative to the wellhead.")]
        [ComponentElement]
		[XmlElement("OffsetRig")]
        public LengthMeasure OffsetRig {
            get {
                return OffsetRigField;
            } 
            set {
                OffsetRigField = value;
                NotifyPropertyChanged("OffsetRig");
            }
        }

        private LengthMeasure OffsetRigField; 

        /// <summary>
        /// LoadLeg1 property
        /// </summary>
		[Description("Load carried by leg of jackup.")]
        [ComponentElement]
		[XmlElement("LoadLeg1")]
        public ForceMeasure LoadLeg1 {
            get {
                return LoadLeg1Field;
            } 
            set {
                LoadLeg1Field = value;
                NotifyPropertyChanged("LoadLeg1");
            }
        }

        private ForceMeasure LoadLeg1Field; 

        /// <summary>
        /// LoadLeg2 property
        /// </summary>
		[Description("Load carried by leg of jackup.")]
        [ComponentElement]
		[XmlElement("LoadLeg2")]
        public ForceMeasure LoadLeg2 {
            get {
                return LoadLeg2Field;
            } 
            set {
                LoadLeg2Field = value;
                NotifyPropertyChanged("LoadLeg2");
            }
        }

        private ForceMeasure LoadLeg2Field; 

        /// <summary>
        /// LoadLeg3 property
        /// </summary>
		[Description("Load carried by leg of jackup.")]
        [ComponentElement]
		[XmlElement("LoadLeg3")]
        public ForceMeasure LoadLeg3 {
            get {
                return LoadLeg3Field;
            } 
            set {
                LoadLeg3Field = value;
                NotifyPropertyChanged("LoadLeg3");
            }
        }

        private ForceMeasure LoadLeg3Field; 

        /// <summary>
        /// LoadLeg4 property
        /// </summary>
		[Description("Load carried by leg of jackup.")]
        [ComponentElement]
		[XmlElement("LoadLeg4")]
        public ForceMeasure LoadLeg4 {
            get {
                return LoadLeg4Field;
            } 
            set {
                LoadLeg4Field = value;
                NotifyPropertyChanged("LoadLeg4");
            }
        }

        private ForceMeasure LoadLeg4Field; 

        /// <summary>
        /// PenetrationLeg1 property
        /// </summary>
		[Description("Penetration of leg into seabed.")]
        [ComponentElement]
		[XmlElement("PenetrationLeg1")]
        public LengthMeasure PenetrationLeg1 {
            get {
                return PenetrationLeg1Field;
            } 
            set {
                PenetrationLeg1Field = value;
                NotifyPropertyChanged("PenetrationLeg1");
            }
        }

        private LengthMeasure PenetrationLeg1Field; 

        /// <summary>
        /// PenetrationLeg2 property
        /// </summary>
		[Description("Penetration of leg into seabed.")]
        [ComponentElement]
		[XmlElement("PenetrationLeg2")]
        public LengthMeasure PenetrationLeg2 {
            get {
                return PenetrationLeg2Field;
            } 
            set {
                PenetrationLeg2Field = value;
                NotifyPropertyChanged("PenetrationLeg2");
            }
        }

        private LengthMeasure PenetrationLeg2Field; 

        /// <summary>
        /// PenetrationLeg3 property
        /// </summary>
		[Description("Penetration of leg into seabed")]
        [ComponentElement]
		[XmlElement("PenetrationLeg3")]
        public LengthMeasure PenetrationLeg3 {
            get {
                return PenetrationLeg3Field;
            } 
            set {
                PenetrationLeg3Field = value;
                NotifyPropertyChanged("PenetrationLeg3");
            }
        }

        private LengthMeasure PenetrationLeg3Field; 

        /// <summary>
        /// PenetrationLeg4 property
        /// </summary>
		[Description("Penetration of leg into seabed")]
        [ComponentElement]
		[XmlElement("PenetrationLeg4")]
        public LengthMeasure PenetrationLeg4 {
            get {
                return PenetrationLeg4Field;
            } 
            set {
                PenetrationLeg4Field = value;
                NotifyPropertyChanged("PenetrationLeg4");
            }
        }

        private LengthMeasure PenetrationLeg4Field; 

        /// <summary>
        /// DispRig property
        /// </summary>
		[Description("Vessel displacement (in water).")]
        [ComponentElement]
		[XmlElement("DispRig")]
        public LengthMeasure DispRig {
            get {
                return DispRigField;
            } 
            set {
                DispRigField = value;
                NotifyPropertyChanged("DispRig");
            }
        }

        private LengthMeasure DispRigField; 

        /// <summary>
        /// MeanDraft property
        /// </summary>
		[Description("Mean draft at mid-section.")]
        [ComponentElement]
		[XmlElement("MeanDraft")]
        public LengthMeasure MeanDraft {
            get {
                return MeanDraftField;
            } 
            set {
                MeanDraftField = value;
                NotifyPropertyChanged("MeanDraft");
            }
        }

        private LengthMeasure MeanDraftField; 

        /// <summary>
        /// AnchorTension property
        /// </summary>
		[RecurringElement]
		[XmlElement("AnchorTension")]
        public List<IndexedObject> AnchorTension {
            get {
                return AnchorTensionField;
            } 
            set {
                AnchorTensionField = value;
                NotifyPropertyChanged("AnchorTension");
            }
        }

         [XmlIgnore]
         public bool AnchorTensionSpecified
         {
            get {
             if(AnchorTensionField!=null)
                return AnchorTensionField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IndexedObject> AnchorTensionField; 

        /// <summary>
        /// AnchorAngle property
        /// </summary>
		[RecurringElement]
		[XmlElement("AnchorAngle")]
        public List<IndexedObject> AnchorAngle {
            get {
                return AnchorAngleField;
            } 
            set {
                AnchorAngleField = value;
                NotifyPropertyChanged("AnchorAngle");
            }
        }

         [XmlIgnore]
         public bool AnchorAngleSpecified
         {
            get {
             if(AnchorAngleField!=null)
                return AnchorAngleField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IndexedObject> AnchorAngleField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StnTrajCorUsed xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StnTrajCorUsed", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StnTrajCorUsed xsd type.")]
    public partial class StnTrajCorUsed : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GravAxialAccelCor property
        /// </summary>
		[Description("Calculated gravitational field strength correction.")]
        [ComponentElement]
		[XmlElement("GravAxialAccelCor")]
        public LinearAccelerationMeasure GravAxialAccelCor {
            get {
                return GravAxialAccelCorField;
            } 
            set {
                GravAxialAccelCorField = value;
                NotifyPropertyChanged("GravAxialAccelCor");
            }
        }

        private LinearAccelerationMeasure GravAxialAccelCorField; 

        /// <summary>
        /// GravTran1AccelCor property
        /// </summary>
		[Description("The correction applied to a cross-axial (direction 1) component  of the Earths gravitational field.")]
        [ComponentElement]
		[XmlElement("GravTran1AccelCor")]
        public LinearAccelerationMeasure GravTran1AccelCor {
            get {
                return GravTran1AccelCorField;
            } 
            set {
                GravTran1AccelCorField = value;
                NotifyPropertyChanged("GravTran1AccelCor");
            }
        }

        private LinearAccelerationMeasure GravTran1AccelCorField; 

        /// <summary>
        /// GravTran2AccelCor property
        /// </summary>
		[Description("The correction applied to a cross-axial (direction 2) component  of the Earths gravitational field.")]
        [ComponentElement]
		[XmlElement("GravTran2AccelCor")]
        public LinearAccelerationMeasure GravTran2AccelCor {
            get {
                return GravTran2AccelCorField;
            } 
            set {
                GravTran2AccelCorField = value;
                NotifyPropertyChanged("GravTran2AccelCor");
            }
        }

        private LinearAccelerationMeasure GravTran2AccelCorField; 

        /// <summary>
        /// MagAxialDrlstrCor property
        /// </summary>
		[Description("Axial magnetic drillstring correction.")]
        [ComponentElement]
		[XmlElement("MagAxialDrlstrCor")]
        public MagneticFluxDensityMeasure MagAxialDrlstrCor {
            get {
                return MagAxialDrlstrCorField;
            } 
            set {
                MagAxialDrlstrCorField = value;
                NotifyPropertyChanged("MagAxialDrlstrCor");
            }
        }

        private MagneticFluxDensityMeasure MagAxialDrlstrCorField; 

        /// <summary>
        /// MagTran1DrlstrCor property
        /// </summary>
		[Description("Cross-axial magnetic correction.")]
        [ComponentElement]
		[XmlElement("MagTran1DrlstrCor")]
        public MagneticFluxDensityMeasure MagTran1DrlstrCor {
            get {
                return MagTran1DrlstrCorField;
            } 
            set {
                MagTran1DrlstrCorField = value;
                NotifyPropertyChanged("MagTran1DrlstrCor");
            }
        }

        private MagneticFluxDensityMeasure MagTran1DrlstrCorField; 

        /// <summary>
        /// MagTran2DrlstrCor property
        /// </summary>
		[Description("Cross-axial magnetic correction.")]
        [ComponentElement]
		[XmlElement("MagTran2DrlstrCor")]
        public MagneticFluxDensityMeasure MagTran2DrlstrCor {
            get {
                return MagTran2DrlstrCorField;
            } 
            set {
                MagTran2DrlstrCorField = value;
                NotifyPropertyChanged("MagTran2DrlstrCor");
            }
        }

        private MagneticFluxDensityMeasure MagTran2DrlstrCorField; 

        /// <summary>
        /// MagTran1MSACor property
        /// </summary>
		[Description("Cross-axial (direction 1) magnetic correction due to multi-station analysis process.")]
        [ComponentElement]
		[XmlElement("MagTran1MSACor")]
        public MagneticFluxDensityMeasure MagTran1MSACor {
            get {
                return MagTran1MSACorField;
            } 
            set {
                MagTran1MSACorField = value;
                NotifyPropertyChanged("MagTran1MSACor");
            }
        }

        private MagneticFluxDensityMeasure MagTran1MSACorField; 

        /// <summary>
        /// MagTran2MSACor property
        /// </summary>
		[Description("Cross-axial (direction 2) magnetic correction due to multi-station analysis process.")]
        [ComponentElement]
		[XmlElement("MagTran2MSACor")]
        public MagneticFluxDensityMeasure MagTran2MSACor {
            get {
                return MagTran2MSACorField;
            } 
            set {
                MagTran2MSACorField = value;
                NotifyPropertyChanged("MagTran2MSACor");
            }
        }

        private MagneticFluxDensityMeasure MagTran2MSACorField; 

        /// <summary>
        /// MagAxialMSACor property
        /// </summary>
		[Description("Axial magnetic correction due to multi-station analysis process.")]
        [ComponentElement]
		[XmlElement("MagAxialMSACor")]
        public MagneticFluxDensityMeasure MagAxialMSACor {
            get {
                return MagAxialMSACorField;
            } 
            set {
                MagAxialMSACorField = value;
                NotifyPropertyChanged("MagAxialMSACor");
            }
        }

        private MagneticFluxDensityMeasure MagAxialMSACorField; 

        /// <summary>
        /// SagIncCor property
        /// </summary>
		[Description("Calculated sag correction to inclination.")]
        [ComponentElement]
		[XmlElement("SagIncCor")]
        public PlaneAngleMeasure SagIncCor {
            get {
                return SagIncCorField;
            } 
            set {
                SagIncCorField = value;
                NotifyPropertyChanged("SagIncCor");
            }
        }

        private PlaneAngleMeasure SagIncCorField; 

        /// <summary>
        /// SagAziCor property
        /// </summary>
		[Description("Calculated cosag correction to azimuth.")]
        [ComponentElement]
		[XmlElement("SagAziCor")]
        public PlaneAngleMeasure SagAziCor {
            get {
                return SagAziCorField;
            } 
            set {
                SagAziCorField = value;
                NotifyPropertyChanged("SagAziCor");
            }
        }

        private PlaneAngleMeasure SagAziCorField; 

        /// <summary>
        /// StnMagDeclUsed property
        /// </summary>
		[Description("Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.")]
        [ComponentElement]
		[XmlElement("StnMagDeclUsed")]
        public PlaneAngleMeasure StnMagDeclUsed {
            get {
                return StnMagDeclUsedField;
            } 
            set {
                StnMagDeclUsedField = value;
                NotifyPropertyChanged("StnMagDeclUsed");
            }
        }

        private PlaneAngleMeasure StnMagDeclUsedField; 

        /// <summary>
        /// StnGridConUsed property
        /// </summary>
		[Description("Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.")]
        [ComponentElement]
		[XmlElement("StnGridConUsed")]
        public PlaneAngleMeasure StnGridConUsed {
            get {
                return StnGridConUsedField;
            } 
            set {
                StnGridConUsedField = value;
                NotifyPropertyChanged("StnGridConUsed");
            }
        }

        private PlaneAngleMeasure StnGridConUsedField; 

        /// <summary>
        /// DirSensorOffset property
        /// </summary>
		[Description("Offset relative to bit.")]
        [ComponentElement]
		[XmlElement("DirSensorOffset")]
        public LengthMeasure DirSensorOffset {
            get {
                return DirSensorOffsetField;
            } 
            set {
                DirSensorOffsetField = value;
                NotifyPropertyChanged("DirSensorOffset");
            }
        }

        private LengthMeasure DirSensorOffsetField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LinearAccelerationMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LinearAccelerationMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LinearAccelerationMeasure xsd type.")]
    public partial class LinearAccelerationMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LinearAccelerationMeasure class.
        /// </summary>
        public LinearAccelerationMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LinearAccelerationMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LinearAccelerationMeasure(Double value, LinearAccelerationUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public LinearAccelerationUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LinearAccelerationUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MagneticFluxDensityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MagneticFluxDensityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MagneticFluxDensityMeasure xsd type.")]
    public partial class MagneticFluxDensityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MagneticFluxDensityMeasure class.
        /// </summary>
        public MagneticFluxDensityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MagneticFluxDensityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MagneticFluxDensityMeasure(Double value, MagneticFluxDensityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public MagneticFluxDensityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MagneticFluxDensityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StnTrajRawData xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StnTrajRawData", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StnTrajRawData xsd type.")]
    public partial class StnTrajRawData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GravAxialRaw property
        /// </summary>
		[Description("Uncorrected gravitational field strength measured in axial direction.")]
        [ComponentElement]
		[XmlElement("GravAxialRaw")]
        public LinearAccelerationMeasure GravAxialRaw {
            get {
                return GravAxialRawField;
            } 
            set {
                GravAxialRawField = value;
                NotifyPropertyChanged("GravAxialRaw");
            }
        }

        private LinearAccelerationMeasure GravAxialRawField; 

        /// <summary>
        /// GravTran1Raw property
        /// </summary>
		[Description("Uncorrected gravitational field strength measured in transverse direction.")]
        [ComponentElement]
		[XmlElement("GravTran1Raw")]
        public LinearAccelerationMeasure GravTran1Raw {
            get {
                return GravTran1RawField;
            } 
            set {
                GravTran1RawField = value;
                NotifyPropertyChanged("GravTran1Raw");
            }
        }

        private LinearAccelerationMeasure GravTran1RawField; 

        /// <summary>
        /// GravTran2Raw property
        /// </summary>
		[Description("Uncorrected gravitational field strength measured in transverse direction,  approximately normal to tran1.")]
        [ComponentElement]
		[XmlElement("GravTran2Raw")]
        public LinearAccelerationMeasure GravTran2Raw {
            get {
                return GravTran2RawField;
            } 
            set {
                GravTran2RawField = value;
                NotifyPropertyChanged("GravTran2Raw");
            }
        }

        private LinearAccelerationMeasure GravTran2RawField; 

        /// <summary>
        /// MagAxialRaw property
        /// </summary>
		[Description("Uncorrected magnetic field strength measured in axial direction.")]
        [ComponentElement]
		[XmlElement("MagAxialRaw")]
        public MagneticFluxDensityMeasure MagAxialRaw {
            get {
                return MagAxialRawField;
            } 
            set {
                MagAxialRawField = value;
                NotifyPropertyChanged("MagAxialRaw");
            }
        }

        private MagneticFluxDensityMeasure MagAxialRawField; 

        /// <summary>
        /// MagTran1Raw property
        /// </summary>
		[Description("Uncorrected magnetic field strength measured in transverse direction.")]
        [ComponentElement]
		[XmlElement("MagTran1Raw")]
        public MagneticFluxDensityMeasure MagTran1Raw {
            get {
                return MagTran1RawField;
            } 
            set {
                MagTran1RawField = value;
                NotifyPropertyChanged("MagTran1Raw");
            }
        }

        private MagneticFluxDensityMeasure MagTran1RawField; 

        /// <summary>
        /// MagTran2Raw property
        /// </summary>
		[Description("Uncorrected magnetic field strength measured in transverse direction,  approximately normal to tran1.")]
        [ComponentElement]
		[XmlElement("MagTran2Raw")]
        public MagneticFluxDensityMeasure MagTran2Raw {
            get {
                return MagTran2RawField;
            } 
            set {
                MagTran2RawField = value;
                NotifyPropertyChanged("MagTran2Raw");
            }
        }

        private MagneticFluxDensityMeasure MagTran2RawField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RefWellboreTrajectoryStation xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RefWellboreTrajectoryStation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RefWellboreTrajectoryStation xsd type.")]
    public partial class RefWellboreTrajectoryStation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// StationReference property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the trajectoryStation within the parent trajectory. This is a special case where we only use a uid for the pointer. The natural identity of a station is its physical characteristics (e.g., md).")]
		[XmlElement("StationReference")]
        public String StationReference {
            get {
                return StationReferenceField;
            } 
            set {
                StationReferenceField = value;
                NotifyPropertyChanged("StationReference");
            }
        }

        private String StationReferenceField; 

        /// <summary>
        /// TrajectoryParent property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the trajectory within the parent wellbore. This trajectory contains the trajectoryStation.")]
		[XmlElement("TrajectoryParent")]
        public String TrajectoryParent {
            get {
                return TrajectoryParentField;
            } 
            set {
                TrajectoryParentField = value;
                NotifyPropertyChanged("TrajectoryParent");
            }
        }

        private String TrajectoryParentField; 

        /// <summary>
        /// WellboreParent property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the wellbore that contains the trajectory. This is not needed unless the trajectory is outside the  context of a common parent wellbore.")]
		[XmlElement("WellboreParent")]
        public String WellboreParent {
            get {
                return WellboreParentField;
            } 
            set {
                WellboreParentField = value;
                NotifyPropertyChanged("WellboreParent");
            }
        }

        private String WellboreParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StnTrajMatrixCov xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StnTrajMatrixCov", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StnTrajMatrixCov xsd type.")]
    public partial class StnTrajMatrixCov : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VarianceNN property
        /// </summary>
		[Description("Covariance north north.")]
        [ComponentElement]
		[XmlElement("VarianceNN")]
        public AreaMeasure VarianceNN {
            get {
                return VarianceNNField;
            } 
            set {
                VarianceNNField = value;
                NotifyPropertyChanged("VarianceNN");
            }
        }

        private AreaMeasure VarianceNNField; 

        /// <summary>
        /// VarianceNE property
        /// </summary>
		[Description("Crossvariance north east.")]
        [ComponentElement]
		[XmlElement("VarianceNE")]
        public AreaMeasure VarianceNE {
            get {
                return VarianceNEField;
            } 
            set {
                VarianceNEField = value;
                NotifyPropertyChanged("VarianceNE");
            }
        }

        private AreaMeasure VarianceNEField; 

        /// <summary>
        /// VarianceNVert property
        /// </summary>
		[Description("Crossvariance north vertical.")]
        [ComponentElement]
		[XmlElement("VarianceNVert")]
        public AreaMeasure VarianceNVert {
            get {
                return VarianceNVertField;
            } 
            set {
                VarianceNVertField = value;
                NotifyPropertyChanged("VarianceNVert");
            }
        }

        private AreaMeasure VarianceNVertField; 

        /// <summary>
        /// VarianceEE property
        /// </summary>
		[Description("Covariance east east.")]
        [ComponentElement]
		[XmlElement("VarianceEE")]
        public AreaMeasure VarianceEE {
            get {
                return VarianceEEField;
            } 
            set {
                VarianceEEField = value;
                NotifyPropertyChanged("VarianceEE");
            }
        }

        private AreaMeasure VarianceEEField; 

        /// <summary>
        /// VarianceEVert property
        /// </summary>
		[Description("Crossvariance east vertical.")]
        [ComponentElement]
		[XmlElement("VarianceEVert")]
        public AreaMeasure VarianceEVert {
            get {
                return VarianceEVertField;
            } 
            set {
                VarianceEVertField = value;
                NotifyPropertyChanged("VarianceEVert");
            }
        }

        private AreaMeasure VarianceEVertField; 

        /// <summary>
        /// VarianceVertVert property
        /// </summary>
		[Description("Covariance vertical vertical.")]
        [ComponentElement]
		[XmlElement("VarianceVertVert")]
        public AreaMeasure VarianceVertVert {
            get {
                return VarianceVertVertField;
            } 
            set {
                VarianceVertVertField = value;
                NotifyPropertyChanged("VarianceVertVert");
            }
        }

        private AreaMeasure VarianceVertVertField; 

        /// <summary>
        /// BiasN property
        /// </summary>
		[Description("Bias north.")]
        [ComponentElement]
		[XmlElement("BiasN")]
        public LengthMeasure BiasN {
            get {
                return BiasNField;
            } 
            set {
                BiasNField = value;
                NotifyPropertyChanged("BiasN");
            }
        }

        private LengthMeasure BiasNField; 

        /// <summary>
        /// BiasE property
        /// </summary>
		[Description("Bias east.")]
        [ComponentElement]
		[XmlElement("BiasE")]
        public LengthMeasure BiasE {
            get {
                return BiasEField;
            } 
            set {
                BiasEField = value;
                NotifyPropertyChanged("BiasE");
            }
        }

        private LengthMeasure BiasEField; 

        /// <summary>
        /// BiasVert property
        /// </summary>
		[Description("Bias vertical. The coordinate system is set up in a right-handed  configuration which makes the vertical direction increasing (i.e., positive) downwards.")]
        [ComponentElement]
		[XmlElement("BiasVert")]
        public LengthMeasure BiasVert {
            get {
                return BiasVertField;
            } 
            set {
                BiasVertField = value;
                NotifyPropertyChanged("BiasVert");
            }
        }

        private LengthMeasure BiasVertField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StnTrajValid xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StnTrajValid", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StnTrajValid xsd type.")]
    public partial class StnTrajValid : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// MagTotalFieldCalc property
        /// </summary>
		[Description("Calculated total intensity of the geomagnetic field as sum of BGGM,  IFR and local field.")]
        [ComponentElement]
		[XmlElement("MagTotalFieldCalc")]
        public MagneticFluxDensityMeasure MagTotalFieldCalc {
            get {
                return MagTotalFieldCalcField;
            } 
            set {
                MagTotalFieldCalcField = value;
                NotifyPropertyChanged("MagTotalFieldCalc");
            }
        }

        private MagneticFluxDensityMeasure MagTotalFieldCalcField; 

        /// <summary>
        /// MagDipAngleCalc property
        /// </summary>
		[Description("Calculated magnetic dip (inclination), the angle between the horizontal  and the geomagnetic field (positive down, res .001).")]
        [ComponentElement]
		[XmlElement("MagDipAngleCalc")]
        public PlaneAngleMeasure MagDipAngleCalc {
            get {
                return MagDipAngleCalcField;
            } 
            set {
                MagDipAngleCalcField = value;
                NotifyPropertyChanged("MagDipAngleCalc");
            }
        }

        private PlaneAngleMeasure MagDipAngleCalcField; 

        /// <summary>
        /// GravTotalFieldCalc property
        /// </summary>
		[Description("Calculated total gravitational field.")]
        [ComponentElement]
		[XmlElement("GravTotalFieldCalc")]
        public LinearAccelerationMeasure GravTotalFieldCalc {
            get {
                return GravTotalFieldCalcField;
            } 
            set {
                GravTotalFieldCalcField = value;
                NotifyPropertyChanged("GravTotalFieldCalc");
            }
        }

        private LinearAccelerationMeasure GravTotalFieldCalcField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the TrajectoryStation xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_TrajectoryStation", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the TrajectoryStation xsd type.")]
    public partial class TrajectoryStation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ManuallyEntered property
        /// </summary>
		[Description("Indicates whether the trajectory station information was manually entered by a human.")]
		[XmlElement("ManuallyEntered")]
        public Boolean? ManuallyEntered {
            get {
                return ManuallyEnteredField;
            } 
            set {
                ManuallyEnteredField = value;
             if(value!=null) 
                 this.ManuallyEnteredSpecified = true;
                NotifyPropertyChanged("ManuallyEntered");
            }
        }

        private Boolean? ManuallyEnteredField; 

        /// <summary>
        /// ManuallyEnteredSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ManuallyEnteredSpecified {
            get {
                return ManuallyEnteredSpecifiedField;
            } 
            set {
                ManuallyEnteredSpecifiedField = value;
                NotifyPropertyChanged("ManuallyEnteredSpecified");
            }
        }

        private Boolean ManuallyEnteredSpecifiedField; 

        /// <summary>
        /// Target property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the intended target of this station.")]
		[XmlElement("Target")]
        public String Target {
            get {
                return TargetField;
            } 
            set {
                TargetField = value;
                NotifyPropertyChanged("Target");
            }
        }

        private String TargetField; 

        /// <summary>
        /// DTimStn property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time the station was measured or created.")]
		[XmlElement("DTimStn")]
        public String DateTimeStn {
            get {
                return DTimStnField;
            } 
            set {
                DTimStnField = value;
                NotifyPropertyChanged("DateTimeStn");
            }
        }

        private String DTimStnField; 

        /// <summary>
        /// TypeTrajStation property
        /// </summary>
		[Required]
        [Description("Type of survey station.")]
		[XmlElement("TypeTrajStation")]
        public TrajStationType? TypeTrajStation {
            get {
                return TypeTrajStationField;
            } 
            set {
                TypeTrajStationField = value;
                NotifyPropertyChanged("TypeTrajStation");
            }
        }

        private TrajStationType? TypeTrajStationField; 

        /// <summary>
        /// TypeSurveyTool property
        /// </summary>
		[StringLength(40)]
        [Description("The type of tool used for the measurements.")]
		[XmlElement("TypeSurveyTool")]
        public String TypeSurveyTool {
            get {
                return TypeSurveyToolField;
            } 
            set {
                TypeSurveyToolField = value;
                NotifyPropertyChanged("TypeSurveyTool");
            }
        }

        private String TypeSurveyToolField; 

        /// <summary>
        /// CalcAlgorithm property
        /// </summary>
		[StringLength(40)]
        [Description("The type of algorithm used in the position calculation.")]
		[XmlElement("CalcAlgorithm")]
        public String CalcAlgorithm {
            get {
                return CalcAlgorithmField;
            } 
            set {
                CalcAlgorithmField = value;
                NotifyPropertyChanged("CalcAlgorithm");
            }
        }

        private String CalcAlgorithmField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Required]
        [Description("Measured depth of measurement from the drill datum. This is an API \"node-index\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("Vertical depth of the measurements.")]
        [ComponentElement]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// Incl property
        /// </summary>
		[Description("Hole inclination, measured from vertical.")]
        [ComponentElement]
		[XmlElement("Incl")]
        public PlaneAngleMeasure Incl {
            get {
                return InclField;
            } 
            set {
                InclField = value;
                NotifyPropertyChanged("Incl");
            }
        }

        private PlaneAngleMeasure InclField; 

        /// <summary>
        /// Azi property
        /// </summary>
		[Description("Hole azimuth. Corrected to wells azimuth reference.")]
        [ComponentElement]
		[XmlElement("Azi")]
        public PlaneAngleMeasure Azi {
            get {
                return AziField;
            } 
            set {
                AziField = value;
                NotifyPropertyChanged("Azi");
            }
        }

        private PlaneAngleMeasure AziField; 

        /// <summary>
        /// Mtf property
        /// </summary>
		[Description("Toolface angle (magnetic).")]
        [ComponentElement]
		[XmlElement("Mtf")]
        public PlaneAngleMeasure Mtf {
            get {
                return MtfField;
            } 
            set {
                MtfField = value;
                NotifyPropertyChanged("Mtf");
            }
        }

        private PlaneAngleMeasure MtfField; 

        /// <summary>
        /// Gtf property
        /// </summary>
		[Description("Toolface angle (gravity).")]
        [ComponentElement]
		[XmlElement("Gtf")]
        public PlaneAngleMeasure Gtf {
            get {
                return GtfField;
            } 
            set {
                GtfField = value;
                NotifyPropertyChanged("Gtf");
            }
        }

        private PlaneAngleMeasure GtfField; 

        /// <summary>
        /// DispNs property
        /// </summary>
		[Description("North-south offset, positive to the North.  This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.")]
        [ComponentElement]
		[XmlElement("DispNs")]
        public LengthMeasure DispNS {
            get {
                return DispNsField;
            } 
            set {
                DispNsField = value;
                NotifyPropertyChanged("DispNS");
            }
        }

        private LengthMeasure DispNsField; 

        /// <summary>
        /// DispEw property
        /// </summary>
		[Description("East-west offset, positive to the East. This is relative to wellLocation with a North axis orientation of aziRef.  If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.")]
        [ComponentElement]
		[XmlElement("DispEw")]
        public LengthMeasure DispEW {
            get {
                return DispEwField;
            } 
            set {
                DispEwField = value;
                NotifyPropertyChanged("DispEW");
            }
        }

        private LengthMeasure DispEwField; 

        /// <summary>
        /// VertSect property
        /// </summary>
		[Description("Distance along vertical section azimuth plane.")]
        [ComponentElement]
		[XmlElement("VertSect")]
        public LengthMeasure VertSect {
            get {
                return VertSectField;
            } 
            set {
                VertSectField = value;
                NotifyPropertyChanged("VertSect");
            }
        }

        private LengthMeasure VertSectField; 

        /// <summary>
        /// Dls property
        /// </summary>
		[Description("Dogleg severity.")]
        [ComponentElement]
		[XmlElement("Dls")]
        public AnglePerLengthMeasure DoglegSeverity {
            get {
                return DlsField;
            } 
            set {
                DlsField = value;
                NotifyPropertyChanged("DoglegSeverity");
            }
        }

        private AnglePerLengthMeasure DlsField; 

        /// <summary>
        /// RateTurn property
        /// </summary>
		[Description("Turn rate, radius of curvature computation.")]
        [ComponentElement]
		[XmlElement("RateTurn")]
        public AnglePerLengthMeasure RateTurn {
            get {
                return RateTurnField;
            } 
            set {
                RateTurnField = value;
                NotifyPropertyChanged("RateTurn");
            }
        }

        private AnglePerLengthMeasure RateTurnField; 

        /// <summary>
        /// RateBuild property
        /// </summary>
		[Description("Build Rate, radius of curvature computation.")]
        [ComponentElement]
		[XmlElement("RateBuild")]
        public AnglePerLengthMeasure RateBuild {
            get {
                return RateBuildField;
            } 
            set {
                RateBuildField = value;
                NotifyPropertyChanged("RateBuild");
            }
        }

        private AnglePerLengthMeasure RateBuildField; 

        /// <summary>
        /// MdDelta property
        /// </summary>
		[Description("Delta measured depth from previous station.")]
        [ComponentElement]
		[XmlElement("MdDelta")]
        public LengthMeasure MDDelta {
            get {
                return MdDeltaField;
            } 
            set {
                MdDeltaField = value;
                NotifyPropertyChanged("MDDelta");
            }
        }

        private LengthMeasure MdDeltaField; 

        /// <summary>
        /// TvdDelta property
        /// </summary>
		[Description("Delta true vertical depth from previous station.")]
        [ComponentElement]
		[XmlElement("TvdDelta")]
        public LengthMeasure TvdDelta {
            get {
                return TvdDeltaField;
            } 
            set {
                TvdDeltaField = value;
                NotifyPropertyChanged("TvdDelta");
            }
        }

        private LengthMeasure TvdDeltaField; 

        /// <summary>
        /// GravTotalUncert property
        /// </summary>
		[Description("Survey tool gravity uncertainty.")]
        [ComponentElement]
		[XmlElement("GravTotalUncert")]
        public LinearAccelerationMeasure GravTotalUncert {
            get {
                return GravTotalUncertField;
            } 
            set {
                GravTotalUncertField = value;
                NotifyPropertyChanged("GravTotalUncert");
            }
        }

        private LinearAccelerationMeasure GravTotalUncertField; 

        /// <summary>
        /// DipAngleUncert property
        /// </summary>
		[Description("Survey tool dip uncertainty.")]
        [ComponentElement]
		[XmlElement("DipAngleUncert")]
        public PlaneAngleMeasure DipAngleUncert {
            get {
                return DipAngleUncertField;
            } 
            set {
                DipAngleUncertField = value;
                NotifyPropertyChanged("DipAngleUncert");
            }
        }

        private PlaneAngleMeasure DipAngleUncertField; 

        /// <summary>
        /// MagTotalUncert property
        /// </summary>
		[Description("Survey tool magnetic uncertainty.")]
        [ComponentElement]
		[XmlElement("MagTotalUncert")]
        public MagneticFluxDensityMeasure MagTotalUncert {
            get {
                return MagTotalUncertField;
            } 
            set {
                MagTotalUncertField = value;
                NotifyPropertyChanged("MagTotalUncert");
            }
        }

        private MagneticFluxDensityMeasure MagTotalUncertField; 

        /// <summary>
        /// GravAccelCorUsed property
        /// </summary>
		[Description("Was an accelerometer alignment correction applied to survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("GravAccelCorUsed")]
        public Boolean? GravAccelCorUsed {
            get {
                return GravAccelCorUsedField;
            } 
            set {
                GravAccelCorUsedField = value;
             if(value!=null) 
                 this.GravAccelCorUsedSpecified = true;
                NotifyPropertyChanged("GravAccelCorUsed");
            }
        }

        private Boolean? GravAccelCorUsedField; 

        /// <summary>
        /// GravAccelCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean GravAccelCorUsedSpecified {
            get {
                return GravAccelCorUsedSpecifiedField;
            } 
            set {
                GravAccelCorUsedSpecifiedField = value;
                NotifyPropertyChanged("GravAccelCorUsedSpecified");
            }
        }

        private Boolean GravAccelCorUsedSpecifiedField; 

        /// <summary>
        /// MagXAxialCorUsed property
        /// </summary>
		[Description("Was a magnetometer alignment correction applied to survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("MagXAxialCorUsed")]
        public Boolean? MagXAxialCorUsed {
            get {
                return MagXAxialCorUsedField;
            } 
            set {
                MagXAxialCorUsedField = value;
             if(value!=null) 
                 this.MagXAxialCorUsedSpecified = true;
                NotifyPropertyChanged("MagXAxialCorUsed");
            }
        }

        private Boolean? MagXAxialCorUsedField; 

        /// <summary>
        /// MagXAxialCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MagXAxialCorUsedSpecified {
            get {
                return MagXAxialCorUsedSpecifiedField;
            } 
            set {
                MagXAxialCorUsedSpecifiedField = value;
                NotifyPropertyChanged("MagXAxialCorUsedSpecified");
            }
        }

        private Boolean MagXAxialCorUsedSpecifiedField; 

        /// <summary>
        /// SagCorUsed property
        /// </summary>
		[Description("Was a bottom hole assembly sag correction applied to the survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("SagCorUsed")]
        public Boolean? SagCorUsed {
            get {
                return SagCorUsedField;
            } 
            set {
                SagCorUsedField = value;
             if(value!=null) 
                 this.SagCorUsedSpecified = true;
                NotifyPropertyChanged("SagCorUsed");
            }
        }

        private Boolean? SagCorUsedField; 

        /// <summary>
        /// SagCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean SagCorUsedSpecified {
            get {
                return SagCorUsedSpecifiedField;
            } 
            set {
                SagCorUsedSpecifiedField = value;
                NotifyPropertyChanged("SagCorUsedSpecified");
            }
        }

        private Boolean SagCorUsedSpecifiedField; 

        /// <summary>
        /// MagDrlstrCorUsed property
        /// </summary>
		[Description("Was a drillstring magnetism correction applied to survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("MagDrlstrCorUsed")]
        public Boolean? MagDrlstrCorUsed {
            get {
                return MagDrlstrCorUsedField;
            } 
            set {
                MagDrlstrCorUsedField = value;
             if(value!=null) 
                 this.MagDrlstrCorUsedSpecified = true;
                NotifyPropertyChanged("MagDrlstrCorUsed");
            }
        }

        private Boolean? MagDrlstrCorUsedField; 

        /// <summary>
        /// MagDrlstrCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MagDrlstrCorUsedSpecified {
            get {
                return MagDrlstrCorUsedSpecifiedField;
            } 
            set {
                MagDrlstrCorUsedSpecifiedField = value;
                NotifyPropertyChanged("MagDrlstrCorUsedSpecified");
            }
        }

        private Boolean MagDrlstrCorUsedSpecifiedField; 

        /// <summary>
        /// InfieldRefCorUsed property
        /// </summary>
		[Description("Was an In Field Referencing (IFR) correction applied to the azimuth value?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). An IFR survey measures the strength and direction of the Earth's magnetic field over the area of interest.  By taking a geomagnetic modelled values away  from these field survey results, we are left with a local crustal correction,  which since it is assumed geological in nature, only varies over geological timescales.   For MWD survey operations, these corrections are applied in addition to the geomagnetic model  to provide accurate knowledge of the local magnetic field and hence to improve the  accuracy of MWD magnetic azimuth measurements.")]
		[XmlElement("InfieldRefCorUsed")]
        public Boolean? InfieldRefCorUsed {
            get {
                return InfieldRefCorUsedField;
            } 
            set {
                InfieldRefCorUsedField = value;
             if(value!=null) 
                 this.InfieldRefCorUsedSpecified = true;
                NotifyPropertyChanged("InfieldRefCorUsed");
            }
        }

        private Boolean? InfieldRefCorUsedField; 

        /// <summary>
        /// InfieldRefCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean InfieldRefCorUsedSpecified {
            get {
                return InfieldRefCorUsedSpecifiedField;
            } 
            set {
                InfieldRefCorUsedSpecifiedField = value;
                NotifyPropertyChanged("InfieldRefCorUsedSpecified");
            }
        }

        private Boolean InfieldRefCorUsedSpecifiedField; 

        /// <summary>
        /// InterpolatedInfieldRefCorUsed property
        /// </summary>
		[Description("Was an Interpolated In Field Referencing (IIFR) correction applied to the azimuth value?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). Interpolated In Field Referencing measures the diurnal Earth magnetic field variations resulting from electrical  currents in the ionosphere and effects of magnetic storms hitting the Earth. It increases again the accuracy  of the magnetic azimuth measurement.")]
		[XmlElement("InterpolatedInfieldRefCorUsed")]
        public Boolean? InterpolatedInfieldRefCorUsed {
            get {
                return InterpolatedInfieldRefCorUsedField;
            } 
            set {
                InterpolatedInfieldRefCorUsedField = value;
             if(value!=null) 
                 this.InterpolatedInfieldRefCorUsedSpecified = true;
                NotifyPropertyChanged("InterpolatedInfieldRefCorUsed");
            }
        }

        private Boolean? InterpolatedInfieldRefCorUsedField; 

        /// <summary>
        /// InterpolatedInfieldRefCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean InterpolatedInfieldRefCorUsedSpecified {
            get {
                return InterpolatedInfieldRefCorUsedSpecifiedField;
            } 
            set {
                InterpolatedInfieldRefCorUsedSpecifiedField = value;
                NotifyPropertyChanged("InterpolatedInfieldRefCorUsedSpecified");
            }
        }

        private Boolean InterpolatedInfieldRefCorUsedSpecifiedField; 

        /// <summary>
        /// InHoleRefCorUsed property
        /// </summary>
		[Description("Was an In Hole Referencing (IHR) correction applied to the inclination and/or azimuth values?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). In-Hole Referencing essentially involves comparing gyro surveys to MWD surveys in a tangent  section of a well. Once a small part of a tangent section has been drilled and surveyed using an  MWD tool, then an open hole (OH) gyro is run. By comparing the Gyro surveys to the MWD  surveys a correction can be calculated for the MWD. This correction is then assumed as valid  for the rest of the tangent section allowing to have a near gyro accuracy for the whole section,  therefore reducing the ellipse of uncertainty (EOU) size.")]
		[XmlElement("InHoleRefCorUsed")]
        public Boolean? InHoleRefCorUsed {
            get {
                return InHoleRefCorUsedField;
            } 
            set {
                InHoleRefCorUsedField = value;
             if(value!=null) 
                 this.InHoleRefCorUsedSpecified = true;
                NotifyPropertyChanged("InHoleRefCorUsed");
            }
        }

        private Boolean? InHoleRefCorUsedField; 

        /// <summary>
        /// InHoleRefCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean InHoleRefCorUsedSpecified {
            get {
                return InHoleRefCorUsedSpecifiedField;
            } 
            set {
                InHoleRefCorUsedSpecifiedField = value;
                NotifyPropertyChanged("InHoleRefCorUsedSpecified");
            }
        }

        private Boolean InHoleRefCorUsedSpecifiedField; 

        /// <summary>
        /// AxialMagInterferenceCorUsed property
        /// </summary>
		[Description("Was an Axial Magnetic Interference (AMI) correction applied to the azimuth value?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). Most of the BHAs used to drill wells include an MWD tool. An MWD is a magnetic survey tool and as  such suffer from magnetic interferences from a wide variety of sources. Magnetic interferences can be  categorized into axial and radial type interferences.  Axial interferences are mainly the result of magnetic poles from the drill string steel components  located below and above the MWD tool. Radial interferences are numerous.  Therefore, there is a risk that magXAxialCorUsed includes both Axial and radial corrections.")]
		[XmlElement("AxialMagInterferenceCorUsed")]
        public Boolean? AxialMagInterferenceCorUsed {
            get {
                return AxialMagInterferenceCorUsedField;
            } 
            set {
                AxialMagInterferenceCorUsedField = value;
             if(value!=null) 
                 this.AxialMagInterferenceCorUsedSpecified = true;
                NotifyPropertyChanged("AxialMagInterferenceCorUsed");
            }
        }

        private Boolean? AxialMagInterferenceCorUsedField; 

        /// <summary>
        /// AxialMagInterferenceCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AxialMagInterferenceCorUsedSpecified {
            get {
                return AxialMagInterferenceCorUsedSpecifiedField;
            } 
            set {
                AxialMagInterferenceCorUsedSpecifiedField = value;
                NotifyPropertyChanged("AxialMagInterferenceCorUsedSpecified");
            }
        }

        private Boolean AxialMagInterferenceCorUsedSpecifiedField; 

        /// <summary>
        /// CosagCorUsed property
        /// </summary>
		[Description("WWas a Cosag Correction applied to the azimuth values?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). The BHA Sag Correction is the same as the Sag Correction except it includes the horizontal  misalignment (Cosag).")]
		[XmlElement("CosagCorUsed")]
        public Boolean? CosagCorUsed {
            get {
                return CosagCorUsedField;
            } 
            set {
                CosagCorUsedField = value;
             if(value!=null) 
                 this.CosagCorUsedSpecified = true;
                NotifyPropertyChanged("CosagCorUsed");
            }
        }

        private Boolean? CosagCorUsedField; 

        /// <summary>
        /// CosagCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CosagCorUsedSpecified {
            get {
                return CosagCorUsedSpecifiedField;
            } 
            set {
                CosagCorUsedSpecifiedField = value;
                NotifyPropertyChanged("CosagCorUsedSpecified");
            }
        }

        private Boolean CosagCorUsedSpecifiedField; 

        /// <summary>
        /// MSACorUsed property
        /// </summary>
		[Description("Was a correction applied to the survey due to a  Multi-Station Analysis process?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("MSACorUsed")]
        public Boolean? MSACorUsed {
            get {
                return MSACorUsedField;
            } 
            set {
                MSACorUsedField = value;
             if(value!=null) 
                 this.MSACorUsedSpecified = true;
                NotifyPropertyChanged("MSACorUsed");
            }
        }

        private Boolean? MSACorUsedField; 

        /// <summary>
        /// MSACorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MSACorUsedSpecified {
            get {
                return MSACorUsedSpecifiedField;
            } 
            set {
                MSACorUsedSpecifiedField = value;
                NotifyPropertyChanged("MSACorUsedSpecified");
            }
        }

        private Boolean MSACorUsedSpecifiedField; 

        /// <summary>
        /// GravTotalFieldReference property
        /// </summary>
		[Description("Gravitational field theoretical/reference value.")]
        [ComponentElement]
		[XmlElement("GravTotalFieldReference")]
        public LinearAccelerationMeasure GravTotalFieldReference {
            get {
                return GravTotalFieldReferenceField;
            } 
            set {
                GravTotalFieldReferenceField = value;
                NotifyPropertyChanged("GravTotalFieldReference");
            }
        }

        private LinearAccelerationMeasure GravTotalFieldReferenceField; 

        /// <summary>
        /// MagTotalFieldReference property
        /// </summary>
		[Description("Geomagnetic field theoretical/reference value.")]
        [ComponentElement]
		[XmlElement("MagTotalFieldReference")]
        public MagneticFluxDensityMeasure MagTotalFieldReference {
            get {
                return MagTotalFieldReferenceField;
            } 
            set {
                MagTotalFieldReferenceField = value;
                NotifyPropertyChanged("MagTotalFieldReference");
            }
        }

        private MagneticFluxDensityMeasure MagTotalFieldReferenceField; 

        /// <summary>
        /// MagDipAngleReference property
        /// </summary>
		[Description("Magnetic dip angle theoretical/reference value.")]
        [ComponentElement]
		[XmlElement("MagDipAngleReference")]
        public PlaneAngleMeasure MagDipAngleReference {
            get {
                return MagDipAngleReferenceField;
            } 
            set {
                MagDipAngleReferenceField = value;
                NotifyPropertyChanged("MagDipAngleReference");
            }
        }

        private PlaneAngleMeasure MagDipAngleReferenceField; 

        /// <summary>
        /// MagModelUsed property
        /// </summary>
		[StringLength(64)]
        [Description("Geomagnetic model used.")]
		[XmlElement("MagModelUsed")]
        public String MagModelUsed {
            get {
                return MagModelUsedField;
            } 
            set {
                MagModelUsedField = value;
                NotifyPropertyChanged("MagModelUsed");
            }
        }

        private String MagModelUsedField; 

        /// <summary>
        /// MagModelValid property
        /// </summary>
		[StringLength(64)]
        [Description("Current valid interval for the geomagnetic model used.")]
		[XmlElement("MagModelValid")]
        public String MagModelValid {
            get {
                return MagModelValidField;
            } 
            set {
                MagModelValidField = value;
                NotifyPropertyChanged("MagModelValid");
            }
        }

        private String MagModelValidField; 

        /// <summary>
        /// GeoModelUsed property
        /// </summary>
		[StringLength(64)]
        [Description("Gravitational model used.")]
		[XmlElement("GeoModelUsed")]
        public String GeoModelUsed {
            get {
                return GeoModelUsedField;
            } 
            set {
                GeoModelUsedField = value;
                NotifyPropertyChanged("GeoModelUsed");
            }
        }

        private String GeoModelUsedField; 

        /// <summary>
        /// StatusTrajStation property
        /// </summary>
		[Description("Status of the station.")]
		[XmlElement("StatusTrajStation")]
        public TrajStationStatus? StatusTrajStation {
            get {
                return StatusTrajStationField;
            } 
            set {
                StatusTrajStationField = value;
             if(value!=null) 
                 this.StatusTrajStationSpecified = true;
                NotifyPropertyChanged("StatusTrajStation");
            }
        }

        private TrajStationStatus? StatusTrajStationField; 

        /// <summary>
        /// StatusTrajStationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StatusTrajStationSpecified {
            get {
                return StatusTrajStationSpecifiedField;
            } 
            set {
                StatusTrajStationSpecifiedField = value;
                NotifyPropertyChanged("StatusTrajStationSpecified");
            }
        }

        private Boolean StatusTrajStationSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Valid property
        /// </summary>
		
		[XmlElement("Valid")]
        public StnTrajValid Valid {
            get {
                return ValidField;
            } 
            set {
                ValidField = value;
                NotifyPropertyChanged("Valid");
            }
        }

        private StnTrajValid ValidField; 

        /// <summary>
        /// MatrixCov property
        /// </summary>
		
		[XmlElement("MatrixCov")]
        public StnTrajMatrixCov MatrixCov {
            get {
                return MatrixCovField;
            } 
            set {
                MatrixCovField = value;
                NotifyPropertyChanged("MatrixCov");
            }
        }

        private StnTrajMatrixCov MatrixCovField; 

        /// <summary>
        /// Location property
        /// </summary>
		[RecurringElement]
		[XmlElement("Location")]
        public List<AbstractWellLocation> Location {
            get {
                return LocationField;
            } 
            set {
                LocationField = value;
                NotifyPropertyChanged("Location");
            }
        }

         [XmlIgnore]
         public bool LocationSpecified
         {
            get {
             if(LocationField!=null)
                return LocationField.Count>0?true:false;
             else return false;
            } 
         }
        private List<AbstractWellLocation> LocationField; 

        /// <summary>
        /// SourceStation property
        /// </summary>
		[ComponentElement]
		[XmlElement("SourceStation")]
        public RefWellboreTrajectoryStation SourceStation {
            get {
                return SourceStationField;
            } 
            set {
                SourceStationField = value;
                NotifyPropertyChanged("SourceStation");
            }
        }

        private RefWellboreTrajectoryStation SourceStationField; 

        /// <summary>
        /// RawData property
        /// </summary>
		
		[XmlElement("RawData")]
        public StnTrajRawData RawData {
            get {
                return RawDataField;
            } 
            set {
                RawDataField = value;
                NotifyPropertyChanged("RawData");
            }
        }

        private StnTrajRawData RawDataField; 

        /// <summary>
        /// CorUsed property
        /// </summary>
		
		[XmlElement("CorUsed")]
        public StnTrajCorUsed CorUsed {
            get {
                return CorUsedField;
            } 
            set {
                CorUsedField = value;
                NotifyPropertyChanged("CorUsed");
            }
        }

        private StnTrajCorUsed CorUsedField; 

        /// <summary>
        /// IscwsaToolErrorModel property
        /// </summary>
		[ComponentElement]
		[XmlElement("IscwsaToolErrorModel")]
        public DataObjectReference IscwsaToolErrorModel {
            get {
                return IscwsaToolErrorModelField;
            } 
            set {
                IscwsaToolErrorModelField = value;
                NotifyPropertyChanged("IscwsaToolErrorModel");
            }
        }

        private DataObjectReference IscwsaToolErrorModelField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for an instance of a trajectory station.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AnglePerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AnglePerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AnglePerLengthMeasure xsd type.")]
    public partial class AnglePerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AnglePerLengthMeasure class.
        /// </summary>
        public AnglePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AnglePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AnglePerLengthMeasure(Double value, AnglePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public AnglePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AnglePerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractWellLocation xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedWellLocation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticWellLocation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractWellLocation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractWellLocation xsd type.")]
    public abstract partial class AbstractWellLocation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Original property
        /// </summary>
		[Description("Flag indicating (if \"true\" or \"1\") that this pair of values was  the original data given for the location. If the pair of values was  calculated from an original pair of values, this flag should be \"false\" (or \"0\"),  or not present.")]
		[XmlElement("Original")]
        public Boolean? Original {
            get {
                return OriginalField;
            } 
            set {
                OriginalField = value;
             if(value!=null) 
                 this.OriginalSpecified = true;
                NotifyPropertyChanged("Original");
            }
        }

        private Boolean? OriginalField; 

        /// <summary>
        /// OriginalSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean OriginalSpecified {
            get {
                return OriginalSpecifiedField;
            } 
            set {
                OriginalSpecifiedField = value;
                NotifyPropertyChanged("OriginalSpecified");
            }
        }

        private Boolean OriginalSpecifiedField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A Comment, generally given to help the reader  interpret the coordinates if the CRS and the chosen pair do not make them clear.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for a well location.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedWellLocation xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedWellLocation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ProjectedWellLocation xsd type.")]
    public partial class ProjectedWellLocation : AbstractWellLocation, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Coordinate1 property
        /// </summary>
		
		[XmlElement("Coordinate1")]
        public Double? Coordinate1 {
            get {
                return Coordinate1Field;
            } 
            set {
                Coordinate1Field = value;
                NotifyPropertyChanged("Coordinate1");
            }
        }

        private Double? Coordinate1Field; 

        /// <summary>
        /// Coordinate2 property
        /// </summary>
		
		[XmlElement("Coordinate2")]
        public Double? Coordinate2 {
            get {
                return Coordinate2Field;
            } 
            set {
                Coordinate2Field = value;
                NotifyPropertyChanged("Coordinate2");
            }
        }

        private Double? Coordinate2Field; 

        /// <summary>
        /// Crs property
        /// </summary>
		
		[XmlElement("Crs")]
        public AbstractProjectedCrs Crs {
            get {
                return CrsField;
            } 
            set {
                CrsField = value;
                NotifyPropertyChanged("Crs");
            }
        }

        private AbstractProjectedCrs CrsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractProjectedCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedEpsgCrs))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractProjectedCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractProjectedCrs xsd type.")]
    public abstract partial class AbstractProjectedCrs : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedLocalAuthorityCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedLocalAuthorityCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedLocalAuthorityCrs xsd type.")]
    public partial class ProjectedLocalAuthorityCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// LocalAuthorityCrsName property
        /// </summary>
		
		[XmlElement("LocalAuthorityCrsName")]
        public String LocalAuthorityCrsName {
            get {
                return LocalAuthorityCrsNameField;
            } 
            set {
                LocalAuthorityCrsNameField = value;
                NotifyPropertyChanged("LocalAuthorityCrsName");
            }
        }

        private String LocalAuthorityCrsNameField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedGmlCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedGmlCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedGmlCrs xsd type.")]
    public partial class ProjectedGmlCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// GmlProjectedCrsDefinition property
        /// </summary>
		[ComponentElement]
		[XmlElement("GmlProjectedCrsDefinition")]
        public ProjectedCRSType GmlProjectedCrsDefinition {
            get {
                return GmlProjectedCrsDefinitionField;
            } 
            set {
                GmlProjectedCrsDefinitionField = value;
                NotifyPropertyChanged("GmlProjectedCrsDefinition");
            }
        }

        private ProjectedCRSType GmlProjectedCrsDefinitionField; 


    } //here
    }

    /// <summary>
    /// This class represents the ProjectedCRSType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ProjectedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the ProjectedCRSType xsd type.")]
    public partial class ProjectedCRSType : AbstractGeneralDerivedCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// Item property
        /// </summary>
		[ComponentElement]
		[XmlElement("baseGeodeticCRS")]
        public GeodeticCRSPropertyType Item {
            get {
                return ItemField;
            } 
            set {
                ItemField = value;
                NotifyPropertyChanged("Item");
            }
        }

        private GeodeticCRSPropertyType ItemField; 

        /// <summary>
        /// cartesianCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("cartesianCS")]
        public CartesianCSPropertyType CartesianCS {
            get {
                return cartesianCSField;
            } 
            set {
                cartesianCSField = value;
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSPropertyType cartesianCSField; 


    } //here

    /// <summary>
    /// This class represents the GeodeticCRSPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("baseGeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticCRSPropertyType xsd type.")]
    public partial class GeodeticCRSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GeodeticCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("GeodeticCRS")]
        public GeodeticCRSType GeodeticCRS {
            get {
                return GeodeticCRSField;
            } 
            set {
                GeodeticCRSField = value;
                NotifyPropertyChanged("GeodeticCRS");
            }
        }

        private GeodeticCRSType GeodeticCRSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the GeodeticCRSType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticCRSType xsd type.")]
    public partial class GeodeticCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// cartesianCS property
        /// </summary>
        [XmlElement("cartesianCS")]
        public CartesianCSPropertyType CartesianCS {
            get {
                return cartesianCSField;
            } 
            set {
                cartesianCSField = value;
                CartesianCSSpecified = (value!=null);
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSPropertyType cartesianCSField; 
        /// <summary>
        /// bool to indicate if CartesianCS has been set. Used for serialization.
        /// </summary>
        private bool cartesianCSSpecified = false; 
         [XmlIgnore]
         public bool CartesianCSSpecified
         {
            get {
                return cartesianCSSpecified;
            } 
            set {
                cartesianCSSpecified= value;
            } 
         }

        /// <summary>
        /// ellipsoidalCS property
        /// </summary>
        [XmlElement("ellipsoidalCS")]
        public EllipsoidalCSPropertyType EllipsoidalCS {
            get {
                return ellipsoidalCSField;
            } 
            set {
                ellipsoidalCSField = value;
                EllipsoidalCSSpecified = (value!=null);
                NotifyPropertyChanged("EllipsoidalCS");
            }
        }

        private EllipsoidalCSPropertyType ellipsoidalCSField; 
        /// <summary>
        /// bool to indicate if EllipsoidalCS has been set. Used for serialization.
        /// </summary>
        private bool ellipsoidalCSSpecified = false; 
         [XmlIgnore]
         public bool EllipsoidalCSSpecified
         {
            get {
                return ellipsoidalCSSpecified;
            } 
            set {
                ellipsoidalCSSpecified= value;
            } 
         }

        /// <summary>
        /// sphericalCS property
        /// </summary>
        [XmlElement("sphericalCS")]
        public SphericalCSPropertyType SphericalCS {
            get {
                return sphericalCSField;
            } 
            set {
                sphericalCSField = value;
                SphericalCSSpecified = (value!=null);
                NotifyPropertyChanged("SphericalCS");
            }
        }

        private SphericalCSPropertyType sphericalCSField; 
        /// <summary>
        /// bool to indicate if SphericalCS has been set. Used for serialization.
        /// </summary>
        private bool sphericalCSSpecified = false; 
         [XmlIgnore]
         public bool SphericalCSSpecified
         {
            get {
                return sphericalCSSpecified;
            } 
            set {
                sphericalCSSpecified= value;
            } 
         }


        /// <summary>
        /// geodeticDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("geodeticDatum")]
        public GeodeticDatumPropertyType GeodeticDatum {
            get {
                return geodeticDatumField;
            } 
            set {
                geodeticDatumField = value;
                NotifyPropertyChanged("GeodeticDatum");
            }
        }

        private GeodeticDatumPropertyType geodeticDatumField; 


    } //here

    /// <summary>
    /// This class represents the CartesianCSPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("cartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CartesianCSPropertyType xsd type.")]
    public partial class CartesianCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CartesianCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("CartesianCS")]
        public CartesianCSType CartesianCS {
            get {
                return CartesianCSField;
            } 
            set {
                CartesianCSField = value;
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSType CartesianCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CartesianCSType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CartesianCSType xsd type.")]
    public partial class CartesianCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractCoordinateSystemType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCoordinateSystem", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCoordinateSystemType xsd type.")]
    public abstract partial class AbstractCoordinateSystemType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// axis property
        /// </summary>
		[RecurringElement]
		[XmlElement("axis")]
        public List<CoordinateSystemAxisPropertyType> Axis {
            get {
                return axisField;
            } 
            set {
                axisField = value;
                NotifyPropertyChanged("Axis");
            }
        }

         [XmlIgnore]
         public bool AxisSpecified
         {
            get {
             if(axisField!=null)
                return axisField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CoordinateSystemAxisPropertyType> axisField; 

		/// <summary>
        /// aggregationType property
        /// </summary>
		
        [XmlAttribute("aggregationType")]
		
        public AggregationType AggregationType {
            get {
                return aggregationTypeField;
            } 
            set {
                aggregationTypeField = value;
             if(value!=null) 
                 this.AggregationTypeSpecified = true;
                NotifyPropertyChanged("AggregationType");
            }
        }

        private AggregationType aggregationTypeField; 

        /// <summary>
        /// aggregationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AggregationTypeSpecified {
            get {
                return aggregationTypeSpecifiedField;
            } 
            set {
                aggregationTypeSpecifiedField = value;
                NotifyPropertyChanged("AggregationTypeSpecified");
            }
        }

        private Boolean aggregationTypeSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the CoordinateSystemAxisPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("axis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CoordinateSystemAxisPropertyType xsd type.")]
    public partial class CoordinateSystemAxisPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CoordinateSystemAxis property
        /// </summary>
		[ComponentElement]
		[XmlElement("CoordinateSystemAxis")]
        public CoordinateSystemAxisType CoordinateSystemAxis {
            get {
                return CoordinateSystemAxisField;
            } 
            set {
                CoordinateSystemAxisField = value;
                NotifyPropertyChanged("CoordinateSystemAxis");
            }
        }

        private CoordinateSystemAxisType CoordinateSystemAxisField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CoordinateSystemAxisType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CoordinateSystemAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CoordinateSystemAxisType xsd type.")]
    public partial class CoordinateSystemAxisType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// axisAbbrev property
        /// </summary>
		[ComponentElement]
		[XmlElement("axisAbbrev")]
        public CodeType AxisAbbrev {
            get {
                return axisAbbrevField;
            } 
            set {
                axisAbbrevField = value;
                NotifyPropertyChanged("AxisAbbrev");
            }
        }

        private CodeType axisAbbrevField; 

        /// <summary>
        /// axisDirection property
        /// </summary>
		[ComponentElement]
		[XmlElement("axisDirection")]
        public CodeWithAuthorityType AxisDirection {
            get {
                return axisDirectionField;
            } 
            set {
                axisDirectionField = value;
                NotifyPropertyChanged("AxisDirection");
            }
        }

        private CodeWithAuthorityType axisDirectionField; 

        /// <summary>
        /// minimumValue property
        /// </summary>
		
		[XmlElement("minimumValue")]
        public Double? MinimumValue {
            get {
                return minimumValueField;
            } 
            set {
                minimumValueField = value;
             if(value!=null) 
                 this.MinimumValueSpecified = true;
                NotifyPropertyChanged("MinimumValue");
            }
        }

        private Double? minimumValueField; 

        /// <summary>
        /// minimumValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MinimumValueSpecified {
            get {
                return minimumValueSpecifiedField;
            } 
            set {
                minimumValueSpecifiedField = value;
                NotifyPropertyChanged("MinimumValueSpecified");
            }
        }

        private Boolean minimumValueSpecifiedField; 

        /// <summary>
        /// maximumValue property
        /// </summary>
		
		[XmlElement("maximumValue")]
        public Double? MaximumValue {
            get {
                return maximumValueField;
            } 
            set {
                maximumValueField = value;
             if(value!=null) 
                 this.MaximumValueSpecified = true;
                NotifyPropertyChanged("MaximumValue");
            }
        }

        private Double? maximumValueField; 

        /// <summary>
        /// maximumValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MaximumValueSpecified {
            get {
                return maximumValueSpecifiedField;
            } 
            set {
                maximumValueSpecifiedField = value;
                NotifyPropertyChanged("MaximumValueSpecified");
            }
        }

        private Boolean maximumValueSpecifiedField; 

        /// <summary>
        /// rangeMeaning property
        /// </summary>
		[ComponentElement]
		[XmlElement("rangeMeaning")]
        public CodeWithAuthorityType RangeMeaning {
            get {
                return rangeMeaningField;
            } 
            set {
                rangeMeaningField = value;
                NotifyPropertyChanged("RangeMeaning");
            }
        }

        private CodeWithAuthorityType rangeMeaningField; 


    } //here

    /// <summary>
    /// This class represents the CodeType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CodeWithAuthorityType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("name", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CodeType xsd type.")]
    public partial class CodeType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeType class.
        /// </summary>
        public CodeType() {}

        /// <summary>
        /// Initializes a new instance of the CodeType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeType(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// codeSpace property
        /// </summary>
		
        [XmlAttribute("codeSpace")]
		
        public String CodeSpace {
            get {
                return codeSpaceField;
            } 
            set {
                codeSpaceField = value;
                NotifyPropertyChanged("CodeSpace");
            }
        }

        private String codeSpaceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CodeWithAuthorityType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("identifier", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CodeWithAuthorityType xsd type.")]
    public partial class CodeWithAuthorityType : CodeType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeWithAuthorityType class.
        /// </summary>
        public CodeWithAuthorityType() {}

        /// <summary>
        /// Initializes a new instance of the CodeWithAuthorityType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeWithAuthorityType(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IdentifiedObjectType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IdentifiedObjectType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the IdentifiedObjectType xsd type.")]
    public abstract partial class IdentifiedObjectType : DefinitionType, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// This class represents the DefinitionType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Definition", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the DefinitionType xsd type.")]
    public partial class DefinitionType : DefinitionBaseType, INotifyPropertyChanged
    {

        /// <summary>
        /// remarks property
        /// </summary>
		
		[XmlElement("remarks")]
        public String Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private String remarksField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DefinitionBaseType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DefinitionBaseType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the DefinitionBaseType xsd type.")]
    public partial class DefinitionBaseType : AbstractGMLType, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// This class represents the AbstractGMLType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimeObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionBaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGML", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGMLType xsd type.")]
    public abstract partial class AbstractGMLType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
		[XmlElement("description")]
        public StringOrRefType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private StringOrRefType descriptionField; 

        /// <summary>
        /// descriptionReference property
        /// </summary>
		[ComponentElement]
		[XmlElement("descriptionReference")]
        public ReferenceType DescriptionReference {
            get {
                return descriptionReferenceField;
            } 
            set {
                descriptionReferenceField = value;
                NotifyPropertyChanged("DescriptionReference");
            }
        }

        private ReferenceType descriptionReferenceField; 

        /// <summary>
        /// identifier property
        /// </summary>
		[ComponentElement]
		[XmlElement("identifier")]
        public CodeWithAuthorityType Identifier {
            get {
                return identifierField;
            } 
            set {
                identifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

        private CodeWithAuthorityType identifierField; 

        /// <summary>
        /// name property
        /// </summary>
		[RecurringElement]
		[XmlElement("name")]
        public List<CodeType> Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

         [XmlIgnore]
         public bool NameSpecified
         {
            get {
             if(nameField!=null)
                return nameField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CodeType> nameField; 

		/// <summary>
        /// id property
        /// </summary>
		
        [XmlAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public String Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private String idField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the StringOrRefType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("description", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the StringOrRefType xsd type.")]
    public partial class StringOrRefType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringOrRefType class.
        /// </summary>
        public StringOrRefType() {}

        /// <summary>
        /// Initializes a new instance of the StringOrRefType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public StringOrRefType(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the ReferenceType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("descriptionReference", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the ReferenceType xsd type.")]
    public partial class ReferenceType : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// owns property
        /// </summary>
		
        [XmlAttribute("owns")]
		
        public Boolean Owns {
            get {
                return ownsField;
            } 
            set {
                ownsField = value;
                NotifyPropertyChanged("Owns");
            }
        }

        private Boolean ownsField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractTimeObjectType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimeObject", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractTimeObjectType xsd type.")]
    public abstract partial class AbstractTimeObjectType : AbstractGMLType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractTimePrimitiveType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractTimePrimitiveType xsd type.")]
    public abstract partial class AbstractTimePrimitiveType : AbstractTimeObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// relatedTime property
        /// </summary>
		[RecurringElement]
		[XmlElement("relatedTime")]
        public List<RelatedTimeType> RelatedTime {
            get {
                return relatedTimeField;
            } 
            set {
                relatedTimeField = value;
                NotifyPropertyChanged("RelatedTime");
            }
        }

         [XmlIgnore]
         public bool RelatedTimeSpecified
         {
            get {
             if(relatedTimeField!=null)
                return relatedTimeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<RelatedTimeType> relatedTimeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RelatedTimeType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RelatedTimeType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the RelatedTimeType xsd type.")]
    public partial class RelatedTimeType : TimePrimitivePropertyType, INotifyPropertyChanged
    {

		/// <summary>
        /// relativePosition property
        /// </summary>
		
        [XmlAttribute("relativePosition")]
		
        public RelatedTimeTypeRelativePosition RelativePosition {
            get {
                return relativePositionField;
            } 
            set {
                relativePositionField = value;
             if(value!=null) 
                 this.RelativePositionSpecified = true;
                NotifyPropertyChanged("RelativePosition");
            }
        }

        private RelatedTimeTypeRelativePosition relativePositionField; 

        /// <summary>
        /// relativePositionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RelativePositionSpecified {
            get {
                return relativePositionSpecifiedField;
            } 
            set {
                relativePositionSpecifiedField = value;
                NotifyPropertyChanged("RelativePositionSpecified");
            }
        }

        private Boolean relativePositionSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimePrimitivePropertyType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelatedTimeType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimePrimitivePropertyType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the TimePrimitivePropertyType xsd type.")]
    public partial class TimePrimitivePropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractTimePrimitive property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractTimePrimitive")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return AbstractTimePrimitiveField;
            } 
            set {
                AbstractTimePrimitiveField = value;
                NotifyPropertyChanged("AbstractTimePrimitive");
            }
        }

        private AbstractTimePrimitiveType AbstractTimePrimitiveField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 

		/// <summary>
        /// owns property
        /// </summary>
		
        [XmlAttribute("owns")]
		
        public Boolean Owns {
            get {
                return ownsField;
            } 
            set {
                ownsField = value;
                NotifyPropertyChanged("Owns");
            }
        }

        private Boolean ownsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractCoordinateOperationType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractOperation", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCoordinateOperationType xsd type.")]
    public abstract partial class AbstractCoordinateOperationType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[ComponentElement]
		[XmlElement("domainOfValidity")]
        public DomainOfValidity DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

        private DomainOfValidity domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<String> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         [XmlIgnore]
         public bool ScopeSpecified
         {
            get {
             if(scopeField!=null)
                return scopeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> scopeField; 

        /// <summary>
        /// operationVersion property
        /// </summary>
		
		[XmlElement("operationVersion")]
        public String OperationVersion {
            get {
                return operationVersionField;
            } 
            set {
                operationVersionField = value;
                NotifyPropertyChanged("OperationVersion");
            }
        }

        private String operationVersionField; 

        /// <summary>
        /// coordinateOperationAccuracy property
        /// </summary>
		[RecurringElement]
		[XmlElement("coordinateOperationAccuracy")]
        public List<CoordinateOperationAccuracy> CoordinateOperationAccuracy {
            get {
                return coordinateOperationAccuracyField;
            } 
            set {
                coordinateOperationAccuracyField = value;
                NotifyPropertyChanged("CoordinateOperationAccuracy");
            }
        }

         [XmlIgnore]
         public bool CoordinateOperationAccuracySpecified
         {
            get {
             if(coordinateOperationAccuracyField!=null)
                return coordinateOperationAccuracyField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CoordinateOperationAccuracy> coordinateOperationAccuracyField; 

        /// <summary>
        /// sourceCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("sourceCRS")]
        public CRSPropertyType SourceCRS {
            get {
                return sourceCRSField;
            } 
            set {
                sourceCRSField = value;
                NotifyPropertyChanged("SourceCRS");
            }
        }

        private CRSPropertyType sourceCRSField; 

        /// <summary>
        /// targetCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("targetCRS")]
        public CRSPropertyType TargetCRS {
            get {
                return targetCRSField;
            } 
            set {
                targetCRSField = value;
                NotifyPropertyChanged("TargetCRS");
            }
        }

        private CRSPropertyType targetCRSField; 


    } //here

    /// <summary>
    /// This class represents the domainOfValidity xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the domainOfValidity xsd type.")]
    public partial class DomainOfValidity : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_Extent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd")]
        public EX_Extent_Type EX_Extent {
            get {
                return EX_ExtentField;
            } 
            set {
                EX_ExtentField = value;
                NotifyPropertyChanged("EX_Extent");
            }
        }

        private EX_Extent_Type EX_ExtentField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EX_Extent_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_Extent_Type xsd type.")]
    public partial class EX_Extent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
		[XmlElement("description")]
        public CharacterString_PropertyType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private CharacterString_PropertyType descriptionField; 

        /// <summary>
        /// geographicElement property
        /// </summary>
		[RecurringElement]
		[XmlElement("geographicElement")]
        public List<EX_GeographicExtent_PropertyType> GeographicElement {
            get {
                return geographicElementField;
            } 
            set {
                geographicElementField = value;
                NotifyPropertyChanged("GeographicElement");
            }
        }

         [XmlIgnore]
         public bool GeographicElementSpecified
         {
            get {
             if(geographicElementField!=null)
                return geographicElementField.Count>0?true:false;
             else return false;
            } 
         }
        private List<EX_GeographicExtent_PropertyType> geographicElementField; 

        /// <summary>
        /// temporalElement property
        /// </summary>
		[RecurringElement]
		[XmlElement("temporalElement")]
        public List<EX_TemporalExtent_PropertyType> TemporalElement {
            get {
                return temporalElementField;
            } 
            set {
                temporalElementField = value;
                NotifyPropertyChanged("TemporalElement");
            }
        }

         [XmlIgnore]
         public bool TemporalElementSpecified
         {
            get {
             if(temporalElementField!=null)
                return temporalElementField.Count>0?true:false;
             else return false;
            } 
         }
        private List<EX_TemporalExtent_PropertyType> temporalElementField; 

        /// <summary>
        /// verticalElement property
        /// </summary>
		[RecurringElement]
		[XmlElement("verticalElement")]
        public List<EX_VerticalExtent_PropertyType> VerticalElement {
            get {
                return verticalElementField;
            } 
            set {
                verticalElementField = value;
                NotifyPropertyChanged("VerticalElement");
            }
        }

         [XmlIgnore]
         public bool VerticalElementSpecified
         {
            get {
             if(verticalElementField!=null)
                return verticalElementField.Count>0?true:false;
             else return false;
            } 
         }
        private List<EX_VerticalExtent_PropertyType> verticalElementField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CharacterString_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CharacterString_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the CharacterString_PropertyType xsd type.")]
    public partial class CharacterString_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CharacterString property
        /// </summary>
		
		[XmlElement("CharacterString")]
        public String CharacterString {
            get {
                return CharacterStringField;
            } 
            set {
                CharacterStringField = value;
                NotifyPropertyChanged("CharacterString");
            }
        }

        private String CharacterStringField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_GeographicExtent_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_GeographicExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_GeographicExtent_PropertyType xsd type.")]
    public partial class EX_GeographicExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractEX_GeographicExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractEX_GeographicExtent")]
        public AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtent {
            get {
                return AbstractEX_GeographicExtentField;
            } 
            set {
                AbstractEX_GeographicExtentField = value;
                NotifyPropertyChanged("AbstractEX_GeographicExtent");
            }
        }

        private AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractEX_GeographicExtent_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractEX_GeographicExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractEX_GeographicExtent_Type xsd type.")]
    public abstract partial class AbstractEX_GeographicExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// extentTypeCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("extentTypeCode")]
        public Boolean_PropertyType ExtentTypeCode {
            get {
                return extentTypeCodeField;
            } 
            set {
                extentTypeCodeField = value;
                NotifyPropertyChanged("ExtentTypeCode");
            }
        }

        private Boolean_PropertyType extentTypeCodeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Boolean_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Boolean_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Boolean_PropertyType xsd type.")]
    public partial class Boolean_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Boolean property
        /// </summary>
		
		[XmlElement("Boolean")]
        public Boolean? Boolean {
            get {
                return BooleanField;
            } 
            set {
                BooleanField = value;
                NotifyPropertyChanged("Boolean");
            }
        }

        private Boolean? BooleanField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractObject_Type xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Result_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Series_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_OnlineResource_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Address_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Telephone_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Contact_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_ResponsibleParty_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Date_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Citation_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MD_Identifier_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Element_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_VerticalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_TemporalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractEX_GeographicExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_Extent_Type))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractObject_Type", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the AbstractObject_Type xsd type.")]
    public abstract partial class AbstractObject_Type : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// id property
        /// </summary>
		
        [XmlAttribute("id")]
		
        public String Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private String idField; 

		/// <summary>
        /// uuid property
        /// </summary>
		
        [XmlAttribute("uuid")]
		
        public String Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private String uuidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_Result_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Result", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_Result_Type xsd type.")]
    public abstract partial class AbstractDQ_Result_Type : AbstractObject_Type, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the CI_Series_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Series", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Series_Type xsd type.")]
    public partial class CI_Series_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[ComponentElement]
		[XmlElement("name")]
        public CharacterString_PropertyType Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private CharacterString_PropertyType nameField; 

        /// <summary>
        /// issueIdentification property
        /// </summary>
		[ComponentElement]
		[XmlElement("issueIdentification")]
        public CharacterString_PropertyType IssueIdentification {
            get {
                return issueIdentificationField;
            } 
            set {
                issueIdentificationField = value;
                NotifyPropertyChanged("IssueIdentification");
            }
        }

        private CharacterString_PropertyType issueIdentificationField; 

        /// <summary>
        /// page property
        /// </summary>
		[ComponentElement]
		[XmlElement("page")]
        public CharacterString_PropertyType Page {
            get {
                return pageField;
            } 
            set {
                pageField = value;
                NotifyPropertyChanged("Page");
            }
        }

        private CharacterString_PropertyType pageField; 


    } //here

    /// <summary>
    /// This class represents the CI_OnlineResource_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_OnlineResource", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_OnlineResource_Type xsd type.")]
    public partial class CI_OnlineResource_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// linkage property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("linkage")]
        public URL_PropertyType Linkage {
            get {
                return linkageField;
            } 
            set {
                linkageField = value;
                NotifyPropertyChanged("Linkage");
            }
        }

        private URL_PropertyType linkageField; 

        /// <summary>
        /// protocol property
        /// </summary>
		[ComponentElement]
		[XmlElement("protocol")]
        public CharacterString_PropertyType Protocol {
            get {
                return protocolField;
            } 
            set {
                protocolField = value;
                NotifyPropertyChanged("Protocol");
            }
        }

        private CharacterString_PropertyType protocolField; 

        /// <summary>
        /// applicationProfile property
        /// </summary>
		[ComponentElement]
		[XmlElement("applicationProfile")]
        public CharacterString_PropertyType ApplicationProfile {
            get {
                return applicationProfileField;
            } 
            set {
                applicationProfileField = value;
                NotifyPropertyChanged("ApplicationProfile");
            }
        }

        private CharacterString_PropertyType applicationProfileField; 

        /// <summary>
        /// name property
        /// </summary>
		[ComponentElement]
		[XmlElement("name")]
        public CharacterString_PropertyType Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private CharacterString_PropertyType nameField; 

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
		[XmlElement("description")]
        public CharacterString_PropertyType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private CharacterString_PropertyType descriptionField; 

        /// <summary>
        /// function property
        /// </summary>
		[ComponentElement]
		[XmlElement("function")]
        public CI_OnLineFunctionCode_PropertyType Function {
            get {
                return functionField;
            } 
            set {
                functionField = value;
                NotifyPropertyChanged("Function");
            }
        }

        private CI_OnLineFunctionCode_PropertyType functionField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the URL_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="URL_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the URL_PropertyType xsd type.")]
    public partial class URL_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// URL property
        /// </summary>
		
		[XmlElement("URL", DataType="anyURI")]
        public String URL {
            get {
                return URLField;
            } 
            set {
                URLField = value;
                NotifyPropertyChanged("URL");
            }
        }

        private String URLField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_OnLineFunctionCode_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_OnLineFunctionCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_OnLineFunctionCode_PropertyType xsd type.")]
    public partial class CI_OnLineFunctionCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_OnLineFunctionCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_OnLineFunctionCode")]
        public CodeListValue_Type CI_OnLineFunctionCode {
            get {
                return CI_OnLineFunctionCodeField;
            } 
            set {
                CI_OnLineFunctionCodeField = value;
                NotifyPropertyChanged("CI_OnLineFunctionCode");
            }
        }

        private CodeListValue_Type CI_OnLineFunctionCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CodeListValue_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    [System.Xml.Serialization.XmlRootAttribute("CI_DateTypeCode", Namespace="http://www.isotc211.org/2005/gco", IsNullable=false)]
	[Description("This class represents the CodeListValue_Type xsd type.")]
    public partial class CodeListValue_Type : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeListValue_Type class.
        /// </summary>
        public CodeListValue_Type() {}

        /// <summary>
        /// Initializes a new instance of the CodeListValue_Type class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeListValue_Type(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// codeList property
        /// </summary>
		[Required]
        [XmlAttribute("codeList")]
		
        public String CodeList {
            get {
                return codeListField;
            } 
            set {
                codeListField = value;
                NotifyPropertyChanged("CodeList");
            }
        }

        private String codeListField; 

		/// <summary>
        /// codeListValue property
        /// </summary>
		[Required]
        [XmlAttribute("codeListValue")]
		
        public String CodeListValue {
            get {
                return codeListValueField;
            } 
            set {
                codeListValueField = value;
                NotifyPropertyChanged("CodeListValue");
            }
        }

        private String codeListValueField; 

		/// <summary>
        /// codeSpace property
        /// </summary>
		
        [XmlAttribute("codeSpace")]
		
        public String CodeSpace {
            get {
                return codeSpaceField;
            } 
            set {
                codeSpaceField = value;
                NotifyPropertyChanged("CodeSpace");
            }
        }

        private String codeSpaceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CI_Address_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Address", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Address_Type xsd type.")]
    public partial class CI_Address_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// deliveryPoint property
        /// </summary>
		[RecurringElement]
		[XmlElement("deliveryPoint")]
        public List<CharacterString_PropertyType> DeliveryPoint {
            get {
                return deliveryPointField;
            } 
            set {
                deliveryPointField = value;
                NotifyPropertyChanged("DeliveryPoint");
            }
        }

         [XmlIgnore]
         public bool DeliveryPointSpecified
         {
            get {
             if(deliveryPointField!=null)
                return deliveryPointField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CharacterString_PropertyType> deliveryPointField; 

        /// <summary>
        /// city property
        /// </summary>
		[ComponentElement]
		[XmlElement("city")]
        public CharacterString_PropertyType City {
            get {
                return cityField;
            } 
            set {
                cityField = value;
                NotifyPropertyChanged("City");
            }
        }

        private CharacterString_PropertyType cityField; 

        /// <summary>
        /// administrativeArea property
        /// </summary>
		[ComponentElement]
		[XmlElement("administrativeArea")]
        public CharacterString_PropertyType AdministrativeArea {
            get {
                return administrativeAreaField;
            } 
            set {
                administrativeAreaField = value;
                NotifyPropertyChanged("AdministrativeArea");
            }
        }

        private CharacterString_PropertyType administrativeAreaField; 

        /// <summary>
        /// postalCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("postalCode")]
        public CharacterString_PropertyType PostalCode {
            get {
                return postalCodeField;
            } 
            set {
                postalCodeField = value;
                NotifyPropertyChanged("PostalCode");
            }
        }

        private CharacterString_PropertyType postalCodeField; 

        /// <summary>
        /// country property
        /// </summary>
		[ComponentElement]
		[XmlElement("country")]
        public CharacterString_PropertyType Country {
            get {
                return countryField;
            } 
            set {
                countryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private CharacterString_PropertyType countryField; 

        /// <summary>
        /// electronicMailAddress property
        /// </summary>
		[RecurringElement]
		[XmlElement("electronicMailAddress")]
        public List<CharacterString_PropertyType> ElectronicMailAddress {
            get {
                return electronicMailAddressField;
            } 
            set {
                electronicMailAddressField = value;
                NotifyPropertyChanged("ElectronicMailAddress");
            }
        }

         [XmlIgnore]
         public bool ElectronicMailAddressSpecified
         {
            get {
             if(electronicMailAddressField!=null)
                return electronicMailAddressField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CharacterString_PropertyType> electronicMailAddressField; 


    } //here

    /// <summary>
    /// This class represents the CI_Telephone_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Telephone", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Telephone_Type xsd type.")]
    public partial class CI_Telephone_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// voice property
        /// </summary>
		[RecurringElement]
		[XmlElement("voice")]
        public List<CharacterString_PropertyType> Voice {
            get {
                return voiceField;
            } 
            set {
                voiceField = value;
                NotifyPropertyChanged("Voice");
            }
        }

         [XmlIgnore]
         public bool VoiceSpecified
         {
            get {
             if(voiceField!=null)
                return voiceField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CharacterString_PropertyType> voiceField; 

        /// <summary>
        /// facsimile property
        /// </summary>
		[RecurringElement]
		[XmlElement("facsimile")]
        public List<CharacterString_PropertyType> Facsimile {
            get {
                return facsimileField;
            } 
            set {
                facsimileField = value;
                NotifyPropertyChanged("Facsimile");
            }
        }

         [XmlIgnore]
         public bool FacsimileSpecified
         {
            get {
             if(facsimileField!=null)
                return facsimileField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CharacterString_PropertyType> facsimileField; 


    } //here

    /// <summary>
    /// This class represents the CI_Contact_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Contact", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Contact_Type xsd type.")]
    public partial class CI_Contact_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// phone property
        /// </summary>
		[ComponentElement]
		[XmlElement("phone")]
        public CI_Telephone_PropertyType Phone {
            get {
                return phoneField;
            } 
            set {
                phoneField = value;
                NotifyPropertyChanged("Phone");
            }
        }

        private CI_Telephone_PropertyType phoneField; 

        /// <summary>
        /// address property
        /// </summary>
		[ComponentElement]
		[XmlElement("address")]
        public CI_Address_PropertyType Address {
            get {
                return addressField;
            } 
            set {
                addressField = value;
                NotifyPropertyChanged("Address");
            }
        }

        private CI_Address_PropertyType addressField; 

        /// <summary>
        /// onlineResource property
        /// </summary>
		[ComponentElement]
		[XmlElement("onlineResource")]
        public CI_OnlineResource_PropertyType OnlineResource {
            get {
                return onlineResourceField;
            } 
            set {
                onlineResourceField = value;
                NotifyPropertyChanged("OnlineResource");
            }
        }

        private CI_OnlineResource_PropertyType onlineResourceField; 

        /// <summary>
        /// hoursOfService property
        /// </summary>
		[ComponentElement]
		[XmlElement("hoursOfService")]
        public CharacterString_PropertyType HoursOfService {
            get {
                return hoursOfServiceField;
            } 
            set {
                hoursOfServiceField = value;
                NotifyPropertyChanged("HoursOfService");
            }
        }

        private CharacterString_PropertyType hoursOfServiceField; 

        /// <summary>
        /// contactInstructions property
        /// </summary>
		[ComponentElement]
		[XmlElement("contactInstructions")]
        public CharacterString_PropertyType ContactInstructions {
            get {
                return contactInstructionsField;
            } 
            set {
                contactInstructionsField = value;
                NotifyPropertyChanged("ContactInstructions");
            }
        }

        private CharacterString_PropertyType contactInstructionsField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Telephone_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Telephone_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Telephone_PropertyType xsd type.")]
    public partial class CI_Telephone_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Telephone property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Telephone")]
        public CI_Telephone_Type CI_Telephone {
            get {
                return CI_TelephoneField;
            } 
            set {
                CI_TelephoneField = value;
                NotifyPropertyChanged("CI_Telephone");
            }
        }

        private CI_Telephone_Type CI_TelephoneField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Address_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Address_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Address_PropertyType xsd type.")]
    public partial class CI_Address_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Address property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Address")]
        public CI_Address_Type CI_Address {
            get {
                return CI_AddressField;
            } 
            set {
                CI_AddressField = value;
                NotifyPropertyChanged("CI_Address");
            }
        }

        private CI_Address_Type CI_AddressField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_OnlineResource_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_OnlineResource_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_OnlineResource_PropertyType xsd type.")]
    public partial class CI_OnlineResource_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_OnlineResource property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_OnlineResource")]
        public CI_OnlineResource_Type CI_OnlineResource {
            get {
                return CI_OnlineResourceField;
            } 
            set {
                CI_OnlineResourceField = value;
                NotifyPropertyChanged("CI_OnlineResource");
            }
        }

        private CI_OnlineResource_Type CI_OnlineResourceField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_ResponsibleParty_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_ResponsibleParty", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_ResponsibleParty_Type xsd type.")]
    public partial class CI_ResponsibleParty_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// individualName property
        /// </summary>
		[ComponentElement]
		[XmlElement("individualName")]
        public CharacterString_PropertyType IndividualName {
            get {
                return individualNameField;
            } 
            set {
                individualNameField = value;
                NotifyPropertyChanged("IndividualName");
            }
        }

        private CharacterString_PropertyType individualNameField; 

        /// <summary>
        /// organisationName property
        /// </summary>
		[ComponentElement]
		[XmlElement("organisationName")]
        public CharacterString_PropertyType OrganisationName {
            get {
                return organisationNameField;
            } 
            set {
                organisationNameField = value;
                NotifyPropertyChanged("OrganisationName");
            }
        }

        private CharacterString_PropertyType organisationNameField; 

        /// <summary>
        /// positionName property
        /// </summary>
		[ComponentElement]
		[XmlElement("positionName")]
        public CharacterString_PropertyType PositionName {
            get {
                return positionNameField;
            } 
            set {
                positionNameField = value;
                NotifyPropertyChanged("PositionName");
            }
        }

        private CharacterString_PropertyType positionNameField; 

        /// <summary>
        /// contactInfo property
        /// </summary>
		[ComponentElement]
		[XmlElement("contactInfo")]
        public CI_Contact_PropertyType ContactInfo {
            get {
                return contactInfoField;
            } 
            set {
                contactInfoField = value;
                NotifyPropertyChanged("ContactInfo");
            }
        }

        private CI_Contact_PropertyType contactInfoField; 

        /// <summary>
        /// role property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("role")]
        public CI_RoleCode_PropertyType Role {
            get {
                return roleField;
            } 
            set {
                roleField = value;
                NotifyPropertyChanged("Role");
            }
        }

        private CI_RoleCode_PropertyType roleField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Contact_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Contact_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Contact_PropertyType xsd type.")]
    public partial class CI_Contact_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Contact property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Contact")]
        public CI_Contact_Type CI_Contact {
            get {
                return CI_ContactField;
            } 
            set {
                CI_ContactField = value;
                NotifyPropertyChanged("CI_Contact");
            }
        }

        private CI_Contact_Type CI_ContactField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_RoleCode_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_RoleCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_RoleCode_PropertyType xsd type.")]
    public partial class CI_RoleCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_RoleCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_RoleCode")]
        public CodeListValue_Type CI_RoleCode {
            get {
                return CI_RoleCodeField;
            } 
            set {
                CI_RoleCodeField = value;
                NotifyPropertyChanged("CI_RoleCode");
            }
        }

        private CodeListValue_Type CI_RoleCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_Date_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Date", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Date_Type xsd type.")]
    public partial class CI_Date_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// date property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("date")]
        public Date_PropertyType Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                NotifyPropertyChanged("Date");
            }
        }

        private Date_PropertyType dateField; 

        /// <summary>
        /// dateType property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("dateType")]
        public CI_DateTypeCode_PropertyType DateType {
            get {
                return dateTypeField;
            } 
            set {
                dateTypeField = value;
                NotifyPropertyChanged("DateType");
            }
        }

        private CI_DateTypeCode_PropertyType dateTypeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Date_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Date_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Date_PropertyType xsd type.")]
    public partial class Date_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Date property
        /// </summary>
        [XmlElement("Date")]
        public String Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                DateSpecified = (value!=null);
                NotifyPropertyChanged("Date");
            }
        }

        private String DateField; 
        /// <summary>
        /// bool to indicate if Date has been set. Used for serialization.
        /// </summary>
        private bool dateSpecified = false; 
         [XmlIgnore]
         public bool DateSpecified
         {
            get {
                return dateSpecified;
            } 
            set {
                dateSpecified= value;
            } 
         }

        /// <summary>
        /// DateTime property
        /// </summary>
        [XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                DateTimeSpecified = (value!=null);
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 
        /// <summary>
        /// bool to indicate if DateTime has been set. Used for serialization.
        /// </summary>
        private bool dateTimeSpecified = false; 
         [XmlIgnore]
         public bool DateTimeSpecified
         {
            get {
                return dateTimeSpecified;
            } 
            set {
                dateTimeSpecified= value;
            } 
         }


		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_DateTypeCode_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_DateTypeCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_DateTypeCode_PropertyType xsd type.")]
    public partial class CI_DateTypeCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_DateTypeCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_DateTypeCode")]
        public CodeListValue_Type CI_DateTypeCode {
            get {
                return CI_DateTypeCodeField;
            } 
            set {
                CI_DateTypeCodeField = value;
                NotifyPropertyChanged("CI_DateTypeCode");
            }
        }

        private CodeListValue_Type CI_DateTypeCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_Citation_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Citation", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Citation_Type xsd type.")]
    public partial class CI_Citation_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// title property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("title")]
        public CharacterString_PropertyType Title {
            get {
                return titleField;
            } 
            set {
                titleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private CharacterString_PropertyType titleField; 

        /// <summary>
        /// alternateTitle property
        /// </summary>
		[RecurringElement]
		[XmlElement("alternateTitle")]
        public List<CharacterString_PropertyType> AlternateTitle {
            get {
                return alternateTitleField;
            } 
            set {
                alternateTitleField = value;
                NotifyPropertyChanged("AlternateTitle");
            }
        }

         [XmlIgnore]
         public bool AlternateTitleSpecified
         {
            get {
             if(alternateTitleField!=null)
                return alternateTitleField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CharacterString_PropertyType> alternateTitleField; 

        /// <summary>
        /// date property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("date")]
        public List<CI_Date_PropertyType> Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                NotifyPropertyChanged("Date");
            }
        }

         [XmlIgnore]
         public bool DateSpecified
         {
            get {
             if(dateField!=null)
                return dateField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CI_Date_PropertyType> dateField; 

        /// <summary>
        /// edition property
        /// </summary>
		[ComponentElement]
		[XmlElement("edition")]
        public CharacterString_PropertyType Edition {
            get {
                return editionField;
            } 
            set {
                editionField = value;
                NotifyPropertyChanged("Edition");
            }
        }

        private CharacterString_PropertyType editionField; 

        /// <summary>
        /// editionDate property
        /// </summary>
		[ComponentElement]
		[XmlElement("editionDate")]
        public Date_PropertyType EditionDate {
            get {
                return editionDateField;
            } 
            set {
                editionDateField = value;
                NotifyPropertyChanged("EditionDate");
            }
        }

        private Date_PropertyType editionDateField; 

        /// <summary>
        /// identifier property
        /// </summary>
		[RecurringElement]
		[XmlElement("identifier")]
        public List<MD_Identifier_PropertyType> Identifier {
            get {
                return identifierField;
            } 
            set {
                identifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

         [XmlIgnore]
         public bool IdentifierSpecified
         {
            get {
             if(identifierField!=null)
                return identifierField.Count>0?true:false;
             else return false;
            } 
         }
        private List<MD_Identifier_PropertyType> identifierField; 

        /// <summary>
        /// citedResponsibleParty property
        /// </summary>
		[RecurringElement]
		[XmlElement("citedResponsibleParty")]
        public List<CI_ResponsibleParty_PropertyType> CitedResponsibleParty {
            get {
                return citedResponsiblePartyField;
            } 
            set {
                citedResponsiblePartyField = value;
                NotifyPropertyChanged("CitedResponsibleParty");
            }
        }

         [XmlIgnore]
         public bool CitedResponsiblePartySpecified
         {
            get {
             if(citedResponsiblePartyField!=null)
                return citedResponsiblePartyField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CI_ResponsibleParty_PropertyType> citedResponsiblePartyField; 

        /// <summary>
        /// presentationForm property
        /// </summary>
		[RecurringElement]
		[XmlElement("presentationForm")]
        public List<CI_PresentationFormCode_PropertyType> PresentationForm {
            get {
                return presentationFormField;
            } 
            set {
                presentationFormField = value;
                NotifyPropertyChanged("PresentationForm");
            }
        }

         [XmlIgnore]
         public bool PresentationFormSpecified
         {
            get {
             if(presentationFormField!=null)
                return presentationFormField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CI_PresentationFormCode_PropertyType> presentationFormField; 

        /// <summary>
        /// series property
        /// </summary>
		[ComponentElement]
		[XmlElement("series")]
        public CI_Series_PropertyType Series {
            get {
                return seriesField;
            } 
            set {
                seriesField = value;
                NotifyPropertyChanged("Series");
            }
        }

        private CI_Series_PropertyType seriesField; 

        /// <summary>
        /// otherCitationDetails property
        /// </summary>
		[ComponentElement]
		[XmlElement("otherCitationDetails")]
        public CharacterString_PropertyType OtherCitationDetails {
            get {
                return otherCitationDetailsField;
            } 
            set {
                otherCitationDetailsField = value;
                NotifyPropertyChanged("OtherCitationDetails");
            }
        }

        private CharacterString_PropertyType otherCitationDetailsField; 

        /// <summary>
        /// collectiveTitle property
        /// </summary>
		[ComponentElement]
		[XmlElement("collectiveTitle")]
        public CharacterString_PropertyType CollectiveTitle {
            get {
                return collectiveTitleField;
            } 
            set {
                collectiveTitleField = value;
                NotifyPropertyChanged("CollectiveTitle");
            }
        }

        private CharacterString_PropertyType collectiveTitleField; 

        /// <summary>
        /// ISBN property
        /// </summary>
		[ComponentElement]
		[XmlElement("ISBN")]
        public CharacterString_PropertyType ISBN {
            get {
                return ISBNField;
            } 
            set {
                ISBNField = value;
                NotifyPropertyChanged("ISBN");
            }
        }

        private CharacterString_PropertyType ISBNField; 

        /// <summary>
        /// ISSN property
        /// </summary>
		[ComponentElement]
		[XmlElement("ISSN")]
        public CharacterString_PropertyType ISSN {
            get {
                return ISSNField;
            } 
            set {
                ISSNField = value;
                NotifyPropertyChanged("ISSN");
            }
        }

        private CharacterString_PropertyType ISSNField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Date_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Date_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Date_PropertyType xsd type.")]
    public partial class CI_Date_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Date property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Date")]
        public CI_Date_Type CI_Date {
            get {
                return CI_DateField;
            } 
            set {
                CI_DateField = value;
                NotifyPropertyChanged("CI_Date");
            }
        }

        private CI_Date_Type CI_DateField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MD_Identifier_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MD_Identifier_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the MD_Identifier_PropertyType xsd type.")]
    public partial class MD_Identifier_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// MD_Identifier property
        /// </summary>
		[ComponentElement]
		[XmlElement("MD_Identifier")]
        public MD_Identifier_Type MD_Identifier {
            get {
                return MD_IdentifierField;
            } 
            set {
                MD_IdentifierField = value;
                NotifyPropertyChanged("MD_Identifier");
            }
        }

        private MD_Identifier_Type MD_IdentifierField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the MD_Identifier_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("MD_Identifier", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the MD_Identifier_Type xsd type.")]
    public partial class MD_Identifier_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// authority property
        /// </summary>
		[ComponentElement]
		[XmlElement("authority")]
        public CI_Citation_PropertyType Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private CI_Citation_PropertyType authorityField; 

        /// <summary>
        /// code property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("code")]
        public CharacterString_PropertyType Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                NotifyPropertyChanged("Code");
            }
        }

        private CharacterString_PropertyType codeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Citation_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Citation_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Citation_PropertyType xsd type.")]
    public partial class CI_Citation_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Citation property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Citation")]
        public CI_Citation_Type CI_Citation {
            get {
                return CI_CitationField;
            } 
            set {
                CI_CitationField = value;
                NotifyPropertyChanged("CI_Citation");
            }
        }

        private CI_Citation_Type CI_CitationField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_ResponsibleParty_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_ResponsibleParty_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_ResponsibleParty_PropertyType xsd type.")]
    public partial class CI_ResponsibleParty_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_ResponsibleParty property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_ResponsibleParty")]
        public CI_ResponsibleParty_Type CI_ResponsibleParty {
            get {
                return CI_ResponsiblePartyField;
            } 
            set {
                CI_ResponsiblePartyField = value;
                NotifyPropertyChanged("CI_ResponsibleParty");
            }
        }

        private CI_ResponsibleParty_Type CI_ResponsiblePartyField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_PresentationFormCode_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_PresentationFormCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_PresentationFormCode_PropertyType xsd type.")]
    public partial class CI_PresentationFormCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_PresentationFormCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_PresentationFormCode")]
        public CodeListValue_Type CI_PresentationFormCode {
            get {
                return CI_PresentationFormCodeField;
            } 
            set {
                CI_PresentationFormCodeField = value;
                NotifyPropertyChanged("CI_PresentationFormCode");
            }
        }

        private CodeListValue_Type CI_PresentationFormCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Series_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Series_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Series_PropertyType xsd type.")]
    public partial class CI_Series_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Series property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Series")]
        public CI_Series_Type CI_Series {
            get {
                return CI_SeriesField;
            } 
            set {
                CI_SeriesField = value;
                NotifyPropertyChanged("CI_Series");
            }
        }

        private CI_Series_Type CI_SeriesField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_Element_Type xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Element", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_Element_Type xsd type.")]
    public abstract partial class AbstractDQ_Element_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// nameOfMeasure property
        /// </summary>
		[RecurringElement]
		[XmlElement("nameOfMeasure")]
        public List<CharacterString_PropertyType> NameOfMeasure {
            get {
                return nameOfMeasureField;
            } 
            set {
                nameOfMeasureField = value;
                NotifyPropertyChanged("NameOfMeasure");
            }
        }

         [XmlIgnore]
         public bool NameOfMeasureSpecified
         {
            get {
             if(nameOfMeasureField!=null)
                return nameOfMeasureField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CharacterString_PropertyType> nameOfMeasureField; 

        /// <summary>
        /// measureIdentification property
        /// </summary>
		[ComponentElement]
		[XmlElement("measureIdentification")]
        public MD_Identifier_PropertyType MeasureIdentification {
            get {
                return measureIdentificationField;
            } 
            set {
                measureIdentificationField = value;
                NotifyPropertyChanged("MeasureIdentification");
            }
        }

        private MD_Identifier_PropertyType measureIdentificationField; 

        /// <summary>
        /// measureDescription property
        /// </summary>
		[ComponentElement]
		[XmlElement("measureDescription")]
        public CharacterString_PropertyType MeasureDescription {
            get {
                return measureDescriptionField;
            } 
            set {
                measureDescriptionField = value;
                NotifyPropertyChanged("MeasureDescription");
            }
        }

        private CharacterString_PropertyType measureDescriptionField; 

        /// <summary>
        /// evaluationMethodType property
        /// </summary>
		[ComponentElement]
		[XmlElement("evaluationMethodType")]
        public DQ_EvaluationMethodTypeCode_PropertyType EvaluationMethodType {
            get {
                return evaluationMethodTypeField;
            } 
            set {
                evaluationMethodTypeField = value;
                NotifyPropertyChanged("EvaluationMethodType");
            }
        }

        private DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodTypeField; 

        /// <summary>
        /// evaluationMethodDescription property
        /// </summary>
		[ComponentElement]
		[XmlElement("evaluationMethodDescription")]
        public CharacterString_PropertyType EvaluationMethodDescription {
            get {
                return evaluationMethodDescriptionField;
            } 
            set {
                evaluationMethodDescriptionField = value;
                NotifyPropertyChanged("EvaluationMethodDescription");
            }
        }

        private CharacterString_PropertyType evaluationMethodDescriptionField; 

        /// <summary>
        /// evaluationProcedure property
        /// </summary>
		[ComponentElement]
		[XmlElement("evaluationProcedure")]
        public CI_Citation_PropertyType EvaluationProcedure {
            get {
                return evaluationProcedureField;
            } 
            set {
                evaluationProcedureField = value;
                NotifyPropertyChanged("EvaluationProcedure");
            }
        }

        private CI_Citation_PropertyType evaluationProcedureField; 

        /// <summary>
        /// dateTime property
        /// </summary>
		[RecurringElement]
		[XmlElement("dateTime")]
        public List<DateTime_PropertyType> DateTime {
            get {
                return dateTimeField;
            } 
            set {
                dateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

         [XmlIgnore]
         public bool DateTimeSpecified
         {
            get {
             if(dateTimeField!=null)
                return dateTimeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DateTime_PropertyType> dateTimeField; 

        /// <summary>
        /// result property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("result")]
        public List<DQ_Result_PropertyType> Result {
            get {
                return resultField;
            } 
            set {
                resultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         [XmlIgnore]
         public bool ResultSpecified
         {
            get {
             if(resultField!=null)
                return resultField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DQ_Result_PropertyType> resultField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DQ_EvaluationMethodTypeCode_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DQ_EvaluationMethodTypeCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the DQ_EvaluationMethodTypeCode_PropertyType xsd type.")]
    public partial class DQ_EvaluationMethodTypeCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DQ_EvaluationMethodTypeCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("DQ_EvaluationMethodTypeCode")]
        public CodeListValue_Type DQ_EvaluationMethodTypeCode {
            get {
                return DQ_EvaluationMethodTypeCodeField;
            } 
            set {
                DQ_EvaluationMethodTypeCodeField = value;
                NotifyPropertyChanged("DQ_EvaluationMethodTypeCode");
            }
        }

        private CodeListValue_Type DQ_EvaluationMethodTypeCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DateTime_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DateTime_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the DateTime_PropertyType xsd type.")]
    public partial class DateTime_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DateTime property
        /// </summary>
		
		[XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DQ_Result_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DQ_Result_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the DQ_Result_PropertyType xsd type.")]
    public partial class DQ_Result_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractDQ_Result property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractDQ_Result")]
        public AbstractDQ_Result_Type AbstractDQ_Result {
            get {
                return AbstractDQ_ResultField;
            } 
            set {
                AbstractDQ_ResultField = value;
                NotifyPropertyChanged("AbstractDQ_Result");
            }
        }

        private AbstractDQ_Result_Type AbstractDQ_ResultField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_PositionalAccuracy_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_PositionalAccuracy_Type xsd type.")]
    public abstract partial class AbstractDQ_PositionalAccuracy_Type : AbstractDQ_Element_Type, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EX_VerticalExtent_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_VerticalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_VerticalExtent_Type xsd type.")]
    public partial class EX_VerticalExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// minimumValue property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("minimumValue")]
        public Real_PropertyType MinimumValue {
            get {
                return minimumValueField;
            } 
            set {
                minimumValueField = value;
                NotifyPropertyChanged("MinimumValue");
            }
        }

        private Real_PropertyType minimumValueField; 

        /// <summary>
        /// maximumValue property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("maximumValue")]
        public Real_PropertyType MaximumValue {
            get {
                return maximumValueField;
            } 
            set {
                maximumValueField = value;
                NotifyPropertyChanged("MaximumValue");
            }
        }

        private Real_PropertyType maximumValueField; 

        /// <summary>
        /// verticalCRS property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("verticalCRS")]
        public SC_CRS_PropertyType VerticalCRS {
            get {
                return verticalCRSField;
            } 
            set {
                verticalCRSField = value;
                NotifyPropertyChanged("VerticalCRS");
            }
        }

        private SC_CRS_PropertyType verticalCRSField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Real_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Real_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Real_PropertyType xsd type.")]
    public partial class Real_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Real property
        /// </summary>
		
		[XmlElement("Real")]
        public Double? Real {
            get {
                return RealField;
            } 
            set {
                RealField = value;
                NotifyPropertyChanged("Real");
            }
        }

        private Double? RealField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SC_CRS_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SC_CRS_PropertyType", Namespace="http://www.isotc211.org/2005/gsr")]
	[Description("This class represents the SC_CRS_PropertyType xsd type.")]
    public partial class SC_CRS_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractCRSType AbstractCRS {
            get {
                return AbstractCRSField;
            } 
            set {
                AbstractCRSField = value;
                NotifyPropertyChanged("AbstractCRS");
            }
        }

        private AbstractCRSType AbstractCRSField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractCRSType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCRSType xsd type.")]
    public abstract partial class AbstractCRSType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[RecurringElement]
		[XmlElement("domainOfValidity")]
        public List<DomainOfValidity> DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

         [XmlIgnore]
         public bool DomainOfValiditySpecified
         {
            get {
             if(domainOfValidityField!=null)
                return domainOfValidityField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DomainOfValidity> domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<String> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         [XmlIgnore]
         public bool ScopeSpecified
         {
            get {
             if(scopeField!=null)
                return scopeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> scopeField; 


    } //here

    /// <summary>
    /// This class represents the VerticalCRSType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCRSType xsd type.")]
    public partial class VerticalCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// verticalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("verticalCS")]
        public VerticalCSPropertyType VerticalCS {
            get {
                return verticalCSField;
            } 
            set {
                verticalCSField = value;
                NotifyPropertyChanged("VerticalCS");
            }
        }

        private VerticalCSPropertyType verticalCSField; 

        /// <summary>
        /// verticalDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("verticalDatum")]
        public VerticalDatumPropertyType VerticalDatum {
            get {
                return verticalDatumField;
            } 
            set {
                verticalDatumField = value;
                NotifyPropertyChanged("VerticalDatum");
            }
        }

        private VerticalDatumPropertyType verticalDatumField; 


    } //here

    /// <summary>
    /// This class represents the VerticalCSPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCSPropertyType xsd type.")]
    public partial class VerticalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VerticalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("VerticalCS")]
        public VerticalCSType VerticalCS {
            get {
                return VerticalCSField;
            } 
            set {
                VerticalCSField = value;
                NotifyPropertyChanged("VerticalCS");
            }
        }

        private VerticalCSType VerticalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the VerticalCSType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCSType xsd type.")]
    public partial class VerticalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the VerticalDatumPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalDatumPropertyType xsd type.")]
    public partial class VerticalDatumPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VerticalDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("VerticalDatum")]
        public VerticalDatumType VerticalDatum {
            get {
                return VerticalDatumField;
            } 
            set {
                VerticalDatumField = value;
                NotifyPropertyChanged("VerticalDatum");
            }
        }

        private VerticalDatumType VerticalDatumField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the VerticalDatumType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalDatumType xsd type.")]
    public partial class VerticalDatumType : AbstractDatumType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractDatumType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractDatumType xsd type.")]
    public abstract partial class AbstractDatumType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[ComponentElement]
		[XmlElement("domainOfValidity")]
        public DomainOfValidity DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

        private DomainOfValidity domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<String> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         [XmlIgnore]
         public bool ScopeSpecified
         {
            get {
             if(scopeField!=null)
                return scopeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> scopeField; 

        /// <summary>
        /// anchorDefinition property
        /// </summary>
		[ComponentElement]
		[XmlElement("anchorDefinition")]
        public CodeType AnchorDefinition {
            get {
                return anchorDefinitionField;
            } 
            set {
                anchorDefinitionField = value;
                NotifyPropertyChanged("AnchorDefinition");
            }
        }

        private CodeType anchorDefinitionField; 

        /// <summary>
        /// realizationEpoch property
        /// </summary>
		
		[XmlElement("realizationEpoch", DataType="date")]
        public DateTime? RealizationEpoch {
            get {
                return realizationEpochField;
            } 
            set {
                realizationEpochField = value;
             if(value!=null) 
                 this.RealizationEpochSpecified = true;
                NotifyPropertyChanged("RealizationEpoch");
            }
        }

        private DateTime? realizationEpochField; 

        /// <summary>
        /// realizationEpochSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RealizationEpochSpecified {
            get {
                return realizationEpochSpecifiedField;
            } 
            set {
                realizationEpochSpecifiedField = value;
                NotifyPropertyChanged("RealizationEpochSpecified");
            }
        }

        private Boolean realizationEpochSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the GeodeticDatumType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticDatumType xsd type.")]
    public partial class GeodeticDatumType : AbstractDatumType, INotifyPropertyChanged
    {

        /// <summary>
        /// primeMeridian property
        /// </summary>
		[ComponentElement]
		[XmlElement("primeMeridian")]
        public PrimeMeridianPropertyType PrimeMeridian {
            get {
                return primeMeridianField;
            } 
            set {
                primeMeridianField = value;
                NotifyPropertyChanged("PrimeMeridian");
            }
        }

        private PrimeMeridianPropertyType primeMeridianField; 

        /// <summary>
        /// ellipsoid property
        /// </summary>
		[ComponentElement]
		[XmlElement("ellipsoid")]
        public EllipsoidPropertyType Ellipsoid {
            get {
                return ellipsoidField;
            } 
            set {
                ellipsoidField = value;
                NotifyPropertyChanged("Ellipsoid");
            }
        }

        private EllipsoidPropertyType ellipsoidField; 


    } //here

    /// <summary>
    /// This class represents the PrimeMeridianPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("primeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the PrimeMeridianPropertyType xsd type.")]
    public partial class PrimeMeridianPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PrimeMeridian property
        /// </summary>
		[ComponentElement]
		[XmlElement("PrimeMeridian")]
        public PrimeMeridianType PrimeMeridian {
            get {
                return PrimeMeridianField;
            } 
            set {
                PrimeMeridianField = value;
                NotifyPropertyChanged("PrimeMeridian");
            }
        }

        private PrimeMeridianType PrimeMeridianField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the PrimeMeridianType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("PrimeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the PrimeMeridianType xsd type.")]
    public partial class PrimeMeridianType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// greenwichLongitude property
        /// </summary>
		
		[XmlElement("greenwichLongitude")]
        public AngleType GreenwichLongitude {
            get {
                return greenwichLongitudeField;
            } 
            set {
                greenwichLongitudeField = value;
                NotifyPropertyChanged("GreenwichLongitude");
            }
        }

        private AngleType greenwichLongitudeField; 


    } //here

    /// <summary>
    /// This class represents the AngleType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("greenwichLongitude", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AngleType xsd type.")]
    public partial class AngleType : MeasureType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AngleType class.
        /// </summary>
        public AngleType() {}

        /// <summary>
        /// Initializes a new instance of the AngleType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public AngleType(Double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here

    /// <summary>
    /// This class represents the MeasureType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AngleType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("semiMajorAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the MeasureType xsd type.")]
    public partial class MeasureType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasureType class.
        /// </summary>
        public MeasureType() {}

        /// <summary>
        /// Initializes a new instance of the MeasureType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public MeasureType(Double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the LengthType xsd type.")]
    public partial class LengthType : MeasureType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthType class.
        /// </summary>
        public LengthType() {}

        /// <summary>
        /// Initializes a new instance of the LengthType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public LengthType(Double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here
    }

    /// <summary>
    /// This class represents the EllipsoidPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidPropertyType xsd type.")]
    public partial class EllipsoidPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Ellipsoid property
        /// </summary>
		[ComponentElement]
		[XmlElement("Ellipsoid")]
        public EllipsoidType Ellipsoid {
            get {
                return EllipsoidField;
            } 
            set {
                EllipsoidField = value;
                NotifyPropertyChanged("Ellipsoid");
            }
        }

        private EllipsoidType EllipsoidField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EllipsoidType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidType xsd type.")]
    public partial class EllipsoidType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// semiMajorAxis property
        /// </summary>
		
		[XmlElement("semiMajorAxis")]
        public MeasureType SemiMajorAxis {
            get {
                return semiMajorAxisField;
            } 
            set {
                semiMajorAxisField = value;
                NotifyPropertyChanged("SemiMajorAxis");
            }
        }

        private MeasureType semiMajorAxisField; 

        /// <summary>
        /// secondDefiningParameter property
        /// </summary>
		
		[XmlElement("secondDefiningParameter")]
        public SecondDefParameter SecondDefiningParameter {
            get {
                return secondDefiningParameterField;
            } 
            set {
                secondDefiningParameterField = value;
                NotifyPropertyChanged("SecondDefiningParameter");
            }
        }

        private SecondDefParameter secondDefiningParameterField; 


    } //here

    /// <summary>
    /// This class represents the secondDefiningParameter xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the secondDefiningParameter xsd type.")]
    public partial class SecondDefParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SecondDefiningParameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("SecondDefiningParameter")]
        public SecondDefiningParameter SecondDefiningParameter {
            get {
                return SecondDefiningParameterField;
            } 
            set {
                SecondDefiningParameterField = value;
                NotifyPropertyChanged("SecondDefiningParameter");
            }
        }

        private SecondDefiningParameter SecondDefiningParameterField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SecondDefiningParameter xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SecondDefiningParameter xsd type.")]
    public partial class SecondDefiningParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// inverseFlattening property
        /// </summary>
        [XmlElement("inverseFlattening")]
        public MeasureType InverseFlattening {
            get {
                return inverseFlatteningField;
            } 
            set {
                inverseFlatteningField = value;
                InverseFlatteningSpecified = (value!=null);
                NotifyPropertyChanged("InverseFlattening");
            }
        }

        private MeasureType inverseFlatteningField; 
        /// <summary>
        /// bool to indicate if InverseFlattening has been set. Used for serialization.
        /// </summary>
        private bool inverseFlatteningSpecified = false; 
         [XmlIgnore]
         public bool InverseFlatteningSpecified
         {
            get {
                return inverseFlatteningSpecified;
            } 
            set {
                inverseFlatteningSpecified= value;
            } 
         }

        /// <summary>
        /// isSphere property
        /// </summary>
        [XmlElement("isSphere")]
        public Boolean? IsSphere {
            get {
                return isSphereField;
            } 
            set {
                isSphereField = value;
                IsSphereSpecified = (value!=null);
                NotifyPropertyChanged("IsSphere");
            }
        }

        private Boolean? isSphereField; 
        /// <summary>
        /// bool to indicate if IsSphere has been set. Used for serialization.
        /// </summary>
        private bool isSphereSpecified = false; 
         [XmlIgnore]
         public bool IsSphereSpecified
         {
            get {
                return isSphereSpecified;
            } 
            set {
                isSphereSpecified= value;
            } 
         }

        /// <summary>
        /// semiMinorAxis property
        /// </summary>
        [XmlElement("semiMinorAxis")]
        public LengthType SemiMinorAxis {
            get {
                return semiMinorAxisField;
            } 
            set {
                semiMinorAxisField = value;
                SemiMinorAxisSpecified = (value!=null);
                NotifyPropertyChanged("SemiMinorAxis");
            }
        }

        private LengthType semiMinorAxisField; 
        /// <summary>
        /// bool to indicate if SemiMinorAxis has been set. Used for serialization.
        /// </summary>
        private bool semiMinorAxisSpecified = false; 
         [XmlIgnore]
         public bool SemiMinorAxisSpecified
         {
            get {
                return semiMinorAxisSpecified;
            } 
            set {
                semiMinorAxisSpecified= value;
            } 
         }



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractGeneralDerivedCRSType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralDerivedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGeneralDerivedCRSType xsd type.")]
    public abstract partial class AbstractGeneralDerivedCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// conversion property
        /// </summary>
		[ComponentElement]
		[XmlElement("conversion")]
        public GeneralConversionPropertyType Conversion {
            get {
                return conversionField;
            } 
            set {
                conversionField = value;
                NotifyPropertyChanged("Conversion");
            }
        }

        private GeneralConversionPropertyType conversionField; 


    } //here

    /// <summary>
    /// This class represents the GeneralConversionPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("conversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeneralConversionPropertyType xsd type.")]
    public partial class GeneralConversionPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractGeneralConversion property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractGeneralConversion")]
        public AbstractGeneralConversionType AbstractGeneralConversion {
            get {
                return AbstractGeneralConversionField;
            } 
            set {
                AbstractGeneralConversionField = value;
                NotifyPropertyChanged("AbstractGeneralConversion");
            }
        }

        private AbstractGeneralConversionType AbstractGeneralConversionField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractGeneralConversionType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralConversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGeneralConversionType xsd type.")]
    public abstract partial class AbstractGeneralConversionType : AbstractCoordinateOperationType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EX_TemporalExtent_Type xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_TemporalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_TemporalExtent_Type xsd type.")]
    public partial class EX_TemporalExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// extent property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("extent")]
        public TM_Primitive_PropertyType Extent {
            get {
                return extentField;
            } 
            set {
                extentField = value;
                NotifyPropertyChanged("Extent");
            }
        }

        private TM_Primitive_PropertyType extentField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TM_Primitive_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TM_Primitive_PropertyType", Namespace="http://www.isotc211.org/2005/gts")]
	[Description("This class represents the TM_Primitive_PropertyType xsd type.")]
    public partial class TM_Primitive_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractTimePrimitive property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return AbstractTimePrimitiveField;
            } 
            set {
                AbstractTimePrimitiveField = value;
                NotifyPropertyChanged("AbstractTimePrimitive");
            }
        }

        private AbstractTimePrimitiveType AbstractTimePrimitiveField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_TemporalExtent_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_TemporalExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_TemporalExtent_PropertyType xsd type.")]
    public partial class EX_TemporalExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_TemporalExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_TemporalExtent")]
        public EX_TemporalExtent_Type EX_TemporalExtent {
            get {
                return EX_TemporalExtentField;
            } 
            set {
                EX_TemporalExtentField = value;
                NotifyPropertyChanged("EX_TemporalExtent");
            }
        }

        private EX_TemporalExtent_Type EX_TemporalExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_VerticalExtent_PropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_VerticalExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_VerticalExtent_PropertyType xsd type.")]
    public partial class EX_VerticalExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_VerticalExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_VerticalExtent")]
        public EX_VerticalExtent_Type EX_VerticalExtent {
            get {
                return EX_VerticalExtentField;
            } 
            set {
                EX_VerticalExtentField = value;
                NotifyPropertyChanged("EX_VerticalExtent");
            }
        }

        private EX_VerticalExtent_Type EX_VerticalExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		
        [XmlAttribute("uuidref")]
		
        public String Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private String uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the coordinateOperationAccuracy xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the coordinateOperationAccuracy xsd type.")]
    public partial class CoordinateOperationAccuracy : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractDQ_PositionalAccuracy property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracy {
            get {
                return AbstractDQ_PositionalAccuracyField;
            } 
            set {
                AbstractDQ_PositionalAccuracyField = value;
                NotifyPropertyChanged("AbstractDQ_PositionalAccuracy");
            }
        }

        private AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracyField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CRSPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sourceCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CRSPropertyType xsd type.")]
    public partial class CRSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractCRS")]
        public AbstractCRSType AbstractCRS {
            get {
                return AbstractCRSField;
            } 
            set {
                AbstractCRSField = value;
                NotifyPropertyChanged("AbstractCRS");
            }
        }

        private AbstractCRSType AbstractCRSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SphericalCSType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("SphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SphericalCSType xsd type.")]
    public partial class SphericalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EllipsoidalCSType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("EllipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidalCSType xsd type.")]
    public partial class EllipsoidalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EllipsoidalCSPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidalCSPropertyType xsd type.")]
    public partial class EllipsoidalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EllipsoidalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("EllipsoidalCS")]
        public EllipsoidalCSType EllipsoidalCS {
            get {
                return EllipsoidalCSField;
            } 
            set {
                EllipsoidalCSField = value;
                NotifyPropertyChanged("EllipsoidalCS");
            }
        }

        private EllipsoidalCSType EllipsoidalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SphericalCSPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SphericalCSPropertyType xsd type.")]
    public partial class SphericalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SphericalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("SphericalCS")]
        public SphericalCSType SphericalCS {
            get {
                return SphericalCSField;
            } 
            set {
                SphericalCSField = value;
                NotifyPropertyChanged("SphericalCS");
            }
        }

        private SphericalCSType SphericalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the GeodeticDatumPropertyType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("geodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticDatumPropertyType xsd type.")]
    public partial class GeodeticDatumPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GeodeticDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("GeodeticDatum")]
        public GeodeticDatumType GeodeticDatum {
            get {
                return GeodeticDatumField;
            } 
            set {
                GeodeticDatumField = value;
                NotifyPropertyChanged("GeodeticDatum");
            }
        }

        private GeodeticDatumType GeodeticDatumField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public String NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private String nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedWktCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedWktCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedWktCrs xsd type.")]
    public partial class ProjectedWktCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// WellKnownText property
        /// </summary>
		
		[XmlElement("WellKnownText")]
        public String WellKnownText {
            get {
                return WellKnownTextField;
            } 
            set {
                WellKnownTextField = value;
                NotifyPropertyChanged("WellKnownText");
            }
        }

        private String WellKnownTextField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedUnknownCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedUnknownCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedUnknownCrs xsd type.")]
    public partial class ProjectedUnknownCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// Unknown property
        /// </summary>
		
		[XmlElement("Unknown")]
        public String Unknown {
            get {
                return UnknownField;
            } 
            set {
                UnknownField = value;
                NotifyPropertyChanged("Unknown");
            }
        }

        private String UnknownField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedEpsgCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedEpsgCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedEpsgCrs xsd type.")]
    public partial class ProjectedEpsgCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// EpsgCode property
        /// </summary>
		
		[XmlElement("EpsgCode")]
        public Int64? EpsgCode {
            get {
                return EpsgCodeField;
            } 
            set {
                EpsgCodeField = value;
                NotifyPropertyChanged("EpsgCode");
            }
        }

        private Int64? EpsgCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticWellLocation xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticWellLocation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GeodeticWellLocation xsd type.")]
    public partial class GeodeticWellLocation : AbstractWellLocation, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Latitude property
        /// </summary>
		[Required]
        [Description("The latitude with north being positive.")]
		[XmlElement("Latitude")]
        public Double? Latitude {
            get {
                return LatitudeField;
            } 
            set {
                LatitudeField = value;
                NotifyPropertyChanged("Latitude");
            }
        }

        private Double? LatitudeField; 

        /// <summary>
        /// Longitude property
        /// </summary>
		[Required]
        [Description("The longitude with east being positive.")]
		[XmlElement("Longitude")]
        public Double? Longitude {
            get {
                return LongitudeField;
            } 
            set {
                LongitudeField = value;
                NotifyPropertyChanged("Longitude");
            }
        }

        private Double? LongitudeField; 

        /// <summary>
        /// Crs property
        /// </summary>
		[Required]
		[XmlElement("Crs")]
        public AbstractGeodeticCrs Crs {
            get {
                return CrsField;
            } 
            set {
                CrsField = value;
                NotifyPropertyChanged("Crs");
            }
        }

        private AbstractGeodeticCrs CrsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractGeodeticCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticEpsgCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticUnknownCrs))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractGeodeticCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractGeodeticCrs xsd type.")]
    public abstract partial class AbstractGeodeticCrs : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticLocalAuthorityCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticLocalAuthorityCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticLocalAuthorityCrs xsd type.")]
    public partial class GeodeticLocalAuthorityCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// LocalAuthorityCrsName property
        /// </summary>
		
		[XmlElement("LocalAuthorityCrsName")]
        public String LocalAuthorityCrsName {
            get {
                return LocalAuthorityCrsNameField;
            } 
            set {
                LocalAuthorityCrsNameField = value;
                NotifyPropertyChanged("LocalAuthorityCrsName");
            }
        }

        private String LocalAuthorityCrsNameField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticGmlCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticGmlCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticGmlCrs xsd type.")]
    public partial class GeodeticGmlCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// GmlProjectedCrsDefinition property
        /// </summary>
		[ComponentElement]
		[XmlElement("GmlProjectedCrsDefinition")]
        public GeodeticCRSType GmlProjectedCrsDefinition {
            get {
                return GmlProjectedCrsDefinitionField;
            } 
            set {
                GmlProjectedCrsDefinitionField = value;
                NotifyPropertyChanged("GmlProjectedCrsDefinition");
            }
        }

        private GeodeticCRSType GmlProjectedCrsDefinitionField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticEpsgCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticEpsgCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticEpsgCrs xsd type.")]
    public partial class GeodeticEpsgCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// EpsgCode property
        /// </summary>
		
		[XmlElement("EpsgCode")]
        public Int64? EpsgCode {
            get {
                return EpsgCodeField;
            } 
            set {
                EpsgCodeField = value;
                NotifyPropertyChanged("EpsgCode");
            }
        }

        private Int64? EpsgCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticWktCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticWktCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticWktCrs xsd type.")]
    public partial class GeodeticWktCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// WellKnownText property
        /// </summary>
		
		[XmlElement("WellKnownText")]
        public String WellKnownText {
            get {
                return WellKnownTextField;
            } 
            set {
                WellKnownTextField = value;
                NotifyPropertyChanged("WellKnownText");
            }
        }

        private String WellKnownTextField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticUnknownCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticUnknownCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticUnknownCrs xsd type.")]
    public partial class GeodeticUnknownCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// Unknown property
        /// </summary>
		
		[XmlElement("Unknown")]
        public String Unknown {
            get {
                return UnknownField;
            } 
            set {
                UnknownField = value;
                NotifyPropertyChanged("Unknown");
            }
        }

        private String UnknownField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MeasureOrQuantity xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MeasureOrQuantity", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MeasureOrQuantity xsd type.")]
    public partial class MeasureOrQuantity : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        public MeasureOrQuantity() {}

        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasureOrQuantity(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[StringLength(32)]
        [Description("A measure with a uom or a quantity (without a uom). This should not be used except in situations where the underlying class of data is captured elsewhere. For example, via a measure class.")]
        [XmlAttribute("uom")]
		
        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaErrorTermValue xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaErrorTermValue", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaErrorTermValue xsd type.")]
    public partial class IscwsaErrorTermValue : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IscwsaErrorTermValue class.
        /// </summary>
        public IscwsaErrorTermValue() {}

        /// <summary>
        /// Initializes a new instance of the IscwsaErrorTermValue class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IscwsaErrorTermValue(MeasureOrQuantity value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Term property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the errorTerm represented by this value. This term must exist in the toolErrorTermSet referenced by the parent of this node. The same term may only be referenced once in the model.")]
		[XmlElement("Term")]
        public String Term {
            get {
                return TermField;
            } 
            set {
                TermField = value;
                NotifyPropertyChanged("Term");
            }
        }

        private String TermField; 

        /// <summary>
        /// Prop property
        /// </summary>
		[Required]
        [Description("This is the propagation mode for this term in this model.")]
		[XmlElement("Prop")]
        public ErrorPropagationMode? Prop {
            get {
                return PropField;
            } 
            set {
                PropField = value;
                NotifyPropertyChanged("Prop");
            }
        }

        private ErrorPropagationMode? PropField; 

        /// <summary>
        /// Bias property
        /// </summary>
		[Description("The mean or expected value of the variance.")]
		[XmlElement("Bias")]
        public Double? Bias {
            get {
                return BiasField;
            } 
            set {
                BiasField = value;
             if(value!=null) 
                 this.BiasSpecified = true;
                NotifyPropertyChanged("Bias");
            }
        }

        private Double? BiasField; 

        /// <summary>
        /// BiasSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean BiasSpecified {
            get {
                return BiasSpecifiedField;
            } 
            set {
                BiasSpecifiedField = value;
                NotifyPropertyChanged("BiasSpecified");
            }
        }

        private Boolean BiasSpecifiedField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A textual comment about this error term value.")]
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Value")]
        public MeasureOrQuantity Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private MeasureOrQuantity ValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaErrorTermValue")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaModelParameters xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaModelParameters", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaModelParameters xsd type.")]
    public partial class IscwsaModelParameters : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// MisalignmentMode property
        /// </summary>
		[Required]
        [Description("Choice of mathmatical modelling of misalignment.")]
		[XmlElement("MisalignmentMode")]
        public ErrorModelMisalignmentMode? MisalignmentMode {
            get {
                return MisalignmentModeField;
            } 
            set {
                MisalignmentModeField = value;
                NotifyPropertyChanged("MisalignmentMode");
            }
        }

        private ErrorModelMisalignmentMode? MisalignmentModeField; 

        /// <summary>
        /// GyroInitialization property
        /// </summary>
		[Description("Inclination at which gyro initialization occurs.")]
        [ComponentElement]
		[XmlElement("GyroInitialization")]
        public PlaneAngleMeasure GyroInitialization {
            get {
                return GyroInitializationField;
            } 
            set {
                GyroInitializationField = value;
                NotifyPropertyChanged("GyroInitialization");
            }
        }

        private PlaneAngleMeasure GyroInitializationField; 

        /// <summary>
        /// GyroReinitializationDistance property
        /// </summary>
		[Description("Maximum length of continuous survey before re-initialisation.")]
        [ComponentElement]
		[XmlElement("GyroReinitializationDistance")]
        public LengthMeasure GyroReinitializationDistance {
            get {
                return GyroReinitializationDistanceField;
            } 
            set {
                GyroReinitializationDistanceField = value;
                NotifyPropertyChanged("GyroReinitializationDistance");
            }
        }

        private LengthMeasure GyroReinitializationDistanceField; 

        /// <summary>
        /// Switching property
        /// </summary>
		[Description("True if the survey tool is rotated at inclinations greater than 90 degrees.")]
		[XmlElement("Switching")]
        public Boolean? Switching {
            get {
                return SwitchingField;
            } 
            set {
                SwitchingField = value;
             if(value!=null) 
                 this.SwitchingSpecified = true;
                NotifyPropertyChanged("Switching");
            }
        }

        private Boolean? SwitchingField; 

        /// <summary>
        /// SwitchingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean SwitchingSpecified {
            get {
                return SwitchingSpecifiedField;
            } 
            set {
                SwitchingSpecifiedField = value;
                NotifyPropertyChanged("SwitchingSpecified");
            }
        }

        private Boolean SwitchingSpecifiedField; 

        /// <summary>
        /// NoiseReductionFactor property
        /// </summary>
		[Description("Factor applied to Random Noise error terms depending on mode of gyro initialisation. Values must be greater than zero and less than or equal to 1.")]
		[XmlElement("NoiseReductionFactor")]
        public Double? NoiseReductionFactor {
            get {
                return NoiseReductionFactorField;
            } 
            set {
                NoiseReductionFactorField = value;
             if(value!=null) 
                 this.NoiseReductionFactorSpecified = true;
                NotifyPropertyChanged("NoiseReductionFactor");
            }
        }

        private Double? NoiseReductionFactorField; 

        /// <summary>
        /// NoiseReductionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NoiseReductionFactorSpecified {
            get {
                return NoiseReductionFactorSpecifiedField;
            } 
            set {
                NoiseReductionFactorSpecifiedField = value;
                NotifyPropertyChanged("NoiseReductionFactorSpecified");
            }
        }

        private Boolean NoiseReductionFactorSpecifiedField; 

        /// <summary>
        /// GyroRunningSpeed property
        /// </summary>
		[Description("Speed at which the tool traverses the wellbore during continuous survey.")]
        [ComponentElement]
		[XmlElement("GyroRunningSpeed")]
        public LengthPerTimeMeasure GyroRunningSpeed {
            get {
                return GyroRunningSpeedField;
            } 
            set {
                GyroRunningSpeedField = value;
                NotifyPropertyChanged("GyroRunningSpeed");
            }
        }

        private LengthPerTimeMeasure GyroRunningSpeedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaSurveyToolOperatingInterval xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaSurveyToolOperatingInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaSurveyToolOperatingInterval xsd type.")]
    public partial class IscwsaSurveyToolOperatingInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Mode property
        /// </summary>
		[Required]
        [Description("Tool operating mode over this interval.")]
		[XmlElement("Mode")]
        public SurveyToolOperatingMode? Mode {
            get {
                return ModeField;
            } 
            set {
                ModeField = value;
                NotifyPropertyChanged("Mode");
            }
        }

        private SurveyToolOperatingMode? ModeField; 

        /// <summary>
        /// Start property
        /// </summary>
		[Required]
        [Description("Inclination at which mode commences.")]
        [ComponentElement]
		[XmlElement("Start")]
        public PlaneAngleMeasure Start {
            get {
                return StartField;
            } 
            set {
                StartField = value;
                NotifyPropertyChanged("Start");
            }
        }

        private PlaneAngleMeasure StartField; 

        /// <summary>
        /// End property
        /// </summary>
		[Required]
        [Description("Inclination at which mode terminates.")]
        [ComponentElement]
		[XmlElement("End")]
        public PlaneAngleMeasure End {
            get {
                return EndField;
            } 
            set {
                EndField = value;
                NotifyPropertyChanged("End");
            }
        }

        private PlaneAngleMeasure EndField; 

        /// <summary>
        /// Speed property
        /// </summary>
		[Description("Running speed for continuous surveys.")]
        [ComponentElement]
		[XmlElement("Speed")]
        public LengthPerTimeMeasure Speed {
            get {
                return SpeedField;
            } 
            set {
                SpeedField = value;
                NotifyPropertyChanged("Speed");
            }
        }

        private LengthPerTimeMeasure SpeedField; 

        /// <summary>
        /// SampleRate property
        /// </summary>
		[Description("Time between survey samples for continuous surveys.")]
        [ComponentElement]
		[XmlElement("SampleRate")]
        public TimeMeasure SampleRate {
            get {
                return SampleRateField;
            } 
            set {
                SampleRateField = value;
                NotifyPropertyChanged("SampleRate");
            }
        }

        private TimeMeasure SampleRateField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaSurveyToolOperatingInterval")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaSurveyToolOperatingCondition xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaSurveyToolOperatingCondition", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaSurveyToolOperatingCondition xsd type.")]
    public partial class IscwsaSurveyToolOperatingCondition : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IscwsaSurveyToolOperatingCondition class.
        /// </summary>
        public IscwsaSurveyToolOperatingCondition() {}

        /// <summary>
        /// Initializes a new instance of the IscwsaSurveyToolOperatingCondition class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IscwsaSurveyToolOperatingCondition(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Parameter property
        /// </summary>
		[StringLength(64)]
        [Description("A particular constraint.")]
		[XmlElement("Parameter")]
        public String Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

        private String ParameterField; 

        /// <summary>
        /// Min property
        /// </summary>
		[Description("The least value the constraint may take.")]
        [ComponentElement]
		[XmlElement("Min")]
        public GenericMeasure Min {
            get {
                return MinField;
            } 
            set {
                MinField = value;
                NotifyPropertyChanged("Min");
            }
        }

        private GenericMeasure MinField; 

        /// <summary>
        /// Max property
        /// </summary>
		[Description("The greatest value the constraint may take.")]
        [ComponentElement]
		[XmlElement("Max")]
        public GenericMeasure Max {
            get {
                return MaxField;
            } 
            set {
                MaxField = value;
                NotifyPropertyChanged("Max");
            }
        }

        private GenericMeasure MaxField; 

        /// <summary>
        /// Value property
        /// </summary>
		[StringLength(64)]
        [Description("A fixed value that the constraint must take.")]
		[XmlElement("Value")]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaSurveyToolOperatingCondition")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaAuthorizationData xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaAuthorizationData", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaAuthorizationData xsd type.")]
    public partial class IscwsaAuthorizationData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Author property
        /// </summary>
		[StringLength(64)]
        [Description("Person responsible for the information.")]
		[XmlElement("Author")]
        public String Author {
            get {
                return AuthorField;
            } 
            set {
                AuthorField = value;
                NotifyPropertyChanged("Author");
            }
        }

        private String AuthorField; 

        /// <summary>
        /// Source property
        /// </summary>
		[StringLength(64)]
        [Description("Source from which the information is derived.")]
		[XmlElement("Source")]
        public String Source {
            get {
                return SourceField;
            } 
            set {
                SourceField = value;
                NotifyPropertyChanged("Source");
            }
        }

        private String SourceField; 

        /// <summary>
        /// Authority property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Person or collective body responsible for authorizing the information.")]
		[XmlElement("Authority")]
        public String Authority {
            get {
                return AuthorityField;
            } 
            set {
                AuthorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private String AuthorityField; 

        /// <summary>
        /// Status property
        /// </summary>
		[Required]
        [Description("Authorization state of the information.")]
		[XmlElement("Status")]
        public AuthorizationStatus? Status {
            get {
                return StatusField;
            } 
            set {
                StatusField = value;
                NotifyPropertyChanged("Status");
            }
        }

        private AuthorizationStatus? StatusField; 

        /// <summary>
        /// Version property
        /// </summary>
		[StringLength(64)]
        [Description("Version name or number.")]
		[XmlElement("Version")]
        public String Version {
            get {
                return VersionField;
            } 
            set {
                VersionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String VersionField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A comment about the object.  This should include information regarding the derivation of the information.")]
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeologyFeature xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeologyFeature", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GeologyFeature xsd type.")]
    public partial class GeologyFeature : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// GeologyType property
        /// </summary>
		
		[XmlElement("GeologyType")]
        public String GeologyType {
            get {
                return GeologyTypeField;
            } 
            set {
                GeologyTypeField = value;
                NotifyPropertyChanged("GeologyType");
            }
        }

        private String GeologyTypeField; 

        /// <summary>
        /// FeatureMdInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("FeatureMdInterval")]
        public MdInterval FeatureMDInterval {
            get {
                return FeatureMdIntervalField;
            } 
            set {
                FeatureMdIntervalField = value;
                NotifyPropertyChanged("FeatureMDInterval");
            }
        }

        private MdInterval FeatureMdIntervalField; 

        /// <summary>
        /// FeatureTvdInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("FeatureTvdInterval")]
        public TvdInterval FeatureTvdInterval {
            get {
                return FeatureTvdIntervalField;
            } 
            set {
                FeatureTvdIntervalField = value;
                NotifyPropertyChanged("FeatureTvdInterval");
            }
        }

        private TvdInterval FeatureTvdIntervalField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Borehole xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Borehole", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Borehole xsd type.")]
    public partial class Borehole : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// TypeBorehole property
        /// </summary>
		
		[XmlElement("TypeBorehole")]
        public String TypeBorehole {
            get {
                return TypeBoreholeField;
            } 
            set {
                TypeBoreholeField = value;
                NotifyPropertyChanged("TypeBorehole");
            }
        }

        private String TypeBoreholeField; 

        /// <summary>
        /// MdInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// TvdInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return TvdIntervalField;
            } 
            set {
                TvdIntervalField = value;
                NotifyPropertyChanged("TvdInterval");
            }
        }

        private TvdInterval TvdIntervalField; 

        /// <summary>
        /// BoreholeDiameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("BoreholeDiameter")]
        public LengthMeasure BoreholeDiameter {
            get {
                return BoreholeDiameterField;
            } 
            set {
                BoreholeDiameterField = value;
                NotifyPropertyChanged("BoreholeDiameter");
            }
        }

        private LengthMeasure BoreholeDiameterField; 

        /// <summary>
        /// DescriptionPermanent property
        /// </summary>
		
		[XmlElement("DescriptionPermanent")]
        public String DescriptionPermanent {
            get {
                return DescriptionPermanentField;
            } 
            set {
                DescriptionPermanentField = value;
                NotifyPropertyChanged("DescriptionPermanent");
            }
        }

        private String DescriptionPermanentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// EquipmentEventHistory property
        /// </summary>
		[ComponentElement]
		[XmlElement("EquipmentEventHistory")]
        public EventInfo EquipmentEventHistory {
            get {
                return EquipmentEventHistoryField;
            } 
            set {
                EquipmentEventHistoryField = value;
                NotifyPropertyChanged("EquipmentEventHistory");
            }
        }

        private EventInfo EquipmentEventHistoryField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BoreholeString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BoreholeString", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BoreholeString xsd type.")]
    public partial class BoreholeString : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Accessories property
        /// </summary>
		[RecurringElement]
		[XmlArrayItem("Accessory")]
        [XmlArray("Accessories")]
        public List<StringEquipment> Accessories {
            get {
                return AccessoriesField;
            } 
            set {
                AccessoriesField = value;
                NotifyPropertyChanged("Accessories");
            }
        }

         [XmlIgnore]
         public bool AccessoriesSpecified
         {
            get {
             if(AccessoriesField!=null)
                return AccessoriesField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StringEquipment> AccessoriesField; 

        /// <summary>
        /// Borehole property
        /// </summary>
		[RecurringElement]
		[XmlElement("Borehole")]
        public List<Borehole> Borehole {
            get {
                return BoreholeField;
            } 
            set {
                BoreholeField = value;
                NotifyPropertyChanged("Borehole");
            }
        }

         [XmlIgnore]
         public bool BoreholeSpecified
         {
            get {
             if(BoreholeField!=null)
                return BoreholeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Borehole> BoreholeField; 

        /// <summary>
        /// GeologyFeature property
        /// </summary>
		[RecurringElement]
		[XmlElement("GeologyFeature")]
        public List<GeologyFeature> GeologyFeature {
            get {
                return GeologyFeatureField;
            } 
            set {
                GeologyFeatureField = value;
                NotifyPropertyChanged("GeologyFeature");
            }
        }

         [XmlIgnore]
         public bool GeologyFeatureSpecified
         {
            get {
             if(GeologyFeatureField!=null)
                return GeologyFeatureField.Count>0?true:false;
             else return false;
            } 
         }
        private List<GeologyFeature> GeologyFeatureField; 

        /// <summary>
        /// ReferenceWellbore property
        /// </summary>
		[ComponentElement]
		[XmlElement("ReferenceWellbore")]
        public DataObjectReference ReferenceWellbore {
            get {
                return ReferenceWellboreField;
            } 
            set {
                ReferenceWellboreField = value;
                NotifyPropertyChanged("ReferenceWellbore");
            }
        }

        private DataObjectReference ReferenceWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringEquipment xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringEquipment", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StringEquipment xsd type.")]
    public partial class StringEquipment : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// EquipmentType property
        /// </summary>
		
		[XmlElement("EquipmentType")]
        public String EquipmentType {
            get {
                return EquipmentTypeField;
            } 
            set {
                EquipmentTypeField = value;
                NotifyPropertyChanged("EquipmentType");
            }
        }

        private String EquipmentTypeField; 

        /// <summary>
        /// Name property
        /// </summary>
		
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// EquipmentEventHistory property
        /// </summary>
		[RecurringElement]
		[XmlElement("EquipmentEventHistory")]
        public List<EventInfo> EquipmentEventHistory {
            get {
                return EquipmentEventHistoryField;
            } 
            set {
                EquipmentEventHistoryField = value;
                NotifyPropertyChanged("EquipmentEventHistory");
            }
        }

         [XmlIgnore]
         public bool EquipmentEventHistorySpecified
         {
            get {
             if(EquipmentEventHistoryField!=null)
                return EquipmentEventHistoryField.Count>0?true:false;
             else return false;
            } 
         }
        private List<EventInfo> EquipmentEventHistoryField; 

        /// <summary>
        /// Status property
        /// </summary>
		
		[XmlElement("Status")]
        public String Status {
            get {
                return StatusField;
            } 
            set {
                StatusField = value;
                NotifyPropertyChanged("Status");
            }
        }

        private String StatusField; 

        /// <summary>
        /// RunNo property
        /// </summary>
		
		[XmlElement("RunNo")]
        public String RunNo {
            get {
                return RunNoField;
            } 
            set {
                RunNoField = value;
                NotifyPropertyChanged("RunNo");
            }
        }

        private String RunNoField; 

        /// <summary>
        /// PreviousRunDays property
        /// </summary>
		[ComponentElement]
		[XmlElement("PreviousRunDays")]
        public TimeMeasure PreviousRunDays {
            get {
                return PreviousRunDaysField;
            } 
            set {
                PreviousRunDaysField = value;
                NotifyPropertyChanged("PreviousRunDays");
            }
        }

        private TimeMeasure PreviousRunDaysField; 

        /// <summary>
        /// ObjectCondition property
        /// </summary>
		
		[XmlElement("ObjectCondition")]
        public String ObjectCondition {
            get {
                return ObjectConditionField;
            } 
            set {
                ObjectConditionField = value;
                NotifyPropertyChanged("ObjectCondition");
            }
        }

        private String ObjectConditionField; 

        /// <summary>
        /// SurfaceCondition property
        /// </summary>
		
		[XmlElement("SurfaceCondition")]
        public String SurfaceCondition {
            get {
                return SurfaceConditionField;
            } 
            set {
                SurfaceConditionField = value;
                NotifyPropertyChanged("SurfaceCondition");
            }
        }

        private String SurfaceConditionField; 

        /// <summary>
        /// Count property
        /// </summary>
		
		[XmlElement("Count")]
        public Int32? Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
             if(value!=null) 
                 this.CountSpecified = true;
                NotifyPropertyChanged("Count");
            }
        }

        private Int32? CountField; 

        /// <summary>
        /// CountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CountSpecified {
            get {
                return CountSpecifiedField;
            } 
            set {
                CountSpecifiedField = value;
                NotifyPropertyChanged("CountSpecified");
            }
        }

        private Boolean CountSpecifiedField; 

        /// <summary>
        /// Length property
        /// </summary>
		[ComponentElement]
		[XmlElement("Length")]
        public LengthMeasure Length {
            get {
                return LengthField;
            } 
            set {
                LengthField = value;
                NotifyPropertyChanged("Length");
            }
        }

        private LengthMeasure LengthField; 

        /// <summary>
        /// MdInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// TvdInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return TvdIntervalField;
            } 
            set {
                TvdIntervalField = value;
                NotifyPropertyChanged("TvdInterval");
            }
        }

        private TvdInterval TvdIntervalField; 

        /// <summary>
        /// OutsideString property
        /// </summary>
		
		[XmlElement("OutsideString")]
        public Boolean? OutsideString {
            get {
                return OutsideStringField;
            } 
            set {
                OutsideStringField = value;
             if(value!=null) 
                 this.OutsideStringSpecified = true;
                NotifyPropertyChanged("OutsideString");
            }
        }

        private Boolean? OutsideStringField; 

        /// <summary>
        /// OutsideStringSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean OutsideStringSpecified {
            get {
                return OutsideStringSpecifiedField;
            } 
            set {
                OutsideStringSpecifiedField = value;
                NotifyPropertyChanged("OutsideStringSpecified");
            }
        }

        private Boolean OutsideStringSpecifiedField; 

        /// <summary>
        /// TensileMax property
        /// </summary>
		[ComponentElement]
		[XmlElement("TensileMax")]
        public ForceMeasure TensileMax {
            get {
                return TensileMaxField;
            } 
            set {
                TensileMaxField = value;
                NotifyPropertyChanged("TensileMax");
            }
        }

        private ForceMeasure TensileMaxField; 

        /// <summary>
        /// PresRating property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresRating")]
        public PressureMeasure PresRating {
            get {
                return PresRatingField;
            } 
            set {
                PresRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure PresRatingField; 

        /// <summary>
        /// PresCollapse property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresCollapse")]
        public PressureMeasure PresCollapse {
            get {
                return PresCollapseField;
            } 
            set {
                PresCollapseField = value;
                NotifyPropertyChanged("PresCollapse");
            }
        }

        private PressureMeasure PresCollapseField; 

        /// <summary>
        /// PresBurst property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresBurst")]
        public PressureMeasure PresBurst {
            get {
                return PresBurstField;
            } 
            set {
                PresBurstField = value;
                NotifyPropertyChanged("PresBurst");
            }
        }

        private PressureMeasure PresBurstField; 

        /// <summary>
        /// HeatRating property
        /// </summary>
		[ComponentElement]
		[XmlElement("HeatRating")]
        public ThermodynamicTemperatureMeasure HeatRating {
            get {
                return HeatRatingField;
            } 
            set {
                HeatRatingField = value;
                NotifyPropertyChanged("HeatRating");
            }
        }

        private ThermodynamicTemperatureMeasure HeatRatingField; 

        /// <summary>
        /// IsLinetoSurface property
        /// </summary>
		
		[XmlElement("IsLinetoSurface")]
        public Boolean? IsLinetoSurface {
            get {
                return IsLinetoSurfaceField;
            } 
            set {
                IsLinetoSurfaceField = value;
             if(value!=null) 
                 this.IsLinetoSurfaceSpecified = true;
                NotifyPropertyChanged("IsLinetoSurface");
            }
        }

        private Boolean? IsLinetoSurfaceField; 

        /// <summary>
        /// IsLinetoSurfaceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsLinetoSurfaceSpecified {
            get {
                return IsLinetoSurfaceSpecifiedField;
            } 
            set {
                IsLinetoSurfaceSpecifiedField = value;
                NotifyPropertyChanged("IsLinetoSurfaceSpecified");
            }
        }

        private Boolean IsLinetoSurfaceSpecifiedField; 

        /// <summary>
        /// IsCentralized property
        /// </summary>
		
		[XmlElement("IsCentralized")]
        public Boolean? IsCentralized {
            get {
                return IsCentralizedField;
            } 
            set {
                IsCentralizedField = value;
             if(value!=null) 
                 this.IsCentralizedSpecified = true;
                NotifyPropertyChanged("IsCentralized");
            }
        }

        private Boolean? IsCentralizedField; 

        /// <summary>
        /// IsCentralizedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsCentralizedSpecified {
            get {
                return IsCentralizedSpecifiedField;
            } 
            set {
                IsCentralizedSpecifiedField = value;
                NotifyPropertyChanged("IsCentralizedSpecified");
            }
        }

        private Boolean IsCentralizedSpecifiedField; 

        /// <summary>
        /// HasScratchers property
        /// </summary>
		
		[XmlElement("HasScratchers")]
        public Boolean? HasScratchers {
            get {
                return HasScratchersField;
            } 
            set {
                HasScratchersField = value;
             if(value!=null) 
                 this.HasScratchersSpecified = true;
                NotifyPropertyChanged("HasScratchers");
            }
        }

        private Boolean? HasScratchersField; 

        /// <summary>
        /// HasScratchersSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean HasScratchersSpecified {
            get {
                return HasScratchersSpecifiedField;
            } 
            set {
                HasScratchersSpecifiedField = value;
                NotifyPropertyChanged("HasScratchersSpecified");
            }
        }

        private Boolean HasScratchersSpecifiedField; 

        /// <summary>
        /// PerforationSetRefId property
        /// </summary>
		[RecurringElement]
		[XmlElement("PerforationSetRefId")]
        public List<String> PerforationSetRefId {
            get {
                return PerforationSetRefIdField;
            } 
            set {
                PerforationSetRefIdField = value;
                NotifyPropertyChanged("PerforationSetRefId");
            }
        }

         [XmlIgnore]
         public bool PerforationSetRefIdSpecified
         {
            get {
             if(PerforationSetRefIdField!=null)
                return PerforationSetRefIdField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> PerforationSetRefIdField; 

        /// <summary>
        /// PermanentRemarks property
        /// </summary>
		
		[XmlElement("PermanentRemarks")]
        public String PermanentRemarks {
            get {
                return PermanentRemarksField;
            } 
            set {
                PermanentRemarksField = value;
                NotifyPropertyChanged("PermanentRemarks");
            }
        }

        private String PermanentRemarksField; 

        /// <summary>
        /// UsageComment property
        /// </summary>
		
		[XmlElement("UsageComment")]
        public String UsageComment {
            get {
                return UsageCommentField;
            } 
            set {
                UsageCommentField = value;
                NotifyPropertyChanged("UsageComment");
            }
        }

        private String UsageCommentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Assembly property
        /// </summary>
		[RecurringElement]
		[XmlArrayItem("Part")]
        [XmlArray("Assembly")]
        public List<StringEquipment> Assembly {
            get {
                return AssemblyField;
            } 
            set {
                AssemblyField = value;
                NotifyPropertyChanged("Assembly");
            }
        }

         [XmlIgnore]
         public bool AssemblySpecified
         {
            get {
             if(AssemblyField!=null)
                return AssemblyField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StringEquipment> AssemblyField; 

        /// <summary>
        /// OrderOfObject property
        /// </summary>
		[ComponentElement]
		[XmlElement("OrderOfObject")]
        public ObjectSequence OrderOfObject {
            get {
                return OrderOfObjectField;
            } 
            set {
                OrderOfObjectField = value;
                NotifyPropertyChanged("OrderOfObject");
            }
        }

        private ObjectSequence OrderOfObjectField; 

        /// <summary>
        /// InsideComponent property
        /// </summary>
		[RecurringElement]
		[XmlElement("InsideComponent")]
        public List<ReferenceContainer> InsideComponent {
            get {
                return InsideComponentField;
            } 
            set {
                InsideComponentField = value;
                NotifyPropertyChanged("InsideComponent");
            }
        }

         [XmlIgnore]
         public bool InsideComponentSpecified
         {
            get {
             if(InsideComponentField!=null)
                return InsideComponentField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ReferenceContainer> InsideComponentField; 

        /// <summary>
        /// OutsideComponent property
        /// </summary>
		[RecurringElement]
		[XmlElement("OutsideComponent")]
        public List<ReferenceContainer> OutsideComponent {
            get {
                return OutsideComponentField;
            } 
            set {
                OutsideComponentField = value;
                NotifyPropertyChanged("OutsideComponent");
            }
        }

         [XmlIgnore]
         public bool OutsideComponentSpecified
         {
            get {
             if(OutsideComponentField!=null)
                return OutsideComponentField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ReferenceContainer> OutsideComponentField; 

        /// <summary>
        /// ConnectionNext property
        /// </summary>
		[RecurringElement]
		[XmlElement("ConnectionNext")]
        public List<EquipmentConnection> ConnectionNext {
            get {
                return ConnectionNextField;
            } 
            set {
                ConnectionNextField = value;
                NotifyPropertyChanged("ConnectionNext");
            }
        }

         [XmlIgnore]
         public bool ConnectionNextSpecified
         {
            get {
             if(ConnectionNextField!=null)
                return ConnectionNextField.Count>0?true:false;
             else return false;
            } 
         }
        private List<EquipmentConnection> ConnectionNextField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 

		/// <summary>
        /// equipmentReferenceUid property
        /// </summary>
		
        [XmlAttribute("equipmentReferenceUid")]
		
        public String EquipmentReferenceUid {
            get {
                return equipmentReferenceUidField;
            } 
            set {
                equipmentReferenceUidField = value;
                NotifyPropertyChanged("EquipmentReferenceUid");
            }
        }

        private String equipmentReferenceUidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReferenceContainer xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReferenceContainer", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ReferenceContainer xsd type.")]
    public partial class ReferenceContainer : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StringReferenceId property
        /// </summary>
		
		[XmlElement("StringReferenceId")]
        public String StringReferenceId {
            get {
                return StringReferenceIdField;
            } 
            set {
                StringReferenceIdField = value;
                NotifyPropertyChanged("StringReferenceId");
            }
        }

        private String StringReferenceIdField; 

        /// <summary>
        /// EquipmentReferenceId property
        /// </summary>
		
		[XmlElement("EquipmentReferenceId")]
        public String EquipmentReferenceId {
            get {
                return EquipmentReferenceIdField;
            } 
            set {
                EquipmentReferenceIdField = value;
                NotifyPropertyChanged("EquipmentReferenceId");
            }
        }

        private String EquipmentReferenceIdField; 

        /// <summary>
        /// AccesoryEquipmentReferenceId property
        /// </summary>
		
		[XmlElement("AccesoryEquipmentReferenceId")]
        public String AccesoryEquipmentReferenceId {
            get {
                return AccesoryEquipmentReferenceIdField;
            } 
            set {
                AccesoryEquipmentReferenceIdField = value;
                NotifyPropertyChanged("AccesoryEquipmentReferenceId");
            }
        }

        private String AccesoryEquipmentReferenceIdField; 

        /// <summary>
        /// Comment property
        /// </summary>
		
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EquipmentConnection xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EquipmentConnection", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the EquipmentConnection xsd type.")]
    public partial class EquipmentConnection : Connection, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// RadialOffset property
        /// </summary>
		[ComponentElement]
		[XmlElement("RadialOffset")]
        public LengthMeasure RadialOffset {
            get {
                return RadialOffsetField;
            } 
            set {
                RadialOffsetField = value;
                NotifyPropertyChanged("RadialOffset");
            }
        }

        private LengthMeasure RadialOffsetField; 

        /// <summary>
        /// ConnectionForm property
        /// </summary>
		
		[XmlElement("ConnectionForm")]
        public String ConnectionForm {
            get {
                return ConnectionFormField;
            } 
            set {
                ConnectionFormField = value;
                NotifyPropertyChanged("ConnectionForm");
            }
        }

        private String ConnectionFormField; 

        /// <summary>
        /// ConnectionUpset property
        /// </summary>
		
		[XmlElement("ConnectionUpset")]
        public String ConnectionUpset {
            get {
                return ConnectionUpsetField;
            } 
            set {
                ConnectionUpsetField = value;
                NotifyPropertyChanged("ConnectionUpset");
            }
        }

        private String ConnectionUpsetField; 

        /// <summary>
        /// ConnectionType property
        /// </summary>
		
		[XmlElement("ConnectionType")]
        public AbstractConnectionType ConnectionType {
            get {
                return ConnectionTypeField;
            } 
            set {
                ConnectionTypeField = value;
                NotifyPropertyChanged("ConnectionType");
            }
        }

        private AbstractConnectionType ConnectionTypeField; 

		/// <summary>
        /// stringEquipmentReferenceUid property
        /// </summary>
		
        [XmlAttribute("stringEquipmentReferenceUid")]
		
        public String StringEquipmentReferenceUid {
            get {
                return stringEquipmentReferenceUidField;
            } 
            set {
                stringEquipmentReferenceUidField = value;
                NotifyPropertyChanged("StringEquipmentReferenceUid");
            }
        }

        private String stringEquipmentReferenceUidField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractConnectionType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OtherConnectionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RodConnectionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TubingConnectionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CasingConnectionType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractConnectionType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractConnectionType xsd type.")]
    public abstract partial class AbstractConnectionType : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OtherConnectionType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OtherConnectionType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the OtherConnectionType xsd type.")]
    public partial class OtherConnectionType : AbstractConnectionType, INotifyPropertyChanged
    {

        /// <summary>
        /// OtherConnectionType1 property
        /// </summary>
		
		[XmlElement("OtherConnectionType")]
        public OtherConnectionTypes? OtherConnectionType1 {
            get {
                return OtherConnectionType1Field;
            } 
            set {
                OtherConnectionType1Field = value;
                NotifyPropertyChanged("OtherConnectionType1");
            }
        }

        private OtherConnectionTypes? OtherConnectionType1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RodConnectionType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RodConnectionType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RodConnectionType xsd type.")]
    public partial class RodConnectionType : AbstractConnectionType, INotifyPropertyChanged
    {

        /// <summary>
        /// RodConnectionType1 property
        /// </summary>
		
		[XmlElement("RodConnectionType")]
        public RodConnectionTypes? RodConnectionType1 {
            get {
                return RodConnectionType1Field;
            } 
            set {
                RodConnectionType1Field = value;
                NotifyPropertyChanged("RodConnectionType1");
            }
        }

        private RodConnectionTypes? RodConnectionType1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TubingConnectionType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TubingConnectionType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TubingConnectionType xsd type.")]
    public partial class TubingConnectionType : AbstractConnectionType, INotifyPropertyChanged
    {

        /// <summary>
        /// TubingConnectionType1 property
        /// </summary>
		
		[XmlElement("TubingConnectionType")]
        public TubingConnectionTypes? TubingConnectionType1 {
            get {
                return TubingConnectionType1Field;
            } 
            set {
                TubingConnectionType1Field = value;
                NotifyPropertyChanged("TubingConnectionType1");
            }
        }

        private TubingConnectionTypes? TubingConnectionType1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CasingConnectionType xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CasingConnectionType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CasingConnectionType xsd type.")]
    public partial class CasingConnectionType : AbstractConnectionType, INotifyPropertyChanged
    {

        /// <summary>
        /// CasingConnectionType1 property
        /// </summary>
		
		[XmlElement("CasingConnectionType")]
        public CasingConnectionTypes? CasingConnectionType1 {
            get {
                return CasingConnectionType1Field;
            } 
            set {
                CasingConnectionType1Field = value;
                NotifyPropertyChanged("CasingConnectionType1");
            }
        }

        private CasingConnectionTypes? CasingConnectionType1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Connection xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquipmentConnection))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Connection", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Connection xsd type.")]
    public partial class Connection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Id property
        /// </summary>
		[Description("Internal diameter of the connection.")]
        [ComponentElement]
		[XmlElement("Id")]
        public LengthMeasure Id {
            get {
                return IdField;
            } 
            set {
                IdField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private LengthMeasure IdField; 

        /// <summary>
        /// Od property
        /// </summary>
		[Description("Outside diameter of the body of the item.")]
        [ComponentElement]
		[XmlElement("Od")]
        public LengthMeasure OuterDiameter {
            get {
                return OdField;
            } 
            set {
                OdField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure OdField; 

        /// <summary>
        /// Len property
        /// </summary>
		[Description("Length of the item.")]
        [ComponentElement]
		[XmlElement("Len")]
        public LengthMeasure Len {
            get {
                return LenField;
            } 
            set {
                LenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure LenField; 

        /// <summary>
        /// TypeThread property
        /// </summary>
		[StringLength(64)]
        [Description("Thread type from API RP7G, 5CT.")]
		[XmlElement("TypeThread")]
        public String TypeThread {
            get {
                return TypeThreadField;
            } 
            set {
                TypeThreadField = value;
                NotifyPropertyChanged("TypeThread");
            }
        }

        private String TypeThreadField; 

        /// <summary>
        /// SizeThread property
        /// </summary>
		[Description("Thread size.")]
        [ComponentElement]
		[XmlElement("SizeThread")]
        public LengthMeasure SizeThread {
            get {
                return SizeThreadField;
            } 
            set {
                SizeThreadField = value;
                NotifyPropertyChanged("SizeThread");
            }
        }

        private LengthMeasure SizeThreadField; 

        /// <summary>
        /// TensYield property
        /// </summary>
		[Description("Yield stress of steel - worn stress.")]
        [ComponentElement]
		[XmlElement("TensYield")]
        public PressureMeasure TensYield {
            get {
                return TensYieldField;
            } 
            set {
                TensYieldField = value;
                NotifyPropertyChanged("TensYield");
            }
        }

        private PressureMeasure TensYieldField; 

        /// <summary>
        /// TqYield property
        /// </summary>
		[Description("Torque at which yield occurs.")]
        [ComponentElement]
		[XmlElement("TqYield")]
        public MomentOfForceMeasure TorqueYield {
            get {
                return TqYieldField;
            } 
            set {
                TqYieldField = value;
                NotifyPropertyChanged("TorqueYield");
            }
        }

        private MomentOfForceMeasure TqYieldField; 

        /// <summary>
        /// Position property
        /// </summary>
		[Description("Where connected.")]
		[XmlElement("Position")]
        public ConnectionPosition? Position {
            get {
                return PositionField;
            } 
            set {
                PositionField = value;
             if(value!=null) 
                 this.PositionSpecified = true;
                NotifyPropertyChanged("Position");
            }
        }

        private ConnectionPosition? PositionField; 

        /// <summary>
        /// PositionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PositionSpecified {
            get {
                return PositionSpecifiedField;
            } 
            set {
                PositionSpecifiedField = value;
                NotifyPropertyChanged("PositionSpecified");
            }
        }

        private Boolean PositionSpecifiedField; 

        /// <summary>
        /// CriticalCrossSection property
        /// </summary>
		[Description("For bending stiffness ratio.")]
        [ComponentElement]
		[XmlElement("CriticalCrossSection")]
        public AreaMeasure CriticalCrossSection {
            get {
                return CriticalCrossSectionField;
            } 
            set {
                CriticalCrossSectionField = value;
                NotifyPropertyChanged("CriticalCrossSection");
            }
        }

        private AreaMeasure CriticalCrossSectionField; 

        /// <summary>
        /// PresLeak property
        /// </summary>
		[Description("Leak pressure rating.")]
        [ComponentElement]
		[XmlElement("PresLeak")]
        public PressureMeasure PresLeak {
            get {
                return PresLeakField;
            } 
            set {
                PresLeakField = value;
                NotifyPropertyChanged("PresLeak");
            }
        }

        private PressureMeasure PresLeakField; 

        /// <summary>
        /// TqMakeup property
        /// </summary>
		[Description("Make up torque.")]
        [ComponentElement]
		[XmlElement("TqMakeup")]
        public MomentOfForceMeasure TorqueMakeup {
            get {
                return TqMakeupField;
            } 
            set {
                TqMakeupField = value;
                NotifyPropertyChanged("TorqueMakeup");
            }
        }

        private MomentOfForceMeasure TqMakeupField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Connection")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerfHole xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerfHole", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerfHole xsd type.")]
    public partial class PerfHole : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// TvdInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return TvdIntervalField;
            } 
            set {
                TvdIntervalField = value;
                NotifyPropertyChanged("TvdInterval");
            }
        }

        private TvdInterval TvdIntervalField; 

        /// <summary>
        /// HoleDiameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("HoleDiameter")]
        public LengthMeasure HoleDiameter {
            get {
                return HoleDiameterField;
            } 
            set {
                HoleDiameterField = value;
                NotifyPropertyChanged("HoleDiameter");
            }
        }

        private LengthMeasure HoleDiameterField; 

        /// <summary>
        /// HoleAngle property
        /// </summary>
		[ComponentElement]
		[XmlElement("HoleAngle")]
        public PlaneAngleMeasure HoleAngle {
            get {
                return HoleAngleField;
            } 
            set {
                HoleAngleField = value;
                NotifyPropertyChanged("HoleAngle");
            }
        }

        private PlaneAngleMeasure HoleAngleField; 

        /// <summary>
        /// HolePattern property
        /// </summary>
		
		[XmlElement("HolePattern")]
        public String HolePattern {
            get {
                return HolePatternField;
            } 
            set {
                HolePatternField = value;
                NotifyPropertyChanged("HolePattern");
            }
        }

        private String HolePatternField; 

        /// <summary>
        /// HoleDensity property
        /// </summary>
		[ComponentElement]
		[XmlElement("HoleDensity")]
        public ReciprocalLengthMeasure HoleDensity {
            get {
                return HoleDensityField;
            } 
            set {
                HoleDensityField = value;
                NotifyPropertyChanged("HoleDensity");
            }
        }

        private ReciprocalLengthMeasure HoleDensityField; 

        /// <summary>
        /// HoleCount property
        /// </summary>
		
		[XmlElement("HoleCount")]
        public Int32? HoleCount {
            get {
                return HoleCountField;
            } 
            set {
                HoleCountField = value;
             if(value!=null) 
                 this.HoleCountSpecified = true;
                NotifyPropertyChanged("HoleCount");
            }
        }

        private Int32? HoleCountField; 

        /// <summary>
        /// HoleCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean HoleCountSpecified {
            get {
                return HoleCountSpecifiedField;
            } 
            set {
                HoleCountSpecifiedField = value;
                NotifyPropertyChanged("HoleCountSpecified");
            }
        }

        private Boolean HoleCountSpecifiedField; 

        /// <summary>
        /// Remarks property
        /// </summary>
		
		[XmlElement("Remarks")]
        public String Remarks {
            get {
                return RemarksField;
            } 
            set {
                RemarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private String RemarksField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerfSlot xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerfSlot", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerfSlot xsd type.")]
    public partial class PerfSlot : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// SlotHeight property
        /// </summary>
		[ComponentElement]
		[XmlElement("SlotHeight")]
        public LengthMeasure SlotHeight {
            get {
                return SlotHeightField;
            } 
            set {
                SlotHeightField = value;
                NotifyPropertyChanged("SlotHeight");
            }
        }

        private LengthMeasure SlotHeightField; 

        /// <summary>
        /// SlotWidth property
        /// </summary>
		[ComponentElement]
		[XmlElement("SlotWidth")]
        public LengthMeasure SlotWidth {
            get {
                return SlotWidthField;
            } 
            set {
                SlotWidthField = value;
                NotifyPropertyChanged("SlotWidth");
            }
        }

        private LengthMeasure SlotWidthField; 

        /// <summary>
        /// SlotCenterDistance property
        /// </summary>
		[ComponentElement]
		[XmlElement("SlotCenterDistance")]
        public LengthMeasure SlotCenterDistance {
            get {
                return SlotCenterDistanceField;
            } 
            set {
                SlotCenterDistanceField = value;
                NotifyPropertyChanged("SlotCenterDistance");
            }
        }

        private LengthMeasure SlotCenterDistanceField; 

        /// <summary>
        /// SlotCount property
        /// </summary>
		
		[XmlElement("SlotCount")]
        public Int32? SlotCount {
            get {
                return SlotCountField;
            } 
            set {
                SlotCountField = value;
             if(value!=null) 
                 this.SlotCountSpecified = true;
                NotifyPropertyChanged("SlotCount");
            }
        }

        private Int32? SlotCountField; 

        /// <summary>
        /// SlotCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean SlotCountSpecified {
            get {
                return SlotCountSpecifiedField;
            } 
            set {
                SlotCountSpecifiedField = value;
                NotifyPropertyChanged("SlotCountSpecified");
            }
        }

        private Boolean SlotCountSpecifiedField; 

        /// <summary>
        /// Remarks property
        /// </summary>
		
		[XmlElement("Remarks")]
        public String Remarks {
            get {
                return RemarksField;
            } 
            set {
                RemarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private String RemarksField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ExtPropNameValue xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ExtPropNameValue", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ExtPropNameValue xsd type.")]
    public partial class ExtPropNameValue : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ExtPropNameValue class.
        /// </summary>
        public ExtPropNameValue() {}

        /// <summary>
        /// Initializes a new instance of the ExtPropNameValue class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public ExtPropNameValue(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Name property
        /// </summary>
		
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Value property
        /// </summary>
		
		[XmlElement("Value")]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Equipment xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Equipment", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Equipment xsd type.")]
    public partial class Equipment : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// EquipmentName property
        /// </summary>
		
		[XmlElement("EquipmentName")]
        public String EquipmentName {
            get {
                return EquipmentNameField;
            } 
            set {
                EquipmentNameField = value;
                NotifyPropertyChanged("EquipmentName");
            }
        }

        private String EquipmentNameField; 

        /// <summary>
        /// EquipmentType property
        /// </summary>
		
		[XmlElement("EquipmentType")]
        public String EquipmentType {
            get {
                return EquipmentTypeField;
            } 
            set {
                EquipmentTypeField = value;
                NotifyPropertyChanged("EquipmentType");
            }
        }

        private String EquipmentTypeField; 

        /// <summary>
        /// Manufacturer property
        /// </summary>
		
		[XmlElement("Manufacturer")]
        public String Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String ManufacturerField; 

        /// <summary>
        /// Model property
        /// </summary>
		
		[XmlElement("Model")]
        public String Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String ModelField; 

        /// <summary>
        /// CatalogId property
        /// </summary>
		
		[XmlElement("CatalogId")]
        public String CatalogId {
            get {
                return CatalogIdField;
            } 
            set {
                CatalogIdField = value;
                NotifyPropertyChanged("CatalogId");
            }
        }

        private String CatalogIdField; 

        /// <summary>
        /// CatalogName property
        /// </summary>
		
		[XmlElement("CatalogName")]
        public String CatalogName {
            get {
                return CatalogNameField;
            } 
            set {
                CatalogNameField = value;
                NotifyPropertyChanged("CatalogName");
            }
        }

        private String CatalogNameField; 

        /// <summary>
        /// BrandName property
        /// </summary>
		
		[XmlElement("BrandName")]
        public String BrandName {
            get {
                return BrandNameField;
            } 
            set {
                BrandNameField = value;
                NotifyPropertyChanged("BrandName");
            }
        }

        private String BrandNameField; 

        /// <summary>
        /// ModelType property
        /// </summary>
		
		[XmlElement("ModelType")]
        public String ModelType {
            get {
                return ModelTypeField;
            } 
            set {
                ModelTypeField = value;
                NotifyPropertyChanged("ModelType");
            }
        }

        private String ModelTypeField; 

        /// <summary>
        /// Series property
        /// </summary>
		
		[XmlElement("Series")]
        public String Series {
            get {
                return SeriesField;
            } 
            set {
                SeriesField = value;
                NotifyPropertyChanged("Series");
            }
        }

        private String SeriesField; 

        /// <summary>
        /// IsSerialized property
        /// </summary>
		
		[XmlElement("IsSerialized")]
        public Boolean? IsSerialized {
            get {
                return IsSerializedField;
            } 
            set {
                IsSerializedField = value;
             if(value!=null) 
                 this.IsSerializedSpecified = true;
                NotifyPropertyChanged("IsSerialized");
            }
        }

        private Boolean? IsSerializedField; 

        /// <summary>
        /// IsSerializedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsSerializedSpecified {
            get {
                return IsSerializedSpecifiedField;
            } 
            set {
                IsSerializedSpecifiedField = value;
                NotifyPropertyChanged("IsSerializedSpecified");
            }
        }

        private Boolean IsSerializedSpecifiedField; 

        /// <summary>
        /// SerialNumber property
        /// </summary>
		
		[XmlElement("SerialNumber")]
        public String SerialNumber {
            get {
                return SerialNumberField;
            } 
            set {
                SerialNumberField = value;
                NotifyPropertyChanged("SerialNumber");
            }
        }

        private String SerialNumberField; 

        /// <summary>
        /// PartNo property
        /// </summary>
		
		[XmlElement("PartNo")]
        public String PartNo {
            get {
                return PartNoField;
            } 
            set {
                PartNoField = value;
                NotifyPropertyChanged("PartNo");
            }
        }

        private String PartNoField; 

        /// <summary>
        /// SurfaceCondition property
        /// </summary>
		
		[XmlElement("SurfaceCondition")]
        public String SurfaceCondition {
            get {
                return SurfaceConditionField;
            } 
            set {
                SurfaceConditionField = value;
                NotifyPropertyChanged("SurfaceCondition");
            }
        }

        private String SurfaceConditionField; 

        /// <summary>
        /// Material property
        /// </summary>
		
		[XmlElement("Material")]
        public String Material {
            get {
                return MaterialField;
            } 
            set {
                MaterialField = value;
                NotifyPropertyChanged("Material");
            }
        }

        private String MaterialField; 

        /// <summary>
        /// Grade property
        /// </summary>
		
		[XmlElement("Grade")]
        public String Grade {
            get {
                return GradeField;
            } 
            set {
                GradeField = value;
                NotifyPropertyChanged("Grade");
            }
        }

        private String GradeField; 

        /// <summary>
        /// UnitWeight property
        /// </summary>
		[ComponentElement]
		[XmlElement("UnitWeight")]
        public MassPerLengthMeasure UnitWeight {
            get {
                return UnitWeightField;
            } 
            set {
                UnitWeightField = value;
                NotifyPropertyChanged("UnitWeight");
            }
        }

        private MassPerLengthMeasure UnitWeightField; 

        /// <summary>
        /// CoatingLinerApplied property
        /// </summary>
		
		[XmlElement("CoatingLinerApplied")]
        public Boolean? CoatingLinerApplied {
            get {
                return CoatingLinerAppliedField;
            } 
            set {
                CoatingLinerAppliedField = value;
             if(value!=null) 
                 this.CoatingLinerAppliedSpecified = true;
                NotifyPropertyChanged("CoatingLinerApplied");
            }
        }

        private Boolean? CoatingLinerAppliedField; 

        /// <summary>
        /// CoatingLinerAppliedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CoatingLinerAppliedSpecified {
            get {
                return CoatingLinerAppliedSpecifiedField;
            } 
            set {
                CoatingLinerAppliedSpecifiedField = value;
                NotifyPropertyChanged("CoatingLinerAppliedSpecified");
            }
        }

        private Boolean CoatingLinerAppliedSpecifiedField; 

        /// <summary>
        /// OutsideCoating property
        /// </summary>
		
		[XmlElement("OutsideCoating")]
        public String OutsideCoating {
            get {
                return OutsideCoatingField;
            } 
            set {
                OutsideCoatingField = value;
                NotifyPropertyChanged("OutsideCoating");
            }
        }

        private String OutsideCoatingField; 

        /// <summary>
        /// InsideCoating property
        /// </summary>
		
		[XmlElement("InsideCoating")]
        public String InsideCoating {
            get {
                return InsideCoatingField;
            } 
            set {
                InsideCoatingField = value;
                NotifyPropertyChanged("InsideCoating");
            }
        }

        private String InsideCoatingField; 

        /// <summary>
        /// UnitLength property
        /// </summary>
		[ComponentElement]
		[XmlElement("UnitLength")]
        public LengthMeasure UnitLength {
            get {
                return UnitLengthField;
            } 
            set {
                UnitLengthField = value;
                NotifyPropertyChanged("UnitLength");
            }
        }

        private LengthMeasure UnitLengthField; 

        /// <summary>
        /// MajorOd property
        /// </summary>
		[ComponentElement]
		[XmlElement("MajorOd")]
        public LengthMeasure MajorOuterDiameter {
            get {
                return MajorOdField;
            } 
            set {
                MajorOdField = value;
                NotifyPropertyChanged("MajorOuterDiameter");
            }
        }

        private LengthMeasure MajorOdField; 

        /// <summary>
        /// MinorOd property
        /// </summary>
		[ComponentElement]
		[XmlElement("MinorOd")]
        public LengthMeasure MinorOuterDiameter {
            get {
                return MinorOdField;
            } 
            set {
                MinorOdField = value;
                NotifyPropertyChanged("MinorOuterDiameter");
            }
        }

        private LengthMeasure MinorOdField; 

        /// <summary>
        /// Od property
        /// </summary>
		[ComponentElement]
		[XmlElement("Od")]
        public LengthMeasure OuterDiameter {
            get {
                return OdField;
            } 
            set {
                OdField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure OdField; 

        /// <summary>
        /// MaxOd property
        /// </summary>
		[ComponentElement]
		[XmlElement("MaxOd")]
        public LengthMeasure MaxOuterDiameter {
            get {
                return MaxOdField;
            } 
            set {
                MaxOdField = value;
                NotifyPropertyChanged("MaxOuterDiameter");
            }
        }

        private LengthMeasure MaxOdField; 

        /// <summary>
        /// MinOd property
        /// </summary>
		[ComponentElement]
		[XmlElement("MinOd")]
        public LengthMeasure MinOuterDiameter {
            get {
                return MinOdField;
            } 
            set {
                MinOdField = value;
                NotifyPropertyChanged("MinOuterDiameter");
            }
        }

        private LengthMeasure MinOdField; 

        /// <summary>
        /// MajorId property
        /// </summary>
		[ComponentElement]
		[XmlElement("MajorId")]
        public LengthMeasure MajorId {
            get {
                return MajorIdField;
            } 
            set {
                MajorIdField = value;
                NotifyPropertyChanged("MajorId");
            }
        }

        private LengthMeasure MajorIdField; 

        /// <summary>
        /// MinorId property
        /// </summary>
		[ComponentElement]
		[XmlElement("MinorId")]
        public LengthMeasure MinorId {
            get {
                return MinorIdField;
            } 
            set {
                MinorIdField = value;
                NotifyPropertyChanged("MinorId");
            }
        }

        private LengthMeasure MinorIdField; 

        /// <summary>
        /// Id property
        /// </summary>
		[ComponentElement]
		[XmlElement("Id")]
        public LengthMeasure Id {
            get {
                return IdField;
            } 
            set {
                IdField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private LengthMeasure IdField; 

        /// <summary>
        /// MaxId property
        /// </summary>
		[ComponentElement]
		[XmlElement("MaxId")]
        public LengthMeasure MaxId {
            get {
                return MaxIdField;
            } 
            set {
                MaxIdField = value;
                NotifyPropertyChanged("MaxId");
            }
        }

        private LengthMeasure MaxIdField; 

        /// <summary>
        /// MinId property
        /// </summary>
		[ComponentElement]
		[XmlElement("MinId")]
        public LengthMeasure MinId {
            get {
                return MinIdField;
            } 
            set {
                MinIdField = value;
                NotifyPropertyChanged("MinId");
            }
        }

        private LengthMeasure MinIdField; 

        /// <summary>
        /// Drift property
        /// </summary>
		[ComponentElement]
		[XmlElement("Drift")]
        public LengthMeasure Drift {
            get {
                return DriftField;
            } 
            set {
                DriftField = value;
                NotifyPropertyChanged("Drift");
            }
        }

        private LengthMeasure DriftField; 

        /// <summary>
        /// NominalSize property
        /// </summary>
		[ComponentElement]
		[XmlElement("NominalSize")]
        public LengthMeasure NominalSize {
            get {
                return NominalSizeField;
            } 
            set {
                NominalSizeField = value;
                NotifyPropertyChanged("NominalSize");
            }
        }

        private LengthMeasure NominalSizeField; 

        /// <summary>
        /// NameService property
        /// </summary>
		
		[XmlElement("NameService")]
        public String NameService {
            get {
                return NameServiceField;
            } 
            set {
                NameServiceField = value;
                NotifyPropertyChanged("NameService");
            }
        }

        private String NameServiceField; 

        /// <summary>
        /// Description property
        /// </summary>
		
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// DescriptionPermanent property
        /// </summary>
		
		[XmlElement("DescriptionPermanent")]
        public String DescriptionPermanent {
            get {
                return DescriptionPermanentField;
            } 
            set {
                DescriptionPermanentField = value;
                NotifyPropertyChanged("DescriptionPermanent");
            }
        }

        private String DescriptionPermanentField; 

        /// <summary>
        /// Remark property
        /// </summary>
		
		[XmlElement("Remark")]
        public String Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private String RemarkField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

        /// <summary>
        /// Property property
        /// </summary>
		[RecurringElement]
		[XmlElement("Property")]
        public List<ExtPropNameValue> Property {
            get {
                return PropertyField;
            } 
            set {
                PropertyField = value;
                NotifyPropertyChanged("Property");
            }
        }

         [XmlIgnore]
         public bool PropertySpecified
         {
            get {
             if(PropertyField!=null)
                return PropertyField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtPropNameValue> PropertyField; 

        /// <summary>
        /// SlotAsManufactured property
        /// </summary>
		[RecurringElement]
		[XmlElement("SlotAsManufactured")]
        public List<PerfSlot> SlotAsManufactured {
            get {
                return SlotAsManufacturedField;
            } 
            set {
                SlotAsManufacturedField = value;
                NotifyPropertyChanged("SlotAsManufactured");
            }
        }

         [XmlIgnore]
         public bool SlotAsManufacturedSpecified
         {
            get {
             if(SlotAsManufacturedField!=null)
                return SlotAsManufacturedField.Count>0?true:false;
             else return false;
            } 
         }
        private List<PerfSlot> SlotAsManufacturedField; 

        /// <summary>
        /// HoleAsManufactured property
        /// </summary>
		[RecurringElement]
		[XmlElement("HoleAsManufactured")]
        public List<PerfHole> HoleAsManufactured {
            get {
                return HoleAsManufacturedField;
            } 
            set {
                HoleAsManufacturedField = value;
                NotifyPropertyChanged("HoleAsManufactured");
            }
        }

         [XmlIgnore]
         public bool HoleAsManufacturedSpecified
         {
            get {
             if(HoleAsManufacturedField!=null)
                return HoleAsManufacturedField.Count>0?true:false;
             else return false;
            } 
         }
        private List<PerfHole> HoleAsManufacturedField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerforationSet xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerforationSet", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerforationSet xsd type.")]
    public partial class PerforationSet : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// BoreholeStringReferenceId property
        /// </summary>
		[RecurringElement]
		[XmlElement("BoreholeStringReferenceId")]
        public List<String> BoreholeStringReferenceId {
            get {
                return BoreholeStringReferenceIdField;
            } 
            set {
                BoreholeStringReferenceIdField = value;
                NotifyPropertyChanged("BoreholeStringReferenceId");
            }
        }

         [XmlIgnore]
         public bool BoreholeStringReferenceIdSpecified
         {
            get {
             if(BoreholeStringReferenceIdField!=null)
                return BoreholeStringReferenceIdField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> BoreholeStringReferenceIdField; 

        /// <summary>
        /// DownholeStringReferenceId property
        /// </summary>
		[RecurringElement]
		[XmlElement("DownholeStringReferenceId")]
        public List<String> DownholeStringReferenceId {
            get {
                return DownholeStringReferenceIdField;
            } 
            set {
                DownholeStringReferenceIdField = value;
                NotifyPropertyChanged("DownholeStringReferenceId");
            }
        }

         [XmlIgnore]
         public bool DownholeStringReferenceIdSpecified
         {
            get {
             if(DownholeStringReferenceIdField!=null)
                return DownholeStringReferenceIdField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> DownholeStringReferenceIdField; 

        /// <summary>
        /// MdInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// TvdInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return TvdIntervalField;
            } 
            set {
                TvdIntervalField = value;
                NotifyPropertyChanged("TvdInterval");
            }
        }

        private TvdInterval TvdIntervalField; 

        /// <summary>
        /// HoleDiameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("HoleDiameter")]
        public LengthMeasure HoleDiameter {
            get {
                return HoleDiameterField;
            } 
            set {
                HoleDiameterField = value;
                NotifyPropertyChanged("HoleDiameter");
            }
        }

        private LengthMeasure HoleDiameterField; 

        /// <summary>
        /// HoleAngle property
        /// </summary>
		[ComponentElement]
		[XmlElement("HoleAngle")]
        public PlaneAngleMeasure HoleAngle {
            get {
                return HoleAngleField;
            } 
            set {
                HoleAngleField = value;
                NotifyPropertyChanged("HoleAngle");
            }
        }

        private PlaneAngleMeasure HoleAngleField; 

        /// <summary>
        /// HolePattern property
        /// </summary>
		
		[XmlElement("HolePattern")]
        public String HolePattern {
            get {
                return HolePatternField;
            } 
            set {
                HolePatternField = value;
                NotifyPropertyChanged("HolePattern");
            }
        }

        private String HolePatternField; 

        /// <summary>
        /// HoleDensity property
        /// </summary>
		[ComponentElement]
		[XmlElement("HoleDensity")]
        public ReciprocalLengthMeasure HoleDensity {
            get {
                return HoleDensityField;
            } 
            set {
                HoleDensityField = value;
                NotifyPropertyChanged("HoleDensity");
            }
        }

        private ReciprocalLengthMeasure HoleDensityField; 

        /// <summary>
        /// HoleCount property
        /// </summary>
		
		[XmlElement("HoleCount")]
        public Int32? HoleCount {
            get {
                return HoleCountField;
            } 
            set {
                HoleCountField = value;
             if(value!=null) 
                 this.HoleCountSpecified = true;
                NotifyPropertyChanged("HoleCount");
            }
        }

        private Int32? HoleCountField; 

        /// <summary>
        /// HoleCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean HoleCountSpecified {
            get {
                return HoleCountSpecifiedField;
            } 
            set {
                HoleCountSpecifiedField = value;
                NotifyPropertyChanged("HoleCountSpecified");
            }
        }

        private Boolean HoleCountSpecifiedField; 

        /// <summary>
        /// FrictionFactor property
        /// </summary>
		
		[XmlElement("FrictionFactor")]
        public Double? FrictionFactor {
            get {
                return FrictionFactorField;
            } 
            set {
                FrictionFactorField = value;
             if(value!=null) 
                 this.FrictionFactorSpecified = true;
                NotifyPropertyChanged("FrictionFactor");
            }
        }

        private Double? FrictionFactorField; 

        /// <summary>
        /// FrictionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean FrictionFactorSpecified {
            get {
                return FrictionFactorSpecifiedField;
            } 
            set {
                FrictionFactorSpecifiedField = value;
                NotifyPropertyChanged("FrictionFactorSpecified");
            }
        }

        private Boolean FrictionFactorSpecifiedField; 

        /// <summary>
        /// FrictionPres property
        /// </summary>
		[ComponentElement]
		[XmlElement("FrictionPres")]
        public PressureMeasure FrictionPres {
            get {
                return FrictionPresField;
            } 
            set {
                FrictionPresField = value;
                NotifyPropertyChanged("FrictionPres");
            }
        }

        private PressureMeasure FrictionPresField; 

        /// <summary>
        /// DischargeCoefficient property
        /// </summary>
		
		[XmlElement("DischargeCoefficient")]
        public Double? DischargeCoefficient {
            get {
                return DischargeCoefficientField;
            } 
            set {
                DischargeCoefficientField = value;
             if(value!=null) 
                 this.DischargeCoefficientSpecified = true;
                NotifyPropertyChanged("DischargeCoefficient");
            }
        }

        private Double? DischargeCoefficientField; 

        /// <summary>
        /// DischargeCoefficientSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DischargeCoefficientSpecified {
            get {
                return DischargeCoefficientSpecifiedField;
            } 
            set {
                DischargeCoefficientSpecifiedField = value;
                NotifyPropertyChanged("DischargeCoefficientSpecified");
            }
        }

        private Boolean DischargeCoefficientSpecifiedField; 

        /// <summary>
        /// PerforationTool property
        /// </summary>
		
		[XmlElement("PerforationTool")]
        public String PerforationTool {
            get {
                return PerforationToolField;
            } 
            set {
                PerforationToolField = value;
                NotifyPropertyChanged("PerforationTool");
            }
        }

        private String PerforationToolField; 

        /// <summary>
        /// PerforationPenetration property
        /// </summary>
		[ComponentElement]
		[XmlElement("PerforationPenetration")]
        public LengthMeasure PerforationPenetration {
            get {
                return PerforationPenetrationField;
            } 
            set {
                PerforationPenetrationField = value;
                NotifyPropertyChanged("PerforationPenetration");
            }
        }

        private LengthMeasure PerforationPenetrationField; 

        /// <summary>
        /// CrushZoneDiameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("CrushZoneDiameter")]
        public LengthMeasure CrushZoneDiameter {
            get {
                return CrushZoneDiameterField;
            } 
            set {
                CrushZoneDiameterField = value;
                NotifyPropertyChanged("CrushZoneDiameter");
            }
        }

        private LengthMeasure CrushZoneDiameterField; 

        /// <summary>
        /// CrushDamageRatio property
        /// </summary>
		
		[XmlElement("CrushDamageRatio")]
        public String CrushDamageRatio {
            get {
                return CrushDamageRatioField;
            } 
            set {
                CrushDamageRatioField = value;
                NotifyPropertyChanged("CrushDamageRatio");
            }
        }

        private String CrushDamageRatioField; 

        /// <summary>
        /// PerforationDate property
        /// </summary>
		
		[XmlElement("PerforationDate")]
        public String PerforationDate {
            get {
                return PerforationDateField;
            } 
            set {
                PerforationDateField = value;
                NotifyPropertyChanged("PerforationDate");
            }
        }

        private String PerforationDateField; 

        /// <summary>
        /// PermanentRemarks property
        /// </summary>
		
		[XmlElement("PermanentRemarks")]
        public String PermanentRemarks {
            get {
                return PermanentRemarksField;
            } 
            set {
                PermanentRemarksField = value;
                NotifyPropertyChanged("PermanentRemarks");
            }
        }

        private String PermanentRemarksField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[ComponentElement]
		[XmlElement("EventHistory")]
        public EventInfo EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo EventHistoryField; 

		/// <summary>
        /// uid property
        /// </summary>
		
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DownholeString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DownholeString", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DownholeString xsd type.")]
    public partial class DownholeString : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StringType property
        /// </summary>
		[Required]
        [Description("An enumeration type defined in equipmentCatelog, the \"DownholeStringEnum\"                     contains valid option of \"case\",\"rod\",\"tubing\", \"otherString\".")]
		[XmlElement("StringType")]
        public String StringType {
            get {
                return StringTypeField;
            } 
            set {
                StringTypeField = value;
                NotifyPropertyChanged("StringType");
            }
        }

        private String StringTypeField; 

        /// <summary>
        /// SubStringType property
        /// </summary>
		[Description("An enumeration type define for express further string type etc. \"SurfaceCasing\", \"IntermediaCasing\", \"productionCasing\".")]
		[XmlElement("SubStringType")]
        public String SubStringType {
            get {
                return SubStringTypeField;
            } 
            set {
                SubStringTypeField = value;
                NotifyPropertyChanged("SubStringType");
            }
        }

        private String SubStringTypeField; 

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of downhole string.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// StringInstallDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The install date of downhole string.")]
		[XmlElement("StringInstallDate")]
        public String StringInstallDate {
            get {
                return StringInstallDateField;
            } 
            set {
                StringInstallDateField = value;
                NotifyPropertyChanged("StringInstallDate");
            }
        }

        private String StringInstallDateField; 

        /// <summary>
        /// ParentStringsName property
        /// </summary>
		[StringLength(64)]
        [Description("The name of parent string.")]
		[XmlElement("ParentStringsName")]
        public String ParentStringsName {
            get {
                return ParentStringsNameField;
            } 
            set {
                ParentStringsNameField = value;
                NotifyPropertyChanged("ParentStringsName");
            }
        }

        private String ParentStringsNameField; 

        /// <summary>
        /// StringMdInterval property
        /// </summary>
		[Description("Measured depth interval between the top and the base of the downhole string.")]
        [ComponentElement]
		[XmlElement("StringMdInterval")]
        public MdInterval StringMDInterval {
            get {
                return StringMdIntervalField;
            } 
            set {
                StringMdIntervalField = value;
                NotifyPropertyChanged("StringMDInterval");
            }
        }

        private MdInterval StringMdIntervalField; 

        /// <summary>
        /// AxisOffset property
        /// </summary>
		[Description("the distance from the sibling string.")]
        [ComponentElement]
		[XmlElement("AxisOffset")]
        public LengthMeasure AxisOffset {
            get {
                return AxisOffsetField;
            } 
            set {
                AxisOffsetField = value;
                NotifyPropertyChanged("AxisOffset");
            }
        }

        private LengthMeasure AxisOffsetField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Accessories property
        /// </summary>
		[RecurringElement]
		[XmlArrayItem("Accessory")]
        [XmlArray("Accessories")]
        public List<StringEquipment> Accessories {
            get {
                return AccessoriesField;
            } 
            set {
                AccessoriesField = value;
                NotifyPropertyChanged("Accessories");
            }
        }

         [XmlIgnore]
         public bool AccessoriesSpecified
         {
            get {
             if(AccessoriesField!=null)
                return AccessoriesField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StringEquipment> AccessoriesField; 

        /// <summary>
        /// StringEquipmentSet property
        /// </summary>
		[RecurringElement]
		[XmlArrayItem("")]
        [XmlArray("StringEquipmentSet")]
        public List<StringEquipment> StringEquipmentSet {
            get {
                return StringEquipmentSetField;
            } 
            set {
                StringEquipmentSetField = value;
                NotifyPropertyChanged("StringEquipmentSet");
            }
        }

         [XmlIgnore]
         public bool StringEquipmentSetSpecified
         {
            get {
             if(StringEquipmentSetField!=null)
                return StringEquipmentSetField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StringEquipment> StringEquipmentSetField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

        /// <summary>
        /// ReferenceWellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("ReferenceWellbore")]
        public DataObjectReference ReferenceWellbore {
            get {
                return ReferenceWellboreField;
            } 
            set {
                ReferenceWellboreField = value;
                NotifyPropertyChanged("ReferenceWellbore");
            }
        }

        private DataObjectReference ReferenceWellboreField; 

        /// <summary>
        /// ParentString property
        /// </summary>
		[ComponentElement]
		[XmlElement("ParentString")]
        public DownholeString ParentString {
            get {
                return ParentStringField;
            } 
            set {
                ParentStringField = value;
                NotifyPropertyChanged("ParentString");
            }
        }

        private DownholeString ParentStringField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DownholeString")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementAdditive xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementAdditive", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementAdditive xsd type.")]
    public partial class CementAdditive : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// NameAdd property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Additive name.")]
		[XmlElement("NameAdd")]
        public String NameAdd {
            get {
                return NameAddField;
            } 
            set {
                NameAddField = value;
                NotifyPropertyChanged("NameAdd");
            }
        }

        private String NameAddField; 

        /// <summary>
        /// TypeAdd property
        /// </summary>
		[StringLength(64)]
        [Description("Additive type or Function (Retarder, Visosifier, Weighting agent).")]
		[XmlElement("TypeAdd")]
        public String TypeAdd {
            get {
                return TypeAddField;
            } 
            set {
                TypeAddField = value;
                NotifyPropertyChanged("TypeAdd");
            }
        }

        private String TypeAddField; 

        /// <summary>
        /// FormAdd property
        /// </summary>
		[StringLength(64)]
        [Description("Wet or Dry.")]
		[XmlElement("FormAdd")]
        public String FormAdd {
            get {
                return FormAddField;
            } 
            set {
                FormAddField = value;
                NotifyPropertyChanged("FormAdd");
            }
        }

        private String FormAddField; 

        /// <summary>
        /// DensAdd property
        /// </summary>
		[Description("Additive density.")]
        [ComponentElement]
		[XmlElement("DensAdd")]
        public MassPerVolumeMeasure DensAdd {
            get {
                return DensAddField;
            } 
            set {
                DensAddField = value;
                NotifyPropertyChanged("DensAdd");
            }
        }

        private MassPerVolumeMeasure DensAddField; 

        /// <summary>
        /// Additive property
        /// </summary>
		[Required]
        [Description("Additive Amount.")]
        [ComponentElement]
		[XmlElement("Additive")]
        public MassMeasure Additive {
            get {
                return AdditiveField;
            } 
            set {
                AdditiveField = value;
                NotifyPropertyChanged("Additive");
            }
        }

        private MassMeasure AdditiveField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the additive.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerMassMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerMassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerMassMeasure xsd type.")]
    public partial class VolumePerMassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerMassMeasure class.
        /// </summary>
        public VolumePerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerMassMeasure(Double value, VolumePerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public VolumePerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerMassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementingFluid xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementingFluid", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementingFluid xsd type.")]
    public partial class CementingFluid : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ETimTransitions property
        /// </summary>
		[Description("The elapse time between the development of 100lbf/100sq ft gel strength and 500lbf/100 sq ft gel strength")]
		[XmlElement("ETimTransitions")]
        public String ETimeTransitions {
            get {
                return ETimTransitionsField;
            } 
            set {
                ETimTransitionsField = value;
                NotifyPropertyChanged("ETimeTransitions");
            }
        }

        private String ETimTransitionsField; 

        /// <summary>
        /// ETimZeroGel property
        /// </summary>
		[Description("The elapse time from initiation of the static portion of the test until the slurry attains a gel strength of 100lbf/100sq ft")]
		[XmlElement("ETimZeroGel")]
        public String ETimeZeroGel {
            get {
                return ETimZeroGelField;
            } 
            set {
                ETimZeroGelField = value;
                NotifyPropertyChanged("ETimeZeroGel");
            }
        }

        private String ETimZeroGelField; 

        /// <summary>
        /// TypeFluid property
        /// </summary>
		[StringLength(64)]
        [Description("Fluid type: Mud, Wash, Spacer, Slurry.")]
		[XmlElement("TypeFluid")]
        public String TypeFluid {
            get {
                return TypeFluidField;
            } 
            set {
                TypeFluidField = value;
                NotifyPropertyChanged("TypeFluid");
            }
        }

        private String TypeFluidField; 

        /// <summary>
        /// FluidIndex property
        /// </summary>
		[Description("Fluid Index: 1: first fluid pumped (=original mud),  (last-1)=Tail cement, last= displacement mud")]
		[XmlElement("FluidIndex")]
        public Int32? FluidIndex {
            get {
                return FluidIndexField;
            } 
            set {
                FluidIndexField = value;
             if(value!=null) 
                 this.FluidIndexSpecified = true;
                NotifyPropertyChanged("FluidIndex");
            }
        }

        private Int32? FluidIndexField; 

        /// <summary>
        /// FluidIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean FluidIndexSpecified {
            get {
                return FluidIndexSpecifiedField;
            } 
            set {
                FluidIndexSpecifiedField = value;
                NotifyPropertyChanged("FluidIndexSpecified");
            }
        }

        private Boolean FluidIndexSpecifiedField; 

        /// <summary>
        /// DescFluid property
        /// </summary>
		[StringLength(64)]
        [Description("Fluid description.")]
		[XmlElement("DescFluid")]
        public String DescFluid {
            get {
                return DescFluidField;
            } 
            set {
                DescFluidField = value;
                NotifyPropertyChanged("DescFluid");
            }
        }

        private String DescFluidField; 

        /// <summary>
        /// Purpose property
        /// </summary>
		[StringLength(64)]
        [Description("Purpose description.")]
		[XmlElement("Purpose")]
        public String Purpose {
            get {
                return PurposeField;
            } 
            set {
                PurposeField = value;
                NotifyPropertyChanged("Purpose");
            }
        }

        private String PurposeField; 

        /// <summary>
        /// ClassSlurryDryBlend property
        /// </summary>
		[StringLength(64)]
        [Description("Slurry class.")]
		[XmlElement("ClassSlurryDryBlend")]
        public String ClassSlurryDryBlend {
            get {
                return ClassSlurryDryBlendField;
            } 
            set {
                ClassSlurryDryBlendField = value;
                NotifyPropertyChanged("ClassSlurryDryBlend");
            }
        }

        private String ClassSlurryDryBlendField; 

        /// <summary>
        /// SlurryPlacementInterval property
        /// </summary>
		[Description("Measured depth interval between the top and base of the slurry placement.")]
        [ComponentElement]
		[XmlElement("SlurryPlacementInterval")]
        public MdInterval SlurryPlacementInterval {
            get {
                return SlurryPlacementIntervalField;
            } 
            set {
                SlurryPlacementIntervalField = value;
                NotifyPropertyChanged("SlurryPlacementInterval");
            }
        }

        private MdInterval SlurryPlacementIntervalField; 

        /// <summary>
        /// SourceWater property
        /// </summary>
		[StringLength(64)]
        [Description("Water Source Description.")]
		[XmlElement("SourceWater")]
        public String SourceWater {
            get {
                return SourceWaterField;
            } 
            set {
                SourceWaterField = value;
                NotifyPropertyChanged("SourceWater");
            }
        }

        private String SourceWaterField; 

        /// <summary>
        /// VolWater property
        /// </summary>
		[Description("Water volume.")]
        [ComponentElement]
		[XmlElement("VolWater")]
        public VolumeMeasure VolWater {
            get {
                return VolWaterField;
            } 
            set {
                VolWaterField = value;
                NotifyPropertyChanged("VolWater");
            }
        }

        private VolumeMeasure VolWaterField; 

        /// <summary>
        /// VolCement property
        /// </summary>
		[Description("Volume of cement.")]
        [ComponentElement]
		[XmlElement("VolCement")]
        public VolumeMeasure VolCement {
            get {
                return VolCementField;
            } 
            set {
                VolCementField = value;
                NotifyPropertyChanged("VolCement");
            }
        }

        private VolumeMeasure VolCementField; 

        /// <summary>
        /// RatioMixWater property
        /// </summary>
		[Description("Mix Water Ratio.")]
        [ComponentElement]
		[XmlElement("RatioMixWater")]
        public VolumePerMassMeasure RatioMixWater {
            get {
                return RatioMixWaterField;
            } 
            set {
                RatioMixWaterField = value;
                NotifyPropertyChanged("RatioMixWater");
            }
        }

        private VolumePerMassMeasure RatioMixWaterField; 

        /// <summary>
        /// VolFluid property
        /// </summary>
		[Description("Fluid/Slurry Volume.")]
        [ComponentElement]
		[XmlElement("VolFluid")]
        public VolumeMeasure VolFluid {
            get {
                return VolFluidField;
            } 
            set {
                VolFluidField = value;
                NotifyPropertyChanged("VolFluid");
            }
        }

        private VolumeMeasure VolFluidField; 

        /// <summary>
        /// ExcessPc property
        /// </summary>
		[Description("Excess Percent.")]
        [ComponentElement]
		[XmlElement("ExcessPc")]
        public VolumePerVolumeMeasure ExcessPercent {
            get {
                return ExcessPcField;
            } 
            set {
                ExcessPcField = value;
                NotifyPropertyChanged("ExcessPercent");
            }
        }

        private VolumePerVolumeMeasure ExcessPcField; 

        /// <summary>
        /// VolYield property
        /// </summary>
		[Description("Slurry Yield.")]
        [ComponentElement]
		[XmlElement("VolYield")]
        public VolumePerMassMeasure VolYield {
            get {
                return VolYieldField;
            } 
            set {
                VolYieldField = value;
                NotifyPropertyChanged("VolYield");
            }
        }

        private VolumePerMassMeasure VolYieldField; 

        /// <summary>
        /// Density property
        /// </summary>
		[Description("Fluid density.")]
        [ComponentElement]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// SolidVolumeFraction property
        /// </summary>
		[Description("Equals 1 - Porosity.")]
        [ComponentElement]
		[XmlElement("SolidVolumeFraction")]
        public VolumePerVolumeMeasure SolidVolumeFraction {
            get {
                return SolidVolumeFractionField;
            } 
            set {
                SolidVolumeFractionField = value;
                NotifyPropertyChanged("SolidVolumeFraction");
            }
        }

        private VolumePerVolumeMeasure SolidVolumeFractionField; 

        /// <summary>
        /// VolPumped property
        /// </summary>
		[Description("Volume Pumped.")]
        [ComponentElement]
		[XmlElement("VolPumped")]
        public VolumeMeasure VolPumped {
            get {
                return VolPumpedField;
            } 
            set {
                VolPumpedField = value;
                NotifyPropertyChanged("VolPumped");
            }
        }

        private VolumeMeasure VolPumpedField; 

        /// <summary>
        /// VolOther property
        /// </summary>
		[Description("Other Volume.")]
        [ComponentElement]
		[XmlElement("VolOther")]
        public VolumeMeasure VolOther {
            get {
                return VolOtherField;
            } 
            set {
                VolOtherField = value;
                NotifyPropertyChanged("VolOther");
            }
        }

        private VolumeMeasure VolOtherField; 

        /// <summary>
        /// FluidRheologicalModel property
        /// </summary>
		[StringLength(64)]
        [Description("Newtonian/Bingham/Power Law/Herschel Bulkley.")]
		[XmlElement("FluidRheologicalModel")]
        public String FluidRheologicalModel {
            get {
                return FluidRheologicalModelField;
            } 
            set {
                FluidRheologicalModelField = value;
                NotifyPropertyChanged("FluidRheologicalModel");
            }
        }

        private String FluidRheologicalModelField; 

        /// <summary>
        /// Viscosity property
        /// </summary>
		[Description("Viscosity (Newtonian) or Plastic Viscosity if Bingham.")]
        [ComponentElement]
		[XmlElement("Viscosity")]
        public DynamicViscosityMeasure Viscosity {
            get {
                return ViscosityField;
            } 
            set {
                ViscosityField = value;
                NotifyPropertyChanged("Viscosity");
            }
        }

        private DynamicViscosityMeasure ViscosityField; 

        /// <summary>
        /// Yp property
        /// </summary>
		[Description("Yield point (Bingham and Herschel Bulkley models).")]
        [ComponentElement]
		[XmlElement("Yp")]
        public PressureMeasure YP {
            get {
                return YpField;
            } 
            set {
                YpField = value;
                NotifyPropertyChanged("YP");
            }
        }

        private PressureMeasure YpField; 

        /// <summary>
        /// N property
        /// </summary>
		[Description("Power Law index (Power Law and HB).")]
        [ComponentElement]
		[XmlElement("N")]
        public DimensionlessMeasure N {
            get {
                return NField;
            } 
            set {
                NField = value;
                NotifyPropertyChanged("N");
            }
        }

        private DimensionlessMeasure NField; 

        /// <summary>
        /// K property
        /// </summary>
		[Description("Consistency index (Power Law and HB).")]
        [ComponentElement]
		[XmlElement("K")]
        public DimensionlessMeasure K {
            get {
                return KField;
            } 
            set {
                KField = value;
                NotifyPropertyChanged("K");
            }
        }

        private DimensionlessMeasure KField; 

        /// <summary>
        /// Gel10SecReading property
        /// </summary>
		[Description("Gel reading after 10 seconds.")]
        [ComponentElement]
		[XmlElement("Gel10SecReading")]
        public PlaneAngleMeasure Gel10SecReading {
            get {
                return Gel10SecReadingField;
            } 
            set {
                Gel10SecReadingField = value;
                NotifyPropertyChanged("Gel10SecReading");
            }
        }

        private PlaneAngleMeasure Gel10SecReadingField; 

        /// <summary>
        /// Gel10SecStrength property
        /// </summary>
		[Description("Gel strength after 10 seconds.")]
        [ComponentElement]
		[XmlElement("Gel10SecStrength")]
        public PressureMeasure Gel10SecStrength {
            get {
                return Gel10SecStrengthField;
            } 
            set {
                Gel10SecStrengthField = value;
                NotifyPropertyChanged("Gel10SecStrength");
            }
        }

        private PressureMeasure Gel10SecStrengthField; 

        /// <summary>
        /// Gel1MinReading property
        /// </summary>
		[Description("Gel reading after 1 minute.")]
        [ComponentElement]
		[XmlElement("Gel1MinReading")]
        public PlaneAngleMeasure Gel1MinReading {
            get {
                return Gel1MinReadingField;
            } 
            set {
                Gel1MinReadingField = value;
                NotifyPropertyChanged("Gel1MinReading");
            }
        }

        private PlaneAngleMeasure Gel1MinReadingField; 

        /// <summary>
        /// Gel1MinStrength property
        /// </summary>
		[Description("Gel strength after 1 minute.")]
        [ComponentElement]
		[XmlElement("Gel1MinStrength")]
        public PressureMeasure Gel1MinStrength {
            get {
                return Gel1MinStrengthField;
            } 
            set {
                Gel1MinStrengthField = value;
                NotifyPropertyChanged("Gel1MinStrength");
            }
        }

        private PressureMeasure Gel1MinStrengthField; 

        /// <summary>
        /// Gel10MinReading property
        /// </summary>
		[Description("Gel reading after 10 minutes.")]
        [ComponentElement]
		[XmlElement("Gel10MinReading")]
        public PlaneAngleMeasure Gel10MinReading {
            get {
                return Gel10MinReadingField;
            } 
            set {
                Gel10MinReadingField = value;
                NotifyPropertyChanged("Gel10MinReading");
            }
        }

        private PlaneAngleMeasure Gel10MinReadingField; 

        /// <summary>
        /// Gel10MinStrength property
        /// </summary>
		[Description("Gel strength after 10 minutes.")]
        [ComponentElement]
		[XmlElement("Gel10MinStrength")]
        public PressureMeasure Gel10MinStrength {
            get {
                return Gel10MinStrengthField;
            } 
            set {
                Gel10MinStrengthField = value;
                NotifyPropertyChanged("Gel10MinStrength");
            }
        }

        private PressureMeasure Gel10MinStrengthField; 

        /// <summary>
        /// TypeBaseFluid property
        /// </summary>
		[StringLength(64)]
        [Description("Type of base fluid: Fresh water, Sea water, Brine, Brackish water.")]
		[XmlElement("TypeBaseFluid")]
        public String TypeBaseFluid {
            get {
                return TypeBaseFluidField;
            } 
            set {
                TypeBaseFluidField = value;
                NotifyPropertyChanged("TypeBaseFluid");
            }
        }

        private String TypeBaseFluidField; 

        /// <summary>
        /// DensBaseFluid property
        /// </summary>
		[Description("Density of base fluid.")]
        [ComponentElement]
		[XmlElement("DensBaseFluid")]
        public MassPerVolumeMeasure DensBaseFluid {
            get {
                return DensBaseFluidField;
            } 
            set {
                DensBaseFluidField = value;
                NotifyPropertyChanged("DensBaseFluid");
            }
        }

        private MassPerVolumeMeasure DensBaseFluidField; 

        /// <summary>
        /// DryBlendName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of dry blend.")]
		[XmlElement("DryBlendName")]
        public String DryBlendName {
            get {
                return DryBlendNameField;
            } 
            set {
                DryBlendNameField = value;
                NotifyPropertyChanged("DryBlendName");
            }
        }

        private String DryBlendNameField; 

        /// <summary>
        /// DryBlendDescription property
        /// </summary>
		[StringLength(64)]
        [Description("Description of dry blend.")]
		[XmlElement("DryBlendDescription")]
        public String DryBlendDescription {
            get {
                return DryBlendDescriptionField;
            } 
            set {
                DryBlendDescriptionField = value;
                NotifyPropertyChanged("DryBlendDescription");
            }
        }

        private String DryBlendDescriptionField; 

        /// <summary>
        /// MassDryBlend property
        /// </summary>
		[Description("Mass of dry blend: the blend is made of different solid additives: the volume is not constant.")]
        [ComponentElement]
		[XmlElement("MassDryBlend")]
        public MassMeasure MassDryBlend {
            get {
                return MassDryBlendField;
            } 
            set {
                MassDryBlendField = value;
                NotifyPropertyChanged("MassDryBlend");
            }
        }

        private MassMeasure MassDryBlendField; 

        /// <summary>
        /// DensDryBlend property
        /// </summary>
		[Description("Density of Dry blend.")]
        [ComponentElement]
		[XmlElement("DensDryBlend")]
        public MassPerVolumeMeasure DensDryBlend {
            get {
                return DensDryBlendField;
            } 
            set {
                DensDryBlendField = value;
                NotifyPropertyChanged("DensDryBlend");
            }
        }

        private MassPerVolumeMeasure DensDryBlendField; 

        /// <summary>
        /// MassSackDryBlend property
        /// </summary>
		[Description("Weight of a sack of dry blend.")]
        [ComponentElement]
		[XmlElement("MassSackDryBlend")]
        public MassMeasure MassSackDryBlend {
            get {
                return MassSackDryBlendField;
            } 
            set {
                MassSackDryBlendField = value;
                NotifyPropertyChanged("MassSackDryBlend");
            }
        }

        private MassMeasure MassSackDryBlendField; 

        /// <summary>
        /// FoamUsed property
        /// </summary>
		[Description("Foam used indicator.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("FoamUsed")]
        public Boolean? FoamUsed {
            get {
                return FoamUsedField;
            } 
            set {
                FoamUsedField = value;
             if(value!=null) 
                 this.FoamUsedSpecified = true;
                NotifyPropertyChanged("FoamUsed");
            }
        }

        private Boolean? FoamUsedField; 

        /// <summary>
        /// FoamUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean FoamUsedSpecified {
            get {
                return FoamUsedSpecifiedField;
            } 
            set {
                FoamUsedSpecifiedField = value;
                NotifyPropertyChanged("FoamUsedSpecified");
            }
        }

        private Boolean FoamUsedSpecifiedField; 

        /// <summary>
        /// TypeGasFoam property
        /// </summary>
		[StringLength(64)]
        [Description("Gas type used for foam job.")]
		[XmlElement("TypeGasFoam")]
        public String TypeGasFoam {
            get {
                return TypeGasFoamField;
            } 
            set {
                TypeGasFoamField = value;
                NotifyPropertyChanged("TypeGasFoam");
            }
        }

        private String TypeGasFoamField; 

        /// <summary>
        /// VolGasFoam property
        /// </summary>
		[Description("Volume of gas used for foam job.")]
        [ComponentElement]
		[XmlElement("VolGasFoam")]
        public VolumeMeasure VolGasFoam {
            get {
                return VolGasFoamField;
            } 
            set {
                VolGasFoamField = value;
                NotifyPropertyChanged("VolGasFoam");
            }
        }

        private VolumeMeasure VolGasFoamField; 

        /// <summary>
        /// RatioConstGasMethodAv property
        /// </summary>
		[Description("Constant gas ratio method ratio")]
        [ComponentElement]
		[XmlElement("RatioConstGasMethodAv")]
        public VolumePerVolumeMeasure RatioConstGasMethodAverage {
            get {
                return RatioConstGasMethodAvField;
            } 
            set {
                RatioConstGasMethodAvField = value;
                NotifyPropertyChanged("RatioConstGasMethodAverage");
            }
        }

        private VolumePerVolumeMeasure RatioConstGasMethodAvField; 

        /// <summary>
        /// DensConstGasMethod property
        /// </summary>
		[Description("Constant gas ratio method average density.")]
        [ComponentElement]
		[XmlElement("DensConstGasMethod")]
        public MassPerVolumeMeasure DensConstGasMethod {
            get {
                return DensConstGasMethodField;
            } 
            set {
                DensConstGasMethodField = value;
                NotifyPropertyChanged("DensConstGasMethod");
            }
        }

        private MassPerVolumeMeasure DensConstGasMethodField; 

        /// <summary>
        /// RatioConstGasMethodStart property
        /// </summary>
		[Description("Constant gas ratio method initial method ratio.")]
        [ComponentElement]
		[XmlElement("RatioConstGasMethodStart")]
        public VolumePerVolumeMeasure RatioConstGasMethodStart {
            get {
                return RatioConstGasMethodStartField;
            } 
            set {
                RatioConstGasMethodStartField = value;
                NotifyPropertyChanged("RatioConstGasMethodStart");
            }
        }

        private VolumePerVolumeMeasure RatioConstGasMethodStartField; 

        /// <summary>
        /// RatioConstGasMethodEnd property
        /// </summary>
		[Description("Constant gas ratio method final method ratio.")]
        [ComponentElement]
		[XmlElement("RatioConstGasMethodEnd")]
        public VolumePerVolumeMeasure RatioConstGasMethodEnd {
            get {
                return RatioConstGasMethodEndField;
            } 
            set {
                RatioConstGasMethodEndField = value;
                NotifyPropertyChanged("RatioConstGasMethodEnd");
            }
        }

        private VolumePerVolumeMeasure RatioConstGasMethodEndField; 

        /// <summary>
        /// DensConstGasFoam property
        /// </summary>
		[Description("Constant gas ratio method average density.")]
        [ComponentElement]
		[XmlElement("DensConstGasFoam")]
        public MassPerVolumeMeasure DensConstGasFoam {
            get {
                return DensConstGasFoamField;
            } 
            set {
                DensConstGasFoamField = value;
                NotifyPropertyChanged("DensConstGasFoam");
            }
        }

        private MassPerVolumeMeasure DensConstGasFoamField; 

        /// <summary>
        /// ETimThickening property
        /// </summary>
		[Description("Test thickening time.")]
        [ComponentElement]
		[XmlElement("ETimThickening")]
        public TimeMeasure ETimeThickening {
            get {
                return ETimThickeningField;
            } 
            set {
                ETimThickeningField = value;
                NotifyPropertyChanged("ETimeThickening");
            }
        }

        private TimeMeasure ETimThickeningField; 

        /// <summary>
        /// TempThickening property
        /// </summary>
		[Description("Test thickening temperature.")]
        [ComponentElement]
		[XmlElement("TempThickening")]
        public ThermodynamicTemperatureMeasure TempThickening {
            get {
                return TempThickeningField;
            } 
            set {
                TempThickeningField = value;
                NotifyPropertyChanged("TempThickening");
            }
        }

        private ThermodynamicTemperatureMeasure TempThickeningField; 

        /// <summary>
        /// PresTestThickening property
        /// </summary>
		[Description("Test thickening pressure.")]
        [ComponentElement]
		[XmlElement("PresTestThickening")]
        public PressureMeasure PresTestThickening {
            get {
                return PresTestThickeningField;
            } 
            set {
                PresTestThickeningField = value;
                NotifyPropertyChanged("PresTestThickening");
            }
        }

        private PressureMeasure PresTestThickeningField; 

        /// <summary>
        /// ConsTestThickening property
        /// </summary>
		[Description("Test thickening consistency/slurry viscosity - Bearden Consistency (Bc) 0 to 100.")]
        [ComponentElement]
		[XmlElement("ConsTestThickening")]
        public DimensionlessMeasure ConsTestThickening {
            get {
                return ConsTestThickeningField;
            } 
            set {
                ConsTestThickeningField = value;
                NotifyPropertyChanged("ConsTestThickening");
            }
        }

        private DimensionlessMeasure ConsTestThickeningField; 

        /// <summary>
        /// PcFreeWater property
        /// </summary>
		[Description("Test free water na: = mL/250ML.")]
        [ComponentElement]
		[XmlElement("PcFreeWater")]
        public VolumePerVolumeMeasure PercentFreeWater {
            get {
                return PcFreeWaterField;
            } 
            set {
                PcFreeWaterField = value;
                NotifyPropertyChanged("PercentFreeWater");
            }
        }

        private VolumePerVolumeMeasure PcFreeWaterField; 

        /// <summary>
        /// TempFreeWater property
        /// </summary>
		[Description("Test free water temperature.")]
        [ComponentElement]
		[XmlElement("TempFreeWater")]
        public ThermodynamicTemperatureMeasure TempFreeWater {
            get {
                return TempFreeWaterField;
            } 
            set {
                TempFreeWaterField = value;
                NotifyPropertyChanged("TempFreeWater");
            }
        }

        private ThermodynamicTemperatureMeasure TempFreeWaterField; 

        /// <summary>
        /// VolTestFluidLoss property
        /// </summary>
		[Description("Test fluid loss.")]
        [ComponentElement]
		[XmlElement("VolTestFluidLoss")]
        public VolumeMeasure VolTestFluidLoss {
            get {
                return VolTestFluidLossField;
            } 
            set {
                VolTestFluidLossField = value;
                NotifyPropertyChanged("VolTestFluidLoss");
            }
        }

        private VolumeMeasure VolTestFluidLossField; 

        /// <summary>
        /// TempFluidLoss property
        /// </summary>
		[Description("Test fluid loss temperature.")]
        [ComponentElement]
		[XmlElement("TempFluidLoss")]
        public ThermodynamicTemperatureMeasure TempFluidLoss {
            get {
                return TempFluidLossField;
            } 
            set {
                TempFluidLossField = value;
                NotifyPropertyChanged("TempFluidLoss");
            }
        }

        private ThermodynamicTemperatureMeasure TempFluidLossField; 

        /// <summary>
        /// PresTestFluidLoss property
        /// </summary>
		[Description("Test Fluid loss pressure.")]
        [ComponentElement]
		[XmlElement("PresTestFluidLoss")]
        public PressureMeasure PresTestFluidLoss {
            get {
                return PresTestFluidLossField;
            } 
            set {
                PresTestFluidLossField = value;
                NotifyPropertyChanged("PresTestFluidLoss");
            }
        }

        private PressureMeasure PresTestFluidLossField; 

        /// <summary>
        /// TimeFluidLoss property
        /// </summary>
		[Description("Test Fluid loss: dehydrating test period, used to compute the API Fluid Loss.")]
        [ComponentElement]
		[XmlElement("TimeFluidLoss")]
        public TimeMeasure TimeFluidLoss {
            get {
                return TimeFluidLossField;
            } 
            set {
                TimeFluidLossField = value;
                NotifyPropertyChanged("TimeFluidLoss");
            }
        }

        private TimeMeasure TimeFluidLossField; 

        /// <summary>
        /// VolAPIFluidLoss property
        /// </summary>
		[Description("API Fluid Loss = 2 * volTestFluidLoss * SQRT(30/timefluidloss).")]
        [ComponentElement]
		[XmlElement("VolAPIFluidLoss")]
        public VolumeMeasure VolAPIFluidLoss {
            get {
                return VolAPIFluidLossField;
            } 
            set {
                VolAPIFluidLossField = value;
                NotifyPropertyChanged("VolAPIFluidLoss");
            }
        }

        private VolumeMeasure VolAPIFluidLossField; 

        /// <summary>
        /// ETimComprStren1 property
        /// </summary>
		[Description("Compressive strength time 1.")]
        [ComponentElement]
		[XmlElement("ETimComprStren1")]
        public TimeMeasure ETimeComprStren1 {
            get {
                return ETimComprStren1Field;
            } 
            set {
                ETimComprStren1Field = value;
                NotifyPropertyChanged("ETimeComprStren1");
            }
        }

        private TimeMeasure ETimComprStren1Field; 

        /// <summary>
        /// ETimComprStren2 property
        /// </summary>
		[Description("Compressive strength time 2.")]
        [ComponentElement]
		[XmlElement("ETimComprStren2")]
        public TimeMeasure ETimeComprStren2 {
            get {
                return ETimComprStren2Field;
            } 
            set {
                ETimComprStren2Field = value;
                NotifyPropertyChanged("ETimeComprStren2");
            }
        }

        private TimeMeasure ETimComprStren2Field; 

        /// <summary>
        /// PresComprStren1 property
        /// </summary>
		[Description("Compressive strength pressure 1.")]
        [ComponentElement]
		[XmlElement("PresComprStren1")]
        public PressureMeasure PresComprStren1 {
            get {
                return PresComprStren1Field;
            } 
            set {
                PresComprStren1Field = value;
                NotifyPropertyChanged("PresComprStren1");
            }
        }

        private PressureMeasure PresComprStren1Field; 

        /// <summary>
        /// PresComprStren2 property
        /// </summary>
		[Description("Compressive strength pressure 2.")]
        [ComponentElement]
		[XmlElement("PresComprStren2")]
        public PressureMeasure PresComprStren2 {
            get {
                return PresComprStren2Field;
            } 
            set {
                PresComprStren2Field = value;
                NotifyPropertyChanged("PresComprStren2");
            }
        }

        private PressureMeasure PresComprStren2Field; 

        /// <summary>
        /// TempComprStren1 property
        /// </summary>
		[Description("Compressive strength temperature 1.")]
        [ComponentElement]
		[XmlElement("TempComprStren1")]
        public ThermodynamicTemperatureMeasure TempComprStren1 {
            get {
                return TempComprStren1Field;
            } 
            set {
                TempComprStren1Field = value;
                NotifyPropertyChanged("TempComprStren1");
            }
        }

        private ThermodynamicTemperatureMeasure TempComprStren1Field; 

        /// <summary>
        /// TempComprStren2 property
        /// </summary>
		[Description("Compressive strength temperature 2.")]
        [ComponentElement]
		[XmlElement("TempComprStren2")]
        public ThermodynamicTemperatureMeasure TempComprStren2 {
            get {
                return TempComprStren2Field;
            } 
            set {
                TempComprStren2Field = value;
                NotifyPropertyChanged("TempComprStren2");
            }
        }

        private ThermodynamicTemperatureMeasure TempComprStren2Field; 

        /// <summary>
        /// DensAtPres property
        /// </summary>
		[Description("Slurry density at pressure.")]
        [ComponentElement]
		[XmlElement("DensAtPres")]
        public MassPerVolumeMeasure DensAtPres {
            get {
                return DensAtPresField;
            } 
            set {
                DensAtPresField = value;
                NotifyPropertyChanged("DensAtPres");
            }
        }

        private MassPerVolumeMeasure DensAtPresField; 

        /// <summary>
        /// VolReserved property
        /// </summary>
		[Description("Volume reserved.")]
        [ComponentElement]
		[XmlElement("VolReserved")]
        public VolumeMeasure VolReserved {
            get {
                return VolReservedField;
            } 
            set {
                VolReservedField = value;
                NotifyPropertyChanged("VolReserved");
            }
        }

        private VolumeMeasure VolReservedField; 

        /// <summary>
        /// VolTotSlurry property
        /// </summary>
		[Description("Total Slurry Volume.")]
        [ComponentElement]
		[XmlElement("VolTotSlurry")]
        public VolumeMeasure VolTotSlurry {
            get {
                return VolTotSlurryField;
            } 
            set {
                VolTotSlurryField = value;
                NotifyPropertyChanged("VolTotSlurry");
            }
        }

        private VolumeMeasure VolTotSlurryField; 

        /// <summary>
        /// CementAdditive property
        /// </summary>
		[RecurringElement]
		[XmlElement("CementAdditive")]
        public List<CementAdditive> CementAdditive {
            get {
                return CementAdditiveField;
            } 
            set {
                CementAdditiveField = value;
                NotifyPropertyChanged("CementAdditive");
            }
        }

         [XmlIgnore]
         public bool CementAdditiveSpecified
         {
            get {
             if(CementAdditiveField!=null)
                return CementAdditiveField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CementAdditive> CementAdditiveField; 

        /// <summary>
        /// Rheometer property
        /// </summary>
		[RecurringElement]
		[XmlElement("Rheometer")]
        public List<Rheometer> Rheometer {
            get {
                return RheometerField;
            } 
            set {
                RheometerField = value;
                NotifyPropertyChanged("Rheometer");
            }
        }

         [XmlIgnore]
         public bool RheometerSpecified
         {
            get {
             if(RheometerField!=null)
                return RheometerField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Rheometer> RheometerField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this cementing fluid")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Rheometer xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Rheometer", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Rheometer xsd type.")]
    public partial class Rheometer : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TempRheom property
        /// </summary>
		[Description("Rheometer temperature.")]
        [ComponentElement]
		[XmlElement("TempRheom")]
        public ThermodynamicTemperatureMeasure TempRheom {
            get {
                return TempRheomField;
            } 
            set {
                TempRheomField = value;
                NotifyPropertyChanged("TempRheom");
            }
        }

        private ThermodynamicTemperatureMeasure TempRheomField; 

        /// <summary>
        /// PresRheom property
        /// </summary>
		[Description("Rheometer pressure.")]
        [ComponentElement]
		[XmlElement("PresRheom")]
        public PressureMeasure PresRheom {
            get {
                return PresRheomField;
            } 
            set {
                PresRheomField = value;
                NotifyPropertyChanged("PresRheom");
            }
        }

        private PressureMeasure PresRheomField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Viscosity property
        /// </summary>
		[RecurringElement]
		[XmlElement("Viscosity")]
        public List<RheometerViscosity> Viscosity {
            get {
                return ViscosityField;
            } 
            set {
                ViscosityField = value;
                NotifyPropertyChanged("Viscosity");
            }
        }

         [XmlIgnore]
         public bool ViscositySpecified
         {
            get {
             if(ViscosityField!=null)
                return ViscosityField.Count>0?true:false;
             else return false;
            } 
         }
        private List<RheometerViscosity> ViscosityField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Rheometer")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RheometerViscosity xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RheometerViscosity", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RheometerViscosity xsd type.")]
    public partial class RheometerViscosity : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Speed property
        /// </summary>
		[Required]
        [Description("Rotational speed of the rheometer, typically in RPM.")]
        [ComponentElement]
		[XmlElement("Speed")]
        public AngularVelocityMeasure Speed {
            get {
                return SpeedField;
            } 
            set {
                SpeedField = value;
                NotifyPropertyChanged("Speed");
            }
        }

        private AngularVelocityMeasure SpeedField; 

        /// <summary>
        /// Viscosity property
        /// </summary>
		[Required]
        [Description("The raw reading from a rheometer. This could be - but is not necessarily - a viscosity.")]
		[XmlElement("Viscosity")]
        public Double? Viscosity {
            get {
                return ViscosityField;
            } 
            set {
                ViscosityField = value;
                NotifyPropertyChanged("Viscosity");
            }
        }

        private Double? ViscosityField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of RheometerViscosity")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementPumpScheduleStep xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementPumpScheduleStep", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementPumpScheduleStep xsd type.")]
    public partial class CementPumpScheduleStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// FluidReferenceId property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("UUID Reference to Fluid used in CementJob.")]
		[XmlElement("FluidReferenceId")]
        public String FluidReferenceId {
            get {
                return FluidReferenceIdField;
            } 
            set {
                FluidReferenceIdField = value;
                NotifyPropertyChanged("FluidReferenceId");
            }
        }

        private String FluidReferenceIdField; 

        /// <summary>
        /// RatioFluidExcess property
        /// </summary>
		[Description("The ratio of excess fluid to total fluid pumped during step.")]
		[XmlElement("RatioFluidExcess")]
        public String RatioFluidExcess {
            get {
                return RatioFluidExcessField;
            } 
            set {
                RatioFluidExcessField = value;
                NotifyPropertyChanged("RatioFluidExcess");
            }
        }

        private String RatioFluidExcessField; 

        /// <summary>
        /// ETimPump property
        /// </summary>
		[Description("The duration of the fluid pumping.")]
        [ComponentElement]
		[XmlElement("ETimPump")]
        public TimeMeasure ETimePump {
            get {
                return ETimPumpField;
            } 
            set {
                ETimPumpField = value;
                NotifyPropertyChanged("ETimePump");
            }
        }

        private TimeMeasure ETimPumpField; 

        /// <summary>
        /// RatePump property
        /// </summary>
		[Description("Rate fluid is pumped. 0 means it is a pause.")]
        [ComponentElement]
		[XmlElement("RatePump")]
        public VolumePerTimeMeasure RatePump {
            get {
                return RatePumpField;
            } 
            set {
                RatePumpField = value;
                NotifyPropertyChanged("RatePump");
            }
        }

        private VolumePerTimeMeasure RatePumpField; 

        /// <summary>
        /// VolPump property
        /// </summary>
		[Description("Volume pumped = eTimPump * ratePump.")]
        [ComponentElement]
		[XmlElement("VolPump")]
        public VolumeMeasure VolPump {
            get {
                return VolPumpField;
            } 
            set {
                VolPumpField = value;
                NotifyPropertyChanged("VolPump");
            }
        }

        private VolumeMeasure VolPumpField; 

        /// <summary>
        /// StrokePump property
        /// </summary>
		[Description("Number of pump strokes for the fluid to be pumped (assumes pump output known).")]
		[XmlElement("StrokePump")]
        public Int32? StrokePump {
            get {
                return StrokePumpField;
            } 
            set {
                StrokePumpField = value;
             if(value!=null) 
                 this.StrokePumpSpecified = true;
                NotifyPropertyChanged("StrokePump");
            }
        }

        private Int32? StrokePumpField; 

        /// <summary>
        /// StrokePumpSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StrokePumpSpecified {
            get {
                return StrokePumpSpecifiedField;
            } 
            set {
                StrokePumpSpecifiedField = value;
                NotifyPropertyChanged("StrokePumpSpecified");
            }
        }

        private Boolean StrokePumpSpecifiedField; 

        /// <summary>
        /// PresBack property
        /// </summary>
		[Description("Back pressure applied during pumping stage.")]
        [ComponentElement]
		[XmlElement("PresBack")]
        public PressureMeasure PresBack {
            get {
                return PresBackField;
            } 
            set {
                PresBackField = value;
                NotifyPropertyChanged("PresBack");
            }
        }

        private PressureMeasure PresBackField; 

        /// <summary>
        /// ETimShutdown property
        /// </summary>
		[Description("The duration of the shutdown event.")]
        [ComponentElement]
		[XmlElement("ETimShutdown")]
        public TimeMeasure ETimeShutdown {
            get {
                return ETimShutdownField;
            } 
            set {
                ETimShutdownField = value;
                NotifyPropertyChanged("ETimeShutdown");
            }
        }

        private TimeMeasure ETimShutdownField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and Remarks.")]
		[XmlElement("Comments")]
        public String Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String CommentsField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this pump schedule step")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidLocation xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidLocation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the FluidLocation xsd type.")]
    public partial class FluidLocation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// FluidReferenceId property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("Reference to Fluid used in CementJob")]
		[XmlElement("FluidReferenceId")]
        public String FluidReferenceId {
            get {
                return FluidReferenceIdField;
            } 
            set {
                FluidReferenceIdField = value;
                NotifyPropertyChanged("FluidReferenceId");
            }
        }

        private String FluidReferenceIdField; 

        /// <summary>
        /// MDFluidBase property
        /// </summary>
		[Required]
        [Description("Measured depth of base of cement.")]
        [ComponentElement]
		[XmlElement("MDFluidBase")]
        public LengthMeasure MDFluidBase {
            get {
                return MDFluidBaseField;
            } 
            set {
                MDFluidBaseField = value;
                NotifyPropertyChanged("MDFluidBase");
            }
        }

        private LengthMeasure MDFluidBaseField; 

        /// <summary>
        /// MDFluidTop property
        /// </summary>
		[Required]
        [Description("Measured depth at top of interval.")]
        [ComponentElement]
		[XmlElement("MDFluidTop")]
        public LengthMeasure MDFluidTop {
            get {
                return MDFluidTopField;
            } 
            set {
                MDFluidTopField = value;
                NotifyPropertyChanged("MDFluidTop");
            }
        }

        private LengthMeasure MDFluidTopField; 

        /// <summary>
        /// Volume property
        /// </summary>
		[Required]
        [Description("Volume of fluid at this location.")]
        [ComponentElement]
		[XmlElement("Volume")]
        public VolumeMeasure Volume {
            get {
                return VolumeField;
            } 
            set {
                VolumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeMeasure VolumeField; 

        /// <summary>
        /// LocationType property
        /// </summary>
		[Required]
		[XmlElement("LocationType")]
        public WellboreFluidLocation? LocationType {
            get {
                return LocationTypeField;
            } 
            set {
                LocationTypeField = value;
                NotifyPropertyChanged("LocationType");
            }
        }

        private WellboreFluidLocation? LocationTypeField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of FluidLocation")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCementStage xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementStageReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementDesignStage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementStageDesign))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCementStage", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractCementStage xsd type.")]
    public abstract partial class AbstractCementStage : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AnnularFlowAfter property
        /// </summary>
		
		[XmlElement("AnnularFlowAfter")]
        public Boolean? AnnularFlowAfter {
            get {
                return AnnularFlowAfterField;
            } 
            set {
                AnnularFlowAfterField = value;
             if(value!=null) 
                 this.AnnularFlowAfterSpecified = true;
                NotifyPropertyChanged("AnnularFlowAfter");
            }
        }

        private Boolean? AnnularFlowAfterField; 

        /// <summary>
        /// AnnularFlowAfterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AnnularFlowAfterSpecified {
            get {
                return AnnularFlowAfterSpecifiedField;
            } 
            set {
                AnnularFlowAfterSpecifiedField = value;
                NotifyPropertyChanged("AnnularFlowAfterSpecified");
            }
        }

        private Boolean AnnularFlowAfterSpecifiedField; 

        /// <summary>
        /// ReciprocationSlackoff property
        /// </summary>
		
		[XmlElement("ReciprocationSlackoff")]
        public String ReciprocationSlackoff {
            get {
                return ReciprocationSlackoffField;
            } 
            set {
                ReciprocationSlackoffField = value;
                NotifyPropertyChanged("ReciprocationSlackoff");
            }
        }

        private String ReciprocationSlackoffField; 

        /// <summary>
        /// BotPlug property
        /// </summary>
		
		[XmlElement("BotPlug")]
        public Boolean? BotPlug {
            get {
                return BotPlugField;
            } 
            set {
                BotPlugField = value;
             if(value!=null) 
                 this.BotPlugSpecified = true;
                NotifyPropertyChanged("BotPlug");
            }
        }

        private Boolean? BotPlugField; 

        /// <summary>
        /// BotPlugSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean BotPlugSpecified {
            get {
                return BotPlugSpecifiedField;
            } 
            set {
                BotPlugSpecifiedField = value;
                NotifyPropertyChanged("BotPlugSpecified");
            }
        }

        private Boolean BotPlugSpecifiedField; 

        /// <summary>
        /// BotPlugNumber property
        /// </summary>
		
		[XmlElement("BotPlugNumber")]
        public Int32? BotPlugNumber {
            get {
                return BotPlugNumberField;
            } 
            set {
                BotPlugNumberField = value;
             if(value!=null) 
                 this.BotPlugNumberSpecified = true;
                NotifyPropertyChanged("BotPlugNumber");
            }
        }

        private Int32? BotPlugNumberField; 

        /// <summary>
        /// BotPlugNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean BotPlugNumberSpecified {
            get {
                return BotPlugNumberSpecifiedField;
            } 
            set {
                BotPlugNumberSpecifiedField = value;
                NotifyPropertyChanged("BotPlugNumberSpecified");
            }
        }

        private Boolean BotPlugNumberSpecifiedField; 

        /// <summary>
        /// DiaTailPipe property
        /// </summary>
		[ComponentElement]
		[XmlElement("DiaTailPipe")]
        public LengthMeasure DiaTailPipe {
            get {
                return DiaTailPipeField;
            } 
            set {
                DiaTailPipeField = value;
                NotifyPropertyChanged("DiaTailPipe");
            }
        }

        private LengthMeasure DiaTailPipeField; 

        /// <summary>
        /// DisplacementFluidRefId property
        /// </summary>
		
		[XmlElement("DisplacementFluidRefId")]
        public String DisplacementFluidRefId {
            get {
                return DisplacementFluidRefIdField;
            } 
            set {
                DisplacementFluidRefIdField = value;
                NotifyPropertyChanged("DisplacementFluidRefId");
            }
        }

        private String DisplacementFluidRefIdField; 

        /// <summary>
        /// ETimPresHeld property
        /// </summary>
		[ComponentElement]
		[XmlElement("ETimPresHeld")]
        public TimeMeasure ETimePresHeld {
            get {
                return ETimPresHeldField;
            } 
            set {
                ETimPresHeldField = value;
                NotifyPropertyChanged("ETimePresHeld");
            }
        }

        private TimeMeasure ETimPresHeldField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// FlowrateMudCirc property
        /// </summary>
		[ComponentElement]
		[XmlElement("FlowrateMudCirc")]
        public VolumePerTimeMeasure FlowrateMudCirc {
            get {
                return FlowrateMudCircField;
            } 
            set {
                FlowrateMudCircField = value;
                NotifyPropertyChanged("FlowrateMudCirc");
            }
        }

        private VolumePerTimeMeasure FlowrateMudCircField; 

        /// <summary>
        /// Gel10Min property
        /// </summary>
		[ComponentElement]
		[XmlElement("Gel10Min")]
        public PressureMeasure Gel10Min {
            get {
                return Gel10MinField;
            } 
            set {
                Gel10MinField = value;
                NotifyPropertyChanged("Gel10Min");
            }
        }

        private PressureMeasure Gel10MinField; 

        /// <summary>
        /// Gel10Sec property
        /// </summary>
		[ComponentElement]
		[XmlElement("Gel10Sec")]
        public PressureMeasure Gel10Sec {
            get {
                return Gel10SecField;
            } 
            set {
                Gel10SecField = value;
                NotifyPropertyChanged("Gel10Sec");
            }
        }

        private PressureMeasure Gel10SecField; 

        /// <summary>
        /// MdCircOut property
        /// </summary>
		[ComponentElement]
		[XmlElement("MdCircOut")]
        public MeasuredDepthCoord MDCircOut {
            get {
                return MdCircOutField;
            } 
            set {
                MdCircOutField = value;
                NotifyPropertyChanged("MDCircOut");
            }
        }

        private MeasuredDepthCoord MdCircOutField; 

        /// <summary>
        /// MdCoilTbg property
        /// </summary>
		[ComponentElement]
		[XmlElement("MdCoilTbg")]
        public MeasuredDepthCoord MDCoilTbg {
            get {
                return MdCoilTbgField;
            } 
            set {
                MdCoilTbgField = value;
                NotifyPropertyChanged("MDCoilTbg");
            }
        }

        private MeasuredDepthCoord MdCoilTbgField; 

        /// <summary>
        /// MdString property
        /// </summary>
		[ComponentElement]
		[XmlElement("MdString")]
        public MeasuredDepthCoord MDString {
            get {
                return MdStringField;
            } 
            set {
                MdStringField = value;
                NotifyPropertyChanged("MDString");
            }
        }

        private MeasuredDepthCoord MdStringField; 

        /// <summary>
        /// MdTool property
        /// </summary>
		[ComponentElement]
		[XmlElement("MdTool")]
        public MeasuredDepthCoord MDTool {
            get {
                return MdToolField;
            } 
            set {
                MdToolField = value;
                NotifyPropertyChanged("MDTool");
            }
        }

        private MeasuredDepthCoord MdToolField; 

        /// <summary>
        /// MixMethod property
        /// </summary>
		
		[XmlElement("MixMethod")]
        public String MixMethod {
            get {
                return MixMethodField;
            } 
            set {
                MixMethodField = value;
                NotifyPropertyChanged("MixMethod");
            }
        }

        private String MixMethodField; 

        /// <summary>
        /// NumStage property
        /// </summary>
		
		[XmlElement("NumStage")]
        public Int32? NumStage {
            get {
                return NumStageField;
            } 
            set {
                NumStageField = value;
                NotifyPropertyChanged("NumStage");
            }
        }

        private Int32? NumStageField; 

        /// <summary>
        /// ReciprocationOverpull property
        /// </summary>
		
		[XmlElement("ReciprocationOverpull")]
        public String ReciprocationOverpull {
            get {
                return ReciprocationOverpullField;
            } 
            set {
                ReciprocationOverpullField = value;
                NotifyPropertyChanged("ReciprocationOverpull");
            }
        }

        private String ReciprocationOverpullField; 

        /// <summary>
        /// PillBelowPlug property
        /// </summary>
		
		[XmlElement("PillBelowPlug")]
        public Boolean? PillBelowPlug {
            get {
                return PillBelowPlugField;
            } 
            set {
                PillBelowPlugField = value;
             if(value!=null) 
                 this.PillBelowPlugSpecified = true;
                NotifyPropertyChanged("PillBelowPlug");
            }
        }

        private Boolean? PillBelowPlugField; 

        /// <summary>
        /// PillBelowPlugSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PillBelowPlugSpecified {
            get {
                return PillBelowPlugSpecifiedField;
            } 
            set {
                PillBelowPlugSpecifiedField = value;
                NotifyPropertyChanged("PillBelowPlugSpecified");
            }
        }

        private Boolean PillBelowPlugSpecifiedField; 

        /// <summary>
        /// PlugCatcher property
        /// </summary>
		
		[XmlElement("PlugCatcher")]
        public Boolean? PlugCatcher {
            get {
                return PlugCatcherField;
            } 
            set {
                PlugCatcherField = value;
             if(value!=null) 
                 this.PlugCatcherSpecified = true;
                NotifyPropertyChanged("PlugCatcher");
            }
        }

        private Boolean? PlugCatcherField; 

        /// <summary>
        /// PlugCatcherSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PlugCatcherSpecified {
            get {
                return PlugCatcherSpecifiedField;
            } 
            set {
                PlugCatcherSpecifiedField = value;
                NotifyPropertyChanged("PlugCatcherSpecified");
            }
        }

        private Boolean PlugCatcherSpecifiedField; 

        /// <summary>
        /// PresBackPressure property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresBackPressure")]
        public PressureMeasure PresBackPressure {
            get {
                return PresBackPressureField;
            } 
            set {
                PresBackPressureField = value;
                NotifyPropertyChanged("PresBackPressure");
            }
        }

        private PressureMeasure PresBackPressureField; 

        /// <summary>
        /// PresBump property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresBump")]
        public PressureMeasure PresBump {
            get {
                return PresBumpField;
            } 
            set {
                PresBumpField = value;
                NotifyPropertyChanged("PresBump");
            }
        }

        private PressureMeasure PresBumpField; 

        /// <summary>
        /// PresCoilTbgEnd property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresCoilTbgEnd")]
        public PressureMeasure PresCoilTbgEnd {
            get {
                return PresCoilTbgEndField;
            } 
            set {
                PresCoilTbgEndField = value;
                NotifyPropertyChanged("PresCoilTbgEnd");
            }
        }

        private PressureMeasure PresCoilTbgEndField; 

        /// <summary>
        /// PresCoilTbgStart property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresCoilTbgStart")]
        public PressureMeasure PresCoilTbgStart {
            get {
                return PresCoilTbgStartField;
            } 
            set {
                PresCoilTbgStartField = value;
                NotifyPropertyChanged("PresCoilTbgStart");
            }
        }

        private PressureMeasure PresCoilTbgStartField; 

        /// <summary>
        /// PresCsgEnd property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresCsgEnd")]
        public PressureMeasure PresCsgEnd {
            get {
                return PresCsgEndField;
            } 
            set {
                PresCsgEndField = value;
                NotifyPropertyChanged("PresCsgEnd");
            }
        }

        private PressureMeasure PresCsgEndField; 

        /// <summary>
        /// PresCsgStart property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresCsgStart")]
        public PressureMeasure PresCsgStart {
            get {
                return PresCsgStartField;
            } 
            set {
                PresCsgStartField = value;
                NotifyPropertyChanged("PresCsgStart");
            }
        }

        private PressureMeasure PresCsgStartField; 

        /// <summary>
        /// PresDisplace property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresDisplace")]
        public PressureMeasure PresDisplace {
            get {
                return PresDisplaceField;
            } 
            set {
                PresDisplaceField = value;
                NotifyPropertyChanged("PresDisplace");
            }
        }

        private PressureMeasure PresDisplaceField; 

        /// <summary>
        /// PresHeld property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresHeld")]
        public PressureMeasure PresHeld {
            get {
                return PresHeldField;
            } 
            set {
                PresHeldField = value;
                NotifyPropertyChanged("PresHeld");
            }
        }

        private PressureMeasure PresHeldField; 

        /// <summary>
        /// PresMudCirc property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresMudCirc")]
        public PressureMeasure PresMudCirc {
            get {
                return PresMudCircField;
            } 
            set {
                PresMudCircField = value;
                NotifyPropertyChanged("PresMudCirc");
            }
        }

        private PressureMeasure PresMudCircField; 

        /// <summary>
        /// PresTbgEnd property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresTbgEnd")]
        public PressureMeasure PresTbgEnd {
            get {
                return PresTbgEndField;
            } 
            set {
                PresTbgEndField = value;
                NotifyPropertyChanged("PresTbgEnd");
            }
        }

        private PressureMeasure PresTbgEndField; 

        /// <summary>
        /// PresTbgStart property
        /// </summary>
		[ComponentElement]
		[XmlElement("PresTbgStart")]
        public PressureMeasure PresTbgStart {
            get {
                return PresTbgStartField;
            } 
            set {
                PresTbgStartField = value;
                NotifyPropertyChanged("PresTbgStart");
            }
        }

        private PressureMeasure PresTbgStartField; 

        /// <summary>
        /// PvMud property
        /// </summary>
		[ComponentElement]
		[XmlElement("PvMud")]
        public DynamicViscosityMeasure PVMud {
            get {
                return PvMudField;
            } 
            set {
                PvMudField = value;
                NotifyPropertyChanged("PVMud");
            }
        }

        private DynamicViscosityMeasure PvMudField; 

        /// <summary>
        /// SqueezeObjective property
        /// </summary>
		
		[XmlElement("SqueezeObjective")]
        public String SqueezeObjective {
            get {
                return SqueezeObjectiveField;
            } 
            set {
                SqueezeObjectiveField = value;
                NotifyPropertyChanged("SqueezeObjective");
            }
        }

        private String SqueezeObjectiveField; 

        /// <summary>
        /// StageMdInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("StageMdInterval")]
        public MdInterval StageMDInterval {
            get {
                return StageMdIntervalField;
            } 
            set {
                StageMdIntervalField = value;
                NotifyPropertyChanged("StageMDInterval");
            }
        }

        private MdInterval StageMdIntervalField; 

        /// <summary>
        /// TailPipePerf property
        /// </summary>
		
		[XmlElement("TailPipePerf")]
        public Boolean? TailPipePerf {
            get {
                return TailPipePerfField;
            } 
            set {
                TailPipePerfField = value;
             if(value!=null) 
                 this.TailPipePerfSpecified = true;
                NotifyPropertyChanged("TailPipePerf");
            }
        }

        private Boolean? TailPipePerfField; 

        /// <summary>
        /// TailPipePerfSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TailPipePerfSpecified {
            get {
                return TailPipePerfSpecifiedField;
            } 
            set {
                TailPipePerfSpecifiedField = value;
                NotifyPropertyChanged("TailPipePerfSpecified");
            }
        }

        private Boolean TailPipePerfSpecifiedField; 

        /// <summary>
        /// TailPipeUsed property
        /// </summary>
		
		[XmlElement("TailPipeUsed")]
        public Boolean? TailPipeUsed {
            get {
                return TailPipeUsedField;
            } 
            set {
                TailPipeUsedField = value;
             if(value!=null) 
                 this.TailPipeUsedSpecified = true;
                NotifyPropertyChanged("TailPipeUsed");
            }
        }

        private Boolean? TailPipeUsedField; 

        /// <summary>
        /// TailPipeUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TailPipeUsedSpecified {
            get {
                return TailPipeUsedSpecifiedField;
            } 
            set {
                TailPipeUsedSpecifiedField = value;
                NotifyPropertyChanged("TailPipeUsedSpecified");
            }
        }

        private Boolean TailPipeUsedSpecifiedField; 

        /// <summary>
        /// TempBHCT property
        /// </summary>
		[ComponentElement]
		[XmlElement("TempBHCT")]
        public ThermodynamicTemperatureMeasure TempBHCT {
            get {
                return TempBHCTField;
            } 
            set {
                TempBHCTField = value;
                NotifyPropertyChanged("TempBHCT");
            }
        }

        private ThermodynamicTemperatureMeasure TempBHCTField; 

        /// <summary>
        /// TempBHST property
        /// </summary>
		[ComponentElement]
		[XmlElement("TempBHST")]
        public ThermodynamicTemperatureMeasure TempBHST {
            get {
                return TempBHSTField;
            } 
            set {
                TempBHSTField = value;
                NotifyPropertyChanged("TempBHST");
            }
        }

        private ThermodynamicTemperatureMeasure TempBHSTField; 

        /// <summary>
        /// TopPlug property
        /// </summary>
		
		[XmlElement("TopPlug")]
        public Boolean? TopPlug {
            get {
                return TopPlugField;
            } 
            set {
                TopPlugField = value;
             if(value!=null) 
                 this.TopPlugSpecified = true;
                NotifyPropertyChanged("TopPlug");
            }
        }

        private Boolean? TopPlugField; 

        /// <summary>
        /// TopPlugSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TopPlugSpecified {
            get {
                return TopPlugSpecifiedField;
            } 
            set {
                TopPlugSpecifiedField = value;
                NotifyPropertyChanged("TopPlugSpecified");
            }
        }

        private Boolean TopPlugSpecifiedField; 

        /// <summary>
        /// TypeOriginalMud property
        /// </summary>
		
		[XmlElement("TypeOriginalMud")]
        public String TypeOriginalMud {
            get {
                return TypeOriginalMudField;
            } 
            set {
                TypeOriginalMudField = value;
                NotifyPropertyChanged("TypeOriginalMud");
            }
        }

        private String TypeOriginalMudField; 

        /// <summary>
        /// TypeStage property
        /// </summary>
		
		[XmlElement("TypeStage")]
        public String TypeStage {
            get {
                return TypeStageField;
            } 
            set {
                TypeStageField = value;
                NotifyPropertyChanged("TypeStage");
            }
        }

        private String TypeStageField; 

        /// <summary>
        /// VolCircPrior property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolCircPrior")]
        public VolumeMeasure VolCircPrior {
            get {
                return VolCircPriorField;
            } 
            set {
                VolCircPriorField = value;
                NotifyPropertyChanged("VolCircPrior");
            }
        }

        private VolumeMeasure VolCircPriorField; 

        /// <summary>
        /// VolCsgIn property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolCsgIn")]
        public VolumeMeasure VolCsgIn {
            get {
                return VolCsgInField;
            } 
            set {
                VolCsgInField = value;
                NotifyPropertyChanged("VolCsgIn");
            }
        }

        private VolumeMeasure VolCsgInField; 

        /// <summary>
        /// VolCsgOut property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolCsgOut")]
        public VolumeMeasure VolCsgOut {
            get {
                return VolCsgOutField;
            } 
            set {
                VolCsgOutField = value;
                NotifyPropertyChanged("VolCsgOut");
            }
        }

        private VolumeMeasure VolCsgOutField; 

        /// <summary>
        /// VolDisplaceFluid property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolDisplaceFluid")]
        public VolumeMeasure VolDisplaceFluid {
            get {
                return VolDisplaceFluidField;
            } 
            set {
                VolDisplaceFluidField = value;
                NotifyPropertyChanged("VolDisplaceFluid");
            }
        }

        private VolumeMeasure VolDisplaceFluidField; 

        /// <summary>
        /// VolExcess property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolExcess")]
        public VolumeMeasure VolExcess {
            get {
                return VolExcessField;
            } 
            set {
                VolExcessField = value;
                NotifyPropertyChanged("VolExcess");
            }
        }

        private VolumeMeasure VolExcessField; 

        /// <summary>
        /// VolExcessMethod property
        /// </summary>
		
		[XmlElement("VolExcessMethod")]
        public String VolExcessMethod {
            get {
                return VolExcessMethodField;
            } 
            set {
                VolExcessMethodField = value;
                NotifyPropertyChanged("VolExcessMethod");
            }
        }

        private String VolExcessMethodField; 

        /// <summary>
        /// VolMudLost property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolMudLost")]
        public VolumeMeasure VolMudLost {
            get {
                return VolMudLostField;
            } 
            set {
                VolMudLostField = value;
                NotifyPropertyChanged("VolMudLost");
            }
        }

        private VolumeMeasure VolMudLostField; 

        /// <summary>
        /// VolReturns property
        /// </summary>
		[ComponentElement]
		[XmlElement("VolReturns")]
        public VolumeMeasure VolReturns {
            get {
                return VolReturnsField;
            } 
            set {
                VolReturnsField = value;
                NotifyPropertyChanged("VolReturns");
            }
        }

        private VolumeMeasure VolReturnsField; 

        /// <summary>
        /// WtMud property
        /// </summary>
		[ComponentElement]
		[XmlElement("WtMud")]
        public MassPerVolumeMeasure WeightMud {
            get {
                return WtMudField;
            } 
            set {
                WtMudField = value;
                NotifyPropertyChanged("WeightMud");
            }
        }

        private MassPerVolumeMeasure WtMudField; 

        /// <summary>
        /// YpMud property
        /// </summary>
		[ComponentElement]
		[XmlElement("YpMud")]
        public PressureMeasure YPMud {
            get {
                return YpMudField;
            } 
            set {
                YpMudField = value;
                NotifyPropertyChanged("YPMud");
            }
        }

        private PressureMeasure YpMudField; 

        /// <summary>
        /// OriginalFluidLocation property
        /// </summary>
		[RecurringElement]
		[XmlElement("OriginalFluidLocation")]
        public List<FluidLocation> OriginalFluidLocation {
            get {
                return OriginalFluidLocationField;
            } 
            set {
                OriginalFluidLocationField = value;
                NotifyPropertyChanged("OriginalFluidLocation");
            }
        }

         [XmlIgnore]
         public bool OriginalFluidLocationSpecified
         {
            get {
             if(OriginalFluidLocationField!=null)
                return OriginalFluidLocationField.Count>0?true:false;
             else return false;
            } 
         }
        private List<FluidLocation> OriginalFluidLocationField; 

        /// <summary>
        /// EndingFluidLocation property
        /// </summary>
		[RecurringElement]
		[XmlElement("EndingFluidLocation")]
        public List<FluidLocation> EndingFluidLocation {
            get {
                return EndingFluidLocationField;
            } 
            set {
                EndingFluidLocationField = value;
                NotifyPropertyChanged("EndingFluidLocation");
            }
        }

         [XmlIgnore]
         public bool EndingFluidLocationSpecified
         {
            get {
             if(EndingFluidLocationField!=null)
                return EndingFluidLocationField.Count>0?true:false;
             else return false;
            } 
         }
        private List<FluidLocation> EndingFluidLocationField; 

        /// <summary>
        /// Step property
        /// </summary>
		[RecurringElement]
		[XmlElement("Step")]
        public List<CementPumpScheduleStep> Step {
            get {
                return StepField;
            } 
            set {
                StepField = value;
                NotifyPropertyChanged("Step");
            }
        }

         [XmlIgnore]
         public bool StepSpecified
         {
            get {
             if(StepField!=null)
                return StepField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CementPumpScheduleStep> StepField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementStageReport xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementStageReport", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementStageReport xsd type.")]
    public partial class CementStageReport : AbstractCementStage, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimMixStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time when mixing started.")]
		[XmlElement("DTimMixStart")]
        public String DateTimeMixStart {
            get {
                return DTimMixStartField;
            } 
            set {
                DTimMixStartField = value;
                NotifyPropertyChanged("DateTimeMixStart");
            }
        }

        private String DTimMixStartField; 

        /// <summary>
        /// DTimPumpStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Datetime at start of pumping cement.")]
		[XmlElement("DTimPumpStart")]
        public String DateTimePumpStart {
            get {
                return DTimPumpStartField;
            } 
            set {
                DTimPumpStartField = value;
                NotifyPropertyChanged("DateTimePumpStart");
            }
        }

        private String DTimPumpStartField; 

        /// <summary>
        /// DTimPumpEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Datetime at end of pumping cement.")]
		[XmlElement("DTimPumpEnd")]
        public String DateTimePumpEnd {
            get {
                return DTimPumpEndField;
            } 
            set {
                DTimPumpEndField = value;
                NotifyPropertyChanged("DateTimePumpEnd");
            }
        }

        private String DTimPumpEndField; 

        /// <summary>
        /// DTimDisplaceStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time when displacing cement started.")]
		[XmlElement("DTimDisplaceStart")]
        public String DateTimeDisplaceStart {
            get {
                return DTimDisplaceStartField;
            } 
            set {
                DTimDisplaceStartField = value;
                NotifyPropertyChanged("DateTimeDisplaceStart");
            }
        }

        private String DTimDisplaceStartField; 

        /// <summary>
        /// FlowrateDisplaceAv property
        /// </summary>
		[Description("Average displacement rate.")]
        [ComponentElement]
		[XmlElement("FlowrateDisplaceAv")]
        public VolumePerTimeMeasure FlowrateDisplaceAverage {
            get {
                return FlowrateDisplaceAvField;
            } 
            set {
                FlowrateDisplaceAvField = value;
                NotifyPropertyChanged("FlowrateDisplaceAverage");
            }
        }

        private VolumePerTimeMeasure FlowrateDisplaceAvField; 

        /// <summary>
        /// FlowrateDisplaceMx property
        /// </summary>
		[Description("Maximum displacement rate.")]
        [ComponentElement]
		[XmlElement("FlowrateDisplaceMx")]
        public VolumePerTimeMeasure FlowrateDisplaceMax {
            get {
                return FlowrateDisplaceMxField;
            } 
            set {
                FlowrateDisplaceMxField = value;
                NotifyPropertyChanged("FlowrateDisplaceMax");
            }
        }

        private VolumePerTimeMeasure FlowrateDisplaceMxField; 

        /// <summary>
        /// ETimMudCirculation property
        /// </summary>
		[Description("Mud circulation elapsed time before the job.")]
        [ComponentElement]
		[XmlElement("ETimMudCirculation")]
        public TimeMeasure ETimeMudCirculation {
            get {
                return ETimMudCirculationField;
            } 
            set {
                ETimMudCirculationField = value;
                NotifyPropertyChanged("ETimeMudCirculation");
            }
        }

        private TimeMeasure ETimMudCirculationField; 

        /// <summary>
        /// FlowrateEnd property
        /// </summary>
		[Description("Final displacement pump rate.")]
        [ComponentElement]
		[XmlElement("FlowrateEnd")]
        public VolumePerTimeMeasure FlowrateEnd {
            get {
                return FlowrateEndField;
            } 
            set {
                FlowrateEndField = value;
                NotifyPropertyChanged("FlowrateEnd");
            }
        }

        private VolumePerTimeMeasure FlowrateEndField; 

        /// <summary>
        /// SqueezeObtained property
        /// </summary>
		[Description("Squeeze obtained.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("SqueezeObtained")]
        public Boolean? SqueezeObtained {
            get {
                return SqueezeObtainedField;
            } 
            set {
                SqueezeObtainedField = value;
             if(value!=null) 
                 this.SqueezeObtainedSpecified = true;
                NotifyPropertyChanged("SqueezeObtained");
            }
        }

        private Boolean? SqueezeObtainedField; 

        /// <summary>
        /// SqueezeObtainedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean SqueezeObtainedSpecified {
            get {
                return SqueezeObtainedSpecifiedField;
            } 
            set {
                SqueezeObtainedSpecifiedField = value;
                NotifyPropertyChanged("SqueezeObtainedSpecified");
            }
        }

        private Boolean SqueezeObtainedSpecifiedField; 

        /// <summary>
        /// PresBreakDown property
        /// </summary>
		[Description("Breakdown pressure.")]
        [ComponentElement]
		[XmlElement("PresBreakDown")]
        public PressureMeasure PresBreakDown {
            get {
                return PresBreakDownField;
            } 
            set {
                PresBreakDownField = value;
                NotifyPropertyChanged("PresBreakDown");
            }
        }

        private PressureMeasure PresBreakDownField; 

        /// <summary>
        /// FlowrateBreakDown property
        /// </summary>
		[Description("Breakdown rate.")]
        [ComponentElement]
		[XmlElement("FlowrateBreakDown")]
        public VolumePerTimeMeasure FlowrateBreakDown {
            get {
                return FlowrateBreakDownField;
            } 
            set {
                FlowrateBreakDownField = value;
                NotifyPropertyChanged("FlowrateBreakDown");
            }
        }

        private VolumePerTimeMeasure FlowrateBreakDownField; 

        /// <summary>
        /// PresSqueezeAv property
        /// </summary>
		[Description("Squeeze pressure average.")]
        [ComponentElement]
		[XmlElement("PresSqueezeAv")]
        public PressureMeasure PresSqueezeAverage {
            get {
                return PresSqueezeAvField;
            } 
            set {
                PresSqueezeAvField = value;
                NotifyPropertyChanged("PresSqueezeAverage");
            }
        }

        private PressureMeasure PresSqueezeAvField; 

        /// <summary>
        /// PresSqueezeEnd property
        /// </summary>
		[Description("Squeeze pressure final.")]
        [ComponentElement]
		[XmlElement("PresSqueezeEnd")]
        public PressureMeasure PresSqueezeEnd {
            get {
                return PresSqueezeEndField;
            } 
            set {
                PresSqueezeEndField = value;
                NotifyPropertyChanged("PresSqueezeEnd");
            }
        }

        private PressureMeasure PresSqueezeEndField; 

        /// <summary>
        /// PresSqueezeHeld property
        /// </summary>
		[Description("Squeeze pressure held.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("PresSqueezeHeld")]
        public Boolean? PresSqueezeHeld {
            get {
                return PresSqueezeHeldField;
            } 
            set {
                PresSqueezeHeldField = value;
             if(value!=null) 
                 this.PresSqueezeHeldSpecified = true;
                NotifyPropertyChanged("PresSqueezeHeld");
            }
        }

        private Boolean? PresSqueezeHeldField; 

        /// <summary>
        /// PresSqueezeHeldSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PresSqueezeHeldSpecified {
            get {
                return PresSqueezeHeldSpecifiedField;
            } 
            set {
                PresSqueezeHeldSpecifiedField = value;
                NotifyPropertyChanged("PresSqueezeHeldSpecified");
            }
        }

        private Boolean PresSqueezeHeldSpecifiedField; 

        /// <summary>
        /// PresSqueeze property
        /// </summary>
		[Description("Squeeze pressure left on pipe.")]
        [ComponentElement]
		[XmlElement("PresSqueeze")]
        public PressureMeasure PresSqueeze {
            get {
                return PresSqueezeField;
            } 
            set {
                PresSqueezeField = value;
                NotifyPropertyChanged("PresSqueeze");
            }
        }

        private PressureMeasure PresSqueezeField; 

        /// <summary>
        /// FlowrateSqueezeAv property
        /// </summary>
		[Description("Squeeze job average rate.")]
        [ComponentElement]
		[XmlElement("FlowrateSqueezeAv")]
        public VolumePerTimeMeasure FlowrateSqueezeAverage {
            get {
                return FlowrateSqueezeAvField;
            } 
            set {
                FlowrateSqueezeAvField = value;
                NotifyPropertyChanged("FlowrateSqueezeAverage");
            }
        }

        private VolumePerTimeMeasure FlowrateSqueezeAvField; 

        /// <summary>
        /// FlowrateSqueezeMx property
        /// </summary>
		[Description("Squeeze job maximum rate.")]
        [ComponentElement]
		[XmlElement("FlowrateSqueezeMx")]
        public VolumePerTimeMeasure FlowrateSqueezeMax {
            get {
                return FlowrateSqueezeMxField;
            } 
            set {
                FlowrateSqueezeMxField = value;
                NotifyPropertyChanged("FlowrateSqueezeMax");
            }
        }

        private VolumePerTimeMeasure FlowrateSqueezeMxField; 

        /// <summary>
        /// FlowratePumpStart property
        /// </summary>
		[Description("Pump rate at start of job.")]
        [ComponentElement]
		[XmlElement("FlowratePumpStart")]
        public VolumePerTimeMeasure FlowratePumpStart {
            get {
                return FlowratePumpStartField;
            } 
            set {
                FlowratePumpStartField = value;
                NotifyPropertyChanged("FlowratePumpStart");
            }
        }

        private VolumePerTimeMeasure FlowratePumpStartField; 

        /// <summary>
        /// FlowratePumpEnd property
        /// </summary>
		[Description("Pump rate at end of job.")]
        [ComponentElement]
		[XmlElement("FlowratePumpEnd")]
        public VolumePerTimeMeasure FlowratePumpEnd {
            get {
                return FlowratePumpEndField;
            } 
            set {
                FlowratePumpEndField = value;
                NotifyPropertyChanged("FlowratePumpEnd");
            }
        }

        private VolumePerTimeMeasure FlowratePumpEndField; 

        /// <summary>
        /// VisFunnelMud property
        /// </summary>
		[Description("Funnel viscosity in seconds (in hole at start of job).")]
        [ComponentElement]
		[XmlElement("VisFunnelMud")]
        public TimeMeasure VisFunnelMud {
            get {
                return VisFunnelMudField;
            } 
            set {
                VisFunnelMudField = value;
                NotifyPropertyChanged("VisFunnelMud");
            }
        }

        private TimeMeasure VisFunnelMudField; 

        /// <summary>
        /// PlugBumped property
        /// </summary>
		[Description("Plug bumped? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("PlugBumped")]
        public Boolean? PlugBumped {
            get {
                return PlugBumpedField;
            } 
            set {
                PlugBumpedField = value;
             if(value!=null) 
                 this.PlugBumpedSpecified = true;
                NotifyPropertyChanged("PlugBumped");
            }
        }

        private Boolean? PlugBumpedField; 

        /// <summary>
        /// PlugBumpedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PlugBumpedSpecified {
            get {
                return PlugBumpedSpecifiedField;
            } 
            set {
                PlugBumpedSpecifiedField = value;
                NotifyPropertyChanged("PlugBumpedSpecified");
            }
        }

        private Boolean PlugBumpedSpecifiedField; 

        /// <summary>
        /// PresPriorBump property
        /// </summary>
		[Description("Pressure prior to bumping plug / pressure at end of displacement")]
        [ComponentElement]
		[XmlElement("PresPriorBump")]
        public PressureMeasure PresPriorBump {
            get {
                return PresPriorBumpField;
            } 
            set {
                PresPriorBumpField = value;
                NotifyPropertyChanged("PresPriorBump");
            }
        }

        private PressureMeasure PresPriorBumpField; 

        /// <summary>
        /// FloatHeld property
        /// </summary>
		[Description("Float held?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("FloatHeld")]
        public Boolean? FloatHeld {
            get {
                return FloatHeldField;
            } 
            set {
                FloatHeldField = value;
             if(value!=null) 
                 this.FloatHeldSpecified = true;
                NotifyPropertyChanged("FloatHeld");
            }
        }

        private Boolean? FloatHeldField; 

        /// <summary>
        /// FloatHeldSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean FloatHeldSpecified {
            get {
                return FloatHeldSpecifiedField;
            } 
            set {
                FloatHeldSpecifiedField = value;
                NotifyPropertyChanged("FloatHeldSpecified");
            }
        }

        private Boolean FloatHeldSpecifiedField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of CementStageReport")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementDesignStage xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementDesignStage", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementDesignStage xsd type.")]
    public partial class CementDesignStage : AbstractCementStage, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementStageDesign xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementStageDesign", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementStageDesign xsd type.")]
    public partial class CementStageDesign : AbstractCementStage, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCementJob xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJobDesign))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJobReport))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCementJob", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractCementJob xsd type.")]
    public abstract partial class AbstractCementJob : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CementEngr property
        /// </summary>
		
		[XmlElement("CementEngr")]
        public String CementEngr {
            get {
                return CementEngrField;
            } 
            set {
                CementEngrField = value;
                NotifyPropertyChanged("CementEngr");
            }
        }

        private String CementEngrField; 

        /// <summary>
        /// ETimWaitingOnCement property
        /// </summary>
		[ComponentElement]
		[XmlElement("ETimWaitingOnCement")]
        public TimeMeasure ETimeWaitingOnCement {
            get {
                return ETimWaitingOnCementField;
            } 
            set {
                ETimWaitingOnCementField = value;
                NotifyPropertyChanged("ETimeWaitingOnCement");
            }
        }

        private TimeMeasure ETimWaitingOnCementField; 

        /// <summary>
        /// PlugInterval property
        /// </summary>
		[ComponentElement]
		[XmlElement("PlugInterval")]
        public MdInterval PlugInterval {
            get {
                return PlugIntervalField;
            } 
            set {
                PlugIntervalField = value;
                NotifyPropertyChanged("PlugInterval");
            }
        }

        private MdInterval PlugIntervalField; 

        /// <summary>
        /// MdHole property
        /// </summary>
		[ComponentElement]
		[XmlElement("MdHole")]
        public MeasuredDepthCoord MDHole {
            get {
                return MdHoleField;
            } 
            set {
                MdHoleField = value;
                NotifyPropertyChanged("MDHole");
            }
        }

        private MeasuredDepthCoord MdHoleField; 

        /// <summary>
        /// Contractor property
        /// </summary>
		
		[XmlElement("Contractor")]
        public String Contractor {
            get {
                return ContractorField;
            } 
            set {
                ContractorField = value;
                NotifyPropertyChanged("Contractor");
            }
        }

        private String ContractorField; 

        /// <summary>
        /// RpmPipe property
        /// </summary>
		[ComponentElement]
		[XmlElement("RpmPipe")]
        public AngularVelocityMeasure RpmPipe {
            get {
                return RpmPipeField;
            } 
            set {
                RpmPipeField = value;
                NotifyPropertyChanged("RpmPipe");
            }
        }

        private AngularVelocityMeasure RpmPipeField; 

        /// <summary>
        /// TqInitPipeRot property
        /// </summary>
		[ComponentElement]
		[XmlElement("TqInitPipeRot")]
        public MomentOfForceMeasure TorqueInitPipeRot {
            get {
                return TqInitPipeRotField;
            } 
            set {
                TqInitPipeRotField = value;
                NotifyPropertyChanged("TorqueInitPipeRot");
            }
        }

        private MomentOfForceMeasure TqInitPipeRotField; 

        /// <summary>
        /// TqPipeAv property
        /// </summary>
		[ComponentElement]
		[XmlElement("TqPipeAv")]
        public MomentOfForceMeasure TorquePipeAverage {
            get {
                return TqPipeAvField;
            } 
            set {
                TqPipeAvField = value;
                NotifyPropertyChanged("TorquePipeAverage");
            }
        }

        private MomentOfForceMeasure TqPipeAvField; 

        /// <summary>
        /// TqPipeMx property
        /// </summary>
		[ComponentElement]
		[XmlElement("TqPipeMx")]
        public MomentOfForceMeasure TorquePipeMax {
            get {
                return TqPipeMxField;
            } 
            set {
                TqPipeMxField = value;
                NotifyPropertyChanged("TorquePipeMax");
            }
        }

        private MomentOfForceMeasure TqPipeMxField; 

        /// <summary>
        /// OverPull property
        /// </summary>
		[ComponentElement]
		[XmlElement("OverPull")]
        public ForceMeasure OverPull {
            get {
                return OverPullField;
            } 
            set {
                OverPullField = value;
                NotifyPropertyChanged("OverPull");
            }
        }

        private ForceMeasure OverPullField; 

        /// <summary>
        /// SlackOff property
        /// </summary>
		[ComponentElement]
		[XmlElement("SlackOff")]
        public ForceMeasure SlackOff {
            get {
                return SlackOffField;
            } 
            set {
                SlackOffField = value;
                NotifyPropertyChanged("SlackOff");
            }
        }

        private ForceMeasure SlackOffField; 

        /// <summary>
        /// RpmPipeRecip property
        /// </summary>
		[ComponentElement]
		[XmlElement("RpmPipeRecip")]
        public AngularVelocityMeasure RpmPipeRecip {
            get {
                return RpmPipeRecipField;
            } 
            set {
                RpmPipeRecipField = value;
                NotifyPropertyChanged("RpmPipeRecip");
            }
        }

        private AngularVelocityMeasure RpmPipeRecipField; 

        /// <summary>
        /// LenPipeRecipStroke property
        /// </summary>
		[ComponentElement]
		[XmlElement("LenPipeRecipStroke")]
        public LengthMeasure LenPipeRecipStroke {
            get {
                return LenPipeRecipStrokeField;
            } 
            set {
                LenPipeRecipStrokeField = value;
                NotifyPropertyChanged("LenPipeRecipStroke");
            }
        }

        private LengthMeasure LenPipeRecipStrokeField; 

        /// <summary>
        /// Reciprocating property
        /// </summary>
		
		[XmlElement("Reciprocating")]
        public Boolean? Reciprocating {
            get {
                return ReciprocatingField;
            } 
            set {
                ReciprocatingField = value;
             if(value!=null) 
                 this.ReciprocatingSpecified = true;
                NotifyPropertyChanged("Reciprocating");
            }
        }

        private Boolean? ReciprocatingField; 

        /// <summary>
        /// ReciprocatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ReciprocatingSpecified {
            get {
                return ReciprocatingSpecifiedField;
            } 
            set {
                ReciprocatingSpecifiedField = value;
                NotifyPropertyChanged("ReciprocatingSpecified");
            }
        }

        private Boolean ReciprocatingSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementJobDesign xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementJobDesign", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementJobDesign xsd type.")]
    public partial class CementJobDesign : AbstractCementJob, INotifyPropertyChanged
    {

        /// <summary>
        /// CementDesignStage property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("CementDesignStage")]
        public List<CementStageDesign> CementDesignStage {
            get {
                return CementDesignStageField;
            } 
            set {
                CementDesignStageField = value;
                NotifyPropertyChanged("CementDesignStage");
            }
        }

         [XmlIgnore]
         public bool CementDesignStageSpecified
         {
            get {
             if(CementDesignStageField!=null)
                return CementDesignStageField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CementStageDesign> CementDesignStageField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementJobReport xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementJobReport", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementJobReport xsd type.")]
    public partial class CementJobReport : AbstractCementJob, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimJobEnd property
        /// </summary>
		[Description("Date and time of the End of Cement Job.")]
		[XmlElement("DTimJobEnd")]
        public String DateTimeJobEnd {
            get {
                return DTimJobEndField;
            } 
            set {
                DTimJobEndField = value;
                NotifyPropertyChanged("DateTimeJobEnd");
            }
        }

        private String DTimJobEndField; 

        /// <summary>
        /// DTimJobStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of Cement Job.")]
		[XmlElement("DTimJobStart")]
        public String DateTimeJobStart {
            get {
                return DTimJobStartField;
            } 
            set {
                DTimJobStartField = value;
                NotifyPropertyChanged("DateTimeJobStart");
            }
        }

        private String DTimJobStartField; 

        /// <summary>
        /// DTimPlugSet property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that cement plug was set.")]
		[XmlElement("DTimPlugSet")]
        public String DateTimePlugSet {
            get {
                return DTimPlugSetField;
            } 
            set {
                DTimPlugSetField = value;
                NotifyPropertyChanged("DateTimePlugSet");
            }
        }

        private String DTimPlugSetField; 

        /// <summary>
        /// CementDrillOut property
        /// </summary>
		[Description("Cement drilled out flag. Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("CementDrillOut")]
        public Boolean? CementDrillOut {
            get {
                return CementDrillOutField;
            } 
            set {
                CementDrillOutField = value;
             if(value!=null) 
                 this.CementDrillOutSpecified = true;
                NotifyPropertyChanged("CementDrillOut");
            }
        }

        private Boolean? CementDrillOutField; 

        /// <summary>
        /// CementDrillOutSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CementDrillOutSpecified {
            get {
                return CementDrillOutSpecifiedField;
            } 
            set {
                CementDrillOutSpecifiedField = value;
                NotifyPropertyChanged("CementDrillOutSpecified");
            }
        }

        private Boolean CementDrillOutSpecifiedField; 

        /// <summary>
        /// DTimCementDrillOut property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that cement was drilled out.")]
		[XmlElement("DTimCementDrillOut")]
        public String DateTimeCementDrillOut {
            get {
                return DTimCementDrillOutField;
            } 
            set {
                DTimCementDrillOutField = value;
                NotifyPropertyChanged("DateTimeCementDrillOut");
            }
        }

        private String DTimCementDrillOutField; 

        /// <summary>
        /// DTimSqueeze property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of squeeze.")]
		[XmlElement("DTimSqueeze")]
        public String DateTimeSqueeze {
            get {
                return DTimSqueezeField;
            } 
            set {
                DTimSqueezeField = value;
                NotifyPropertyChanged("DateTimeSqueeze");
            }
        }

        private String DTimSqueezeField; 

        /// <summary>
        /// DTimPipeRotStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Pipe rotation start time.")]
		[XmlElement("DTimPipeRotStart")]
        public String DateTimePipeRotStart {
            get {
                return DTimPipeRotStartField;
            } 
            set {
                DTimPipeRotStartField = value;
                NotifyPropertyChanged("DateTimePipeRotStart");
            }
        }

        private String DTimPipeRotStartField; 

        /// <summary>
        /// DTimPipeRotEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Pipe rotation end time.")]
		[XmlElement("DTimPipeRotEnd")]
        public String DateTimePipeRotEnd {
            get {
                return DTimPipeRotEndField;
            } 
            set {
                DTimPipeRotEndField = value;
                NotifyPropertyChanged("DateTimePipeRotEnd");
            }
        }

        private String DTimPipeRotEndField; 

        /// <summary>
        /// DTimRecipStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time at start of pipe reciprocation.")]
		[XmlElement("DTimRecipStart")]
        public String DateTimeRecipStart {
            get {
                return DTimRecipStartField;
            } 
            set {
                DTimRecipStartField = value;
                NotifyPropertyChanged("DateTimeRecipStart");
            }
        }

        private String DTimRecipStartField; 

        /// <summary>
        /// DTimRecipEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time at end of pipe reciprocation.")]
		[XmlElement("DTimRecipEnd")]
        public String DateTimeRecipEnd {
            get {
                return DTimRecipEndField;
            } 
            set {
                DTimRecipEndField = value;
                NotifyPropertyChanged("DateTimeRecipEnd");
            }
        }

        private String DTimRecipEndField; 

        /// <summary>
        /// DensMeasBy property
        /// </summary>
		[StringLength(64)]
        [Description("Method by which density is measured.")]
		[XmlElement("DensMeasBy")]
        public String DensMeasBy {
            get {
                return DensMeasByField;
            } 
            set {
                DensMeasByField = value;
                NotifyPropertyChanged("DensMeasBy");
            }
        }

        private String DensMeasByField; 

        /// <summary>
        /// CementReportStage property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("CementReportStage")]
        public List<CementStageReport> CementReportStage {
            get {
                return CementReportStageField;
            } 
            set {
                CementReportStageField = value;
                NotifyPropertyChanged("CementReportStage");
            }
        }

         [XmlIgnore]
         public bool CementReportStageSpecified
         {
            get {
             if(CementReportStageField!=null)
                return CementReportStageField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CementStageReport> CementReportStageField; 


    } //here
    }

    /// <summary>
    /// This class represents the WellboreGeometrySection xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_WellboreGeometrySection", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the WellboreGeometrySection xsd type.")]
    public partial class WellboreGeometrySection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Citation property
        /// </summary>
		[Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the WellGeometrySection")]
        [ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// TypeHoleCasing property
        /// </summary>
		[Description("Type of fixed component.")]
		[XmlElement("TypeHoleCasing")]
        public HoleCasingType? TypeHoleCasing {
            get {
                return TypeHoleCasingField;
            } 
            set {
                TypeHoleCasingField = value;
             if(value!=null) 
                 this.TypeHoleCasingSpecified = true;
                NotifyPropertyChanged("TypeHoleCasing");
            }
        }

        private HoleCasingType? TypeHoleCasingField; 

        /// <summary>
        /// TypeHoleCasingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeHoleCasingSpecified {
            get {
                return TypeHoleCasingSpecifiedField;
            } 
            set {
                TypeHoleCasingSpecifiedField = value;
                NotifyPropertyChanged("TypeHoleCasingSpecified");
            }
        }

        private Boolean TypeHoleCasingSpecifiedField; 

        /// <summary>
        /// SectionMdInterval property
        /// </summary>
		[Description("Measured depth interval for this wellbore geometry section.")]
        [ComponentElement]
		[XmlElement("SectionMdInterval")]
        public MdInterval SectionMDInterval {
            get {
                return SectionMdIntervalField;
            } 
            set {
                SectionMdIntervalField = value;
                NotifyPropertyChanged("SectionMDInterval");
            }
        }

        private MdInterval SectionMdIntervalField; 

        /// <summary>
        /// SectionTvdInterval property
        /// </summary>
		[Description("True vertical depth interval for this wellbore geometry section.")]
        [ComponentElement]
		[XmlElement("SectionTvdInterval")]
        public TvdInterval SectionTvdInterval {
            get {
                return SectionTvdIntervalField;
            } 
            set {
                SectionTvdIntervalField = value;
                NotifyPropertyChanged("SectionTvdInterval");
            }
        }

        private TvdInterval SectionTvdIntervalField; 

        /// <summary>
        /// IdSection property
        /// </summary>
		[Description("Inner diameter.")]
        [ComponentElement]
		[XmlElement("IdSection")]
        public LengthMeasure InnerDiameterSection {
            get {
                return IdSectionField;
            } 
            set {
                IdSectionField = value;
                NotifyPropertyChanged("InnerDiameterSection");
            }
        }

        private LengthMeasure IdSectionField; 

        /// <summary>
        /// OdSection property
        /// </summary>
		[Description("Outer diameter - Only for casings and risers.")]
        [ComponentElement]
		[XmlElement("OdSection")]
        public LengthMeasure OuterDiameterSection {
            get {
                return OdSectionField;
            } 
            set {
                OdSectionField = value;
                NotifyPropertyChanged("OuterDiameterSection");
            }
        }

        private LengthMeasure OdSectionField; 

        /// <summary>
        /// WtPerLen property
        /// </summary>
		[Description("Weight per unit length for casing sections.")]
        [ComponentElement]
		[XmlElement("WtPerLen")]
        public MassPerLengthMeasure WeightPerLen {
            get {
                return WtPerLenField;
            } 
            set {
                WtPerLenField = value;
                NotifyPropertyChanged("WeightPerLen");
            }
        }

        private MassPerLengthMeasure WtPerLenField; 

        /// <summary>
        /// Grade property
        /// </summary>
		[StringLength(64)]
        [Description("Material grade for the tubular section.")]
		[XmlElement("Grade")]
        public String Grade {
            get {
                return GradeField;
            } 
            set {
                GradeField = value;
                NotifyPropertyChanged("Grade");
            }
        }

        private String GradeField; 

        /// <summary>
        /// CurveConductor property
        /// </summary>
		[Description("Curved conductor? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("CurveConductor")]
        public Boolean? CurveConductor {
            get {
                return CurveConductorField;
            } 
            set {
                CurveConductorField = value;
             if(value!=null) 
                 this.CurveConductorSpecified = true;
                NotifyPropertyChanged("CurveConductor");
            }
        }

        private Boolean? CurveConductorField; 

        /// <summary>
        /// CurveConductorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CurveConductorSpecified {
            get {
                return CurveConductorSpecifiedField;
            } 
            set {
                CurveConductorSpecifiedField = value;
                NotifyPropertyChanged("CurveConductorSpecified");
            }
        }

        private Boolean CurveConductorSpecifiedField; 

        /// <summary>
        /// DiaDrift property
        /// </summary>
		[Description("The drift diameter is the inside diameter (ID) that the pipe manufacturer guarantees per specifications. Note that the nominal inside diameter is not the same as the drift diameter but is always slightly larger. The drift diameter is used by the well planner to determine what size tools or casing strings can later be run through the casing, whereas the nominal inside diameter is used for fluid volume calculations such as mud circulating times and cement slurry placement calculations. Source: www.glossary.oilfield.slb.com")]
        [ComponentElement]
		[XmlElement("DiaDrift")]
        public LengthMeasure DiaDrift {
            get {
                return DiaDriftField;
            } 
            set {
                DiaDriftField = value;
                NotifyPropertyChanged("DiaDrift");
            }
        }

        private LengthMeasure DiaDriftField; 

        /// <summary>
        /// FactFric property
        /// </summary>
		[Description("Friction factor.")]
		[XmlElement("FactFric")]
        public Double? FactFric {
            get {
                return FactFricField;
            } 
            set {
                FactFricField = value;
             if(value!=null) 
                 this.FactFricSpecified = true;
                NotifyPropertyChanged("FactFric");
            }
        }

        private Double? FactFricField; 

        /// <summary>
        /// FactFricSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean FactFricSpecified {
            get {
                return FactFricSpecifiedField;
            } 
            set {
                FactFricSpecifiedField = value;
                NotifyPropertyChanged("FactFricSpecified");
            }
        }

        private Boolean FactFricSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// BhaRun property
        /// </summary>
		[RecurringElement]
		[XmlElement("BhaRun")]
        public List<DataObjectReference> BhaRun {
            get {
                return BhaRunField;
            } 
            set {
                BhaRunField = value;
                NotifyPropertyChanged("BhaRun");
            }
        }

         [XmlIgnore]
         public bool BhaRunSpecified
         {
            get {
             if(BhaRunField!=null)
                return BhaRunField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DataObjectReference> BhaRunField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier of this WbGeometrySection within the WbGeometry object.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractLogDataContext xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChannelValueContext))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ObjectContext))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IndexRangeContext))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractLogDataContext", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractLogDataContext xsd type.")]
    public abstract partial class AbstractLogDataContext : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ChannelValueContext xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ChannelValueContext", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ChannelValueContext xsd type.")]
    public partial class ChannelValueContext : AbstractLogDataContext, INotifyPropertyChanged
    {

        /// <summary>
        /// ChannelReference property
        /// </summary>
		[ComponentElement]
		[XmlElement("ChannelReference")]
        public DataObjectReference ChannelReference {
            get {
                return ChannelReferenceField;
            } 
            set {
                ChannelReferenceField = value;
                NotifyPropertyChanged("ChannelReference");
            }
        }

        private DataObjectReference ChannelReferenceField; 

        /// <summary>
        /// DataValue property
        /// </summary>
		
		[XmlElement("DataValue")]
        public String DataValue {
            get {
                return DataValueField;
            } 
            set {
                DataValueField = value;
                NotifyPropertyChanged("DataValue");
            }
        }

        private String DataValueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ObjectContext xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ObjectContext", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ObjectContext xsd type.")]
    public partial class ObjectContext : AbstractLogDataContext, INotifyPropertyChanged
    {

        /// <summary>
        /// ObjectReference property
        /// </summary>
		[ComponentElement]
		[XmlElement("ObjectReference")]
        public DataObjectReference ObjectReference {
            get {
                return ObjectReferenceField;
            } 
            set {
                ObjectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private DataObjectReference ObjectReferenceField; 

        /// <summary>
        /// Uid property
        /// </summary>
		
		[XmlElement("Uid")]
        public String Uid {
            get {
                return UidField;
            } 
            set {
                UidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String UidField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IndexRangeContext xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IndexRangeContext", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IndexRangeContext xsd type.")]
    public partial class IndexRangeContext : AbstractLogDataContext, INotifyPropertyChanged
    {

        /// <summary>
        /// StartIndex property
        /// </summary>
		
		[XmlElement("StartIndex")]
        public AbstractIndexValue StartIndex {
            get {
                return StartIndexField;
            } 
            set {
                StartIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private AbstractIndexValue StartIndexField; 

        /// <summary>
        /// EndIndex property
        /// </summary>
		
		[XmlElement("EndIndex")]
        public AbstractIndexValue EndIndex {
            get {
                return EndIndexField;
            } 
            set {
                EndIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private AbstractIndexValue EndIndexField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractIndexValue xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DepthIndexValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PassIndexedDepth))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractIndexValue", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractIndexValue xsd type.")]
    public abstract partial class AbstractIndexValue : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthIndexValue xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthIndexValue", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthIndexValue xsd type.")]
    public partial class DepthIndexValue : AbstractIndexValue, INotifyPropertyChanged
    {

        /// <summary>
        /// Depth property
        /// </summary>
		
		[XmlElement("Depth")]
        public Single? Depth {
            get {
                return DepthField;
            } 
            set {
                DepthField = value;
                NotifyPropertyChanged("Depth");
            }
        }

        private Single? DepthField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeIndexValue xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeIndexValue", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TimeIndexValue xsd type.")]
    public partial class TimeIndexValue : AbstractIndexValue, INotifyPropertyChanged
    {

        /// <summary>
        /// Time property
        /// </summary>
		
		[XmlElement("Time")]
        public String Time {
            get {
                return TimeField;
            } 
            set {
                TimeField = value;
                NotifyPropertyChanged("Time");
            }
        }

        private String TimeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PassIndexedDepth xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PassIndexedDepth", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PassIndexedDepth xsd type.")]
    public partial class PassIndexedDepth : AbstractIndexValue, INotifyPropertyChanged
    {

        /// <summary>
        /// Pass property
        /// </summary>
		
		[XmlElement("Pass")]
        public Int32? Pass {
            get {
                return PassField;
            } 
            set {
                PassField = value;
                NotifyPropertyChanged("Pass");
            }
        }

        private Int32? PassField; 

        /// <summary>
        /// Direction property
        /// </summary>
		
		[XmlElement("Direction")]
        public Int32? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                NotifyPropertyChanged("Direction");
            }
        }

        private Int32? DirectionField; 

        /// <summary>
        /// Depth property
        /// </summary>
		
		[XmlElement("Depth")]
        public Single? Depth {
            get {
                return DepthField;
            } 
            set {
                DepthField = value;
                NotifyPropertyChanged("Depth");
            }
        }

        private Single? DepthField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ChannelData xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ChannelData", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ChannelData xsd type.")]
    public partial class ChannelData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Data property
        /// </summary>
		[Description("The data blob in JSON form. This allows you to embed the bulk data in a single file with the xml, to avoid the issues that arise with splitting the data across multiple files.   BUSINESS RULE: Either this element or the FileUri element must be present")]
		[XmlElement("Data", Type=typeof(XmlCDataSection))]
        public XmlCDataSection Data {
            get {
                return DataField;
            } 
            set {
                DataField = value;
                NotifyPropertyChanged("Data");
            }
        }

        private XmlCDataSection DataField; 

        /// <summary>
        /// FileUri property
        /// </summary>
		[Description("The uri of a file containing the bulkdata. If this field is non-null, then the data field is ignored. For files written to disk, this should normally contain a simple file name in relative URI form. For instance, if an application writes a log file to disk, it might write the xml as abc.xml, and the bulk data abc.avro. In that case the value of this element would be './abc.avro'.   BUSINESS RULE: Either this element or the Data element must be present")]
		[XmlElement("FileUri", DataType="anyURI")]
        public String FileUri {
            get {
                return FileUriField;
            } 
            set {
                FileUriField = value;
                NotifyPropertyChanged("FileUri");
            }
        }

        private String FileUriField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PointMetadata xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PointMetadata", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PointMetadata xsd type.")]
    public partial class PointMetadata : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the point metadata.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// EtpDataType property
        /// </summary>
		[Required]
        [Description("The underlying Etp data type of the point metadata.")]
		[XmlElement("EtpDataType")]
        public EtpDataType? EtpDataType {
            get {
                return EtpDataTypeField;
            } 
            set {
                EtpDataTypeField = value;
                NotifyPropertyChanged("EtpDataType");
            }
        }

        private EtpDataType? EtpDataTypeField; 

        /// <summary>
        /// Description property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Free format description of the point metadata.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthMeasureExt xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthMeasureExt xsd type.")]
    public partial class LengthMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthMeasureExt class.
        /// </summary>
        public LengthMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the LengthMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthMeasureExt(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LogChannelAxis xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LogChannelAxis", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the LogChannelAxis xsd type.")]
    public partial class LogChannelAxis : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// AxisStart property
        /// </summary>
		[Required]
        [Description("Value of the initial entry in the list of axis index values.")]
		[XmlElement("AxisStart")]
        public Double? AxisStart {
            get {
                return AxisStartField;
            } 
            set {
                AxisStartField = value;
                NotifyPropertyChanged("AxisStart");
            }
        }

        private Double? AxisStartField; 

        /// <summary>
        /// AxisSpacing property
        /// </summary>
		[Required]
        [Description("The increment to be used to fill out the list of the log channel axis index values.")]
		[XmlElement("AxisSpacing")]
        public Double? AxisSpacing {
            get {
                return AxisSpacingField;
            } 
            set {
                AxisSpacingField = value;
                NotifyPropertyChanged("AxisSpacing");
            }
        }

        private Double? AxisSpacingField; 

        /// <summary>
        /// AxisCount property
        /// </summary>
		[Required]
        [Description("The count of elements along this axis of the array.")]
		[XmlElement("AxisCount")]
        public Int64? AxisCount {
            get {
                return AxisCountField;
            } 
            set {
                AxisCountField = value;
                NotifyPropertyChanged("AxisCount");
            }
        }

        private Int64? AxisCountField; 

        /// <summary>
        /// AxisName property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the array axis.")]
		[XmlElement("AxisName")]
        public String AxisName {
            get {
                return AxisNameField;
            } 
            set {
                AxisNameField = value;
                NotifyPropertyChanged("AxisName");
            }
        }

        private String AxisNameField; 

        /// <summary>
        /// AxisPropertyKind property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The property type by which the array axis is classified. Like \"measured depth\" or \"elapsed time\".")]
		[XmlElement("AxisPropertyKind")]
        public String AxisPropertyKind {
            get {
                return AxisPropertyKindField;
            } 
            set {
                AxisPropertyKindField = value;
                NotifyPropertyChanged("AxisPropertyKind");
            }
        }

        private String AxisPropertyKindField; 

        /// <summary>
        /// AxisUom property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A string representing the units of measure of the axis values.")]
		[XmlElement("AxisUom")]
        public String AxisUom {
            get {
                return AxisUomField;
            } 
            set {
                AxisUomField = value;
                NotifyPropertyChanged("AxisUom");
            }
        }

        private String AxisUomField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("A unique identifier for an instance of a log channel axis")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ChannelIndex xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ChannelIndex", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ChannelIndex xsd type.")]
    public partial class ChannelIndex : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// IndexType property
        /// </summary>
		[Required]
        [Description("The type of index (time, depth, etc)")]
		[XmlElement("IndexType")]
        public ChannelIndexType? IndexType {
            get {
                return IndexTypeField;
            } 
            set {
                IndexTypeField = value;
                NotifyPropertyChanged("IndexType");
            }
        }

        private ChannelIndexType? IndexTypeField; 

        /// <summary>
        /// Uom property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The units of the index. Must be one of the units allowed for the specified IndexType (i.e. time or distance).")]
		[XmlElement("Uom")]
        public String Uom {
            get {
                return UomField;
            } 
            set {
                UomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String UomField; 

        /// <summary>
        /// Direction property
        /// </summary>
		[Required]
        [Description("The direction of the index, either increasing or decreasing. Index direction may not change within the life of a channel.")]
		[XmlElement("Direction")]
        public IndexDirection? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                NotifyPropertyChanged("Direction");
            }
        }

        private IndexDirection? DirectionField; 

        /// <summary>
        /// Mnemonic property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The mnemonic for the index.")]
		[XmlElement("Mnemonic")]
        public String Mnemonic {
            get {
                return MnemonicField;
            } 
            set {
                MnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private String MnemonicField; 

        /// <summary>
        /// DatumReference property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("For depth indexes, this contains the uid of the datum, in the Channel's Well object, to which all of the index values are referenced.")]
		[XmlElement("DatumReference")]
        public String DatumReference {
            get {
                return DatumReferenceField;
            } 
            set {
                DatumReferenceField = value;
                NotifyPropertyChanged("DatumReference");
            }
        }

        private String DatumReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillingParams xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillingParams", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillingParams xsd type.")]
    public partial class DrillingParams : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ETimOpBit property
        /// </summary>
		[Required]
        [Description("Operating time spent by bit for run.")]
        [ComponentElement]
		[XmlElement("ETimOpBit")]
        public TimeMeasure ETimeOperatingBit {
            get {
                return ETimOpBitField;
            } 
            set {
                ETimOpBitField = value;
                NotifyPropertyChanged("ETimeOperatingBit");
            }
        }

        private TimeMeasure ETimOpBitField; 

        /// <summary>
        /// MdHoleStart property
        /// </summary>
		[Description("Measured depth at start.")]
        [ComponentElement]
		[XmlElement("MdHoleStart")]
        public MeasuredDepthCoord MDHoleStart {
            get {
                return MdHoleStartField;
            } 
            set {
                MdHoleStartField = value;
                NotifyPropertyChanged("MDHoleStart");
            }
        }

        private MeasuredDepthCoord MdHoleStartField; 

        /// <summary>
        /// MdHoleStop property
        /// </summary>
		[Required]
        [Description("Measured depth at stop.")]
        [ComponentElement]
		[XmlElement("MdHoleStop")]
        public MeasuredDepthCoord MDHoleStop {
            get {
                return MdHoleStopField;
            } 
            set {
                MdHoleStopField = value;
                NotifyPropertyChanged("MDHoleStop");
            }
        }

        private MeasuredDepthCoord MdHoleStopField; 

        /// <summary>
        /// Tubular property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the tubular assembly.")]
		[XmlElement("Tubular")]
        public String Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private String TubularField; 

        /// <summary>
        /// HkldRot property
        /// </summary>
		[Description("Hookload - rotating.")]
        [ComponentElement]
		[XmlElement("HkldRot")]
        public ForceMeasure HookloadRot {
            get {
                return HkldRotField;
            } 
            set {
                HkldRotField = value;
                NotifyPropertyChanged("HookloadRot");
            }
        }

        private ForceMeasure HkldRotField; 

        /// <summary>
        /// OverPull property
        /// </summary>
		[Description("hkldUp-hkldRot.")]
        [ComponentElement]
		[XmlElement("OverPull")]
        public ForceMeasure OverPull {
            get {
                return OverPullField;
            } 
            set {
                OverPullField = value;
                NotifyPropertyChanged("OverPull");
            }
        }

        private ForceMeasure OverPullField; 

        /// <summary>
        /// SlackOff property
        /// </summary>
		[Description("hkldRot-hkldDown.")]
        [ComponentElement]
		[XmlElement("SlackOff")]
        public ForceMeasure SlackOff {
            get {
                return SlackOffField;
            } 
            set {
                SlackOffField = value;
                NotifyPropertyChanged("SlackOff");
            }
        }

        private ForceMeasure SlackOffField; 

        /// <summary>
        /// HkldUp property
        /// </summary>
		[Description("Hookload - string moving up.")]
        [ComponentElement]
		[XmlElement("HkldUp")]
        public ForceMeasure HookloadUp {
            get {
                return HkldUpField;
            } 
            set {
                HkldUpField = value;
                NotifyPropertyChanged("HookloadUp");
            }
        }

        private ForceMeasure HkldUpField; 

        /// <summary>
        /// HkldDn property
        /// </summary>
		[Description("Hookload - string moving down.")]
        [ComponentElement]
		[XmlElement("HkldDn")]
        public ForceMeasure HookloadDown {
            get {
                return HkldDnField;
            } 
            set {
                HkldDnField = value;
                NotifyPropertyChanged("HookloadDown");
            }
        }

        private ForceMeasure HkldDnField; 

        /// <summary>
        /// TqOnBotAv property
        /// </summary>
		[Description("Average Torque - on bottom.")]
        [ComponentElement]
		[XmlElement("TqOnBotAv")]
        public MomentOfForceMeasure TorqueOnBotAverage {
            get {
                return TqOnBotAvField;
            } 
            set {
                TqOnBotAvField = value;
                NotifyPropertyChanged("TorqueOnBotAverage");
            }
        }

        private MomentOfForceMeasure TqOnBotAvField; 

        /// <summary>
        /// TqOnBotMx property
        /// </summary>
		[Description("Maximum torque - on bottom.")]
        [ComponentElement]
		[XmlElement("TqOnBotMx")]
        public MomentOfForceMeasure TorqueOnBotMax {
            get {
                return TqOnBotMxField;
            } 
            set {
                TqOnBotMxField = value;
                NotifyPropertyChanged("TorqueOnBotMax");
            }
        }

        private MomentOfForceMeasure TqOnBotMxField; 

        /// <summary>
        /// TqOnBotMn property
        /// </summary>
		[Description("Minimum torque - on bottom.")]
        [ComponentElement]
		[XmlElement("TqOnBotMn")]
        public MomentOfForceMeasure TorqueOnBotMin {
            get {
                return TqOnBotMnField;
            } 
            set {
                TqOnBotMnField = value;
                NotifyPropertyChanged("TorqueOnBotMin");
            }
        }

        private MomentOfForceMeasure TqOnBotMnField; 

        /// <summary>
        /// TqOffBotAv property
        /// </summary>
		[Description("Average torque - off bottom.")]
        [ComponentElement]
		[XmlElement("TqOffBotAv")]
        public MomentOfForceMeasure TorqueOffBotAverage {
            get {
                return TqOffBotAvField;
            } 
            set {
                TqOffBotAvField = value;
                NotifyPropertyChanged("TorqueOffBotAverage");
            }
        }

        private MomentOfForceMeasure TqOffBotAvField; 

        /// <summary>
        /// TqDhAv property
        /// </summary>
		[Description("Average torque - downhole.")]
        [ComponentElement]
		[XmlElement("TqDhAv")]
        public MomentOfForceMeasure TorqueDownholeAverage {
            get {
                return TqDhAvField;
            } 
            set {
                TqDhAvField = value;
                NotifyPropertyChanged("TorqueDownholeAverage");
            }
        }

        private MomentOfForceMeasure TqDhAvField; 

        /// <summary>
        /// WtAboveJar property
        /// </summary>
		[Description("Weight above jars.")]
        [ComponentElement]
		[XmlElement("WtAboveJar")]
        public ForceMeasure WeightAboveJar {
            get {
                return WtAboveJarField;
            } 
            set {
                WtAboveJarField = value;
                NotifyPropertyChanged("WeightAboveJar");
            }
        }

        private ForceMeasure WtAboveJarField; 

        /// <summary>
        /// WtBelowJar property
        /// </summary>
		[Description("Weight below jars.")]
        [ComponentElement]
		[XmlElement("WtBelowJar")]
        public ForceMeasure WeightBelowJar {
            get {
                return WtBelowJarField;
            } 
            set {
                WtBelowJarField = value;
                NotifyPropertyChanged("WeightBelowJar");
            }
        }

        private ForceMeasure WtBelowJarField; 

        /// <summary>
        /// WtMud property
        /// </summary>
		[Description("Mud density.")]
        [ComponentElement]
		[XmlElement("WtMud")]
        public MassPerVolumeMeasure WeightMud {
            get {
                return WtMudField;
            } 
            set {
                WtMudField = value;
                NotifyPropertyChanged("WeightMud");
            }
        }

        private MassPerVolumeMeasure WtMudField; 

        /// <summary>
        /// FlowratePump property
        /// </summary>
		[Description("Pump flow rate.")]
        [ComponentElement]
		[XmlElement("FlowratePump")]
        public VolumePerTimeMeasure FlowratePump {
            get {
                return FlowratePumpField;
            } 
            set {
                FlowratePumpField = value;
                NotifyPropertyChanged("FlowratePump");
            }
        }

        private VolumePerTimeMeasure FlowratePumpField; 

        /// <summary>
        /// PowBit property
        /// </summary>
		[Description("Bit hydraulic.")]
        [ComponentElement]
		[XmlElement("PowBit")]
        public PowerMeasure PowBit {
            get {
                return PowBitField;
            } 
            set {
                PowBitField = value;
                NotifyPropertyChanged("PowBit");
            }
        }

        private PowerMeasure PowBitField; 

        /// <summary>
        /// VelNozzleAv property
        /// </summary>
		[Description("Bit nozzle average velocity.")]
        [ComponentElement]
		[XmlElement("VelNozzleAv")]
        public LengthPerTimeMeasure VelNozzleAverage {
            get {
                return VelNozzleAvField;
            } 
            set {
                VelNozzleAvField = value;
                NotifyPropertyChanged("VelNozzleAverage");
            }
        }

        private LengthPerTimeMeasure VelNozzleAvField; 

        /// <summary>
        /// PresDropBit property
        /// </summary>
		[Description("Pressure drop in bit.")]
        [ComponentElement]
		[XmlElement("PresDropBit")]
        public PressureMeasure PresDropBit {
            get {
                return PresDropBitField;
            } 
            set {
                PresDropBitField = value;
                NotifyPropertyChanged("PresDropBit");
            }
        }

        private PressureMeasure PresDropBitField; 

        /// <summary>
        /// CTimHold property
        /// </summary>
		[Description("Time spent on hold from start of bit run.")]
        [ComponentElement]
		[XmlElement("CTimHold")]
        public TimeMeasure CTimHold {
            get {
                return CTimHoldField;
            } 
            set {
                CTimHoldField = value;
                NotifyPropertyChanged("CTimHold");
            }
        }

        private TimeMeasure CTimHoldField; 

        /// <summary>
        /// CTimSteering property
        /// </summary>
		[Description("Time spent steering from start of bit run.")]
        [ComponentElement]
		[XmlElement("CTimSteering")]
        public TimeMeasure CTimSteering {
            get {
                return CTimSteeringField;
            } 
            set {
                CTimSteeringField = value;
                NotifyPropertyChanged("CTimSteering");
            }
        }

        private TimeMeasure CTimSteeringField; 

        /// <summary>
        /// CTimDrillRot property
        /// </summary>
		[Description("Time spent rotary drilling from start of bit run.")]
        [ComponentElement]
		[XmlElement("CTimDrillRot")]
        public TimeMeasure CTimDrillRot {
            get {
                return CTimDrillRotField;
            } 
            set {
                CTimDrillRotField = value;
                NotifyPropertyChanged("CTimDrillRot");
            }
        }

        private TimeMeasure CTimDrillRotField; 

        /// <summary>
        /// CTimDrillSlid property
        /// </summary>
		[Description("Time spent slide drilling from start of bit run.")]
        [ComponentElement]
		[XmlElement("CTimDrillSlid")]
        public TimeMeasure CTimDrillSlid {
            get {
                return CTimDrillSlidField;
            } 
            set {
                CTimDrillSlidField = value;
                NotifyPropertyChanged("CTimDrillSlid");
            }
        }

        private TimeMeasure CTimDrillSlidField; 

        /// <summary>
        /// CTimCirc property
        /// </summary>
		[Description("Time spent circulating from start of bit run.")]
        [ComponentElement]
		[XmlElement("CTimCirc")]
        public TimeMeasure CTimCirc {
            get {
                return CTimCircField;
            } 
            set {
                CTimCircField = value;
                NotifyPropertyChanged("CTimCirc");
            }
        }

        private TimeMeasure CTimCircField; 

        /// <summary>
        /// CTimReam property
        /// </summary>
		[Description("Time spent reaming from start of bit run.")]
        [ComponentElement]
		[XmlElement("CTimReam")]
        public TimeMeasure CTimReam {
            get {
                return CTimReamField;
            } 
            set {
                CTimReamField = value;
                NotifyPropertyChanged("CTimReam");
            }
        }

        private TimeMeasure CTimReamField; 

        /// <summary>
        /// DistDrillRot property
        /// </summary>
		[Description("Distance drilled - rotating.")]
        [ComponentElement]
		[XmlElement("DistDrillRot")]
        public LengthMeasure DistDrillRot {
            get {
                return DistDrillRotField;
            } 
            set {
                DistDrillRotField = value;
                NotifyPropertyChanged("DistDrillRot");
            }
        }

        private LengthMeasure DistDrillRotField; 

        /// <summary>
        /// DistDrillSlid property
        /// </summary>
		[Description("Distance drilled - sliding")]
        [ComponentElement]
		[XmlElement("DistDrillSlid")]
        public LengthMeasure DistDrillSlid {
            get {
                return DistDrillSlidField;
            } 
            set {
                DistDrillSlidField = value;
                NotifyPropertyChanged("DistDrillSlid");
            }
        }

        private LengthMeasure DistDrillSlidField; 

        /// <summary>
        /// DistReam property
        /// </summary>
		[Description("Distance reamed.")]
        [ComponentElement]
		[XmlElement("DistReam")]
        public LengthMeasure DistReam {
            get {
                return DistReamField;
            } 
            set {
                DistReamField = value;
                NotifyPropertyChanged("DistReam");
            }
        }

        private LengthMeasure DistReamField; 

        /// <summary>
        /// DistHold property
        /// </summary>
		[Description("Distance covered while holding angle with a steerable drilling assembly.")]
        [ComponentElement]
		[XmlElement("DistHold")]
        public LengthMeasure DistHold {
            get {
                return DistHoldField;
            } 
            set {
                DistHoldField = value;
                NotifyPropertyChanged("DistHold");
            }
        }

        private LengthMeasure DistHoldField; 

        /// <summary>
        /// DistSteering property
        /// </summary>
		[Description("Distance covered while actively steering with a steerable drilling assembly.")]
        [ComponentElement]
		[XmlElement("DistSteering")]
        public LengthMeasure DistSteering {
            get {
                return DistSteeringField;
            } 
            set {
                DistSteeringField = value;
                NotifyPropertyChanged("DistSteering");
            }
        }

        private LengthMeasure DistSteeringField; 

        /// <summary>
        /// RpmAv property
        /// </summary>
		[Description("Average turn rate (commonly in rpm) through Interval.")]
        [ComponentElement]
		[XmlElement("RpmAv")]
        public AngularVelocityMeasure RpmAverage {
            get {
                return RpmAvField;
            } 
            set {
                RpmAvField = value;
                NotifyPropertyChanged("RpmAverage");
            }
        }

        private AngularVelocityMeasure RpmAvField; 

        /// <summary>
        /// RpmMx property
        /// </summary>
		[Description("Maximum turn rate (commonly in rpm).")]
        [ComponentElement]
		[XmlElement("RpmMx")]
        public AngularVelocityMeasure RpmMax {
            get {
                return RpmMxField;
            } 
            set {
                RpmMxField = value;
                NotifyPropertyChanged("RpmMax");
            }
        }

        private AngularVelocityMeasure RpmMxField; 

        /// <summary>
        /// RpmMn property
        /// </summary>
		[Description("Minimum turn rate (commonly in rpm).")]
        [ComponentElement]
		[XmlElement("RpmMn")]
        public AngularVelocityMeasure RpmMin {
            get {
                return RpmMnField;
            } 
            set {
                RpmMnField = value;
                NotifyPropertyChanged("RpmMin");
            }
        }

        private AngularVelocityMeasure RpmMnField; 

        /// <summary>
        /// RpmAvDh property
        /// </summary>
		[Description("Average turn rate (commonly in rpm) downhole.")]
        [ComponentElement]
		[XmlElement("RpmAvDh")]
        public AngularVelocityMeasure RpmAverageDownhole {
            get {
                return RpmAvDhField;
            } 
            set {
                RpmAvDhField = value;
                NotifyPropertyChanged("RpmAverageDownhole");
            }
        }

        private AngularVelocityMeasure RpmAvDhField; 

        /// <summary>
        /// RopAv property
        /// </summary>
		[Description("Average rate of penetration through Interval.")]
        [ComponentElement]
		[XmlElement("RopAv")]
        public LengthPerTimeMeasure RopAverage {
            get {
                return RopAvField;
            } 
            set {
                RopAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private LengthPerTimeMeasure RopAvField; 

        /// <summary>
        /// RopMx property
        /// </summary>
		[Description("Maximum rate of penetration through Interval.")]
        [ComponentElement]
		[XmlElement("RopMx")]
        public LengthPerTimeMeasure RopMax {
            get {
                return RopMxField;
            } 
            set {
                RopMxField = value;
                NotifyPropertyChanged("RopMax");
            }
        }

        private LengthPerTimeMeasure RopMxField; 

        /// <summary>
        /// RopMn property
        /// </summary>
		[Description("Minimum rate of penetration through Interval.")]
        [ComponentElement]
		[XmlElement("RopMn")]
        public LengthPerTimeMeasure RopMin {
            get {
                return RopMnField;
            } 
            set {
                RopMnField = value;
                NotifyPropertyChanged("RopMin");
            }
        }

        private LengthPerTimeMeasure RopMnField; 

        /// <summary>
        /// WobAv property
        /// </summary>
		[Description("Surface weight on bit - average through interval.")]
        [ComponentElement]
		[XmlElement("WobAv")]
        public ForceMeasure WobAverage {
            get {
                return WobAvField;
            } 
            set {
                WobAvField = value;
                NotifyPropertyChanged("WobAverage");
            }
        }

        private ForceMeasure WobAvField; 

        /// <summary>
        /// WobMx property
        /// </summary>
		[Description("Weight on bit - maximum.")]
        [ComponentElement]
		[XmlElement("WobMx")]
        public ForceMeasure WobMax {
            get {
                return WobMxField;
            } 
            set {
                WobMxField = value;
                NotifyPropertyChanged("WobMax");
            }
        }

        private ForceMeasure WobMxField; 

        /// <summary>
        /// WobMn property
        /// </summary>
		[Description("Weight on bit - minimum.")]
        [ComponentElement]
		[XmlElement("WobMn")]
        public ForceMeasure WobMin {
            get {
                return WobMnField;
            } 
            set {
                WobMnField = value;
                NotifyPropertyChanged("WobMin");
            }
        }

        private ForceMeasure WobMnField; 

        /// <summary>
        /// WobAvDh property
        /// </summary>
		[Description("Weight on bit - average downhole.")]
        [ComponentElement]
		[XmlElement("WobAvDh")]
        public ForceMeasure WobAverageDownhole {
            get {
                return WobAvDhField;
            } 
            set {
                WobAvDhField = value;
                NotifyPropertyChanged("WobAverageDownhole");
            }
        }

        private ForceMeasure WobAvDhField; 

        /// <summary>
        /// ReasonTrip property
        /// </summary>
		[StringLength(2000)]
        [Description("Reason for trip.")]
		[XmlElement("ReasonTrip")]
        public String ReasonTrip {
            get {
                return ReasonTripField;
            } 
            set {
                ReasonTripField = value;
                NotifyPropertyChanged("ReasonTrip");
            }
        }

        private String ReasonTripField; 

        /// <summary>
        /// ObjectiveBha property
        /// </summary>
		[StringLength(2000)]
        [Description("Objective of bottom hole assembly.")]
		[XmlElement("ObjectiveBha")]
        public String ObjectiveBha {
            get {
                return ObjectiveBhaField;
            } 
            set {
                ObjectiveBhaField = value;
                NotifyPropertyChanged("ObjectiveBha");
            }
        }

        private String ObjectiveBhaField; 

        /// <summary>
        /// AziTop property
        /// </summary>
		[Description("Azimuth at start measured depth.")]
        [ComponentElement]
		[XmlElement("AziTop")]
        public PlaneAngleMeasure AziTop {
            get {
                return AziTopField;
            } 
            set {
                AziTopField = value;
                NotifyPropertyChanged("AziTop");
            }
        }

        private PlaneAngleMeasure AziTopField; 

        /// <summary>
        /// AziBottom property
        /// </summary>
		[Description("Azimuth at stop measured depth.")]
        [ComponentElement]
		[XmlElement("AziBottom")]
        public PlaneAngleMeasure AziBottom {
            get {
                return AziBottomField;
            } 
            set {
                AziBottomField = value;
                NotifyPropertyChanged("AziBottom");
            }
        }

        private PlaneAngleMeasure AziBottomField; 

        /// <summary>
        /// InclStart property
        /// </summary>
		[Description("Inclination at start measured depth.")]
        [ComponentElement]
		[XmlElement("InclStart")]
        public PlaneAngleMeasure InclStart {
            get {
                return InclStartField;
            } 
            set {
                InclStartField = value;
                NotifyPropertyChanged("InclStart");
            }
        }

        private PlaneAngleMeasure InclStartField; 

        /// <summary>
        /// InclMx property
        /// </summary>
		[Description("Maximum inclination.")]
        [ComponentElement]
		[XmlElement("InclMx")]
        public PlaneAngleMeasure InclMax {
            get {
                return InclMxField;
            } 
            set {
                InclMxField = value;
                NotifyPropertyChanged("InclMax");
            }
        }

        private PlaneAngleMeasure InclMxField; 

        /// <summary>
        /// InclMn property
        /// </summary>
		[Description("Minimum inclination.")]
        [ComponentElement]
		[XmlElement("InclMn")]
        public PlaneAngleMeasure InclMin {
            get {
                return InclMnField;
            } 
            set {
                InclMnField = value;
                NotifyPropertyChanged("InclMin");
            }
        }

        private PlaneAngleMeasure InclMnField; 

        /// <summary>
        /// InclStop property
        /// </summary>
		[Description("Inclination at stop measured depth.")]
        [ComponentElement]
		[XmlElement("InclStop")]
        public PlaneAngleMeasure InclStop {
            get {
                return InclStopField;
            } 
            set {
                InclStopField = value;
                NotifyPropertyChanged("InclStop");
            }
        }

        private PlaneAngleMeasure InclStopField; 

        /// <summary>
        /// TempMudDhMx property
        /// </summary>
		[Description("Maximum mud temperature downhole during run.")]
        [ComponentElement]
		[XmlElement("TempMudDhMx")]
        public ThermodynamicTemperatureMeasure TempMudDownholeMax {
            get {
                return TempMudDhMxField;
            } 
            set {
                TempMudDhMxField = value;
                NotifyPropertyChanged("TempMudDownholeMax");
            }
        }

        private ThermodynamicTemperatureMeasure TempMudDhMxField; 

        /// <summary>
        /// PresPumpAv property
        /// </summary>
		[Description("Average pump pressure.")]
        [ComponentElement]
		[XmlElement("PresPumpAv")]
        public PressureMeasure PresPumpAverage {
            get {
                return PresPumpAvField;
            } 
            set {
                PresPumpAvField = value;
                NotifyPropertyChanged("PresPumpAverage");
            }
        }

        private PressureMeasure PresPumpAvField; 

        /// <summary>
        /// FlowrateBit property
        /// </summary>
		[Description("Flow rate at bit.")]
        [ComponentElement]
		[XmlElement("FlowrateBit")]
        public VolumePerTimeMeasure FlowrateBit {
            get {
                return FlowrateBitField;
            } 
            set {
                FlowrateBitField = value;
                NotifyPropertyChanged("FlowrateBit");
            }
        }

        private VolumePerTimeMeasure FlowrateBitField; 

        /// <summary>
        /// MudClass property
        /// </summary>
		[Description("The class of the drilling fluid.")]
		[XmlElement("MudClass")]
        public MudClass? MudClass {
            get {
                return MudClassField;
            } 
            set {
                MudClassField = value;
             if(value!=null) 
                 this.MudClassSpecified = true;
                NotifyPropertyChanged("MudClass");
            }
        }

        private MudClass? MudClassField; 

        /// <summary>
        /// MudClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MudClassSpecified {
            get {
                return MudClassSpecifiedField;
            } 
            set {
                MudClassSpecifiedField = value;
                NotifyPropertyChanged("MudClassSpecified");
            }
        }

        private Boolean MudClassSpecifiedField; 

        /// <summary>
        /// MudSubClass property
        /// </summary>
		[StringLength(40)]
        [Description("Mud Subtype at event occurrence.")]
		[XmlElement("MudSubClass")]
        public String MudSubClass {
            get {
                return MudSubClassField;
            } 
            set {
                MudSubClassField = value;
                NotifyPropertyChanged("MudSubClass");
            }
        }

        private String MudSubClassField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
		[XmlElement("Comments")]
        public String Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String CommentsField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the parameters")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportSurveyStation xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportSurveyStation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportSurveyStation xsd type.")]
    public partial class DrillReportSurveyStation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[Required]
        [RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date at which the directional survey took place.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Required]
        [Description("Measured depth of measurement from the drill datum.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("Vertical depth of the measurements.")]
        [ComponentElement]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// Incl property
        /// </summary>
		[Description("Hole inclination, measured from vertical.")]
        [ComponentElement]
		[XmlElement("Incl")]
        public PlaneAngleMeasure Incl {
            get {
                return InclField;
            } 
            set {
                InclField = value;
                NotifyPropertyChanged("Incl");
            }
        }

        private PlaneAngleMeasure InclField; 

        /// <summary>
        /// Azi property
        /// </summary>
		[Description("Hole azimuth. Corrected to wells azimuth reference.")]
        [ComponentElement]
		[XmlElement("Azi")]
        public PlaneAngleMeasure Azi {
            get {
                return AziField;
            } 
            set {
                AziField = value;
                NotifyPropertyChanged("Azi");
            }
        }

        private PlaneAngleMeasure AziField; 

        /// <summary>
        /// VertSect property
        /// </summary>
		[Description("Distance along vertical section azimuth plane.")]
        [ComponentElement]
		[XmlElement("VertSect")]
        public LengthMeasure VertSect {
            get {
                return VertSectField;
            } 
            set {
                VertSectField = value;
                NotifyPropertyChanged("VertSect");
            }
        }

        private LengthMeasure VertSectField; 

        /// <summary>
        /// Dls property
        /// </summary>
		[Description("Dogleg severity.")]
        [ComponentElement]
		[XmlElement("Dls")]
        public AnglePerLengthMeasure DoglegSeverity {
            get {
                return DlsField;
            } 
            set {
                DlsField = value;
                NotifyPropertyChanged("DoglegSeverity");
            }
        }

        private AnglePerLengthMeasure DlsField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Location property
        /// </summary>
		[RecurringElement]
		[XmlElement("Location")]
        public List<AbstractWellLocation> Location {
            get {
                return LocationField;
            } 
            set {
                LocationField = value;
                NotifyPropertyChanged("Location");
            }
        }

         [XmlIgnore]
         public bool LocationSpecified
         {
            get {
             if(LocationField!=null)
                return LocationField.Count>0?true:false;
             else return false;
            } 
         }
        private List<AbstractWellLocation> LocationField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportSurveyStation")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimestampedCommentString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimestampedCommentString", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TimestampedCommentString xsd type.")]
    public partial class TimestampedCommentString : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimestampedCommentString class.
        /// </summary>
        public TimestampedCommentString() {}

        /// <summary>
        /// Initializes a new instance of the TimestampedCommentString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public TimestampedCommentString(String value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// dTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The timestamp of the time-qualified comment")]
        [XmlAttribute("dTim")]
		
        public String DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String dTimField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public String Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private String ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportPorePressure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportPorePressure", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportPorePressure xsd type.")]
    public partial class DrillReportPorePressure : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ReadingKind property
        /// </summary>
		[Required]
        [Description("Was the reading measured or estimated")]
		[XmlElement("ReadingKind")]
        public ReadingKind? ReadingKind {
            get {
                return ReadingKindField;
            } 
            set {
                ReadingKindField = value;
                NotifyPropertyChanged("ReadingKind");
            }
        }

        private ReadingKind? ReadingKindField; 

        /// <summary>
        /// EquivalentMudWeight property
        /// </summary>
		[Required]
        [Description("The equivalent mud weight value of the pore pressure reading.")]
        [ComponentElement]
		[XmlElement("EquivalentMudWeight")]
        public MassPerVolumeMeasure EquivalentMudWeight {
            get {
                return EquivalentMudWeightField;
            } 
            set {
                EquivalentMudWeightField = value;
                NotifyPropertyChanged("EquivalentMudWeight");
            }
        }

        private MassPerVolumeMeasure EquivalentMudWeightField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time at the reading was made.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("The measured depth where the readings were recorded.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("The true vertical depth where the readings were recorded.")]
        [ComponentElement]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportPorePressure")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ElectricPotentialDifferenceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ElectricPotentialDifferenceMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ElectricPotentialDifferenceMeasure xsd type.")]
    public partial class ElectricPotentialDifferenceMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricPotentialDifferenceMeasure class.
        /// </summary>
        public ElectricPotentialDifferenceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricPotentialDifferenceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricPotentialDifferenceMeasure(Double value, ElectricPotentialDifferenceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ElectricPotentialDifferenceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricPotentialDifferenceUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Fluid xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Fluid", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Fluid xsd type.")]
    public partial class Fluid : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Type property
        /// </summary>
		[StringLength(64)]
        [Description("Description for the type of fluid.")]
		[XmlElement("Type")]
        public String Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String TypeField; 

        /// <summary>
        /// LocationSample property
        /// </summary>
		[StringLength(64)]
        [Description("Sample location.")]
		[XmlElement("LocationSample")]
        public String LocationSample {
            get {
                return LocationSampleField;
            } 
            set {
                LocationSampleField = value;
                NotifyPropertyChanged("LocationSample");
            }
        }

        private String LocationSampleField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The time when fluid readings were recorded.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("The measured depth where the fluid readings were recorded.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("The true vertical depth where the fluid readings were recorded.")]
        [ComponentElement]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// PresBopRating property
        /// </summary>
		[Description("Maximum pressure rating of the blow out preventer.")]
        [ComponentElement]
		[XmlElement("PresBopRating")]
        public PressureMeasure PresBopRating {
            get {
                return PresBopRatingField;
            } 
            set {
                PresBopRatingField = value;
                NotifyPropertyChanged("PresBopRating");
            }
        }

        private PressureMeasure PresBopRatingField; 

        /// <summary>
        /// MudClass property
        /// </summary>
		[Description("The class of the drilling fluid.")]
		[XmlElement("MudClass")]
        public MudClass? MudClass {
            get {
                return MudClassField;
            } 
            set {
                MudClassField = value;
             if(value!=null) 
                 this.MudClassSpecified = true;
                NotifyPropertyChanged("MudClass");
            }
        }

        private MudClass? MudClassField; 

        /// <summary>
        /// MudClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MudClassSpecified {
            get {
                return MudClassSpecifiedField;
            } 
            set {
                MudClassSpecifiedField = value;
                NotifyPropertyChanged("MudClassSpecified");
            }
        }

        private Boolean MudClassSpecifiedField; 

        /// <summary>
        /// Density property
        /// </summary>
		[Description("Fluid density.")]
        [ComponentElement]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// VisFunnel property
        /// </summary>
		[Description("Funnel viscosity in seconds.")]
        [ComponentElement]
		[XmlElement("VisFunnel")]
        public TimeMeasure VisFunnel {
            get {
                return VisFunnelField;
            } 
            set {
                VisFunnelField = value;
                NotifyPropertyChanged("VisFunnel");
            }
        }

        private TimeMeasure VisFunnelField; 

        /// <summary>
        /// TempVis property
        /// </summary>
		[Description("Funnel viscosity temperature.")]
        [ComponentElement]
		[XmlElement("TempVis")]
        public ThermodynamicTemperatureMeasure TempVis {
            get {
                return TempVisField;
            } 
            set {
                TempVisField = value;
                NotifyPropertyChanged("TempVis");
            }
        }

        private ThermodynamicTemperatureMeasure TempVisField; 

        /// <summary>
        /// Pv property
        /// </summary>
		[Description("Plastic viscosity.")]
        [ComponentElement]
		[XmlElement("Pv")]
        public DynamicViscosityMeasure PV {
            get {
                return PvField;
            } 
            set {
                PvField = value;
                NotifyPropertyChanged("PV");
            }
        }

        private DynamicViscosityMeasure PvField; 

        /// <summary>
        /// Yp property
        /// </summary>
		[Description("Yield point (Bingham and Herschel Bulkley models).")]
        [ComponentElement]
		[XmlElement("Yp")]
        public PressureMeasure YP {
            get {
                return YpField;
            } 
            set {
                YpField = value;
                NotifyPropertyChanged("YP");
            }
        }

        private PressureMeasure YpField; 

        /// <summary>
        /// Gel10Sec property
        /// </summary>
		[Description("10 second gels.")]
        [ComponentElement]
		[XmlElement("Gel10Sec")]
        public PressureMeasure Gel10Sec {
            get {
                return Gel10SecField;
            } 
            set {
                Gel10SecField = value;
                NotifyPropertyChanged("Gel10Sec");
            }
        }

        private PressureMeasure Gel10SecField; 

        /// <summary>
        /// Gel10Min property
        /// </summary>
		[Description("10 minute gels.")]
        [ComponentElement]
		[XmlElement("Gel10Min")]
        public PressureMeasure Gel10Min {
            get {
                return Gel10MinField;
            } 
            set {
                Gel10MinField = value;
                NotifyPropertyChanged("Gel10Min");
            }
        }

        private PressureMeasure Gel10MinField; 

        /// <summary>
        /// Gel30Min property
        /// </summary>
		[Description("30 minute gels.")]
        [ComponentElement]
		[XmlElement("Gel30Min")]
        public PressureMeasure Gel30Min {
            get {
                return Gel30MinField;
            } 
            set {
                Gel30MinField = value;
                NotifyPropertyChanged("Gel30Min");
            }
        }

        private PressureMeasure Gel30MinField; 

        /// <summary>
        /// FilterCakeLtlp property
        /// </summary>
		[Description("Filter cake thickness at low (normal) temperature and pressure.")]
        [ComponentElement]
		[XmlElement("FilterCakeLtlp")]
        public LengthMeasure FilterCakeLtlp {
            get {
                return FilterCakeLtlpField;
            } 
            set {
                FilterCakeLtlpField = value;
                NotifyPropertyChanged("FilterCakeLtlp");
            }
        }

        private LengthMeasure FilterCakeLtlpField; 

        /// <summary>
        /// FiltrateLtlp property
        /// </summary>
		[Description("API water loss (low temperature and pressure mud filtrate measurement) (volume per 30min).")]
        [ComponentElement]
		[XmlElement("FiltrateLtlp")]
        public VolumeMeasure FiltrateLtlp {
            get {
                return FiltrateLtlpField;
            } 
            set {
                FiltrateLtlpField = value;
                NotifyPropertyChanged("FiltrateLtlp");
            }
        }

        private VolumeMeasure FiltrateLtlpField; 

        /// <summary>
        /// TempHthp property
        /// </summary>
		[Description("High temperature high pressure (HTHP) temperature.")]
        [ComponentElement]
		[XmlElement("TempHthp")]
        public ThermodynamicTemperatureMeasure TempHthp {
            get {
                return TempHthpField;
            } 
            set {
                TempHthpField = value;
                NotifyPropertyChanged("TempHthp");
            }
        }

        private ThermodynamicTemperatureMeasure TempHthpField; 

        /// <summary>
        /// PresHthp property
        /// </summary>
		[Description("High temperature high pressure (HTHP) pressure.")]
        [ComponentElement]
		[XmlElement("PresHthp")]
        public PressureMeasure PresHthp {
            get {
                return PresHthpField;
            } 
            set {
                PresHthpField = value;
                NotifyPropertyChanged("PresHthp");
            }
        }

        private PressureMeasure PresHthpField; 

        /// <summary>
        /// FiltrateHthp property
        /// </summary>
		[Description("High temperature high pressure (HTHP) filtrate (volume per 30min).")]
        [ComponentElement]
		[XmlElement("FiltrateHthp")]
        public VolumeMeasure FiltrateHthp {
            get {
                return FiltrateHthpField;
            } 
            set {
                FiltrateHthpField = value;
                NotifyPropertyChanged("FiltrateHthp");
            }
        }

        private VolumeMeasure FiltrateHthpField; 

        /// <summary>
        /// FilterCakeHthp property
        /// </summary>
		[Description("High temperature high pressure (HTHP) Filter cake thickness.")]
        [ComponentElement]
		[XmlElement("FilterCakeHthp")]
        public LengthMeasure FilterCakeHthp {
            get {
                return FilterCakeHthpField;
            } 
            set {
                FilterCakeHthpField = value;
                NotifyPropertyChanged("FilterCakeHthp");
            }
        }

        private LengthMeasure FilterCakeHthpField; 

        /// <summary>
        /// SolidsPc property
        /// </summary>
		[Description("Solids percentage from retort (commonly in percent).")]
        [ComponentElement]
		[XmlElement("SolidsPc")]
        public VolumePerVolumeMeasure SolidsPercent {
            get {
                return SolidsPcField;
            } 
            set {
                SolidsPcField = value;
                NotifyPropertyChanged("SolidsPercent");
            }
        }

        private VolumePerVolumeMeasure SolidsPcField; 

        /// <summary>
        /// WaterPc property
        /// </summary>
		[Description("Water content (commonly in percent).")]
        [ComponentElement]
		[XmlElement("WaterPc")]
        public VolumePerVolumeMeasure WaterPercent {
            get {
                return WaterPcField;
            } 
            set {
                WaterPcField = value;
                NotifyPropertyChanged("WaterPercent");
            }
        }

        private VolumePerVolumeMeasure WaterPcField; 

        /// <summary>
        /// OilPc property
        /// </summary>
		[Description("Oil content from retort (commonly in percent).")]
        [ComponentElement]
		[XmlElement("OilPc")]
        public VolumePerVolumeMeasure OilPercent {
            get {
                return OilPcField;
            } 
            set {
                OilPcField = value;
                NotifyPropertyChanged("OilPercent");
            }
        }

        private VolumePerVolumeMeasure OilPcField; 

        /// <summary>
        /// SandPc property
        /// </summary>
		[Description("Sand content (commonly in percent).")]
        [ComponentElement]
		[XmlElement("SandPc")]
        public VolumePerVolumeMeasure SandPercent {
            get {
                return SandPcField;
            } 
            set {
                SandPcField = value;
                NotifyPropertyChanged("SandPercent");
            }
        }

        private VolumePerVolumeMeasure SandPcField; 

        /// <summary>
        /// SolidsLowGravPc property
        /// </summary>
		[Description("Low gravity solids (%).")]
        [ComponentElement]
		[XmlElement("SolidsLowGravPc")]
        public VolumePerVolumeMeasure SolidsLowGravPercent {
            get {
                return SolidsLowGravPcField;
            } 
            set {
                SolidsLowGravPcField = value;
                NotifyPropertyChanged("SolidsLowGravPercent");
            }
        }

        private VolumePerVolumeMeasure SolidsLowGravPcField; 

        /// <summary>
        /// SolidsCalcPc property
        /// </summary>
		[Description("Solids content (calculated) (commonly in percent).")]
        [ComponentElement]
		[XmlElement("SolidsCalcPc")]
        public VolumePerVolumeMeasure SolidsCalcPercent {
            get {
                return SolidsCalcPcField;
            } 
            set {
                SolidsCalcPcField = value;
                NotifyPropertyChanged("SolidsCalcPercent");
            }
        }

        private VolumePerVolumeMeasure SolidsCalcPcField; 

        /// <summary>
        /// BaritePc property
        /// </summary>
		[Description("Barite content (commonly in percent).")]
        [ComponentElement]
		[XmlElement("BaritePc")]
        public VolumePerVolumeMeasure BaritePercent {
            get {
                return BaritePcField;
            } 
            set {
                BaritePcField = value;
                NotifyPropertyChanged("BaritePercent");
            }
        }

        private VolumePerVolumeMeasure BaritePcField; 

        /// <summary>
        /// Lcm property
        /// </summary>
		[Description("Lost circulation material.")]
        [ComponentElement]
		[XmlElement("Lcm")]
        public MassPerVolumeMeasure Lcm {
            get {
                return LcmField;
            } 
            set {
                LcmField = value;
                NotifyPropertyChanged("Lcm");
            }
        }

        private MassPerVolumeMeasure LcmField; 

        /// <summary>
        /// Mbt property
        /// </summary>
		[Description("Cation exchange capacity (CEC) of the mud sample as measured by methylene blue titration (MBT).  NOTE: This is temporarily set to be a GenericMeasure with no unit validation, pending addition of CEC units to the Energistics UoM spec.")]
        [ComponentElement]
		[XmlElement("Mbt")]
        public GenericMeasure Mbt {
            get {
                return MbtField;
            } 
            set {
                MbtField = value;
                NotifyPropertyChanged("Mbt");
            }
        }

        private GenericMeasure MbtField; 

        /// <summary>
        /// Ph property
        /// </summary>
		[Description("Mud pH.")]
		[XmlElement("Ph")]
        public Double? PH {
            get {
                return PhField;
            } 
            set {
                PhField = value;
             if(value!=null) 
                 this.PHSpecified = true;
                NotifyPropertyChanged("PH");
            }
        }

        private Double? PhField; 

        /// <summary>
        /// PhSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PHSpecified {
            get {
                return PhSpecifiedField;
            } 
            set {
                PhSpecifiedField = value;
                NotifyPropertyChanged("PHSpecified");
            }
        }

        private Boolean PhSpecifiedField; 

        /// <summary>
        /// TempPh property
        /// </summary>
		[Description("Mud pH measurement temperature.")]
        [ComponentElement]
		[XmlElement("TempPh")]
        public ThermodynamicTemperatureMeasure TempPH {
            get {
                return TempPhField;
            } 
            set {
                TempPhField = value;
                NotifyPropertyChanged("TempPH");
            }
        }

        private ThermodynamicTemperatureMeasure TempPhField; 

        /// <summary>
        /// Pm property
        /// </summary>
		[Description("Phenolphthalein alkalinity of whole mud.")]
        [ComponentElement]
		[XmlElement("Pm")]
        public VolumeMeasure Pm {
            get {
                return PmField;
            } 
            set {
                PmField = value;
                NotifyPropertyChanged("Pm");
            }
        }

        private VolumeMeasure PmField; 

        /// <summary>
        /// PmFiltrate property
        /// </summary>
		[Description("Phenolphthalein alkalinity of mud filtrate.")]
        [ComponentElement]
		[XmlElement("PmFiltrate")]
        public VolumeMeasure PmFiltrate {
            get {
                return PmFiltrateField;
            } 
            set {
                PmFiltrateField = value;
                NotifyPropertyChanged("PmFiltrate");
            }
        }

        private VolumeMeasure PmFiltrateField; 

        /// <summary>
        /// Mf property
        /// </summary>
		[Description("Methyl orange alkalinity of filtrate.")]
        [ComponentElement]
		[XmlElement("Mf")]
        public VolumeMeasure Mf {
            get {
                return MfField;
            } 
            set {
                MfField = value;
                NotifyPropertyChanged("Mf");
            }
        }

        private VolumeMeasure MfField; 

        /// <summary>
        /// AlkalinityP1 property
        /// </summary>
		[Description("Mud alkalinity P1 from alternate alkalinity method (volume in ml of 0.02N acid  to reach the phenolphthalein endpoint).")]
        [ComponentElement]
		[XmlElement("AlkalinityP1")]
        public VolumeMeasure AlkalinityP1 {
            get {
                return AlkalinityP1Field;
            } 
            set {
                AlkalinityP1Field = value;
                NotifyPropertyChanged("AlkalinityP1");
            }
        }

        private VolumeMeasure AlkalinityP1Field; 

        /// <summary>
        /// AlkalinityP2 property
        /// </summary>
		[Description("Mud alkalinity P2 from alternate alkalinity method (volume in ml of 0.02N acid to titrate the reagent mixture to the phenolphthalein endpoint).")]
        [ComponentElement]
		[XmlElement("AlkalinityP2")]
        public VolumeMeasure AlkalinityP2 {
            get {
                return AlkalinityP2Field;
            } 
            set {
                AlkalinityP2Field = value;
                NotifyPropertyChanged("AlkalinityP2");
            }
        }

        private VolumeMeasure AlkalinityP2Field; 

        /// <summary>
        /// Chloride property
        /// </summary>
		[Description("Chloride content.")]
        [ComponentElement]
		[XmlElement("Chloride")]
        public MassPerVolumeMeasure Chloride {
            get {
                return ChlorideField;
            } 
            set {
                ChlorideField = value;
                NotifyPropertyChanged("Chloride");
            }
        }

        private MassPerVolumeMeasure ChlorideField; 

        /// <summary>
        /// Calcium property
        /// </summary>
		[Description("Calcium content.")]
        [ComponentElement]
		[XmlElement("Calcium")]
        public MassPerVolumeMeasure Calcium {
            get {
                return CalciumField;
            } 
            set {
                CalciumField = value;
                NotifyPropertyChanged("Calcium");
            }
        }

        private MassPerVolumeMeasure CalciumField; 

        /// <summary>
        /// Magnesium property
        /// </summary>
		[Description("Magnesium content.")]
        [ComponentElement]
		[XmlElement("Magnesium")]
        public MassPerVolumeMeasure Magnesium {
            get {
                return MagnesiumField;
            } 
            set {
                MagnesiumField = value;
                NotifyPropertyChanged("Magnesium");
            }
        }

        private MassPerVolumeMeasure MagnesiumField; 

        /// <summary>
        /// Potassium property
        /// </summary>
		[Description("Potassium content.")]
        [ComponentElement]
		[XmlElement("Potassium")]
        public MassPerVolumeMeasure Potassium {
            get {
                return PotassiumField;
            } 
            set {
                PotassiumField = value;
                NotifyPropertyChanged("Potassium");
            }
        }

        private MassPerVolumeMeasure PotassiumField; 

        /// <summary>
        /// BrinePc property
        /// </summary>
		[Description("Brine content (commonly in percent).")]
        [ComponentElement]
		[XmlElement("BrinePc")]
        public VolumePerVolumeMeasure BrinePercent {
            get {
                return BrinePcField;
            } 
            set {
                BrinePcField = value;
                NotifyPropertyChanged("BrinePercent");
            }
        }

        private VolumePerVolumeMeasure BrinePcField; 

        /// <summary>
        /// Lime property
        /// </summary>
		[Description("Lime content.")]
        [ComponentElement]
		[XmlElement("Lime")]
        public MassPerVolumeMeasure Lime {
            get {
                return LimeField;
            } 
            set {
                LimeField = value;
                NotifyPropertyChanged("Lime");
            }
        }

        private MassPerVolumeMeasure LimeField; 

        /// <summary>
        /// ElectStab property
        /// </summary>
		[Description("Measurement of the emulsion stability and oil-wetting capability in oil-based muds.")]
        [ComponentElement]
		[XmlElement("ElectStab")]
        public ElectricPotentialDifferenceMeasure ElectStab {
            get {
                return ElectStabField;
            } 
            set {
                ElectStabField = value;
                NotifyPropertyChanged("ElectStab");
            }
        }

        private ElectricPotentialDifferenceMeasure ElectStabField; 

        /// <summary>
        /// CalciumChloride property
        /// </summary>
		[Description("Calcium chloride content.")]
        [ComponentElement]
		[XmlElement("CalciumChloride")]
        public MassPerVolumeMeasure CalciumChloride {
            get {
                return CalciumChlorideField;
            } 
            set {
                CalciumChlorideField = value;
                NotifyPropertyChanged("CalciumChloride");
            }
        }

        private MassPerVolumeMeasure CalciumChlorideField; 

        /// <summary>
        /// Company property
        /// </summary>
		[StringLength(64)]
        [Description("Name of company.")]
		[XmlElement("Company")]
        public String Company {
            get {
                return CompanyField;
            } 
            set {
                CompanyField = value;
                NotifyPropertyChanged("Company");
            }
        }

        private String CompanyField; 

        /// <summary>
        /// Engineer property
        /// </summary>
		[StringLength(64)]
        [Description("Engineer name")]
		[XmlElement("Engineer")]
        public String Engineer {
            get {
                return EngineerField;
            } 
            set {
                EngineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private String EngineerField; 

        /// <summary>
        /// Asg property
        /// </summary>
		[Description("Average specific gravity of solids.")]
		[XmlElement("Asg")]
        public Double? Asg {
            get {
                return AsgField;
            } 
            set {
                AsgField = value;
             if(value!=null) 
                 this.AsgSpecified = true;
                NotifyPropertyChanged("Asg");
            }
        }

        private Double? AsgField; 

        /// <summary>
        /// AsgSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AsgSpecified {
            get {
                return AsgSpecifiedField;
            } 
            set {
                AsgSpecifiedField = value;
                NotifyPropertyChanged("AsgSpecified");
            }
        }

        private Boolean AsgSpecifiedField; 

        /// <summary>
        /// SolidsHiGravPc property
        /// </summary>
		[Description("Solids high gravity (commonly in percent).")]
        [ComponentElement]
		[XmlElement("SolidsHiGravPc")]
        public VolumePerVolumeMeasure SolidsHiGravPercent {
            get {
                return SolidsHiGravPcField;
            } 
            set {
                SolidsHiGravPcField = value;
                NotifyPropertyChanged("SolidsHiGravPercent");
            }
        }

        private VolumePerVolumeMeasure SolidsHiGravPcField; 

        /// <summary>
        /// Polymer property
        /// </summary>
		[Description("Polymers present in mud system.")]
        [ComponentElement]
		[XmlElement("Polymer")]
        public VolumePerVolumeMeasure Polymer {
            get {
                return PolymerField;
            } 
            set {
                PolymerField = value;
                NotifyPropertyChanged("Polymer");
            }
        }

        private VolumePerVolumeMeasure PolymerField; 

        /// <summary>
        /// PolyType property
        /// </summary>
		[StringLength(64)]
        [Description("Type of polymers present in mud system.")]
		[XmlElement("PolyType")]
        public String PolyType {
            get {
                return PolyTypeField;
            } 
            set {
                PolyTypeField = value;
                NotifyPropertyChanged("PolyType");
            }
        }

        private String PolyTypeField; 

        /// <summary>
        /// SolCorPc property
        /// </summary>
		[Description("Solids corrected for Chloride content (commonly in percent).")]
        [ComponentElement]
		[XmlElement("SolCorPc")]
        public VolumePerVolumeMeasure SolCorPercent {
            get {
                return SolCorPcField;
            } 
            set {
                SolCorPcField = value;
                NotifyPropertyChanged("SolCorPercent");
            }
        }

        private VolumePerVolumeMeasure SolCorPcField; 

        /// <summary>
        /// OilCtg property
        /// </summary>
		[Description("Oil on Cuttings.")]
        [ComponentElement]
		[XmlElement("OilCtg")]
        public MassPerMassMeasure OilCtg {
            get {
                return OilCtgField;
            } 
            set {
                OilCtgField = value;
                NotifyPropertyChanged("OilCtg");
            }
        }

        private MassPerMassMeasure OilCtgField; 

        /// <summary>
        /// HardnessCa property
        /// </summary>
		[Description("Total calcium hardness.")]
        [ComponentElement]
		[XmlElement("HardnessCa")]
        public MassPerMassMeasure HardnessCA {
            get {
                return HardnessCaField;
            } 
            set {
                HardnessCaField = value;
                NotifyPropertyChanged("HardnessCA");
            }
        }

        private MassPerMassMeasure HardnessCaField; 

        /// <summary>
        /// Sulfide property
        /// </summary>
		[Description("Sulfide content.")]
        [ComponentElement]
		[XmlElement("Sulfide")]
        public MassPerVolumeMeasure Sulfide {
            get {
                return SulfideField;
            } 
            set {
                SulfideField = value;
                NotifyPropertyChanged("Sulfide");
            }
        }

        private MassPerVolumeMeasure SulfideField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
		[XmlElement("Comments")]
        public String Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String CommentsField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Rheometer property
        /// </summary>
		[RecurringElement]
		[XmlElement("Rheometer")]
        public List<Rheometer> Rheometer {
            get {
                return RheometerField;
            } 
            set {
                RheometerField = value;
                NotifyPropertyChanged("Rheometer");
            }
        }

         [XmlIgnore]
         public bool RheometerSpecified
         {
            get {
             if(RheometerField!=null)
                return RheometerField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Rheometer> RheometerField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Fluid")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportStatusInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportStatusInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportStatusInfo xsd type.")]
    public partial class DrillReportStatusInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("the date and time that for which the well status is reported.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("Wellbore measured depth at the end of the report period.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("Wellbore true vertical depth at the end of the report.")]
        [ComponentElement]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// MdPlugTop property
        /// </summary>
		[Description("The measured plug back depth.")]
        [ComponentElement]
		[XmlElement("MdPlugTop")]
        public MeasuredDepthCoord MDPlugTop {
            get {
                return MdPlugTopField;
            } 
            set {
                MdPlugTopField = value;
                NotifyPropertyChanged("MDPlugTop");
            }
        }

        private MeasuredDepthCoord MdPlugTopField; 

        /// <summary>
        /// DiaHole property
        /// </summary>
		[Description("Hole nominal inside diameter.")]
        [ComponentElement]
		[XmlElement("DiaHole")]
        public LengthMeasure DiaHole {
            get {
                return DiaHoleField;
            } 
            set {
                DiaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure DiaHoleField; 

        /// <summary>
        /// MdDiaHoleStart property
        /// </summary>
		[Description("The measured depth to the start of the current hole diameter.")]
        [ComponentElement]
		[XmlElement("MdDiaHoleStart")]
        public MeasuredDepthCoord MDDiaHoleStart {
            get {
                return MdDiaHoleStartField;
            } 
            set {
                MdDiaHoleStartField = value;
                NotifyPropertyChanged("MDDiaHoleStart");
            }
        }

        private MeasuredDepthCoord MdDiaHoleStartField; 

        /// <summary>
        /// DiaPilot property
        /// </summary>
		[Description("Pilot hole nominal inside diameter at reporting time.")]
        [ComponentElement]
		[XmlElement("DiaPilot")]
        public LengthMeasure DiaPilot {
            get {
                return DiaPilotField;
            } 
            set {
                DiaPilotField = value;
                NotifyPropertyChanged("DiaPilot");
            }
        }

        private LengthMeasure DiaPilotField; 

        /// <summary>
        /// MdDiaPilotPlan property
        /// </summary>
		[Description("The planned measured depth of the pilot hole.")]
        [ComponentElement]
		[XmlElement("MdDiaPilotPlan")]
        public MeasuredDepthCoord MDDiaPilotPlan {
            get {
                return MdDiaPilotPlanField;
            } 
            set {
                MdDiaPilotPlanField = value;
                NotifyPropertyChanged("MDDiaPilotPlan");
            }
        }

        private MeasuredDepthCoord MdDiaPilotPlanField; 

        /// <summary>
        /// TvdDiaPilotPlan property
        /// </summary>
		[Description("The planned true vertical depth of the pilot hole.")]
        [ComponentElement]
		[XmlElement("TvdDiaPilotPlan")]
        public WellVerticalDepthCoord TvdDiaPilotPlan {
            get {
                return TvdDiaPilotPlanField;
            } 
            set {
                TvdDiaPilotPlanField = value;
                NotifyPropertyChanged("TvdDiaPilotPlan");
            }
        }

        private WellVerticalDepthCoord TvdDiaPilotPlanField; 

        /// <summary>
        /// TypeWellbore property
        /// </summary>
		[Description("Type of wellbore.")]
		[XmlElement("TypeWellbore")]
        public WellboreType? TypeWellbore {
            get {
                return TypeWellboreField;
            } 
            set {
                TypeWellboreField = value;
             if(value!=null) 
                 this.TypeWellboreSpecified = true;
                NotifyPropertyChanged("TypeWellbore");
            }
        }

        private WellboreType? TypeWellboreField; 

        /// <summary>
        /// TypeWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeWellboreSpecified {
            get {
                return TypeWellboreSpecifiedField;
            } 
            set {
                TypeWellboreSpecifiedField = value;
                NotifyPropertyChanged("TypeWellboreSpecified");
            }
        }

        private Boolean TypeWellboreSpecifiedField; 

        /// <summary>
        /// MdKickoff property
        /// </summary>
		[Description("Measured depth to the kickoff point of the wellbore.")]
        [ComponentElement]
		[XmlElement("MdKickoff")]
        public MeasuredDepthCoord MDKickoff {
            get {
                return MdKickoffField;
            } 
            set {
                MdKickoffField = value;
                NotifyPropertyChanged("MDKickoff");
            }
        }

        private MeasuredDepthCoord MdKickoffField; 

        /// <summary>
        /// TvdKickoff property
        /// </summary>
		[Description("True vertical depth to the kickoff point of the wellbore.")]
        [ComponentElement]
		[XmlElement("TvdKickoff")]
        public MeasuredDepthCoord TvdKickoff {
            get {
                return TvdKickoffField;
            } 
            set {
                TvdKickoffField = value;
                NotifyPropertyChanged("TvdKickoff");
            }
        }

        private MeasuredDepthCoord TvdKickoffField; 

        /// <summary>
        /// StrengthForm property
        /// </summary>
		[Description("The measured formation strength. This should be the final measurement before the end of the report period.")]
        [ComponentElement]
		[XmlElement("StrengthForm")]
        public MassPerVolumeMeasure StrengthForm {
            get {
                return StrengthFormField;
            } 
            set {
                StrengthFormField = value;
                NotifyPropertyChanged("StrengthForm");
            }
        }

        private MassPerVolumeMeasure StrengthFormField; 

        /// <summary>
        /// MdStrengthForm property
        /// </summary>
		[Description("The measured depth of the formation strength measuement.")]
        [ComponentElement]
		[XmlElement("MdStrengthForm")]
        public MeasuredDepthCoord MDStrengthForm {
            get {
                return MdStrengthFormField;
            } 
            set {
                MdStrengthFormField = value;
                NotifyPropertyChanged("MDStrengthForm");
            }
        }

        private MeasuredDepthCoord MdStrengthFormField; 

        /// <summary>
        /// TvdStrengthForm property
        /// </summary>
		[Description("The true vertical depth of the formation strength measuement.")]
        [ComponentElement]
		[XmlElement("TvdStrengthForm")]
        public WellVerticalDepthCoord TvdStrengthForm {
            get {
                return TvdStrengthFormField;
            } 
            set {
                TvdStrengthFormField = value;
                NotifyPropertyChanged("TvdStrengthForm");
            }
        }

        private WellVerticalDepthCoord TvdStrengthFormField; 

        /// <summary>
        /// DiaCsgLast property
        /// </summary>
		[Description("Diameter of last casing.")]
        [ComponentElement]
		[XmlElement("DiaCsgLast")]
        public LengthMeasure DiaCsgLast {
            get {
                return DiaCsgLastField;
            } 
            set {
                DiaCsgLastField = value;
                NotifyPropertyChanged("DiaCsgLast");
            }
        }

        private LengthMeasure DiaCsgLastField; 

        /// <summary>
        /// MdCsgLast property
        /// </summary>
		[Description("Measured depth of last casing.")]
        [ComponentElement]
		[XmlElement("MdCsgLast")]
        public MeasuredDepthCoord MDCsgLast {
            get {
                return MdCsgLastField;
            } 
            set {
                MdCsgLastField = value;
                NotifyPropertyChanged("MDCsgLast");
            }
        }

        private MeasuredDepthCoord MdCsgLastField; 

        /// <summary>
        /// TvdCsgLast property
        /// </summary>
		[Description("True vertical depth of last casing.")]
        [ComponentElement]
		[XmlElement("TvdCsgLast")]
        public WellVerticalDepthCoord TvdCsgLast {
            get {
                return TvdCsgLastField;
            } 
            set {
                TvdCsgLastField = value;
                NotifyPropertyChanged("TvdCsgLast");
            }
        }

        private WellVerticalDepthCoord TvdCsgLastField; 

        /// <summary>
        /// PresTestType property
        /// </summary>
		[Description("The type of pressure test that was run during this reporting period.")]
		[XmlElement("PresTestType")]
        public PresTestType? PresTestType {
            get {
                return PresTestTypeField;
            } 
            set {
                PresTestTypeField = value;
             if(value!=null) 
                 this.PresTestTypeSpecified = true;
                NotifyPropertyChanged("PresTestType");
            }
        }

        private PresTestType? PresTestTypeField; 

        /// <summary>
        /// PresTestTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PresTestTypeSpecified {
            get {
                return PresTestTypeSpecifiedField;
            } 
            set {
                PresTestTypeSpecifiedField = value;
                NotifyPropertyChanged("PresTestTypeSpecified");
            }
        }

        private Boolean PresTestTypeSpecifiedField; 

        /// <summary>
        /// MdPlanned property
        /// </summary>
		[Description("Measured depth of plan for this day number (report period).")]
        [ComponentElement]
		[XmlElement("MdPlanned")]
        public MeasuredDepthCoord MDPlanned {
            get {
                return MdPlannedField;
            } 
            set {
                MdPlannedField = value;
                NotifyPropertyChanged("MDPlanned");
            }
        }

        private MeasuredDepthCoord MdPlannedField; 

        /// <summary>
        /// DistDrill property
        /// </summary>
		[Description("Distance drilled during this reporting period.   This should be measured along the centerline of the wellbore.")]
        [ComponentElement]
		[XmlElement("DistDrill")]
        public LengthMeasure DistDrill {
            get {
                return DistDrillField;
            } 
            set {
                DistDrillField = value;
                NotifyPropertyChanged("DistDrill");
            }
        }

        private LengthMeasure DistDrillField; 

        /// <summary>
        /// Sum24Hr property
        /// </summary>
		[StringLength(2000)]
        [Description("A summary that sumarizes the activities performed  and the status of the ongoing activities from the reporting period.")]
		[XmlElement("Sum24Hr")]
        public String Sum24Hr {
            get {
                return Sum24HrField;
            } 
            set {
                Sum24HrField = value;
                NotifyPropertyChanged("Sum24Hr");
            }
        }

        private String Sum24HrField; 

        /// <summary>
        /// Forecast24Hr property
        /// </summary>
		[StringLength(2000)]
        [Description("A summary that sumarizes the planned activities the next reporting period.")]
		[XmlElement("Forecast24Hr")]
        public String Forecast24Hr {
            get {
                return Forecast24HrField;
            } 
            set {
                Forecast24HrField = value;
                NotifyPropertyChanged("Forecast24Hr");
            }
        }

        private String Forecast24HrField; 

        /// <summary>
        /// RopCurrent property
        /// </summary>
		[Description("Rate of penetration at the end of the reporting period.")]
        [ComponentElement]
		[XmlElement("RopCurrent")]
        public LengthPerTimeMeasure RopCurrent {
            get {
                return RopCurrentField;
            } 
            set {
                RopCurrentField = value;
                NotifyPropertyChanged("RopCurrent");
            }
        }

        private LengthPerTimeMeasure RopCurrentField; 

        /// <summary>
        /// Rig property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the rig utilized in this reporting period.")]
		[XmlElement("Rig")]
        public String Rig {
            get {
                return RigField;
            } 
            set {
                RigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private String RigField; 

        /// <summary>
        /// ETimStart property
        /// </summary>
		[Description("Time from start of Operations (commonly in days).")]
        [ComponentElement]
		[XmlElement("ETimStart")]
        public TimeMeasure ETimeStart {
            get {
                return ETimStartField;
            } 
            set {
                ETimStartField = value;
                NotifyPropertyChanged("ETimeStart");
            }
        }

        private TimeMeasure ETimStartField; 

        /// <summary>
        /// ETimSpud property
        /// </summary>
		[Description("Time since bit broke ground (commonly in days).")]
        [ComponentElement]
		[XmlElement("ETimSpud")]
        public TimeMeasure ETimeSpud {
            get {
                return ETimSpudField;
            } 
            set {
                ETimSpudField = value;
                NotifyPropertyChanged("ETimeSpud");
            }
        }

        private TimeMeasure ETimSpudField; 

        /// <summary>
        /// ETimLoc property
        /// </summary>
		[Description("Time rig on location (commonly in days).")]
        [ComponentElement]
		[XmlElement("ETimLoc")]
        public TimeMeasure ETimeLoc {
            get {
                return ETimLocField;
            } 
            set {
                ETimLocField = value;
                NotifyPropertyChanged("ETimeLoc");
            }
        }

        private TimeMeasure ETimLocField; 

        /// <summary>
        /// ETimDrill property
        /// </summary>
		[Description("Drilling time.")]
        [ComponentElement]
		[XmlElement("ETimDrill")]
        public TimeMeasure ETimeDrill {
            get {
                return ETimDrillField;
            } 
            set {
                ETimDrillField = value;
                NotifyPropertyChanged("ETimeDrill");
            }
        }

        private TimeMeasure ETimDrillField; 

        /// <summary>
        /// RopAv property
        /// </summary>
		[Description("Average Rate of Penetration through Interval.")]
        [ComponentElement]
		[XmlElement("RopAv")]
        public LengthPerTimeMeasure RopAverage {
            get {
                return RopAvField;
            } 
            set {
                RopAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private LengthPerTimeMeasure RopAvField; 

        /// <summary>
        /// Supervisor property
        /// </summary>
		[StringLength(64)]
        [Description("Name of operator rig supervisor.")]
		[XmlElement("Supervisor")]
        public String Supervisor {
            get {
                return SupervisorField;
            } 
            set {
                SupervisorField = value;
                NotifyPropertyChanged("Supervisor");
            }
        }

        private String SupervisorField; 

        /// <summary>
        /// Engineer property
        /// </summary>
		[StringLength(64)]
        [Description("Nae of Engineer.")]
		[XmlElement("Engineer")]
        public String Engineer {
            get {
                return EngineerField;
            } 
            set {
                EngineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private String EngineerField; 

        /// <summary>
        /// Geologist property
        /// </summary>
		[StringLength(64)]
        [Description("Name of operator wellsite geologist.")]
		[XmlElement("Geologist")]
        public String Geologist {
            get {
                return GeologistField;
            } 
            set {
                GeologistField = value;
                NotifyPropertyChanged("Geologist");
            }
        }

        private String GeologistField; 

        /// <summary>
        /// ETimDrillRot property
        /// </summary>
		[Description("Time spent rotary drilling for report interval.")]
        [ComponentElement]
		[XmlElement("ETimDrillRot")]
        public TimeMeasure ETimeDrillRot {
            get {
                return ETimDrillRotField;
            } 
            set {
                ETimDrillRotField = value;
                NotifyPropertyChanged("ETimeDrillRot");
            }
        }

        private TimeMeasure ETimDrillRotField; 

        /// <summary>
        /// ETimDrillSlid property
        /// </summary>
		[Description("Time spent slide drilling from start of bit run.")]
        [ComponentElement]
		[XmlElement("ETimDrillSlid")]
        public TimeMeasure ETimeDrillSlid {
            get {
                return ETimDrillSlidField;
            } 
            set {
                ETimDrillSlidField = value;
                NotifyPropertyChanged("ETimeDrillSlid");
            }
        }

        private TimeMeasure ETimDrillSlidField; 

        /// <summary>
        /// ETimCirc property
        /// </summary>
		[Description("Time spent circulating from start of bit run.")]
        [ComponentElement]
		[XmlElement("ETimCirc")]
        public TimeMeasure ETimeCirc {
            get {
                return ETimCircField;
            } 
            set {
                ETimCircField = value;
                NotifyPropertyChanged("ETimeCirc");
            }
        }

        private TimeMeasure ETimCircField; 

        /// <summary>
        /// ETimReam property
        /// </summary>
		[Description("Time spent reaming from start of bit run.")]
        [ComponentElement]
		[XmlElement("ETimReam")]
        public TimeMeasure ETimeReam {
            get {
                return ETimReamField;
            } 
            set {
                ETimReamField = value;
                NotifyPropertyChanged("ETimeReam");
            }
        }

        private TimeMeasure ETimReamField; 

        /// <summary>
        /// ETimHold property
        /// </summary>
		[Description("Time spent with no DD work (commonly in hours).")]
        [ComponentElement]
		[XmlElement("ETimHold")]
        public TimeMeasure ETimeHold {
            get {
                return ETimHoldField;
            } 
            set {
                ETimHoldField = value;
                NotifyPropertyChanged("ETimeHold");
            }
        }

        private TimeMeasure ETimHoldField; 

        /// <summary>
        /// ETimSteering property
        /// </summary>
		[Description("Time spent steering bottom hole assembly (commonly in hours).")]
        [ComponentElement]
		[XmlElement("ETimSteering")]
        public TimeMeasure ETimeSteering {
            get {
                return ETimSteeringField;
            } 
            set {
                ETimSteeringField = value;
                NotifyPropertyChanged("ETimeSteering");
            }
        }

        private TimeMeasure ETimSteeringField; 

        /// <summary>
        /// DistDrillRot property
        /// </summary>
		[Description("Distance drilled - rotating.")]
        [ComponentElement]
		[XmlElement("DistDrillRot")]
        public LengthMeasure DistDrillRot {
            get {
                return DistDrillRotField;
            } 
            set {
                DistDrillRotField = value;
                NotifyPropertyChanged("DistDrillRot");
            }
        }

        private LengthMeasure DistDrillRotField; 

        /// <summary>
        /// DistDrillSlid property
        /// </summary>
		[Description("Distance drilled - sliding.")]
        [ComponentElement]
		[XmlElement("DistDrillSlid")]
        public LengthMeasure DistDrillSlid {
            get {
                return DistDrillSlidField;
            } 
            set {
                DistDrillSlidField = value;
                NotifyPropertyChanged("DistDrillSlid");
            }
        }

        private LengthMeasure DistDrillSlidField; 

        /// <summary>
        /// DistReam property
        /// </summary>
		[Description("Distance reamed.")]
        [ComponentElement]
		[XmlElement("DistReam")]
        public LengthMeasure DistReam {
            get {
                return DistReamField;
            } 
            set {
                DistReamField = value;
                NotifyPropertyChanged("DistReam");
            }
        }

        private LengthMeasure DistReamField; 

        /// <summary>
        /// DistHold property
        /// </summary>
		[Description("Distance covered while holding angle with a steerable drilling assembly.")]
        [ComponentElement]
		[XmlElement("DistHold")]
        public LengthMeasure DistHold {
            get {
                return DistHoldField;
            } 
            set {
                DistHoldField = value;
                NotifyPropertyChanged("DistHold");
            }
        }

        private LengthMeasure DistHoldField; 

        /// <summary>
        /// DistSteering property
        /// </summary>
		[Description("Distance covered while actively steering with a steerable drilling assembly.")]
        [ComponentElement]
		[XmlElement("DistSteering")]
        public LengthMeasure DistSteering {
            get {
                return DistSteeringField;
            } 
            set {
                DistSteeringField = value;
                NotifyPropertyChanged("DistSteering");
            }
        }

        private LengthMeasure DistSteeringField; 

        /// <summary>
        /// NumPob property
        /// </summary>
		[Description("Total number of personnel on board.")]
		[XmlElement("NumPob")]
        public Int32? NumPob {
            get {
                return NumPobField;
            } 
            set {
                NumPobField = value;
             if(value!=null) 
                 this.NumPobSpecified = true;
                NotifyPropertyChanged("NumPob");
            }
        }

        private Int32? NumPobField; 

        /// <summary>
        /// NumPobSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumPobSpecified {
            get {
                return NumPobSpecifiedField;
            } 
            set {
                NumPobSpecifiedField = value;
                NotifyPropertyChanged("NumPobSpecified");
            }
        }

        private Boolean NumPobSpecifiedField; 

        /// <summary>
        /// NumContract property
        /// </summary>
		[Description("Number of contractor personnel on board.")]
		[XmlElement("NumContract")]
        public Int32? NumContract {
            get {
                return NumContractField;
            } 
            set {
                NumContractField = value;
             if(value!=null) 
                 this.NumContractSpecified = true;
                NotifyPropertyChanged("NumContract");
            }
        }

        private Int32? NumContractField; 

        /// <summary>
        /// NumContractSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumContractSpecified {
            get {
                return NumContractSpecifiedField;
            } 
            set {
                NumContractSpecifiedField = value;
                NotifyPropertyChanged("NumContractSpecified");
            }
        }

        private Boolean NumContractSpecifiedField; 

        /// <summary>
        /// NumOperator property
        /// </summary>
		[Description("Number of Operator personnel on board.")]
		[XmlElement("NumOperator")]
        public Int32? NumOperator {
            get {
                return NumOperatorField;
            } 
            set {
                NumOperatorField = value;
             if(value!=null) 
                 this.NumOperatorSpecified = true;
                NotifyPropertyChanged("NumOperator");
            }
        }

        private Int32? NumOperatorField; 

        /// <summary>
        /// NumOperatorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumOperatorSpecified {
            get {
                return NumOperatorSpecifiedField;
            } 
            set {
                NumOperatorSpecifiedField = value;
                NotifyPropertyChanged("NumOperatorSpecified");
            }
        }

        private Boolean NumOperatorSpecifiedField; 

        /// <summary>
        /// NumService property
        /// </summary>
		[Description("Number of service company personnel on board.")]
		[XmlElement("NumService")]
        public Int32? NumService {
            get {
                return NumServiceField;
            } 
            set {
                NumServiceField = value;
             if(value!=null) 
                 this.NumServiceSpecified = true;
                NotifyPropertyChanged("NumService");
            }
        }

        private Int32? NumServiceField; 

        /// <summary>
        /// NumServiceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumServiceSpecified {
            get {
                return NumServiceSpecifiedField;
            } 
            set {
                NumServiceSpecifiedField = value;
                NotifyPropertyChanged("NumServiceSpecified");
            }
        }

        private Boolean NumServiceSpecifiedField; 

        /// <summary>
        /// NumAFE property
        /// </summary>
		[StringLength(64)]
        [Description("AFE (authorization for expenditure) number that this cost item applies to.")]
		[XmlElement("NumAFE")]
        public String NumAFE {
            get {
                return NumAFEField;
            } 
            set {
                NumAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private String NumAFEField; 

        /// <summary>
        /// ConditionHole property
        /// </summary>
		[StringLength(64)]
        [Description("Hole condition description.")]
		[XmlElement("ConditionHole")]
        public String ConditionHole {
            get {
                return ConditionHoleField;
            } 
            set {
                ConditionHoleField = value;
                NotifyPropertyChanged("ConditionHole");
            }
        }

        private String ConditionHoleField; 

        /// <summary>
        /// TvdLot property
        /// </summary>
		[Description("True vertical depth of leak off test point.")]
        [ComponentElement]
		[XmlElement("TvdLot")]
        public WellVerticalDepthCoord TvdLot {
            get {
                return TvdLotField;
            } 
            set {
                TvdLotField = value;
                NotifyPropertyChanged("TvdLot");
            }
        }

        private WellVerticalDepthCoord TvdLotField; 

        /// <summary>
        /// PresLotEmw property
        /// </summary>
		[Description("Leak off test equivalent mud weight.")]
        [ComponentElement]
		[XmlElement("PresLotEmw")]
        public MassPerVolumeMeasure PresLotEmw {
            get {
                return PresLotEmwField;
            } 
            set {
                PresLotEmwField = value;
                NotifyPropertyChanged("PresLotEmw");
            }
        }

        private MassPerVolumeMeasure PresLotEmwField; 

        /// <summary>
        /// PresKickTol property
        /// </summary>
		[Description("Kick tolerance pressure.")]
        [ComponentElement]
		[XmlElement("PresKickTol")]
        public PressureMeasure PresKickTol {
            get {
                return PresKickTolField;
            } 
            set {
                PresKickTolField = value;
                NotifyPropertyChanged("PresKickTol");
            }
        }

        private PressureMeasure PresKickTolField; 

        /// <summary>
        /// VolKickTol property
        /// </summary>
		[Description("Kick tolerance volume.")]
        [ComponentElement]
		[XmlElement("VolKickTol")]
        public VolumeMeasure VolKickTol {
            get {
                return VolKickTolField;
            } 
            set {
                VolKickTolField = value;
                NotifyPropertyChanged("VolKickTol");
            }
        }

        private VolumeMeasure VolKickTolField; 

        /// <summary>
        /// Maasp property
        /// </summary>
		[Description("Maximum allowable shut-in casing pressure.")]
        [ComponentElement]
		[XmlElement("Maasp")]
        public PressureMeasure Maasp {
            get {
                return MaaspField;
            } 
            set {
                MaaspField = value;
                NotifyPropertyChanged("Maasp");
            }
        }

        private PressureMeasure MaaspField; 

        /// <summary>
        /// Tubular property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the tubular (assembly) used in this report period. This represents a foreign key to tubular.")]
		[XmlElement("Tubular")]
        public String Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private String TubularField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ParentWellbore property
        /// </summary>
		[RecurringElement]
		[XmlElement("ParentWellbore")]
        public List<ObjectAlias> ParentWellbore {
            get {
                return ParentWellboreField;
            } 
            set {
                ParentWellboreField = value;
                NotifyPropertyChanged("ParentWellbore");
            }
        }

         [XmlIgnore]
         public bool ParentWellboreSpecified
         {
            get {
             if(ParentWellboreField!=null)
                return ParentWellboreField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ObjectAlias> ParentWellboreField; 

        /// <summary>
        /// ElevKelly property
        /// </summary>
		[ComponentElement]
		[XmlElement("ElevKelly")]
        public WellElevationCoord ElevKelly {
            get {
                return ElevKellyField;
            } 
            set {
                ElevKellyField = value;
                NotifyPropertyChanged("ElevKelly");
            }
        }

        private WellElevationCoord ElevKellyField; 

        /// <summary>
        /// CostDay property
        /// </summary>
		[ComponentElement]
		[XmlElement("CostDay")]
        public Cost CostDay {
            get {
                return CostDayField;
            } 
            set {
                CostDayField = value;
                NotifyPropertyChanged("CostDay");
            }
        }

        private Cost CostDayField; 

        /// <summary>
        /// CostDayMud property
        /// </summary>
		[ComponentElement]
		[XmlElement("CostDayMud")]
        public Cost CostDayMud {
            get {
                return CostDayMudField;
            } 
            set {
                CostDayMudField = value;
                NotifyPropertyChanged("CostDayMud");
            }
        }

        private Cost CostDayMudField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportStatusInfo")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellElevationCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellElevationCoord", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the WellElevationCoord xsd type.")]
    public partial class WellElevationCoord : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        public WellElevationCoord() {}

        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WellElevationCoord(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Description("The unit of measure by which the datum is expressed")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
             if(value!=null) 
                 this.UomSpecified = true;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

        /// <summary>
        /// uomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UomSpecified {
            get {
                return uomSpecifiedField;
            } 
            set {
                uomSpecifiedField = value;
                NotifyPropertyChanged("UomSpecified");
            }
        }

        private Boolean uomSpecifiedField; 

		/// <summary>
        /// datum property
        /// </summary>
		[StringLength(64)]
        [Description("Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates")]
        [XmlAttribute("datum")]
		
        public String Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private String datumField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportWellboreInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportWellboreInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportWellboreInfo xsd type.")]
    public partial class DrillReportWellboreInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimSpud property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time at which the well was spudded.  This is when the well drilling equipment begin to bore into  the earth's surface for the purpose of drilling a well.")]
		[XmlElement("DTimSpud")]
        public String DateTimeSpud {
            get {
                return DTimSpudField;
            } 
            set {
                DTimSpudField = value;
                NotifyPropertyChanged("DateTimeSpud");
            }
        }

        private String DTimSpudField; 

        /// <summary>
        /// DTimPreSpud property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time at which the well was predrilled.  This is when the well drilling equipment begin to bore into  the earth's surface for the purpose of drilling a well.")]
		[XmlElement("DTimPreSpud")]
        public String DateTimePreSpud {
            get {
                return DTimPreSpudField;
            } 
            set {
                DTimPreSpudField = value;
                NotifyPropertyChanged("DateTimePreSpud");
            }
        }

        private String DTimPreSpudField; 

        /// <summary>
        /// DateDrillComplete property
        /// </summary>
		[Description("The date when the drilling activity is completed.")]
		[XmlElement("DateDrillComplete", DataType="date")]
        public DateTime? DateDrillComplete {
            get {
                return DateDrillCompleteField;
            } 
            set {
                DateDrillCompleteField = value;
             if(value!=null) 
                 this.DateDrillCompleteSpecified = true;
                NotifyPropertyChanged("DateDrillComplete");
            }
        }

        private DateTime? DateDrillCompleteField; 

        /// <summary>
        /// DateDrillCompleteSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DateDrillCompleteSpecified {
            get {
                return DateDrillCompleteSpecifiedField;
            } 
            set {
                DateDrillCompleteSpecifiedField = value;
                NotifyPropertyChanged("DateDrillCompleteSpecified");
            }
        }

        private Boolean DateDrillCompleteSpecifiedField; 

        /// <summary>
        /// Operator property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the drilling Operator company.")]
		[XmlElement("Operator")]
        public String Operator {
            get {
                return OperatorField;
            } 
            set {
                OperatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private String OperatorField; 

        /// <summary>
        /// DrillContractor property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the drilling Contractor company.")]
		[XmlElement("DrillContractor")]
        public String DrillContractor {
            get {
                return DrillContractorField;
            } 
            set {
                DrillContractorField = value;
                NotifyPropertyChanged("DrillContractor");
            }
        }

        private String DrillContractorField; 

        /// <summary>
        /// RigAlias property
        /// </summary>
		[RecurringElement]
		[XmlElement("RigAlias")]
        public List<ObjectAlias> RigAlias {
            get {
                return RigAliasField;
            } 
            set {
                RigAliasField = value;
                NotifyPropertyChanged("RigAlias");
            }
        }

         [XmlIgnore]
         public bool RigAliasSpecified
         {
            get {
             if(RigAliasField!=null)
                return RigAliasField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ObjectAlias> RigAliasField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportGasReadingInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportGasReadingInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportGasReadingInfo xsd type.")]
    public partial class DrillReportGasReadingInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of the gas reading.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// ReadingType property
        /// </summary>
		[Description("Type of gas reading.")]
		[XmlElement("ReadingType")]
        public GasPeakType? ReadingType {
            get {
                return ReadingTypeField;
            } 
            set {
                ReadingTypeField = value;
             if(value!=null) 
                 this.ReadingTypeSpecified = true;
                NotifyPropertyChanged("ReadingType");
            }
        }

        private GasPeakType? ReadingTypeField; 

        /// <summary>
        /// ReadingTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ReadingTypeSpecified {
            get {
                return ReadingTypeSpecifiedField;
            } 
            set {
                ReadingTypeSpecifiedField = value;
                NotifyPropertyChanged("ReadingTypeSpecified");
            }
        }

        private Boolean ReadingTypeSpecifiedField; 

        /// <summary>
        /// GasReadingMdInterval property
        /// </summary>
		[Description("Measured depth interval over which the gas reading was conducted.")]
        [ComponentElement]
		[XmlElement("GasReadingMdInterval")]
        public MdInterval GasReadingMDInterval {
            get {
                return GasReadingMdIntervalField;
            } 
            set {
                GasReadingMdIntervalField = value;
                NotifyPropertyChanged("GasReadingMDInterval");
            }
        }

        private MdInterval GasReadingMdIntervalField; 

        /// <summary>
        /// GasReadingTvdInterval property
        /// </summary>
		[Description("True vertical depth interval over which the gas reading was conducted.")]
        [ComponentElement]
		[XmlElement("GasReadingTvdInterval")]
        public TvdInterval GasReadingTvdInterval {
            get {
                return GasReadingTvdIntervalField;
            } 
            set {
                GasReadingTvdIntervalField = value;
                NotifyPropertyChanged("GasReadingTvdInterval");
            }
        }

        private TvdInterval GasReadingTvdIntervalField; 

        /// <summary>
        /// GasHigh property
        /// </summary>
		[Description("The highest gas reading.")]
        [ComponentElement]
		[XmlElement("GasHigh")]
        public VolumePerVolumeMeasure GasHigh {
            get {
                return GasHighField;
            } 
            set {
                GasHighField = value;
                NotifyPropertyChanged("GasHigh");
            }
        }

        private VolumePerVolumeMeasure GasHighField; 

        /// <summary>
        /// GasLow property
        /// </summary>
		[Description("The lowest gas reading.")]
        [ComponentElement]
		[XmlElement("GasLow")]
        public VolumePerVolumeMeasure GasLow {
            get {
                return GasLowField;
            } 
            set {
                GasLowField = value;
                NotifyPropertyChanged("GasLow");
            }
        }

        private VolumePerVolumeMeasure GasLowField; 

        /// <summary>
        /// Meth property
        /// </summary>
		[Description("Methane (C1) concentration.")]
        [ComponentElement]
		[XmlElement("Meth")]
        public VolumePerVolumeMeasure Meth {
            get {
                return MethField;
            } 
            set {
                MethField = value;
                NotifyPropertyChanged("Meth");
            }
        }

        private VolumePerVolumeMeasure MethField; 

        /// <summary>
        /// Eth property
        /// </summary>
		[Description("Ethane (C2) concentration.")]
        [ComponentElement]
		[XmlElement("Eth")]
        public VolumePerVolumeMeasure Eth {
            get {
                return EthField;
            } 
            set {
                EthField = value;
                NotifyPropertyChanged("Eth");
            }
        }

        private VolumePerVolumeMeasure EthField; 

        /// <summary>
        /// Prop property
        /// </summary>
		[Description("Propane (C3) concentration.")]
        [ComponentElement]
		[XmlElement("Prop")]
        public VolumePerVolumeMeasure Prop {
            get {
                return PropField;
            } 
            set {
                PropField = value;
                NotifyPropertyChanged("Prop");
            }
        }

        private VolumePerVolumeMeasure PropField; 

        /// <summary>
        /// Ibut property
        /// </summary>
		[Description("iso-Butane (iC4) concentration.")]
        [ComponentElement]
		[XmlElement("Ibut")]
        public VolumePerVolumeMeasure Ibut {
            get {
                return IbutField;
            } 
            set {
                IbutField = value;
                NotifyPropertyChanged("Ibut");
            }
        }

        private VolumePerVolumeMeasure IbutField; 

        /// <summary>
        /// Nbut property
        /// </summary>
		[Description("nor-Butane (nC4) concentration.")]
        [ComponentElement]
		[XmlElement("Nbut")]
        public VolumePerVolumeMeasure Nbut {
            get {
                return NbutField;
            } 
            set {
                NbutField = value;
                NotifyPropertyChanged("Nbut");
            }
        }

        private VolumePerVolumeMeasure NbutField; 

        /// <summary>
        /// Ipent property
        /// </summary>
		[Description("iso-Pentane (iC5) concentration.")]
        [ComponentElement]
		[XmlElement("Ipent")]
        public VolumePerVolumeMeasure Ipent {
            get {
                return IpentField;
            } 
            set {
                IpentField = value;
                NotifyPropertyChanged("Ipent");
            }
        }

        private VolumePerVolumeMeasure IpentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportGasReadingInfo")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportPerfInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportPerfInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportPerfInfo xsd type.")]
    public partial class DrillReportPerfInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimOpen property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date and time at which the well perforation interval is opened.")]
		[XmlElement("DTimOpen")]
        public String DateTimeOpen {
            get {
                return DTimOpenField;
            } 
            set {
                DTimOpenField = value;
                NotifyPropertyChanged("DateTimeOpen");
            }
        }

        private String DTimOpenField; 

        /// <summary>
        /// DTimClose property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date and time at which the well perforation interval is closed.")]
		[XmlElement("DTimClose")]
        public String DateTimeClose {
            get {
                return DTimCloseField;
            } 
            set {
                DTimCloseField = value;
                NotifyPropertyChanged("DateTimeClose");
            }
        }

        private String DTimCloseField; 

        /// <summary>
        /// PerforationMdInterval property
        /// </summary>
		[Description("Measured depth interval between the top and the base of the perforations.")]
        [ComponentElement]
		[XmlElement("PerforationMdInterval")]
        public MdInterval PerforationMDInterval {
            get {
                return PerforationMdIntervalField;
            } 
            set {
                PerforationMdIntervalField = value;
                NotifyPropertyChanged("PerforationMDInterval");
            }
        }

        private MdInterval PerforationMdIntervalField; 

        /// <summary>
        /// PerforationTvdInterval property
        /// </summary>
		[Description("True vertical depth interval between the top and the base of the perforations.")]
        [ComponentElement]
		[XmlElement("PerforationTvdInterval")]
        public TvdInterval PerforationTvdInterval {
            get {
                return PerforationTvdIntervalField;
            } 
            set {
                PerforationTvdIntervalField = value;
                NotifyPropertyChanged("PerforationTvdInterval");
            }
        }

        private TvdInterval PerforationTvdIntervalField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportPerfInfo")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportStratInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportStratInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportStratInfo xsd type.")]
    public partial class DrillReportStratInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time at which a preliminary zonation is established.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// MdTop property
        /// </summary>
		[Description("Measured depth at the top of the formation.")]
        [ComponentElement]
		[XmlElement("MdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return MdTopField;
            } 
            set {
                MdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord MdTopField; 

        /// <summary>
        /// TvdTop property
        /// </summary>
		[Description("True vertical depth at the top of the formation.")]
        [ComponentElement]
		[XmlElement("TvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return TvdTopField;
            } 
            set {
                TvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord TvdTopField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A lithological description of the geological formation at the given depth.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportStratInfo")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportControlIncidentInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportControlIncidentInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportControlIncidentInfo xsd type.")]
    public partial class DrillReportControlIncidentInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of the well control incident.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// MdInflow property
        /// </summary>
		[Description("The measured depth to the well inflow entry point.")]
        [ComponentElement]
		[XmlElement("MdInflow")]
        public MeasuredDepthCoord MDInflow {
            get {
                return MdInflowField;
            } 
            set {
                MdInflowField = value;
                NotifyPropertyChanged("MDInflow");
            }
        }

        private MeasuredDepthCoord MdInflowField; 

        /// <summary>
        /// TvdInflow property
        /// </summary>
		[Description("The true vertical depth to the well inflow entery point.")]
        [ComponentElement]
		[XmlElement("TvdInflow")]
        public WellVerticalDepthCoord TvdInflow {
            get {
                return TvdInflowField;
            } 
            set {
                TvdInflowField = value;
                NotifyPropertyChanged("TvdInflow");
            }
        }

        private WellVerticalDepthCoord TvdInflowField; 

        /// <summary>
        /// Phase property
        /// </summary>
		[StringLength(64)]
        [Description("Phase (large activity classification) e.g. Drill Surface Hole.")]
		[XmlElement("Phase")]
        public String Phase {
            get {
                return PhaseField;
            } 
            set {
                PhaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private String PhaseField; 

        /// <summary>
        /// ActivityCode property
        /// </summary>
		[StringLength(40)]
        [Description("A code used to define rig activity.")]
		[XmlElement("ActivityCode")]
        public String ActivityCode {
            get {
                return ActivityCodeField;
            } 
            set {
                ActivityCodeField = value;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private String ActivityCodeField; 

        /// <summary>
        /// DetailActivity property
        /// </summary>
		[StringLength(64)]
        [Description("Custom string to further define an activity.")]
		[XmlElement("DetailActivity")]
        public String DetailActivity {
            get {
                return DetailActivityField;
            } 
            set {
                DetailActivityField = value;
                NotifyPropertyChanged("DetailActivity");
            }
        }

        private String DetailActivityField; 

        /// <summary>
        /// ETimLost property
        /// </summary>
		[Description("The amount of time lost because of the well control incident. Commonly specified in hours.")]
        [ComponentElement]
		[XmlElement("ETimLost")]
        public TimeMeasure ETimeLost {
            get {
                return ETimLostField;
            } 
            set {
                ETimLostField = value;
                NotifyPropertyChanged("ETimeLost");
            }
        }

        private TimeMeasure ETimLostField; 

        /// <summary>
        /// DTimRegained property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date and time at which control of the well is regained.")]
		[XmlElement("DTimRegained")]
        public String DateTimeRegained {
            get {
                return DTimRegainedField;
            } 
            set {
                DTimRegainedField = value;
                NotifyPropertyChanged("DateTimeRegained");
            }
        }

        private String DTimRegainedField; 

        /// <summary>
        /// DiaBit property
        /// </summary>
		[Description("The drill bit nominal outside diameter at time of well control incident.")]
        [ComponentElement]
		[XmlElement("DiaBit")]
        public LengthMeasure DiaBit {
            get {
                return DiaBitField;
            } 
            set {
                DiaBitField = value;
                NotifyPropertyChanged("DiaBit");
            }
        }

        private LengthMeasure DiaBitField; 

        /// <summary>
        /// MdBit property
        /// </summary>
		[Description("The measured depth of bit at the time of the well control incident.")]
        [ComponentElement]
		[XmlElement("MdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return MdBitField;
            } 
            set {
                MdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord MdBitField; 

        /// <summary>
        /// WtMud property
        /// </summary>
		[Description("The density of the drilling fluid.")]
        [ComponentElement]
		[XmlElement("WtMud")]
        public MassPerVolumeMeasure WeightMud {
            get {
                return WtMudField;
            } 
            set {
                WtMudField = value;
                NotifyPropertyChanged("WeightMud");
            }
        }

        private MassPerVolumeMeasure WtMudField; 

        /// <summary>
        /// PorePressure property
        /// </summary>
		[Required]
        [Description("The equivalent mud weight value of the pore pressure reading.")]
        [ComponentElement]
		[XmlElement("PorePressure")]
        public MassPerVolumeMeasure PorePressure {
            get {
                return PorePressureField;
            } 
            set {
                PorePressureField = value;
                NotifyPropertyChanged("PorePressure");
            }
        }

        private MassPerVolumeMeasure PorePressureField; 

        /// <summary>
        /// DiaCsgLast property
        /// </summary>
		[Description("Diameter of the last installed casing.")]
        [ComponentElement]
		[XmlElement("DiaCsgLast")]
        public LengthMeasure DiaCsgLast {
            get {
                return DiaCsgLastField;
            } 
            set {
                DiaCsgLastField = value;
                NotifyPropertyChanged("DiaCsgLast");
            }
        }

        private LengthMeasure DiaCsgLastField; 

        /// <summary>
        /// MdCsgLast property
        /// </summary>
		[Description("Measured depth of last casing.")]
        [ComponentElement]
		[XmlElement("MdCsgLast")]
        public MeasuredDepthCoord MDCsgLast {
            get {
                return MdCsgLastField;
            } 
            set {
                MdCsgLastField = value;
                NotifyPropertyChanged("MDCsgLast");
            }
        }

        private MeasuredDepthCoord MdCsgLastField; 

        /// <summary>
        /// VolMudGained property
        /// </summary>
		[Description("The gained volume of drilling fluid due to well kick.")]
        [ComponentElement]
		[XmlElement("VolMudGained")]
        public VolumeMeasure VolMudGained {
            get {
                return VolMudGainedField;
            } 
            set {
                VolMudGainedField = value;
                NotifyPropertyChanged("VolMudGained");
            }
        }

        private VolumeMeasure VolMudGainedField; 

        /// <summary>
        /// PresShutInCasing property
        /// </summary>
		[Description("The shut in casing pressure.")]
        [ComponentElement]
		[XmlElement("PresShutInCasing")]
        public PressureMeasure PresShutInCasing {
            get {
                return PresShutInCasingField;
            } 
            set {
                PresShutInCasingField = value;
                NotifyPropertyChanged("PresShutInCasing");
            }
        }

        private PressureMeasure PresShutInCasingField; 

        /// <summary>
        /// PresShutInDrill property
        /// </summary>
		[Description("The actual pressure in the drill pipe when the rams are closed around it.")]
        [ComponentElement]
		[XmlElement("PresShutInDrill")]
        public PressureMeasure PresShutInDrill {
            get {
                return PresShutInDrillField;
            } 
            set {
                PresShutInDrillField = value;
                NotifyPropertyChanged("PresShutInDrill");
            }
        }

        private PressureMeasure PresShutInDrillField; 

        /// <summary>
        /// IncidentType property
        /// </summary>
		[Description("The type of well control incident.")]
		[XmlElement("IncidentType")]
        public WellControlIncidentType? IncidentType {
            get {
                return IncidentTypeField;
            } 
            set {
                IncidentTypeField = value;
             if(value!=null) 
                 this.IncidentTypeSpecified = true;
                NotifyPropertyChanged("IncidentType");
            }
        }

        private WellControlIncidentType? IncidentTypeField; 

        /// <summary>
        /// IncidentTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IncidentTypeSpecified {
            get {
                return IncidentTypeSpecifiedField;
            } 
            set {
                IncidentTypeSpecifiedField = value;
                NotifyPropertyChanged("IncidentTypeSpecified");
            }
        }

        private Boolean IncidentTypeSpecifiedField; 

        /// <summary>
        /// KillingType property
        /// </summary>
		[Description("The type of well control incident.")]
		[XmlElement("KillingType")]
        public WellKillingProcedureType? KillingType {
            get {
                return KillingTypeField;
            } 
            set {
                KillingTypeField = value;
             if(value!=null) 
                 this.KillingTypeSpecified = true;
                NotifyPropertyChanged("KillingType");
            }
        }

        private WellKillingProcedureType? KillingTypeField; 

        /// <summary>
        /// KillingTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean KillingTypeSpecified {
            get {
                return KillingTypeSpecifiedField;
            } 
            set {
                KillingTypeSpecifiedField = value;
                NotifyPropertyChanged("KillingTypeSpecified");
            }
        }

        private Boolean KillingTypeSpecifiedField; 

        /// <summary>
        /// Formation property
        /// </summary>
		[StringLength(2000)]
        [Description("The lithological description of a geological formation at the incident depth.")]
		[XmlElement("Formation")]
        public String Formation {
            get {
                return FormationField;
            } 
            set {
                FormationField = value;
                NotifyPropertyChanged("Formation");
            }
        }

        private String FormationField; 

        /// <summary>
        /// TempBottom property
        /// </summary>
		[Description("the temperature at the bottom of the wellbore.")]
        [ComponentElement]
		[XmlElement("TempBottom")]
        public ThermodynamicTemperatureMeasure TempBottom {
            get {
                return TempBottomField;
            } 
            set {
                TempBottomField = value;
                NotifyPropertyChanged("TempBottom");
            }
        }

        private ThermodynamicTemperatureMeasure TempBottomField; 

        /// <summary>
        /// PresMaxChoke property
        /// </summary>
		[Description("The maximum pressure that the choke valve can be exposed to.")]
        [ComponentElement]
		[XmlElement("PresMaxChoke")]
        public PressureMeasure PresMaxChoke {
            get {
                return PresMaxChokeField;
            } 
            set {
                PresMaxChokeField = value;
                NotifyPropertyChanged("PresMaxChoke");
            }
        }

        private PressureMeasure PresMaxChokeField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A description of the well control incident.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ProprietaryCode property
        /// </summary>
		[RecurringElement]
		[XmlElement("ProprietaryCode")]
        public List<ObjectAlias> ProprietaryCode {
            get {
                return ProprietaryCodeField;
            } 
            set {
                ProprietaryCodeField = value;
                NotifyPropertyChanged("ProprietaryCode");
            }
        }

         [XmlIgnore]
         public bool ProprietaryCodeSpecified
         {
            get {
             if(ProprietaryCodeField!=null)
                return ProprietaryCodeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ObjectAlias> ProprietaryCodeField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportControlIncidentInfo")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportEquipFailureInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportEquipFailureInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportEquipFailureInfo xsd type.")]
    public partial class DrillReportEquipFailureInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that the equipment failed.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("The measured depth to the operation end point due to failure.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("The true vertical depth to the operation end point due to failure.")]
        [ComponentElement]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// EquipClass property
        /// </summary>
		[StringLength(64)]
        [Description("The classification of the equipment that failed.")]
		[XmlElement("EquipClass")]
        public String EquipClass {
            get {
                return EquipClassField;
            } 
            set {
                EquipClassField = value;
                NotifyPropertyChanged("EquipClass");
            }
        }

        private String EquipClassField; 

        /// <summary>
        /// ETimMissProduction property
        /// </summary>
		[Description("The missed production time due to equipment failure.")]
        [ComponentElement]
		[XmlElement("ETimMissProduction")]
        public TimeMeasure ETimeMissProduction {
            get {
                return ETimMissProductionField;
            } 
            set {
                ETimMissProductionField = value;
                NotifyPropertyChanged("ETimeMissProduction");
            }
        }

        private TimeMeasure ETimMissProductionField; 

        /// <summary>
        /// DTimRepair property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date and time at which the production equipment was  repaired and ready for production.")]
		[XmlElement("DTimRepair")]
        public String DateTimeRepair {
            get {
                return DTimRepairField;
            } 
            set {
                DTimRepairField = value;
                NotifyPropertyChanged("DateTimeRepair");
            }
        }

        private String DTimRepairField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A description that gives a information about the equipment failure.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportEquipFailureInfo")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportLithShowInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportLithShowInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportLithShowInfo xsd type.")]
    public partial class DrillReportLithShowInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that the well test was completed.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// ShowMdInterval property
        /// </summary>
		[Description("Measured depth interval over which the show appears.")]
        [ComponentElement]
		[XmlElement("ShowMdInterval")]
        public MdInterval ShowMDInterval {
            get {
                return ShowMdIntervalField;
            } 
            set {
                ShowMdIntervalField = value;
                NotifyPropertyChanged("ShowMDInterval");
            }
        }

        private MdInterval ShowMdIntervalField; 

        /// <summary>
        /// ShowTvdInterval property
        /// </summary>
		[Description("True vertical depth interval over which the show appears.")]
        [ComponentElement]
		[XmlElement("ShowTvdInterval")]
        public TvdInterval ShowTvdInterval {
            get {
                return ShowTvdIntervalField;
            } 
            set {
                ShowTvdIntervalField = value;
                NotifyPropertyChanged("ShowTvdInterval");
            }
        }

        private TvdInterval ShowTvdIntervalField; 

        /// <summary>
        /// Show property
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of any shows in the interval.")]
		[XmlElement("Show")]
        public String Show {
            get {
                return ShowField;
            } 
            set {
                ShowField = value;
                NotifyPropertyChanged("Show");
            }
        }

        private String ShowField; 

        /// <summary>
        /// Lithology property
        /// </summary>
		[StringLength(2000)]
        [Description("A description that gives a geological/lithological  description/evaluation of the interval.")]
		[XmlElement("Lithology")]
        public String Lithology {
            get {
                return LithologyField;
            } 
            set {
                LithologyField = value;
                NotifyPropertyChanged("Lithology");
            }
        }

        private String LithologyField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportLithShowInfo")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportFormTestInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportFormTestInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportFormTestInfo xsd type.")]
    public partial class DrillReportFormTestInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that the wireline formation test was completed.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("Measured depth of the wireline formation test.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("True vertical depth of the wireline formation test.")]
        [ComponentElement]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// PresPore property
        /// </summary>
		[Description("The formation pore pressure. The pressure of fluids within the pores of a reservoir, usually hydrostatic pressure,  or the pressure exerted by a column of water from the formation's depth to sea level.")]
        [ComponentElement]
		[XmlElement("PresPore")]
        public PressureMeasure PresPore {
            get {
                return PresPoreField;
            } 
            set {
                PresPoreField = value;
                NotifyPropertyChanged("PresPore");
            }
        }

        private PressureMeasure PresPoreField; 

        /// <summary>
        /// GoodSeal property
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that there was a good seal for the wireline formation test. False (\"false\" or \"0\") or not given indicates otherwise.")]
		[XmlElement("GoodSeal")]
        public Boolean? GoodSeal {
            get {
                return GoodSealField;
            } 
            set {
                GoodSealField = value;
             if(value!=null) 
                 this.GoodSealSpecified = true;
                NotifyPropertyChanged("GoodSeal");
            }
        }

        private Boolean? GoodSealField; 

        /// <summary>
        /// GoodSealSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean GoodSealSpecified {
            get {
                return GoodSealSpecifiedField;
            } 
            set {
                GoodSealSpecifiedField = value;
                NotifyPropertyChanged("GoodSealSpecified");
            }
        }

        private Boolean GoodSealSpecifiedField; 

        /// <summary>
        /// MdSample property
        /// </summary>
		[Description("Measured depth where the fluid sample was taken.")]
        [ComponentElement]
		[XmlElement("MdSample")]
        public MeasuredDepthCoord MDSample {
            get {
                return MdSampleField;
            } 
            set {
                MdSampleField = value;
                NotifyPropertyChanged("MDSample");
            }
        }

        private MeasuredDepthCoord MdSampleField; 

        /// <summary>
        /// DominateComponent property
        /// </summary>
		[StringLength(64)]
        [Description("The dominate component in the fluid sample.")]
		[XmlElement("DominateComponent")]
        public String DominateComponent {
            get {
                return DominateComponentField;
            } 
            set {
                DominateComponentField = value;
                NotifyPropertyChanged("DominateComponent");
            }
        }

        private String DominateComponentField; 

        /// <summary>
        /// DensityHC property
        /// </summary>
		[Description("The density of hydrocarbon component of the fluid sample.")]
        [ComponentElement]
		[XmlElement("DensityHC")]
        public MassPerVolumeMeasure DensityHC {
            get {
                return DensityHCField;
            } 
            set {
                DensityHCField = value;
                NotifyPropertyChanged("DensityHC");
            }
        }

        private MassPerVolumeMeasure DensityHCField; 

        /// <summary>
        /// VolumeSample property
        /// </summary>
		[Description("The volume of the fluid sample.")]
        [ComponentElement]
		[XmlElement("VolumeSample")]
        public VolumeMeasure VolumeSample {
            get {
                return VolumeSampleField;
            } 
            set {
                VolumeSampleField = value;
                NotifyPropertyChanged("VolumeSample");
            }
        }

        private VolumeMeasure VolumeSampleField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A description that describes the wireline formation test in more detail.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportFormTestInfo")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportWellTestInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportWellTestInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportWellTestInfo xsd type.")]
    public partial class DrillReportWellTestInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that the well test was completed.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// TestType property
        /// </summary>
		[Description("The type of well test.")]
		[XmlElement("TestType")]
        public WellTestType? TestType {
            get {
                return TestTypeField;
            } 
            set {
                TestTypeField = value;
             if(value!=null) 
                 this.TestTypeSpecified = true;
                NotifyPropertyChanged("TestType");
            }
        }

        private WellTestType? TestTypeField; 

        /// <summary>
        /// TestTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TestTypeSpecified {
            get {
                return TestTypeSpecifiedField;
            } 
            set {
                TestTypeSpecifiedField = value;
                NotifyPropertyChanged("TestTypeSpecified");
            }
        }

        private Boolean TestTypeSpecifiedField; 

        /// <summary>
        /// TestNumber property
        /// </summary>
		[Description("The number of the well test.")]
		[XmlElement("TestNumber")]
        public Int32? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
             if(value!=null) 
                 this.TestNumberSpecified = true;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private Int32? TestNumberField; 

        /// <summary>
        /// TestNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TestNumberSpecified {
            get {
                return TestNumberSpecifiedField;
            } 
            set {
                TestNumberSpecifiedField = value;
                NotifyPropertyChanged("TestNumberSpecified");
            }
        }

        private Boolean TestNumberSpecifiedField; 

        /// <summary>
        /// TestMdInterval property
        /// </summary>
		[Description("Test interval expressed as measured depth.")]
        [ComponentElement]
		[XmlElement("TestMdInterval")]
        public MdInterval TestMDInterval {
            get {
                return TestMdIntervalField;
            } 
            set {
                TestMdIntervalField = value;
                NotifyPropertyChanged("TestMDInterval");
            }
        }

        private MdInterval TestMdIntervalField; 

        /// <summary>
        /// TestTvdInterval property
        /// </summary>
		[Description("Test interval expressed as true vertical depth.")]
        [ComponentElement]
		[XmlElement("TestTvdInterval")]
        public TvdInterval TestTvdInterval {
            get {
                return TestTvdIntervalField;
            } 
            set {
                TestTvdIntervalField = value;
                NotifyPropertyChanged("TestTvdInterval");
            }
        }

        private TvdInterval TestTvdIntervalField; 

        /// <summary>
        /// ChokeOrificeSize property
        /// </summary>
		[Description("The diameter of the choke opening.")]
        [ComponentElement]
		[XmlElement("ChokeOrificeSize")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return ChokeOrificeSizeField;
            } 
            set {
                ChokeOrificeSizeField = value;
                NotifyPropertyChanged("ChokeOrificeSize");
            }
        }

        private LengthMeasure ChokeOrificeSizeField; 

        /// <summary>
        /// DensityOil property
        /// </summary>
		[Description("The density of the produced oil.")]
        [ComponentElement]
		[XmlElement("DensityOil")]
        public MassPerVolumeMeasure DensityOil {
            get {
                return DensityOilField;
            } 
            set {
                DensityOilField = value;
                NotifyPropertyChanged("DensityOil");
            }
        }

        private MassPerVolumeMeasure DensityOilField; 

        /// <summary>
        /// DensityWater property
        /// </summary>
		[Description("The density of the produced water.")]
        [ComponentElement]
		[XmlElement("DensityWater")]
        public MassPerVolumeMeasure DensityWater {
            get {
                return DensityWaterField;
            } 
            set {
                DensityWaterField = value;
                NotifyPropertyChanged("DensityWater");
            }
        }

        private MassPerVolumeMeasure DensityWaterField; 

        /// <summary>
        /// DensityGas property
        /// </summary>
		[Description("The density of the produced gas.")]
        [ComponentElement]
		[XmlElement("DensityGas")]
        public MassPerVolumeMeasure DensityGas {
            get {
                return DensityGasField;
            } 
            set {
                DensityGasField = value;
                NotifyPropertyChanged("DensityGas");
            }
        }

        private MassPerVolumeMeasure DensityGasField; 

        /// <summary>
        /// FlowRateOil property
        /// </summary>
		[Description("The maximum rate at which oil was produced.")]
        [ComponentElement]
		[XmlElement("FlowRateOil")]
        public VolumePerTimeMeasure FlowRateOil {
            get {
                return FlowRateOilField;
            } 
            set {
                FlowRateOilField = value;
                NotifyPropertyChanged("FlowRateOil");
            }
        }

        private VolumePerTimeMeasure FlowRateOilField; 

        /// <summary>
        /// FlowRateWater property
        /// </summary>
		[Description("The maximum rate at which water was produced.")]
        [ComponentElement]
		[XmlElement("FlowRateWater")]
        public VolumePerTimeMeasure FlowRateWater {
            get {
                return FlowRateWaterField;
            } 
            set {
                FlowRateWaterField = value;
                NotifyPropertyChanged("FlowRateWater");
            }
        }

        private VolumePerTimeMeasure FlowRateWaterField; 

        /// <summary>
        /// FlowRateGas property
        /// </summary>
		[Description("The maximum rate at which gas was produced.")]
        [ComponentElement]
		[XmlElement("FlowRateGas")]
        public VolumePerTimeMeasure FlowRateGas {
            get {
                return FlowRateGasField;
            } 
            set {
                FlowRateGasField = value;
                NotifyPropertyChanged("FlowRateGas");
            }
        }

        private VolumePerTimeMeasure FlowRateGasField; 

        /// <summary>
        /// PresShutIn property
        /// </summary>
		[Description("The final shut in pressure.")]
        [ComponentElement]
		[XmlElement("PresShutIn")]
        public PressureMeasure PresShutIn {
            get {
                return PresShutInField;
            } 
            set {
                PresShutInField = value;
                NotifyPropertyChanged("PresShutIn");
            }
        }

        private PressureMeasure PresShutInField; 

        /// <summary>
        /// PresFlowing property
        /// </summary>
		[Description("The final flowing pressure.")]
        [ComponentElement]
		[XmlElement("PresFlowing")]
        public PressureMeasure PresFlowing {
            get {
                return PresFlowingField;
            } 
            set {
                PresFlowingField = value;
                NotifyPropertyChanged("PresFlowing");
            }
        }

        private PressureMeasure PresFlowingField; 

        /// <summary>
        /// PresBottom property
        /// </summary>
		[Description("The final bottom hole pressure.")]
        [ComponentElement]
		[XmlElement("PresBottom")]
        public PressureMeasure PresBottom {
            get {
                return PresBottomField;
            } 
            set {
                PresBottomField = value;
                NotifyPropertyChanged("PresBottom");
            }
        }

        private PressureMeasure PresBottomField; 

        /// <summary>
        /// GasOilRatio property
        /// </summary>
		[Description("The ratio of the volume of gas to the volume of oil.")]
        [ComponentElement]
		[XmlElement("GasOilRatio")]
        public VolumePerVolumeMeasure GasOilRatio {
            get {
                return GasOilRatioField;
            } 
            set {
                GasOilRatioField = value;
                NotifyPropertyChanged("GasOilRatio");
            }
        }

        private VolumePerVolumeMeasure GasOilRatioField; 

        /// <summary>
        /// WaterOilRatio property
        /// </summary>
		[Description("The relative amount of water per amount of oil.")]
        [ComponentElement]
		[XmlElement("WaterOilRatio")]
        public VolumePerVolumeMeasure WaterOilRatio {
            get {
                return WaterOilRatioField;
            } 
            set {
                WaterOilRatioField = value;
                NotifyPropertyChanged("WaterOilRatio");
            }
        }

        private VolumePerVolumeMeasure WaterOilRatioField; 

        /// <summary>
        /// Chloride property
        /// </summary>
		[Description("The relative amount of chloride in the produced water.")]
        [ComponentElement]
		[XmlElement("Chloride")]
        public MassPerMassMeasure Chloride {
            get {
                return ChlorideField;
            } 
            set {
                ChlorideField = value;
                NotifyPropertyChanged("Chloride");
            }
        }

        private MassPerMassMeasure ChlorideField; 

        /// <summary>
        /// CarbonDioxide property
        /// </summary>
		[Description("The relative amount of CO2 gas.")]
        [ComponentElement]
		[XmlElement("CarbonDioxide")]
        public MassPerMassMeasure CarbonDioxide {
            get {
                return CarbonDioxideField;
            } 
            set {
                CarbonDioxideField = value;
                NotifyPropertyChanged("CarbonDioxide");
            }
        }

        private MassPerMassMeasure CarbonDioxideField; 

        /// <summary>
        /// HydrogenSulfide property
        /// </summary>
		[Description("The relative amount of H2S gas.")]
        [ComponentElement]
		[XmlElement("HydrogenSulfide")]
        public MassPerMassMeasure HydrogenSulfide {
            get {
                return HydrogenSulfideField;
            } 
            set {
                HydrogenSulfideField = value;
                NotifyPropertyChanged("HydrogenSulfide");
            }
        }

        private MassPerMassMeasure HydrogenSulfideField; 

        /// <summary>
        /// VolOilTotal property
        /// </summary>
		[Description("The total amount of oil produced. This includes oil that was disposed of (e.g., burned).")]
        [ComponentElement]
		[XmlElement("VolOilTotal")]
        public VolumeMeasure VolOilTotal {
            get {
                return VolOilTotalField;
            } 
            set {
                VolOilTotalField = value;
                NotifyPropertyChanged("VolOilTotal");
            }
        }

        private VolumeMeasure VolOilTotalField; 

        /// <summary>
        /// VolGasTotal property
        /// </summary>
		[Description("The total amount of gas produced. This includes gas that was disposed of (e.g., burned).")]
        [ComponentElement]
		[XmlElement("VolGasTotal")]
        public VolumeMeasure VolGasTotal {
            get {
                return VolGasTotalField;
            } 
            set {
                VolGasTotalField = value;
                NotifyPropertyChanged("VolGasTotal");
            }
        }

        private VolumeMeasure VolGasTotalField; 

        /// <summary>
        /// VolWaterTotal property
        /// </summary>
		[Description("The total amount of water produced. This includes water that was disposed of.")]
        [ComponentElement]
		[XmlElement("VolWaterTotal")]
        public VolumeMeasure VolWaterTotal {
            get {
                return VolWaterTotalField;
            } 
            set {
                VolWaterTotalField = value;
                NotifyPropertyChanged("VolWaterTotal");
            }
        }

        private VolumeMeasure VolWaterTotalField; 

        /// <summary>
        /// VolOilStored property
        /// </summary>
		[Description("The total amount of produced oil that was stored.")]
        [ComponentElement]
		[XmlElement("VolOilStored")]
        public VolumeMeasure VolOilStored {
            get {
                return VolOilStoredField;
            } 
            set {
                VolOilStoredField = value;
                NotifyPropertyChanged("VolOilStored");
            }
        }

        private VolumeMeasure VolOilStoredField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportWellTestInfo")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportCoreInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportCoreInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportCoreInfo xsd type.")]
    public partial class DrillReportCoreInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that the core was completed.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// CoreNumber property
        /// </summary>
		[StringLength(64)]
        [Description("Core identification number.")]
		[XmlElement("CoreNumber")]
        public String CoreNumber {
            get {
                return CoreNumberField;
            } 
            set {
                CoreNumberField = value;
                NotifyPropertyChanged("CoreNumber");
            }
        }

        private String CoreNumberField; 

        /// <summary>
        /// CoredMdInterval property
        /// </summary>
		[Description("Cored interval expressed as measured depth.")]
        [ComponentElement]
		[XmlElement("CoredMdInterval")]
        public MdInterval CoredMDInterval {
            get {
                return CoredMdIntervalField;
            } 
            set {
                CoredMdIntervalField = value;
                NotifyPropertyChanged("CoredMDInterval");
            }
        }

        private MdInterval CoredMdIntervalField; 

        /// <summary>
        /// CoredTvdInterval property
        /// </summary>
		[Description("Cored interval expressed as true vertical depth.")]
        [ComponentElement]
		[XmlElement("CoredTvdInterval")]
        public TvdInterval CoredTvdInterval {
            get {
                return CoredTvdIntervalField;
            } 
            set {
                CoredTvdIntervalField = value;
                NotifyPropertyChanged("CoredTvdInterval");
            }
        }

        private TvdInterval CoredTvdIntervalField; 

        /// <summary>
        /// LenRecovered property
        /// </summary>
		[Description("Length of core recovered.")]
        [ComponentElement]
		[XmlElement("LenRecovered")]
        public LengthMeasure LenRecovered {
            get {
                return LenRecoveredField;
            } 
            set {
                LenRecoveredField = value;
                NotifyPropertyChanged("LenRecovered");
            }
        }

        private LengthMeasure LenRecoveredField; 

        /// <summary>
        /// RecoverPc property
        /// </summary>
		[Description("The relative amount of core recovered.")]
        [ComponentElement]
		[XmlElement("RecoverPc")]
        public VolumePerVolumeMeasure RecoverPercent {
            get {
                return RecoverPcField;
            } 
            set {
                RecoverPcField = value;
                NotifyPropertyChanged("RecoverPercent");
            }
        }

        private VolumePerVolumeMeasure RecoverPcField; 

        /// <summary>
        /// LenBarrel property
        /// </summary>
		[Description("Length of core barrel.")]
        [ComponentElement]
		[XmlElement("LenBarrel")]
        public LengthMeasure LenBarrel {
            get {
                return LenBarrelField;
            } 
            set {
                LenBarrelField = value;
                NotifyPropertyChanged("LenBarrel");
            }
        }

        private LengthMeasure LenBarrelField; 

        /// <summary>
        /// InnerBarrelType property
        /// </summary>
		[Description("Core inner barrel type.")]
		[XmlElement("InnerBarrelType")]
        public InnerBarrelType? InnerBarrelType {
            get {
                return InnerBarrelTypeField;
            } 
            set {
                InnerBarrelTypeField = value;
             if(value!=null) 
                 this.InnerBarrelTypeSpecified = true;
                NotifyPropertyChanged("InnerBarrelType");
            }
        }

        private InnerBarrelType? InnerBarrelTypeField; 

        /// <summary>
        /// InnerBarrelTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean InnerBarrelTypeSpecified {
            get {
                return InnerBarrelTypeSpecifiedField;
            } 
            set {
                InnerBarrelTypeSpecifiedField = value;
                NotifyPropertyChanged("InnerBarrelTypeSpecified");
            }
        }

        private Boolean InnerBarrelTypeSpecifiedField; 

        /// <summary>
        /// CoreDescription property
        /// </summary>
		[StringLength(2000)]
        [Description("General core description.")]
		[XmlElement("CoreDescription")]
        public String CoreDescription {
            get {
                return CoreDescriptionField;
            } 
            set {
                CoreDescriptionField = value;
                NotifyPropertyChanged("CoreDescription");
            }
        }

        private String CoreDescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportCoreInfo")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractBottomHoleTemperature xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BottomHoleStaticTemperature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BottomHoleCirculatingTemperature))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractBottomHoleTemperature", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractBottomHoleTemperature xsd type.")]
    public abstract partial class AbstractBottomHoleTemperature : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// BottomHoleTemperature property
        /// </summary>
		[Required]
        [Description("Bottomhole temperature for the job.")]
        [ComponentElement]
		[XmlElement("BottomHoleTemperature")]
        public ThermodynamicTemperatureMeasure BottomHoleTemperature {
            get {
                return BottomHoleTemperatureField;
            } 
            set {
                BottomHoleTemperatureField = value;
                NotifyPropertyChanged("BottomHoleTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure BottomHoleTemperatureField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BottomHoleStaticTemperature xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BottomHoleStaticTemperature", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BottomHoleStaticTemperature xsd type.")]
    public partial class BottomHoleStaticTemperature : AbstractBottomHoleTemperature, INotifyPropertyChanged
    {

        /// <summary>
        /// eTimStatic property
        /// </summary>
		[ComponentElement]
		[XmlElement("eTimStatic")]
        public TimeMeasure ETimeStatic {
            get {
                return eTimStaticField;
            } 
            set {
                eTimStaticField = value;
                NotifyPropertyChanged("ETimeStatic");
            }
        }

        private TimeMeasure eTimStaticField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BottomHoleCirculatingTemperature xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BottomHoleCirculatingTemperature", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BottomHoleCirculatingTemperature xsd type.")]
    public partial class BottomHoleCirculatingTemperature : AbstractBottomHoleTemperature, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportLogInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportLogInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportLogInfo xsd type.")]
    public partial class DrillReportLogInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date and time that the log was completed.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// RunNumber property
        /// </summary>
		[StringLength(64)]
        [Description("Log run number.  For measurement while drilling, this should be the  bottom hole assembly number.")]
		[XmlElement("RunNumber")]
        public String RunNumber {
            get {
                return RunNumberField;
            } 
            set {
                RunNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private String RunNumberField; 

        /// <summary>
        /// ServiceCompany property
        /// </summary>
		[StringLength(64)]
        [Description("Name of contractor who provided the service.")]
		[XmlElement("ServiceCompany")]
        public String ServiceCompany {
            get {
                return ServiceCompanyField;
            } 
            set {
                ServiceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private String ServiceCompanyField; 

        /// <summary>
        /// LoggedMdInterval property
        /// </summary>
		[Description("Measured depth interval from the top to the base of the interval logged.")]
        [ComponentElement]
		[XmlElement("LoggedMdInterval")]
        public MdInterval LoggedMDInterval {
            get {
                return LoggedMdIntervalField;
            } 
            set {
                LoggedMdIntervalField = value;
                NotifyPropertyChanged("LoggedMDInterval");
            }
        }

        private MdInterval LoggedMdIntervalField; 

        /// <summary>
        /// LoggedTvdInterval property
        /// </summary>
		[Description("True vertical depth interval from the top to the base of the interval logged.")]
        [ComponentElement]
		[XmlElement("LoggedTvdInterval")]
        public TvdInterval LoggedTvdInterval {
            get {
                return LoggedTvdIntervalField;
            } 
            set {
                LoggedTvdIntervalField = value;
                NotifyPropertyChanged("LoggedTvdInterval");
            }
        }

        private TvdInterval LoggedTvdIntervalField; 

        /// <summary>
        /// Tool property
        /// </summary>
		[StringLength(64)]
        [Description("A description of the logging tool.")]
		[XmlElement("Tool")]
        public String Tool {
            get {
                return ToolField;
            } 
            set {
                ToolField = value;
                NotifyPropertyChanged("Tool");
            }
        }

        private String ToolField; 

        /// <summary>
        /// MdTempTool property
        /// </summary>
		[Description("Measured depth to the temperature measurement tool.")]
        [ComponentElement]
		[XmlElement("MdTempTool")]
        public MeasuredDepthCoord MDTempTool {
            get {
                return MdTempToolField;
            } 
            set {
                MdTempToolField = value;
                NotifyPropertyChanged("MDTempTool");
            }
        }

        private MeasuredDepthCoord MdTempToolField; 

        /// <summary>
        /// TvdTempTool property
        /// </summary>
		[Description("True vertical depth to the temperature measurement tool.")]
        [ComponentElement]
		[XmlElement("TvdTempTool")]
        public WellVerticalDepthCoord TvdTempTool {
            get {
                return TvdTempToolField;
            } 
            set {
                TvdTempToolField = value;
                NotifyPropertyChanged("TvdTempTool");
            }
        }

        private WellVerticalDepthCoord TvdTempToolField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// BottomHoleTemperature property
        /// </summary>
		[ComponentElement]
		[XmlElement("BottomHoleTemperature")]
        public AbstractBottomHoleTemperature BottomHoleTemperature {
            get {
                return BottomHoleTemperatureField;
            } 
            set {
                BottomHoleTemperatureField = value;
                NotifyPropertyChanged("BottomHoleTemperature");
            }
        }

        private AbstractBottomHoleTemperature BottomHoleTemperatureField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportLogInfo")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillActivity xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillActivity", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillActivity xsd type.")]
    public partial class DrillActivity : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that activities started.")]
		[XmlElement("DTimStart")]
        public String DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private String DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that activities were completed.")]
		[XmlElement("DTimEnd")]
        public String DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private String DTimEndField; 

        /// <summary>
        /// Duration property
        /// </summary>
		[Description("The activity duration (commonly in hours).")]
        [ComponentElement]
		[XmlElement("Duration")]
        public TimeMeasure Duration {
            get {
                return DurationField;
            } 
            set {
                DurationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure DurationField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("The measured depth to the drilling operation.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("True Vertical Depth to the drilling operation.")]
        [ComponentElement]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// Phase property
        /// </summary>
		[StringLength(64)]
        [Description("Phase (large activity classification) e.g. Drill Surface Hole.")]
		[XmlElement("Phase")]
        public String Phase {
            get {
                return PhaseField;
            } 
            set {
                PhaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private String PhaseField; 

        /// <summary>
        /// ActivityCode property
        /// </summary>
		[StringLength(40)]
        [Description("A code used to define rig activity.")]
		[XmlElement("ActivityCode")]
        public String ActivityCode {
            get {
                return ActivityCodeField;
            } 
            set {
                ActivityCodeField = value;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private String ActivityCodeField; 

        /// <summary>
        /// DetailActivity property
        /// </summary>
		[StringLength(64)]
        [Description("Custom string to further define an activity.")]
		[XmlElement("DetailActivity")]
        public String DetailActivity {
            get {
                return DetailActivityField;
            } 
            set {
                DetailActivityField = value;
                NotifyPropertyChanged("DetailActivity");
            }
        }

        private String DetailActivityField; 

        /// <summary>
        /// TypeActivityClass property
        /// </summary>
		[Description("Classifier (Planned, Unplanned, Downtime).")]
		[XmlElement("TypeActivityClass")]
        public DrillActivityClassType? TypeActivityClass {
            get {
                return TypeActivityClassField;
            } 
            set {
                TypeActivityClassField = value;
             if(value!=null) 
                 this.TypeActivityClassSpecified = true;
                NotifyPropertyChanged("TypeActivityClass");
            }
        }

        private DrillActivityClassType? TypeActivityClassField; 

        /// <summary>
        /// TypeActivityClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeActivityClassSpecified {
            get {
                return TypeActivityClassSpecifiedField;
            } 
            set {
                TypeActivityClassSpecifiedField = value;
                NotifyPropertyChanged("TypeActivityClassSpecified");
            }
        }

        private Boolean TypeActivityClassSpecifiedField; 

        /// <summary>
        /// ActivityMdInterval property
        /// </summary>
		[Description("Measured depth interval over which the activity was conducted.")]
        [ComponentElement]
		[XmlElement("ActivityMdInterval")]
        public MdInterval ActivityMDInterval {
            get {
                return ActivityMdIntervalField;
            } 
            set {
                ActivityMdIntervalField = value;
                NotifyPropertyChanged("ActivityMDInterval");
            }
        }

        private MdInterval ActivityMdIntervalField; 

        /// <summary>
        /// ActivityTvdInterval property
        /// </summary>
		[Description("True vertical depth interval over which the activity was conducted.")]
        [ComponentElement]
		[XmlElement("ActivityTvdInterval")]
        public TvdInterval ActivityTvdInterval {
            get {
                return ActivityTvdIntervalField;
            } 
            set {
                ActivityTvdIntervalField = value;
                NotifyPropertyChanged("ActivityTvdInterval");
            }
        }

        private TvdInterval ActivityTvdIntervalField; 

        /// <summary>
        /// BitMdInterval property
        /// </summary>
		[Description("Range of bit measured depths over which the activity occurred.")]
        [ComponentElement]
		[XmlElement("BitMdInterval")]
        public MdInterval BitMDInterval {
            get {
                return BitMdIntervalField;
            } 
            set {
                BitMdIntervalField = value;
                NotifyPropertyChanged("BitMDInterval");
            }
        }

        private MdInterval BitMdIntervalField; 

        /// <summary>
        /// State property
        /// </summary>
		[StringLength(64)]
        [Description("Finish, interrupted, failed, etc.")]
		[XmlElement("State")]
        public String State {
            get {
                return StateField;
            } 
            set {
                StateField = value;
                NotifyPropertyChanged("State");
            }
        }

        private String StateField; 

        /// <summary>
        /// StateDetailActivity property
        /// </summary>
		[Description("The outcome of the detailed activity.")]
		[XmlElement("StateDetailActivity")]
        public StateDetailActivity? StateDetailActivity {
            get {
                return StateDetailActivityField;
            } 
            set {
                StateDetailActivityField = value;
             if(value!=null) 
                 this.StateDetailActivitySpecified = true;
                NotifyPropertyChanged("StateDetailActivity");
            }
        }

        private StateDetailActivity? StateDetailActivityField; 

        /// <summary>
        /// StateDetailActivitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StateDetailActivitySpecified {
            get {
                return StateDetailActivitySpecifiedField;
            } 
            set {
                StateDetailActivitySpecifiedField = value;
                NotifyPropertyChanged("StateDetailActivitySpecified");
            }
        }

        private Boolean StateDetailActivitySpecifiedField; 

        /// <summary>
        /// Operator property
        /// </summary>
		[StringLength(64)]
        [Description("Operator company name.")]
		[XmlElement("Operator")]
        public String Operator {
            get {
                return OperatorField;
            } 
            set {
                OperatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private String OperatorField; 

        /// <summary>
        /// Tubular property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the tubular related to this activity.")]
		[XmlElement("Tubular")]
        public String Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private String TubularField; 

        /// <summary>
        /// Optimum property
        /// </summary>
		[Description("Is the activity optimum.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("Optimum")]
        public Boolean? Optimum {
            get {
                return OptimumField;
            } 
            set {
                OptimumField = value;
             if(value!=null) 
                 this.OptimumSpecified = true;
                NotifyPropertyChanged("Optimum");
            }
        }

        private Boolean? OptimumField; 

        /// <summary>
        /// OptimumSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean OptimumSpecified {
            get {
                return OptimumSpecifiedField;
            } 
            set {
                OptimumSpecifiedField = value;
                NotifyPropertyChanged("OptimumSpecified");
            }
        }

        private Boolean OptimumSpecifiedField; 

        /// <summary>
        /// Productive property
        /// </summary>
		[Description("Does activity bring closer to objective.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("Productive")]
        public Boolean? Productive {
            get {
                return ProductiveField;
            } 
            set {
                ProductiveField = value;
             if(value!=null) 
                 this.ProductiveSpecified = true;
                NotifyPropertyChanged("Productive");
            }
        }

        private Boolean? ProductiveField; 

        /// <summary>
        /// ProductiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ProductiveSpecified {
            get {
                return ProductiveSpecifiedField;
            } 
            set {
                ProductiveSpecifiedField = value;
                NotifyPropertyChanged("ProductiveSpecified");
            }
        }

        private Boolean ProductiveSpecifiedField; 

        /// <summary>
        /// ItemState property
        /// </summary>
		[Description("The item state for the data object.")]
		[XmlElement("ItemState")]
        public ItemState? ItemState {
            get {
                return ItemStateField;
            } 
            set {
                ItemStateField = value;
             if(value!=null) 
                 this.ItemStateSpecified = true;
                NotifyPropertyChanged("ItemState");
            }
        }

        private ItemState? ItemStateField; 

        /// <summary>
        /// ItemStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ItemStateSpecified {
            get {
                return ItemStateSpecifiedField;
            } 
            set {
                ItemStateSpecifiedField = value;
                NotifyPropertyChanged("ItemStateSpecified");
            }
        }

        private Boolean ItemStateSpecifiedField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and Remarks.")]
		[XmlElement("Comments")]
        public String Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String CommentsField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ProprietaryCode property
        /// </summary>
		[RecurringElement]
		[XmlElement("ProprietaryCode")]
        public List<ObjectAlias> ProprietaryCode {
            get {
                return ProprietaryCodeField;
            } 
            set {
                ProprietaryCodeField = value;
                NotifyPropertyChanged("ProprietaryCode");
            }
        }

         [XmlIgnore]
         public bool ProprietaryCodeSpecified
         {
            get {
             if(ProprietaryCodeField!=null)
                return ProprietaryCodeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ObjectAlias> ProprietaryCodeField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillActivity")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Nozzle xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Nozzle", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Nozzle xsd type.")]
    public partial class Nozzle : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Description("Index if this is an indexed object.")]
		[XmlElement("Index")]
        public Int32? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
             if(value!=null) 
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private Int32? IndexField; 

        /// <summary>
        /// IndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IndexSpecified {
            get {
                return IndexSpecifiedField;
            } 
            set {
                IndexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private Boolean IndexSpecifiedField; 

        /// <summary>
        /// DiaNozzle property
        /// </summary>
		[Description("Nozzle diameter.")]
        [ComponentElement]
		[XmlElement("DiaNozzle")]
        public LengthMeasure DiaNozzle {
            get {
                return DiaNozzleField;
            } 
            set {
                DiaNozzleField = value;
                NotifyPropertyChanged("DiaNozzle");
            }
        }

        private LengthMeasure DiaNozzleField; 

        /// <summary>
        /// TypeNozzle property
        /// </summary>
		[Description("Nozzle type.")]
		[XmlElement("TypeNozzle")]
        public NozzleType? TypeNozzle {
            get {
                return TypeNozzleField;
            } 
            set {
                TypeNozzleField = value;
             if(value!=null) 
                 this.TypeNozzleSpecified = true;
                NotifyPropertyChanged("TypeNozzle");
            }
        }

        private NozzleType? TypeNozzleField; 

        /// <summary>
        /// TypeNozzleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeNozzleSpecified {
            get {
                return TypeNozzleSpecifiedField;
            } 
            set {
                TypeNozzleSpecifiedField = value;
                NotifyPropertyChanged("TypeNozzleSpecified");
            }
        }

        private Boolean TypeNozzleSpecifiedField; 

        /// <summary>
        /// Len property
        /// </summary>
		[Description("Length of the nozzle.")]
        [ComponentElement]
		[XmlElement("Len")]
        public LengthMeasure Len {
            get {
                return LenField;
            } 
            set {
                LenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure LenField; 

        /// <summary>
        /// Orientation property
        /// </summary>
		[StringLength(64)]
        [Description("Nozzle orientation.")]
		[XmlElement("Orientation")]
        public String Orientation {
            get {
                return OrientationField;
            } 
            set {
                OrientationField = value;
                NotifyPropertyChanged("Orientation");
            }
        }

        private String OrientationField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Nozzle")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractRotarySteerableTool xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BendOffset))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BendAngle))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractRotarySteerableTool", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractRotarySteerableTool xsd type.")]
    public abstract partial class AbstractRotarySteerableTool : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BendOffset xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BendOffset", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BendOffset xsd type.")]
    public partial class BendOffset : AbstractRotarySteerableTool, INotifyPropertyChanged
    {

        /// <summary>
        /// BendOffset1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("BendOffset")]
        public LengthMeasure BendOffset1 {
            get {
                return BendOffset1Field;
            } 
            set {
                BendOffset1Field = value;
                NotifyPropertyChanged("BendOffset1");
            }
        }

        private LengthMeasure BendOffset1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BendAngle xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BendAngle", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BendAngle xsd type.")]
    public partial class BendAngle : AbstractRotarySteerableTool, INotifyPropertyChanged
    {

        /// <summary>
        /// BendAngle1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("BendAngle")]
        public PlaneAngleMeasure BendAngle1 {
            get {
                return BendAngle1Field;
            } 
            set {
                BendAngle1Field = value;
                NotifyPropertyChanged("BendAngle1");
            }
        }

        private PlaneAngleMeasure BendAngle1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RotarySteerableTool xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RotarySteerableTool", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RotarySteerableTool xsd type.")]
    public partial class RotarySteerableTool : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DeflectionMethod property
        /// </summary>
		[Required]
        [Description("Method used to direct the deviation of the trajectory: PointBit or PushBit.")]
		[XmlElement("DeflectionMethod")]
        public DeflectionMethod? DeflectionMethod {
            get {
                return DeflectionMethodField;
            } 
            set {
                DeflectionMethodField = value;
                NotifyPropertyChanged("DeflectionMethod");
            }
        }

        private DeflectionMethod? DeflectionMethodField; 

        /// <summary>
        /// HoleSizeMn property
        /// </summary>
		[Description("Minimum size of hole in which the tool can operate.")]
        [ComponentElement]
		[XmlElement("HoleSizeMn")]
        public LengthMeasure HoleSizeMin {
            get {
                return HoleSizeMnField;
            } 
            set {
                HoleSizeMnField = value;
                NotifyPropertyChanged("HoleSizeMin");
            }
        }

        private LengthMeasure HoleSizeMnField; 

        /// <summary>
        /// HoleSizeMx property
        /// </summary>
		[Description("Maximum size of hole in which the tool can operate.")]
        [ComponentElement]
		[XmlElement("HoleSizeMx")]
        public LengthMeasure HoleSizeMax {
            get {
                return HoleSizeMxField;
            } 
            set {
                HoleSizeMxField = value;
                NotifyPropertyChanged("HoleSizeMax");
            }
        }

        private LengthMeasure HoleSizeMxField; 

        /// <summary>
        /// WobMx property
        /// </summary>
		[Description("Maximum weight on the bit.")]
        [ComponentElement]
		[XmlElement("WobMx")]
        public ForceMeasure WobMax {
            get {
                return WobMxField;
            } 
            set {
                WobMxField = value;
                NotifyPropertyChanged("WobMax");
            }
        }

        private ForceMeasure WobMxField; 

        /// <summary>
        /// OperatingSpeed property
        /// </summary>
		[Description("Suggested operating speed.")]
        [ComponentElement]
		[XmlElement("OperatingSpeed")]
        public AngularVelocityMeasure OperatingSpeed {
            get {
                return OperatingSpeedField;
            } 
            set {
                OperatingSpeedField = value;
                NotifyPropertyChanged("OperatingSpeed");
            }
        }

        private AngularVelocityMeasure OperatingSpeedField; 

        /// <summary>
        /// SpeedMx property
        /// </summary>
		[Description("Maximum rotation speed.")]
        [ComponentElement]
		[XmlElement("SpeedMx")]
        public AngularVelocityMeasure SpeedMax {
            get {
                return SpeedMxField;
            } 
            set {
                SpeedMxField = value;
                NotifyPropertyChanged("SpeedMax");
            }
        }

        private AngularVelocityMeasure SpeedMxField; 

        /// <summary>
        /// FlowRateMn property
        /// </summary>
		[Description("Minimum flow rate for tool operation.")]
        [ComponentElement]
		[XmlElement("FlowRateMn")]
        public VolumePerTimeMeasure FlowRateMin {
            get {
                return FlowRateMnField;
            } 
            set {
                FlowRateMnField = value;
                NotifyPropertyChanged("FlowRateMin");
            }
        }

        private VolumePerTimeMeasure FlowRateMnField; 

        /// <summary>
        /// FlowRateMx property
        /// </summary>
		[Description("Maximum flow rate for tool operation.")]
        [ComponentElement]
		[XmlElement("FlowRateMx")]
        public VolumePerTimeMeasure FlowRateMax {
            get {
                return FlowRateMxField;
            } 
            set {
                FlowRateMxField = value;
                NotifyPropertyChanged("FlowRateMax");
            }
        }

        private VolumePerTimeMeasure FlowRateMxField; 

        /// <summary>
        /// DownLinkFlowRateMn property
        /// </summary>
		[Description("Minimum flow rate for programming tool.")]
        [ComponentElement]
		[XmlElement("DownLinkFlowRateMn")]
        public VolumePerTimeMeasure DownLinkFlowRateMin {
            get {
                return DownLinkFlowRateMnField;
            } 
            set {
                DownLinkFlowRateMnField = value;
                NotifyPropertyChanged("DownLinkFlowRateMin");
            }
        }

        private VolumePerTimeMeasure DownLinkFlowRateMnField; 

        /// <summary>
        /// DownLinkFlowRateMx property
        /// </summary>
		[Description("Maximum flow rate for programming tool.")]
        [ComponentElement]
		[XmlElement("DownLinkFlowRateMx")]
        public VolumePerTimeMeasure DownLinkFlowRateMax {
            get {
                return DownLinkFlowRateMxField;
            } 
            set {
                DownLinkFlowRateMxField = value;
                NotifyPropertyChanged("DownLinkFlowRateMax");
            }
        }

        private VolumePerTimeMeasure DownLinkFlowRateMxField; 

        /// <summary>
        /// PressLossFact property
        /// </summary>
		[Description("Pressure drop across tool.")]
		[XmlElement("PressLossFact")]
        public Double? PressLossFact {
            get {
                return PressLossFactField;
            } 
            set {
                PressLossFactField = value;
             if(value!=null) 
                 this.PressLossFactSpecified = true;
                NotifyPropertyChanged("PressLossFact");
            }
        }

        private Double? PressLossFactField; 

        /// <summary>
        /// PressLossFactSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PressLossFactSpecified {
            get {
                return PressLossFactSpecifiedField;
            } 
            set {
                PressLossFactSpecifiedField = value;
                NotifyPropertyChanged("PressLossFactSpecified");
            }
        }

        private Boolean PressLossFactSpecifiedField; 

        /// <summary>
        /// PadCount property
        /// </summary>
		[Description("The number of contact pads.")]
		[XmlElement("PadCount")]
        public Int32? PadCount {
            get {
                return PadCountField;
            } 
            set {
                PadCountField = value;
             if(value!=null) 
                 this.PadCountSpecified = true;
                NotifyPropertyChanged("PadCount");
            }
        }

        private Int32? PadCountField; 

        /// <summary>
        /// PadCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PadCountSpecified {
            get {
                return PadCountSpecifiedField;
            } 
            set {
                PadCountSpecifiedField = value;
                NotifyPropertyChanged("PadCountSpecified");
            }
        }

        private Boolean PadCountSpecifiedField; 

        /// <summary>
        /// PadLen property
        /// </summary>
		[Description("Length of contact pad.")]
        [ComponentElement]
		[XmlElement("PadLen")]
        public LengthMeasure PadLen {
            get {
                return PadLenField;
            } 
            set {
                PadLenField = value;
                NotifyPropertyChanged("PadLen");
            }
        }

        private LengthMeasure PadLenField; 

        /// <summary>
        /// PadWidth property
        /// </summary>
		[Description("Width of contact pad.")]
        [ComponentElement]
		[XmlElement("PadWidth")]
        public LengthMeasure PadWidth {
            get {
                return PadWidthField;
            } 
            set {
                PadWidthField = value;
                NotifyPropertyChanged("PadWidth");
            }
        }

        private LengthMeasure PadWidthField; 

        /// <summary>
        /// PadOffset property
        /// </summary>
		[Description("Offset from bottom of pad to bottom connector.")]
        [ComponentElement]
		[XmlElement("PadOffset")]
        public LengthMeasure PadOffset {
            get {
                return PadOffsetField;
            } 
            set {
                PadOffsetField = value;
                NotifyPropertyChanged("PadOffset");
            }
        }

        private LengthMeasure PadOffsetField; 

        /// <summary>
        /// OpenPadOd property
        /// </summary>
		[Description("Outside diameter of tool when pads are activated.")]
        [ComponentElement]
		[XmlElement("OpenPadOd")]
        public LengthMeasure OpenPadOuterDiameter {
            get {
                return OpenPadOdField;
            } 
            set {
                OpenPadOdField = value;
                NotifyPropertyChanged("OpenPadOuterDiameter");
            }
        }

        private LengthMeasure OpenPadOdField; 

        /// <summary>
        /// ClosePadOd property
        /// </summary>
		[Description("Outiside diameter of tool when pads are closed.")]
        [ComponentElement]
		[XmlElement("ClosePadOd")]
        public LengthMeasure ClosePadOuterDiameter {
            get {
                return ClosePadOdField;
            } 
            set {
                ClosePadOdField = value;
                NotifyPropertyChanged("ClosePadOuterDiameter");
            }
        }

        private LengthMeasure ClosePadOdField; 

        /// <summary>
        /// AbstractRotarySteerableTool property
        /// </summary>
		[Required]
		[XmlElement("AbstractRotarySteerableTool")]
        public AbstractRotarySteerableTool AbstractRotarySteerableTool {
            get {
                return AbstractRotarySteerableToolField;
            } 
            set {
                AbstractRotarySteerableToolField = value;
                NotifyPropertyChanged("AbstractRotarySteerableTool");
            }
        }

        private AbstractRotarySteerableTool AbstractRotarySteerableToolField; 

        /// <summary>
        /// Sensor property
        /// </summary>
		[RecurringElement]
		[XmlElement("Sensor")]
        public List<Sensor> Sensor {
            get {
                return SensorField;
            } 
            set {
                SensorField = value;
                NotifyPropertyChanged("Sensor");
            }
        }

         [XmlIgnore]
         public bool SensorSpecified
         {
            get {
             if(SensorField!=null)
                return SensorField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Sensor> SensorField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Sensor xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Sensor", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Sensor xsd type.")]
    public partial class Sensor : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TypeMeasurement property
        /// </summary>
		[Description("Type from POSC.")]
		[XmlElement("TypeMeasurement")]
        public MeasurementType? TypeMeasurement {
            get {
                return TypeMeasurementField;
            } 
            set {
                TypeMeasurementField = value;
             if(value!=null) 
                 this.TypeMeasurementSpecified = true;
                NotifyPropertyChanged("TypeMeasurement");
            }
        }

        private MeasurementType? TypeMeasurementField; 

        /// <summary>
        /// TypeMeasurementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeMeasurementSpecified {
            get {
                return TypeMeasurementSpecifiedField;
            } 
            set {
                TypeMeasurementSpecifiedField = value;
                NotifyPropertyChanged("TypeMeasurementSpecified");
            }
        }

        private Boolean TypeMeasurementSpecifiedField; 

        /// <summary>
        /// OffsetBot property
        /// </summary>
		[Description("Offset from bottom of measurement while drilling tool.")]
        [ComponentElement]
		[XmlElement("OffsetBot")]
        public LengthMeasure OffsetBot {
            get {
                return OffsetBotField;
            } 
            set {
                OffsetBotField = value;
                NotifyPropertyChanged("OffsetBot");
            }
        }

        private LengthMeasure OffsetBotField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
		[XmlElement("Comments")]
        public String Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private String CommentsField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Sensor")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the HoleOpener xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="HoleOpener", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the HoleOpener xsd type.")]
    public partial class HoleOpener : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// TypeHoleOpener property
        /// </summary>
		[Description("Under reamer or fixed blade.")]
		[XmlElement("TypeHoleOpener")]
        public HoleOpenerType? TypeHoleOpener {
            get {
                return TypeHoleOpenerField;
            } 
            set {
                TypeHoleOpenerField = value;
             if(value!=null) 
                 this.TypeHoleOpenerSpecified = true;
                NotifyPropertyChanged("TypeHoleOpener");
            }
        }

        private HoleOpenerType? TypeHoleOpenerField; 

        /// <summary>
        /// TypeHoleOpenerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeHoleOpenerSpecified {
            get {
                return TypeHoleOpenerSpecifiedField;
            } 
            set {
                TypeHoleOpenerSpecifiedField = value;
                NotifyPropertyChanged("TypeHoleOpenerSpecified");
            }
        }

        private Boolean TypeHoleOpenerSpecifiedField; 

        /// <summary>
        /// NumCutter property
        /// </summary>
		[Description("Number of cutters.")]
		[XmlElement("NumCutter")]
        public Int32? NumCutter {
            get {
                return NumCutterField;
            } 
            set {
                NumCutterField = value;
             if(value!=null) 
                 this.NumCutterSpecified = true;
                NotifyPropertyChanged("NumCutter");
            }
        }

        private Int32? NumCutterField; 

        /// <summary>
        /// NumCutterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumCutterSpecified {
            get {
                return NumCutterSpecifiedField;
            } 
            set {
                NumCutterSpecifiedField = value;
                NotifyPropertyChanged("NumCutterSpecified");
            }
        }

        private Boolean NumCutterSpecifiedField; 

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
		[XmlElement("Manufacturer")]
        public String Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String ManufacturerField; 

        /// <summary>
        /// DiaHoleOpener property
        /// </summary>
		[Description("Diameter of the reamer.")]
        [ComponentElement]
		[XmlElement("DiaHoleOpener")]
        public LengthMeasure DiaHoleOpener {
            get {
                return DiaHoleOpenerField;
            } 
            set {
                DiaHoleOpenerField = value;
                NotifyPropertyChanged("DiaHoleOpener");
            }
        }

        private LengthMeasure DiaHoleOpenerField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Bend xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Bend", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Bend xsd type.")]
    public partial class Bend : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Angle property
        /// </summary>
		[Description("Angle of the bend.")]
        [ComponentElement]
		[XmlElement("Angle")]
        public PlaneAngleMeasure Angle {
            get {
                return AngleField;
            } 
            set {
                AngleField = value;
                NotifyPropertyChanged("Angle");
            }
        }

        private PlaneAngleMeasure AngleField; 

        /// <summary>
        /// DistBendBot property
        /// </summary>
		[Description("Distance of bend from bottom of component.")]
        [ComponentElement]
		[XmlElement("DistBendBot")]
        public LengthMeasure DistBendBot {
            get {
                return DistBendBotField;
            } 
            set {
                DistBendBotField = value;
                NotifyPropertyChanged("DistBendBot");
            }
        }

        private LengthMeasure DistBendBotField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Bend")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Stabilizer xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Stabilizer", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Stabilizer xsd type.")]
    public partial class Stabilizer : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// LenBlade property
        /// </summary>
		[Description("Length of blade.")]
        [ComponentElement]
		[XmlElement("LenBlade")]
        public LengthMeasure LenBlade {
            get {
                return LenBladeField;
            } 
            set {
                LenBladeField = value;
                NotifyPropertyChanged("LenBlade");
            }
        }

        private LengthMeasure LenBladeField; 

        /// <summary>
        /// LenBladeGauge property
        /// </summary>
		[Description("Gauge Length of blade. That is, the length of the blade which measures at the odBladeMx.")]
        [ComponentElement]
		[XmlElement("LenBladeGauge")]
        public LengthMeasure LenBladeGauge {
            get {
                return LenBladeGaugeField;
            } 
            set {
                LenBladeGaugeField = value;
                NotifyPropertyChanged("LenBladeGauge");
            }
        }

        private LengthMeasure LenBladeGaugeField; 

        /// <summary>
        /// OdBladeMx property
        /// </summary>
		[Description("Maximum outer diameter of blade.")]
        [ComponentElement]
		[XmlElement("OdBladeMx")]
        public LengthMeasure OuterDiameterBladeMax {
            get {
                return OdBladeMxField;
            } 
            set {
                OdBladeMxField = value;
                NotifyPropertyChanged("OuterDiameterBladeMax");
            }
        }

        private LengthMeasure OdBladeMxField; 

        /// <summary>
        /// OdBladeMn property
        /// </summary>
		[Description("Minimum outer diameter of blade.")]
        [ComponentElement]
		[XmlElement("OdBladeMn")]
        public LengthMeasure OuterDiameterBladeMin {
            get {
                return OdBladeMnField;
            } 
            set {
                OdBladeMnField = value;
                NotifyPropertyChanged("OuterDiameterBladeMin");
            }
        }

        private LengthMeasure OdBladeMnField; 

        /// <summary>
        /// DistBladeBot property
        /// </summary>
		[Description("Distance of blade bottom from bottom of component.")]
        [ComponentElement]
		[XmlElement("DistBladeBot")]
        public LengthMeasure DistBladeBot {
            get {
                return DistBladeBotField;
            } 
            set {
                DistBladeBotField = value;
                NotifyPropertyChanged("DistBladeBot");
            }
        }

        private LengthMeasure DistBladeBotField; 

        /// <summary>
        /// ShapeBlade property
        /// </summary>
		[Description("Blade shape.")]
		[XmlElement("ShapeBlade")]
        public BladeShapeType? ShapeBlade {
            get {
                return ShapeBladeField;
            } 
            set {
                ShapeBladeField = value;
             if(value!=null) 
                 this.ShapeBladeSpecified = true;
                NotifyPropertyChanged("ShapeBlade");
            }
        }

        private BladeShapeType? ShapeBladeField; 

        /// <summary>
        /// ShapeBladeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ShapeBladeSpecified {
            get {
                return ShapeBladeSpecifiedField;
            } 
            set {
                ShapeBladeSpecifiedField = value;
                NotifyPropertyChanged("ShapeBladeSpecified");
            }
        }

        private Boolean ShapeBladeSpecifiedField; 

        /// <summary>
        /// FactFric property
        /// </summary>
		[Description("Friction factor.")]
		[XmlElement("FactFric")]
        public Double? FactFric {
            get {
                return FactFricField;
            } 
            set {
                FactFricField = value;
             if(value!=null) 
                 this.FactFricSpecified = true;
                NotifyPropertyChanged("FactFric");
            }
        }

        private Double? FactFricField; 

        /// <summary>
        /// FactFricSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean FactFricSpecified {
            get {
                return FactFricSpecifiedField;
            } 
            set {
                FactFricSpecifiedField = value;
                NotifyPropertyChanged("FactFricSpecified");
            }
        }

        private Boolean FactFricSpecifiedField; 

        /// <summary>
        /// TypeBlade property
        /// </summary>
		[Description("Blade type.")]
		[XmlElement("TypeBlade")]
        public BladeType? TypeBlade {
            get {
                return TypeBladeField;
            } 
            set {
                TypeBladeField = value;
             if(value!=null) 
                 this.TypeBladeSpecified = true;
                NotifyPropertyChanged("TypeBlade");
            }
        }

        private BladeType? TypeBladeField; 

        /// <summary>
        /// TypeBladeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeBladeSpecified {
            get {
                return TypeBladeSpecifiedField;
            } 
            set {
                TypeBladeSpecifiedField = value;
                NotifyPropertyChanged("TypeBladeSpecified");
            }
        }

        private Boolean TypeBladeSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Stabilizer")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Motor xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Motor", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Motor xsd type.")]
    public partial class Motor : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// OffsetTool property
        /// </summary>
		[Description("Tool offset from bottom.")]
        [ComponentElement]
		[XmlElement("OffsetTool")]
        public LengthMeasure OffsetTool {
            get {
                return OffsetToolField;
            } 
            set {
                OffsetToolField = value;
                NotifyPropertyChanged("OffsetTool");
            }
        }

        private LengthMeasure OffsetToolField; 

        /// <summary>
        /// PresLossFact property
        /// </summary>
		[Description("Pressure loss factor.")]
		[XmlElement("PresLossFact")]
        public Double? PresLossFact {
            get {
                return PresLossFactField;
            } 
            set {
                PresLossFactField = value;
             if(value!=null) 
                 this.PresLossFactSpecified = true;
                NotifyPropertyChanged("PresLossFact");
            }
        }

        private Double? PresLossFactField; 

        /// <summary>
        /// PresLossFactSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PresLossFactSpecified {
            get {
                return PresLossFactSpecifiedField;
            } 
            set {
                PresLossFactSpecifiedField = value;
                NotifyPropertyChanged("PresLossFactSpecified");
            }
        }

        private Boolean PresLossFactSpecifiedField; 

        /// <summary>
        /// FlowrateMn property
        /// </summary>
		[Description("Minimum flow rate.")]
        [ComponentElement]
		[XmlElement("FlowrateMn")]
        public VolumePerTimeMeasure FlowrateMin {
            get {
                return FlowrateMnField;
            } 
            set {
                FlowrateMnField = value;
                NotifyPropertyChanged("FlowrateMin");
            }
        }

        private VolumePerTimeMeasure FlowrateMnField; 

        /// <summary>
        /// FlowrateMx property
        /// </summary>
		[Description("Maximum flow rate.")]
        [ComponentElement]
		[XmlElement("FlowrateMx")]
        public VolumePerTimeMeasure FlowrateMax {
            get {
                return FlowrateMxField;
            } 
            set {
                FlowrateMxField = value;
                NotifyPropertyChanged("FlowrateMax");
            }
        }

        private VolumePerTimeMeasure FlowrateMxField; 

        /// <summary>
        /// DiaRotorNozzle property
        /// </summary>
		[Description("Diameter of rotor at nozzle.")]
        [ComponentElement]
		[XmlElement("DiaRotorNozzle")]
        public LengthMeasure DiaRotorNozzle {
            get {
                return DiaRotorNozzleField;
            } 
            set {
                DiaRotorNozzleField = value;
                NotifyPropertyChanged("DiaRotorNozzle");
            }
        }

        private LengthMeasure DiaRotorNozzleField; 

        /// <summary>
        /// ClearanceBearBox property
        /// </summary>
		[Description("Clearance inside bearing box.")]
        [ComponentElement]
		[XmlElement("ClearanceBearBox")]
        public LengthMeasure ClearanceBearBox {
            get {
                return ClearanceBearBoxField;
            } 
            set {
                ClearanceBearBoxField = value;
                NotifyPropertyChanged("ClearanceBearBox");
            }
        }

        private LengthMeasure ClearanceBearBoxField; 

        /// <summary>
        /// LobesRotor property
        /// </summary>
		[Description("Number of rotor lobes.")]
		[XmlElement("LobesRotor")]
        public Int32? LobesRotor {
            get {
                return LobesRotorField;
            } 
            set {
                LobesRotorField = value;
             if(value!=null) 
                 this.LobesRotorSpecified = true;
                NotifyPropertyChanged("LobesRotor");
            }
        }

        private Int32? LobesRotorField; 

        /// <summary>
        /// LobesRotorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean LobesRotorSpecified {
            get {
                return LobesRotorSpecifiedField;
            } 
            set {
                LobesRotorSpecifiedField = value;
                NotifyPropertyChanged("LobesRotorSpecified");
            }
        }

        private Boolean LobesRotorSpecifiedField; 

        /// <summary>
        /// LobesStator property
        /// </summary>
		[Description("Number of stator lobes.")]
		[XmlElement("LobesStator")]
        public Int32? LobesStator {
            get {
                return LobesStatorField;
            } 
            set {
                LobesStatorField = value;
             if(value!=null) 
                 this.LobesStatorSpecified = true;
                NotifyPropertyChanged("LobesStator");
            }
        }

        private Int32? LobesStatorField; 

        /// <summary>
        /// LobesStatorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean LobesStatorSpecified {
            get {
                return LobesStatorSpecifiedField;
            } 
            set {
                LobesStatorSpecifiedField = value;
                NotifyPropertyChanged("LobesStatorSpecified");
            }
        }

        private Boolean LobesStatorSpecifiedField; 

        /// <summary>
        /// TypeBearing property
        /// </summary>
		[Description("Type of bearing.")]
		[XmlElement("TypeBearing")]
        public BearingType? TypeBearing {
            get {
                return TypeBearingField;
            } 
            set {
                TypeBearingField = value;
             if(value!=null) 
                 this.TypeBearingSpecified = true;
                NotifyPropertyChanged("TypeBearing");
            }
        }

        private BearingType? TypeBearingField; 

        /// <summary>
        /// TypeBearingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeBearingSpecified {
            get {
                return TypeBearingSpecifiedField;
            } 
            set {
                TypeBearingSpecifiedField = value;
                NotifyPropertyChanged("TypeBearingSpecified");
            }
        }

        private Boolean TypeBearingSpecifiedField; 

        /// <summary>
        /// TempOpMx property
        /// </summary>
		[Description("Maximum operating temperature.")]
        [ComponentElement]
		[XmlElement("TempOpMx")]
        public ThermodynamicTemperatureMeasure TempOperatingMax {
            get {
                return TempOpMxField;
            } 
            set {
                TempOpMxField = value;
                NotifyPropertyChanged("TempOperatingMax");
            }
        }

        private ThermodynamicTemperatureMeasure TempOpMxField; 

        /// <summary>
        /// RotorCatcher property
        /// </summary>
		[Description("Is rotor catcher present?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("RotorCatcher")]
        public Boolean? RotorCatcher {
            get {
                return RotorCatcherField;
            } 
            set {
                RotorCatcherField = value;
             if(value!=null) 
                 this.RotorCatcherSpecified = true;
                NotifyPropertyChanged("RotorCatcher");
            }
        }

        private Boolean? RotorCatcherField; 

        /// <summary>
        /// RotorCatcherSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RotorCatcherSpecified {
            get {
                return RotorCatcherSpecifiedField;
            } 
            set {
                RotorCatcherSpecifiedField = value;
                NotifyPropertyChanged("RotorCatcherSpecified");
            }
        }

        private Boolean RotorCatcherSpecifiedField; 

        /// <summary>
        /// DumpValve property
        /// </summary>
		[Description("Is dump valve present?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("DumpValve")]
        public Boolean? DumpValve {
            get {
                return DumpValveField;
            } 
            set {
                DumpValveField = value;
             if(value!=null) 
                 this.DumpValveSpecified = true;
                NotifyPropertyChanged("DumpValve");
            }
        }

        private Boolean? DumpValveField; 

        /// <summary>
        /// DumpValveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DumpValveSpecified {
            get {
                return DumpValveSpecifiedField;
            } 
            set {
                DumpValveSpecifiedField = value;
                NotifyPropertyChanged("DumpValveSpecified");
            }
        }

        private Boolean DumpValveSpecifiedField; 

        /// <summary>
        /// DiaNozzle property
        /// </summary>
		[Description("Nozzle diameter.")]
        [ComponentElement]
		[XmlElement("DiaNozzle")]
        public LengthMeasure DiaNozzle {
            get {
                return DiaNozzleField;
            } 
            set {
                DiaNozzleField = value;
                NotifyPropertyChanged("DiaNozzle");
            }
        }

        private LengthMeasure DiaNozzleField; 

        /// <summary>
        /// Rotatable property
        /// </summary>
		[Description("Is motor rotatable?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("Rotatable")]
        public Boolean? Rotatable {
            get {
                return RotatableField;
            } 
            set {
                RotatableField = value;
             if(value!=null) 
                 this.RotatableSpecified = true;
                NotifyPropertyChanged("Rotatable");
            }
        }

        private Boolean? RotatableField; 

        /// <summary>
        /// RotatableSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RotatableSpecified {
            get {
                return RotatableSpecifiedField;
            } 
            set {
                RotatableSpecifiedField = value;
                NotifyPropertyChanged("RotatableSpecified");
            }
        }

        private Boolean RotatableSpecifiedField; 

        /// <summary>
        /// BendSettingsMn property
        /// </summary>
		[Description("Minimum bend angle setting.")]
        [ComponentElement]
		[XmlElement("BendSettingsMn")]
        public PlaneAngleMeasure BendSettingsMin {
            get {
                return BendSettingsMnField;
            } 
            set {
                BendSettingsMnField = value;
                NotifyPropertyChanged("BendSettingsMin");
            }
        }

        private PlaneAngleMeasure BendSettingsMnField; 

        /// <summary>
        /// BendSettingsMx property
        /// </summary>
		[Description("Maximum bend angle setting.")]
        [ComponentElement]
		[XmlElement("BendSettingsMx")]
        public PlaneAngleMeasure BendSettingsMax {
            get {
                return BendSettingsMxField;
            } 
            set {
                BendSettingsMxField = value;
                NotifyPropertyChanged("BendSettingsMax");
            }
        }

        private PlaneAngleMeasure BendSettingsMxField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BitRecord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BitRecord", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BitRecord xsd type.")]
    public partial class BitRecord : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// NumBit property
        /// </summary>
		[StringLength(64)]
        [Description("Bit number and rerun number e.g. \"4.1\" for the first rerun of bit 4.")]
		[XmlElement("NumBit")]
        public String NumBit {
            get {
                return NumBitField;
            } 
            set {
                NumBitField = value;
                NotifyPropertyChanged("NumBit");
            }
        }

        private String NumBitField; 

        /// <summary>
        /// DiaBit property
        /// </summary>
		[Required]
        [Description("Diameter of drilled hole.")]
        [ComponentElement]
		[XmlElement("DiaBit")]
        public LengthMeasure DiaBit {
            get {
                return DiaBitField;
            } 
            set {
                DiaBitField = value;
                NotifyPropertyChanged("DiaBit");
            }
        }

        private LengthMeasure DiaBitField; 

        /// <summary>
        /// DiaPassThru property
        /// </summary>
		[Description("Minimum hole or tubing which bit will pass through (for bi-center bits).")]
        [ComponentElement]
		[XmlElement("DiaPassThru")]
        public LengthMeasure DiaPassThru {
            get {
                return DiaPassThruField;
            } 
            set {
                DiaPassThruField = value;
                NotifyPropertyChanged("DiaPassThru");
            }
        }

        private LengthMeasure DiaPassThruField; 

        /// <summary>
        /// DiaPilot property
        /// </summary>
		[Description("Diameter of pilot bit (for bi-center bits).")]
        [ComponentElement]
		[XmlElement("DiaPilot")]
        public LengthMeasure DiaPilot {
            get {
                return DiaPilotField;
            } 
            set {
                DiaPilotField = value;
                NotifyPropertyChanged("DiaPilot");
            }
        }

        private LengthMeasure DiaPilotField; 

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
		[XmlElement("Manufacturer")]
        public String Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String ManufacturerField; 

        /// <summary>
        /// TypeBit property
        /// </summary>
		[Description("Type of bit.")]
		[XmlElement("TypeBit")]
        public BitType? TypeBit {
            get {
                return TypeBitField;
            } 
            set {
                TypeBitField = value;
             if(value!=null) 
                 this.TypeBitSpecified = true;
                NotifyPropertyChanged("TypeBit");
            }
        }

        private BitType? TypeBitField; 

        /// <summary>
        /// TypeBitSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeBitSpecified {
            get {
                return TypeBitSpecifiedField;
            } 
            set {
                TypeBitSpecifiedField = value;
                NotifyPropertyChanged("TypeBitSpecified");
            }
        }

        private Boolean TypeBitSpecifiedField; 

        /// <summary>
        /// CodeMfg property
        /// </summary>
		[StringLength(64)]
        [Description("The manufacturers code for the bit.")]
		[XmlElement("CodeMfg")]
        public String CodeMfg {
            get {
                return CodeMfgField;
            } 
            set {
                CodeMfgField = value;
                NotifyPropertyChanged("CodeMfg");
            }
        }

        private String CodeMfgField; 

        /// <summary>
        /// CodeIADC property
        /// </summary>
		[StringLength(64)]
        [Description("IADC bit code.")]
		[XmlElement("CodeIADC")]
        public String CodeIADC {
            get {
                return CodeIADCField;
            } 
            set {
                CodeIADCField = value;
                NotifyPropertyChanged("CodeIADC");
            }
        }

        private String CodeIADCField; 

        /// <summary>
        /// CondInitInner property
        /// </summary>
		[Description("Condition of inner tooth rows (inner 2/3 of bit) (0-8).")]
		[XmlElement("CondInitInner")]
        public IadcIntegerCode? CondInitInner {
            get {
                return CondInitInnerField;
            } 
            set {
                CondInitInnerField = value;
             if(value!=null) 
                 this.CondInitInnerSpecified = true;
                NotifyPropertyChanged("CondInitInner");
            }
        }

        private IadcIntegerCode? CondInitInnerField; 

        /// <summary>
        /// CondInitInnerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CondInitInnerSpecified {
            get {
                return CondInitInnerSpecifiedField;
            } 
            set {
                CondInitInnerSpecifiedField = value;
                NotifyPropertyChanged("CondInitInnerSpecified");
            }
        }

        private Boolean CondInitInnerSpecifiedField; 

        /// <summary>
        /// CondInitOuter property
        /// </summary>
		[Description("Condition of outer tooth rows (outer 1/3 of bit) (0-8).")]
		[XmlElement("CondInitOuter")]
        public IadcIntegerCode? CondInitOuter {
            get {
                return CondInitOuterField;
            } 
            set {
                CondInitOuterField = value;
             if(value!=null) 
                 this.CondInitOuterSpecified = true;
                NotifyPropertyChanged("CondInitOuter");
            }
        }

        private IadcIntegerCode? CondInitOuterField; 

        /// <summary>
        /// CondInitOuterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CondInitOuterSpecified {
            get {
                return CondInitOuterSpecifiedField;
            } 
            set {
                CondInitOuterSpecifiedField = value;
                NotifyPropertyChanged("CondInitOuterSpecified");
            }
        }

        private Boolean CondInitOuterSpecifiedField; 

        /// <summary>
        /// CondInitDull property
        /// </summary>
		[Description("Overall dull condition from IADC bit wear 2 character codes.")]
		[XmlElement("CondInitDull")]
        public BitDullCode? CondInitDull {
            get {
                return CondInitDullField;
            } 
            set {
                CondInitDullField = value;
             if(value!=null) 
                 this.CondInitDullSpecified = true;
                NotifyPropertyChanged("CondInitDull");
            }
        }

        private BitDullCode? CondInitDullField; 

        /// <summary>
        /// CondInitDullSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CondInitDullSpecified {
            get {
                return CondInitDullSpecifiedField;
            } 
            set {
                CondInitDullSpecifiedField = value;
                NotifyPropertyChanged("CondInitDullSpecified");
            }
        }

        private Boolean CondInitDullSpecifiedField; 

        /// <summary>
        /// CondInitLocation property
        /// </summary>
		[StringLength(64)]
        [Description("Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc).")]
		[XmlElement("CondInitLocation")]
        public String CondInitLocation {
            get {
                return CondInitLocationField;
            } 
            set {
                CondInitLocationField = value;
                NotifyPropertyChanged("CondInitLocation");
            }
        }

        private String CondInitLocationField; 

        /// <summary>
        /// CondInitBearing property
        /// </summary>
		[Description("Condition of bit bearings (integer 0-8 or E, F, N or X)).")]
		[XmlElement("CondInitBearing")]
        public IadcBearingWearCode? CondInitBearing {
            get {
                return CondInitBearingField;
            } 
            set {
                CondInitBearingField = value;
             if(value!=null) 
                 this.CondInitBearingSpecified = true;
                NotifyPropertyChanged("CondInitBearing");
            }
        }

        private IadcBearingWearCode? CondInitBearingField; 

        /// <summary>
        /// CondInitBearingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CondInitBearingSpecified {
            get {
                return CondInitBearingSpecifiedField;
            } 
            set {
                CondInitBearingSpecifiedField = value;
                NotifyPropertyChanged("CondInitBearingSpecified");
            }
        }

        private Boolean CondInitBearingSpecifiedField; 

        /// <summary>
        /// CondInitGauge property
        /// </summary>
		[StringLength(64)]
        [Description("Condition of bit gauge in 1/16 of an inch. I = in gauge, else number of 16ths out of gauge.")]
		[XmlElement("CondInitGauge")]
        public String CondInitGauge {
            get {
                return CondInitGaugeField;
            } 
            set {
                CondInitGaugeField = value;
                NotifyPropertyChanged("CondInitGauge");
            }
        }

        private String CondInitGaugeField; 

        /// <summary>
        /// CondInitOther property
        /// </summary>
		[StringLength(64)]
        [Description("Other comments on bit condition from IADC list (BitDullCode in standard list).")]
		[XmlElement("CondInitOther")]
        public String CondInitOther {
            get {
                return CondInitOtherField;
            } 
            set {
                CondInitOtherField = value;
                NotifyPropertyChanged("CondInitOther");
            }
        }

        private String CondInitOtherField; 

        /// <summary>
        /// CondInitReason property
        /// </summary>
		[Description("Reason bit was pulled from IADC codes.")]
		[XmlElement("CondInitReason")]
        public BitReasonPulled? CondInitReason {
            get {
                return CondInitReasonField;
            } 
            set {
                CondInitReasonField = value;
             if(value!=null) 
                 this.CondInitReasonSpecified = true;
                NotifyPropertyChanged("CondInitReason");
            }
        }

        private BitReasonPulled? CondInitReasonField; 

        /// <summary>
        /// CondInitReasonSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CondInitReasonSpecified {
            get {
                return CondInitReasonSpecifiedField;
            } 
            set {
                CondInitReasonSpecifiedField = value;
                NotifyPropertyChanged("CondInitReasonSpecified");
            }
        }

        private Boolean CondInitReasonSpecifiedField; 

        /// <summary>
        /// CondFinalInner property
        /// </summary>
		[Description("Condition of inner tooth rows (inner 2/3 of bit) (0-8).")]
		[XmlElement("CondFinalInner")]
        public IadcIntegerCode? CondFinalInner {
            get {
                return CondFinalInnerField;
            } 
            set {
                CondFinalInnerField = value;
             if(value!=null) 
                 this.CondFinalInnerSpecified = true;
                NotifyPropertyChanged("CondFinalInner");
            }
        }

        private IadcIntegerCode? CondFinalInnerField; 

        /// <summary>
        /// CondFinalInnerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CondFinalInnerSpecified {
            get {
                return CondFinalInnerSpecifiedField;
            } 
            set {
                CondFinalInnerSpecifiedField = value;
                NotifyPropertyChanged("CondFinalInnerSpecified");
            }
        }

        private Boolean CondFinalInnerSpecifiedField; 

        /// <summary>
        /// CondFinalOuter property
        /// </summary>
		[Description("Condition of outer tooth rows (outer 1/3 of bit) (0-8).")]
		[XmlElement("CondFinalOuter")]
        public IadcIntegerCode? CondFinalOuter {
            get {
                return CondFinalOuterField;
            } 
            set {
                CondFinalOuterField = value;
             if(value!=null) 
                 this.CondFinalOuterSpecified = true;
                NotifyPropertyChanged("CondFinalOuter");
            }
        }

        private IadcIntegerCode? CondFinalOuterField; 

        /// <summary>
        /// CondFinalOuterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CondFinalOuterSpecified {
            get {
                return CondFinalOuterSpecifiedField;
            } 
            set {
                CondFinalOuterSpecifiedField = value;
                NotifyPropertyChanged("CondFinalOuterSpecified");
            }
        }

        private Boolean CondFinalOuterSpecifiedField; 

        /// <summary>
        /// CondFinalDull property
        /// </summary>
		[Description("Overall dull condition from IADC bit wear 2 character codes.")]
		[XmlElement("CondFinalDull")]
        public BitDullCode? CondFinalDull {
            get {
                return CondFinalDullField;
            } 
            set {
                CondFinalDullField = value;
             if(value!=null) 
                 this.CondFinalDullSpecified = true;
                NotifyPropertyChanged("CondFinalDull");
            }
        }

        private BitDullCode? CondFinalDullField; 

        /// <summary>
        /// CondFinalDullSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CondFinalDullSpecified {
            get {
                return CondFinalDullSpecifiedField;
            } 
            set {
                CondFinalDullSpecifiedField = value;
                NotifyPropertyChanged("CondFinalDullSpecified");
            }
        }

        private Boolean CondFinalDullSpecifiedField; 

        /// <summary>
        /// CondFinalLocation property
        /// </summary>
		[StringLength(64)]
        [Description("Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc).")]
		[XmlElement("CondFinalLocation")]
        public String CondFinalLocation {
            get {
                return CondFinalLocationField;
            } 
            set {
                CondFinalLocationField = value;
                NotifyPropertyChanged("CondFinalLocation");
            }
        }

        private String CondFinalLocationField; 

        /// <summary>
        /// CondFinalBearing property
        /// </summary>
		[Description("Condition of bit bearings (integer 0-8 or E, F, N or X).")]
		[XmlElement("CondFinalBearing")]
        public IadcBearingWearCode? CondFinalBearing {
            get {
                return CondFinalBearingField;
            } 
            set {
                CondFinalBearingField = value;
             if(value!=null) 
                 this.CondFinalBearingSpecified = true;
                NotifyPropertyChanged("CondFinalBearing");
            }
        }

        private IadcBearingWearCode? CondFinalBearingField; 

        /// <summary>
        /// CondFinalBearingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CondFinalBearingSpecified {
            get {
                return CondFinalBearingSpecifiedField;
            } 
            set {
                CondFinalBearingSpecifiedField = value;
                NotifyPropertyChanged("CondFinalBearingSpecified");
            }
        }

        private Boolean CondFinalBearingSpecifiedField; 

        /// <summary>
        /// CondFinalGauge property
        /// </summary>
		[StringLength(64)]
        [Description("Condition of bit gauge in 1/16 of a inch. I = in gauge, else number of 16ths out of gauge.")]
		[XmlElement("CondFinalGauge")]
        public String CondFinalGauge {
            get {
                return CondFinalGaugeField;
            } 
            set {
                CondFinalGaugeField = value;
                NotifyPropertyChanged("CondFinalGauge");
            }
        }

        private String CondFinalGaugeField; 

        /// <summary>
        /// CondFinalOther property
        /// </summary>
		[StringLength(64)]
        [Description("Other comments on bit condition from IADC list (BitDullCode in Standard LISTS).")]
		[XmlElement("CondFinalOther")]
        public String CondFinalOther {
            get {
                return CondFinalOtherField;
            } 
            set {
                CondFinalOtherField = value;
                NotifyPropertyChanged("CondFinalOther");
            }
        }

        private String CondFinalOtherField; 

        /// <summary>
        /// CondFinalReason property
        /// </summary>
		[Description("Reason bit was pulled from IADC codes.")]
		[XmlElement("CondFinalReason")]
        public BitReasonPulled? CondFinalReason {
            get {
                return CondFinalReasonField;
            } 
            set {
                CondFinalReasonField = value;
             if(value!=null) 
                 this.CondFinalReasonSpecified = true;
                NotifyPropertyChanged("CondFinalReason");
            }
        }

        private BitReasonPulled? CondFinalReasonField; 

        /// <summary>
        /// CondFinalReasonSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CondFinalReasonSpecified {
            get {
                return CondFinalReasonSpecifiedField;
            } 
            set {
                CondFinalReasonSpecifiedField = value;
                NotifyPropertyChanged("CondFinalReasonSpecified");
            }
        }

        private Boolean CondFinalReasonSpecifiedField; 

        /// <summary>
        /// Drive property
        /// </summary>
		[StringLength(64)]
        [Description("Bit drive type (Motor, rotary table etc).")]
		[XmlElement("Drive")]
        public String Drive {
            get {
                return DriveField;
            } 
            set {
                DriveField = value;
                NotifyPropertyChanged("Drive");
            }
        }

        private String DriveField; 

        /// <summary>
        /// BitClass property
        /// </summary>
		[StringLength(64)]
        [Description("N = new, U = used.")]
		[XmlElement("BitClass")]
        public String BitClass {
            get {
                return BitClassField;
            } 
            set {
                BitClassField = value;
                NotifyPropertyChanged("BitClass");
            }
        }

        private String BitClassField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Cost property
        /// </summary>
		[ComponentElement]
		[XmlElement("Cost")]
        public Cost Cost {
            get {
                return CostField;
            } 
            set {
                CostField = value;
                NotifyPropertyChanged("Cost");
            }
        }

        private Cost CostField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of BitRecord")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MwdTool xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MwdTool", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MwdTool xsd type.")]
    public partial class MwdTool : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// FlowrateMn property
        /// </summary>
		[Description("Minimum flow rate.")]
        [ComponentElement]
		[XmlElement("FlowrateMn")]
        public VolumePerTimeMeasure FlowrateMin {
            get {
                return FlowrateMnField;
            } 
            set {
                FlowrateMnField = value;
                NotifyPropertyChanged("FlowrateMin");
            }
        }

        private VolumePerTimeMeasure FlowrateMnField; 

        /// <summary>
        /// FlowrateMx property
        /// </summary>
		[Description("Maximum flow rate.")]
        [ComponentElement]
		[XmlElement("FlowrateMx")]
        public VolumePerTimeMeasure FlowrateMax {
            get {
                return FlowrateMxField;
            } 
            set {
                FlowrateMxField = value;
                NotifyPropertyChanged("FlowrateMax");
            }
        }

        private VolumePerTimeMeasure FlowrateMxField; 

        /// <summary>
        /// TempMx property
        /// </summary>
		[Description("Maximum Temperature.")]
        [ComponentElement]
		[XmlElement("TempMx")]
        public ThermodynamicTemperatureMeasure TempMax {
            get {
                return TempMxField;
            } 
            set {
                TempMxField = value;
                NotifyPropertyChanged("TempMax");
            }
        }

        private ThermodynamicTemperatureMeasure TempMxField; 

        /// <summary>
        /// IdEquv property
        /// </summary>
		[Description("Equivalent inner diameter.")]
        [ComponentElement]
		[XmlElement("IdEquv")]
        public LengthMeasure IdEquv {
            get {
                return IdEquvField;
            } 
            set {
                IdEquvField = value;
                NotifyPropertyChanged("IdEquv");
            }
        }

        private LengthMeasure IdEquvField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

        /// <summary>
        /// Sensor property
        /// </summary>
		[RecurringElement]
		[XmlElement("Sensor")]
        public List<Sensor> Sensor {
            get {
                return SensorField;
            } 
            set {
                SensorField = value;
                NotifyPropertyChanged("Sensor");
            }
        }

         [XmlIgnore]
         public bool SensorSpecified
         {
            get {
             if(SensorField!=null)
                return SensorField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Sensor> SensorField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Jar xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Jar", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Jar xsd type.")]
    public partial class Jar : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ForUpSet property
        /// </summary>
		[Description("Up set force.")]
        [ComponentElement]
		[XmlElement("ForUpSet")]
        public ForceMeasure ForUpSet {
            get {
                return ForUpSetField;
            } 
            set {
                ForUpSetField = value;
                NotifyPropertyChanged("ForUpSet");
            }
        }

        private ForceMeasure ForUpSetField; 

        /// <summary>
        /// ForDownSet property
        /// </summary>
		[Description("Down set force.")]
        [ComponentElement]
		[XmlElement("ForDownSet")]
        public ForceMeasure ForDownSet {
            get {
                return ForDownSetField;
            } 
            set {
                ForDownSetField = value;
                NotifyPropertyChanged("ForDownSet");
            }
        }

        private ForceMeasure ForDownSetField; 

        /// <summary>
        /// ForUpTrip property
        /// </summary>
		[Description("Up trip force.")]
        [ComponentElement]
		[XmlElement("ForUpTrip")]
        public ForceMeasure ForUpTrip {
            get {
                return ForUpTripField;
            } 
            set {
                ForUpTripField = value;
                NotifyPropertyChanged("ForUpTrip");
            }
        }

        private ForceMeasure ForUpTripField; 

        /// <summary>
        /// ForDownTrip property
        /// </summary>
		[Description("Down trip force.")]
        [ComponentElement]
		[XmlElement("ForDownTrip")]
        public ForceMeasure ForDownTrip {
            get {
                return ForDownTripField;
            } 
            set {
                ForDownTripField = value;
                NotifyPropertyChanged("ForDownTrip");
            }
        }

        private ForceMeasure ForDownTripField; 

        /// <summary>
        /// ForPmpOpen property
        /// </summary>
		[Description("Pump open force.")]
        [ComponentElement]
		[XmlElement("ForPmpOpen")]
        public ForceMeasure ForPmpOpen {
            get {
                return ForPmpOpenField;
            } 
            set {
                ForPmpOpenField = value;
                NotifyPropertyChanged("ForPmpOpen");
            }
        }

        private ForceMeasure ForPmpOpenField; 

        /// <summary>
        /// ForSealFric property
        /// </summary>
		[Description("Seal friction force.")]
        [ComponentElement]
		[XmlElement("ForSealFric")]
        public ForceMeasure ForSealFric {
            get {
                return ForSealFricField;
            } 
            set {
                ForSealFricField = value;
                NotifyPropertyChanged("ForSealFric");
            }
        }

        private ForceMeasure ForSealFricField; 

        /// <summary>
        /// TypeJar property
        /// </summary>
		[Description("The kind of jar.")]
		[XmlElement("TypeJar")]
        public JarType? TypeJar {
            get {
                return TypeJarField;
            } 
            set {
                TypeJarField = value;
             if(value!=null) 
                 this.TypeJarSpecified = true;
                NotifyPropertyChanged("TypeJar");
            }
        }

        private JarType? TypeJarField; 

        /// <summary>
        /// TypeJarSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeJarSpecified {
            get {
                return TypeJarSpecifiedField;
            } 
            set {
                TypeJarSpecifiedField = value;
                NotifyPropertyChanged("TypeJarSpecified");
            }
        }

        private Boolean TypeJarSpecifiedField; 

        /// <summary>
        /// JarAction property
        /// </summary>
		[Description("The jar action.")]
		[XmlElement("JarAction")]
        public JarAction? JarAction {
            get {
                return JarActionField;
            } 
            set {
                JarActionField = value;
             if(value!=null) 
                 this.JarActionSpecified = true;
                NotifyPropertyChanged("JarAction");
            }
        }

        private JarAction? JarActionField; 

        /// <summary>
        /// JarActionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean JarActionSpecified {
            get {
                return JarActionSpecifiedField;
            } 
            set {
                JarActionSpecifiedField = value;
                NotifyPropertyChanged("JarActionSpecified");
            }
        }

        private Boolean JarActionSpecifiedField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ForcePerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ForcePerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ForcePerLengthMeasure xsd type.")]
    public partial class ForcePerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        public ForcePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerLengthMeasure(Double value, ForcePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public ForcePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForcePerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthPerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthPerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthPerLengthMeasure xsd type.")]
    public partial class LengthPerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        public LengthPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthPerLengthMeasure(Double value, LengthPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [XmlAttribute("uom")]
		
        public LengthPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthPerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TubularComponent xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TubularComponent", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TubularComponent xsd type.")]
    public partial class TubularComponent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TypeTubularComponent property
        /// </summary>
		[Required]
        [Description("Connection whose type is tubular")]
		[XmlElement("TypeTubularComponent")]
        public TubularComponentType? TypeTubularComponent {
            get {
                return TypeTubularComponentField;
            } 
            set {
                TypeTubularComponentField = value;
                NotifyPropertyChanged("TypeTubularComponent");
            }
        }

        private TubularComponentType? TypeTubularComponentField; 

        /// <summary>
        /// Sequence property
        /// </summary>
		[Required]
        [Description("The sequence within which the components entered the hole. That is, a sequence number of 1 entered first, 2 entered next, etc.")]
		[XmlElement("Sequence")]
        public Int32? Sequence {
            get {
                return SequenceField;
            } 
            set {
                SequenceField = value;
                NotifyPropertyChanged("Sequence");
            }
        }

        private Int32? SequenceField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("Description of item and details.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// Id property
        /// </summary>
		[Required]
        [Description("Internal diameter of object.")]
        [ComponentElement]
		[XmlElement("Id")]
        public LengthMeasure Id {
            get {
                return IdField;
            } 
            set {
                IdField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private LengthMeasure IdField; 

        /// <summary>
        /// Od property
        /// </summary>
		[Required]
        [Description("Outside diameter of the body of the item.")]
        [ComponentElement]
		[XmlElement("Od")]
        public LengthMeasure OuterDiameter {
            get {
                return OdField;
            } 
            set {
                OdField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure OdField; 

        /// <summary>
        /// OdMx property
        /// </summary>
		[Description("Maximum outside diameter.")]
        [ComponentElement]
		[XmlElement("OdMx")]
        public LengthMeasure OuterDiameterMax {
            get {
                return OdMxField;
            } 
            set {
                OdMxField = value;
                NotifyPropertyChanged("OuterDiameterMax");
            }
        }

        private LengthMeasure OdMxField; 

        /// <summary>
        /// Len property
        /// </summary>
		[Required]
        [Description("Length of the item.")]
        [ComponentElement]
		[XmlElement("Len")]
        public LengthMeasure Len {
            get {
                return LenField;
            } 
            set {
                LenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure LenField; 

        /// <summary>
        /// LenJointAv property
        /// </summary>
		[Description("Average length of joint for tubulars.")]
        [ComponentElement]
		[XmlElement("LenJointAv")]
        public LengthMeasure LenJointAverage {
            get {
                return LenJointAvField;
            } 
            set {
                LenJointAvField = value;
                NotifyPropertyChanged("LenJointAverage");
            }
        }

        private LengthMeasure LenJointAvField; 

        /// <summary>
        /// NumJointStand property
        /// </summary>
		[Description("Number of joints per stand of tubular.")]
		[XmlElement("NumJointStand")]
        public Int32? NumJointStand {
            get {
                return NumJointStandField;
            } 
            set {
                NumJointStandField = value;
             if(value!=null) 
                 this.NumJointStandSpecified = true;
                NotifyPropertyChanged("NumJointStand");
            }
        }

        private Int32? NumJointStandField; 

        /// <summary>
        /// NumJointStandSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumJointStandSpecified {
            get {
                return NumJointStandSpecifiedField;
            } 
            set {
                NumJointStandSpecifiedField = value;
                NotifyPropertyChanged("NumJointStandSpecified");
            }
        }

        private Boolean NumJointStandSpecifiedField; 

        /// <summary>
        /// WtPerLen property
        /// </summary>
		[Description("Weight per unit length.")]
        [ComponentElement]
		[XmlElement("WtPerLen")]
        public MassPerLengthMeasure WeightPerLen {
            get {
                return WtPerLenField;
            } 
            set {
                WtPerLenField = value;
                NotifyPropertyChanged("WeightPerLen");
            }
        }

        private MassPerLengthMeasure WtPerLenField; 

        /// <summary>
        /// Grade property
        /// </summary>
		[StringLength(64)]
        [Description("Material grade for the tubular section.")]
		[XmlElement("Grade")]
        public String Grade {
            get {
                return GradeField;
            } 
            set {
                GradeField = value;
                NotifyPropertyChanged("Grade");
            }
        }

        private String GradeField; 

        /// <summary>
        /// OdDrift property
        /// </summary>
		[Description("Minimum pass through diameter.")]
        [ComponentElement]
		[XmlElement("OdDrift")]
        public LengthMeasure OuterDiameterDrift {
            get {
                return OdDriftField;
            } 
            set {
                OdDriftField = value;
                NotifyPropertyChanged("OuterDiameterDrift");
            }
        }

        private LengthMeasure OdDriftField; 

        /// <summary>
        /// TensYield property
        /// </summary>
		[Description("Yield stress of steel - worn stress.")]
        [ComponentElement]
		[XmlElement("TensYield")]
        public PressureMeasure TensYield {
            get {
                return TensYieldField;
            } 
            set {
                TensYieldField = value;
                NotifyPropertyChanged("TensYield");
            }
        }

        private PressureMeasure TensYieldField; 

        /// <summary>
        /// TqYield property
        /// </summary>
		[Description("Torque at which yield occurs.")]
        [ComponentElement]
		[XmlElement("TqYield")]
        public MomentOfForceMeasure TorqueYield {
            get {
                return TqYieldField;
            } 
            set {
                TqYieldField = value;
                NotifyPropertyChanged("TorqueYield");
            }
        }

        private MomentOfForceMeasure TqYieldField; 

        /// <summary>
        /// StressFatig property
        /// </summary>
		[Description("Fatigue endurance limit.")]
        [ComponentElement]
		[XmlElement("StressFatig")]
        public PressureMeasure StressFatig {
            get {
                return StressFatigField;
            } 
            set {
                StressFatigField = value;
                NotifyPropertyChanged("StressFatig");
            }
        }

        private PressureMeasure StressFatigField; 

        /// <summary>
        /// LenFishneck property
        /// </summary>
		[Description("Fish neck length.")]
        [ComponentElement]
		[XmlElement("LenFishneck")]
        public LengthMeasure LenFishneck {
            get {
                return LenFishneckField;
            } 
            set {
                LenFishneckField = value;
                NotifyPropertyChanged("LenFishneck");
            }
        }

        private LengthMeasure LenFishneckField; 

        /// <summary>
        /// IdFishneck property
        /// </summary>
		[Description("Fish neck inside diameter.")]
        [ComponentElement]
		[XmlElement("IdFishneck")]
        public LengthMeasure InnerDiameterFishneck {
            get {
                return IdFishneckField;
            } 
            set {
                IdFishneckField = value;
                NotifyPropertyChanged("InnerDiameterFishneck");
            }
        }

        private LengthMeasure IdFishneckField; 

        /// <summary>
        /// OdFishneck property
        /// </summary>
		[Description("Fish neck outside diameter.")]
        [ComponentElement]
		[XmlElement("OdFishneck")]
        public LengthMeasure OuterDiameterFishneck {
            get {
                return OdFishneckField;
            } 
            set {
                OdFishneckField = value;
                NotifyPropertyChanged("OuterDiameterFishneck");
            }
        }

        private LengthMeasure OdFishneckField; 

        /// <summary>
        /// Disp property
        /// </summary>
		[Description("Closed end displacement.")]
        [ComponentElement]
		[XmlElement("Disp")]
        public VolumeMeasure Disp {
            get {
                return DispField;
            } 
            set {
                DispField = value;
                NotifyPropertyChanged("Disp");
            }
        }

        private VolumeMeasure DispField; 

        /// <summary>
        /// PresBurst property
        /// </summary>
		[Description("Burst pressure.")]
        [ComponentElement]
		[XmlElement("PresBurst")]
        public PressureMeasure PresBurst {
            get {
                return PresBurstField;
            } 
            set {
                PresBurstField = value;
                NotifyPropertyChanged("PresBurst");
            }
        }

        private PressureMeasure PresBurstField; 

        /// <summary>
        /// PresCollapse property
        /// </summary>
		[Description("Collapse pressure.")]
        [ComponentElement]
		[XmlElement("PresCollapse")]
        public PressureMeasure PresCollapse {
            get {
                return PresCollapseField;
            } 
            set {
                PresCollapseField = value;
                NotifyPropertyChanged("PresCollapse");
            }
        }

        private PressureMeasure PresCollapseField; 

        /// <summary>
        /// ClassService property
        /// </summary>
		[StringLength(64)]
        [Description("Service class.")]
		[XmlElement("ClassService")]
        public String ClassService {
            get {
                return ClassServiceField;
            } 
            set {
                ClassServiceField = value;
                NotifyPropertyChanged("ClassService");
            }
        }

        private String ClassServiceField; 

        /// <summary>
        /// WearWall property
        /// </summary>
		[Description("Wall thickness wear (commonly in percent).")]
        [ComponentElement]
		[XmlElement("WearWall")]
        public LengthPerLengthMeasure WearWall {
            get {
                return WearWallField;
            } 
            set {
                WearWallField = value;
                NotifyPropertyChanged("WearWall");
            }
        }

        private LengthPerLengthMeasure WearWallField; 

        /// <summary>
        /// ThickWall property
        /// </summary>
		[Description("Wall thickness.")]
        [ComponentElement]
		[XmlElement("ThickWall")]
        public LengthMeasure ThickWall {
            get {
                return ThickWallField;
            } 
            set {
                ThickWallField = value;
                NotifyPropertyChanged("ThickWall");
            }
        }

        private LengthMeasure ThickWallField; 

        /// <summary>
        /// ConfigCon property
        /// </summary>
		[Description("Box/Pin configuration.")]
		[XmlElement("ConfigCon")]
        public BoxPinConfig? ConfigCon {
            get {
                return ConfigConField;
            } 
            set {
                ConfigConField = value;
             if(value!=null) 
                 this.ConfigConSpecified = true;
                NotifyPropertyChanged("ConfigCon");
            }
        }

        private BoxPinConfig? ConfigConField; 

        /// <summary>
        /// ConfigConSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ConfigConSpecified {
            get {
                return ConfigConSpecifiedField;
            } 
            set {
                ConfigConSpecifiedField = value;
                NotifyPropertyChanged("ConfigConSpecified");
            }
        }

        private Boolean ConfigConSpecifiedField; 

        /// <summary>
        /// BendStiffness property
        /// </summary>
		[Description("Bending stiffness of tubular.")]
        [ComponentElement]
		[XmlElement("BendStiffness")]
        public ForcePerLengthMeasure BendStiffness {
            get {
                return BendStiffnessField;
            } 
            set {
                BendStiffnessField = value;
                NotifyPropertyChanged("BendStiffness");
            }
        }

        private ForcePerLengthMeasure BendStiffnessField; 

        /// <summary>
        /// AxialStiffness property
        /// </summary>
		[Description("Axial stiffness of tubular.")]
        [ComponentElement]
		[XmlElement("AxialStiffness")]
        public ForcePerLengthMeasure AxialStiffness {
            get {
                return AxialStiffnessField;
            } 
            set {
                AxialStiffnessField = value;
                NotifyPropertyChanged("AxialStiffness");
            }
        }

        private ForcePerLengthMeasure AxialStiffnessField; 

        /// <summary>
        /// TorsionalStiffness property
        /// </summary>
		[Description("Torsional stiffness of tubular.")]
        [ComponentElement]
		[XmlElement("TorsionalStiffness")]
        public ForcePerLengthMeasure TorsionalStiffness {
            get {
                return TorsionalStiffnessField;
            } 
            set {
                TorsionalStiffnessField = value;
                NotifyPropertyChanged("TorsionalStiffness");
            }
        }

        private ForcePerLengthMeasure TorsionalStiffnessField; 

        /// <summary>
        /// TypeMaterial property
        /// </summary>
		[Description("Type of material.")]
		[XmlElement("TypeMaterial")]
        public MaterialType? TypeMaterial {
            get {
                return TypeMaterialField;
            } 
            set {
                TypeMaterialField = value;
             if(value!=null) 
                 this.TypeMaterialSpecified = true;
                NotifyPropertyChanged("TypeMaterial");
            }
        }

        private MaterialType? TypeMaterialField; 

        /// <summary>
        /// TypeMaterialSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeMaterialSpecified {
            get {
                return TypeMaterialSpecifiedField;
            } 
            set {
                TypeMaterialSpecifiedField = value;
                NotifyPropertyChanged("TypeMaterialSpecified");
            }
        }

        private Boolean TypeMaterialSpecifiedField; 

        /// <summary>
        /// DoglegMx property
        /// </summary>
		[Description("Maximum dogleg severity.")]
        [ComponentElement]
		[XmlElement("DoglegMx")]
        public AnglePerLengthMeasure DoglegMax {
            get {
                return DoglegMxField;
            } 
            set {
                DoglegMxField = value;
                NotifyPropertyChanged("DoglegMax");
            }
        }

        private AnglePerLengthMeasure DoglegMxField; 

        /// <summary>
        /// Vendor property
        /// </summary>
		[StringLength(64)]
        [Description("Name of vendor.")]
		[XmlElement("Vendor")]
        public String Vendor {
            get {
                return VendorField;
            } 
            set {
                VendorField = value;
                NotifyPropertyChanged("Vendor");
            }
        }

        private String VendorField; 

        /// <summary>
        /// Model property
        /// </summary>
		[StringLength(64)]
        [Description("Component name from manufacturer.")]
		[XmlElement("Model")]
        public String Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private String ModelField; 

        /// <summary>
        /// NameTag property
        /// </summary>
		[Description("An identification tag for the component tool. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         [XmlIgnore]
         public bool NameTagSpecified
         {
            get {
             if(NameTagField!=null)
                return NameTagField.Count>0?true:false;
             else return false;
            } 
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// AreaNozzleFlow property
        /// </summary>
		[Description("Total area of nozzles.")]
        [ComponentElement]
		[XmlElement("AreaNozzleFlow")]
        public AreaMeasure AreaNozzleFlow {
            get {
                return AreaNozzleFlowField;
            } 
            set {
                AreaNozzleFlowField = value;
                NotifyPropertyChanged("AreaNozzleFlow");
            }
        }

        private AreaMeasure AreaNozzleFlowField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Connection property
        /// </summary>
		[RecurringElement]
		[XmlElement("Connection")]
        public List<Connection> Connection {
            get {
                return ConnectionField;
            } 
            set {
                ConnectionField = value;
                NotifyPropertyChanged("Connection");
            }
        }

         [XmlIgnore]
         public bool ConnectionSpecified
         {
            get {
             if(ConnectionField!=null)
                return ConnectionField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Connection> ConnectionField; 

        /// <summary>
        /// Jar property
        /// </summary>
		
		[XmlElement("Jar")]
        public Jar Jar {
            get {
                return JarField;
            } 
            set {
                JarField = value;
                NotifyPropertyChanged("Jar");
            }
        }

        private Jar JarField; 

        /// <summary>
        /// MwdTool property
        /// </summary>
		[ComponentElement]
		[XmlElement("MwdTool")]
        public MwdTool MwdTool {
            get {
                return MwdToolField;
            } 
            set {
                MwdToolField = value;
                NotifyPropertyChanged("MwdTool");
            }
        }

        private MwdTool MwdToolField; 

        /// <summary>
        /// BitRecord property
        /// </summary>
		[ComponentElement]
		[XmlElement("BitRecord")]
        public BitRecord BitRecord {
            get {
                return BitRecordField;
            } 
            set {
                BitRecordField = value;
                NotifyPropertyChanged("BitRecord");
            }
        }

        private BitRecord BitRecordField; 

        /// <summary>
        /// Motor property
        /// </summary>
		
		[XmlElement("Motor")]
        public Motor Motor {
            get {
                return MotorField;
            } 
            set {
                MotorField = value;
                NotifyPropertyChanged("Motor");
            }
        }

        private Motor MotorField; 

        /// <summary>
        /// Stabilizer property
        /// </summary>
		[RecurringElement]
		[XmlElement("Stabilizer")]
        public List<Stabilizer> Stabilizer {
            get {
                return StabilizerField;
            } 
            set {
                StabilizerField = value;
                NotifyPropertyChanged("Stabilizer");
            }
        }

         [XmlIgnore]
         public bool StabilizerSpecified
         {
            get {
             if(StabilizerField!=null)
                return StabilizerField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Stabilizer> StabilizerField; 

        /// <summary>
        /// Bend property
        /// </summary>
		[RecurringElement]
		[XmlElement("Bend")]
        public List<Bend> Bend {
            get {
                return BendField;
            } 
            set {
                BendField = value;
                NotifyPropertyChanged("Bend");
            }
        }

         [XmlIgnore]
         public bool BendSpecified
         {
            get {
             if(BendField!=null)
                return BendField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Bend> BendField; 

        /// <summary>
        /// HoleOpener property
        /// </summary>
		[ComponentElement]
		[XmlElement("HoleOpener")]
        public HoleOpener HoleOpener {
            get {
                return HoleOpenerField;
            } 
            set {
                HoleOpenerField = value;
                NotifyPropertyChanged("HoleOpener");
            }
        }

        private HoleOpener HoleOpenerField; 

        /// <summary>
        /// RotarySteerableTool property
        /// </summary>
		[ComponentElement]
		[XmlElement("RotarySteerableTool")]
        public RotarySteerableTool RotarySteerableTool {
            get {
                return RotarySteerableToolField;
            } 
            set {
                RotarySteerableToolField = value;
                NotifyPropertyChanged("RotarySteerableTool");
            }
        }

        private RotarySteerableTool RotarySteerableToolField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

        /// <summary>
        /// Nozzle property
        /// </summary>
		[RecurringElement]
		[XmlElement("Nozzle")]
        public List<Nozzle> Nozzle {
            get {
                return NozzleField;
            } 
            set {
                NozzleField = value;
                NotifyPropertyChanged("Nozzle");
            }
        }

         [XmlIgnore]
         public bool NozzleSpecified
         {
            get {
             if(NozzleField!=null)
                return NozzleField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Nozzle> NozzleField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of TubularComponent")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RefWellWellboreRig xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RefWellWellboreRig", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RefWellWellboreRig xsd type.")]
    public partial class RefWellWellboreRig : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// RigReference property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the rig with which there is a relationship.")]
		[XmlElement("RigReference")]
        public String RigReference {
            get {
                return RigReferenceField;
            } 
            set {
                RigReferenceField = value;
                NotifyPropertyChanged("RigReference");
            }
        }

        private String RigReferenceField; 

        /// <summary>
        /// WellboreParent property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the wellbore that contains the rigReference. This is not needed unless the referenced rig is outside the  context of a common parent wellbore.")]
		[XmlElement("WellboreParent")]
        public String WellboreParent {
            get {
                return WellboreParentField;
            } 
            set {
                WellboreParentField = value;
                NotifyPropertyChanged("WellboreParent");
            }
        }

        private String WellboreParentField; 

        /// <summary>
        /// WellParent property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the well that contains the wellboreParent. This is not needed unless the referenced wellbore is outside the  context of a common parent well.")]
		[XmlElement("WellParent")]
        public String WellParent {
            get {
                return WellParentField;
            } 
            set {
                WellParentField = value;
                NotifyPropertyChanged("WellParent");
            }
        }

        private String WellParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RefWellWellbore xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RefWellWellbore", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RefWellWellbore xsd type.")]
    public partial class RefWellWellbore : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// WellboreReference property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer the wellbore with which there is a relationship.")]
		[XmlElement("WellboreReference")]
        public String WellboreReference {
            get {
                return WellboreReferenceField;
            } 
            set {
                WellboreReferenceField = value;
                NotifyPropertyChanged("WellboreReference");
            }
        }

        private String WellboreReferenceField; 

        /// <summary>
        /// WellParent property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the well that contains the wellboreReference. This is not needed unless the referenced wellbore is outside the  context of a common parent well.")]
		[XmlElement("WellParent")]
        public String WellParent {
            get {
                return WellParentField;
            } 
            set {
                WellParentField = value;
                NotifyPropertyChanged("WellParent");
            }
        }

        private String WellParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellDatum xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellDatum", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the WellDatum xsd type.")]
    public partial class WellDatum : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The human understandable contextual name of the reference datum.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Code property
        /// </summary>
		[Description("The code value that represents the type of reference datum.  This may represent a point on a device (e.g., kelly bushing) or it may represent  a vertical reference datum (e.g., mean sea level).")]
		[XmlElement("Code")]
        public ElevCodeEnum? Code {
            get {
                return CodeField;
            } 
            set {
                CodeField = value;
             if(value!=null) 
                 this.CodeSpecified = true;
                NotifyPropertyChanged("Code");
            }
        }

        private ElevCodeEnum? CodeField; 

        /// <summary>
        /// CodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CodeSpecified {
            get {
                return CodeSpecifiedField;
            } 
            set {
                CodeSpecifiedField = value;
                NotifyPropertyChanged("CodeSpecified");
            }
        }

        private Boolean CodeSpecifiedField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[Description("Since various activities may use different points as  measurement datums, it is useful to characterize the point based on its usage.  A well reference datum may have more than one such characterization.  For example, it may be the datum used by the driller and logger for measuring  their depths. Example usage values would be 'permanent','driller', 'logger' 'WRP' (well reference point) and 'SRP' (site reference point).")]
        [RecurringElement]
		[XmlElement("Kind")]
        public List<String> Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

         [XmlIgnore]
         public bool KindSpecified
         {
            get {
             if(KindField!=null)
                return KindField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> KindField; 

        /// <summary>
        /// MeasuredDepth property
        /// </summary>
		[Description("The measured depth coordinate of this reference datum as measured from another datum. The measured depth datum should either be the same as the elevation datum or it should be relatable to the elevation datum through other datums. Positive moving toward the bottomhole from the measured depth datum. This should be given when a local reference is \"downhole\",  such as a kickoff point or ocean bottom template, and the borehole may not be vertical. If a Depth is given then an Elevation should also be given.")]
        [ComponentElement]
		[XmlElement("MeasuredDepth")]
        public MeasuredDepthCoord MeasuredDepth {
            get {
                return MeasuredDepthField;
            } 
            set {
                MeasuredDepthField = value;
                NotifyPropertyChanged("MeasuredDepth");
            }
        }

        private MeasuredDepthCoord MeasuredDepthField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A contextual description of the well reference datum.")]
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[ComponentElement]
		[XmlElement("Wellbore")]
        public RefWellWellbore Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private RefWellWellbore WellboreField; 

        /// <summary>
        /// Rig property
        /// </summary>
		[ComponentElement]
		[XmlElement("Rig")]
        public RefWellWellboreRig Rig {
            get {
                return RigField;
            } 
            set {
                RigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private RefWellWellboreRig RigField; 

        /// <summary>
        /// Elevation property
        /// </summary>
		[ComponentElement]
		[XmlElement("Elevation")]
        public WellElevationCoord Elevation {
            get {
                return ElevationField;
            } 
            set {
                ElevationField = value;
                NotifyPropertyChanged("Elevation");
            }
        }

        private WellElevationCoord ElevationField; 

        /// <summary>
        /// HorizontalLocation property
        /// </summary>
		[ComponentElement]
		[XmlElement("HorizontalLocation")]
        public AbstractWellLocation HorizontalLocation {
            get {
                return HorizontalLocationField;
            } 
            set {
                HorizontalLocationField = value;
                NotifyPropertyChanged("HorizontalLocation");
            }
        }

        private AbstractWellLocation HorizontalLocationField; 

        /// <summary>
        /// Crs property
        /// </summary>
		[Required]
        [Description("Points to one of the optional for a geodetic vertical CRS, Allows the datum to be positioned in real-world space.l")]
		[XmlElement("Crs")]
        public AbstractVerticalCrs Crs {
            get {
                return CrsField;
            } 
            set {
                CrsField = value;
                NotifyPropertyChanged("Crs");
            }
        }

        private AbstractVerticalCrs CrsField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for an instance of a well datum.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractVerticalCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalEpsgCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalUnknownCrs))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractVerticalCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractVerticalCrs xsd type.")]
    public abstract partial class AbstractVerticalCrs : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalGmlCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalGmlCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalGmlCrs xsd type.")]
    public partial class VerticalGmlCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// GmlVerticalCrsDefinition property
        /// </summary>
		[ComponentElement]
		[XmlElement("GmlVerticalCrsDefinition")]
        public VerticalCRSType GmlVerticalCrsDefinition {
            get {
                return GmlVerticalCrsDefinitionField;
            } 
            set {
                GmlVerticalCrsDefinitionField = value;
                NotifyPropertyChanged("GmlVerticalCrsDefinition");
            }
        }

        private VerticalCRSType GmlVerticalCrsDefinitionField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalEpsgCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalEpsgCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalEpsgCrs xsd type.")]
    public partial class VerticalEpsgCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// EpsgCode property
        /// </summary>
		
		[XmlElement("EpsgCode")]
        public Int64? EpsgCode {
            get {
                return EpsgCodeField;
            } 
            set {
                EpsgCodeField = value;
                NotifyPropertyChanged("EpsgCode");
            }
        }

        private Int64? EpsgCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalWktCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalWktCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalWktCrs xsd type.")]
    public partial class VerticalWktCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// WellKnownText property
        /// </summary>
		
		[XmlElement("WellKnownText")]
        public String WellKnownText {
            get {
                return WellKnownTextField;
            } 
            set {
                WellKnownTextField = value;
                NotifyPropertyChanged("WellKnownText");
            }
        }

        private String WellKnownTextField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalLocalAuthorityCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalLocalAuthorityCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalLocalAuthorityCrs xsd type.")]
    public partial class VerticalLocalAuthorityCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// LocalAuthorityCrsName property
        /// </summary>
		
		[XmlElement("LocalAuthorityCrsName")]
        public String LocalAuthorityCrsName {
            get {
                return LocalAuthorityCrsNameField;
            } 
            set {
                LocalAuthorityCrsNameField = value;
                NotifyPropertyChanged("LocalAuthorityCrsName");
            }
        }

        private String LocalAuthorityCrsNameField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalUnknownCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalUnknownCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalUnknownCrs xsd type.")]
    public partial class VerticalUnknownCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// Unknown property
        /// </summary>
		
		[XmlElement("Unknown")]
        public String Unknown {
            get {
                return UnknownField;
            } 
            set {
                UnknownField = value;
                NotifyPropertyChanged("Unknown");
            }
        }

        private String UnknownField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReferencePoint xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReferencePoint", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ReferencePoint xsd type.")]
    public partial class ReferencePoint : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the point.")]
		[XmlElement("Name")]
        public String Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private String NameField; 

        /// <summary>
        /// Type property
        /// </summary>
		[StringLength(64)]
        [Description("The kind of point. For example,  'well reference point', 'platform reference point', 'sea surface', 'sea bottom'.")]
		[XmlElement("Type")]
        public String Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String TypeField; 

        /// <summary>
        /// MeasuredDepth property
        /// </summary>
		[Description("The measured depth coordinate of this reference point. Positive moving toward the bottomhole from the measured depth datum. This should be given when the reference is \"downhole\", such as an ocean  bottom template, or when the reference point is also used as a vertical well datum. The measured depth value can be used to determine if the reference point and a vertical well datum are at the same point.")]
        [ComponentElement]
		[XmlElement("MeasuredDepth")]
        public MeasuredDepthCoord MeasuredDepth {
            get {
                return MeasuredDepthField;
            } 
            set {
                MeasuredDepthField = value;
                NotifyPropertyChanged("MeasuredDepth");
            }
        }

        private MeasuredDepthCoord MeasuredDepthField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of the point.")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
            get {
             if(ExtensionNameValueField!=null)
                return ExtensionNameValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Elevation property
        /// </summary>
		[ComponentElement]
		[XmlElement("Elevation")]
        public WellElevationCoord Elevation {
            get {
                return ElevationField;
            } 
            set {
                ElevationField = value;
                NotifyPropertyChanged("Elevation");
            }
        }

        private WellElevationCoord ElevationField; 

        /// <summary>
        /// Location property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("Location")]
        public List<AbstractWellLocation> Location {
            get {
                return LocationField;
            } 
            set {
                LocationField = value;
                NotifyPropertyChanged("Location");
            }
        }

         [XmlIgnore]
         public bool LocationSpecified
         {
            get {
             if(LocationField!=null)
                return LocationField.Count>0?true:false;
             else return false;
            } 
         }
        private List<AbstractWellLocation> LocationField; 

		/// <summary>
        /// uid property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for an instance of a reference point.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DistanceEastWest xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DistanceEastWest", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DistanceEastWest xsd type.")]
    public partial class DistanceEastWest : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DistanceEastWest class.
        /// </summary>
        public DistanceEastWest() {}

        /// <summary>
        /// Initializes a new instance of the DistanceEastWest class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DistanceEastWest(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Description("The unit of measure of the East-West distance.")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
             if(value!=null) 
                 this.UomSpecified = true;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

        /// <summary>
        /// uomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UomSpecified {
            get {
                return uomSpecifiedField;
            } 
            set {
                uomSpecifiedField = value;
                NotifyPropertyChanged("UomSpecified");
            }
        }

        private Boolean uomSpecifiedField; 

		/// <summary>
        /// reference property
        /// </summary>
		[Description("East or west direction.")]
        [XmlAttribute("reference")]
		
        public EastOrWest Reference {
            get {
                return referenceField;
            } 
            set {
                referenceField = value;
             if(value!=null) 
                 this.ReferenceSpecified = true;
                NotifyPropertyChanged("Reference");
            }
        }

        private EastOrWest referenceField; 

        /// <summary>
        /// referenceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ReferenceSpecified {
            get {
                return referenceSpecifiedField;
            } 
            set {
                referenceSpecifiedField = value;
                NotifyPropertyChanged("ReferenceSpecified");
            }
        }

        private Boolean referenceSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DistanceNorthSouth xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DistanceNorthSouth", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DistanceNorthSouth xsd type.")]
    public partial class DistanceNorthSouth : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DistanceNorthSouth class.
        /// </summary>
        public DistanceNorthSouth() {}

        /// <summary>
        /// Initializes a new instance of the DistanceNorthSouth class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DistanceNorthSouth(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Description("The unit of measure of the North-South distance.")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
             if(value!=null) 
                 this.UomSpecified = true;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

        /// <summary>
        /// uomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UomSpecified {
            get {
                return uomSpecifiedField;
            } 
            set {
                uomSpecifiedField = value;
                NotifyPropertyChanged("UomSpecified");
            }
        }

        private Boolean uomSpecifiedField; 

		/// <summary>
        /// reference property
        /// </summary>
		[Description("North or south direction.")]
        [XmlAttribute("reference")]
		
        public NorthOrSouth Reference {
            get {
                return referenceField;
            } 
            set {
                referenceField = value;
             if(value!=null) 
                 this.ReferenceSpecified = true;
                NotifyPropertyChanged("Reference");
            }
        }

        private NorthOrSouth referenceField; 

        /// <summary>
        /// referenceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ReferenceSpecified {
            get {
                return referenceSpecifiedField;
            } 
            set {
                referenceSpecifiedField = value;
                NotifyPropertyChanged("ReferenceSpecified");
            }
        }

        private Boolean referenceSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public Double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PublicLandSurveySystem xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PublicLandSurveySystem", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PublicLandSurveySystem xsd type.")]
    public partial class PublicLandSurveySystem : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PrincipalMeridian property
        /// </summary>
		[Description("Principal meridian for this location.")]
		[XmlElement("PrincipalMeridian")]
        public PrincipalMeridian? PrincipalMeridian {
            get {
                return PrincipalMeridianField;
            } 
            set {
                PrincipalMeridianField = value;
             if(value!=null) 
                 this.PrincipalMeridianSpecified = true;
                NotifyPropertyChanged("PrincipalMeridian");
            }
        }

        private PrincipalMeridian? PrincipalMeridianField; 

        /// <summary>
        /// PrincipalMeridianSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PrincipalMeridianSpecified {
            get {
                return PrincipalMeridianSpecifiedField;
            } 
            set {
                PrincipalMeridianSpecifiedField = value;
                NotifyPropertyChanged("PrincipalMeridianSpecified");
            }
        }

        private Boolean PrincipalMeridianSpecifiedField; 

        /// <summary>
        /// Range property
        /// </summary>
		[Description("Range number.")]
		[XmlElement("Range")]
        public Int32? Range {
            get {
                return RangeField;
            } 
            set {
                RangeField = value;
             if(value!=null) 
                 this.RangeSpecified = true;
                NotifyPropertyChanged("Range");
            }
        }

        private Int32? RangeField; 

        /// <summary>
        /// RangeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RangeSpecified {
            get {
                return RangeSpecifiedField;
            } 
            set {
                RangeSpecifiedField = value;
                NotifyPropertyChanged("RangeSpecified");
            }
        }

        private Boolean RangeSpecifiedField; 

        /// <summary>
        /// RangeDir property
        /// </summary>
		[Description("Range direction.")]
		[XmlElement("RangeDir")]
        public EastOrWest? RangeDir {
            get {
                return RangeDirField;
            } 
            set {
                RangeDirField = value;
             if(value!=null) 
                 this.RangeDirSpecified = true;
                NotifyPropertyChanged("RangeDir");
            }
        }

        private EastOrWest? RangeDirField; 

        /// <summary>
        /// RangeDirSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RangeDirSpecified {
            get {
                return RangeDirSpecifiedField;
            } 
            set {
                RangeDirSpecifiedField = value;
                NotifyPropertyChanged("RangeDirSpecified");
            }
        }

        private Boolean RangeDirSpecifiedField; 

        /// <summary>
        /// Township property
        /// </summary>
		[Description("Township number.")]
		[XmlElement("Township")]
        public Int32? Township {
            get {
                return TownshipField;
            } 
            set {
                TownshipField = value;
             if(value!=null) 
                 this.TownshipSpecified = true;
                NotifyPropertyChanged("Township");
            }
        }

        private Int32? TownshipField; 

        /// <summary>
        /// TownshipSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TownshipSpecified {
            get {
                return TownshipSpecifiedField;
            } 
            set {
                TownshipSpecifiedField = value;
                NotifyPropertyChanged("TownshipSpecified");
            }
        }

        private Boolean TownshipSpecifiedField; 

        /// <summary>
        /// TownshipDir property
        /// </summary>
		[Description("Township direction.")]
		[XmlElement("TownshipDir")]
        public NorthOrSouth? TownshipDir {
            get {
                return TownshipDirField;
            } 
            set {
                TownshipDirField = value;
             if(value!=null) 
                 this.TownshipDirSpecified = true;
                NotifyPropertyChanged("TownshipDir");
            }
        }

        private NorthOrSouth? TownshipDirField; 

        /// <summary>
        /// TownshipDirSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TownshipDirSpecified {
            get {
                return TownshipDirSpecifiedField;
            } 
            set {
                TownshipDirSpecifiedField = value;
                NotifyPropertyChanged("TownshipDirSpecified");
            }
        }

        private Boolean TownshipDirSpecifiedField; 

        /// <summary>
        /// Section property
        /// </summary>
		[RegularExpression("[+]?([1-9]|[1-2][0-9]|3[0-6])\\.?[0-9]?")]
        [StringLength(64)]
        [Description("Section number.")]
		[XmlElement("Section")]
        public String Section {
            get {
                return SectionField;
            } 
            set {
                SectionField = value;
                NotifyPropertyChanged("Section");
            }
        }

        private String SectionField; 

        /// <summary>
        /// QuarterSection property
        /// </summary>
		[RegularExpression("(NE|NW|SW|SE|N2|S2|E2|W2|C|LT[0-9]{2,2}|TR[a-zA-Z0-9]{1,2}){1,3}")]
        [StringLength(64)]
        [Description("The location of the well within the section,  with the primary component listed first. Spot location will be made some from combination of the following codes: NE, NW, SW, SE, N2, S2, E2, W2, C (center quarter),  LTxx (where xx represents a two digit lot designation),  TRzz (where zz represents a one or two character trac designation).  Free format will allow for entries such as NESW (southwest quarter of northeast quarter),  E2NESE (southeast quarter of northeast quarter of east half), CNE (northeast quarter of center quarter), etc.")]
		[XmlElement("QuarterSection")]
        public String QuarterSection {
            get {
                return QuarterSectionField;
            } 
            set {
                QuarterSectionField = value;
                NotifyPropertyChanged("QuarterSection");
            }
        }

        private String QuarterSectionField; 

        /// <summary>
        /// QuarterTownship property
        /// </summary>
		[RegularExpression("NE|NW|SW|SE")]
        [StringLength(64)]
        [Description("Quarter township.")]
		[XmlElement("QuarterTownship")]
        public String QuarterTownship {
            get {
                return QuarterTownshipField;
            } 
            set {
                QuarterTownshipField = value;
                NotifyPropertyChanged("QuarterTownship");
            }
        }

        private String QuarterTownshipField; 

        /// <summary>
        /// FootageNS property
        /// </summary>
		[ComponentElement]
		[XmlElement("FootageNS")]
        public DistanceNorthSouth FootageNS {
            get {
                return FootageNSField;
            } 
            set {
                FootageNSField = value;
                NotifyPropertyChanged("FootageNS");
            }
        }

        private DistanceNorthSouth FootageNSField; 

        /// <summary>
        /// FootageEW property
        /// </summary>
		[ComponentElement]
		[XmlElement("FootageEW")]
        public DistanceEastWest FootageEW {
            get {
                return FootageEWField;
            } 
            set {
                FootageEWField = value;
                NotifyPropertyChanged("FootageEW");
            }
        }

        private DistanceEastWest FootageEWField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FailingRule xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FailingRule", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the FailingRule xsd type.")]
    public partial class FailingRule : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// RuleId property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Identifier of the atomic rule being checked against the data.")]
		[XmlElement("RuleId")]
        public String RuleId {
            get {
                return RuleIdField;
            } 
            set {
                RuleIdField = value;
                NotifyPropertyChanged("RuleId");
            }
        }

        private String RuleIdField; 

        /// <summary>
        /// RuleName property
        /// </summary>
		[StringLength(2000)]
        [Description("Human-readable name of the atomic rule being checked against the data.")]
		[XmlElement("RuleName")]
        public String RuleName {
            get {
                return RuleNameField;
            } 
            set {
                RuleNameField = value;
                NotifyPropertyChanged("RuleName");
            }
        }

        private String RuleNameField; 

        /// <summary>
        /// Severity property
        /// </summary>
		[StringLength(64)]
        [Description("Severity of the failure. This could be used to indicate that a rule is a high-priority rule whose failure is considered as severe or could be used to indicate just how badly a rule was contravened.  The meaning of this field should be standardized within a company to maximize its utility.")]
		[XmlElement("Severity")]
        public String Severity {
            get {
                return SeverityField;
            } 
            set {
                SeverityField = value;
                NotifyPropertyChanged("Severity");
            }
        }

        private String SeverityField; 

        /// <summary>
        /// FailingRuleExtensions property
        /// </summary>
		[Description("This allows extending the FailingRule class with as many arbitrary name-value pairs as is required at run-time.  Uses for this might include why the rule failed or by how much.")]
        [RecurringElement]
		[XmlElement("FailingRuleExtensions")]
        public List<ExtensionNameValue> FailingRuleExtensions {
            get {
                return FailingRuleExtensionsField;
            } 
            set {
                FailingRuleExtensionsField = value;
                NotifyPropertyChanged("FailingRuleExtensions");
            }
        }

         [XmlIgnore]
         public bool FailingRuleExtensionsSpecified
         {
            get {
             if(FailingRuleExtensionsField!=null)
                return FailingRuleExtensionsField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> FailingRuleExtensionsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IndexRange xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IndexRange", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IndexRange xsd type.")]
    public partial class IndexRange : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// IndexMinimum property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The minimum index for the range over which the referenced data's conformance with the policy is being assessed.")]
		[XmlElement("IndexMinimum")]
        public String IndexMinimum {
            get {
                return IndexMinimumField;
            } 
            set {
                IndexMinimumField = value;
                NotifyPropertyChanged("IndexMinimum");
            }
        }

        private String IndexMinimumField; 

        /// <summary>
        /// IndexMaximum property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The maximum index for the range over which the referenced data's conformance with the policy is being assessed.")]
		[XmlElement("IndexMaximum")]
        public String IndexMaximum {
            get {
                return IndexMaximumField;
            } 
            set {
                IndexMaximumField = value;
                NotifyPropertyChanged("IndexMaximum");
            }
        }

        private String IndexMaximumField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the WellboreMarkerSet xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the WellboreMarkerSet xsd type.")]
    public partial class WellboreMarkerSet : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MarkerSetInterval property
        /// </summary>
		[Required]
        [Description("Measured depth interval which contains the shallowest and deepest formation markers. This is computed by the server and is read only.")]
        [ComponentElement]
		[XmlElement("MarkerSetInterval")]
        public MdInterval MarkerSetInterval {
            get {
                return MarkerSetIntervalField;
            } 
            set {
                MarkerSetIntervalField = value;
                NotifyPropertyChanged("MarkerSetInterval");
            }
        }

        private MdInterval MarkerSetIntervalField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// FormationMarker property
        /// </summary>
		[RecurringElement]
		[XmlElement("FormationMarker")]
        public List<WellboreMarker> FormationMarker {
            get {
                return FormationMarkerField;
            } 
            set {
                FormationMarkerField = value;
                NotifyPropertyChanged("FormationMarker");
            }
        }

         [XmlIgnore]
         public bool FormationMarkerSpecified
         {
            get {
             if(FormationMarkerField!=null)
                return FormationMarkerField.Count>0?true:false;
             else return false;
            } 
         }
        private List<WellboreMarker> FormationMarkerField; 


    } //here

    /// <summary>
    /// This class represents the WellboreMarker xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the WellboreMarker xsd type.")]
    public partial class WellboreMarker : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ChronostratigraphicTop property
        /// </summary>
		[Description("The name of a Geochronology for this marker, with the \"kind\" attribute specifying the geochronological time span")]
        [ComponentElement]
		[XmlElement("ChronostratigraphicTop")]
        public GeochronologicalUnit ChronostratigraphicTop {
            get {
                return ChronostratigraphicTopField;
            } 
            set {
                ChronostratigraphicTopField = value;
                NotifyPropertyChanged("ChronostratigraphicTop");
            }
        }

        private GeochronologicalUnit ChronostratigraphicTopField; 

        /// <summary>
        /// LithostratigraphicTop property
        /// </summary>
		[Description("Specifies the unit of lithostratigraphy.")]
        [ComponentElement]
		[XmlElement("LithostratigraphicTop")]
        public LithostratigraphicUnit LithostratigraphicTop {
            get {
                return LithostratigraphicTopField;
            } 
            set {
                LithostratigraphicTopField = value;
                NotifyPropertyChanged("LithostratigraphicTop");
            }
        }

        private LithostratigraphicUnit LithostratigraphicTopField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Required]
        [Description("Logged measured depth at the top of marker.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("Logged true vertical depth at top of marker")]
        [ComponentElement]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// DipAngle property
        /// </summary>
		[Description("Angle of dip with respect to horizontal.")]
        [ComponentElement]
		[XmlElement("DipAngle")]
        public PlaneAngleMeasure DipAngle {
            get {
                return DipAngleField;
            } 
            set {
                DipAngleField = value;
                NotifyPropertyChanged("DipAngle");
            }
        }

        private PlaneAngleMeasure DipAngleField; 

        /// <summary>
        /// DipDirection property
        /// </summary>
		[Description("Interpreted downdip direction.")]
        [ComponentElement]
		[XmlElement("DipDirection")]
        public PlaneAngleMeasure DipDirection {
            get {
                return DipDirectionField;
            } 
            set {
                DipDirectionField = value;
                NotifyPropertyChanged("DipDirection");
            }
        }

        private PlaneAngleMeasure DipDirectionField; 

        /// <summary>
        /// Trajectory property
        /// </summary>
		[ComponentElement]
		[XmlElement("Trajectory")]
        public DataObjectReference Trajectory {
            get {
                return TrajectoryField;
            } 
            set {
                TrajectoryField = value;
                NotifyPropertyChanged("Trajectory");
            }
        }

        private DataObjectReference TrajectoryField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the WellboreCompletion xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellboreCompletion xsd type.")]
    public partial class WellboreCompletion : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// NameWellCompletion property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well completion that contains the completion.")]
		[XmlElement("NameWellCompletion")]
        public String NameWellCompletion {
            get {
                return NameWellCompletionField;
            } 
            set {
                NameWellCompletionField = value;
                NotifyPropertyChanged("NameWellCompletion");
            }
        }

        private String NameWellCompletionField; 

        /// <summary>
        /// WellboreCompletionNo property
        /// </summary>
		[StringLength(64)]
        [Description("CompletionNo, etc API14")]
		[XmlElement("WellboreCompletionNo")]
        public String WellboreCompletionNo {
            get {
                return WellboreCompletionNoField;
            } 
            set {
                WellboreCompletionNoField = value;
                NotifyPropertyChanged("WellboreCompletionNo");
            }
        }

        private String WellboreCompletionNoField; 

        /// <summary>
        /// WellboreCompletionAlias property
        /// </summary>
		[StringLength(64)]
        [Description("Preferred alias name")]
		[XmlElement("WellboreCompletionAlias")]
        public String WellboreCompletionAlias {
            get {
                return WellboreCompletionAliasField;
            } 
            set {
                WellboreCompletionAliasField = value;
                NotifyPropertyChanged("WellboreCompletionAlias");
            }
        }

        private String WellboreCompletionAliasField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [RecurringElement]
		[XmlElement("EventHistory")]
        public List<EventInfo> EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

         [XmlIgnore]
         public bool EventHistorySpecified
         {
            get {
             if(EventHistoryField!=null)
                return EventHistoryField.Count>0?true:false;
             else return false;
            } 
         }
        private List<EventInfo> EventHistoryField; 

        /// <summary>
        /// WellboreCompletionDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Completion Date")]
		[XmlElement("WellboreCompletionDate")]
        public String WellboreCompletionDate {
            get {
                return WellboreCompletionDateField;
            } 
            set {
                WellboreCompletionDateField = value;
                NotifyPropertyChanged("WellboreCompletionDate");
            }
        }

        private String WellboreCompletionDateField; 

        /// <summary>
        /// SuffixAPI property
        /// </summary>
		[StringLength(64)]
        [Description("API suffix.")]
		[XmlElement("SuffixAPI")]
        public String SuffixAPI {
            get {
                return SuffixAPIField;
            } 
            set {
                SuffixAPIField = value;
                NotifyPropertyChanged("SuffixAPI");
            }
        }

        private String SuffixAPIField; 

        /// <summary>
        /// CompletionMdInterval property
        /// </summary>
		[Description("Overall measured depth interval for this wellbore completion.")]
        [ComponentElement]
		[XmlElement("CompletionMdInterval")]
        public MdInterval CompletionMDInterval {
            get {
                return CompletionMdIntervalField;
            } 
            set {
                CompletionMdIntervalField = value;
                NotifyPropertyChanged("CompletionMDInterval");
            }
        }

        private MdInterval CompletionMdIntervalField; 

        /// <summary>
        /// CompletionTvdInterval property
        /// </summary>
		[Description("Overall true vertical depth interval for this wellbore completion.")]
        [ComponentElement]
		[XmlElement("CompletionTvdInterval")]
        public TvdInterval CompletionTvdInterval {
            get {
                return CompletionTvdIntervalField;
            } 
            set {
                CompletionTvdIntervalField = value;
                NotifyPropertyChanged("CompletionTvdInterval");
            }
        }

        private TvdInterval CompletionTvdIntervalField; 

        /// <summary>
        /// CurrentStatus property
        /// </summary>
		[Description("Status (active, planned, suspended, testing, etc.) of the wellbore completion")]
		[XmlElement("CurrentStatus")]
        public String CurrentStatus {
            get {
                return CurrentStatusField;
            } 
            set {
                CurrentStatusField = value;
                NotifyPropertyChanged("CurrentStatus");
            }
        }

        private String CurrentStatusField; 

        /// <summary>
        /// StatusDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date for when the status was established.")]
		[XmlElement("StatusDate")]
        public String StatusDate {
            get {
                return StatusDateField;
            } 
            set {
                StatusDateField = value;
                NotifyPropertyChanged("StatusDate");
            }
        }

        private String StatusDateField; 

        /// <summary>
        /// StatusHistory property
        /// </summary>
		[RecurringElement]
		[XmlElement("StatusHistory")]
        public List<CompletionStatusHistory> StatusHistory {
            get {
                return StatusHistoryField;
            } 
            set {
                StatusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         [XmlIgnore]
         public bool StatusHistorySpecified
         {
            get {
             if(StatusHistoryField!=null)
                return StatusHistoryField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CompletionStatusHistory> StatusHistoryField; 

        /// <summary>
        /// ContactIntervalSet property
        /// </summary>
		[ComponentElement]
		[XmlElement("ContactIntervalSet")]
        public ContactIntervalSet ContactIntervalSet {
            get {
                return ContactIntervalSetField;
            } 
            set {
                ContactIntervalSetField = value;
                NotifyPropertyChanged("ContactIntervalSet");
            }
        }

        private ContactIntervalSet ContactIntervalSetField; 

        /// <summary>
        /// ReferenceWellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("ReferenceWellbore")]
        public DataObjectReference ReferenceWellbore {
            get {
                return ReferenceWellboreField;
            } 
            set {
                ReferenceWellboreField = value;
                NotifyPropertyChanged("ReferenceWellbore");
            }
        }

        private DataObjectReference ReferenceWellboreField; 

        /// <summary>
        /// WellCompletion property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("WellCompletion")]
        public DataObjectReference WellCompletion {
            get {
                return WellCompletionField;
            } 
            set {
                WellCompletionField = value;
                NotifyPropertyChanged("WellCompletion");
            }
        }

        private DataObjectReference WellCompletionField; 


    } //here

    /// <summary>
    /// This class represents the WellCompletion xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellCompletion xsd type.")]
    public partial class WellCompletion : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// FieldID property
        /// </summary>
		[StringLength(64)]
        [Description("Field ID.")]
		[XmlElement("FieldID")]
        public String FieldID {
            get {
                return FieldIDField;
            } 
            set {
                FieldIDField = value;
                NotifyPropertyChanged("FieldID");
            }
        }

        private String FieldIDField; 

        /// <summary>
        /// FieldCode property
        /// </summary>
		[StringLength(64)]
        [Description("Field code.")]
		[XmlElement("FieldCode")]
        public String FieldCode {
            get {
                return FieldCodeField;
            } 
            set {
                FieldCodeField = value;
                NotifyPropertyChanged("FieldCode");
            }
        }

        private String FieldCodeField; 

        /// <summary>
        /// FieldType property
        /// </summary>
		[StringLength(64)]
        [Description("Field type.")]
		[XmlElement("FieldType")]
        public String FieldType {
            get {
                return FieldTypeField;
            } 
            set {
                FieldTypeField = value;
                NotifyPropertyChanged("FieldType");
            }
        }

        private String FieldTypeField; 

        /// <summary>
        /// EffectiveDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Field date.")]
		[XmlElement("EffectiveDate")]
        public String EffectiveDate {
            get {
                return EffectiveDateField;
            } 
            set {
                EffectiveDateField = value;
                NotifyPropertyChanged("EffectiveDate");
            }
        }

        private String EffectiveDateField; 

        /// <summary>
        /// ExpiredDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Expiration date")]
		[XmlElement("ExpiredDate")]
        public String ExpiredDate {
            get {
                return ExpiredDateField;
            } 
            set {
                ExpiredDateField = value;
                NotifyPropertyChanged("ExpiredDate");
            }
        }

        private String ExpiredDateField; 

        /// <summary>
        /// E_P_RightsID property
        /// </summary>
		[StringLength(64)]
        [Description("Documents exploration and production rights")]
		[XmlElement("E_P_RightsID")]
        public String E_P_RightsID {
            get {
                return E_P_RightsIDField;
            } 
            set {
                E_P_RightsIDField = value;
                NotifyPropertyChanged("E_P_RightsID");
            }
        }

        private String E_P_RightsIDField; 

        /// <summary>
        /// CurrentStatus property
        /// </summary>
		[Description("Status (active, planned, suspended, testing, etc.) of the well completion")]
		[XmlElement("CurrentStatus")]
        public String CurrentStatus {
            get {
                return CurrentStatusField;
            } 
            set {
                CurrentStatusField = value;
                NotifyPropertyChanged("CurrentStatus");
            }
        }

        private String CurrentStatusField; 

        /// <summary>
        /// StatusDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Timestamp for when this status was established")]
		[XmlElement("StatusDate")]
        public String StatusDate {
            get {
                return StatusDateField;
            } 
            set {
                StatusDateField = value;
                NotifyPropertyChanged("StatusDate");
            }
        }

        private String StatusDateField; 

        /// <summary>
        /// StatusHistory property
        /// </summary>
		[RecurringElement]
		[XmlElement("StatusHistory")]
        public List<CompletionStatusHistory> StatusHistory {
            get {
                return StatusHistoryField;
            } 
            set {
                StatusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         [XmlIgnore]
         public bool StatusHistorySpecified
         {
            get {
             if(StatusHistoryField!=null)
                return StatusHistoryField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CompletionStatusHistory> StatusHistoryField; 

        /// <summary>
        /// Well property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Well")]
        public DataObjectReference Well {
            get {
                return WellField;
            } 
            set {
                WellField = value;
                NotifyPropertyChanged("Well");
            }
        }

        private DataObjectReference WellField; 


    } //here

    /// <summary>
    /// This class represents the ToolErrorTermSet xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the ToolErrorTermSet xsd type.")]
    public partial class ToolErrorTermSet : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Authorization property
        /// </summary>
		[ComponentElement]
		[XmlElement("Authorization")]
        public IscwsaAuthorizationData Authorization {
            get {
                return AuthorizationField;
            } 
            set {
                AuthorizationField = value;
                NotifyPropertyChanged("Authorization");
            }
        }

        private IscwsaAuthorizationData AuthorizationField; 

        /// <summary>
        /// Nomenclature property
        /// </summary>
		[ComponentElement]
		[XmlElement("Nomenclature")]
        public IscwsaNomenclature Nomenclature {
            get {
                return NomenclatureField;
            } 
            set {
                NomenclatureField = value;
                NotifyPropertyChanged("Nomenclature");
            }
        }

        private IscwsaNomenclature NomenclatureField; 

        /// <summary>
        /// ErrorTerm property
        /// </summary>
		[RecurringElement]
		[XmlElement("ErrorTerm")]
        public List<IscwsaErrorTerm> ErrorTerm {
            get {
                return ErrorTermField;
            } 
            set {
                ErrorTermField = value;
                NotifyPropertyChanged("ErrorTerm");
            }
        }

         [XmlIgnore]
         public bool ErrorTermSpecified
         {
            get {
             if(ErrorTermField!=null)
                return ErrorTermField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IscwsaErrorTerm> ErrorTermField; 


    } //here

    /// <summary>
    /// This class represents the StimJobStage xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the StimJobStage xsd type.")]
    public partial class StimJobStage : AbstractObject, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Number property
        /// </summary>
		[Description("The number associated with the stage.")]
		[XmlElement("Number")]
        public Int64? Number {
            get {
                return NumberField;
            } 
            set {
                NumberField = value;
             if(value!=null) 
                 this.NumberSpecified = true;
                NotifyPropertyChanged("Number");
            }
        }

        private Int64? NumberField; 

        /// <summary>
        /// NumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumberSpecified {
            get {
                return NumberSpecifiedField;
            } 
            set {
                NumberSpecifiedField = value;
                NotifyPropertyChanged("NumberSpecified");
            }
        }

        private Boolean NumberSpecifiedField; 

        /// <summary>
        /// FractureHeight property
        /// </summary>
		[Description("The height of the fracture.")]
        [ComponentElement]
		[XmlElement("FractureHeight")]
        public LengthMeasure FractureHeight {
            get {
                return FractureHeightField;
            } 
            set {
                FractureHeightField = value;
                NotifyPropertyChanged("FractureHeight");
            }
        }

        private LengthMeasure FractureHeightField; 

        /// <summary>
        /// PercentPad property
        /// </summary>
		[Description("The percentage of volume pumped used for the pad.")]
        [ComponentElement]
		[XmlElement("PercentPad")]
        public VolumePerVolumeMeasure PercentPad {
            get {
                return PercentPadField;
            } 
            set {
                PercentPadField = value;
                NotifyPropertyChanged("PercentPad");
            }
        }

        private VolumePerVolumeMeasure PercentPadField; 

        /// <summary>
        /// StagePerforationClusters property
        /// </summary>
		[Description("Perforations added just prior to treating the stage.")]
        [RecurringElement]
		[XmlArrayItem("")]
        [XmlArray("StagePerforationClusters")]
        public List<StimPerforationCluster> StagePerforationClusters {
            get {
                return StagePerforationClustersField;
            } 
            set {
                StagePerforationClustersField = value;
                NotifyPropertyChanged("StagePerforationClusters");
            }
        }

         [XmlIgnore]
         public bool StagePerforationClustersSpecified
         {
            get {
             if(StagePerforationClustersField!=null)
                return StagePerforationClustersField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimPerforationCluster> StagePerforationClustersField; 

        /// <summary>
        /// AvgBaseFluidReturnVolumeRate property
        /// </summary>
		[Description("Average base fluid pumping rate of all steps for stage treatment.")]
        [ComponentElement]
		[XmlElement("AvgBaseFluidReturnVolumeRate")]
        public VolumePerTimeMeasure AvgBaseFluidReturnVolumeRate {
            get {
                return AvgBaseFluidReturnVolumeRateField;
            } 
            set {
                AvgBaseFluidReturnVolumeRateField = value;
                NotifyPropertyChanged("AvgBaseFluidReturnVolumeRate");
            }
        }

        private VolumePerTimeMeasure AvgBaseFluidReturnVolumeRateField; 

        /// <summary>
        /// AvgBHStaticTemperature property
        /// </summary>
		[Description("The average static temperature of the wellbore injection point(s) or formation at equilibrium (steady state) with no fluid or tool movement, allowing for equilibrium conditions at the wellbore injection point; (BHST: bottom hole static temperature).")]
        [ComponentElement]
		[XmlElement("AvgBHStaticTemperature")]
        public ThermodynamicTemperatureMeasure AvgBHStaticTemperature {
            get {
                return AvgBHStaticTemperatureField;
            } 
            set {
                AvgBHStaticTemperatureField = value;
                NotifyPropertyChanged("AvgBHStaticTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure AvgBHStaticTemperatureField; 

        /// <summary>
        /// AvgBHTreatingTemperature property
        /// </summary>
		[Description("The average measured or calculated temperature of the wellbore during the treating with well fluid injection or circulation of the wellbore at the point of interest. Point of interest is generally the injection point or region of interest for the test or treatment.")]
        [ComponentElement]
		[XmlElement("AvgBHTreatingTemperature")]
        public ThermodynamicTemperatureMeasure AvgBHTreatingTemperature {
            get {
                return AvgBHTreatingTemperatureField;
            } 
            set {
                AvgBHTreatingTemperatureField = value;
                NotifyPropertyChanged("AvgBHTreatingTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure AvgBHTreatingTemperatureField; 

        /// <summary>
        /// AvgBottomholePumpedVolumeRate property
        /// </summary>
		[Description("Average bottomhole treatment flow rate.")]
        [ComponentElement]
		[XmlElement("AvgBottomholePumpedVolumeRate")]
        public VolumePerTimeMeasure AvgBottomholePumpedVolumeRate {
            get {
                return AvgBottomholePumpedVolumeRateField;
            } 
            set {
                AvgBottomholePumpedVolumeRateField = value;
                NotifyPropertyChanged("AvgBottomholePumpedVolumeRate");
            }
        }

        private VolumePerTimeMeasure AvgBottomholePumpedVolumeRateField; 

        /// <summary>
        /// AvgConductivity property
        /// </summary>
		[Description("Average conductivity of fracture created during the treatment supported by proppant during the stimulation services Hydraulic conductivity, symbolically represented as K, is a property of vascular plants, soil or rock, that describes the ease with which water can move through pore spaces or fractures. It depends on the intrinsic permeability of the material and on the degree of saturation. Saturated hydraulic conductivity, Ksat, describes water movement through saturated media.")]
        [ComponentElement]
		[XmlElement("AvgConductivity")]
        public LengthPerTimeMeasure AvgConductivity {
            get {
                return AvgConductivityField;
            } 
            set {
                AvgConductivityField = value;
                NotifyPropertyChanged("AvgConductivity");
            }
        }

        private LengthPerTimeMeasure AvgConductivityField; 

        /// <summary>
        /// AvgFractureWidth property
        /// </summary>
		[Description("Average fracture width created during the treatment of the stage..")]
        [ComponentElement]
		[XmlElement("AvgFractureWidth")]
        public LengthMeasure AvgFractureWidth {
            get {
                return AvgFractureWidthField;
            } 
            set {
                AvgFractureWidthField = value;
                NotifyPropertyChanged("AvgFractureWidth");
            }
        }

        private LengthMeasure AvgFractureWidthField; 

        /// <summary>
        /// AvgHydraulicPower property
        /// </summary>
		[Description("Average hydraulic horse power used.")]
        [ComponentElement]
		[XmlElement("AvgHydraulicPower")]
        public PowerMeasure AvgHydraulicPower {
            get {
                return AvgHydraulicPowerField;
            } 
            set {
                AvgHydraulicPowerField = value;
                NotifyPropertyChanged("AvgHydraulicPower");
            }
        }

        private PowerMeasure AvgHydraulicPowerField; 

        /// <summary>
        /// AvgPresAnnulus property
        /// </summary>
		[Description("The average annulus pressure for any step for the stage treatment.")]
        [ComponentElement]
		[XmlElement("AvgPresAnnulus")]
        public PressureMeasure AvgPresAnnulus {
            get {
                return AvgPresAnnulusField;
            } 
            set {
                AvgPresAnnulusField = value;
                NotifyPropertyChanged("AvgPresAnnulus");
            }
        }

        private PressureMeasure AvgPresAnnulusField; 

        /// <summary>
        /// AvgPresCasing property
        /// </summary>
		[Description("The average casing pressure of any step for the stage treatment.")]
        [ComponentElement]
		[XmlElement("AvgPresCasing")]
        public PressureMeasure AvgPresCasing {
            get {
                return AvgPresCasingField;
            } 
            set {
                AvgPresCasingField = value;
                NotifyPropertyChanged("AvgPresCasing");
            }
        }

        private PressureMeasure AvgPresCasingField; 

        /// <summary>
        /// AvgPresSurface property
        /// </summary>
		[Description("The average pressure for treating the stage across all steps.")]
        [ComponentElement]
		[XmlElement("AvgPresSurface")]
        public PressureMeasure AvgPresSurface {
            get {
                return AvgPresSurfaceField;
            } 
            set {
                AvgPresSurfaceField = value;
                NotifyPropertyChanged("AvgPresSurface");
            }
        }

        private PressureMeasure AvgPresSurfaceField; 

        /// <summary>
        /// AvgPresTubing property
        /// </summary>
		[Description("The average tubing pressure of any step for the stage treatment.")]
        [ComponentElement]
		[XmlElement("AvgPresTubing")]
        public PressureMeasure AvgPresTubing {
            get {
                return AvgPresTubingField;
            } 
            set {
                AvgPresTubingField = value;
                NotifyPropertyChanged("AvgPresTubing");
            }
        }

        private PressureMeasure AvgPresTubingField; 

        /// <summary>
        /// AvgProppantConcBottomhole property
        /// </summary>
		[Description("The average proppant concentration at the bottom of the hole.")]
        [ComponentElement]
		[XmlElement("AvgProppantConcBottomhole")]
        public MassPerVolumeMeasure AvgProppantConcBottomhole {
            get {
                return AvgProppantConcBottomholeField;
            } 
            set {
                AvgProppantConcBottomholeField = value;
                NotifyPropertyChanged("AvgProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure AvgProppantConcBottomholeField; 

        /// <summary>
        /// AvgProppantConcSurface property
        /// </summary>
		[Description("The average proppant concentration on the surface.")]
        [ComponentElement]
		[XmlElement("AvgProppantConcSurface")]
        public MassPerVolumeMeasure AvgProppantConcSurface {
            get {
                return AvgProppantConcSurfaceField;
            } 
            set {
                AvgProppantConcSurfaceField = value;
                NotifyPropertyChanged("AvgProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure AvgProppantConcSurfaceField; 

        /// <summary>
        /// AvgSlurryReturnVolumeRate property
        /// </summary>
		[Description("Average slurry return rate of all step for the stage treatment.")]
        [ComponentElement]
		[XmlElement("AvgSlurryReturnVolumeRate")]
        public VolumePerTimeMeasure AvgSlurryReturnVolumeRate {
            get {
                return AvgSlurryReturnVolumeRateField;
            } 
            set {
                AvgSlurryReturnVolumeRateField = value;
                NotifyPropertyChanged("AvgSlurryReturnVolumeRate");
            }
        }

        private VolumePerTimeMeasure AvgSlurryReturnVolumeRateField; 

        /// <summary>
        /// BreakDownPres property
        /// </summary>
		[Description("The pressure at which the formation fractures and accepts injected fluid.")]
        [ComponentElement]
		[XmlElement("BreakDownPres")]
        public PressureMeasure BreakDownPres {
            get {
                return BreakDownPresField;
            } 
            set {
                BreakDownPresField = value;
                NotifyPropertyChanged("BreakDownPres");
            }
        }

        private PressureMeasure BreakDownPresField; 

        /// <summary>
        /// ClosureDuration property
        /// </summary>
		[Description("Delta time recorded for the closure of the fracture to occur during the stage treatment.")]
        [ComponentElement]
		[XmlElement("ClosureDuration")]
        public TimeMeasure ClosureDuration {
            get {
                return ClosureDurationField;
            } 
            set {
                ClosureDurationField = value;
                NotifyPropertyChanged("ClosureDuration");
            }
        }

        private TimeMeasure ClosureDurationField; 

        /// <summary>
        /// ClosurePres property
        /// </summary>
		[Description("An analysis parameter used in hydraulic fracture design to indicate the pressure at which the fracture effectively closes without proppant in place.")]
        [ComponentElement]
		[XmlElement("ClosurePres")]
        public PressureMeasure ClosurePres {
            get {
                return ClosurePresField;
            } 
            set {
                ClosurePresField = value;
                NotifyPropertyChanged("ClosurePres");
            }
        }

        private PressureMeasure ClosurePresField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Ending date and time for the stage treatment.")]
		[XmlElement("DTimEnd")]
        public String DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private String DTimEndField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Starting date and time for the stage treatment.")]
		[XmlElement("DTimStart")]
        public String DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private String DTimStartField; 

        /// <summary>
        /// FormationBreakLengthPerDay property
        /// </summary>
		[Description("The length of formation broken per day.")]
        [ComponentElement]
		[XmlElement("FormationBreakLengthPerDay")]
        public LengthMeasure FormationBreakLengthPerDay {
            get {
                return FormationBreakLengthPerDayField;
            } 
            set {
                FormationBreakLengthPerDayField = value;
                NotifyPropertyChanged("FormationBreakLengthPerDay");
            }
        }

        private LengthMeasure FormationBreakLengthPerDayField; 

        /// <summary>
        /// FormationName property
        /// </summary>
		[StringLength(2000)]
        [Description("The name of the formation being stimulated.")]
		[XmlElement("FormationName")]
        public String FormationName {
            get {
                return FormationNameField;
            } 
            set {
                FormationNameField = value;
                NotifyPropertyChanged("FormationName");
            }
        }

        private String FormationNameField; 

        /// <summary>
        /// FormationProppantMass property
        /// </summary>
		[Description("The weight of proppant placed in the formation.")]
        [ComponentElement]
		[XmlElement("FormationProppantMass")]
        public MassMeasure FormationProppantMass {
            get {
                return FormationProppantMassField;
            } 
            set {
                FormationProppantMassField = value;
                NotifyPropertyChanged("FormationProppantMass");
            }
        }

        private MassMeasure FormationProppantMassField; 

        /// <summary>
        /// FractureGradientFinal property
        /// </summary>
		[Description("The formation fracture gradient for the stage after treatment.")]
        [ComponentElement]
		[XmlElement("FractureGradientFinal")]
        public ForcePerVolumeMeasure FractureGradientFinal {
            get {
                return FractureGradientFinalField;
            } 
            set {
                FractureGradientFinalField = value;
                NotifyPropertyChanged("FractureGradientFinal");
            }
        }

        private ForcePerVolumeMeasure FractureGradientFinalField; 

        /// <summary>
        /// FractureGradientInitial property
        /// </summary>
		[Description("The formation fracture gradient for stage before treatment.")]
        [ComponentElement]
		[XmlElement("FractureGradientInitial")]
        public ForcePerVolumeMeasure FractureGradientInitial {
            get {
                return FractureGradientInitialField;
            } 
            set {
                FractureGradientInitialField = value;
                NotifyPropertyChanged("FractureGradientInitial");
            }
        }

        private ForcePerVolumeMeasure FractureGradientInitialField; 

        /// <summary>
        /// FractureLength property
        /// </summary>
		[Description("The length of the fracture created after treating the stage.")]
        [ComponentElement]
		[XmlElement("FractureLength")]
        public LengthMeasure FractureLength {
            get {
                return FractureLengthField;
            } 
            set {
                FractureLengthField = value;
                NotifyPropertyChanged("FractureLength");
            }
        }

        private LengthMeasure FractureLengthField; 

        /// <summary>
        /// FrictionPressure property
        /// </summary>
		[Description("Friction Pressure loss.")]
        [ComponentElement]
		[XmlElement("FrictionPressure")]
        public PressureMeasure FrictionPressure {
            get {
                return FrictionPressureField;
            } 
            set {
                FrictionPressureField = value;
                NotifyPropertyChanged("FrictionPressure");
            }
        }

        private PressureMeasure FrictionPressureField; 

        /// <summary>
        /// HhpOrderedCO2 property
        /// </summary>
		[Description("Carbon dioxide hydraulic horsepower ordered for the stage.")]
        [ComponentElement]
		[XmlElement("HhpOrderedCO2")]
        public PowerMeasure HhpOrderedCO2 {
            get {
                return HhpOrderedCO2Field;
            } 
            set {
                HhpOrderedCO2Field = value;
                NotifyPropertyChanged("HhpOrderedCO2");
            }
        }

        private PowerMeasure HhpOrderedCO2Field; 

        /// <summary>
        /// HhpOrderedFluid property
        /// </summary>
		[Description("Fluid hydraulic horsepower ordered for the stage.")]
        [ComponentElement]
		[XmlElement("HhpOrderedFluid")]
        public PowerMeasure HhpOrderedFluid {
            get {
                return HhpOrderedFluidField;
            } 
            set {
                HhpOrderedFluidField = value;
                NotifyPropertyChanged("HhpOrderedFluid");
            }
        }

        private PowerMeasure HhpOrderedFluidField; 

        /// <summary>
        /// HhpUsedCO2 property
        /// </summary>
		[Description("Carbon dioxide hydraulic horsepower actually used for the stage.")]
        [ComponentElement]
		[XmlElement("HhpUsedCO2")]
        public PowerMeasure HhpUsedCO2 {
            get {
                return HhpUsedCO2Field;
            } 
            set {
                HhpUsedCO2Field = value;
                NotifyPropertyChanged("HhpUsedCO2");
            }
        }

        private PowerMeasure HhpUsedCO2Field; 

        /// <summary>
        /// HhpUsedFluid property
        /// </summary>
		[Description("Fluid hydraulic horsepower actually used for the stage.")]
        [ComponentElement]
		[XmlElement("HhpUsedFluid")]
        public PowerMeasure HhpUsedFluid {
            get {
                return HhpUsedFluidField;
            } 
            set {
                HhpUsedFluidField = value;
                NotifyPropertyChanged("HhpUsedFluid");
            }
        }

        private PowerMeasure HhpUsedFluidField; 

        /// <summary>
        /// InitialShutinPres property
        /// </summary>
		[Description("The initial shut-in pressure.")]
        [ComponentElement]
		[XmlElement("InitialShutinPres")]
        public PowerMeasure InitialShutinPres {
            get {
                return InitialShutinPresField;
            } 
            set {
                InitialShutinPresField = value;
                NotifyPropertyChanged("InitialShutinPres");
            }
        }

        private PowerMeasure InitialShutinPresField; 

        /// <summary>
        /// MaxFluidVolumeRateAnnulus property
        /// </summary>
		[Description("Maximum annulus fluid pumping rate of any step while treating the stage.")]
        [ComponentElement]
		[XmlElement("MaxFluidVolumeRateAnnulus")]
        public VolumePerTimeMeasure MaxFluidVolumeRateAnnulus {
            get {
                return MaxFluidVolumeRateAnnulusField;
            } 
            set {
                MaxFluidVolumeRateAnnulusField = value;
                NotifyPropertyChanged("MaxFluidVolumeRateAnnulus");
            }
        }

        private VolumePerTimeMeasure MaxFluidVolumeRateAnnulusField; 

        /// <summary>
        /// MaxFluidVolumeRateCasing property
        /// </summary>
		[Description("Maximum casing fluid pumping rate of any step while treating the stage.")]
        [ComponentElement]
		[XmlElement("MaxFluidVolumeRateCasing")]
        public VolumePerTimeMeasure MaxFluidVolumeRateCasing {
            get {
                return MaxFluidVolumeRateCasingField;
            } 
            set {
                MaxFluidVolumeRateCasingField = value;
                NotifyPropertyChanged("MaxFluidVolumeRateCasing");
            }
        }

        private VolumePerTimeMeasure MaxFluidVolumeRateCasingField; 

        /// <summary>
        /// MaxFluidVolumeRateTubing property
        /// </summary>
		[Description("Maximum tubing fluid pumping rate of any step while treating the stage.")]
        [ComponentElement]
		[XmlElement("MaxFluidVolumeRateTubing")]
        public VolumePerTimeMeasure MaxFluidVolumeRateTubing {
            get {
                return MaxFluidVolumeRateTubingField;
            } 
            set {
                MaxFluidVolumeRateTubingField = value;
                NotifyPropertyChanged("MaxFluidVolumeRateTubing");
            }
        }

        private VolumePerTimeMeasure MaxFluidVolumeRateTubingField; 

        /// <summary>
        /// MaxHydraulicPower property
        /// </summary>
		[Description("Maximum hydraulic horse power used for stage.")]
        [ComponentElement]
		[XmlElement("MaxHydraulicPower")]
        public PowerMeasure MaxHydraulicPower {
            get {
                return MaxHydraulicPowerField;
            } 
            set {
                MaxHydraulicPowerField = value;
                NotifyPropertyChanged("MaxHydraulicPower");
            }
        }

        private PowerMeasure MaxHydraulicPowerField; 

        /// <summary>
        /// MaxPresAnnulus property
        /// </summary>
		[Description("The highest annulus pressure of any step while treating the stage.")]
        [ComponentElement]
		[XmlElement("MaxPresAnnulus")]
        public PressureMeasure MaxPresAnnulus {
            get {
                return MaxPresAnnulusField;
            } 
            set {
                MaxPresAnnulusField = value;
                NotifyPropertyChanged("MaxPresAnnulus");
            }
        }

        private PressureMeasure MaxPresAnnulusField; 

        /// <summary>
        /// MaxPresCasing property
        /// </summary>
		[Description("The highest casing pressure of any step while treating the stage.")]
        [ComponentElement]
		[XmlElement("MaxPresCasing")]
        public PressureMeasure MaxPresCasing {
            get {
                return MaxPresCasingField;
            } 
            set {
                MaxPresCasingField = value;
                NotifyPropertyChanged("MaxPresCasing");
            }
        }

        private PressureMeasure MaxPresCasingField; 

        /// <summary>
        /// MaxPresSurface property
        /// </summary>
		[Description("Maximum surface pressure during treatment of the stage.")]
        [ComponentElement]
		[XmlElement("MaxPresSurface")]
        public PressureMeasure MaxPresSurface {
            get {
                return MaxPresSurfaceField;
            } 
            set {
                MaxPresSurfaceField = value;
                NotifyPropertyChanged("MaxPresSurface");
            }
        }

        private PressureMeasure MaxPresSurfaceField; 

        /// <summary>
        /// MaxPresTubing property
        /// </summary>
		[Description("The highest tubing pressure of any step while treating the stage.")]
        [ComponentElement]
		[XmlElement("MaxPresTubing")]
        public PressureMeasure MaxPresTubing {
            get {
                return MaxPresTubingField;
            } 
            set {
                MaxPresTubingField = value;
                NotifyPropertyChanged("MaxPresTubing");
            }
        }

        private PressureMeasure MaxPresTubingField; 

        /// <summary>
        /// MaxProppantConcBottomhole property
        /// </summary>
		[Description("The maximum proppant concentration at the bottom of the wellbore.")]
        [ComponentElement]
		[XmlElement("MaxProppantConcBottomhole")]
        public MassPerVolumeMeasure MaxProppantConcBottomhole {
            get {
                return MaxProppantConcBottomholeField;
            } 
            set {
                MaxProppantConcBottomholeField = value;
                NotifyPropertyChanged("MaxProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure MaxProppantConcBottomholeField; 

        /// <summary>
        /// MaxProppantConcSurface property
        /// </summary>
		[Description("The maximum proppant concentration on the surface.")]
        [ComponentElement]
		[XmlElement("MaxProppantConcSurface")]
        public MassPerVolumeMeasure MaxProppantConcSurface {
            get {
                return MaxProppantConcSurfaceField;
            } 
            set {
                MaxProppantConcSurfaceField = value;
                NotifyPropertyChanged("MaxProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure MaxProppantConcSurfaceField; 

        /// <summary>
        /// MdFormationBottom property
        /// </summary>
		[Description("Measured depth of the bottom of the formation.")]
        [ComponentElement]
		[XmlElement("MdFormationBottom")]
        public MeasuredDepthCoord MDFormationBottom {
            get {
                return MdFormationBottomField;
            } 
            set {
                MdFormationBottomField = value;
                NotifyPropertyChanged("MDFormationBottom");
            }
        }

        private MeasuredDepthCoord MdFormationBottomField; 

        /// <summary>
        /// MdFormationTop property
        /// </summary>
		[Description("Measured depth of the top of the formation.")]
        [ComponentElement]
		[XmlElement("MdFormationTop")]
        public MeasuredDepthCoord MDFormationTop {
            get {
                return MdFormationTopField;
            } 
            set {
                MdFormationTopField = value;
                NotifyPropertyChanged("MDFormationTop");
            }
        }

        private MeasuredDepthCoord MdFormationTopField; 

        /// <summary>
        /// MdOpenHoleBottom property
        /// </summary>
		[Description("Measured depth of the bottom open hole.")]
        [ComponentElement]
		[XmlElement("MdOpenHoleBottom")]
        public MeasuredDepthCoord MDOpenHoleBottom {
            get {
                return MdOpenHoleBottomField;
            } 
            set {
                MdOpenHoleBottomField = value;
                NotifyPropertyChanged("MDOpenHoleBottom");
            }
        }

        private MeasuredDepthCoord MdOpenHoleBottomField; 

        /// <summary>
        /// MdOpenHoleTop property
        /// </summary>
		[Description("Measured depth of the top open hole.")]
        [ComponentElement]
		[XmlElement("MdOpenHoleTop")]
        public MeasuredDepthCoord MDOpenHoleTop {
            get {
                return MdOpenHoleTopField;
            } 
            set {
                MdOpenHoleTopField = value;
                NotifyPropertyChanged("MDOpenHoleTop");
            }
        }

        private MeasuredDepthCoord MdOpenHoleTopField; 

        /// <summary>
        /// NetPres property
        /// </summary>
		[Description("The difference between the pressure which holds a fracture closed (minimal principal stress) and that pressure which is necessary to open the fracture.")]
        [ComponentElement]
		[XmlElement("NetPres")]
        public PressureMeasure NetPres {
            get {
                return NetPresField;
            } 
            set {
                NetPresField = value;
                NotifyPropertyChanged("NetPres");
            }
        }

        private PressureMeasure NetPresField; 

        /// <summary>
        /// OpenHoleDiameter property
        /// </summary>
		[Description("The diameter of the open hole.")]
        [ComponentElement]
		[XmlElement("OpenHoleDiameter")]
        public LengthMeasure OpenHoleDiameter {
            get {
                return OpenHoleDiameterField;
            } 
            set {
                OpenHoleDiameterField = value;
                NotifyPropertyChanged("OpenHoleDiameter");
            }
        }

        private LengthMeasure OpenHoleDiameterField; 

        /// <summary>
        /// OpenHoleName property
        /// </summary>
		[StringLength(2000)]
        [Description("A name for the open hole. To be used for open hole completions.")]
		[XmlElement("OpenHoleName")]
        public String OpenHoleName {
            get {
                return OpenHoleNameField;
            } 
            set {
                OpenHoleNameField = value;
                NotifyPropertyChanged("OpenHoleName");
            }
        }

        private String OpenHoleNameField; 

        /// <summary>
        /// PercentProppantPumped property
        /// </summary>
		[Description("Total proppant mass used as a percent of the design mass.")]
        [ComponentElement]
		[XmlElement("PercentProppantPumped")]
        public VolumePerVolumeMeasure PercentProppantPumped {
            get {
                return PercentProppantPumpedField;
            } 
            set {
                PercentProppantPumpedField = value;
                NotifyPropertyChanged("PercentProppantPumped");
            }
        }

        private VolumePerVolumeMeasure PercentProppantPumpedField; 

        /// <summary>
        /// PerfBallCount property
        /// </summary>
		[Description("Total number of perforation balls used while treating the stage.")]
		[XmlElement("PerfBallCount")]
        public Int64? PerfBallCount {
            get {
                return PerfBallCountField;
            } 
            set {
                PerfBallCountField = value;
             if(value!=null) 
                 this.PerfBallCountSpecified = true;
                NotifyPropertyChanged("PerfBallCount");
            }
        }

        private Int64? PerfBallCountField; 

        /// <summary>
        /// PerfBallCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PerfBallCountSpecified {
            get {
                return PerfBallCountSpecifiedField;
            } 
            set {
                PerfBallCountSpecifiedField = value;
                NotifyPropertyChanged("PerfBallCountSpecified");
            }
        }

        private Boolean PerfBallCountSpecifiedField; 

        /// <summary>
        /// PerfBallSize property
        /// </summary>
		[Description("The size of the perforation balls used while treating the stage")]
        [ComponentElement]
		[XmlElement("PerfBallSize")]
        public LengthMeasure PerfBallSize {
            get {
                return PerfBallSizeField;
            } 
            set {
                PerfBallSizeField = value;
                NotifyPropertyChanged("PerfBallSize");
            }
        }

        private LengthMeasure PerfBallSizeField; 

        /// <summary>
        /// PerfProppantConc property
        /// </summary>
		[Description("The proppant concentration at the perforations.")]
        [ComponentElement]
		[XmlElement("PerfProppantConc")]
        public MassPerVolumeMeasure PerfProppantConc {
            get {
                return PerfProppantConcField;
            } 
            set {
                PerfProppantConcField = value;
                NotifyPropertyChanged("PerfProppantConc");
            }
        }

        private MassPerVolumeMeasure PerfProppantConcField; 

        /// <summary>
        /// ProppantHeight property
        /// </summary>
		[Description("The proppant height.")]
        [ComponentElement]
		[XmlElement("ProppantHeight")]
        public LengthMeasure ProppantHeight {
            get {
                return ProppantHeightField;
            } 
            set {
                ProppantHeightField = value;
                NotifyPropertyChanged("ProppantHeight");
            }
        }

        private LengthMeasure ProppantHeightField; 

        /// <summary>
        /// ScreenedOut property
        /// </summary>
		[Description("Boolean as to whether or not screen out occurred. True (\"true\" or \"1\") indicates that screen out occurred. False (\"false\" or \"0\") or not given indicates otherwise.")]
		[XmlElement("ScreenedOut")]
        public Boolean? ScreenedOut {
            get {
                return ScreenedOutField;
            } 
            set {
                ScreenedOutField = value;
             if(value!=null) 
                 this.ScreenedOutSpecified = true;
                NotifyPropertyChanged("ScreenedOut");
            }
        }

        private Boolean? ScreenedOutField; 

        /// <summary>
        /// ScreenedOutSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ScreenedOutSpecified {
            get {
                return ScreenedOutSpecifiedField;
            } 
            set {
                ScreenedOutSpecifiedField = value;
                NotifyPropertyChanged("ScreenedOutSpecified");
            }
        }

        private Boolean ScreenedOutSpecifiedField; 

        /// <summary>
        /// ScreenOutPres property
        /// </summary>
		[Description("The screen out pressure.")]
        [ComponentElement]
		[XmlElement("ScreenOutPres")]
        public PressureMeasure ScreenOutPres {
            get {
                return ScreenOutPresField;
            } 
            set {
                ScreenOutPresField = value;
                NotifyPropertyChanged("ScreenOutPres");
            }
        }

        private PressureMeasure ScreenOutPresField; 

        /// <summary>
        /// TechnologyType property
        /// </summary>
		[StringLength(64)]
        [Description("Text describing the technology used while pumping stage.")]
		[XmlElement("TechnologyType")]
        public String TechnologyType {
            get {
                return TechnologyTypeField;
            } 
            set {
                TechnologyTypeField = value;
                NotifyPropertyChanged("TechnologyType");
            }
        }

        private String TechnologyTypeField; 

        /// <summary>
        /// TotalProppantInFormation property
        /// </summary>
		[Description("The total amount of proppant in formation relative to the current stage.")]
        [ComponentElement]
		[XmlElement("TotalProppantInFormation")]
        public MassMeasure TotalProppantInFormation {
            get {
                return TotalProppantInFormationField;
            } 
            set {
                TotalProppantInFormationField = value;
                NotifyPropertyChanged("TotalProppantInFormation");
            }
        }

        private MassMeasure TotalProppantInFormationField; 

        /// <summary>
        /// TotalPumpTime property
        /// </summary>
		[Description("The total pumping time for the treatment of the stage.")]
        [ComponentElement]
		[XmlElement("TotalPumpTime")]
        public TimeMeasure TotalPumpTime {
            get {
                return TotalPumpTimeField;
            } 
            set {
                TotalPumpTimeField = value;
                NotifyPropertyChanged("TotalPumpTime");
            }
        }

        private TimeMeasure TotalPumpTimeField; 

        /// <summary>
        /// TotalVolume property
        /// </summary>
		[Description("The total volume pumped for all steps while treating the stage.")]
        [ComponentElement]
		[XmlElement("TotalVolume")]
        public VolumeMeasure TotalVolume {
            get {
                return TotalVolumeField;
            } 
            set {
                TotalVolumeField = value;
                NotifyPropertyChanged("TotalVolume");
            }
        }

        private VolumeMeasure TotalVolumeField; 

        /// <summary>
        /// TvdFormationBottom property
        /// </summary>
		[Description("True vertical depth of the bottom of the formation.")]
        [ComponentElement]
		[XmlElement("TvdFormationBottom")]
        public WellVerticalDepthCoord TvdFormationBottom {
            get {
                return TvdFormationBottomField;
            } 
            set {
                TvdFormationBottomField = value;
                NotifyPropertyChanged("TvdFormationBottom");
            }
        }

        private WellVerticalDepthCoord TvdFormationBottomField; 

        /// <summary>
        /// TvdFormationTop property
        /// </summary>
		[Description("True vertical depth of the top of the formation.")]
        [ComponentElement]
		[XmlElement("TvdFormationTop")]
        public WellVerticalDepthCoord TvdFormationTop {
            get {
                return TvdFormationTopField;
            } 
            set {
                TvdFormationTopField = value;
                NotifyPropertyChanged("TvdFormationTop");
            }
        }

        private WellVerticalDepthCoord TvdFormationTopField; 

        /// <summary>
        /// TvdOpenHoleBottom property
        /// </summary>
		[Description("True vertical depth of the bottom open hole.")]
        [ComponentElement]
		[XmlElement("TvdOpenHoleBottom")]
        public WellVerticalDepthCoord TvdOpenHoleBottom {
            get {
                return TvdOpenHoleBottomField;
            } 
            set {
                TvdOpenHoleBottomField = value;
                NotifyPropertyChanged("TvdOpenHoleBottom");
            }
        }

        private WellVerticalDepthCoord TvdOpenHoleBottomField; 

        /// <summary>
        /// TvdOpenHoleTop property
        /// </summary>
		[Description("True vertical depth of the top open hole.")]
        [ComponentElement]
		[XmlElement("TvdOpenHoleTop")]
        public WellVerticalDepthCoord TvdOpenHoleTop {
            get {
                return TvdOpenHoleTopField;
            } 
            set {
                TvdOpenHoleTopField = value;
                NotifyPropertyChanged("TvdOpenHoleTop");
            }
        }

        private WellVerticalDepthCoord TvdOpenHoleTopField; 

        /// <summary>
        /// VolumeBody property
        /// </summary>
		[Description("The volume pumped for the body portion of the stage treatment.")]
        [ComponentElement]
		[XmlElement("VolumeBody")]
        public VolumeMeasure VolumeBody {
            get {
                return VolumeBodyField;
            } 
            set {
                VolumeBodyField = value;
                NotifyPropertyChanged("VolumeBody");
            }
        }

        private VolumeMeasure VolumeBodyField; 

        /// <summary>
        /// VolumeFlush property
        /// </summary>
		[Description("Volume pumped during flush portion of stage treatment.")]
        [ComponentElement]
		[XmlElement("VolumeFlush")]
        public VolumeMeasure VolumeFlush {
            get {
                return VolumeFlushField;
            } 
            set {
                VolumeFlushField = value;
                NotifyPropertyChanged("VolumeFlush");
            }
        }

        private VolumeMeasure VolumeFlushField; 

        /// <summary>
        /// VolumePad property
        /// </summary>
		[Description("Volume pumped for pad portion of stage treatment.")]
        [ComponentElement]
		[XmlElement("VolumePad")]
        public VolumeMeasure VolumePad {
            get {
                return VolumePadField;
            } 
            set {
                VolumePadField = value;
                NotifyPropertyChanged("VolumePad");
            }
        }

        private VolumeMeasure VolumePadField; 

        /// <summary>
        /// WaterSource property
        /// </summary>
		[StringLength(2000)]
        [Description("Water source for fluid pumped during stage.")]
		[XmlElement("WaterSource")]
        public String WaterSource {
            get {
                return WaterSourceField;
            } 
            set {
                WaterSourceField = value;
                NotifyPropertyChanged("WaterSource");
            }
        }

        private String WaterSourceField; 

        /// <summary>
        /// WellboreProppantMass property
        /// </summary>
		[Description("The weight of proppant left in the wellbore after pumping has stopped.")]
        [ComponentElement]
		[XmlElement("WellboreProppantMass")]
        public MassMeasure WellboreProppantMass {
            get {
                return WellboreProppantMassField;
            } 
            set {
                WellboreProppantMassField = value;
                NotifyPropertyChanged("WellboreProppantMass");
            }
        }

        private MassMeasure WellboreProppantMassField; 

        /// <summary>
        /// PdatSession property
        /// </summary>
		[RecurringElement]
		[XmlElement("PdatSession")]
        public List<StimJobDiagnosticSession> PdatSession {
            get {
                return PdatSessionField;
            } 
            set {
                PdatSessionField = value;
                NotifyPropertyChanged("PdatSession");
            }
        }

         [XmlIgnore]
         public bool PdatSessionSpecified
         {
            get {
             if(PdatSessionField!=null)
                return PdatSessionField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimJobDiagnosticSession> PdatSessionField; 

        /// <summary>
        /// ShutInPres property
        /// </summary>
		[RecurringElement]
		[XmlElement("ShutInPres")]
        public List<StimShutInPressure> ShutInPres {
            get {
                return ShutInPresField;
            } 
            set {
                ShutInPresField = value;
                NotifyPropertyChanged("ShutInPres");
            }
        }

         [XmlIgnore]
         public bool ShutInPresSpecified
         {
            get {
             if(ShutInPresField!=null)
                return ShutInPresField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimShutInPressure> ShutInPresField; 

        /// <summary>
        /// JobEvent property
        /// </summary>
		[RecurringElement]
		[XmlElement("JobEvent")]
        public List<StimEvent> JobEvent {
            get {
                return JobEventField;
            } 
            set {
                JobEventField = value;
                NotifyPropertyChanged("JobEvent");
            }
        }

         [XmlIgnore]
         public bool JobEventSpecified
         {
            get {
             if(JobEventField!=null)
                return JobEventField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimEvent> JobEventField; 

        /// <summary>
        /// JobStep property
        /// </summary>
		[RecurringElement]
		[XmlElement("JobStep")]
        public List<StimJobStep> JobStep {
            get {
                return JobStepField;
            } 
            set {
                JobStepField = value;
                NotifyPropertyChanged("JobStep");
            }
        }

         [XmlIgnore]
         public bool JobStepSpecified
         {
            get {
             if(JobStepField!=null)
                return JobStepField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimJobStep> JobStepField; 

        /// <summary>
        /// MaxMaterialUsageRate property
        /// </summary>
		[RecurringElement]
		[XmlElement("MaxMaterialUsageRate")]
        public List<StimMaterialQuantity> MaxMaterialUsageRate {
            get {
                return MaxMaterialUsageRateField;
            } 
            set {
                MaxMaterialUsageRateField = value;
                NotifyPropertyChanged("MaxMaterialUsageRate");
            }
        }

         [XmlIgnore]
         public bool MaxMaterialUsageRateSpecified
         {
            get {
             if(MaxMaterialUsageRateField!=null)
                return MaxMaterialUsageRateField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> MaxMaterialUsageRateField; 

        /// <summary>
        /// MaterialUsed property
        /// </summary>
		[RecurringElement]
		[XmlElement("MaterialUsed")]
        public List<StimMaterialQuantity> MaterialUsed {
            get {
                return MaterialUsedField;
            } 
            set {
                MaterialUsedField = value;
                NotifyPropertyChanged("MaterialUsed");
            }
        }

         [XmlIgnore]
         public bool MaterialUsedSpecified
         {
            get {
             if(MaterialUsedField!=null)
                return MaterialUsedField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> MaterialUsedField; 

        /// <summary>
        /// FlowPath property
        /// </summary>
		[ComponentElement]
		[XmlElement("FlowPath")]
        public StimFlowPath FlowPath {
            get {
                return FlowPathField;
            } 
            set {
                FlowPathField = value;
                NotifyPropertyChanged("FlowPath");
            }
        }

        private StimFlowPath FlowPathField; 

        /// <summary>
        /// StimStepLog property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("StimStepLog")]
        public DataObjectReference StimStepLog {
            get {
                return StimStepLogField;
            } 
            set {
                StimStepLogField = value;
                NotifyPropertyChanged("StimStepLog");
            }
        }

        private DataObjectReference StimStepLogField; 

        /// <summary>
        /// ReservoirInterval property
        /// </summary>
		[RecurringElement]
		[XmlElement("ReservoirInterval")]
        public List<StimReservoirInterval> ReservoirInterval {
            get {
                return ReservoirIntervalField;
            } 
            set {
                ReservoirIntervalField = value;
                NotifyPropertyChanged("ReservoirInterval");
            }
        }

         [XmlIgnore]
         public bool ReservoirIntervalSpecified
         {
            get {
             if(ReservoirIntervalField!=null)
                return ReservoirIntervalField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimReservoirInterval> ReservoirIntervalField; 

        /// <summary>
        /// Diversion property
        /// </summary>
		[ComponentElement]
		[XmlElement("Diversion")]
        public StimJobDiversion Diversion {
            get {
                return DiversionField;
            } 
            set {
                DiversionField = value;
                NotifyPropertyChanged("Diversion");
            }
        }

        private StimJobDiversion DiversionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of StimJobStage")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


    } //here

    /// <summary>
    /// This class represents the StimPerforationCluster xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the StimPerforationCluster xsd type.")]
    public partial class StimPerforationCluster : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MdPerforatedInterval property
        /// </summary>
		[Description("Measured depths of the top and base perforation.")]
        [ComponentElement]
		[XmlElement("MdPerforatedInterval")]
        public MdInterval MDPerforatedInterval {
            get {
                return MdPerforatedIntervalField;
            } 
            set {
                MdPerforatedIntervalField = value;
                NotifyPropertyChanged("MDPerforatedInterval");
            }
        }

        private MdInterval MdPerforatedIntervalField; 

        /// <summary>
        /// TvdPerforatedInterval property
        /// </summary>
		[Description("True vertical depth of the top and base perforation.")]
        [ComponentElement]
		[XmlElement("TvdPerforatedInterval")]
        public TvdInterval TvdPerforatedInterval {
            get {
                return TvdPerforatedIntervalField;
            } 
            set {
                TvdPerforatedIntervalField = value;
                NotifyPropertyChanged("TvdPerforatedInterval");
            }
        }

        private TvdInterval TvdPerforatedIntervalField; 

        /// <summary>
        /// Type property
        /// </summary>
		[StringLength(64)]
        [Description("The type of perforation and/or how the perforation was created.")]
		[XmlElement("Type")]
        public String Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private String TypeField; 

        /// <summary>
        /// PerforationCount property
        /// </summary>
		[Description("The number of perforations in this interval.")]
		[XmlElement("PerforationCount")]
        public Int64? PerforationCount {
            get {
                return PerforationCountField;
            } 
            set {
                PerforationCountField = value;
             if(value!=null) 
                 this.PerforationCountSpecified = true;
                NotifyPropertyChanged("PerforationCount");
            }
        }

        private Int64? PerforationCountField; 

        /// <summary>
        /// PerforationCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PerforationCountSpecified {
            get {
                return PerforationCountSpecifiedField;
            } 
            set {
                PerforationCountSpecifiedField = value;
                NotifyPropertyChanged("PerforationCountSpecified");
            }
        }

        private Boolean PerforationCountSpecifiedField; 

        /// <summary>
        /// Size property
        /// </summary>
		[Description("The size of the perforations.")]
        [ComponentElement]
		[XmlElement("Size")]
        public LengthMeasure Size {
            get {
                return SizeField;
            } 
            set {
                SizeField = value;
                NotifyPropertyChanged("Size");
            }
        }

        private LengthMeasure SizeField; 

        /// <summary>
        /// DensityPerforation property
        /// </summary>
		[Description("The number of perforation holes per length across the treatment interval.  Used to describe but not limited to the configuration of perforating guns or the placement  of perforations (holes, slots, openings ...) in the wellbore, and is often  abbreviated to spf (shots per foot).")]
        [ComponentElement]
		[XmlElement("DensityPerforation")]
        public ReciprocalLengthMeasure DensityPerforation {
            get {
                return DensityPerforationField;
            } 
            set {
                DensityPerforationField = value;
                NotifyPropertyChanged("DensityPerforation");
            }
        }

        private ReciprocalLengthMeasure DensityPerforationField; 

        /// <summary>
        /// PhasingPerforation property
        /// </summary>
		[Description("The radial distribution of successive perforations around the wellbore axis.  Radial distribution is commonly available in 0, 180 120, 90 and 60 degree phasing.")]
        [ComponentElement]
		[XmlElement("PhasingPerforation")]
        public PlaneAngleMeasure PhasingPerforation {
            get {
                return PhasingPerforationField;
            } 
            set {
                PhasingPerforationField = value;
                NotifyPropertyChanged("PhasingPerforation");
            }
        }

        private PlaneAngleMeasure PhasingPerforationField; 

        /// <summary>
        /// FrictionFactor property
        /// </summary>
		[Description("The friction factor of each perforation set.")]
		[XmlElement("FrictionFactor")]
        public Double? FrictionFactor {
            get {
                return FrictionFactorField;
            } 
            set {
                FrictionFactorField = value;
             if(value!=null) 
                 this.FrictionFactorSpecified = true;
                NotifyPropertyChanged("FrictionFactor");
            }
        }

        private Double? FrictionFactorField; 

        /// <summary>
        /// FrictionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean FrictionFactorSpecified {
            get {
                return FrictionFactorSpecifiedField;
            } 
            set {
                FrictionFactorSpecifiedField = value;
                NotifyPropertyChanged("FrictionFactorSpecified");
            }
        }

        private Boolean FrictionFactorSpecifiedField; 

        /// <summary>
        /// FrictionPres property
        /// </summary>
		[Description("The friction pressure for the perforation set.")]
        [ComponentElement]
		[XmlElement("FrictionPres")]
        public PressureMeasure FrictionPres {
            get {
                return FrictionPresField;
            } 
            set {
                FrictionPresField = value;
                NotifyPropertyChanged("FrictionPres");
            }
        }

        private PressureMeasure FrictionPresField; 

        /// <summary>
        /// DischargeCoefficient property
        /// </summary>
		[Description("A coefficient used in the equation for calculation of pressure drop across a perforation set.")]
		[XmlElement("DischargeCoefficient")]
        public Double? DischargeCoefficient {
            get {
                return DischargeCoefficientField;
            } 
            set {
                DischargeCoefficientField = value;
             if(value!=null) 
                 this.DischargeCoefficientSpecified = true;
                NotifyPropertyChanged("DischargeCoefficient");
            }
        }

        private Double? DischargeCoefficientField; 

        /// <summary>
        /// DischargeCoefficientSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DischargeCoefficientSpecified {
            get {
                return DischargeCoefficientSpecifiedField;
            } 
            set {
                DischargeCoefficientSpecifiedField = value;
                NotifyPropertyChanged("DischargeCoefficientSpecified");
            }
        }

        private Boolean DischargeCoefficientSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the StimJob xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the StimJob xsd type.")]
    public partial class StimJob : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// AvgJobPres property
        /// </summary>
		[Description("Average pressure encountered during treatment of all stages.")]
        [ComponentElement]
		[XmlElement("AvgJobPres")]
        public PressureMeasure AvgJobPres {
            get {
                return AvgJobPresField;
            } 
            set {
                AvgJobPresField = value;
                NotifyPropertyChanged("AvgJobPres");
            }
        }

        private PressureMeasure AvgJobPresField; 

        /// <summary>
        /// BottomholeStaticTemperature property
        /// </summary>
		[Description("Bottomhole static temperature for the job.")]
        [ComponentElement]
		[XmlElement("BottomholeStaticTemperature")]
        public ThermodynamicTemperatureMeasure BottomholeStaticTemperature {
            get {
                return BottomholeStaticTemperatureField;
            } 
            set {
                BottomholeStaticTemperatureField = value;
                NotifyPropertyChanged("BottomholeStaticTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure BottomholeStaticTemperatureField; 

        /// <summary>
        /// CustomerName property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Customer or company name.")]
		[XmlElement("CustomerName")]
        public String CustomerName {
            get {
                return CustomerNameField;
            } 
            set {
                CustomerNameField = value;
                NotifyPropertyChanged("CustomerName");
            }
        }

        private String CustomerNameField; 

        /// <summary>
        /// DTimArrival property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time at which the stimulation contractor arrives on location.")]
		[XmlElement("DTimArrival")]
        public String DateTimeArrival {
            get {
                return DTimArrivalField;
            } 
            set {
                DTimArrivalField = value;
                NotifyPropertyChanged("DateTimeArrival");
            }
        }

        private String DTimArrivalField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Ending date and time of stimulation job.")]
		[XmlElement("DTimEnd")]
        public String DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private String DTimEndField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Start date and time of the stimulation job.")]
		[XmlElement("DTimStart")]
        public String DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private String DTimStartField; 

        /// <summary>
        /// FlowBackPres property
        /// </summary>
		[Description("Pressure recorded on fluid returning to surface.")]
        [ComponentElement]
		[XmlElement("FlowBackPres")]
        public PressureMeasure FlowBackPres {
            get {
                return FlowBackPresField;
            } 
            set {
                FlowBackPresField = value;
                NotifyPropertyChanged("FlowBackPres");
            }
        }

        private PressureMeasure FlowBackPresField; 

        /// <summary>
        /// FlowBackRate property
        /// </summary>
		[Description("Rate recorded on fluid returning to surface.")]
        [ComponentElement]
		[XmlElement("FlowBackRate")]
        public VolumePerTimeMeasure FlowBackRate {
            get {
                return FlowBackRateField;
            } 
            set {
                FlowBackRateField = value;
                NotifyPropertyChanged("FlowBackRate");
            }
        }

        private VolumePerTimeMeasure FlowBackRateField; 

        /// <summary>
        /// FlowBackVolume property
        /// </summary>
		[Description("Volume recorded on fluid returning to surface.")]
        [ComponentElement]
		[XmlElement("FlowBackVolume")]
        public VolumeMeasure FlowBackVolume {
            get {
                return FlowBackVolumeField;
            } 
            set {
                FlowBackVolumeField = value;
                NotifyPropertyChanged("FlowBackVolume");
            }
        }

        private VolumeMeasure FlowBackVolumeField; 

        /// <summary>
        /// FluidEfficiency property
        /// </summary>
		[Description("Percentage of fluid volume in the fracture at the end of pumping.")]
        [ComponentElement]
		[XmlElement("FluidEfficiency")]
        public VolumePerVolumeMeasure FluidEfficiency {
            get {
                return FluidEfficiencyField;
            } 
            set {
                FluidEfficiencyField = value;
                NotifyPropertyChanged("FluidEfficiency");
            }
        }

        private VolumePerVolumeMeasure FluidEfficiencyField; 

        /// <summary>
        /// HhpOrdered property
        /// </summary>
		[Description("Hydraulic horsepower ordered for the stimulation job.")]
        [ComponentElement]
		[XmlElement("HhpOrdered")]
        public PowerMeasure HhpOrdered {
            get {
                return HhpOrderedField;
            } 
            set {
                HhpOrderedField = value;
                NotifyPropertyChanged("HhpOrdered");
            }
        }

        private PowerMeasure HhpOrderedField; 

        /// <summary>
        /// HhpUsed property
        /// </summary>
		[Description("Hydraulic horsepower actually used for the stimulation job.")]
        [ComponentElement]
		[XmlElement("HhpUsed")]
        public PowerMeasure HhpUsed {
            get {
                return HhpUsedField;
            } 
            set {
                HhpUsedField = value;
                NotifyPropertyChanged("HhpUsed");
            }
        }

        private PowerMeasure HhpUsedField; 

        /// <summary>
        /// JobPerforationClusters property
        /// </summary>
		[Description("Perforation Clusters existing prior to starting the job.")]
        [RecurringElement]
		[XmlArrayItem("")]
        [XmlArray("JobPerforationClusters")]
        public List<StimPerforationCluster> JobPerforationClusters {
            get {
                return JobPerforationClustersField;
            } 
            set {
                JobPerforationClustersField = value;
                NotifyPropertyChanged("JobPerforationClusters");
            }
        }

         [XmlIgnore]
         public bool JobPerforationClustersSpecified
         {
            get {
             if(JobPerforationClustersField!=null)
                return JobPerforationClustersField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimPerforationCluster> JobPerforationClustersField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Type of well stimulation job.")]
		[XmlElement("Kind")]
        public String Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private String KindField; 

        /// <summary>
        /// MaxFluidRate property
        /// </summary>
		[Description("Maximum job fluid pumping rate encountered during treatment of all stage.")]
        [ComponentElement]
		[XmlElement("MaxFluidRate")]
        public VolumePerTimeMeasure MaxFluidRate {
            get {
                return MaxFluidRateField;
            } 
            set {
                MaxFluidRateField = value;
                NotifyPropertyChanged("MaxFluidRate");
            }
        }

        private VolumePerTimeMeasure MaxFluidRateField; 

        /// <summary>
        /// MaxJobPres property
        /// </summary>
		[Description("Maximum pressure encountered during the job.")]
        [ComponentElement]
		[XmlElement("MaxJobPres")]
        public PressureMeasure MaxJobPres {
            get {
                return MaxJobPresField;
            } 
            set {
                MaxJobPresField = value;
                NotifyPropertyChanged("MaxJobPres");
            }
        }

        private PressureMeasure MaxJobPresField; 

        /// <summary>
        /// PIDXCommodityCode property
        /// </summary>
		[Description("UNSPSC(Segment 71) Commodity Code from Oil and gas extraction and production enhancement services family.")]
		[XmlElement("PIDXCommodityCode")]
        public PIDXCommodityCode? PIDXCommodityCode {
            get {
                return PIDXCommodityCodeField;
            } 
            set {
                PIDXCommodityCodeField = value;
             if(value!=null) 
                 this.PIDXCommodityCodeSpecified = true;
                NotifyPropertyChanged("PIDXCommodityCode");
            }
        }

        private PIDXCommodityCode? PIDXCommodityCodeField; 

        /// <summary>
        /// PIDXCommodityCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PIDXCommodityCodeSpecified {
            get {
                return PIDXCommodityCodeSpecifiedField;
            } 
            set {
                PIDXCommodityCodeSpecifiedField = value;
                NotifyPropertyChanged("PIDXCommodityCodeSpecified");
            }
        }

        private Boolean PIDXCommodityCodeSpecifiedField; 

        /// <summary>
        /// ServiceCompany property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Name of the well stimulation contractor.")]
		[XmlElement("ServiceCompany")]
        public String ServiceCompany {
            get {
                return ServiceCompanyField;
            } 
            set {
                ServiceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private String ServiceCompanyField; 

        /// <summary>
        /// StageCount property
        /// </summary>
		[Description("Number of stages treated during the stimulation service.")]
		[XmlElement("StageCount")]
        public Int64? StageCount {
            get {
                return StageCountField;
            } 
            set {
                StageCountField = value;
             if(value!=null) 
                 this.StageCountSpecified = true;
                NotifyPropertyChanged("StageCount");
            }
        }

        private Int64? StageCountField; 

        /// <summary>
        /// StageCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StageCountSpecified {
            get {
                return StageCountSpecifiedField;
            } 
            set {
                StageCountSpecifiedField = value;
                NotifyPropertyChanged("StageCountSpecified");
            }
        }

        private Boolean StageCountSpecifiedField; 

        /// <summary>
        /// Supervisor property
        /// </summary>
		[StringLength(64)]
        [Description("Name of service company supervisor.")]
		[XmlElement("Supervisor")]
        public String Supervisor {
            get {
                return SupervisorField;
            } 
            set {
                SupervisorField = value;
                NotifyPropertyChanged("Supervisor");
            }
        }

        private String SupervisorField; 

        /// <summary>
        /// TotalJobVolume property
        /// </summary>
		[Description("Total volume pumped for all stages.")]
        [ComponentElement]
		[XmlElement("TotalJobVolume")]
        public VolumeMeasure TotalJobVolume {
            get {
                return TotalJobVolumeField;
            } 
            set {
                TotalJobVolumeField = value;
                NotifyPropertyChanged("TotalJobVolume");
            }
        }

        private VolumeMeasure TotalJobVolumeField; 

        /// <summary>
        /// TotalProppantInFormation property
        /// </summary>
		[Description("The total mass of proppant placed in the formation for the entire job.")]
        [ComponentElement]
		[XmlElement("TotalProppantInFormation")]
        public MassMeasure TotalProppantInFormation {
            get {
                return TotalProppantInFormationField;
            } 
            set {
                TotalProppantInFormationField = value;
                NotifyPropertyChanged("TotalProppantInFormation");
            }
        }

        private MassMeasure TotalProppantInFormationField; 

        /// <summary>
        /// TotalProppantUsed property
        /// </summary>
		[Description("{Get this from WITSML 1.4.1.1, which Clinton removed.}")]
        [ComponentElement]
		[XmlElement("TotalProppantUsed")]
        public MassMeasure TotalProppantUsed {
            get {
                return TotalProppantUsedField;
            } 
            set {
                TotalProppantUsedField = value;
                NotifyPropertyChanged("TotalProppantUsed");
            }
        }

        private MassMeasure TotalProppantUsedField; 

        /// <summary>
        /// TotalPumpTime property
        /// </summary>
		[Description("The total pumping time.")]
        [ComponentElement]
		[XmlElement("TotalPumpTime")]
        public TimeMeasure TotalPumpTime {
            get {
                return TotalPumpTimeField;
            } 
            set {
                TotalPumpTimeField = value;
                NotifyPropertyChanged("TotalPumpTime");
            }
        }

        private TimeMeasure TotalPumpTimeField; 

        /// <summary>
        /// TreatingBottomholeTemperature property
        /// </summary>
		[Description("Expected or calculated bottomhole treating temperature for the job.")]
        [ComponentElement]
		[XmlElement("TreatingBottomholeTemperature")]
        public ThermodynamicTemperatureMeasure TreatingBottomholeTemperature {
            get {
                return TreatingBottomholeTemperatureField;
            } 
            set {
                TreatingBottomholeTemperatureField = value;
                NotifyPropertyChanged("TreatingBottomholeTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure TreatingBottomholeTemperatureField; 

        /// <summary>
        /// JobStage property
        /// </summary>
		[Description("A stage treated during the stimulation job.")]
        [RecurringElement]
		[XmlElement("JobStage")]
        public List<DataObjectReference> JobStage {
            get {
                return JobStageField;
            } 
            set {
                JobStageField = value;
                NotifyPropertyChanged("JobStage");
            }
        }

         [XmlIgnore]
         public bool JobStageSpecified
         {
            get {
             if(JobStageField!=null)
                return JobStageField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DataObjectReference> JobStageField; 

        /// <summary>
        /// MaterialUsed property
        /// </summary>
		[RecurringElement]
		[XmlElement("MaterialUsed")]
        public List<StimMaterialQuantity> MaterialUsed {
            get {
                return MaterialUsedField;
            } 
            set {
                MaterialUsedField = value;
                NotifyPropertyChanged("MaterialUsed");
            }
        }

         [XmlIgnore]
         public bool MaterialUsedSpecified
         {
            get {
             if(MaterialUsedField!=null)
                return MaterialUsedField.Count>0?true:false;
             else return false;
            } 
         }
        private List<StimMaterialQuantity> MaterialUsedField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// MaterialCatalog property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("MaterialCatalog")]
        public StimJobMaterialCatalog MaterialCatalog {
            get {
                return MaterialCatalogField;
            } 
            set {
                MaterialCatalogField = value;
                NotifyPropertyChanged("MaterialCatalog");
            }
        }

        private StimJobMaterialCatalog MaterialCatalogField; 

        /// <summary>
        /// LogCatalog property
        /// </summary>
		[RecurringElement]
		[XmlArrayItem("JobLog")]
        [XmlArray("LogCatalog")]
        public List<List<DataObjectReference>> LogCatalog {
            get {
                return LogCatalogField;
            } 
            set {
                LogCatalogField = value;
                NotifyPropertyChanged("LogCatalog");
            }
        }

         [XmlIgnore]
         public bool LogCatalogSpecified
         {
            get {
             if(LogCatalogField!=null)
                return LogCatalogField.Count>0?true:false;
             else return false;
            } 
         }
        private List<List<DataObjectReference>> LogCatalogField; 


    } //here

    /// <summary>
    /// This class represents the Risk xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Risk xsd type.")]
    public partial class Risk : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Type property
        /// </summary>
		[Required]
        [Description("The type of risk.")]
		[XmlElement("Type")]
        public RiskType? Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private RiskType? TypeField; 

        /// <summary>
        /// Category property
        /// </summary>
		[Required]
        [Description("The category of risk.")]
		[XmlElement("Category")]
        public RiskCategory? Category {
            get {
                return CategoryField;
            } 
            set {
                CategoryField = value;
                NotifyPropertyChanged("Category");
            }
        }

        private RiskCategory? CategoryField; 

        /// <summary>
        /// SubCategory property
        /// </summary>
		[Description("The sub category of risk.")]
		[XmlElement("SubCategory")]
        public RiskSubCategory? SubCategory {
            get {
                return SubCategoryField;
            } 
            set {
                SubCategoryField = value;
             if(value!=null) 
                 this.SubCategorySpecified = true;
                NotifyPropertyChanged("SubCategory");
            }
        }

        private RiskSubCategory? SubCategoryField; 

        /// <summary>
        /// SubCategorySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean SubCategorySpecified {
            get {
                return SubCategorySpecifiedField;
            } 
            set {
                SubCategorySpecifiedField = value;
                NotifyPropertyChanged("SubCategorySpecified");
            }
        }

        private Boolean SubCategorySpecifiedField; 

        /// <summary>
        /// ExtendCategory property
        /// </summary>
		[StringLength(64)]
        [Description("Custom string to further categorize the risk.")]
		[XmlElement("ExtendCategory")]
        public String ExtendCategory {
            get {
                return ExtendCategoryField;
            } 
            set {
                ExtendCategoryField = value;
                NotifyPropertyChanged("ExtendCategory");
            }
        }

        private String ExtendCategoryField; 

        /// <summary>
        /// AffectedPersonnel property
        /// </summary>
		[Description("The personnel afected by the risk.")]
        [RecurringElement]
		[XmlElement("AffectedPersonnel")]
        public List<RiskAffectedPersonnel> AffectedPersonnel {
            get {
                return AffectedPersonnelField;
            } 
            set {
                AffectedPersonnelField = value;
                NotifyPropertyChanged("AffectedPersonnel");
            }
        }

         [XmlIgnore]
         public bool AffectedPersonnelSpecified
         {
            get {
             if(AffectedPersonnelField!=null)
                return AffectedPersonnelField.Count>0?true:false;
             else return false;
            } 
         }
        private List<RiskAffectedPersonnel> AffectedPersonnelField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that activities started.")]
		[XmlElement("DTimStart")]
        public String DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private String DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that activities were completed.")]
		[XmlElement("DTimEnd")]
        public String DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private String DTimEndField; 

        /// <summary>
        /// MdHoleStart property
        /// </summary>
		[Description("Measured Depth at start of activity.")]
        [ComponentElement]
		[XmlElement("MdHoleStart")]
        public MeasuredDepthCoord MDHoleStart {
            get {
                return MdHoleStartField;
            } 
            set {
                MdHoleStartField = value;
                NotifyPropertyChanged("MDHoleStart");
            }
        }

        private MeasuredDepthCoord MdHoleStartField; 

        /// <summary>
        /// MdHoleEnd property
        /// </summary>
		[Description("Measured Depth at end of activity.")]
        [ComponentElement]
		[XmlElement("MdHoleEnd")]
        public MeasuredDepthCoord MDHoleEnd {
            get {
                return MdHoleEndField;
            } 
            set {
                MdHoleEndField = value;
                NotifyPropertyChanged("MDHoleEnd");
            }
        }

        private MeasuredDepthCoord MdHoleEndField; 

        /// <summary>
        /// TvdHoleStart property
        /// </summary>
		[Description("True Vertical Depth at start of activity.")]
        [ComponentElement]
		[XmlElement("TvdHoleStart")]
        public WellVerticalDepthCoord TvdHoleStart {
            get {
                return TvdHoleStartField;
            } 
            set {
                TvdHoleStartField = value;
                NotifyPropertyChanged("TvdHoleStart");
            }
        }

        private WellVerticalDepthCoord TvdHoleStartField; 

        /// <summary>
        /// TvdHoleEnd property
        /// </summary>
		[Description("True Vertical Depth at end of activity.")]
        [ComponentElement]
		[XmlElement("TvdHoleEnd")]
        public WellVerticalDepthCoord TvdHoleEnd {
            get {
                return TvdHoleEndField;
            } 
            set {
                TvdHoleEndField = value;
                NotifyPropertyChanged("TvdHoleEnd");
            }
        }

        private WellVerticalDepthCoord TvdHoleEndField; 

        /// <summary>
        /// MdBitStart property
        /// </summary>
		[Description("Measured depth of bit at start of activity.")]
        [ComponentElement]
		[XmlElement("MdBitStart")]
        public MeasuredDepthCoord MDBitStart {
            get {
                return MdBitStartField;
            } 
            set {
                MdBitStartField = value;
                NotifyPropertyChanged("MDBitStart");
            }
        }

        private MeasuredDepthCoord MdBitStartField; 

        /// <summary>
        /// MdBitEnd property
        /// </summary>
		[Description("Measured depth of bit at end of activity.")]
        [ComponentElement]
		[XmlElement("MdBitEnd")]
        public MeasuredDepthCoord MDBitEnd {
            get {
                return MdBitEndField;
            } 
            set {
                MdBitEndField = value;
                NotifyPropertyChanged("MDBitEnd");
            }
        }

        private MeasuredDepthCoord MdBitEndField; 

        /// <summary>
        /// DiaHole property
        /// </summary>
		[Description("Hole diameter.")]
        [ComponentElement]
		[XmlElement("DiaHole")]
        public LengthMeasure DiaHole {
            get {
                return DiaHoleField;
            } 
            set {
                DiaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure DiaHoleField; 

        /// <summary>
        /// SeverityLevel property
        /// </summary>
		[Range(0, 8)]
        [Description("Severity Level of the Risk.  Values of 1 through 5 with 1 being the lowest.")]
		[XmlElement("SeverityLevel")]
        public Int16? SeverityLevel {
            get {
                return SeverityLevelField;
            } 
            set {
                SeverityLevelField = value;
             if(value!=null) 
                 this.SeverityLevelSpecified = true;
                NotifyPropertyChanged("SeverityLevel");
            }
        }

        private Int16? SeverityLevelField; 

        /// <summary>
        /// SeverityLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean SeverityLevelSpecified {
            get {
                return SeverityLevelSpecifiedField;
            } 
            set {
                SeverityLevelSpecifiedField = value;
                NotifyPropertyChanged("SeverityLevelSpecified");
            }
        }

        private Boolean SeverityLevelSpecifiedField; 

        /// <summary>
        /// ProbabilityLevel property
        /// </summary>
		[Range(0, 8)]
        [Description("Probability Level of the Risk. Values of 1 through 5 with 1 being the lowest.")]
		[XmlElement("ProbabilityLevel")]
        public Int16? ProbabilityLevel {
            get {
                return ProbabilityLevelField;
            } 
            set {
                ProbabilityLevelField = value;
             if(value!=null) 
                 this.ProbabilityLevelSpecified = true;
                NotifyPropertyChanged("ProbabilityLevel");
            }
        }

        private Int16? ProbabilityLevelField; 

        /// <summary>
        /// ProbabilityLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ProbabilityLevelSpecified {
            get {
                return ProbabilityLevelSpecifiedField;
            } 
            set {
                ProbabilityLevelSpecifiedField = value;
                NotifyPropertyChanged("ProbabilityLevelSpecified");
            }
        }

        private Boolean ProbabilityLevelSpecifiedField; 

        /// <summary>
        /// Summary property
        /// </summary>
		[StringLength(2000)]
        [Description("summary description of risk.")]
		[XmlElement("Summary")]
        public String Summary {
            get {
                return SummaryField;
            } 
            set {
                SummaryField = value;
                NotifyPropertyChanged("Summary");
            }
        }

        private String SummaryField; 

        /// <summary>
        /// Details property
        /// </summary>
		[StringLength(2000)]
        [Description("Complete description of Risk.")]
		[XmlElement("Details")]
        public String Details {
            get {
                return DetailsField;
            } 
            set {
                DetailsField = value;
                NotifyPropertyChanged("Details");
            }
        }

        private String DetailsField; 

        /// <summary>
        /// Identification property
        /// </summary>
		[StringLength(2000)]
        [Description("Details for identifing the Risk.")]
		[XmlElement("Identification")]
        public String Identification {
            get {
                return IdentificationField;
            } 
            set {
                IdentificationField = value;
                NotifyPropertyChanged("Identification");
            }
        }

        private String IdentificationField; 

        /// <summary>
        /// Contingency property
        /// </summary>
		[StringLength(2000)]
        [Description("Plan of action if the Risk materializes.")]
		[XmlElement("Contingency")]
        public String Contingency {
            get {
                return ContingencyField;
            } 
            set {
                ContingencyField = value;
                NotifyPropertyChanged("Contingency");
            }
        }

        private String ContingencyField; 

        /// <summary>
        /// Mitigation property
        /// </summary>
		[Description("Plan of action to ensure the risk does not materialize.")]
        [RecurringElement]
		[XmlElement("Mitigation")]
        public List<String> Mitigation {
            get {
                return MitigationField;
            } 
            set {
                MitigationField = value;
                NotifyPropertyChanged("Mitigation");
            }
        }

         [XmlIgnore]
         public bool MitigationSpecified
         {
            get {
             if(MitigationField!=null)
                return MitigationField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> MitigationField; 

        /// <summary>
        /// ObjectReference property
        /// </summary>
		[ComponentElement]
		[XmlElement("ObjectReference")]
        public DataObjectReference ObjectReference {
            get {
                return ObjectReferenceField;
            } 
            set {
                ObjectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private DataObjectReference ObjectReferenceField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the Rig xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Rig xsd type.")]
    public partial class Rig : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Owner property
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
		[XmlElement("Owner")]
        public String Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private String OwnerField; 

        /// <summary>
        /// TypeRig property
        /// </summary>
		[Description("Rig type.")]
		[XmlElement("TypeRig")]
        public RigType? TypeRig {
            get {
                return TypeRigField;
            } 
            set {
                TypeRigField = value;
             if(value!=null) 
                 this.TypeRigSpecified = true;
                NotifyPropertyChanged("TypeRig");
            }
        }

        private RigType? TypeRigField; 

        /// <summary>
        /// TypeRigSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeRigSpecified {
            get {
                return TypeRigSpecifiedField;
            } 
            set {
                TypeRigSpecifiedField = value;
                NotifyPropertyChanged("TypeRigSpecified");
            }
        }

        private Boolean TypeRigSpecifiedField; 

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
		[XmlElement("Manufacturer")]
        public String Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private String ManufacturerField; 

        /// <summary>
        /// YearEntService property
        /// </summary>
		[Description("Year entered service (CCYY).")]
		[XmlElement("YearEntService", DataType="gYear")]
        public String YearEntService {
            get {
                return YearEntServiceField;
            } 
            set {
                YearEntServiceField = value;
                NotifyPropertyChanged("YearEntService");
            }
        }

        private String YearEntServiceField; 

        /// <summary>
        /// ClassRig property
        /// </summary>
		[StringLength(64)]
        [Description("Rig classification.")]
		[XmlElement("ClassRig")]
        public String ClassRig {
            get {
                return ClassRigField;
            } 
            set {
                ClassRigField = value;
                NotifyPropertyChanged("ClassRig");
            }
        }

        private String ClassRigField; 

        /// <summary>
        /// Approvals property
        /// </summary>
		[StringLength(64)]
        [Description("Rig approvals/certification.")]
		[XmlElement("Approvals")]
        public String Approvals {
            get {
                return ApprovalsField;
            } 
            set {
                ApprovalsField = value;
                NotifyPropertyChanged("Approvals");
            }
        }

        private String ApprovalsField; 

        /// <summary>
        /// Registration property
        /// </summary>
		[StringLength(64)]
        [Description("Rig registration location.")]
		[XmlElement("Registration")]
        public String Registration {
            get {
                return RegistrationField;
            } 
            set {
                RegistrationField = value;
                NotifyPropertyChanged("Registration");
            }
        }

        private String RegistrationField; 

        /// <summary>
        /// TelNumber property
        /// </summary>
		[StringLength(64)]
        [Description("Rig telephone number.")]
		[XmlElement("TelNumber")]
        public String TelNumber {
            get {
                return TelNumberField;
            } 
            set {
                TelNumberField = value;
                NotifyPropertyChanged("TelNumber");
            }
        }

        private String TelNumberField; 

        /// <summary>
        /// FaxNumber property
        /// </summary>
		[StringLength(64)]
        [Description("Rig fax number.")]
		[XmlElement("FaxNumber")]
        public String FaxNumber {
            get {
                return FaxNumberField;
            } 
            set {
                FaxNumberField = value;
                NotifyPropertyChanged("FaxNumber");
            }
        }

        private String FaxNumberField; 

        /// <summary>
        /// EmailAddress property
        /// </summary>
		[StringLength(64)]
        [Description("Rig Email address.")]
		[XmlElement("EmailAddress")]
        public String EmailAddress {
            get {
                return EmailAddressField;
            } 
            set {
                EmailAddressField = value;
                NotifyPropertyChanged("EmailAddress");
            }
        }

        private String EmailAddressField; 

        /// <summary>
        /// NameContact property
        /// </summary>
		[StringLength(64)]
        [Description("Name of contact person.")]
		[XmlElement("NameContact")]
        public String NameContact {
            get {
                return NameContactField;
            } 
            set {
                NameContactField = value;
                NotifyPropertyChanged("NameContact");
            }
        }

        private String NameContactField; 

        /// <summary>
        /// RatingDrillDepth property
        /// </summary>
		[Description("Maximum hole depth rating for the rig.")]
        [ComponentElement]
		[XmlElement("RatingDrillDepth")]
        public LengthMeasure RatingDrillDepth {
            get {
                return RatingDrillDepthField;
            } 
            set {
                RatingDrillDepthField = value;
                NotifyPropertyChanged("RatingDrillDepth");
            }
        }

        private LengthMeasure RatingDrillDepthField; 

        /// <summary>
        /// RatingWaterDepth property
        /// </summary>
		[Description("Working water depth capability of rig.")]
        [ComponentElement]
		[XmlElement("RatingWaterDepth")]
        public LengthMeasure RatingWaterDepth {
            get {
                return RatingWaterDepthField;
            } 
            set {
                RatingWaterDepthField = value;
                NotifyPropertyChanged("RatingWaterDepth");
            }
        }

        private LengthMeasure RatingWaterDepthField; 

        /// <summary>
        /// IsOffshore property
        /// </summary>
		[Description("Flag to indicate that rig is an offshore rig (Drill Ship, Semi, Jack-up, Platform, TADU).   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("IsOffshore")]
        public Boolean? IsOffshore {
            get {
                return IsOffshoreField;
            } 
            set {
                IsOffshoreField = value;
             if(value!=null) 
                 this.IsOffshoreSpecified = true;
                NotifyPropertyChanged("IsOffshore");
            }
        }

        private Boolean? IsOffshoreField; 

        /// <summary>
        /// IsOffshoreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsOffshoreSpecified {
            get {
                return IsOffshoreSpecifiedField;
            } 
            set {
                IsOffshoreSpecifiedField = value;
                NotifyPropertyChanged("IsOffshoreSpecified");
            }
        }

        private Boolean IsOffshoreSpecifiedField; 

        /// <summary>
        /// AirGap property
        /// </summary>
		[Description("Air gap from Rig Floor to ground or mean sea level depending on location.")]
        [ComponentElement]
		[XmlElement("AirGap")]
        public LengthMeasure AirGap {
            get {
                return AirGapField;
            } 
            set {
                AirGapField = value;
                NotifyPropertyChanged("AirGap");
            }
        }

        private LengthMeasure AirGapField; 

        /// <summary>
        /// DTimStartOp property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time rig operations started, or date and time object created.")]
		[XmlElement("DTimStartOp")]
        public String DateTimeStartOperating {
            get {
                return DTimStartOpField;
            } 
            set {
                DTimStartOpField = value;
                NotifyPropertyChanged("DateTimeStartOperating");
            }
        }

        private String DTimStartOpField; 

        /// <summary>
        /// DTimEndOp property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time rig operations ended (May be NULL for active rig).")]
		[XmlElement("DTimEndOp")]
        public String DateTimeEndOperating {
            get {
                return DTimEndOpField;
            } 
            set {
                DTimEndOpField = value;
                NotifyPropertyChanged("DateTimeEndOperating");
            }
        }

        private String DTimEndOpField; 

        /// <summary>
        /// NumDerricks property
        /// </summary>
		[Description("Number of derricks on the rig.")]
		[XmlElement("NumDerricks")]
        public Int32? NumDerricks {
            get {
                return NumDerricksField;
            } 
            set {
                NumDerricksField = value;
             if(value!=null) 
                 this.NumDerricksSpecified = true;
                NotifyPropertyChanged("NumDerricks");
            }
        }

        private Int32? NumDerricksField; 

        /// <summary>
        /// NumDerricksSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumDerricksSpecified {
            get {
                return NumDerricksSpecifiedField;
            } 
            set {
                NumDerricksSpecifiedField = value;
                NotifyPropertyChanged("NumDerricksSpecified");
            }
        }

        private Boolean NumDerricksSpecifiedField; 

        /// <summary>
        /// TypeDerrick property
        /// </summary>
		[Description("Derrick type.")]
		[XmlElement("TypeDerrick")]
        public DerrickType? TypeDerrick {
            get {
                return TypeDerrickField;
            } 
            set {
                TypeDerrickField = value;
             if(value!=null) 
                 this.TypeDerrickSpecified = true;
                NotifyPropertyChanged("TypeDerrick");
            }
        }

        private DerrickType? TypeDerrickField; 

        /// <summary>
        /// TypeDerrickSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeDerrickSpecified {
            get {
                return TypeDerrickSpecifiedField;
            } 
            set {
                TypeDerrickSpecifiedField = value;
                NotifyPropertyChanged("TypeDerrickSpecified");
            }
        }

        private Boolean TypeDerrickSpecifiedField; 

        /// <summary>
        /// RatingDerrick property
        /// </summary>
		[Description("Maximum support load applied to derrick structure.")]
        [ComponentElement]
		[XmlElement("RatingDerrick")]
        public ForceMeasure RatingDerrick {
            get {
                return RatingDerrickField;
            } 
            set {
                RatingDerrickField = value;
                NotifyPropertyChanged("RatingDerrick");
            }
        }

        private ForceMeasure RatingDerrickField; 

        /// <summary>
        /// HtDerrick property
        /// </summary>
		[Description("Height of derrick.")]
        [ComponentElement]
		[XmlElement("HtDerrick")]
        public LengthMeasure HeightDerrick {
            get {
                return HtDerrickField;
            } 
            set {
                HtDerrickField = value;
                NotifyPropertyChanged("HeightDerrick");
            }
        }

        private LengthMeasure HtDerrickField; 

        /// <summary>
        /// RatingHkld property
        /// </summary>
		[Description("Maximum hookload rating.")]
        [ComponentElement]
		[XmlElement("RatingHkld")]
        public ForceMeasure RatingHookload {
            get {
                return RatingHkldField;
            } 
            set {
                RatingHkldField = value;
                NotifyPropertyChanged("RatingHookload");
            }
        }

        private ForceMeasure RatingHkldField; 

        /// <summary>
        /// CapWindDerrick property
        /// </summary>
		[Description("Derrick wind capacity.")]
        [ComponentElement]
		[XmlElement("CapWindDerrick")]
        public LengthPerTimeMeasure CapWindDerrick {
            get {
                return CapWindDerrickField;
            } 
            set {
                CapWindDerrickField = value;
                NotifyPropertyChanged("CapWindDerrick");
            }
        }

        private LengthPerTimeMeasure CapWindDerrickField; 

        /// <summary>
        /// WtBlock property
        /// </summary>
		[Description("Block weight.")]
        [ComponentElement]
		[XmlElement("WtBlock")]
        public ForceMeasure WeightBlock {
            get {
                return WtBlockField;
            } 
            set {
                WtBlockField = value;
                NotifyPropertyChanged("WeightBlock");
            }
        }

        private ForceMeasure WtBlockField; 

        /// <summary>
        /// RatingBlock property
        /// </summary>
		[Description("Weight rating of the travelling block.")]
        [ComponentElement]
		[XmlElement("RatingBlock")]
        public ForceMeasure RatingBlock {
            get {
                return RatingBlockField;
            } 
            set {
                RatingBlockField = value;
                NotifyPropertyChanged("RatingBlock");
            }
        }

        private ForceMeasure RatingBlockField; 

        /// <summary>
        /// NumBlockLines property
        /// </summary>
		[Description("Number of block lines.")]
		[XmlElement("NumBlockLines")]
        public Int32? NumBlockLines {
            get {
                return NumBlockLinesField;
            } 
            set {
                NumBlockLinesField = value;
             if(value!=null) 
                 this.NumBlockLinesSpecified = true;
                NotifyPropertyChanged("NumBlockLines");
            }
        }

        private Int32? NumBlockLinesField; 

        /// <summary>
        /// NumBlockLinesSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumBlockLinesSpecified {
            get {
                return NumBlockLinesSpecifiedField;
            } 
            set {
                NumBlockLinesSpecifiedField = value;
                NotifyPropertyChanged("NumBlockLinesSpecified");
            }
        }

        private Boolean NumBlockLinesSpecifiedField; 

        /// <summary>
        /// TypeHook property
        /// </summary>
		[StringLength(64)]
        [Description("Type of hook.")]
		[XmlElement("TypeHook")]
        public String TypeHook {
            get {
                return TypeHookField;
            } 
            set {
                TypeHookField = value;
                NotifyPropertyChanged("TypeHook");
            }
        }

        private String TypeHookField; 

        /// <summary>
        /// RatingHook property
        /// </summary>
		[Description("Weight rating of the hook.")]
        [ComponentElement]
		[XmlElement("RatingHook")]
        public ForceMeasure RatingHook {
            get {
                return RatingHookField;
            } 
            set {
                RatingHookField = value;
                NotifyPropertyChanged("RatingHook");
            }
        }

        private ForceMeasure RatingHookField; 

        /// <summary>
        /// SizeDrillLine property
        /// </summary>
		[Description("Drill line diameter.")]
        [ComponentElement]
		[XmlElement("SizeDrillLine")]
        public LengthMeasure SizeDrillLine {
            get {
                return SizeDrillLineField;
            } 
            set {
                SizeDrillLineField = value;
                NotifyPropertyChanged("SizeDrillLine");
            }
        }

        private LengthMeasure SizeDrillLineField; 

        /// <summary>
        /// TypeDrawWorks property
        /// </summary>
		[Description("Draw-works type.")]
		[XmlElement("TypeDrawWorks")]
        public DrawWorksType? TypeDrawWorks {
            get {
                return TypeDrawWorksField;
            } 
            set {
                TypeDrawWorksField = value;
             if(value!=null) 
                 this.TypeDrawWorksSpecified = true;
                NotifyPropertyChanged("TypeDrawWorks");
            }
        }

        private DrawWorksType? TypeDrawWorksField; 

        /// <summary>
        /// TypeDrawWorksSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeDrawWorksSpecified {
            get {
                return TypeDrawWorksSpecifiedField;
            } 
            set {
                TypeDrawWorksSpecifiedField = value;
                NotifyPropertyChanged("TypeDrawWorksSpecified");
            }
        }

        private Boolean TypeDrawWorksSpecifiedField; 

        /// <summary>
        /// PowerDrawWorks property
        /// </summary>
		[Description("Draw works horse power.")]
        [ComponentElement]
		[XmlElement("PowerDrawWorks")]
        public PowerMeasure PowerDrawWorks {
            get {
                return PowerDrawWorksField;
            } 
            set {
                PowerDrawWorksField = value;
                NotifyPropertyChanged("PowerDrawWorks");
            }
        }

        private PowerMeasure PowerDrawWorksField; 

        /// <summary>
        /// RatingDrawWorks property
        /// </summary>
		[Description("Weight rating of the drawworks.")]
        [ComponentElement]
		[XmlElement("RatingDrawWorks")]
        public ForceMeasure RatingDrawWorks {
            get {
                return RatingDrawWorksField;
            } 
            set {
                RatingDrawWorksField = value;
                NotifyPropertyChanged("RatingDrawWorks");
            }
        }

        private ForceMeasure RatingDrawWorksField; 

        /// <summary>
        /// MotorDrawWorks property
        /// </summary>
		[StringLength(64)]
        [Description("Description of the drawworks motor.")]
		[XmlElement("MotorDrawWorks")]
        public String MotorDrawWorks {
            get {
                return MotorDrawWorksField;
            } 
            set {
                MotorDrawWorksField = value;
                NotifyPropertyChanged("MotorDrawWorks");
            }
        }

        private String MotorDrawWorksField; 

        /// <summary>
        /// DescBrake property
        /// </summary>
		[StringLength(64)]
        [Description("Rig brake description.")]
		[XmlElement("DescBrake")]
        public String DescBrake {
            get {
                return DescBrakeField;
            } 
            set {
                DescBrakeField = value;
                NotifyPropertyChanged("DescBrake");
            }
        }

        private String DescBrakeField; 

        /// <summary>
        /// TypeSwivel property
        /// </summary>
		[StringLength(64)]
        [Description("Type of Swivel.")]
		[XmlElement("TypeSwivel")]
        public String TypeSwivel {
            get {
                return TypeSwivelField;
            } 
            set {
                TypeSwivelField = value;
                NotifyPropertyChanged("TypeSwivel");
            }
        }

        private String TypeSwivelField; 

        /// <summary>
        /// RatingSwivel property
        /// </summary>
		[Description("Maximum swivel rating.")]
        [ComponentElement]
		[XmlElement("RatingSwivel")]
        public ForceMeasure RatingSwivel {
            get {
                return RatingSwivelField;
            } 
            set {
                RatingSwivelField = value;
                NotifyPropertyChanged("RatingSwivel");
            }
        }

        private ForceMeasure RatingSwivelField; 

        /// <summary>
        /// RotSystem property
        /// </summary>
		[Description("Work string drive type.")]
		[XmlElement("RotSystem")]
        public DriveType? RotSystem {
            get {
                return RotSystemField;
            } 
            set {
                RotSystemField = value;
             if(value!=null) 
                 this.RotSystemSpecified = true;
                NotifyPropertyChanged("RotSystem");
            }
        }

        private DriveType? RotSystemField; 

        /// <summary>
        /// RotSystemSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RotSystemSpecified {
            get {
                return RotSystemSpecifiedField;
            } 
            set {
                RotSystemSpecifiedField = value;
                NotifyPropertyChanged("RotSystemSpecified");
            }
        }

        private Boolean RotSystemSpecifiedField; 

        /// <summary>
        /// DescRotSystem property
        /// </summary>
		[StringLength(64)]
        [Description("Description of rotating system.")]
		[XmlElement("DescRotSystem")]
        public String DescRotSystem {
            get {
                return DescRotSystemField;
            } 
            set {
                DescRotSystemField = value;
                NotifyPropertyChanged("DescRotSystem");
            }
        }

        private String DescRotSystemField; 

        /// <summary>
        /// RatingTqRotSys property
        /// </summary>
		[Description("Work string rotational torque rating.")]
        [ComponentElement]
		[XmlElement("RatingTqRotSys")]
        public MomentOfForceMeasure RatingTorqueRotSys {
            get {
                return RatingTqRotSysField;
            } 
            set {
                RatingTqRotSysField = value;
                NotifyPropertyChanged("RatingTorqueRotSys");
            }
        }

        private MomentOfForceMeasure RatingTqRotSysField; 

        /// <summary>
        /// RotSizeOpening property
        /// </summary>
		[Description("Rotary size opening.")]
        [ComponentElement]
		[XmlElement("RotSizeOpening")]
        public LengthMeasure RotSizeOpening {
            get {
                return RotSizeOpeningField;
            } 
            set {
                RotSizeOpeningField = value;
                NotifyPropertyChanged("RotSizeOpening");
            }
        }

        private LengthMeasure RotSizeOpeningField; 

        /// <summary>
        /// RatingRotSystem property
        /// </summary>
		[Description("Work string rotational torque rating.")]
        [ComponentElement]
		[XmlElement("RatingRotSystem")]
        public ForceMeasure RatingRotSystem {
            get {
                return RatingRotSystemField;
            } 
            set {
                RatingRotSystemField = value;
                NotifyPropertyChanged("RatingRotSystem");
            }
        }

        private ForceMeasure RatingRotSystemField; 

        /// <summary>
        /// ScrSystem property
        /// </summary>
		[StringLength(64)]
        [Description("Description of slow circulation rates system.")]
		[XmlElement("ScrSystem")]
        public String ScrSystem {
            get {
                return ScrSystemField;
            } 
            set {
                ScrSystemField = value;
                NotifyPropertyChanged("ScrSystem");
            }
        }

        private String ScrSystemField; 

        /// <summary>
        /// PipeHandlingSystem property
        /// </summary>
		[StringLength(64)]
        [Description("Name of pipe handling system.")]
		[XmlElement("PipeHandlingSystem")]
        public String PipeHandlingSystem {
            get {
                return PipeHandlingSystemField;
            } 
            set {
                PipeHandlingSystemField = value;
                NotifyPropertyChanged("PipeHandlingSystem");
            }
        }

        private String PipeHandlingSystemField; 

        /// <summary>
        /// CapBulkMud property
        /// </summary>
		[Description("Bulk/dry mud storage capacity.")]
        [ComponentElement]
		[XmlElement("CapBulkMud")]
        public VolumeMeasure CapBulkMud {
            get {
                return CapBulkMudField;
            } 
            set {
                CapBulkMudField = value;
                NotifyPropertyChanged("CapBulkMud");
            }
        }

        private VolumeMeasure CapBulkMudField; 

        /// <summary>
        /// CapLiquidMud property
        /// </summary>
		[Description("Liquid mud storage capacity.")]
        [ComponentElement]
		[XmlElement("CapLiquidMud")]
        public VolumeMeasure CapLiquidMud {
            get {
                return CapLiquidMudField;
            } 
            set {
                CapLiquidMudField = value;
                NotifyPropertyChanged("CapLiquidMud");
            }
        }

        private VolumeMeasure CapLiquidMudField; 

        /// <summary>
        /// CapDrillWater property
        /// </summary>
		[Description("Drill water capacity.")]
        [ComponentElement]
		[XmlElement("CapDrillWater")]
        public VolumeMeasure CapDrillWater {
            get {
                return CapDrillWaterField;
            } 
            set {
                CapDrillWaterField = value;
                NotifyPropertyChanged("CapDrillWater");
            }
        }

        private VolumeMeasure CapDrillWaterField; 

        /// <summary>
        /// CapPotableWater property
        /// </summary>
		[Description("Potable water capacity.")]
        [ComponentElement]
		[XmlElement("CapPotableWater")]
        public VolumeMeasure CapPotableWater {
            get {
                return CapPotableWaterField;
            } 
            set {
                CapPotableWaterField = value;
                NotifyPropertyChanged("CapPotableWater");
            }
        }

        private VolumeMeasure CapPotableWaterField; 

        /// <summary>
        /// CapFuel property
        /// </summary>
		[Description("Fuel capacity.")]
        [ComponentElement]
		[XmlElement("CapFuel")]
        public VolumeMeasure CapFuel {
            get {
                return CapFuelField;
            } 
            set {
                CapFuelField = value;
                NotifyPropertyChanged("CapFuel");
            }
        }

        private VolumeMeasure CapFuelField; 

        /// <summary>
        /// CapBulkCement property
        /// </summary>
		[Description("Capacity of builk cement.")]
        [ComponentElement]
		[XmlElement("CapBulkCement")]
        public VolumeMeasure CapBulkCement {
            get {
                return CapBulkCementField;
            } 
            set {
                CapBulkCementField = value;
                NotifyPropertyChanged("CapBulkCement");
            }
        }

        private VolumeMeasure CapBulkCementField; 

        /// <summary>
        /// MainEngine property
        /// </summary>
		[StringLength(64)]
        [Description("Power system.")]
		[XmlElement("MainEngine")]
        public String MainEngine {
            get {
                return MainEngineField;
            } 
            set {
                MainEngineField = value;
                NotifyPropertyChanged("MainEngine");
            }
        }

        private String MainEngineField; 

        /// <summary>
        /// Generator property
        /// </summary>
		[StringLength(64)]
        [Description("Description of the electrical power generating system.")]
		[XmlElement("Generator")]
        public String Generator {
            get {
                return GeneratorField;
            } 
            set {
                GeneratorField = value;
                NotifyPropertyChanged("Generator");
            }
        }

        private String GeneratorField; 

        /// <summary>
        /// CementUnit property
        /// </summary>
		[StringLength(64)]
        [Description("Name of cement unit on the rig.")]
		[XmlElement("CementUnit")]
        public String CementUnit {
            get {
                return CementUnitField;
            } 
            set {
                CementUnitField = value;
                NotifyPropertyChanged("CementUnit");
            }
        }

        private String CementUnitField; 

        /// <summary>
        /// NumBunks property
        /// </summary>
		[Description("Number of beds available on the rig.")]
		[XmlElement("NumBunks")]
        public Int32? NumBunks {
            get {
                return NumBunksField;
            } 
            set {
                NumBunksField = value;
             if(value!=null) 
                 this.NumBunksSpecified = true;
                NotifyPropertyChanged("NumBunks");
            }
        }

        private Int32? NumBunksField; 

        /// <summary>
        /// NumBunksSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumBunksSpecified {
            get {
                return NumBunksSpecifiedField;
            } 
            set {
                NumBunksSpecifiedField = value;
                NotifyPropertyChanged("NumBunksSpecified");
            }
        }

        private Boolean NumBunksSpecifiedField; 

        /// <summary>
        /// BunksPerRoom property
        /// </summary>
		[Description("Number of bunks per room.")]
		[XmlElement("BunksPerRoom")]
        public Int32? BunksPerRoom {
            get {
                return BunksPerRoomField;
            } 
            set {
                BunksPerRoomField = value;
             if(value!=null) 
                 this.BunksPerRoomSpecified = true;
                NotifyPropertyChanged("BunksPerRoom");
            }
        }

        private Int32? BunksPerRoomField; 

        /// <summary>
        /// BunksPerRoomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean BunksPerRoomSpecified {
            get {
                return BunksPerRoomSpecifiedField;
            } 
            set {
                BunksPerRoomSpecifiedField = value;
                NotifyPropertyChanged("BunksPerRoomSpecified");
            }
        }

        private Boolean BunksPerRoomSpecifiedField; 

        /// <summary>
        /// NumCranes property
        /// </summary>
		[Description("Number of cranes on the rig.")]
		[XmlElement("NumCranes")]
        public Int32? NumCranes {
            get {
                return NumCranesField;
            } 
            set {
                NumCranesField = value;
             if(value!=null) 
                 this.NumCranesSpecified = true;
                NotifyPropertyChanged("NumCranes");
            }
        }

        private Int32? NumCranesField; 

        /// <summary>
        /// NumCranesSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumCranesSpecified {
            get {
                return NumCranesSpecifiedField;
            } 
            set {
                NumCranesSpecifiedField = value;
                NotifyPropertyChanged("NumCranesSpecified");
            }
        }

        private Boolean NumCranesSpecifiedField; 

        /// <summary>
        /// NumAnch property
        /// </summary>
		[Description("Number of anchors.")]
		[XmlElement("NumAnch")]
        public Int32? NumAnch {
            get {
                return NumAnchField;
            } 
            set {
                NumAnchField = value;
             if(value!=null) 
                 this.NumAnchSpecified = true;
                NotifyPropertyChanged("NumAnch");
            }
        }

        private Int32? NumAnchField; 

        /// <summary>
        /// NumAnchSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumAnchSpecified {
            get {
                return NumAnchSpecifiedField;
            } 
            set {
                NumAnchSpecifiedField = value;
                NotifyPropertyChanged("NumAnchSpecified");
            }
        }

        private Boolean NumAnchSpecifiedField; 

        /// <summary>
        /// MoorType property
        /// </summary>
		[StringLength(64)]
        [Description("Mooring type.")]
		[XmlElement("MoorType")]
        public String MoorType {
            get {
                return MoorTypeField;
            } 
            set {
                MoorTypeField = value;
                NotifyPropertyChanged("MoorType");
            }
        }

        private String MoorTypeField; 

        /// <summary>
        /// NumGuideTens property
        /// </summary>
		[Description("Number of guideline tensioners.")]
		[XmlElement("NumGuideTens")]
        public Int32? NumGuideTens {
            get {
                return NumGuideTensField;
            } 
            set {
                NumGuideTensField = value;
             if(value!=null) 
                 this.NumGuideTensSpecified = true;
                NotifyPropertyChanged("NumGuideTens");
            }
        }

        private Int32? NumGuideTensField; 

        /// <summary>
        /// NumGuideTensSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumGuideTensSpecified {
            get {
                return NumGuideTensSpecifiedField;
            } 
            set {
                NumGuideTensSpecifiedField = value;
                NotifyPropertyChanged("NumGuideTensSpecified");
            }
        }

        private Boolean NumGuideTensSpecifiedField; 

        /// <summary>
        /// NumRiserTens property
        /// </summary>
		[Description("Number of riser tensioners.")]
		[XmlElement("NumRiserTens")]
        public Int32? NumRiserTens {
            get {
                return NumRiserTensField;
            } 
            set {
                NumRiserTensField = value;
             if(value!=null) 
                 this.NumRiserTensSpecified = true;
                NotifyPropertyChanged("NumRiserTens");
            }
        }

        private Int32? NumRiserTensField; 

        /// <summary>
        /// NumRiserTensSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumRiserTensSpecified {
            get {
                return NumRiserTensSpecifiedField;
            } 
            set {
                NumRiserTensSpecifiedField = value;
                NotifyPropertyChanged("NumRiserTensSpecified");
            }
        }

        private Boolean NumRiserTensSpecifiedField; 

        /// <summary>
        /// VarDeckLdMx property
        /// </summary>
		[Description("Variable deck load maximum (offshore rigs only).")]
        [ComponentElement]
		[XmlElement("VarDeckLdMx")]
        public ForceMeasure VarDeckLoadMax {
            get {
                return VarDeckLdMxField;
            } 
            set {
                VarDeckLdMxField = value;
                NotifyPropertyChanged("VarDeckLoadMax");
            }
        }

        private ForceMeasure VarDeckLdMxField; 

        /// <summary>
        /// VdlStorm property
        /// </summary>
		[Description("Variable deck load storm rating (offshore rigs only).")]
        [ComponentElement]
		[XmlElement("VdlStorm")]
        public ForceMeasure VdlStorm {
            get {
                return VdlStormField;
            } 
            set {
                VdlStormField = value;
                NotifyPropertyChanged("VdlStorm");
            }
        }

        private ForceMeasure VdlStormField; 

        /// <summary>
        /// NumThrusters property
        /// </summary>
		[Description("Number of thrusters.")]
		[XmlElement("NumThrusters")]
        public Int32? NumThrusters {
            get {
                return NumThrustersField;
            } 
            set {
                NumThrustersField = value;
             if(value!=null) 
                 this.NumThrustersSpecified = true;
                NotifyPropertyChanged("NumThrusters");
            }
        }

        private Int32? NumThrustersField; 

        /// <summary>
        /// NumThrustersSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumThrustersSpecified {
            get {
                return NumThrustersSpecifiedField;
            } 
            set {
                NumThrustersSpecifiedField = value;
                NotifyPropertyChanged("NumThrustersSpecified");
            }
        }

        private Boolean NumThrustersSpecifiedField; 

        /// <summary>
        /// Azimuthing property
        /// </summary>
		[Description("Are the thrusters azimuth.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("Azimuthing")]
        public Boolean? Azimuthing {
            get {
                return AzimuthingField;
            } 
            set {
                AzimuthingField = value;
             if(value!=null) 
                 this.AzimuthingSpecified = true;
                NotifyPropertyChanged("Azimuthing");
            }
        }

        private Boolean? AzimuthingField; 

        /// <summary>
        /// AzimuthingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AzimuthingSpecified {
            get {
                return AzimuthingSpecifiedField;
            } 
            set {
                AzimuthingSpecifiedField = value;
                NotifyPropertyChanged("AzimuthingSpecified");
            }
        }

        private Boolean AzimuthingSpecifiedField; 

        /// <summary>
        /// MotionCompensationMn property
        /// </summary>
		[Description("Minimum motion compensation.")]
        [ComponentElement]
		[XmlElement("MotionCompensationMn")]
        public ForceMeasure MotionCompensationMin {
            get {
                return MotionCompensationMnField;
            } 
            set {
                MotionCompensationMnField = value;
                NotifyPropertyChanged("MotionCompensationMin");
            }
        }

        private ForceMeasure MotionCompensationMnField; 

        /// <summary>
        /// MotionCompensationMx property
        /// </summary>
		[Description("Maximum motion compensation.")]
        [ComponentElement]
		[XmlElement("MotionCompensationMx")]
        public ForceMeasure MotionCompensationMax {
            get {
                return MotionCompensationMxField;
            } 
            set {
                MotionCompensationMxField = value;
                NotifyPropertyChanged("MotionCompensationMax");
            }
        }

        private ForceMeasure MotionCompensationMxField; 

        /// <summary>
        /// StrokeMotionCompensation property
        /// </summary>
		[Description("Length of motion compensation provided by equipment.")]
        [ComponentElement]
		[XmlElement("StrokeMotionCompensation")]
        public LengthMeasure StrokeMotionCompensation {
            get {
                return StrokeMotionCompensationField;
            } 
            set {
                StrokeMotionCompensationField = value;
                NotifyPropertyChanged("StrokeMotionCompensation");
            }
        }

        private LengthMeasure StrokeMotionCompensationField; 

        /// <summary>
        /// RiserAngleLimit property
        /// </summary>
		[Description("Riser angle limit.")]
        [ComponentElement]
		[XmlElement("RiserAngleLimit")]
        public PlaneAngleMeasure RiserAngleLimit {
            get {
                return RiserAngleLimitField;
            } 
            set {
                RiserAngleLimitField = value;
                NotifyPropertyChanged("RiserAngleLimit");
            }
        }

        private PlaneAngleMeasure RiserAngleLimitField; 

        /// <summary>
        /// HeaveMx property
        /// </summary>
		[Description("Maximum allowable heave.")]
        [ComponentElement]
		[XmlElement("HeaveMx")]
        public LengthMeasure HeaveMax {
            get {
                return HeaveMxField;
            } 
            set {
                HeaveMxField = value;
                NotifyPropertyChanged("HeaveMax");
            }
        }

        private LengthMeasure HeaveMxField; 

        /// <summary>
        /// Gantry property
        /// </summary>
		[StringLength(64)]
        [Description("Description of gantry.")]
		[XmlElement("Gantry")]
        public String Gantry {
            get {
                return GantryField;
            } 
            set {
                GantryField = value;
                NotifyPropertyChanged("Gantry");
            }
        }

        private String GantryField; 

        /// <summary>
        /// Flares property
        /// </summary>
		[StringLength(64)]
        [Description("Description of flare.")]
		[XmlElement("Flares")]
        public String Flares {
            get {
                return FlaresField;
            } 
            set {
                FlaresField = value;
                NotifyPropertyChanged("Flares");
            }
        }

        private String FlaresField; 

        /// <summary>
        /// Shaker property
        /// </summary>
		[RecurringElement]
		[XmlElement("Shaker")]
        public List<Shaker> Shaker {
            get {
                return ShakerField;
            } 
            set {
                ShakerField = value;
                NotifyPropertyChanged("Shaker");
            }
        }

         [XmlIgnore]
         public bool ShakerSpecified
         {
            get {
             if(ShakerField!=null)
                return ShakerField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Shaker> ShakerField; 

        /// <summary>
        /// Bop property
        /// </summary>
		[ComponentElement]
		[XmlElement("Bop")]
        public Bop Bop {
            get {
                return BopField;
            } 
            set {
                BopField = value;
                NotifyPropertyChanged("Bop");
            }
        }

        private Bop BopField; 

        /// <summary>
        /// Pit property
        /// </summary>
		[RecurringElement]
		[XmlElement("Pit")]
        public List<Pit> Pit {
            get {
                return PitField;
            } 
            set {
                PitField = value;
                NotifyPropertyChanged("Pit");
            }
        }

         [XmlIgnore]
         public bool PitSpecified
         {
            get {
             if(PitField!=null)
                return PitField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Pit> PitField; 

        /// <summary>
        /// Pump property
        /// </summary>
		[RecurringElement]
		[XmlElement("Pump")]
        public List<MudPump> Pump {
            get {
                return PumpField;
            } 
            set {
                PumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

         [XmlIgnore]
         public bool PumpSpecified
         {
            get {
             if(PumpField!=null)
                return PumpField.Count>0?true:false;
             else return false;
            } 
         }
        private List<MudPump> PumpField; 

        /// <summary>
        /// Centrifuge property
        /// </summary>
		[RecurringElement]
		[XmlElement("Centrifuge")]
        public List<Centrifuge> Centrifuge {
            get {
                return CentrifugeField;
            } 
            set {
                CentrifugeField = value;
                NotifyPropertyChanged("Centrifuge");
            }
        }

         [XmlIgnore]
         public bool CentrifugeSpecified
         {
            get {
             if(CentrifugeField!=null)
                return CentrifugeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Centrifuge> CentrifugeField; 

        /// <summary>
        /// Hydrocyclone property
        /// </summary>
		[RecurringElement]
		[XmlElement("Hydrocyclone")]
        public List<Hydrocyclone> Hydrocyclone {
            get {
                return HydrocycloneField;
            } 
            set {
                HydrocycloneField = value;
                NotifyPropertyChanged("Hydrocyclone");
            }
        }

         [XmlIgnore]
         public bool HydrocycloneSpecified
         {
            get {
             if(HydrocycloneField!=null)
                return HydrocycloneField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Hydrocyclone> HydrocycloneField; 

        /// <summary>
        /// Degasser property
        /// </summary>
		[RecurringElement]
		[XmlElement("Degasser")]
        public List<Degasser> Degasser {
            get {
                return DegasserField;
            } 
            set {
                DegasserField = value;
                NotifyPropertyChanged("Degasser");
            }
        }

         [XmlIgnore]
         public bool DegasserSpecified
         {
            get {
             if(DegasserField!=null)
                return DegasserField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Degasser> DegasserField; 

        /// <summary>
        /// SurfaceEquipment property
        /// </summary>
		[ComponentElement]
		[XmlElement("SurfaceEquipment")]
        public SurfaceEquipment SurfaceEquipment {
            get {
                return SurfaceEquipmentField;
            } 
            set {
                SurfaceEquipmentField = value;
                NotifyPropertyChanged("SurfaceEquipment");
            }
        }

        private SurfaceEquipment SurfaceEquipmentField; 


    } //here

    /// <summary>
    /// This class represents the MudLogReport xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the MudLogReport xsd type.")]
    public partial class MudLogReport : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MudLogCompany property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the company recording the information")]
		[XmlElement("MudLogCompany")]
        public String MudLogCompany {
            get {
                return MudLogCompanyField;
            } 
            set {
                MudLogCompanyField = value;
                NotifyPropertyChanged("MudLogCompany");
            }
        }

        private String MudLogCompanyField; 

        /// <summary>
        /// MudLogEngineers property
        /// </summary>
		[StringLength(2000)]
        [Description("Concatenated names of mudloggers constructing the log")]
		[XmlElement("MudLogEngineers")]
        public String MudLogEngineers {
            get {
                return MudLogEngineersField;
            } 
            set {
                MudLogEngineersField = value;
                NotifyPropertyChanged("MudLogEngineers");
            }
        }

        private String MudLogEngineersField; 

        /// <summary>
        /// MudLogGeologists property
        /// </summary>
		[StringLength(2000)]
        [Description("Concatenated names of geologists constructing the log")]
		[XmlElement("MudLogGeologists")]
        public String MudLogGeologists {
            get {
                return MudLogGeologistsField;
            } 
            set {
                MudLogGeologistsField = value;
                NotifyPropertyChanged("MudLogGeologists");
            }
        }

        private String MudLogGeologistsField; 

        /// <summary>
        /// ReportMdInterval property
        /// </summary>
		[Description("[maintained by the server] The interval between the minimum and maximum measured depths contained in this MudLog report.")]
        [ComponentElement]
		[XmlElement("ReportMdInterval")]
        public MdInterval ReportMDInterval {
            get {
                return ReportMdIntervalField;
            } 
            set {
                ReportMdIntervalField = value;
                NotifyPropertyChanged("ReportMDInterval");
            }
        }

        private MdInterval ReportMdIntervalField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("The growing state of the mudlog, whether active, inactive or closed")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// WellboreGeology property
        /// </summary>
		[ComponentElement]
		[XmlElement("WellboreGeology")]
        public DataObjectReference WellboreGeology {
            get {
                return WellboreGeologyField;
            } 
            set {
                WellboreGeologyField = value;
                NotifyPropertyChanged("WellboreGeology");
            }
        }

        private DataObjectReference WellboreGeologyField; 

        /// <summary>
        /// MudlogIntervals property
        /// </summary>
		[RecurringElement]
		[XmlElement("MudlogIntervals")]
        public List<MudlogReportInterval> MudlogIntervals {
            get {
                return MudlogIntervalsField;
            } 
            set {
                MudlogIntervalsField = value;
                NotifyPropertyChanged("MudlogIntervals");
            }
        }

         [XmlIgnore]
         public bool MudlogIntervalsSpecified
         {
            get {
             if(MudlogIntervalsField!=null)
                return MudlogIntervalsField.Count>0?true:false;
             else return false;
            } 
         }
        private List<MudlogReportInterval> MudlogIntervalsField; 

        /// <summary>
        /// RelatedLogs property
        /// </summary>
		[RecurringElement]
		[XmlElement("RelatedLogs")]
        public List<DataObjectReference> RelatedLogs {
            get {
                return RelatedLogsField;
            } 
            set {
                RelatedLogsField = value;
                NotifyPropertyChanged("RelatedLogs");
            }
        }

         [XmlIgnore]
         public bool RelatedLogsSpecified
         {
            get {
             if(RelatedLogsField!=null)
                return RelatedLogsField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DataObjectReference> RelatedLogsField; 

        /// <summary>
        /// Parameter property
        /// </summary>
		[RecurringElement]
		[XmlElement("Parameter")]
        public List<MudlogParameter> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         [XmlIgnore]
         public bool ParameterSpecified
         {
            get {
             if(ParameterField!=null)
                return ParameterField.Count>0?true:false;
             else return false;
            } 
         }
        private List<MudlogParameter> ParameterField; 


    } //here

    /// <summary>
    /// This class represents the CuttingsGeology xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the CuttingsGeology xsd type.")]
    public partial class CuttingsGeology : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("[maintained by the server] The interval which contains the minimum and maximum measured depths for all cuttings intervals in this cuttings geology.")]
        [ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("Describes the growing status of the cuttings, whether active, inactive or closed")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// CuttingsInterval property
        /// </summary>
		[RecurringElement]
		[XmlElement("CuttingsInterval")]
        public List<CuttingsGeologyInterval> CuttingsInterval {
            get {
                return CuttingsIntervalField;
            } 
            set {
                CuttingsIntervalField = value;
                NotifyPropertyChanged("CuttingsInterval");
            }
        }

         [XmlIgnore]
         public bool CuttingsIntervalSpecified
         {
            get {
             if(CuttingsIntervalField!=null)
                return CuttingsIntervalField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CuttingsGeologyInterval> CuttingsIntervalField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the InterpretedGeology xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the InterpretedGeology xsd type.")]
    public partial class InterpretedGeology : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("[maintained by the server] The interval which contains the minimum and maximum measured depths for all interpreted intervals in this interpreted geology.")]
        [ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("Describes the growing status of the interpreted geology, whether active, inactive or closed")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// GeologicIntervalInterpreted property
        /// </summary>
		[RecurringElement]
		[XmlElement("GeologicIntervalInterpreted")]
        public List<InterpretedGeologyInterval> GeologicIntervalInterpreted {
            get {
                return GeologicIntervalInterpretedField;
            } 
            set {
                GeologicIntervalInterpretedField = value;
                NotifyPropertyChanged("GeologicIntervalInterpreted");
            }
        }

         [XmlIgnore]
         public bool GeologicIntervalInterpretedSpecified
         {
            get {
             if(GeologicIntervalInterpretedField!=null)
                return GeologicIntervalInterpretedField.Count>0?true:false;
             else return false;
            } 
         }
        private List<InterpretedGeologyInterval> GeologicIntervalInterpretedField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the ShowEvaluation xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the ShowEvaluation xsd type.")]
    public partial class ShowEvaluation : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("[maintained by the server] The interval which contains the minimum and maximum measured depths for all show intervals in this show evaluation.")]
        [ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("Describes the growing status of the show evaluation intervals, whether active, inactive or closed")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// EvaluatedIntervalShow property
        /// </summary>
		[RecurringElement]
		[XmlElement("EvaluatedIntervalShow")]
        public List<ShowEvaluationInterval> EvaluatedIntervalShow {
            get {
                return EvaluatedIntervalShowField;
            } 
            set {
                EvaluatedIntervalShowField = value;
                NotifyPropertyChanged("EvaluatedIntervalShow");
            }
        }

         [XmlIgnore]
         public bool EvaluatedIntervalShowSpecified
         {
            get {
             if(EvaluatedIntervalShowField!=null)
                return EvaluatedIntervalShowField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ShowEvaluationInterval> EvaluatedIntervalShowField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the WellboreGeology xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellboreGeology xsd type.")]
    public partial class WellboreGeology : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("[maintained by the server] The interval which contains the minimum and maximum measured depths for all wellbore geology types under this wellbore geology entry.")]
        [ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// ShowIntervalSet property
        /// </summary>
		[ComponentElement]
		[XmlElement("ShowIntervalSet")]
        public ShowEvaluation ShowIntervalSet {
            get {
                return ShowIntervalSetField;
            } 
            set {
                ShowIntervalSetField = value;
                NotifyPropertyChanged("ShowIntervalSet");
            }
        }

        private ShowEvaluation ShowIntervalSetField; 

        /// <summary>
        /// InterpretedGeologyIntervalSet property
        /// </summary>
		[ComponentElement]
		[XmlElement("InterpretedGeologyIntervalSet")]
        public InterpretedGeology InterpretedGeologyIntervalSet {
            get {
                return InterpretedGeologyIntervalSetField;
            } 
            set {
                InterpretedGeologyIntervalSetField = value;
                NotifyPropertyChanged("InterpretedGeologyIntervalSet");
            }
        }

        private InterpretedGeology InterpretedGeologyIntervalSetField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// CuttingsIntervalSet property
        /// </summary>
		[ComponentElement]
		[XmlElement("CuttingsIntervalSet")]
        public CuttingsGeology CuttingsIntervalSet {
            get {
                return CuttingsIntervalSetField;
            } 
            set {
                CuttingsIntervalSetField = value;
                NotifyPropertyChanged("CuttingsIntervalSet");
            }
        }

        private CuttingsGeology CuttingsIntervalSetField; 


    } //here

    /// <summary>
    /// This class represents the DepthRegImage xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the DepthRegImage xsd type.")]
    public partial class DepthRegImage : AbstractObject, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// FileNameType property
        /// </summary>
		[Description("Mimetype of image file content.")]
		[XmlElement("FileNameType")]
        public FileNameType? FileNameType {
            get {
                return FileNameTypeField;
            } 
            set {
                FileNameTypeField = value;
             if(value!=null) 
                 this.FileNameTypeSpecified = true;
                NotifyPropertyChanged("FileNameType");
            }
        }

        private FileNameType? FileNameTypeField; 

        /// <summary>
        /// FileNameTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean FileNameTypeSpecified {
            get {
                return FileNameTypeSpecifiedField;
            } 
            set {
                FileNameTypeSpecifiedField = value;
                NotifyPropertyChanged("FileNameTypeSpecified");
            }
        }

        private Boolean FileNameTypeSpecifiedField; 

        /// <summary>
        /// Mimetype property
        /// </summary>
		[Description("Mimetype of image file content.")]
		[XmlElement("Mimetype")]
        public MimeType? Mimetype {
            get {
                return MimetypeField;
            } 
            set {
                MimetypeField = value;
             if(value!=null) 
                 this.MimetypeSpecified = true;
                NotifyPropertyChanged("Mimetype");
            }
        }

        private MimeType? MimetypeField; 

        /// <summary>
        /// MimetypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MimetypeSpecified {
            get {
                return MimetypeSpecifiedField;
            } 
            set {
                MimetypeSpecifiedField = value;
                NotifyPropertyChanged("MimetypeSpecified");
            }
        }

        private Boolean MimetypeSpecifiedField; 

        /// <summary>
        /// FileName property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to file containing image content.")]
		[XmlElement("FileName")]
        public String FileName {
            get {
                return FileNameField;
            } 
            set {
                FileNameField = value;
                NotifyPropertyChanged("FileName");
            }
        }

        private String FileNameField; 

        /// <summary>
        /// FileSize property
        /// </summary>
		[Description("Size of image file, in bytes.")]
        [ComponentElement]
		[XmlElement("FileSize")]
        public DigitalStorageMeasure FileSize {
            get {
                return FileSizeField;
            } 
            set {
                FileSizeField = value;
                NotifyPropertyChanged("FileSize");
            }
        }

        private DigitalStorageMeasure FileSizeField; 

        /// <summary>
        /// Checksum property
        /// </summary>
		[Description("Image file checksum.")]
		[XmlElement("Checksum")]
        public MessageDigestType? Checksum {
            get {
                return ChecksumField;
            } 
            set {
                ChecksumField = value;
             if(value!=null) 
                 this.ChecksumSpecified = true;
                NotifyPropertyChanged("Checksum");
            }
        }

        private MessageDigestType? ChecksumField; 

        /// <summary>
        /// ChecksumSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ChecksumSpecified {
            get {
                return ChecksumSpecifiedField;
            } 
            set {
                ChecksumSpecifiedField = value;
                NotifyPropertyChanged("ChecksumSpecified");
            }
        }

        private Boolean ChecksumSpecifiedField; 

        /// <summary>
        /// ImagePixelWidth property
        /// </summary>
		[Description("Image file width, in pixels.")]
		[XmlElement("ImagePixelWidth")]
        public Int64? ImagePixelWidth {
            get {
                return ImagePixelWidthField;
            } 
            set {
                ImagePixelWidthField = value;
             if(value!=null) 
                 this.ImagePixelWidthSpecified = true;
                NotifyPropertyChanged("ImagePixelWidth");
            }
        }

        private Int64? ImagePixelWidthField; 

        /// <summary>
        /// ImagePixelWidthSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ImagePixelWidthSpecified {
            get {
                return ImagePixelWidthSpecifiedField;
            } 
            set {
                ImagePixelWidthSpecifiedField = value;
                NotifyPropertyChanged("ImagePixelWidthSpecified");
            }
        }

        private Boolean ImagePixelWidthSpecifiedField; 

        /// <summary>
        /// ImagePixelHeight property
        /// </summary>
		[Description("Image file height, in pixels.")]
		[XmlElement("ImagePixelHeight")]
        public Int64? ImagePixelHeight {
            get {
                return ImagePixelHeightField;
            } 
            set {
                ImagePixelHeightField = value;
             if(value!=null) 
                 this.ImagePixelHeightSpecified = true;
                NotifyPropertyChanged("ImagePixelHeight");
            }
        }

        private Int64? ImagePixelHeightField; 

        /// <summary>
        /// ImagePixelHeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ImagePixelHeightSpecified {
            get {
                return ImagePixelHeightSpecifiedField;
            } 
            set {
                ImagePixelHeightSpecifiedField = value;
                NotifyPropertyChanged("ImagePixelHeightSpecified");
            }
        }

        private Boolean ImagePixelHeightSpecifiedField; 

        /// <summary>
        /// Version property
        /// </summary>
		[StringLength(64)]
        [Description("File version.")]
		[XmlElement("Version")]
        public String Version {
            get {
                return VersionField;
            } 
            set {
                VersionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private String VersionField; 

        /// <summary>
        /// ImageBoundary property
        /// </summary>
		[Required]
        [Description("The bounding rectangle of the image")]
        [ComponentElement]
		[XmlElement("ImageBoundary")]
        public DepthRegRectangle ImageBoundary {
            get {
                return ImageBoundaryField;
            } 
            set {
                ImageBoundaryField = value;
                NotifyPropertyChanged("ImageBoundary");
            }
        }

        private DepthRegRectangle ImageBoundaryField; 

        /// <summary>
        /// HeaderSection property
        /// </summary>
		[Description("Log header information gleaned from the well log image header section. Also contains X, Y coordinates and positional data with respect to the header section location within the log image file.")]
        [ComponentElement]
		[XmlElement("HeaderSection")]
        public DepthRegLogRect HeaderSection {
            get {
                return HeaderSectionField;
            } 
            set {
                HeaderSectionField = value;
                NotifyPropertyChanged("HeaderSection");
            }
        }

        private DepthRegLogRect HeaderSectionField; 

        /// <summary>
        /// LogSection property
        /// </summary>
		[Description("Provides log name, log type, curve scale and other information about each log section of the image file. Most importantly, this section contains the depth registration elements (CalibrationPoint) necessary for depth calibrating well log sections.")]
        [RecurringElement]
		[XmlElement("LogSection")]
        public List<DepthRegLogSection> LogSection {
            get {
                return LogSectionField;
            } 
            set {
                LogSectionField = value;
                NotifyPropertyChanged("LogSection");
            }
        }

         [XmlIgnore]
         public bool LogSectionSpecified
         {
            get {
             if(LogSectionField!=null)
                return LogSectionField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegLogSection> LogSectionField; 

        /// <summary>
        /// AlternateSection property
        /// </summary>
		[Description("AlternateSection provides a positional reference for sections of the image file not included in the aforementioned elements.")]
        [RecurringElement]
		[XmlElement("AlternateSection")]
        public List<DepthRegLogRect> AlternateSection {
            get {
                return AlternateSectionField;
            } 
            set {
                AlternateSectionField = value;
                NotifyPropertyChanged("AlternateSection");
            }
        }

         [XmlIgnore]
         public bool AlternateSectionSpecified
         {
            get {
             if(AlternateSectionField!=null)
                return AlternateSectionField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DepthRegLogRect> AlternateSectionField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for the registration image.")]
        [XmlAttribute("uid")]
		
        public String Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private String uidField; 


    } //here

    /// <summary>
    /// This class represents the WellCMLedger xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellCMLedger xsd type.")]
    public partial class WellCMLedger : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ParentEventID property
        /// </summary>
		[StringLength(64)]
        [Description("Parent event reference id.")]
		[XmlElement("ParentEventID")]
        public String ParentEventID {
            get {
                return ParentEventIDField;
            } 
            set {
                ParentEventIDField = value;
                NotifyPropertyChanged("ParentEventID");
            }
        }

        private String ParentEventIDField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that activities started.")]
		[XmlElement("DTimStart")]
        public String DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private String DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that activities were completed.")]
		[XmlElement("DTimEnd")]
        public String DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private String DTimEndField; 

        /// <summary>
        /// Duration property
        /// </summary>
		[Description("The activity duration (commonly in hours).")]
        [ComponentElement]
		[XmlElement("Duration")]
        public TimeMeasure Duration {
            get {
                return DurationField;
            } 
            set {
                DurationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure DurationField; 

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Description("Measured depth interval for this activity.")]
        [ComponentElement]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// EventOrder property
        /// </summary>
		[Description("Order number of event.")]
		[XmlElement("EventOrder")]
        public Int32? EventOrder {
            get {
                return EventOrderField;
            } 
            set {
                EventOrderField = value;
             if(value!=null) 
                 this.EventOrderSpecified = true;
                NotifyPropertyChanged("EventOrder");
            }
        }

        private Int32? EventOrderField; 

        /// <summary>
        /// EventOrderSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean EventOrderSpecified {
            get {
                return EventOrderSpecifiedField;
            } 
            set {
                EventOrderSpecifiedField = value;
                NotifyPropertyChanged("EventOrderSpecified");
            }
        }

        private Boolean EventOrderSpecifiedField; 

        /// <summary>
        /// RigID property
        /// </summary>
		[Description("Rig reference id.")]
        [RecurringElement]
		[XmlElement("RigID")]
        public List<String> RigID {
            get {
                return RigIDField;
            } 
            set {
                RigIDField = value;
                NotifyPropertyChanged("RigID");
            }
        }

         [XmlIgnore]
         public bool RigIDSpecified
         {
            get {
             if(RigIDField!=null)
                return RigIDField.Count>0?true:false;
             else return false;
            } 
         }
        private List<String> RigIDField; 

        /// <summary>
        /// ActivityCode property
        /// </summary>
		[StringLength(40)]
        [Description("Activity code")]
		[XmlElement("ActivityCode")]
        public String ActivityCode {
            get {
                return ActivityCodeField;
            } 
            set {
                ActivityCodeField = value;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private String ActivityCodeField; 

        /// <summary>
        /// Type property
        /// </summary>
		[Description("Comment on type of this event, either referring to a job type or an  activity type e.g. a safety meeting.")]
        [ComponentElement]
		[XmlElement("Type")]
        public EventType Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private EventType TypeField; 

        /// <summary>
        /// IsPlan property
        /// </summary>
		[Description("True if planned.")]
		[XmlElement("IsPlan")]
        public Boolean? IsPlan {
            get {
                return IsPlanField;
            } 
            set {
                IsPlanField = value;
             if(value!=null) 
                 this.IsPlanSpecified = true;
                NotifyPropertyChanged("IsPlan");
            }
        }

        private Boolean? IsPlanField; 

        /// <summary>
        /// IsPlanSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsPlanSpecified {
            get {
                return IsPlanSpecifiedField;
            } 
            set {
                IsPlanSpecifiedField = value;
                NotifyPropertyChanged("IsPlanSpecified");
            }
        }

        private Boolean IsPlanSpecifiedField; 

        /// <summary>
        /// WorkOrderID property
        /// </summary>
		[StringLength(64)]
        [Description("Extension event for work order id.")]
		[XmlElement("WorkOrderID")]
        public String WorkOrderID {
            get {
                return WorkOrderIDField;
            } 
            set {
                WorkOrderIDField = value;
                NotifyPropertyChanged("WorkOrderID");
            }
        }

        private String WorkOrderIDField; 

        /// <summary>
        /// BusinessAssociate property
        /// </summary>
		[StringLength(64)]
        [Description("Service company or business")]
		[XmlElement("BusinessAssociate")]
        public String BusinessAssociate {
            get {
                return BusinessAssociateField;
            } 
            set {
                BusinessAssociateField = value;
                NotifyPropertyChanged("BusinessAssociate");
            }
        }

        private String BusinessAssociateField; 

        /// <summary>
        /// ResponsiblePerson property
        /// </summary>
		[StringLength(64)]
        [Description("Name or information about person responsible who is implementing the service or job.")]
		[XmlElement("ResponsiblePerson")]
        public String ResponsiblePerson {
            get {
                return ResponsiblePersonField;
            } 
            set {
                ResponsiblePersonField = value;
                NotifyPropertyChanged("ResponsiblePerson");
            }
        }

        private String ResponsiblePersonField; 

        /// <summary>
        /// Contact property
        /// </summary>
		[StringLength(64)]
        [Description("Contact name or person to get in touch with. Might not necessarily be the person responsible.")]
		[XmlElement("Contact")]
        public String Contact {
            get {
                return ContactField;
            } 
            set {
                ContactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

        private String ContactField; 

        /// <summary>
        /// Nonproductive property
        /// </summary>
		[Description("True if event is not productive.")]
		[XmlElement("Nonproductive")]
        public Boolean? Nonproductive {
            get {
                return NonproductiveField;
            } 
            set {
                NonproductiveField = value;
             if(value!=null) 
                 this.NonproductiveSpecified = true;
                NotifyPropertyChanged("Nonproductive");
            }
        }

        private Boolean? NonproductiveField; 

        /// <summary>
        /// NonproductiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NonproductiveSpecified {
            get {
                return NonproductiveSpecifiedField;
            } 
            set {
                NonproductiveSpecifiedField = value;
                NotifyPropertyChanged("NonproductiveSpecified");
            }
        }

        private Boolean NonproductiveSpecifiedField; 

        /// <summary>
        /// Trouble property
        /// </summary>
		[Description("True if event implies is in-trouble")]
		[XmlElement("Trouble")]
        public Boolean? Trouble {
            get {
                return TroubleField;
            } 
            set {
                TroubleField = value;
             if(value!=null) 
                 this.TroubleSpecified = true;
                NotifyPropertyChanged("Trouble");
            }
        }

        private Boolean? TroubleField; 

        /// <summary>
        /// TroubleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TroubleSpecified {
            get {
                return TroubleSpecifiedField;
            } 
            set {
                TroubleSpecifiedField = value;
                NotifyPropertyChanged("TroubleSpecified");
            }
        }

        private Boolean TroubleSpecifiedField; 

        /// <summary>
        /// PreventiveMaintenance property
        /// </summary>
		[Description("True of event is for preventive maintenance")]
		[XmlElement("PreventiveMaintenance")]
        public Boolean? PreventiveMaintenance {
            get {
                return PreventiveMaintenanceField;
            } 
            set {
                PreventiveMaintenanceField = value;
             if(value!=null) 
                 this.PreventiveMaintenanceSpecified = true;
                NotifyPropertyChanged("PreventiveMaintenance");
            }
        }

        private Boolean? PreventiveMaintenanceField; 

        /// <summary>
        /// PreventiveMaintenanceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PreventiveMaintenanceSpecified {
            get {
                return PreventiveMaintenanceSpecifiedField;
            } 
            set {
                PreventiveMaintenanceSpecifiedField = value;
                NotifyPropertyChanged("PreventiveMaintenanceSpecified");
            }
        }

        private Boolean PreventiveMaintenanceSpecifiedField; 

        /// <summary>
        /// Unplanned property
        /// </summary>
		[Description("True if there is no planning infomation for this activity.")]
		[XmlElement("Unplanned")]
        public Boolean? Unplanned {
            get {
                return UnplannedField;
            } 
            set {
                UnplannedField = value;
             if(value!=null) 
                 this.UnplannedSpecified = true;
                NotifyPropertyChanged("Unplanned");
            }
        }

        private Boolean? UnplannedField; 

        /// <summary>
        /// UnplannedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean UnplannedSpecified {
            get {
                return UnplannedSpecifiedField;
            } 
            set {
                UnplannedSpecifiedField = value;
                NotifyPropertyChanged("UnplannedSpecified");
            }
        }

        private Boolean UnplannedSpecifiedField; 

        /// <summary>
        /// Phase property
        /// </summary>
		[StringLength(64)]
        [Description("Phase (large activity classification) e.g. Drill Surface Hole.")]
		[XmlElement("Phase")]
        public String Phase {
            get {
                return PhaseField;
            } 
            set {
                PhaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private String PhaseField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("Comment on this ledger")]
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("Description of this ledger")]
		[XmlElement("Description")]
        public String Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private String DescriptionField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// EventExtension property
        /// </summary>
		[RecurringElement]
		[XmlElement("EventExtension")]
        public List<AbstractEventExtension> EventExtension {
            get {
                return EventExtensionField;
            } 
            set {
                EventExtensionField = value;
                NotifyPropertyChanged("EventExtension");
            }
        }

         [XmlIgnore]
         public bool EventExtensionSpecified
         {
            get {
             if(EventExtensionField!=null)
                return EventExtensionField.Count>0?true:false;
             else return false;
            } 
         }
        private List<AbstractEventExtension> EventExtensionField; 

        /// <summary>
        /// Cost property
        /// </summary>
		[RecurringElement]
		[XmlElement("Cost")]
        public List<DayCost> Cost {
            get {
                return CostField;
            } 
            set {
                CostField = value;
                NotifyPropertyChanged("Cost");
            }
        }

         [XmlIgnore]
         public bool CostSpecified
         {
            get {
             if(CostField!=null)
                return CostField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DayCost> CostField; 

        /// <summary>
        /// EventType property
        /// </summary>
		[ComponentElement]
		[XmlElement("EventType")]
        public EventType EventType {
            get {
                return EventTypeField;
            } 
            set {
                EventTypeField = value;
                NotifyPropertyChanged("EventType");
            }
        }

        private EventType EventTypeField; 

        /// <summary>
        /// DownholeComponentReference property
        /// </summary>
		[ComponentElement]
		[XmlElement("DownholeComponentReference")]
        public DownholeComponentReference DownholeComponentReference {
            get {
                return DownholeComponentReferenceField;
            } 
            set {
                DownholeComponentReferenceField = value;
                NotifyPropertyChanged("DownholeComponentReference");
            }
        }

        private DownholeComponentReference DownholeComponentReferenceField; 

        /// <summary>
        /// Participant property
        /// </summary>
		[ComponentElement]
		[XmlElement("Participant")]
        public Participant Participants {
            get {
                return ParticipantField;
            } 
            set {
                ParticipantField = value;
                NotifyPropertyChanged("Participants");
            }
        }

        private Participant ParticipantField; 


    } //here

    /// <summary>
    /// This class represents the OpsReport xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the OpsReport xsd type.")]
    public partial class OpsReport : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ConditionHole property
        /// </summary>
		[StringLength(64)]
        [Description("Hole condition description.")]
		[XmlElement("ConditionHole")]
        public String ConditionHole {
            get {
                return ConditionHoleField;
            } 
            set {
                ConditionHoleField = value;
                NotifyPropertyChanged("ConditionHole");
            }
        }

        private String ConditionHoleField; 

        /// <summary>
        /// CostDay property
        /// </summary>
		[Description("Daily Cost.")]
        [ComponentElement]
		[XmlElement("CostDay")]
        public Cost CostDay {
            get {
                return CostDayField;
            } 
            set {
                CostDayField = value;
                NotifyPropertyChanged("CostDay");
            }
        }

        private Cost CostDayField; 

        /// <summary>
        /// CostDayMud property
        /// </summary>
		[Description("Daily Mud Cost.")]
        [ComponentElement]
		[XmlElement("CostDayMud")]
        public Cost CostDayMud {
            get {
                return CostDayMudField;
            } 
            set {
                CostDayMudField = value;
                NotifyPropertyChanged("CostDayMud");
            }
        }

        private Cost CostDayMudField; 

        /// <summary>
        /// DiaCsgLast property
        /// </summary>
		[Description("Diameter of last casing.")]
        [ComponentElement]
		[XmlElement("DiaCsgLast")]
        public LengthMeasure DiaCsgLast {
            get {
                return DiaCsgLastField;
            } 
            set {
                DiaCsgLastField = value;
                NotifyPropertyChanged("DiaCsgLast");
            }
        }

        private LengthMeasure DiaCsgLastField; 

        /// <summary>
        /// DiaHole property
        /// </summary>
		[Description("Hole diameter.")]
        [ComponentElement]
		[XmlElement("DiaHole")]
        public LengthMeasure DiaHole {
            get {
                return DiaHoleField;
            } 
            set {
                DiaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure DiaHoleField; 

        /// <summary>
        /// DistDrill property
        /// </summary>
		[Description("Distance drilled since last report.")]
        [ComponentElement]
		[XmlElement("DistDrill")]
        public LengthMeasure DistDrill {
            get {
                return DistDrillField;
            } 
            set {
                DistDrillField = value;
                NotifyPropertyChanged("DistDrill");
            }
        }

        private LengthMeasure DistDrillField; 

        /// <summary>
        /// DistDrillRot property
        /// </summary>
		[Description("Distance drilled - rotating.")]
        [ComponentElement]
		[XmlElement("DistDrillRot")]
        public LengthMeasure DistDrillRot {
            get {
                return DistDrillRotField;
            } 
            set {
                DistDrillRotField = value;
                NotifyPropertyChanged("DistDrillRot");
            }
        }

        private LengthMeasure DistDrillRotField; 

        /// <summary>
        /// DistDrillSlid property
        /// </summary>
		[Description("Distance drilled - sliding.")]
        [ComponentElement]
		[XmlElement("DistDrillSlid")]
        public LengthMeasure DistDrillSlid {
            get {
                return DistDrillSlidField;
            } 
            set {
                DistDrillSlidField = value;
                NotifyPropertyChanged("DistDrillSlid");
            }
        }

        private LengthMeasure DistDrillSlidField; 

        /// <summary>
        /// DistHold property
        /// </summary>
		[Description("Distance covered while holding angle with a steerable drilling assembly.")]
        [ComponentElement]
		[XmlElement("DistHold")]
        public LengthMeasure DistHold {
            get {
                return DistHoldField;
            } 
            set {
                DistHoldField = value;
                NotifyPropertyChanged("DistHold");
            }
        }

        private LengthMeasure DistHoldField; 

        /// <summary>
        /// DistReam property
        /// </summary>
		[Description("Distance reamed.")]
        [ComponentElement]
		[XmlElement("DistReam")]
        public LengthMeasure DistReam {
            get {
                return DistReamField;
            } 
            set {
                DistReamField = value;
                NotifyPropertyChanged("DistReam");
            }
        }

        private LengthMeasure DistReamField; 

        /// <summary>
        /// DistSteering property
        /// </summary>
		[Description("Distance covered while actively steering with a steerable drilling assembly.")]
        [ComponentElement]
		[XmlElement("DistSteering")]
        public LengthMeasure DistSteering {
            get {
                return DistSteeringField;
            } 
            set {
                DistSteeringField = value;
                NotifyPropertyChanged("DistSteering");
            }
        }

        private LengthMeasure DistSteeringField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[Required]
        [RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time the information is related to.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Engineer property
        /// </summary>
		[StringLength(64)]
        [Description("Nae of Engineer.")]
		[XmlElement("Engineer")]
        public String Engineer {
            get {
                return EngineerField;
            } 
            set {
                EngineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private String EngineerField; 

        /// <summary>
        /// ETimCirc property
        /// </summary>
		[Description("Time spent circulating from start of bit run.")]
        [ComponentElement]
		[XmlElement("ETimCirc")]
        public TimeMeasure ETimeCirc {
            get {
                return ETimCircField;
            } 
            set {
                ETimCircField = value;
                NotifyPropertyChanged("ETimeCirc");
            }
        }

        private TimeMeasure ETimCircField; 

        /// <summary>
        /// ETimDrill property
        /// </summary>
		[Description("Drilling time.")]
        [ComponentElement]
		[XmlElement("ETimDrill")]
        public TimeMeasure ETimeDrill {
            get {
                return ETimDrillField;
            } 
            set {
                ETimDrillField = value;
                NotifyPropertyChanged("ETimeDrill");
            }
        }

        private TimeMeasure ETimDrillField; 

        /// <summary>
        /// ETimDrillRot property
        /// </summary>
		[Description("Time spent rotary drilling for report interval.")]
        [ComponentElement]
		[XmlElement("ETimDrillRot")]
        public TimeMeasure ETimeDrillRot {
            get {
                return ETimDrillRotField;
            } 
            set {
                ETimDrillRotField = value;
                NotifyPropertyChanged("ETimeDrillRot");
            }
        }

        private TimeMeasure ETimDrillRotField; 

        /// <summary>
        /// ETimDrillSlid property
        /// </summary>
		[Description("Time spent slide drilling from start of bit run.")]
        [ComponentElement]
		[XmlElement("ETimDrillSlid")]
        public TimeMeasure ETimeDrillSlid {
            get {
                return ETimDrillSlidField;
            } 
            set {
                ETimDrillSlidField = value;
                NotifyPropertyChanged("ETimeDrillSlid");
            }
        }

        private TimeMeasure ETimDrillSlidField; 

        /// <summary>
        /// ETimHold property
        /// </summary>
		[Description("Time spent with no DD work (commonly in hours).")]
        [ComponentElement]
		[XmlElement("ETimHold")]
        public TimeMeasure ETimeHold {
            get {
                return ETimHoldField;
            } 
            set {
                ETimHoldField = value;
                NotifyPropertyChanged("ETimeHold");
            }
        }

        private TimeMeasure ETimHoldField; 

        /// <summary>
        /// ETimLoc property
        /// </summary>
		[Description("Time rig on location (commonly in days).")]
        [ComponentElement]
		[XmlElement("ETimLoc")]
        public TimeMeasure ETimeLoc {
            get {
                return ETimLocField;
            } 
            set {
                ETimLocField = value;
                NotifyPropertyChanged("ETimeLoc");
            }
        }

        private TimeMeasure ETimLocField; 

        /// <summary>
        /// ETimReam property
        /// </summary>
		[Description("Time spent reaming from start of bit run.")]
        [ComponentElement]
		[XmlElement("ETimReam")]
        public TimeMeasure ETimeReam {
            get {
                return ETimReamField;
            } 
            set {
                ETimReamField = value;
                NotifyPropertyChanged("ETimeReam");
            }
        }

        private TimeMeasure ETimReamField; 

        /// <summary>
        /// ETimSpud property
        /// </summary>
		[Description("Time since bit broke ground (commonly in days).")]
        [ComponentElement]
		[XmlElement("ETimSpud")]
        public TimeMeasure ETimeSpud {
            get {
                return ETimSpudField;
            } 
            set {
                ETimSpudField = value;
                NotifyPropertyChanged("ETimeSpud");
            }
        }

        private TimeMeasure ETimSpudField; 

        /// <summary>
        /// ETimStart property
        /// </summary>
		[Description("Time from start of Operations (commonly in days).")]
        [ComponentElement]
		[XmlElement("ETimStart")]
        public TimeMeasure ETimeStart {
            get {
                return ETimStartField;
            } 
            set {
                ETimStartField = value;
                NotifyPropertyChanged("ETimeStart");
            }
        }

        private TimeMeasure ETimStartField; 

        /// <summary>
        /// ETimSteering property
        /// </summary>
		[Description("Time spent steering bottom hole assembly (commonly in hours).")]
        [ComponentElement]
		[XmlElement("ETimSteering")]
        public TimeMeasure ETimeSteering {
            get {
                return ETimSteeringField;
            } 
            set {
                ETimSteeringField = value;
                NotifyPropertyChanged("ETimeSteering");
            }
        }

        private TimeMeasure ETimSteeringField; 

        /// <summary>
        /// Forecast24Hr property
        /// </summary>
		[StringLength(2000)]
        [Description("Forecast for next 24 hrs.")]
		[XmlElement("Forecast24Hr")]
        public String Forecast24Hr {
            get {
                return Forecast24HrField;
            } 
            set {
                Forecast24HrField = value;
                NotifyPropertyChanged("Forecast24Hr");
            }
        }

        private String Forecast24HrField; 

        /// <summary>
        /// Geologist property
        /// </summary>
		[StringLength(64)]
        [Description("Name of operator wellsite geologist.")]
		[XmlElement("Geologist")]
        public String Geologist {
            get {
                return GeologistField;
            } 
            set {
                GeologistField = value;
                NotifyPropertyChanged("Geologist");
            }
        }

        private String GeologistField; 

        /// <summary>
        /// Lithology property
        /// </summary>
		[StringLength(64)]
        [Description("Lithology for the Interval.")]
		[XmlElement("Lithology")]
        public String Lithology {
            get {
                return LithologyField;
            } 
            set {
                LithologyField = value;
                NotifyPropertyChanged("Lithology");
            }
        }

        private String LithologyField; 

        /// <summary>
        /// Maasp property
        /// </summary>
		[Description("Maximum allowable shut-in casing pressure.")]
        [ComponentElement]
		[XmlElement("Maasp")]
        public PressureMeasure Maasp {
            get {
                return MaaspField;
            } 
            set {
                MaaspField = value;
                NotifyPropertyChanged("Maasp");
            }
        }

        private PressureMeasure MaaspField; 

        /// <summary>
        /// MdCsgLast property
        /// </summary>
		[Description("Measured depth of last casing.")]
        [ComponentElement]
		[XmlElement("MdCsgLast")]
        public MeasuredDepthCoord MDCsgLast {
            get {
                return MdCsgLastField;
            } 
            set {
                MdCsgLastField = value;
                NotifyPropertyChanged("MDCsgLast");
            }
        }

        private MeasuredDepthCoord MdCsgLastField; 

        /// <summary>
        /// MdPlanned property
        /// </summary>
		[Description("Measured depth of plan for this day number.")]
        [ComponentElement]
		[XmlElement("MdPlanned")]
        public MeasuredDepthCoord MDPlanned {
            get {
                return MdPlannedField;
            } 
            set {
                MdPlannedField = value;
                NotifyPropertyChanged("MDPlanned");
            }
        }

        private MeasuredDepthCoord MdPlannedField; 

        /// <summary>
        /// MdReport property
        /// </summary>
		[Description("Wellbore Measured Depth.")]
        [ComponentElement]
		[XmlElement("MdReport")]
        public MeasuredDepthCoord MDReport {
            get {
                return MdReportField;
            } 
            set {
                MdReportField = value;
                NotifyPropertyChanged("MDReport");
            }
        }

        private MeasuredDepthCoord MdReportField; 

        /// <summary>
        /// NameFormation property
        /// </summary>
		[StringLength(64)]
        [Description("Name of formation.")]
		[XmlElement("NameFormation")]
        public String NameFormation {
            get {
                return NameFormationField;
            } 
            set {
                NameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private String NameFormationField; 

        /// <summary>
        /// NumAFE property
        /// </summary>
		[StringLength(64)]
        [Description("AFE (authorization for expenditure) number that this cost item applies to.")]
		[XmlElement("NumAFE")]
        public String NumAFE {
            get {
                return NumAFEField;
            } 
            set {
                NumAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private String NumAFEField; 

        /// <summary>
        /// NumContract property
        /// </summary>
		[Description("Number of contractor personnel on board.")]
		[XmlElement("NumContract")]
        public Int32? NumContract {
            get {
                return NumContractField;
            } 
            set {
                NumContractField = value;
             if(value!=null) 
                 this.NumContractSpecified = true;
                NotifyPropertyChanged("NumContract");
            }
        }

        private Int32? NumContractField; 

        /// <summary>
        /// NumContractSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumContractSpecified {
            get {
                return NumContractSpecifiedField;
            } 
            set {
                NumContractSpecifiedField = value;
                NotifyPropertyChanged("NumContractSpecified");
            }
        }

        private Boolean NumContractSpecifiedField; 

        /// <summary>
        /// NumOperator property
        /// </summary>
		[Description("Number of Operator personnel on board.")]
		[XmlElement("NumOperator")]
        public Int32? NumOperator {
            get {
                return NumOperatorField;
            } 
            set {
                NumOperatorField = value;
             if(value!=null) 
                 this.NumOperatorSpecified = true;
                NotifyPropertyChanged("NumOperator");
            }
        }

        private Int32? NumOperatorField; 

        /// <summary>
        /// NumOperatorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumOperatorSpecified {
            get {
                return NumOperatorSpecifiedField;
            } 
            set {
                NumOperatorSpecifiedField = value;
                NotifyPropertyChanged("NumOperatorSpecified");
            }
        }

        private Boolean NumOperatorSpecifiedField; 

        /// <summary>
        /// NumPob property
        /// </summary>
		[Description("Total number of personnel on board.")]
		[XmlElement("NumPob")]
        public Int32? NumPob {
            get {
                return NumPobField;
            } 
            set {
                NumPobField = value;
             if(value!=null) 
                 this.NumPobSpecified = true;
                NotifyPropertyChanged("NumPob");
            }
        }

        private Int32? NumPobField; 

        /// <summary>
        /// NumPobSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumPobSpecified {
            get {
                return NumPobSpecifiedField;
            } 
            set {
                NumPobSpecifiedField = value;
                NotifyPropertyChanged("NumPobSpecified");
            }
        }

        private Boolean NumPobSpecifiedField; 

        /// <summary>
        /// NumService property
        /// </summary>
		[Description("Number of service company personnel on board.")]
		[XmlElement("NumService")]
        public Int32? NumService {
            get {
                return NumServiceField;
            } 
            set {
                NumServiceField = value;
             if(value!=null) 
                 this.NumServiceSpecified = true;
                NotifyPropertyChanged("NumService");
            }
        }

        private Int32? NumServiceField; 

        /// <summary>
        /// NumServiceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumServiceSpecified {
            get {
                return NumServiceSpecifiedField;
            } 
            set {
                NumServiceSpecifiedField = value;
                NotifyPropertyChanged("NumServiceSpecified");
            }
        }

        private Boolean NumServiceSpecifiedField; 

        /// <summary>
        /// PresKickTol property
        /// </summary>
		[Description("Kick tolerance pressure.")]
        [ComponentElement]
		[XmlElement("PresKickTol")]
        public PressureMeasure PresKickTol {
            get {
                return PresKickTolField;
            } 
            set {
                PresKickTolField = value;
                NotifyPropertyChanged("PresKickTol");
            }
        }

        private PressureMeasure PresKickTolField; 

        /// <summary>
        /// PresLotEmw property
        /// </summary>
		[Description("Leak off test equivalent mud weight.")]
        [ComponentElement]
		[XmlElement("PresLotEmw")]
        public MassPerVolumeMeasure PresLotEmw {
            get {
                return PresLotEmwField;
            } 
            set {
                PresLotEmwField = value;
                NotifyPropertyChanged("PresLotEmw");
            }
        }

        private MassPerVolumeMeasure PresLotEmwField; 

        /// <summary>
        /// Rig property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the rig utilized in this reporting period.")]
		[XmlElement("Rig")]
        public String Rig {
            get {
                return RigField;
            } 
            set {
                RigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private String RigField; 

        /// <summary>
        /// RopAv property
        /// </summary>
		[Description("Average Rate of Penetration through Interval.")]
        [ComponentElement]
		[XmlElement("RopAv")]
        public LengthPerTimeMeasure RopAverage {
            get {
                return RopAvField;
            } 
            set {
                RopAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private LengthPerTimeMeasure RopAvField; 

        /// <summary>
        /// RopCurrent property
        /// </summary>
		[Description("Rate of penetration at report time.")]
        [ComponentElement]
		[XmlElement("RopCurrent")]
        public LengthPerTimeMeasure RopCurrent {
            get {
                return RopCurrentField;
            } 
            set {
                RopCurrentField = value;
                NotifyPropertyChanged("RopCurrent");
            }
        }

        private LengthPerTimeMeasure RopCurrentField; 

        /// <summary>
        /// StatusCurrent property
        /// </summary>
		[StringLength(2000)]
        [Description("Current status description.")]
		[XmlElement("StatusCurrent")]
        public String StatusCurrent {
            get {
                return StatusCurrentField;
            } 
            set {
                StatusCurrentField = value;
                NotifyPropertyChanged("StatusCurrent");
            }
        }

        private String StatusCurrentField; 

        /// <summary>
        /// Sum24Hr property
        /// </summary>
		[StringLength(2000)]
        [Description("24 hour summary description.")]
		[XmlElement("Sum24Hr")]
        public String Sum24Hr {
            get {
                return Sum24HrField;
            } 
            set {
                Sum24HrField = value;
                NotifyPropertyChanged("Sum24Hr");
            }
        }

        private String Sum24HrField; 

        /// <summary>
        /// Supervisor property
        /// </summary>
		[StringLength(64)]
        [Description("Name of operator rig supervisor.")]
		[XmlElement("Supervisor")]
        public String Supervisor {
            get {
                return SupervisorField;
            } 
            set {
                SupervisorField = value;
                NotifyPropertyChanged("Supervisor");
            }
        }

        private String SupervisorField; 

        /// <summary>
        /// Tubular property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the tubular (assembly) used in this report period. This represents a foreign key to tubular.")]
		[XmlElement("Tubular")]
        public String Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private String TubularField; 

        /// <summary>
        /// TvdCsgLast property
        /// </summary>
		[Description("True vertical depth of last casing.")]
        [ComponentElement]
		[XmlElement("TvdCsgLast")]
        public WellVerticalDepthCoord TvdCsgLast {
            get {
                return TvdCsgLastField;
            } 
            set {
                TvdCsgLastField = value;
                NotifyPropertyChanged("TvdCsgLast");
            }
        }

        private WellVerticalDepthCoord TvdCsgLastField; 

        /// <summary>
        /// TvdLot property
        /// </summary>
		[Description("True vertical depth of leak off test point.")]
        [ComponentElement]
		[XmlElement("TvdLot")]
        public WellVerticalDepthCoord TvdLot {
            get {
                return TvdLotField;
            } 
            set {
                TvdLotField = value;
                NotifyPropertyChanged("TvdLot");
            }
        }

        private WellVerticalDepthCoord TvdLotField; 

        /// <summary>
        /// TvdReport property
        /// </summary>
		[Description("Wellbore True Vertical Depth.")]
        [ComponentElement]
		[XmlElement("TvdReport")]
        public WellVerticalDepthCoord TvdReport {
            get {
                return TvdReportField;
            } 
            set {
                TvdReportField = value;
                NotifyPropertyChanged("TvdReport");
            }
        }

        private WellVerticalDepthCoord TvdReportField; 

        /// <summary>
        /// VolKickTol property
        /// </summary>
		[Description("Kick tolerance volume.")]
        [ComponentElement]
		[XmlElement("VolKickTol")]
        public VolumeMeasure VolKickTol {
            get {
                return VolKickTolField;
            } 
            set {
                VolKickTolField = value;
                NotifyPropertyChanged("VolKickTol");
            }
        }

        private VolumeMeasure VolKickTolField; 

        /// <summary>
        /// RigResponse property
        /// </summary>
		[ComponentElement]
		[XmlElement("RigResponse")]
        public RigResponse RigResponse {
            get {
                return RigResponseField;
            } 
            set {
                RigResponseField = value;
                NotifyPropertyChanged("RigResponse");
            }
        }

        private RigResponse RigResponseField; 

        /// <summary>
        /// ShakerOp property
        /// </summary>
		[RecurringElement]
		[XmlElement("ShakerOp")]
        public List<ShakerOp> ShakerOperating {
            get {
                return ShakerOpField;
            } 
            set {
                ShakerOpField = value;
                NotifyPropertyChanged("ShakerOperating");
            }
        }

         [XmlIgnore]
         public bool ShakerOperatingSpecified
         {
            get {
             if(ShakerOpField!=null)
                return ShakerOpField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ShakerOp> ShakerOpField; 

        /// <summary>
        /// Hse property
        /// </summary>
		[ComponentElement]
		[XmlElement("Hse")]
        public Hse Hse {
            get {
                return HseField;
            } 
            set {
                HseField = value;
                NotifyPropertyChanged("Hse");
            }
        }

        private Hse HseField; 

        /// <summary>
        /// SupportCraft property
        /// </summary>
		[RecurringElement]
		[XmlElement("SupportCraft")]
        public List<SupportCraft> SupportCraft {
            get {
                return SupportCraftField;
            } 
            set {
                SupportCraftField = value;
                NotifyPropertyChanged("SupportCraft");
            }
        }

         [XmlIgnore]
         public bool SupportCraftSpecified
         {
            get {
             if(SupportCraftField!=null)
                return SupportCraftField.Count>0?true:false;
             else return false;
            } 
         }
        private List<SupportCraft> SupportCraftField; 

        /// <summary>
        /// Weather property
        /// </summary>
		[RecurringElement]
		[XmlElement("Weather")]
        public List<Weather> Weather {
            get {
                return WeatherField;
            } 
            set {
                WeatherField = value;
                NotifyPropertyChanged("Weather");
            }
        }

         [XmlIgnore]
         public bool WeatherSpecified
         {
            get {
             if(WeatherField!=null)
                return WeatherField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Weather> WeatherField; 

        /// <summary>
        /// MudInventory property
        /// </summary>
		[RecurringElement]
		[XmlElement("MudInventory")]
        public List<Inventory> MudInventory {
            get {
                return MudInventoryField;
            } 
            set {
                MudInventoryField = value;
                NotifyPropertyChanged("MudInventory");
            }
        }

         [XmlIgnore]
         public bool MudInventorySpecified
         {
            get {
             if(MudInventoryField!=null)
                return MudInventoryField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Inventory> MudInventoryField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// MudVolume property
        /// </summary>
		
		[XmlElement("MudVolume")]
        public MudVolume MudVolume {
            get {
                return MudVolumeField;
            } 
            set {
                MudVolumeField = value;
                NotifyPropertyChanged("MudVolume");
            }
        }

        private MudVolume MudVolumeField; 

        /// <summary>
        /// Personnel property
        /// </summary>
		[RecurringElement]
		[XmlElement("Personnel")]
        public List<Personnel> Personnel {
            get {
                return PersonnelField;
            } 
            set {
                PersonnelField = value;
                NotifyPropertyChanged("Personnel");
            }
        }

         [XmlIgnore]
         public bool PersonnelSpecified
         {
            get {
             if(PersonnelField!=null)
                return PersonnelField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Personnel> PersonnelField; 

        /// <summary>
        /// Activity property
        /// </summary>
		[RecurringElement]
		[XmlElement("Activity")]
        public List<DrillActivity> Activity {
            get {
                return ActivityField;
            } 
            set {
                ActivityField = value;
                NotifyPropertyChanged("Activity");
            }
        }

         [XmlIgnore]
         public bool ActivitySpecified
         {
            get {
             if(ActivityField!=null)
                return ActivityField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillActivity> ActivityField; 

        /// <summary>
        /// DrillingParams property
        /// </summary>
		[RecurringElement]
		[XmlElement("DrillingParams")]
        public List<DrillingParams> DrillingParams {
            get {
                return DrillingParamsField;
            } 
            set {
                DrillingParamsField = value;
                NotifyPropertyChanged("DrillingParams");
            }
        }

         [XmlIgnore]
         public bool DrillingParamsSpecified
         {
            get {
             if(DrillingParamsField!=null)
                return DrillingParamsField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillingParams> DrillingParamsField; 

        /// <summary>
        /// WbGeometry property
        /// </summary>
		[ComponentElement]
		[XmlElement("WbGeometry")]
        public DataObjectReference WellboreGeometry {
            get {
                return WbGeometryField;
            } 
            set {
                WbGeometryField = value;
                NotifyPropertyChanged("WellboreGeometry");
            }
        }

        private DataObjectReference WbGeometryField; 

        /// <summary>
        /// DayCost property
        /// </summary>
		[RecurringElement]
		[XmlElement("DayCost")]
        public List<DayCost> DayCost {
            get {
                return DayCostField;
            } 
            set {
                DayCostField = value;
                NotifyPropertyChanged("DayCost");
            }
        }

         [XmlIgnore]
         public bool DayCostSpecified
         {
            get {
             if(DayCostField!=null)
                return DayCostField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DayCost> DayCostField; 

        /// <summary>
        /// TrajectoryStation property
        /// </summary>
		[RecurringElement]
		[XmlElement("TrajectoryStation")]
        public List<TrajectoryStation> TrajectoryStation {
            get {
                return TrajectoryStationField;
            } 
            set {
                TrajectoryStationField = value;
                NotifyPropertyChanged("TrajectoryStation");
            }
        }

         [XmlIgnore]
         public bool TrajectoryStationSpecified
         {
            get {
             if(TrajectoryStationField!=null)
                return TrajectoryStationField.Count>0?true:false;
             else return false;
            } 
         }
        private List<TrajectoryStation> TrajectoryStationField; 

        /// <summary>
        /// Fluid property
        /// </summary>
		[RecurringElement]
		[XmlElement("Fluid")]
        public List<Fluid> Fluid {
            get {
                return FluidField;
            } 
            set {
                FluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

         [XmlIgnore]
         public bool FluidSpecified
         {
            get {
             if(FluidField!=null)
                return FluidField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Fluid> FluidField; 

        /// <summary>
        /// Scr property
        /// </summary>
		[RecurringElement]
		[XmlElement("Scr")]
        public List<Scr> Scr {
            get {
                return ScrField;
            } 
            set {
                ScrField = value;
                NotifyPropertyChanged("Scr");
            }
        }

         [XmlIgnore]
         public bool ScrSpecified
         {
            get {
             if(ScrField!=null)
                return ScrField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Scr> ScrField; 

        /// <summary>
        /// BulkInventory property
        /// </summary>
		[RecurringElement]
		[XmlElement("BulkInventory")]
        public List<Inventory> BulkInventory {
            get {
                return BulkInventoryField;
            } 
            set {
                BulkInventoryField = value;
                NotifyPropertyChanged("BulkInventory");
            }
        }

         [XmlIgnore]
         public bool BulkInventorySpecified
         {
            get {
             if(BulkInventoryField!=null)
                return BulkInventoryField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Inventory> BulkInventoryField; 

        /// <summary>
        /// PitVolume property
        /// </summary>
		[RecurringElement]
		[XmlElement("PitVolume")]
        public List<PitVolume> PitVolume {
            get {
                return PitVolumeField;
            } 
            set {
                PitVolumeField = value;
                NotifyPropertyChanged("PitVolume");
            }
        }

         [XmlIgnore]
         public bool PitVolumeSpecified
         {
            get {
             if(PitVolumeField!=null)
                return PitVolumeField.Count>0?true:false;
             else return false;
            } 
         }
        private List<PitVolume> PitVolumeField; 

        /// <summary>
        /// PumpOp property
        /// </summary>
		[RecurringElement]
		[XmlElement("PumpOp")]
        public List<PumpOp> PumpOperating {
            get {
                return PumpOpField;
            } 
            set {
                PumpOpField = value;
                NotifyPropertyChanged("PumpOperating");
            }
        }

         [XmlIgnore]
         public bool PumpOperatingSpecified
         {
            get {
             if(PumpOpField!=null)
                return PumpOpField.Count>0?true:false;
             else return false;
            } 
         }
        private List<PumpOp> PumpOpField; 


    } //here

    /// <summary>
    /// This class represents the Trajectory xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Trajectory xsd type.")]
    public partial class Trajectory : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("Describes the growing status of the trajectory, whether active, inactive or closed")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// ObjectGrowing property
        /// </summary>
		[Description("The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the \"Special Handling of Change Information\" within a server.  See the relevant API specification for the  behavior related to this element.")]
		[XmlElement("ObjectGrowing")]
        public Boolean? ObjectGrowing {
            get {
                return ObjectGrowingField;
            } 
            set {
                ObjectGrowingField = value;
             if(value!=null) 
                 this.ObjectGrowingSpecified = true;
                NotifyPropertyChanged("ObjectGrowing");
            }
        }

        private Boolean? ObjectGrowingField; 

        /// <summary>
        /// ObjectGrowingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ObjectGrowingSpecified {
            get {
                return ObjectGrowingSpecifiedField;
            } 
            set {
                ObjectGrowingSpecifiedField = value;
                NotifyPropertyChanged("ObjectGrowingSpecified");
            }
        }

        private Boolean ObjectGrowingSpecifiedField; 

        /// <summary>
        /// DTimTrajStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Start date and time of trajectory station measurements. Note that this is NOT a server query parameter.")]
		[XmlElement("DTimTrajStart")]
        public String DateTimeTrajStart {
            get {
                return DTimTrajStartField;
            } 
            set {
                DTimTrajStartField = value;
                NotifyPropertyChanged("DateTimeTrajStart");
            }
        }

        private String DTimTrajStartField; 

        /// <summary>
        /// DTimTrajEnd property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("End date and time of trajectory station measurements. Note that this is NOT a server query parameter.")]
		[XmlElement("DTimTrajEnd")]
        public String DateTimeTrajEnd {
            get {
                return DTimTrajEndField;
            } 
            set {
                DTimTrajEndField = value;
                NotifyPropertyChanged("DateTimeTrajEnd");
            }
        }

        private String DTimTrajEndField; 

        /// <summary>
        /// MdMn property
        /// </summary>
		[Description("Minimum measured depth of this object. This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
		[XmlElement("MdMn")]
        public MeasuredDepthCoord MDMin {
            get {
                return MdMnField;
            } 
            set {
                MdMnField = value;
                NotifyPropertyChanged("MDMin");
            }
        }

        private MeasuredDepthCoord MdMnField; 

        /// <summary>
        /// MdMx property
        /// </summary>
		[Description("Maximum measured depth of this object. This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
		[XmlElement("MdMx")]
        public MeasuredDepthCoord MDMax {
            get {
                return MdMxField;
            } 
            set {
                MdMxField = value;
                NotifyPropertyChanged("MDMax");
            }
        }

        private MeasuredDepthCoord MdMxField; 

        /// <summary>
        /// ServiceCompany property
        /// </summary>
		[StringLength(64)]
        [Description("Name of contractor who provided the service.")]
		[XmlElement("ServiceCompany")]
        public String ServiceCompany {
            get {
                return ServiceCompanyField;
            } 
            set {
                ServiceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private String ServiceCompanyField; 

        /// <summary>
        /// MagDeclUsed property
        /// </summary>
		[Description("Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.  Starting value if stations have individual values.")]
        [ComponentElement]
		[XmlElement("MagDeclUsed")]
        public PlaneAngleMeasure MagDeclUsed {
            get {
                return MagDeclUsedField;
            } 
            set {
                MagDeclUsedField = value;
                NotifyPropertyChanged("MagDeclUsed");
            }
        }

        private PlaneAngleMeasure MagDeclUsedField; 

        /// <summary>
        /// GridConUsed property
        /// </summary>
		[Description("Magnetic declination (convergence) used to correct a Magnetic North referenced azimuth to a True North azimuth.  Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added. Starting value if stations have individual values.")]
        [ComponentElement]
		[XmlElement("GridConUsed")]
        public PlaneAngleMeasure GridConUsed {
            get {
                return GridConUsedField;
            } 
            set {
                GridConUsedField = value;
                NotifyPropertyChanged("GridConUsed");
            }
        }

        private PlaneAngleMeasure GridConUsedField; 

        /// <summary>
        /// AziVertSect property
        /// </summary>
		[Description("Azimuth used for vertical section plot/computations.")]
        [ComponentElement]
		[XmlElement("AziVertSect")]
        public PlaneAngleMeasure AziVertSect {
            get {
                return AziVertSectField;
            } 
            set {
                AziVertSectField = value;
                NotifyPropertyChanged("AziVertSect");
            }
        }

        private PlaneAngleMeasure AziVertSectField; 

        /// <summary>
        /// DispNsVertSectOrig property
        /// </summary>
		[Description("Origin north-south used for vertical section plot/computations.")]
        [ComponentElement]
		[XmlElement("DispNsVertSectOrig")]
        public LengthMeasure DispNSVertSectOrig {
            get {
                return DispNsVertSectOrigField;
            } 
            set {
                DispNsVertSectOrigField = value;
                NotifyPropertyChanged("DispNSVertSectOrig");
            }
        }

        private LengthMeasure DispNsVertSectOrigField; 

        /// <summary>
        /// DispEwVertSectOrig property
        /// </summary>
		[Description("Origin east-west used for vertical section plot/computations.")]
        [ComponentElement]
		[XmlElement("DispEwVertSectOrig")]
        public LengthMeasure DispEWVertSectOrig {
            get {
                return DispEwVertSectOrigField;
            } 
            set {
                DispEwVertSectOrigField = value;
                NotifyPropertyChanged("DispEWVertSectOrig");
            }
        }

        private LengthMeasure DispEwVertSectOrigField; 

        /// <summary>
        /// Definitive property
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that this trajectory is definitive for  this wellbore. False (\"false\" or \"0\") or not given indicates otherwise. There can only be one trajectory per wellbore with definitive=true and it must define the geometry of the whole wellbore (surface to bottom). The definitive trajectory may represent a composite of information in many other trajectories. A query requesting a subset of the possible information can provide a simplistic view of the geometry of the wellbore.")]
		[XmlElement("Definitive")]
        public Boolean? Definitive {
            get {
                return DefinitiveField;
            } 
            set {
                DefinitiveField = value;
             if(value!=null) 
                 this.DefinitiveSpecified = true;
                NotifyPropertyChanged("Definitive");
            }
        }

        private Boolean? DefinitiveField; 

        /// <summary>
        /// DefinitiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DefinitiveSpecified {
            get {
                return DefinitiveSpecifiedField;
            } 
            set {
                DefinitiveSpecifiedField = value;
                NotifyPropertyChanged("DefinitiveSpecified");
            }
        }

        private Boolean DefinitiveSpecifiedField; 

        /// <summary>
        /// Memory property
        /// </summary>
		[Description("Is trajectory a result of a memory dump from a tool?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("Memory")]
        public Boolean? Memory {
            get {
                return MemoryField;
            } 
            set {
                MemoryField = value;
             if(value!=null) 
                 this.MemorySpecified = true;
                NotifyPropertyChanged("Memory");
            }
        }

        private Boolean? MemoryField; 

        /// <summary>
        /// MemorySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean MemorySpecified {
            get {
                return MemorySpecifiedField;
            } 
            set {
                MemorySpecifiedField = value;
                NotifyPropertyChanged("MemorySpecified");
            }
        }

        private Boolean MemorySpecifiedField; 

        /// <summary>
        /// FinalTraj property
        /// </summary>
		[Description("Is trajectory a final or intermediate/preliminary?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("FinalTraj")]
        public Boolean? FinalTraj {
            get {
                return FinalTrajField;
            } 
            set {
                FinalTrajField = value;
             if(value!=null) 
                 this.FinalTrajSpecified = true;
                NotifyPropertyChanged("FinalTraj");
            }
        }

        private Boolean? FinalTrajField; 

        /// <summary>
        /// FinalTrajSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean FinalTrajSpecified {
            get {
                return FinalTrajSpecifiedField;
            } 
            set {
                FinalTrajSpecifiedField = value;
                NotifyPropertyChanged("FinalTrajSpecified");
            }
        }

        private Boolean FinalTrajSpecifiedField; 

        /// <summary>
        /// AziRef property
        /// </summary>
		[Description("Specifies the definition of north. While this is optional because of legacy data, it is strongly recommended  that this always be specified.")]
		[XmlElement("AziRef")]
        public AziRef? AziRef {
            get {
                return AziRefField;
            } 
            set {
                AziRefField = value;
             if(value!=null) 
                 this.AziRefSpecified = true;
                NotifyPropertyChanged("AziRef");
            }
        }

        private AziRef? AziRefField; 

        /// <summary>
        /// AziRefSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AziRefSpecified {
            get {
                return AziRefSpecifiedField;
            } 
            set {
                AziRefSpecifiedField = value;
                NotifyPropertyChanged("AziRefSpecified");
            }
        }

        private Boolean AziRefSpecifiedField; 

        /// <summary>
        /// TrajectoryStation property
        /// </summary>
		[RecurringElement]
		[XmlElement("TrajectoryStation")]
        public List<TrajectoryStation> TrajectoryStation {
            get {
                return TrajectoryStationField;
            } 
            set {
                TrajectoryStationField = value;
                NotifyPropertyChanged("TrajectoryStation");
            }
        }

         [XmlIgnore]
         public bool TrajectoryStationSpecified
         {
            get {
             if(TrajectoryStationField!=null)
                return TrajectoryStationField.Count>0?true:false;
             else return false;
            } 
         }
        private List<TrajectoryStation> TrajectoryStationField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// ParentTrajectory property
        /// </summary>
		[ComponentElement]
		[XmlElement("ParentTrajectory")]
        public DataObjectReference ParentTrajectory {
            get {
                return ParentTrajectoryField;
            } 
            set {
                ParentTrajectoryField = value;
                NotifyPropertyChanged("ParentTrajectory");
            }
        }

        private DataObjectReference ParentTrajectoryField; 


    } //here

    /// <summary>
    /// This class represents the ToolErrorModel xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the ToolErrorModel xsd type.")]
    public partial class ToolErrorModel : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// TypeSurveyTool property
        /// </summary>
		[StringLength(40)]
        [Description("The type of tool used for the measurements.   This is the same list as defined for a trajectoryStation.")]
		[XmlElement("TypeSurveyTool")]
        public String TypeSurveyTool {
            get {
                return TypeSurveyToolField;
            } 
            set {
                TypeSurveyToolField = value;
                NotifyPropertyChanged("TypeSurveyTool");
            }
        }

        private String TypeSurveyToolField; 

        /// <summary>
        /// UseErrorTermSet property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to the toolErrorTermSet object that  contains the error terms used in this model.")]
		[XmlElement("UseErrorTermSet")]
        public String UseErrorTermSet {
            get {
                return UseErrorTermSetField;
            } 
            set {
                UseErrorTermSetField = value;
                NotifyPropertyChanged("UseErrorTermSet");
            }
        }

        private String UseErrorTermSetField; 

        /// <summary>
        /// Authorization property
        /// </summary>
		[ComponentElement]
		[XmlElement("Authorization")]
        public IscwsaAuthorizationData Authorization {
            get {
                return AuthorizationField;
            } 
            set {
                AuthorizationField = value;
                NotifyPropertyChanged("Authorization");
            }
        }

        private IscwsaAuthorizationData AuthorizationField; 

        /// <summary>
        /// OperatingCondition property
        /// </summary>
		[RecurringElement]
		[XmlElement("OperatingCondition")]
        public List<IscwsaSurveyToolOperatingCondition> OperatingCondition {
            get {
                return OperatingConditionField;
            } 
            set {
                OperatingConditionField = value;
                NotifyPropertyChanged("OperatingCondition");
            }
        }

         [XmlIgnore]
         public bool OperatingConditionSpecified
         {
            get {
             if(OperatingConditionField!=null)
                return OperatingConditionField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IscwsaSurveyToolOperatingCondition> OperatingConditionField; 

        /// <summary>
        /// OperatingInterval property
        /// </summary>
		[RecurringElement]
		[XmlElement("OperatingInterval")]
        public List<IscwsaSurveyToolOperatingInterval> OperatingInterval {
            get {
                return OperatingIntervalField;
            } 
            set {
                OperatingIntervalField = value;
                NotifyPropertyChanged("OperatingInterval");
            }
        }

         [XmlIgnore]
         public bool OperatingIntervalSpecified
         {
            get {
             if(OperatingIntervalField!=null)
                return OperatingIntervalField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IscwsaSurveyToolOperatingInterval> OperatingIntervalField; 

        /// <summary>
        /// ModelParameters property
        /// </summary>
		[ComponentElement]
		[XmlElement("ModelParameters")]
        public IscwsaModelParameters ModelParameters {
            get {
                return ModelParametersField;
            } 
            set {
                ModelParametersField = value;
                NotifyPropertyChanged("ModelParameters");
            }
        }

        private IscwsaModelParameters ModelParametersField; 

        /// <summary>
        /// ErrorTermValue property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("ErrorTermValue")]
        public List<IscwsaErrorTermValue> ErrorTermValue {
            get {
                return ErrorTermValueField;
            } 
            set {
                ErrorTermValueField = value;
                NotifyPropertyChanged("ErrorTermValue");
            }
        }

         [XmlIgnore]
         public bool ErrorTermValueSpecified
         {
            get {
             if(ErrorTermValueField!=null)
                return ErrorTermValueField.Count>0?true:false;
             else return false;
            } 
         }
        private List<IscwsaErrorTermValue> ErrorTermValueField; 


    } //here

    /// <summary>
    /// This class represents the DownholeComponent xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the DownholeComponent xsd type.")]
    public partial class DownholeComponent : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// StartDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date range specification: start date")]
		[XmlElement("StartDate")]
        public String StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                NotifyPropertyChanged("StartDate");
            }
        }

        private String StartDateField; 

        /// <summary>
        /// EndDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date range specification: end date")]
		[XmlElement("EndDate")]
        public String EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                NotifyPropertyChanged("EndDate");
            }
        }

        private String EndDateField; 

        /// <summary>
        /// DownholeStringSet property
        /// </summary>
		[RecurringElement]
		[XmlArrayItem("")]
        [XmlArray("DownholeStringSet")]
        public List<DownholeString> DownholeStringSet {
            get {
                return DownholeStringSetField;
            } 
            set {
                DownholeStringSetField = value;
                NotifyPropertyChanged("DownholeStringSet");
            }
        }

         [XmlIgnore]
         public bool DownholeStringSetSpecified
         {
            get {
             if(DownholeStringSetField!=null)
                return DownholeStringSetField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DownholeString> DownholeStringSetField; 

        /// <summary>
        /// PerforationSets property
        /// </summary>
		[RecurringElement]
		[XmlArrayItem("")]
        [XmlArray("PerforationSets")]
        public List<PerforationSet> PerforationSets {
            get {
                return PerforationSetsField;
            } 
            set {
                PerforationSetsField = value;
                NotifyPropertyChanged("PerforationSets");
            }
        }

         [XmlIgnore]
         public bool PerforationSetsSpecified
         {
            get {
             if(PerforationSetsField!=null)
                return PerforationSetsField.Count>0?true:false;
             else return false;
            } 
         }
        private List<PerforationSet> PerforationSetsField; 

        /// <summary>
        /// EquipmentSet property
        /// </summary>
		[RecurringElement]
		[XmlArrayItem("")]
        [XmlArray("EquipmentSet")]
        public List<Equipment> EquipmentSet {
            get {
                return EquipmentSetField;
            } 
            set {
                EquipmentSetField = value;
                NotifyPropertyChanged("EquipmentSet");
            }
        }

         [XmlIgnore]
         public bool EquipmentSetSpecified
         {
            get {
             if(EquipmentSetField!=null)
                return EquipmentSetField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Equipment> EquipmentSetField; 

        /// <summary>
        /// Well property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Well")]
        public DataObjectReference Well {
            get {
                return WellField;
            } 
            set {
                WellField = value;
                NotifyPropertyChanged("Well");
            }
        }

        private DataObjectReference WellField; 

        /// <summary>
        /// WellHead property
        /// </summary>
		[ComponentElement]
		[XmlElement("WellHead")]
        public DownholeString WellHead {
            get {
                return WellHeadField;
            } 
            set {
                WellHeadField = value;
                NotifyPropertyChanged("WellHead");
            }
        }

        private DownholeString WellHeadField; 

        /// <summary>
        /// BoreholeStringSet property
        /// </summary>
		[RecurringElement]
		[XmlArrayItem("")]
        [XmlArray("BoreholeStringSet")]
        public List<BoreholeString> BoreholeStringSet {
            get {
                return BoreholeStringSetField;
            } 
            set {
                BoreholeStringSetField = value;
                NotifyPropertyChanged("BoreholeStringSet");
            }
        }

         [XmlIgnore]
         public bool BoreholeStringSetSpecified
         {
            get {
             if(BoreholeStringSetField!=null)
                return BoreholeStringSetField.Count>0?true:false;
             else return false;
            } 
         }
        private List<BoreholeString> BoreholeStringSetField; 


    } //here

    /// <summary>
    /// This class represents the CementJob xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the CementJob xsd type.")]
    public partial class CementJob : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// JobType property
        /// </summary>
		[Description("Type of cement job.")]
		[XmlElement("JobType")]
        public CementJobType? JobType {
            get {
                return JobTypeField;
            } 
            set {
                JobTypeField = value;
             if(value!=null) 
                 this.JobTypeSpecified = true;
                NotifyPropertyChanged("JobType");
            }
        }

        private CementJobType? JobTypeField; 

        /// <summary>
        /// JobTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean JobTypeSpecified {
            get {
                return JobTypeSpecifiedField;
            } 
            set {
                JobTypeSpecifiedField = value;
                NotifyPropertyChanged("JobTypeSpecified");
            }
        }

        private Boolean JobTypeSpecifiedField; 

        /// <summary>
        /// JobConfig property
        /// </summary>
		[StringLength(2000)]
        [Description("Job configuration.")]
		[XmlElement("JobConfig")]
        public String JobConfig {
            get {
                return JobConfigField;
            } 
            set {
                JobConfigField = value;
                NotifyPropertyChanged("JobConfig");
            }
        }

        private String JobConfigField; 

        /// <summary>
        /// NameCementedString property
        /// </summary>
		[StringLength(64)]
        [Description("Name for the cemented string")]
		[XmlElement("NameCementedString")]
        public String NameCementedString {
            get {
                return NameCementedStringField;
            } 
            set {
                NameCementedStringField = value;
                NotifyPropertyChanged("NameCementedString");
            }
        }

        private String NameCementedStringField; 

        /// <summary>
        /// NameWorkString property
        /// </summary>
		[StringLength(64)]
        [Description("Name for the cement work string")]
		[XmlElement("NameWorkString")]
        public String NameWorkString {
            get {
                return NameWorkStringField;
            } 
            set {
                NameWorkStringField = value;
                NotifyPropertyChanged("NameWorkString");
            }
        }

        private String NameWorkStringField; 

        /// <summary>
        /// OffshoreJob property
        /// </summary>
		[Description("Offshore job? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("OffshoreJob")]
        public Boolean? OffshoreJob {
            get {
                return OffshoreJobField;
            } 
            set {
                OffshoreJobField = value;
             if(value!=null) 
                 this.OffshoreJobSpecified = true;
                NotifyPropertyChanged("OffshoreJob");
            }
        }

        private Boolean? OffshoreJobField; 

        /// <summary>
        /// OffshoreJobSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean OffshoreJobSpecified {
            get {
                return OffshoreJobSpecifiedField;
            } 
            set {
                OffshoreJobSpecifiedField = value;
                NotifyPropertyChanged("OffshoreJobSpecified");
            }
        }

        private Boolean OffshoreJobSpecifiedField; 

        /// <summary>
        /// MdWater property
        /// </summary>
		[Description("Water depth if offshore. The distance from mean sea level to water bottom.")]
        [ComponentElement]
		[XmlElement("MdWater")]
        public LengthMeasure MDWater {
            get {
                return MdWaterField;
            } 
            set {
                MdWaterField = value;
                NotifyPropertyChanged("MDWater");
            }
        }

        private LengthMeasure MdWaterField; 

        /// <summary>
        /// ReturnsToSeabed property
        /// </summary>
		[Description("Returns to seabed? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("ReturnsToSeabed")]
        public Boolean? ReturnsToSeabed {
            get {
                return ReturnsToSeabedField;
            } 
            set {
                ReturnsToSeabedField = value;
             if(value!=null) 
                 this.ReturnsToSeabedSpecified = true;
                NotifyPropertyChanged("ReturnsToSeabed");
            }
        }

        private Boolean? ReturnsToSeabedField; 

        /// <summary>
        /// ReturnsToSeabedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ReturnsToSeabedSpecified {
            get {
                return ReturnsToSeabedSpecifiedField;
            } 
            set {
                ReturnsToSeabedSpecifiedField = value;
                NotifyPropertyChanged("ReturnsToSeabedSpecified");
            }
        }

        private Boolean ReturnsToSeabedSpecifiedField; 

        /// <summary>
        /// MdPrevShoe property
        /// </summary>
		[Description("Measured depth of previous shoe.")]
        [ComponentElement]
		[XmlElement("MdPrevShoe")]
        public MeasuredDepthCoord MDPrevShoe {
            get {
                return MdPrevShoeField;
            } 
            set {
                MdPrevShoeField = value;
                NotifyPropertyChanged("MDPrevShoe");
            }
        }

        private MeasuredDepthCoord MdPrevShoeField; 

        /// <summary>
        /// MdHole property
        /// </summary>
		[Description("Measured depth at bottom of hole.")]
        [ComponentElement]
		[XmlElement("MdHole")]
        public MeasuredDepthCoord MDHole {
            get {
                return MdHoleField;
            } 
            set {
                MdHoleField = value;
                NotifyPropertyChanged("MDHole");
            }
        }

        private MeasuredDepthCoord MdHoleField; 

        /// <summary>
        /// TvdPrevShoe property
        /// </summary>
		[Description("True Vertical Depth of previous shoe.")]
        [ComponentElement]
		[XmlElement("TvdPrevShoe")]
        public WellVerticalDepthCoord TvdPrevShoe {
            get {
                return TvdPrevShoeField;
            } 
            set {
                TvdPrevShoeField = value;
                NotifyPropertyChanged("TvdPrevShoe");
            }
        }

        private WellVerticalDepthCoord TvdPrevShoeField; 

        /// <summary>
        /// MdStringSet property
        /// </summary>
		[Description("Measured depth of cement string shoe.")]
        [ComponentElement]
		[XmlElement("MdStringSet")]
        public MeasuredDepthCoord MDStringSet {
            get {
                return MdStringSetField;
            } 
            set {
                MdStringSetField = value;
                NotifyPropertyChanged("MDStringSet");
            }
        }

        private MeasuredDepthCoord MdStringSetField; 

        /// <summary>
        /// TvdStringSet property
        /// </summary>
		[Description("True vertical depth of cement string shoe.")]
        [ComponentElement]
		[XmlElement("TvdStringSet")]
        public WellVerticalDepthCoord TvdStringSet {
            get {
                return TvdStringSetField;
            } 
            set {
                TvdStringSetField = value;
                NotifyPropertyChanged("TvdStringSet");
            }
        }

        private WellVerticalDepthCoord TvdStringSetField; 

        /// <summary>
        /// TypePlug property
        /// </summary>
		[StringLength(64)]
        [Description("Plug type.")]
		[XmlElement("TypePlug")]
        public String TypePlug {
            get {
                return TypePlugField;
            } 
            set {
                TypePlugField = value;
                NotifyPropertyChanged("TypePlug");
            }
        }

        private String TypePlugField; 

        /// <summary>
        /// NameCementString property
        /// </summary>
		[StringLength(64)]
        [Description("Name for the cementing string")]
		[XmlElement("NameCementString")]
        public String NameCementString {
            get {
                return NameCementStringField;
            } 
            set {
                NameCementStringField = value;
                NotifyPropertyChanged("NameCementString");
            }
        }

        private String NameCementStringField; 

        /// <summary>
        /// TypeSqueeze property
        /// </summary>
		[StringLength(64)]
        [Description("Type of squeeze.")]
		[XmlElement("TypeSqueeze")]
        public String TypeSqueeze {
            get {
                return TypeSqueezeField;
            } 
            set {
                TypeSqueezeField = value;
                NotifyPropertyChanged("TypeSqueeze");
            }
        }

        private String TypeSqueezeField; 

        /// <summary>
        /// MdSqueeze property
        /// </summary>
		[Description("Measured depth of squeeze.")]
        [ComponentElement]
		[XmlElement("MdSqueeze")]
        public MeasuredDepthCoord MDSqueeze {
            get {
                return MdSqueezeField;
            } 
            set {
                MdSqueezeField = value;
                NotifyPropertyChanged("MDSqueeze");
            }
        }

        private MeasuredDepthCoord MdSqueezeField; 

        /// <summary>
        /// ToolCompany property
        /// </summary>
		[StringLength(64)]
        [Description("Tool Company.")]
		[XmlElement("ToolCompany")]
        public String ToolCompany {
            get {
                return ToolCompanyField;
            } 
            set {
                ToolCompanyField = value;
                NotifyPropertyChanged("ToolCompany");
            }
        }

        private String ToolCompanyField; 

        /// <summary>
        /// TypeTool property
        /// </summary>
		[StringLength(64)]
        [Description("Cement tool type.")]
		[XmlElement("TypeTool")]
        public String TypeTool {
            get {
                return TypeToolField;
            } 
            set {
                TypeToolField = value;
                NotifyPropertyChanged("TypeTool");
            }
        }

        private String TypeToolField; 

        /// <summary>
        /// CoilTubing property
        /// </summary>
		[Description("Coiled Tubing Used (true=CTU used).   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("CoilTubing")]
        public Boolean? CoilTubing {
            get {
                return CoilTubingField;
            } 
            set {
                CoilTubingField = value;
             if(value!=null) 
                 this.CoilTubingSpecified = true;
                NotifyPropertyChanged("CoilTubing");
            }
        }

        private Boolean? CoilTubingField; 

        /// <summary>
        /// CoilTubingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CoilTubingSpecified {
            get {
                return CoilTubingSpecifiedField;
            } 
            set {
                CoilTubingSpecifiedField = value;
                NotifyPropertyChanged("CoilTubingSpecified");
            }
        }

        private Boolean CoilTubingSpecifiedField; 

        /// <summary>
        /// JobReport property
        /// </summary>
		[ComponentElement]
		[XmlElement("JobReport")]
        public CementJobReport JobReport {
            get {
                return JobReportField;
            } 
            set {
                JobReportField = value;
                NotifyPropertyChanged("JobReport");
            }
        }

        private CementJobReport JobReportField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// HoleConfig property
        /// </summary>
		[ComponentElement]
		[XmlElement("HoleConfig")]
        public DataObjectReference HoleConfig {
            get {
                return HoleConfigField;
            } 
            set {
                HoleConfigField = value;
                NotifyPropertyChanged("HoleConfig");
            }
        }

        private DataObjectReference HoleConfigField; 

        /// <summary>
        /// Design property
        /// </summary>
		[ComponentElement]
		[XmlElement("Design")]
        public CementJobDesign Design {
            get {
                return DesignField;
            } 
            set {
                DesignField = value;
                NotifyPropertyChanged("Design");
            }
        }

        private CementJobDesign DesignField; 

        /// <summary>
        /// CementingFluid property
        /// </summary>
		[RecurringElement]
		[XmlElement("CementingFluid")]
        public List<CementingFluid> CementingFluid {
            get {
                return CementingFluidField;
            } 
            set {
                CementingFluidField = value;
                NotifyPropertyChanged("CementingFluid");
            }
        }

         [XmlIgnore]
         public bool CementingFluidSpecified
         {
            get {
             if(CementingFluidField!=null)
                return CementingFluidField.Count>0?true:false;
             else return false;
            } 
         }
        private List<CementingFluid> CementingFluidField; 


    } //here

    /// <summary>
    /// This class represents the CementJobEvaluation xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the CementJobEvaluation xsd type.")]
    public partial class CementJobEvaluation : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// PresTest property
        /// </summary>
		[Description("Test pressure.")]
        [ComponentElement]
		[XmlElement("PresTest")]
        public PressureMeasure PresTest {
            get {
                return PresTestField;
            } 
            set {
                PresTestField = value;
                NotifyPropertyChanged("PresTest");
            }
        }

        private PressureMeasure PresTestField; 

        /// <summary>
        /// ETimTest property
        /// </summary>
		[Description("Elapsed tome to perform the test.")]
        [ComponentElement]
		[XmlElement("ETimTest")]
        public TimeMeasure ETimeTest {
            get {
                return ETimTestField;
            } 
            set {
                ETimTestField = value;
                NotifyPropertyChanged("ETimeTest");
            }
        }

        private TimeMeasure ETimTestField; 

        /// <summary>
        /// CementShoeCollar property
        /// </summary>
		[Description("Cement found between shoe and collar?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("CementShoeCollar")]
        public Boolean? CementShoeCollar {
            get {
                return CementShoeCollarField;
            } 
            set {
                CementShoeCollarField = value;
             if(value!=null) 
                 this.CementShoeCollarSpecified = true;
                NotifyPropertyChanged("CementShoeCollar");
            }
        }

        private Boolean? CementShoeCollarField; 

        /// <summary>
        /// CementShoeCollarSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CementShoeCollarSpecified {
            get {
                return CementShoeCollarSpecifiedField;
            } 
            set {
                CementShoeCollarSpecifiedField = value;
                NotifyPropertyChanged("CementShoeCollarSpecified");
            }
        }

        private Boolean CementShoeCollarSpecifiedField; 

        /// <summary>
        /// CetRun property
        /// </summary>
		[Description("Cement evaluation tool run.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("CetRun")]
        public Boolean? CetRun {
            get {
                return CetRunField;
            } 
            set {
                CetRunField = value;
             if(value!=null) 
                 this.CetRunSpecified = true;
                NotifyPropertyChanged("CetRun");
            }
        }

        private Boolean? CetRunField; 

        /// <summary>
        /// CetRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CetRunSpecified {
            get {
                return CetRunSpecifiedField;
            } 
            set {
                CetRunSpecifiedField = value;
                NotifyPropertyChanged("CetRunSpecified");
            }
        }

        private Boolean CetRunSpecifiedField; 

        /// <summary>
        /// CetBondQual property
        /// </summary>
		[Description("Cement evaluation tool bond quality.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("CetBondQual")]
        public Boolean? CetBondQual {
            get {
                return CetBondQualField;
            } 
            set {
                CetBondQualField = value;
             if(value!=null) 
                 this.CetBondQualSpecified = true;
                NotifyPropertyChanged("CetBondQual");
            }
        }

        private Boolean? CetBondQualField; 

        /// <summary>
        /// CetBondQualSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CetBondQualSpecified {
            get {
                return CetBondQualSpecifiedField;
            } 
            set {
                CetBondQualSpecifiedField = value;
                NotifyPropertyChanged("CetBondQualSpecified");
            }
        }

        private Boolean CetBondQualSpecifiedField; 

        /// <summary>
        /// CblRun property
        /// </summary>
		[Description("Cement bond log run?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("CblRun")]
        public Boolean? CblRun {
            get {
                return CblRunField;
            } 
            set {
                CblRunField = value;
             if(value!=null) 
                 this.CblRunSpecified = true;
                NotifyPropertyChanged("CblRun");
            }
        }

        private Boolean? CblRunField; 

        /// <summary>
        /// CblRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CblRunSpecified {
            get {
                return CblRunSpecifiedField;
            } 
            set {
                CblRunSpecifiedField = value;
                NotifyPropertyChanged("CblRunSpecified");
            }
        }

        private Boolean CblRunSpecifiedField; 

        /// <summary>
        /// CblBondQual property
        /// </summary>
		[Description("Cement bond log quality indication.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("CblBondQual")]
        public Boolean? CblBondQual {
            get {
                return CblBondQualField;
            } 
            set {
                CblBondQualField = value;
             if(value!=null) 
                 this.CblBondQualSpecified = true;
                NotifyPropertyChanged("CblBondQual");
            }
        }

        private Boolean? CblBondQualField; 

        /// <summary>
        /// CblBondQualSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CblBondQualSpecified {
            get {
                return CblBondQualSpecifiedField;
            } 
            set {
                CblBondQualSpecifiedField = value;
                NotifyPropertyChanged("CblBondQualSpecified");
            }
        }

        private Boolean CblBondQualSpecifiedField; 

        /// <summary>
        /// CblPres property
        /// </summary>
		[Description("Cement bond Log under pressure.")]
        [ComponentElement]
		[XmlElement("CblPres")]
        public PressureMeasure CblPres {
            get {
                return CblPresField;
            } 
            set {
                CblPresField = value;
                NotifyPropertyChanged("CblPres");
            }
        }

        private PressureMeasure CblPresField; 

        /// <summary>
        /// TempSurvey property
        /// </summary>
		[Description("Temperature survey run.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("TempSurvey")]
        public Boolean? TempSurvey {
            get {
                return TempSurveyField;
            } 
            set {
                TempSurveyField = value;
             if(value!=null) 
                 this.TempSurveySpecified = true;
                NotifyPropertyChanged("TempSurvey");
            }
        }

        private Boolean? TempSurveyField; 

        /// <summary>
        /// TempSurveySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TempSurveySpecified {
            get {
                return TempSurveySpecifiedField;
            } 
            set {
                TempSurveySpecifiedField = value;
                NotifyPropertyChanged("TempSurveySpecified");
            }
        }

        private Boolean TempSurveySpecifiedField; 

        /// <summary>
        /// ETimCementLog property
        /// </summary>
		[Description("Hours before logging run after cement run.")]
        [ComponentElement]
		[XmlElement("ETimCementLog")]
        public TimeMeasure ETimeCementLog {
            get {
                return ETimCementLogField;
            } 
            set {
                ETimCementLogField = value;
                NotifyPropertyChanged("ETimeCementLog");
            }
        }

        private TimeMeasure ETimCementLogField; 

        /// <summary>
        /// FormPit property
        /// </summary>
		[Description("PIT/LOT formation breakdown gradient or absolute pressure.")]
        [ComponentElement]
		[XmlElement("FormPit")]
        public ForcePerVolumeMeasure FormPit {
            get {
                return FormPitField;
            } 
            set {
                FormPitField = value;
                NotifyPropertyChanged("FormPit");
            }
        }

        private ForcePerVolumeMeasure FormPitField; 

        /// <summary>
        /// ToolCompanyPit property
        /// </summary>
		[StringLength(64)]
        [Description("Tool name for PIT.")]
		[XmlElement("ToolCompanyPit")]
        public String ToolCompanyPit {
            get {
                return ToolCompanyPitField;
            } 
            set {
                ToolCompanyPitField = value;
                NotifyPropertyChanged("ToolCompanyPit");
            }
        }

        private String ToolCompanyPitField; 

        /// <summary>
        /// ETimPitStart property
        /// </summary>
		[Description("Hours between end of cement job-start of PIT.")]
        [ComponentElement]
		[XmlElement("ETimPitStart")]
        public TimeMeasure ETimePitStart {
            get {
                return ETimPitStartField;
            } 
            set {
                ETimPitStartField = value;
                NotifyPropertyChanged("ETimePitStart");
            }
        }

        private TimeMeasure ETimPitStartField; 

        /// <summary>
        /// MdCementTop property
        /// </summary>
		[Description("Measured depth at top of cement.")]
        [ComponentElement]
		[XmlElement("MdCementTop")]
        public MeasuredDepthCoord MDCementTop {
            get {
                return MdCementTopField;
            } 
            set {
                MdCementTopField = value;
                NotifyPropertyChanged("MDCementTop");
            }
        }

        private MeasuredDepthCoord MdCementTopField; 

        /// <summary>
        /// TopCementMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Method to determine cement top.")]
		[XmlElement("TopCementMethod")]
        public String TopCementMethod {
            get {
                return TopCementMethodField;
            } 
            set {
                TopCementMethodField = value;
                NotifyPropertyChanged("TopCementMethod");
            }
        }

        private String TopCementMethodField; 

        /// <summary>
        /// TocOK property
        /// </summary>
		[Description("Is the top of cement sufficient?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("TocOK")]
        public Boolean? TocOK {
            get {
                return TocOKField;
            } 
            set {
                TocOKField = value;
             if(value!=null) 
                 this.TocOKSpecified = true;
                NotifyPropertyChanged("TocOK");
            }
        }

        private Boolean? TocOKField; 

        /// <summary>
        /// TocOKSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TocOKSpecified {
            get {
                return TocOKSpecifiedField;
            } 
            set {
                TocOKSpecifiedField = value;
                NotifyPropertyChanged("TocOKSpecified");
            }
        }

        private Boolean TocOKSpecifiedField; 

        /// <summary>
        /// JobRating property
        /// </summary>
		[StringLength(64)]
        [Description("Job rating.")]
		[XmlElement("JobRating")]
        public String JobRating {
            get {
                return JobRatingField;
            } 
            set {
                JobRatingField = value;
                NotifyPropertyChanged("JobRating");
            }
        }

        private String JobRatingField; 

        /// <summary>
        /// RemedialCement property
        /// </summary>
		[Description("Remedial cement required.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("RemedialCement")]
        public Boolean? RemedialCement {
            get {
                return RemedialCementField;
            } 
            set {
                RemedialCementField = value;
             if(value!=null) 
                 this.RemedialCementSpecified = true;
                NotifyPropertyChanged("RemedialCement");
            }
        }

        private Boolean? RemedialCementField; 

        /// <summary>
        /// RemedialCementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean RemedialCementSpecified {
            get {
                return RemedialCementSpecifiedField;
            } 
            set {
                RemedialCementSpecifiedField = value;
                NotifyPropertyChanged("RemedialCementSpecified");
            }
        }

        private Boolean RemedialCementSpecifiedField; 

        /// <summary>
        /// NumRemedial property
        /// </summary>
		[Description("Number of remedials.")]
		[XmlElement("NumRemedial")]
        public Int32? NumRemedial {
            get {
                return NumRemedialField;
            } 
            set {
                NumRemedialField = value;
             if(value!=null) 
                 this.NumRemedialSpecified = true;
                NotifyPropertyChanged("NumRemedial");
            }
        }

        private Int32? NumRemedialField; 

        /// <summary>
        /// NumRemedialSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumRemedialSpecified {
            get {
                return NumRemedialSpecifiedField;
            } 
            set {
                NumRemedialSpecifiedField = value;
                NotifyPropertyChanged("NumRemedialSpecified");
            }
        }

        private Boolean NumRemedialSpecifiedField; 

        /// <summary>
        /// FailureMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Method used to determine if cement job unsuccessful.")]
		[XmlElement("FailureMethod")]
        public String FailureMethod {
            get {
                return FailureMethodField;
            } 
            set {
                FailureMethodField = value;
                NotifyPropertyChanged("FailureMethod");
            }
        }

        private String FailureMethodField; 

        /// <summary>
        /// LinerTop property
        /// </summary>
		[Description("The distance to the top of the liner.")]
        [ComponentElement]
		[XmlElement("LinerTop")]
        public LengthMeasure LinerTop {
            get {
                return LinerTopField;
            } 
            set {
                LinerTopField = value;
                NotifyPropertyChanged("LinerTop");
            }
        }

        private LengthMeasure LinerTopField; 

        /// <summary>
        /// LinerLap property
        /// </summary>
		[Description("Liner overlap length.")]
        [ComponentElement]
		[XmlElement("LinerLap")]
        public LengthMeasure LinerLap {
            get {
                return LinerLapField;
            } 
            set {
                LinerLapField = value;
                NotifyPropertyChanged("LinerLap");
            }
        }

        private LengthMeasure LinerLapField; 

        /// <summary>
        /// ETimBeforeTest property
        /// </summary>
		[Description("Hours before liner top test.")]
        [ComponentElement]
		[XmlElement("ETimBeforeTest")]
        public TimeMeasure ETimeBeforeTest {
            get {
                return ETimBeforeTestField;
            } 
            set {
                ETimBeforeTestField = value;
                NotifyPropertyChanged("ETimeBeforeTest");
            }
        }

        private TimeMeasure ETimBeforeTestField; 

        /// <summary>
        /// TestNegativeTool property
        /// </summary>
		[StringLength(64)]
        [Description("Test negative tool for Liner top seal.")]
		[XmlElement("TestNegativeTool")]
        public String TestNegativeTool {
            get {
                return TestNegativeToolField;
            } 
            set {
                TestNegativeToolField = value;
                NotifyPropertyChanged("TestNegativeTool");
            }
        }

        private String TestNegativeToolField; 

        /// <summary>
        /// TestNegativeEmw property
        /// </summary>
		[Description("Equivalent mud weight. Negative Test?")]
        [ComponentElement]
		[XmlElement("TestNegativeEmw")]
        public MassPerVolumeMeasure TestNegativeEmw {
            get {
                return TestNegativeEmwField;
            } 
            set {
                TestNegativeEmwField = value;
                NotifyPropertyChanged("TestNegativeEmw");
            }
        }

        private MassPerVolumeMeasure TestNegativeEmwField; 

        /// <summary>
        /// TestPositiveTool property
        /// </summary>
		[StringLength(64)]
        [Description("Test Positive Tool for liner top seal.")]
		[XmlElement("TestPositiveTool")]
        public String TestPositiveTool {
            get {
                return TestPositiveToolField;
            } 
            set {
                TestPositiveToolField = value;
                NotifyPropertyChanged("TestPositiveTool");
            }
        }

        private String TestPositiveToolField; 

        /// <summary>
        /// TestPositiveEmw property
        /// </summary>
		[Description("Equivalent mud weight. Positive Test or absolute pressure .")]
        [ComponentElement]
		[XmlElement("TestPositiveEmw")]
        public MassPerVolumeMeasure TestPositiveEmw {
            get {
                return TestPositiveEmwField;
            } 
            set {
                TestPositiveEmwField = value;
                NotifyPropertyChanged("TestPositiveEmw");
            }
        }

        private MassPerVolumeMeasure TestPositiveEmwField; 

        /// <summary>
        /// CementFoundOnTool property
        /// </summary>
		[Description("Cement found on tool?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("CementFoundOnTool")]
        public Boolean? CementFoundOnTool {
            get {
                return CementFoundOnToolField;
            } 
            set {
                CementFoundOnToolField = value;
             if(value!=null) 
                 this.CementFoundOnToolSpecified = true;
                NotifyPropertyChanged("CementFoundOnTool");
            }
        }

        private Boolean? CementFoundOnToolField; 

        /// <summary>
        /// CementFoundOnToolSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean CementFoundOnToolSpecified {
            get {
                return CementFoundOnToolSpecifiedField;
            } 
            set {
                CementFoundOnToolSpecifiedField = value;
                NotifyPropertyChanged("CementFoundOnToolSpecified");
            }
        }

        private Boolean CementFoundOnToolSpecifiedField; 

        /// <summary>
        /// MdDVTool property
        /// </summary>
		[Description("Measured depth to diverter tool.")]
        [ComponentElement]
		[XmlElement("MdDVTool")]
        public MeasuredDepthCoord MDDVTool {
            get {
                return MdDVToolField;
            } 
            set {
                MdDVToolField = value;
                NotifyPropertyChanged("MDDVTool");
            }
        }

        private MeasuredDepthCoord MdDVToolField; 

        /// <summary>
        /// CementJob property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("CementJob")]
        public DataObjectReference CementJob {
            get {
                return CementJobField;
            } 
            set {
                CementJobField = value;
                NotifyPropertyChanged("CementJob");
            }
        }

        private DataObjectReference CementJobField; 


    } //here

    /// <summary>
    /// This class represents the WellboreGeometry xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellboreGeometry xsd type.")]
    public partial class WellboreGeometry : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MdBase property
        /// </summary>
		[Description("Measured depth at bottom, at the time this report was made.")]
        [ComponentElement]
		[XmlElement("MdBase")]
        public MeasuredDepthCoord MDBase {
            get {
                return MdBaseField;
            } 
            set {
                MdBaseField = value;
                NotifyPropertyChanged("MDBase");
            }
        }

        private MeasuredDepthCoord MdBaseField; 

        /// <summary>
        /// GapAir property
        /// </summary>
		[Description("Air gap.")]
        [ComponentElement]
		[XmlElement("GapAir")]
        public LengthMeasure GapAir {
            get {
                return GapAirField;
            } 
            set {
                GapAirField = value;
                NotifyPropertyChanged("GapAir");
            }
        }

        private LengthMeasure GapAirField; 

        /// <summary>
        /// DepthWaterMean property
        /// </summary>
		[Description("Water depth.")]
        [ComponentElement]
		[XmlElement("DepthWaterMean")]
        public LengthMeasure DepthWaterMean {
            get {
                return DepthWaterMeanField;
            } 
            set {
                DepthWaterMeanField = value;
                NotifyPropertyChanged("DepthWaterMean");
            }
        }

        private LengthMeasure DepthWaterMeanField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("Describes the growing status of the wellbore geometry, whether active, inactive or closed")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// WellboreGeometrySection property
        /// </summary>
		[RecurringElement]
		[XmlElement("WellboreGeometrySection")]
        public List<WellboreGeometrySection> WellboreGeometrySection {
            get {
                return WellboreGeometrySectionField;
            } 
            set {
                WellboreGeometrySectionField = value;
                NotifyPropertyChanged("WellboreGeometrySection");
            }
        }

         [XmlIgnore]
         public bool WellboreGeometrySectionSpecified
         {
            get {
             if(WellboreGeometrySectionField!=null)
                return WellboreGeometrySectionField.Count>0?true:false;
             else return false;
            } 
         }
        private List<WellboreGeometrySection> WellboreGeometrySectionField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// BhaRun property
        /// </summary>
		[RecurringElement]
		[XmlElement("BhaRun")]
        public List<DataObjectReference> BhaRun {
            get {
                return BhaRunField;
            } 
            set {
                BhaRunField = value;
                NotifyPropertyChanged("BhaRun");
            }
        }

         [XmlIgnore]
         public bool BhaRunSpecified
         {
            get {
             if(BhaRunField!=null)
                return BhaRunField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DataObjectReference> BhaRunField; 


    } //here

    /// <summary>
    /// This class represents the Log xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Log xsd type.")]
    public partial class Log : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ChannelState property
        /// </summary>
		[Description("Defines where the channel gets its data from, e.g., calculated from another source, or from archive, or raw real-time, etc.")]
		[XmlElement("ChannelState")]
        public ChannelState? ChannelState {
            get {
                return ChannelStateField;
            } 
            set {
                ChannelStateField = value;
             if(value!=null) 
                 this.ChannelStateSpecified = true;
                NotifyPropertyChanged("ChannelState");
            }
        }

        private ChannelState? ChannelStateField; 

        /// <summary>
        /// ChannelStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ChannelStateSpecified {
            get {
                return ChannelStateSpecifiedField;
            } 
            set {
                ChannelStateSpecifiedField = value;
                NotifyPropertyChanged("ChannelStateSpecified");
            }
        }

        private Boolean ChannelStateSpecifiedField; 

        /// <summary>
        /// TimeDepth property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Is this a time or depth log?")]
		[XmlElement("TimeDepth")]
        public String TimeDepth {
            get {
                return TimeDepthField;
            } 
            set {
                TimeDepthField = value;
                NotifyPropertyChanged("TimeDepth");
            }
        }

        private String TimeDepthField; 

        /// <summary>
        /// CurveClass property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A mandatory value categorizing a log channel. The classification system used in WITSML is the one from the PWLS group.  NOTE: This should turn into an extensible enumeration before WITSML is released.")]
		[XmlElement("CurveClass")]
        public String CurveClass {
            get {
                return CurveClassField;
            } 
            set {
                CurveClassField = value;
                NotifyPropertyChanged("CurveClass");
            }
        }

        private String CurveClassField; 

        /// <summary>
        /// RunNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal run number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a bit run number for LWD data and a wireline run number for logging data.")]
		[XmlElement("RunNumber")]
        public String RunNumber {
            get {
                return RunNumberField;
            } 
            set {
                RunNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private String RunNumberField; 

        /// <summary>
        /// PassNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal pass number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a wireline pass number for logging data.")]
		[XmlElement("PassNumber")]
        public String PassNumber {
            get {
                return PassNumberField;
            } 
            set {
                PassNumberField = value;
                NotifyPropertyChanged("PassNumber");
            }
        }

        private String PassNumberField; 

        /// <summary>
        /// StartIndex property
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\", the startIndex is the starting (minimum) index value at which the first non-null data point is located. When the log header defines the direction as \"Decreasing\", the startIndex is the starting (maximum) index value at which the first non-null data point is located.")]
		[XmlElement("StartIndex")]
        public AbstractIndexValue StartIndex {
            get {
                return StartIndexField;
            } 
            set {
                StartIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private AbstractIndexValue StartIndexField; 

        /// <summary>
        /// EndIndex property
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\", the endIndex is the ending (maximum) index value at which the last non-null data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last non-null data point is located.")]
		[XmlElement("EndIndex")]
        public AbstractIndexValue EndIndex {
            get {
                return EndIndexField;
            } 
            set {
                EndIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private AbstractIndexValue EndIndexField; 

        /// <summary>
        /// LoggingCompanyName property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name of the logging company.")]
		[XmlElement("LoggingCompanyName")]
        public String LoggingCompanyName {
            get {
                return LoggingCompanyNameField;
            } 
            set {
                LoggingCompanyNameField = value;
                NotifyPropertyChanged("LoggingCompanyName");
            }
        }

        private String LoggingCompanyNameField; 

        /// <summary>
        /// LoggingCompanyCode property
        /// </summary>
		[StringLength(64)]
        [Description("The RP66 organization code assigned to a logging company. The list is available at http://www.energistics.org/geosciences/geology-standards/rp66-organization-codes")]
		[XmlElement("LoggingCompanyCode")]
        public String LoggingCompanyCode {
            get {
                return LoggingCompanyCodeField;
            } 
            set {
                LoggingCompanyCodeField = value;
                NotifyPropertyChanged("LoggingCompanyCode");
            }
        }

        private String LoggingCompanyCodeField; 

        /// <summary>
        /// ToolName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the logging tool as given by the logging contractor.")]
		[XmlElement("ToolName")]
        public String ToolName {
            get {
                return ToolNameField;
            } 
            set {
                ToolNameField = value;
                NotifyPropertyChanged("ToolName");
            }
        }

        private String ToolNameField; 

        /// <summary>
        /// ToolClass property
        /// </summary>
		[StringLength(64)]
        [Description("A value categorizing a logging tool. The classification system used in WITSML is the one from the PWLS group.  NOTE: This should turn into an extensible enumeration before WITSML is released")]
		[XmlElement("ToolClass")]
        public String ToolClass {
            get {
                return ToolClassField;
            } 
            set {
                ToolClassField = value;
                NotifyPropertyChanged("ToolClass");
            }
        }

        private String ToolClassField; 

        /// <summary>
        /// Derivation property
        /// </summary>
		[Description("Indicates that the channel is derived from one or more other channels")]
		[XmlElement("Derivation")]
        public ChannelDerivation? Derivation {
            get {
                return DerivationField;
            } 
            set {
                DerivationField = value;
             if(value!=null) 
                 this.DerivationSpecified = true;
                NotifyPropertyChanged("Derivation");
            }
        }

        private ChannelDerivation? DerivationField; 

        /// <summary>
        /// DerivationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DerivationSpecified {
            get {
                return DerivationSpecifiedField;
            } 
            set {
                DerivationSpecifiedField = value;
                NotifyPropertyChanged("DerivationSpecified");
            }
        }

        private Boolean DerivationSpecifiedField; 

        /// <summary>
        /// LoggingMethod property
        /// </summary>
		[Description("Defines where the log channel gets its data from: LWD, MWD, wireline; or whether it is computed, etc.")]
		[XmlElement("LoggingMethod")]
        public LoggingMethod? LoggingMethod {
            get {
                return LoggingMethodField;
            } 
            set {
                LoggingMethodField = value;
             if(value!=null) 
                 this.LoggingMethodSpecified = true;
                NotifyPropertyChanged("LoggingMethod");
            }
        }

        private LoggingMethod? LoggingMethodField; 

        /// <summary>
        /// LoggingMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean LoggingMethodSpecified {
            get {
                return LoggingMethodSpecifiedField;
            } 
            set {
                LoggingMethodSpecifiedField = value;
                NotifyPropertyChanged("LoggingMethodSpecified");
            }
        }

        private Boolean LoggingMethodSpecifiedField; 

        /// <summary>
        /// NominalHoleSize property
        /// </summary>
		[Description("The nominal hole size at the time the measurement tool was in the hole. The size is \"nominal\" to indicate that this is not the result of a caliper reading or other direct measurement of the hoe size, but is just a name used to refer to the diameter. This is normally the bit size.  In a case where there are more than one diameter hole being drilled at the same time (like where a reamer is behind the bit) this diameter is the one which was seen by the sensor which produced a particular log channel.")]
        [ComponentElement]
		[XmlElement("NominalHoleSize")]
        public LengthMeasureExt NominalHoleSize {
            get {
                return NominalHoleSizeField;
            } 
            set {
                NominalHoleSizeField = value;
                NotifyPropertyChanged("NominalHoleSize");
            }
        }

        private LengthMeasureExt NominalHoleSizeField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// ChannelSet property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("ChannelSet")]
        public List<ChannelSet> ChannelSet {
            get {
                return ChannelSetField;
            } 
            set {
                ChannelSetField = value;
                NotifyPropertyChanged("ChannelSet");
            }
        }

         [XmlIgnore]
         public bool ChannelSetSpecified
         {
            get {
             if(ChannelSetField!=null)
                return ChannelSetField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ChannelSet> ChannelSetField; 


    } //here

    /// <summary>
    /// This class represents the ChannelSet xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the ChannelSet xsd type.")]
    public partial class ChannelSet : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("Index")]
        public List<ChannelIndex> Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

         [XmlIgnore]
         public bool IndexSpecified
         {
            get {
             if(IndexField!=null)
                return IndexField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ChannelIndex> IndexField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("Channel")]
        public List<Channel> Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

         [XmlIgnore]
         public bool ChannelSpecified
         {
            get {
             if(ChannelField!=null)
                return ChannelField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Channel> ChannelField; 

        /// <summary>
        /// Data property
        /// </summary>
		[ComponentElement]
		[XmlElement("Data")]
        public ChannelData Data {
            get {
                return DataField;
            } 
            set {
                DataField = value;
                NotifyPropertyChanged("Data");
            }
        }

        private ChannelData DataField; 

        /// <summary>
        /// ChannelState property
        /// </summary>
		[Description("Defines where the channel gets its data from, e.g., calculated from another source, or from archive, or raw real-time, etc.")]
		[XmlElement("ChannelState")]
        public ChannelState? ChannelState {
            get {
                return ChannelStateField;
            } 
            set {
                ChannelStateField = value;
             if(value!=null) 
                 this.ChannelStateSpecified = true;
                NotifyPropertyChanged("ChannelState");
            }
        }

        private ChannelState? ChannelStateField; 

        /// <summary>
        /// ChannelStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ChannelStateSpecified {
            get {
                return ChannelStateSpecifiedField;
            } 
            set {
                ChannelStateSpecifiedField = value;
                NotifyPropertyChanged("ChannelStateSpecified");
            }
        }

        private Boolean ChannelStateSpecifiedField; 

        /// <summary>
        /// TimeDepth property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Is this a time or depth log?")]
		[XmlElement("TimeDepth")]
        public String TimeDepth {
            get {
                return TimeDepthField;
            } 
            set {
                TimeDepthField = value;
                NotifyPropertyChanged("TimeDepth");
            }
        }

        private String TimeDepthField; 

        /// <summary>
        /// CurveClass property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A mandatory value categorizing a log channel. The classification system used in WITSML is the one from the PWLS group.  NOTE: This should turn into an extensible enumeration before WITSML is released.")]
		[XmlElement("CurveClass")]
        public String CurveClass {
            get {
                return CurveClassField;
            } 
            set {
                CurveClassField = value;
                NotifyPropertyChanged("CurveClass");
            }
        }

        private String CurveClassField; 

        /// <summary>
        /// RunNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal run number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a bit run number for LWD data and a wireline run number for logging data.")]
		[XmlElement("RunNumber")]
        public String RunNumber {
            get {
                return RunNumberField;
            } 
            set {
                RunNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private String RunNumberField; 

        /// <summary>
        /// PassNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal pass number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a wireline pass number for logging data.")]
		[XmlElement("PassNumber")]
        public String PassNumber {
            get {
                return PassNumberField;
            } 
            set {
                PassNumberField = value;
                NotifyPropertyChanged("PassNumber");
            }
        }

        private String PassNumberField; 

        /// <summary>
        /// StartIndex property
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\", the startIndex is the starting (minimum) index value at which the first non-null data point is located. When the log header defines the direction as \"Decreasing\", the startIndex is the starting (maximum) index value at which the first non-null data point is located.")]
		[XmlElement("StartIndex")]
        public AbstractIndexValue StartIndex {
            get {
                return StartIndexField;
            } 
            set {
                StartIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private AbstractIndexValue StartIndexField; 

        /// <summary>
        /// EndIndex property
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\", the endIndex is the ending (maximum) index value at which the last non-null data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last non-null data point is located.")]
		[XmlElement("EndIndex")]
        public AbstractIndexValue EndIndex {
            get {
                return EndIndexField;
            } 
            set {
                EndIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private AbstractIndexValue EndIndexField; 

        /// <summary>
        /// LoggingCompanyName property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name of the logging company.")]
		[XmlElement("LoggingCompanyName")]
        public String LoggingCompanyName {
            get {
                return LoggingCompanyNameField;
            } 
            set {
                LoggingCompanyNameField = value;
                NotifyPropertyChanged("LoggingCompanyName");
            }
        }

        private String LoggingCompanyNameField; 

        /// <summary>
        /// LoggingCompanyCode property
        /// </summary>
		[StringLength(64)]
        [Description("The RP66 organization code assigned to a logging company. The list is available at http://www.energistics.org/geosciences/geology-standards/rp66-organization-codes")]
		[XmlElement("LoggingCompanyCode")]
        public String LoggingCompanyCode {
            get {
                return LoggingCompanyCodeField;
            } 
            set {
                LoggingCompanyCodeField = value;
                NotifyPropertyChanged("LoggingCompanyCode");
            }
        }

        private String LoggingCompanyCodeField; 

        /// <summary>
        /// ToolName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the logging tool as given by the logging contractor.")]
		[XmlElement("ToolName")]
        public String ToolName {
            get {
                return ToolNameField;
            } 
            set {
                ToolNameField = value;
                NotifyPropertyChanged("ToolName");
            }
        }

        private String ToolNameField; 

        /// <summary>
        /// ToolClass property
        /// </summary>
		[StringLength(64)]
        [Description("A value categorizing a logging tool. The classification system used in WITSML is the one from the PWLS group.  NOTE: This should turn into an extensible enumeration before WITSML is released")]
		[XmlElement("ToolClass")]
        public String ToolClass {
            get {
                return ToolClassField;
            } 
            set {
                ToolClassField = value;
                NotifyPropertyChanged("ToolClass");
            }
        }

        private String ToolClassField; 

        /// <summary>
        /// Derivation property
        /// </summary>
		[Description("Indicates that the channel is derived from one or more other channels")]
		[XmlElement("Derivation")]
        public ChannelDerivation? Derivation {
            get {
                return DerivationField;
            } 
            set {
                DerivationField = value;
             if(value!=null) 
                 this.DerivationSpecified = true;
                NotifyPropertyChanged("Derivation");
            }
        }

        private ChannelDerivation? DerivationField; 

        /// <summary>
        /// DerivationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DerivationSpecified {
            get {
                return DerivationSpecifiedField;
            } 
            set {
                DerivationSpecifiedField = value;
                NotifyPropertyChanged("DerivationSpecified");
            }
        }

        private Boolean DerivationSpecifiedField; 

        /// <summary>
        /// LoggingMethod property
        /// </summary>
		[Description("Defines where the log channel gets its data from: LWD, MWD, wireline; or whether it is computed, etc.")]
		[XmlElement("LoggingMethod")]
        public LoggingMethod? LoggingMethod {
            get {
                return LoggingMethodField;
            } 
            set {
                LoggingMethodField = value;
             if(value!=null) 
                 this.LoggingMethodSpecified = true;
                NotifyPropertyChanged("LoggingMethod");
            }
        }

        private LoggingMethod? LoggingMethodField; 

        /// <summary>
        /// LoggingMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean LoggingMethodSpecified {
            get {
                return LoggingMethodSpecifiedField;
            } 
            set {
                LoggingMethodSpecifiedField = value;
                NotifyPropertyChanged("LoggingMethodSpecified");
            }
        }

        private Boolean LoggingMethodSpecifiedField; 

        /// <summary>
        /// NominalHoleSize property
        /// </summary>
		[Description("The nominal hole size at the time the measurement tool was in the hole. The size is \"nominal\" to indicate that this is not the result of a caliper reading or other direct measurement of the hoe size, but is just a name used to refer to the diameter. This is normally the bit size.  In a case where there are more than one diameter hole being drilled at the same time (like where a reamer is behind the bit) this diameter is the one which was seen by the sensor which produced a particular log channel.")]
        [ComponentElement]
		[XmlElement("NominalHoleSize")]
        public LengthMeasureExt NominalHoleSize {
            get {
                return NominalHoleSizeField;
            } 
            set {
                NominalHoleSizeField = value;
                NotifyPropertyChanged("NominalHoleSize");
            }
        }

        private LengthMeasureExt NominalHoleSizeField; 

        /// <summary>
        /// DataContext property
        /// </summary>
		
		[XmlElement("DataContext")]
        public AbstractLogDataContext DataContext {
            get {
                return DataContextField;
            } 
            set {
                DataContextField = value;
                NotifyPropertyChanged("DataContext");
            }
        }

        private AbstractLogDataContext DataContextField; 


    } //here

    /// <summary>
    /// This class represents the Channel xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the Channel xsd type.")]
    public partial class Channel : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Mnemonic property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The mnemonic name for this channel. Mnemonics are not unique within a store.")]
		[XmlElement("Mnemonic")]
        public String Mnemonic {
            get {
                return MnemonicField;
            } 
            set {
                MnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private String MnemonicField; 

        /// <summary>
        /// DataType property
        /// </summary>
		[Required]
        [Description("The underlying Etp data type of the value")]
		[XmlElement("DataType")]
        public EtpDataType? DataType {
            get {
                return DataTypeField;
            } 
            set {
                DataTypeField = value;
                NotifyPropertyChanged("DataType");
            }
        }

        private EtpDataType? DataTypeField; 

        /// <summary>
        /// Uom property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The underlying unit of measure of the value.")]
		[XmlElement("Uom")]
        public String Uom {
            get {
                return UomField;
            } 
            set {
                UomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String UomField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("The status of a Channel with respect to creating new measurements. An active Channel is considered to by actively producing data points. An inactive Channel is known to be offline or not currently producing, but may begin producing again at some future point. A closed Channel will never produce points again. The rules for when a Channel is to be closed will vary some for different kinds of Channels. For instance, time-based surface Channels may remain open for the entire life of the drilling operation, whereas depth-based wireline Channels would be Closed at the end of the wireline job.")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// Source property
        /// </summary>
		[StringLength(64)]
        [Description("Source of the data in the channel. This would contain the contractor name.")]
		[XmlElement("Source")]
        public String Source {
            get {
                return SourceField;
            } 
            set {
                SourceField = value;
                NotifyPropertyChanged("Source");
            }
        }

        private String SourceField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// AxisDefinition property
        /// </summary>
		[RecurringElement]
		[XmlElement("AxisDefinition")]
        public List<LogChannelAxis> AxisDefinition {
            get {
                return AxisDefinitionField;
            } 
            set {
                AxisDefinitionField = value;
                NotifyPropertyChanged("AxisDefinition");
            }
        }

         [XmlIgnore]
         public bool AxisDefinitionSpecified
         {
            get {
             if(AxisDefinitionField!=null)
                return AxisDefinitionField.Count>0?true:false;
             else return false;
            } 
         }
        private List<LogChannelAxis> AxisDefinitionField; 

        /// <summary>
        /// ChannelState property
        /// </summary>
		[Description("Defines where the channel gets its data from, e.g., calculated from another source, or from archive, or raw real-time, etc.")]
		[XmlElement("ChannelState")]
        public ChannelState? ChannelState {
            get {
                return ChannelStateField;
            } 
            set {
                ChannelStateField = value;
             if(value!=null) 
                 this.ChannelStateSpecified = true;
                NotifyPropertyChanged("ChannelState");
            }
        }

        private ChannelState? ChannelStateField; 

        /// <summary>
        /// ChannelStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ChannelStateSpecified {
            get {
                return ChannelStateSpecifiedField;
            } 
            set {
                ChannelStateSpecifiedField = value;
                NotifyPropertyChanged("ChannelStateSpecified");
            }
        }

        private Boolean ChannelStateSpecifiedField; 

        /// <summary>
        /// TimeDepth property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Is this a time or depth log?")]
		[XmlElement("TimeDepth")]
        public String TimeDepth {
            get {
                return TimeDepthField;
            } 
            set {
                TimeDepthField = value;
                NotifyPropertyChanged("TimeDepth");
            }
        }

        private String TimeDepthField; 

        /// <summary>
        /// CurveClass property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A mandatory value categorizing a log channel. The classification system used in WITSML is the one from the PWLS group.  NOTE: This should turn into an extensible enumeration before WITSML is released.")]
		[XmlElement("CurveClass")]
        public String CurveClass {
            get {
                return CurveClassField;
            } 
            set {
                CurveClassField = value;
                NotifyPropertyChanged("CurveClass");
            }
        }

        private String CurveClassField; 

        /// <summary>
        /// RunNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal run number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a bit run number for LWD data and a wireline run number for logging data.")]
		[XmlElement("RunNumber")]
        public String RunNumber {
            get {
                return RunNumberField;
            } 
            set {
                RunNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private String RunNumberField; 

        /// <summary>
        /// PassNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal pass number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a wireline pass number for logging data.")]
		[XmlElement("PassNumber")]
        public String PassNumber {
            get {
                return PassNumberField;
            } 
            set {
                PassNumberField = value;
                NotifyPropertyChanged("PassNumber");
            }
        }

        private String PassNumberField; 

        /// <summary>
        /// StartIndex property
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\", the startIndex is the starting (minimum) index value at which the first non-null data point is located. When the log header defines the direction as \"Decreasing\", the startIndex is the starting (maximum) index value at which the first non-null data point is located.")]
		[XmlElement("StartIndex")]
        public AbstractIndexValue StartIndex {
            get {
                return StartIndexField;
            } 
            set {
                StartIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private AbstractIndexValue StartIndexField; 

        /// <summary>
        /// EndIndex property
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\", the endIndex is the ending (maximum) index value at which the last non-null data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last non-null data point is located.")]
		[XmlElement("EndIndex")]
        public AbstractIndexValue EndIndex {
            get {
                return EndIndexField;
            } 
            set {
                EndIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private AbstractIndexValue EndIndexField; 

        /// <summary>
        /// LoggingCompanyName property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name of the logging company.")]
		[XmlElement("LoggingCompanyName")]
        public String LoggingCompanyName {
            get {
                return LoggingCompanyNameField;
            } 
            set {
                LoggingCompanyNameField = value;
                NotifyPropertyChanged("LoggingCompanyName");
            }
        }

        private String LoggingCompanyNameField; 

        /// <summary>
        /// LoggingCompanyCode property
        /// </summary>
		[StringLength(64)]
        [Description("The RP66 organization code assigned to a logging company. The list is available at http://www.energistics.org/geosciences/geology-standards/rp66-organization-codes")]
		[XmlElement("LoggingCompanyCode")]
        public String LoggingCompanyCode {
            get {
                return LoggingCompanyCodeField;
            } 
            set {
                LoggingCompanyCodeField = value;
                NotifyPropertyChanged("LoggingCompanyCode");
            }
        }

        private String LoggingCompanyCodeField; 

        /// <summary>
        /// ToolName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the logging tool as given by the logging contractor.")]
		[XmlElement("ToolName")]
        public String ToolName {
            get {
                return ToolNameField;
            } 
            set {
                ToolNameField = value;
                NotifyPropertyChanged("ToolName");
            }
        }

        private String ToolNameField; 

        /// <summary>
        /// ToolClass property
        /// </summary>
		[StringLength(64)]
        [Description("A value categorizing a logging tool. The classification system used in WITSML is the one from the PWLS group.  NOTE: This should turn into an extensible enumeration before WITSML is released")]
		[XmlElement("ToolClass")]
        public String ToolClass {
            get {
                return ToolClassField;
            } 
            set {
                ToolClassField = value;
                NotifyPropertyChanged("ToolClass");
            }
        }

        private String ToolClassField; 

        /// <summary>
        /// Derivation property
        /// </summary>
		[Description("Indicates that the channel is derived from one or more other channels")]
		[XmlElement("Derivation")]
        public ChannelDerivation? Derivation {
            get {
                return DerivationField;
            } 
            set {
                DerivationField = value;
             if(value!=null) 
                 this.DerivationSpecified = true;
                NotifyPropertyChanged("Derivation");
            }
        }

        private ChannelDerivation? DerivationField; 

        /// <summary>
        /// DerivationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DerivationSpecified {
            get {
                return DerivationSpecifiedField;
            } 
            set {
                DerivationSpecifiedField = value;
                NotifyPropertyChanged("DerivationSpecified");
            }
        }

        private Boolean DerivationSpecifiedField; 

        /// <summary>
        /// LoggingMethod property
        /// </summary>
		[Description("Defines where the log channel gets its data from: LWD, MWD, wireline; or whether it is computed, etc.")]
		[XmlElement("LoggingMethod")]
        public LoggingMethod? LoggingMethod {
            get {
                return LoggingMethodField;
            } 
            set {
                LoggingMethodField = value;
             if(value!=null) 
                 this.LoggingMethodSpecified = true;
                NotifyPropertyChanged("LoggingMethod");
            }
        }

        private LoggingMethod? LoggingMethodField; 

        /// <summary>
        /// LoggingMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean LoggingMethodSpecified {
            get {
                return LoggingMethodSpecifiedField;
            } 
            set {
                LoggingMethodSpecifiedField = value;
                NotifyPropertyChanged("LoggingMethodSpecified");
            }
        }

        private Boolean LoggingMethodSpecifiedField; 

        /// <summary>
        /// NominalHoleSize property
        /// </summary>
		[Description("The nominal hole size at the time the measurement tool was in the hole. The size is \"nominal\" to indicate that this is not the result of a caliper reading or other direct measurement of the hoe size, but is just a name used to refer to the diameter. This is normally the bit size.  In a case where there are more than one diameter hole being drilled at the same time (like where a reamer is behind the bit) this diameter is the one which was seen by the sensor which produced a particular log channel.")]
        [ComponentElement]
		[XmlElement("NominalHoleSize")]
        public LengthMeasureExt NominalHoleSize {
            get {
                return NominalHoleSizeField;
            } 
            set {
                NominalHoleSizeField = value;
                NotifyPropertyChanged("NominalHoleSize");
            }
        }

        private LengthMeasureExt NominalHoleSizeField; 

        /// <summary>
        /// PointMetadata property
        /// </summary>
		[RecurringElement]
		[XmlElement("PointMetadata")]
        public List<PointMetadata> PointMetadata {
            get {
                return PointMetadataField;
            } 
            set {
                PointMetadataField = value;
                NotifyPropertyChanged("PointMetadata");
            }
        }

         [XmlIgnore]
         public bool PointMetadataSpecified
         {
            get {
             if(PointMetadataField!=null)
                return PointMetadataField.Count>0?true:false;
             else return false;
            } 
         }
        private List<PointMetadata> PointMetadataField; 

        /// <summary>
        /// DerivedFrom property
        /// </summary>
		[RecurringElement]
		[XmlElement("DerivedFrom")]
        public List<DataObjectReference> DerivedFrom {
            get {
                return DerivedFromField;
            } 
            set {
                DerivedFromField = value;
                NotifyPropertyChanged("DerivedFrom");
            }
        }

         [XmlIgnore]
         public bool DerivedFromSpecified
         {
            get {
             if(DerivedFromField!=null)
                return DerivedFromField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DataObjectReference> DerivedFromField; 

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [RecurringElement]
		[XmlElement("Index")]
        public List<ChannelIndex> Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

         [XmlIgnore]
         public bool IndexSpecified
         {
            get {
             if(IndexField!=null)
                return IndexField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ChannelIndex> IndexField; 

        /// <summary>
        /// Parent property
        /// </summary>
		[ComponentElement]
		[XmlElement("Parent")]
        public AbstractObject Parent {
            get {
                return ParentField;
            } 
            set {
                ParentField = value;
                NotifyPropertyChanged("Parent");
            }
        }

        private AbstractObject ParentField; 


    } //here

    /// <summary>
    /// This class represents the BhaRun xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the BhaRun xsd type.")]
    public partial class BhaRun : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimStart property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that activities started.")]
		[XmlElement("DTimStart")]
        public String DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private String DTimStartField; 

        /// <summary>
        /// DTimStop property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time that activities stopped.")]
		[XmlElement("DTimStop")]
        public String DateTimeStop {
            get {
                return DTimStopField;
            } 
            set {
                DTimStopField = value;
                NotifyPropertyChanged("DateTimeStop");
            }
        }

        private String DTimStopField; 

        /// <summary>
        /// DTimStartDrilling property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Start on bottom - date and time.")]
		[XmlElement("DTimStartDrilling")]
        public String DateTimeStartDrilling {
            get {
                return DTimStartDrillingField;
            } 
            set {
                DTimStartDrillingField = value;
                NotifyPropertyChanged("DateTimeStartDrilling");
            }
        }

        private String DTimStartDrillingField; 

        /// <summary>
        /// DTimStopDrilling property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Start off bottom - date and time.")]
		[XmlElement("DTimStopDrilling")]
        public String DateTimeStopDrilling {
            get {
                return DTimStopDrillingField;
            } 
            set {
                DTimStopDrillingField = value;
                NotifyPropertyChanged("DateTimeStopDrilling");
            }
        }

        private String DTimStopDrillingField; 

        /// <summary>
        /// PlanDogleg property
        /// </summary>
		[Description("Planned dogleg severity.")]
        [ComponentElement]
		[XmlElement("PlanDogleg")]
        public AnglePerLengthMeasure PlanDogleg {
            get {
                return PlanDoglegField;
            } 
            set {
                PlanDoglegField = value;
                NotifyPropertyChanged("PlanDogleg");
            }
        }

        private AnglePerLengthMeasure PlanDoglegField; 

        /// <summary>
        /// ActDogleg property
        /// </summary>
		[Description("Actual dogleg severity.")]
        [ComponentElement]
		[XmlElement("ActDogleg")]
        public AnglePerLengthMeasure ActDogleg {
            get {
                return ActDoglegField;
            } 
            set {
                ActDoglegField = value;
                NotifyPropertyChanged("ActDogleg");
            }
        }

        private AnglePerLengthMeasure ActDoglegField; 

        /// <summary>
        /// ActDoglegMx property
        /// </summary>
		[Description("Actual dogleg severity - Maximum.")]
        [ComponentElement]
		[XmlElement("ActDoglegMx")]
        public AnglePerLengthMeasure ActDoglegMax {
            get {
                return ActDoglegMxField;
            } 
            set {
                ActDoglegMxField = value;
                NotifyPropertyChanged("ActDoglegMax");
            }
        }

        private AnglePerLengthMeasure ActDoglegMxField; 

        /// <summary>
        /// StatusBha property
        /// </summary>
		[Description("Bottom hole assembly status.")]
		[XmlElement("StatusBha")]
        public BhaStatus? StatusBha {
            get {
                return StatusBhaField;
            } 
            set {
                StatusBhaField = value;
             if(value!=null) 
                 this.StatusBhaSpecified = true;
                NotifyPropertyChanged("StatusBha");
            }
        }

        private BhaStatus? StatusBhaField; 

        /// <summary>
        /// StatusBhaSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StatusBhaSpecified {
            get {
                return StatusBhaSpecifiedField;
            } 
            set {
                StatusBhaSpecifiedField = value;
                NotifyPropertyChanged("StatusBhaSpecified");
            }
        }

        private Boolean StatusBhaSpecifiedField; 

        /// <summary>
        /// NumBitRun property
        /// </summary>
		[Description("Bit run number.")]
		[XmlElement("NumBitRun")]
        public Int32? NumBitRun {
            get {
                return NumBitRunField;
            } 
            set {
                NumBitRunField = value;
             if(value!=null) 
                 this.NumBitRunSpecified = true;
                NotifyPropertyChanged("NumBitRun");
            }
        }

        private Int32? NumBitRunField; 

        /// <summary>
        /// NumBitRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumBitRunSpecified {
            get {
                return NumBitRunSpecifiedField;
            } 
            set {
                NumBitRunSpecifiedField = value;
                NotifyPropertyChanged("NumBitRunSpecified");
            }
        }

        private Boolean NumBitRunSpecifiedField; 

        /// <summary>
        /// NumStringRun property
        /// </summary>
		[Description("The BHA (drilling string) run number.")]
		[XmlElement("NumStringRun")]
        public Int32? NumStringRun {
            get {
                return NumStringRunField;
            } 
            set {
                NumStringRunField = value;
             if(value!=null) 
                 this.NumStringRunSpecified = true;
                NotifyPropertyChanged("NumStringRun");
            }
        }

        private Int32? NumStringRunField; 

        /// <summary>
        /// NumStringRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumStringRunSpecified {
            get {
                return NumStringRunSpecifiedField;
            } 
            set {
                NumStringRunSpecifiedField = value;
                NotifyPropertyChanged("NumStringRunSpecified");
            }
        }

        private Boolean NumStringRunSpecifiedField; 

        /// <summary>
        /// ReasonTrip property
        /// </summary>
		[StringLength(2000)]
        [Description("Reason for trip.")]
		[XmlElement("ReasonTrip")]
        public String ReasonTrip {
            get {
                return ReasonTripField;
            } 
            set {
                ReasonTripField = value;
                NotifyPropertyChanged("ReasonTrip");
            }
        }

        private String ReasonTripField; 

        /// <summary>
        /// ObjectiveBha property
        /// </summary>
		[StringLength(2000)]
        [Description("Objective of bottom hole assembly.")]
		[XmlElement("ObjectiveBha")]
        public String ObjectiveBha {
            get {
                return ObjectiveBhaField;
            } 
            set {
                ObjectiveBhaField = value;
                NotifyPropertyChanged("ObjectiveBha");
            }
        }

        private String ObjectiveBhaField; 

        /// <summary>
        /// DrillingParams property
        /// </summary>
		[RecurringElement]
		[XmlElement("DrillingParams")]
        public List<DrillingParams> DrillingParams {
            get {
                return DrillingParamsField;
            } 
            set {
                DrillingParamsField = value;
                NotifyPropertyChanged("DrillingParams");
            }
        }

         [XmlIgnore]
         public bool DrillingParamsSpecified
         {
            get {
             if(DrillingParamsField!=null)
                return DrillingParamsField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillingParams> DrillingParamsField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// Tubular property
        /// </summary>
		[ComponentElement]
		[XmlElement("Tubular")]
        public DataObjectReference Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private DataObjectReference TubularField; 


    } //here

    /// <summary>
    /// This class represents the FluidsReport xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the FluidsReport xsd type.")]
    public partial class FluidsReport : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[Required]
        [RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time the information is related to.")]
		[XmlElement("DTim")]
        public String DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private String DTimField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Required]
        [Description("Along hole measured depth of measurement from the drill datum.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("Vertical depth of the measurements.")]
        [ComponentElement]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// NumReport property
        /// </summary>
		[Description("Fluids report number.")]
		[XmlElement("NumReport")]
        public Int32? NumReport {
            get {
                return NumReportField;
            } 
            set {
                NumReportField = value;
             if(value!=null) 
                 this.NumReportSpecified = true;
                NotifyPropertyChanged("NumReport");
            }
        }

        private Int32? NumReportField; 

        /// <summary>
        /// NumReportSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean NumReportSpecified {
            get {
                return NumReportSpecifiedField;
            } 
            set {
                NumReportSpecifiedField = value;
                NotifyPropertyChanged("NumReportSpecified");
            }
        }

        private Boolean NumReportSpecifiedField; 

        /// <summary>
        /// Fluid property
        /// </summary>
		[RecurringElement]
		[XmlElement("Fluid")]
        public List<Fluid> Fluid {
            get {
                return FluidField;
            } 
            set {
                FluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

         [XmlIgnore]
         public bool FluidSpecified
         {
            get {
             if(FluidField!=null)
                return FluidField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Fluid> FluidField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the DrillReport xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the DrillReport xsd type.")]
    public partial class DrillReport : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Required]
        [RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of the start of the reporting period.")]
		[XmlElement("DTimStart")]
        public String DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private String DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Required]
        [RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time end of the reporting period. Report periods are commonly 24 hour periods.")]
		[XmlElement("DTimEnd")]
        public String DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private String DTimEndField; 

        /// <summary>
        /// VersionKind property
        /// </summary>
		[Description("The kind of report version. For example, a  preliminary version.")]
		[XmlElement("VersionKind")]
        public OpsReportVersion? VersionKind {
            get {
                return VersionKindField;
            } 
            set {
                VersionKindField = value;
             if(value!=null) 
                 this.VersionKindSpecified = true;
                NotifyPropertyChanged("VersionKind");
            }
        }

        private OpsReportVersion? VersionKindField; 

        /// <summary>
        /// VersionKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean VersionKindSpecified {
            get {
                return VersionKindSpecifiedField;
            } 
            set {
                VersionKindSpecifiedField = value;
                NotifyPropertyChanged("VersionKindSpecified");
            }
        }

        private Boolean VersionKindSpecifiedField; 

        /// <summary>
        /// CreateDate property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("The date and time of the report creation. A later timestamp indicates a newer version. In order to update values in a report a full  updated copy of the original report should be submitted.")]
		[XmlElement("CreateDate")]
        public String CreateDate {
            get {
                return CreateDateField;
            } 
            set {
                CreateDateField = value;
                NotifyPropertyChanged("CreateDate");
            }
        }

        private String CreateDateField; 

        /// <summary>
        /// WellDatum property
        /// </summary>
		[Description("Defines a vertical datum used for  measured depths, vertical depths or elevations. This must be specified if one of the aforementioned coordinate values are included in the report. This only applies to this report and is generally a copy of the same information from the well object.")]
        [RecurringElement]
		[XmlElement("WellDatum")]
        public List<WellDatum> WellDatum {
            get {
                return WellDatumField;
            } 
            set {
                WellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

         [XmlIgnore]
         public bool WellDatumSpecified
         {
            get {
             if(WellDatumField!=null)
                return WellDatumField.Count>0?true:false;
             else return false;
            } 
         }
        private List<WellDatum> WellDatumField; 

        /// <summary>
        /// BitRecord property
        /// </summary>
		[Description("Information about a bit.")]
        [RecurringElement]
		[XmlElement("BitRecord")]
        public List<BitRecord> BitRecord {
            get {
                return BitRecordField;
            } 
            set {
                BitRecordField = value;
                NotifyPropertyChanged("BitRecord");
            }
        }

         [XmlIgnore]
         public bool BitRecordSpecified
         {
            get {
             if(BitRecordField!=null)
                return BitRecordField.Count>0?true:false;
             else return false;
            } 
         }
        private List<BitRecord> BitRecordField; 

        /// <summary>
        /// DrillActivity property
        /// </summary>
		[RecurringElement]
		[XmlElement("DrillActivity")]
        public List<DrillActivity> DrillActivity {
            get {
                return DrillActivityField;
            } 
            set {
                DrillActivityField = value;
                NotifyPropertyChanged("DrillActivity");
            }
        }

         [XmlIgnore]
         public bool DrillActivitySpecified
         {
            get {
             if(DrillActivityField!=null)
                return DrillActivityField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillActivity> DrillActivityField; 

        /// <summary>
        /// LogInfo property
        /// </summary>
		[RecurringElement]
		[XmlElement("LogInfo")]
        public List<DrillReportLogInfo> LogInfo {
            get {
                return LogInfoField;
            } 
            set {
                LogInfoField = value;
                NotifyPropertyChanged("LogInfo");
            }
        }

         [XmlIgnore]
         public bool LogInfoSpecified
         {
            get {
             if(LogInfoField!=null)
                return LogInfoField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportLogInfo> LogInfoField; 

        /// <summary>
        /// CoreInfo property
        /// </summary>
		[RecurringElement]
		[XmlElement("CoreInfo")]
        public List<DrillReportCoreInfo> CoreInfo {
            get {
                return CoreInfoField;
            } 
            set {
                CoreInfoField = value;
                NotifyPropertyChanged("CoreInfo");
            }
        }

         [XmlIgnore]
         public bool CoreInfoSpecified
         {
            get {
             if(CoreInfoField!=null)
                return CoreInfoField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportCoreInfo> CoreInfoField; 

        /// <summary>
        /// WellTestInfo property
        /// </summary>
		[RecurringElement]
		[XmlElement("WellTestInfo")]
        public List<DrillReportWellTestInfo> WellTestInfo {
            get {
                return WellTestInfoField;
            } 
            set {
                WellTestInfoField = value;
                NotifyPropertyChanged("WellTestInfo");
            }
        }

         [XmlIgnore]
         public bool WellTestInfoSpecified
         {
            get {
             if(WellTestInfoField!=null)
                return WellTestInfoField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportWellTestInfo> WellTestInfoField; 

        /// <summary>
        /// FormTestInfo property
        /// </summary>
		[RecurringElement]
		[XmlElement("FormTestInfo")]
        public List<DrillReportFormTestInfo> FormTestInfo {
            get {
                return FormTestInfoField;
            } 
            set {
                FormTestInfoField = value;
                NotifyPropertyChanged("FormTestInfo");
            }
        }

         [XmlIgnore]
         public bool FormTestInfoSpecified
         {
            get {
             if(FormTestInfoField!=null)
                return FormTestInfoField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportFormTestInfo> FormTestInfoField; 

        /// <summary>
        /// LithShowInfo property
        /// </summary>
		[RecurringElement]
		[XmlElement("LithShowInfo")]
        public List<DrillReportLithShowInfo> LithShowInfo {
            get {
                return LithShowInfoField;
            } 
            set {
                LithShowInfoField = value;
                NotifyPropertyChanged("LithShowInfo");
            }
        }

         [XmlIgnore]
         public bool LithShowInfoSpecified
         {
            get {
             if(LithShowInfoField!=null)
                return LithShowInfoField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportLithShowInfo> LithShowInfoField; 

        /// <summary>
        /// EquipFailureInfo property
        /// </summary>
		[RecurringElement]
		[XmlElement("EquipFailureInfo")]
        public List<DrillReportEquipFailureInfo> EquipFailureInfo {
            get {
                return EquipFailureInfoField;
            } 
            set {
                EquipFailureInfoField = value;
                NotifyPropertyChanged("EquipFailureInfo");
            }
        }

         [XmlIgnore]
         public bool EquipFailureInfoSpecified
         {
            get {
             if(EquipFailureInfoField!=null)
                return EquipFailureInfoField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportEquipFailureInfo> EquipFailureInfoField; 

        /// <summary>
        /// ControlIncidentInfo property
        /// </summary>
		[RecurringElement]
		[XmlElement("ControlIncidentInfo")]
        public List<DrillReportControlIncidentInfo> ControlIncidentInfo {
            get {
                return ControlIncidentInfoField;
            } 
            set {
                ControlIncidentInfoField = value;
                NotifyPropertyChanged("ControlIncidentInfo");
            }
        }

         [XmlIgnore]
         public bool ControlIncidentInfoSpecified
         {
            get {
             if(ControlIncidentInfoField!=null)
                return ControlIncidentInfoField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportControlIncidentInfo> ControlIncidentInfoField; 

        /// <summary>
        /// StratInfo property
        /// </summary>
		[RecurringElement]
		[XmlElement("StratInfo")]
        public List<DrillReportStratInfo> StratInfo {
            get {
                return StratInfoField;
            } 
            set {
                StratInfoField = value;
                NotifyPropertyChanged("StratInfo");
            }
        }

         [XmlIgnore]
         public bool StratInfoSpecified
         {
            get {
             if(StratInfoField!=null)
                return StratInfoField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportStratInfo> StratInfoField; 

        /// <summary>
        /// PerfInfo property
        /// </summary>
		[RecurringElement]
		[XmlElement("PerfInfo")]
        public List<DrillReportPerfInfo> PerfInfo {
            get {
                return PerfInfoField;
            } 
            set {
                PerfInfoField = value;
                NotifyPropertyChanged("PerfInfo");
            }
        }

         [XmlIgnore]
         public bool PerfInfoSpecified
         {
            get {
             if(PerfInfoField!=null)
                return PerfInfoField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportPerfInfo> PerfInfoField; 

        /// <summary>
        /// GasReadingInfo property
        /// </summary>
		[RecurringElement]
		[XmlElement("GasReadingInfo")]
        public List<DrillReportGasReadingInfo> GasReadingInfo {
            get {
                return GasReadingInfoField;
            } 
            set {
                GasReadingInfoField = value;
                NotifyPropertyChanged("GasReadingInfo");
            }
        }

         [XmlIgnore]
         public bool GasReadingInfoSpecified
         {
            get {
             if(GasReadingInfoField!=null)
                return GasReadingInfoField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportGasReadingInfo> GasReadingInfoField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// WellAlias property
        /// </summary>
		[ComponentElement]
		[XmlElement("WellAlias")]
        public ObjectAlias WellAlias {
            get {
                return WellAliasField;
            } 
            set {
                WellAliasField = value;
                NotifyPropertyChanged("WellAlias");
            }
        }

        private ObjectAlias WellAliasField; 

        /// <summary>
        /// WellboreAlias property
        /// </summary>
		[RecurringElement]
		[XmlElement("WellboreAlias")]
        public List<ObjectAlias> WellboreAlias {
            get {
                return WellboreAliasField;
            } 
            set {
                WellboreAliasField = value;
                NotifyPropertyChanged("WellboreAlias");
            }
        }

         [XmlIgnore]
         public bool WellboreAliasSpecified
         {
            get {
             if(WellboreAliasField!=null)
                return WellboreAliasField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ObjectAlias> WellboreAliasField; 

        /// <summary>
        /// WellboreInfo property
        /// </summary>
		[ComponentElement]
		[XmlElement("WellboreInfo")]
        public DrillReportWellboreInfo WellboreInfo {
            get {
                return WellboreInfoField;
            } 
            set {
                WellboreInfoField = value;
                NotifyPropertyChanged("WellboreInfo");
            }
        }

        private DrillReportWellboreInfo WellboreInfoField; 

        /// <summary>
        /// StatusInfo property
        /// </summary>
		[RecurringElement]
		[XmlElement("StatusInfo")]
        public List<DrillReportStatusInfo> StatusInfo {
            get {
                return StatusInfoField;
            } 
            set {
                StatusInfoField = value;
                NotifyPropertyChanged("StatusInfo");
            }
        }

         [XmlIgnore]
         public bool StatusInfoSpecified
         {
            get {
             if(StatusInfoField!=null)
                return StatusInfoField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportStatusInfo> StatusInfoField; 

        /// <summary>
        /// Fluid property
        /// </summary>
		[RecurringElement]
		[XmlElement("Fluid")]
        public List<Fluid> Fluid {
            get {
                return FluidField;
            } 
            set {
                FluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

         [XmlIgnore]
         public bool FluidSpecified
         {
            get {
             if(FluidField!=null)
                return FluidField.Count>0?true:false;
             else return false;
            } 
         }
        private List<Fluid> FluidField; 

        /// <summary>
        /// PorePressure property
        /// </summary>
		[RecurringElement]
		[XmlElement("PorePressure")]
        public List<DrillReportPorePressure> PorePressure {
            get {
                return PorePressureField;
            } 
            set {
                PorePressureField = value;
                NotifyPropertyChanged("PorePressure");
            }
        }

         [XmlIgnore]
         public bool PorePressureSpecified
         {
            get {
             if(PorePressureField!=null)
                return PorePressureField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportPorePressure> PorePressureField; 

        /// <summary>
        /// ExtendedReport property
        /// </summary>
		[ComponentElement]
		[XmlElement("ExtendedReport")]
        public TimestampedCommentString ExtendedReport {
            get {
                return ExtendedReportField;
            } 
            set {
                ExtendedReportField = value;
                NotifyPropertyChanged("ExtendedReport");
            }
        }

        private TimestampedCommentString ExtendedReportField; 

        /// <summary>
        /// SurveyStation property
        /// </summary>
		[RecurringElement]
		[XmlElement("SurveyStation")]
        public List<DrillReportSurveyStation> SurveyStation {
            get {
                return SurveyStationField;
            } 
            set {
                SurveyStationField = value;
                NotifyPropertyChanged("SurveyStation");
            }
        }

         [XmlIgnore]
         public bool SurveyStationSpecified
         {
            get {
             if(SurveyStationField!=null)
                return SurveyStationField.Count>0?true:false;
             else return false;
            } 
         }
        private List<DrillReportSurveyStation> SurveyStationField; 


    } //here

    /// <summary>
    /// This class represents the Tubular xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Tubular xsd type.")]
    public partial class Tubular : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// TypeTubularAssy property
        /// </summary>
		[Required]
        [Description("Type of tubular assembly.")]
		[XmlElement("TypeTubularAssy")]
        public TubularAssembly? TypeTubularAssy {
            get {
                return TypeTubularAssyField;
            } 
            set {
                TypeTubularAssyField = value;
                NotifyPropertyChanged("TypeTubularAssy");
            }
        }

        private TubularAssembly? TypeTubularAssyField; 

        /// <summary>
        /// ValveFloat property
        /// </summary>
		[Description("Is float valve present?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("ValveFloat")]
        public Boolean? ValveFloat {
            get {
                return ValveFloatField;
            } 
            set {
                ValveFloatField = value;
             if(value!=null) 
                 this.ValveFloatSpecified = true;
                NotifyPropertyChanged("ValveFloat");
            }
        }

        private Boolean? ValveFloatField; 

        /// <summary>
        /// ValveFloatSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ValveFloatSpecified {
            get {
                return ValveFloatSpecifiedField;
            } 
            set {
                ValveFloatSpecifiedField = value;
                NotifyPropertyChanged("ValveFloatSpecified");
            }
        }

        private Boolean ValveFloatSpecifiedField; 

        /// <summary>
        /// SourceNuclear property
        /// </summary>
		[Description("Is nuclear tool present?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
		[XmlElement("SourceNuclear")]
        public Boolean? SourceNuclear {
            get {
                return SourceNuclearField;
            } 
            set {
                SourceNuclearField = value;
             if(value!=null) 
                 this.SourceNuclearSpecified = true;
                NotifyPropertyChanged("SourceNuclear");
            }
        }

        private Boolean? SourceNuclearField; 

        /// <summary>
        /// SourceNuclearSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean SourceNuclearSpecified {
            get {
                return SourceNuclearSpecifiedField;
            } 
            set {
                SourceNuclearSpecifiedField = value;
                NotifyPropertyChanged("SourceNuclearSpecified");
            }
        }

        private Boolean SourceNuclearSpecifiedField; 

        /// <summary>
        /// DiaHoleAssy property
        /// </summary>
		[Description("Maximum hole size generated by assembly.")]
        [ComponentElement]
		[XmlElement("DiaHoleAssy")]
        public LengthMeasure DiaHoleAssy {
            get {
                return DiaHoleAssyField;
            } 
            set {
                DiaHoleAssyField = value;
                NotifyPropertyChanged("DiaHoleAssy");
            }
        }

        private LengthMeasure DiaHoleAssyField; 

        /// <summary>
        /// TubularComponent property
        /// </summary>
		[RecurringElement]
		[XmlElement("TubularComponent")]
        public List<TubularComponent> TubularComponent {
            get {
                return TubularComponentField;
            } 
            set {
                TubularComponentField = value;
                NotifyPropertyChanged("TubularComponent");
            }
        }

         [XmlIgnore]
         public bool TubularComponentSpecified
         {
            get {
             if(TubularComponentField!=null)
                return TubularComponentField.Count>0?true:false;
             else return false;
            } 
         }
        private List<TubularComponent> TubularComponentField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the Attachment xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Attachment xsd type.")]
    public partial class Attachment : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Category property
        /// </summary>
		[StringLength(64)]
        [Description("This element is used to tell what the object is when you have multiple attachments of the same file type. E.g. if we have attached a picture of cuttings on a specific depth, one could like to tag it with *Category=\"CuttingsPicture\"")]
		[XmlElement("Category")]
        public String Category {
            get {
                return CategoryField;
            } 
            set {
                CategoryField = value;
                NotifyPropertyChanged("Category");
            }
        }

        private String CategoryField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("Along hole measured depth represented by the attachment.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Param property
        /// </summary>
		[Description("Any extra numeric data. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.")]
        [RecurringElement]
		[XmlElement("Param")]
        public List<ExtensionNameValue> Param {
            get {
                return ParamField;
            } 
            set {
                ParamField = value;
                NotifyPropertyChanged("Param");
            }
        }

         [XmlIgnore]
         public bool ParamSpecified
         {
            get {
             if(ParamField!=null)
                return ParamField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ExtensionNameValue> ParamField; 

        /// <summary>
        /// MdBit property
        /// </summary>
		[Description("Along hole measured depth of the bit.")]
        [ComponentElement]
		[XmlElement("MdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return MdBitField;
            } 
            set {
                MdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord MdBitField; 

        /// <summary>
        /// FileName property
        /// </summary>
		[StringLength(64)]
        [Description("A file name associated with the attachment. Note this is not a file path and should contain a name only.")]
		[XmlElement("FileName")]
        public String FileName {
            get {
                return FileNameField;
            } 
            set {
                FileNameField = value;
                NotifyPropertyChanged("FileName");
            }
        }

        private String FileNameField; 

        /// <summary>
        /// FileType property
        /// </summary>
		[StringLength(64)]
        [Description("The file type. This field SHOULD be a registered mime type as cataloged at http://www.iana.org/assignments/media-types/media-types.xhtml.")]
		[XmlElement("FileType")]
        public String FileType {
            get {
                return FileTypeField;
            } 
            set {
                FileTypeField = value;
                NotifyPropertyChanged("FileType");
            }
        }

        private String FileTypeField; 

        /// <summary>
        /// Content property
        /// </summary>
		[Required]
        [Description("The actual attachment content.")]
        [RecurringElement]
		[XmlElement("Content", DataType="base64Binary")]
        public Byte[] Content {
            get {
                return ContentField;
            } 
            set {
                ContentField = value;
                NotifyPropertyChanged("Content");
            }
        }

         [XmlIgnore]
         public bool ContentSpecified
         {
            get {
             if(ContentField!=null)
                return ContentField.Length>0?true:false;
             else return false;
            } 
         }
        private Byte[] ContentField; 

        /// <summary>
        /// ObjectReference property
        /// </summary>
		[Description("A reference to an object that is defined within the context of the specified wellbore.")]
        [ComponentElement]
		[XmlElement("ObjectReference")]
        public DataObjectReference ObjectReference {
            get {
                return ObjectReferenceField;
            } 
            set {
                ObjectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private DataObjectReference ObjectReferenceField; 

        /// <summary>
        /// SubObjectReference property
        /// </summary>
		[StringLength(64)]
        [Description("A reference to an sub-object that is defined within the context of the object referenced by objectReference. This should only refer to recurring components of a growing object. The content is the Uid of the sub object.")]
		[XmlElement("SubObjectReference")]
        public String SubObjectReference {
            get {
                return SubObjectReferenceField;
            } 
            set {
                SubObjectReferenceField = value;
                NotifyPropertyChanged("SubObjectReference");
            }
        }

        private String SubObjectReferenceField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the Wellbore xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Wellbore xsd type.")]
    public partial class Wellbore : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Number property
        /// </summary>
		[StringLength(64)]
        [Description("Operator borehole number.")]
		[XmlElement("Number")]
        public String Number {
            get {
                return NumberField;
            } 
            set {
                NumberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private String NumberField; 

        /// <summary>
        /// SuffixAPI property
        /// </summary>
		[StringLength(64)]
        [Description("API suffix.")]
		[XmlElement("SuffixAPI")]
        public String SuffixAPI {
            get {
                return SuffixAPIField;
            } 
            set {
                SuffixAPIField = value;
                NotifyPropertyChanged("SuffixAPI");
            }
        }

        private String SuffixAPIField; 

        /// <summary>
        /// NumGovt property
        /// </summary>
		[StringLength(64)]
        [Description("Government assigned number.")]
		[XmlElement("NumGovt")]
        public String NumGovt {
            get {
                return NumGovtField;
            } 
            set {
                NumGovtField = value;
                NotifyPropertyChanged("NumGovt");
            }
        }

        private String NumGovtField; 

        /// <summary>
        /// StatusWellbore property
        /// </summary>
		[Description("POSC wellbore status.")]
		[XmlElement("StatusWellbore")]
        public WellStatus? StatusWellbore {
            get {
                return StatusWellboreField;
            } 
            set {
                StatusWellboreField = value;
             if(value!=null) 
                 this.StatusWellboreSpecified = true;
                NotifyPropertyChanged("StatusWellbore");
            }
        }

        private WellStatus? StatusWellboreField; 

        /// <summary>
        /// StatusWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StatusWellboreSpecified {
            get {
                return StatusWellboreSpecifiedField;
            } 
            set {
                StatusWellboreSpecifiedField = value;
                NotifyPropertyChanged("StatusWellboreSpecified");
            }
        }

        private Boolean StatusWellboreSpecifiedField; 

        /// <summary>
        /// IsActive property
        /// </summary>
		[Description("True (=\"1\" or \"true\") indicates that the wellbore is active. False (=\"0\" or \"false\") indicates otherwise. It is the servers responsibility to  set this value based on its available internal data (e.g., what objects are changing).")]
		[XmlElement("IsActive")]
        public Boolean? IsActive {
            get {
                return IsActiveField;
            } 
            set {
                IsActiveField = value;
             if(value!=null) 
                 this.IsActiveSpecified = true;
                NotifyPropertyChanged("IsActive");
            }
        }

        private Boolean? IsActiveField; 

        /// <summary>
        /// IsActiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean IsActiveSpecified {
            get {
                return IsActiveSpecifiedField;
            } 
            set {
                IsActiveSpecifiedField = value;
                NotifyPropertyChanged("IsActiveSpecified");
            }
        }

        private Boolean IsActiveSpecifiedField; 

        /// <summary>
        /// PurposeWellbore property
        /// </summary>
		[Description("POSC wellbore purpose.")]
		[XmlElement("PurposeWellbore")]
        public WellPurpose? PurposeWellbore {
            get {
                return PurposeWellboreField;
            } 
            set {
                PurposeWellboreField = value;
             if(value!=null) 
                 this.PurposeWellboreSpecified = true;
                NotifyPropertyChanged("PurposeWellbore");
            }
        }

        private WellPurpose? PurposeWellboreField; 

        /// <summary>
        /// PurposeWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PurposeWellboreSpecified {
            get {
                return PurposeWellboreSpecifiedField;
            } 
            set {
                PurposeWellboreSpecifiedField = value;
                NotifyPropertyChanged("PurposeWellboreSpecified");
            }
        }

        private Boolean PurposeWellboreSpecifiedField; 

        /// <summary>
        /// TypeWellbore property
        /// </summary>
		[Description("Type of wellbore.")]
		[XmlElement("TypeWellbore")]
        public WellboreType? TypeWellbore {
            get {
                return TypeWellboreField;
            } 
            set {
                TypeWellboreField = value;
             if(value!=null) 
                 this.TypeWellboreSpecified = true;
                NotifyPropertyChanged("TypeWellbore");
            }
        }

        private WellboreType? TypeWellboreField; 

        /// <summary>
        /// TypeWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean TypeWellboreSpecified {
            get {
                return TypeWellboreSpecifiedField;
            } 
            set {
                TypeWellboreSpecifiedField = value;
                NotifyPropertyChanged("TypeWellboreSpecified");
            }
        }

        private Boolean TypeWellboreSpecifiedField; 

        /// <summary>
        /// Shape property
        /// </summary>
		[Description("POSC wellbore trajectory shape.")]
		[XmlElement("Shape")]
        public WellboreShape? Shape {
            get {
                return ShapeField;
            } 
            set {
                ShapeField = value;
             if(value!=null) 
                 this.ShapeSpecified = true;
                NotifyPropertyChanged("Shape");
            }
        }

        private WellboreShape? ShapeField; 

        /// <summary>
        /// ShapeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean ShapeSpecified {
            get {
                return ShapeSpecifiedField;
            } 
            set {
                ShapeSpecifiedField = value;
                NotifyPropertyChanged("ShapeSpecified");
            }
        }

        private Boolean ShapeSpecifiedField; 

        /// <summary>
        /// DTimKickoff property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time of wellbore kickoff.")]
		[XmlElement("DTimKickoff")]
        public String DateTimeKickoff {
            get {
                return DTimKickoffField;
            } 
            set {
                DTimKickoffField = value;
                NotifyPropertyChanged("DateTimeKickoff");
            }
        }

        private String DTimKickoffField; 

        /// <summary>
        /// AchievedTD property
        /// </summary>
		[Description("True (\"true\" of \"1\") indicates that the wellbore has  acheieved total depth. That is, drilling has completed. False (\"false\" or \"0\") indicates otherwise.  Not given indicates that it is not known whether total depth has been reached.")]
		[XmlElement("AchievedTD")]
        public Boolean? AchievedTD {
            get {
                return AchievedTDField;
            } 
            set {
                AchievedTDField = value;
             if(value!=null) 
                 this.AchievedTDSpecified = true;
                NotifyPropertyChanged("AchievedTD");
            }
        }

        private Boolean? AchievedTDField; 

        /// <summary>
        /// AchievedTDSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean AchievedTDSpecified {
            get {
                return AchievedTDSpecifiedField;
            } 
            set {
                AchievedTDSpecifiedField = value;
                NotifyPropertyChanged("AchievedTDSpecified");
            }
        }

        private Boolean AchievedTDSpecifiedField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("The measured depth of the borehole.  If status is plugged, indicates the maximum depth reached before plugging. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("The  true vertical depth of the borehole.   If status is plugged, indicates the maximum depth reached before plugging.  It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// MdBit property
        /// </summary>
		[Description("The measured depth of the bit.  If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
		[XmlElement("MdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return MdBitField;
            } 
            set {
                MdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord MdBitField; 

        /// <summary>
        /// TvdBit property
        /// </summary>
		[Description("The true vertical depth of the bit. If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
		[XmlElement("TvdBit")]
        public WellVerticalDepthCoord TvdBit {
            get {
                return TvdBitField;
            } 
            set {
                TvdBitField = value;
                NotifyPropertyChanged("TvdBit");
            }
        }

        private WellVerticalDepthCoord TvdBitField; 

        /// <summary>
        /// MdKickoff property
        /// </summary>
		[Description("Kickoff measured depth of the wellbore.")]
        [ComponentElement]
		[XmlElement("MdKickoff")]
        public MeasuredDepthCoord MDKickoff {
            get {
                return MdKickoffField;
            } 
            set {
                MdKickoffField = value;
                NotifyPropertyChanged("MDKickoff");
            }
        }

        private MeasuredDepthCoord MdKickoffField; 

        /// <summary>
        /// TvdKickoff property
        /// </summary>
		[Description("Kickoff true vertical depth of the wellbore.")]
        [ComponentElement]
		[XmlElement("TvdKickoff")]
        public WellVerticalDepthCoord TvdKickoff {
            get {
                return TvdKickoffField;
            } 
            set {
                TvdKickoffField = value;
                NotifyPropertyChanged("TvdKickoff");
            }
        }

        private WellVerticalDepthCoord TvdKickoffField; 

        /// <summary>
        /// MdPlanned property
        /// </summary>
		[Description("Planned measured depth for the wellbore total depth.")]
        [ComponentElement]
		[XmlElement("MdPlanned")]
        public MeasuredDepthCoord MDPlanned {
            get {
                return MdPlannedField;
            } 
            set {
                MdPlannedField = value;
                NotifyPropertyChanged("MDPlanned");
            }
        }

        private MeasuredDepthCoord MdPlannedField; 

        /// <summary>
        /// TvdPlanned property
        /// </summary>
		[Description("Planned true vertical depth for the wellbore total depth.")]
        [ComponentElement]
		[XmlElement("TvdPlanned")]
        public WellVerticalDepthCoord TvdPlanned {
            get {
                return TvdPlannedField;
            } 
            set {
                TvdPlannedField = value;
                NotifyPropertyChanged("TvdPlanned");
            }
        }

        private WellVerticalDepthCoord TvdPlannedField; 

        /// <summary>
        /// MdSubSeaPlanned property
        /// </summary>
		[Description("Planned measured for the wellbore total depth - with respect to seabed.")]
        [ComponentElement]
		[XmlElement("MdSubSeaPlanned")]
        public MeasuredDepthCoord MDSubSeaPlanned {
            get {
                return MdSubSeaPlannedField;
            } 
            set {
                MdSubSeaPlannedField = value;
                NotifyPropertyChanged("MDSubSeaPlanned");
            }
        }

        private MeasuredDepthCoord MdSubSeaPlannedField; 

        /// <summary>
        /// TvdSubSeaPlanned property
        /// </summary>
		[Description("Planned true vertical depth for the wellbore total depth - with respect to seabed.")]
        [ComponentElement]
		[XmlElement("TvdSubSeaPlanned")]
        public WellVerticalDepthCoord TvdSubSeaPlanned {
            get {
                return TvdSubSeaPlannedField;
            } 
            set {
                TvdSubSeaPlannedField = value;
                NotifyPropertyChanged("TvdSubSeaPlanned");
            }
        }

        private WellVerticalDepthCoord TvdSubSeaPlannedField; 

        /// <summary>
        /// DayTarget property
        /// </summary>
		[Description("Target days for drilling wellbore.")]
        [ComponentElement]
		[XmlElement("DayTarget")]
        public TimeMeasure DayTarget {
            get {
                return DayTargetField;
            } 
            set {
                DayTargetField = value;
                NotifyPropertyChanged("DayTarget");
            }
        }

        private TimeMeasure DayTargetField; 

        /// <summary>
        /// Well property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("Well")]
        public DataObjectReference Well {
            get {
                return WellField;
            } 
            set {
                WellField = value;
                NotifyPropertyChanged("Well");
            }
        }

        private DataObjectReference WellField; 

        /// <summary>
        /// ParentWellbore property
        /// </summary>
		[ComponentElement]
		[XmlElement("ParentWellbore")]
        public DataObjectReference ParentWellbore {
            get {
                return ParentWellboreField;
            } 
            set {
                ParentWellboreField = value;
                NotifyPropertyChanged("ParentWellbore");
            }
        }

        private DataObjectReference ParentWellboreField; 


    } //here

    /// <summary>
    /// This class represents the Well xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Well xsd type.")]
    public partial class Well : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// NameLegal property
        /// </summary>
		[StringLength(64)]
        [Description("Legal name of the well.")]
		[XmlElement("NameLegal")]
        public String NameLegal {
            get {
                return NameLegalField;
            } 
            set {
                NameLegalField = value;
                NotifyPropertyChanged("NameLegal");
            }
        }

        private String NameLegalField; 

        /// <summary>
        /// NumLicense property
        /// </summary>
		[StringLength(64)]
        [Description("License number of the well.")]
		[XmlElement("NumLicense")]
        public String NumLicense {
            get {
                return NumLicenseField;
            } 
            set {
                NumLicenseField = value;
                NotifyPropertyChanged("NumLicense");
            }
        }

        private String NumLicenseField; 

        /// <summary>
        /// NumGovt property
        /// </summary>
		[StringLength(64)]
        [Description("Government assigned well number.")]
		[XmlElement("NumGovt")]
        public String NumGovt {
            get {
                return NumGovtField;
            } 
            set {
                NumGovtField = value;
                NotifyPropertyChanged("NumGovt");
            }
        }

        private String NumGovtField; 

        /// <summary>
        /// DTimLicense property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time license  was issued.")]
		[XmlElement("DTimLicense")]
        public String DateTimeLicense {
            get {
                return DTimLicenseField;
            } 
            set {
                DTimLicenseField = value;
                NotifyPropertyChanged("DateTimeLicense");
            }
        }

        private String DTimLicenseField; 

        /// <summary>
        /// Field property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the field in which the well is located.")]
		[XmlElement("Field")]
        public String Field {
            get {
                return FieldField;
            } 
            set {
                FieldField = value;
                NotifyPropertyChanged("Field");
            }
        }

        private String FieldField; 

        /// <summary>
        /// Country property
        /// </summary>
		[StringLength(64)]
        [Description("Country in which well is located.")]
		[XmlElement("Country")]
        public String Country {
            get {
                return CountryField;
            } 
            set {
                CountryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private String CountryField; 

        /// <summary>
        /// State property
        /// </summary>
		[StringLength(64)]
        [Description("State or province in which well is located.")]
		[XmlElement("State")]
        public String State {
            get {
                return StateField;
            } 
            set {
                StateField = value;
                NotifyPropertyChanged("State");
            }
        }

        private String StateField; 

        /// <summary>
        /// County property
        /// </summary>
		[StringLength(64)]
        [Description("County in which the well is located.")]
		[XmlElement("County")]
        public String County {
            get {
                return CountyField;
            } 
            set {
                CountyField = value;
                NotifyPropertyChanged("County");
            }
        }

        private String CountyField; 

        /// <summary>
        /// Region property
        /// </summary>
		[StringLength(64)]
        [Description("Geo-political region.")]
		[XmlElement("Region")]
        public String Region {
            get {
                return RegionField;
            } 
            set {
                RegionField = value;
                NotifyPropertyChanged("Region");
            }
        }

        private String RegionField; 

        /// <summary>
        /// District property
        /// </summary>
		[StringLength(64)]
        [Description("Geo-political district name.")]
		[XmlElement("District")]
        public String District {
            get {
                return DistrictField;
            } 
            set {
                DistrictField = value;
                NotifyPropertyChanged("District");
            }
        }

        private String DistrictField; 

        /// <summary>
        /// Block property
        /// </summary>
		[StringLength(64)]
        [Description("Block name in which well is located.")]
		[XmlElement("Block")]
        public String Block {
            get {
                return BlockField;
            } 
            set {
                BlockField = value;
                NotifyPropertyChanged("Block");
            }
        }

        private String BlockField; 

        /// <summary>
        /// TimeZone property
        /// </summary>
		[Required]
        [RegularExpression("[Z]|([\\-+](([01][0-9])|(2[0-3])):[0-5][0-9])")]
        [StringLength(64)]
        [Description("The time zone in which well is located.   It is the deviation in hours and minutes from UTC. This should be the normal time zone at the well and not a seasonally  adjusted value such as daylight savings time.")]
		[XmlElement("TimeZone")]
        public String TimeZone {
            get {
                return TimeZoneField;
            } 
            set {
                TimeZoneField = value;
                NotifyPropertyChanged("TimeZone");
            }
        }

        private String TimeZoneField; 

        /// <summary>
        /// Operator property
        /// </summary>
		[StringLength(64)]
        [Description("Operator company name.")]
		[XmlElement("Operator")]
        public String Operator {
            get {
                return OperatorField;
            } 
            set {
                OperatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private String OperatorField; 

        /// <summary>
        /// OperatorDiv property
        /// </summary>
		[StringLength(64)]
        [Description("Division of operator company.")]
		[XmlElement("OperatorDiv")]
        public String OperatorDivision {
            get {
                return OperatorDivField;
            } 
            set {
                OperatorDivField = value;
                NotifyPropertyChanged("OperatorDivision");
            }
        }

        private String OperatorDivField; 

        /// <summary>
        /// OriginalOperator property
        /// </summary>
		[StringLength(64)]
        [Description("Original operator of the well. This may be different than the current operator.")]
		[XmlElement("OriginalOperator")]
        public String OriginalOperator {
            get {
                return OriginalOperatorField;
            } 
            set {
                OriginalOperatorField = value;
                NotifyPropertyChanged("OriginalOperator");
            }
        }

        private String OriginalOperatorField; 

        /// <summary>
        /// PcInterest property
        /// </summary>
		[Description("Interest for Operator. Commonly in percent.")]
        [ComponentElement]
		[XmlElement("PcInterest")]
        public DimensionlessMeasure PercentInterest {
            get {
                return PcInterestField;
            } 
            set {
                PcInterestField = value;
                NotifyPropertyChanged("PercentInterest");
            }
        }

        private DimensionlessMeasure PcInterestField; 

        /// <summary>
        /// NumAPI property
        /// </summary>
		[StringLength(64)]
        [Description("American Petroleum Institute well number.")]
		[XmlElement("NumAPI")]
        public String NumAPI {
            get {
                return NumAPIField;
            } 
            set {
                NumAPIField = value;
                NotifyPropertyChanged("NumAPI");
            }
        }

        private String NumAPIField; 

        /// <summary>
        /// StatusWell property
        /// </summary>
		[Description("POSC Well status.")]
		[XmlElement("StatusWell")]
        public WellStatus? StatusWell {
            get {
                return StatusWellField;
            } 
            set {
                StatusWellField = value;
             if(value!=null) 
                 this.StatusWellSpecified = true;
                NotifyPropertyChanged("StatusWell");
            }
        }

        private WellStatus? StatusWellField; 

        /// <summary>
        /// StatusWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean StatusWellSpecified {
            get {
                return StatusWellSpecifiedField;
            } 
            set {
                StatusWellSpecifiedField = value;
                NotifyPropertyChanged("StatusWellSpecified");
            }
        }

        private Boolean StatusWellSpecifiedField; 

        /// <summary>
        /// PurposeWell property
        /// </summary>
		[Description("POSC well purpose.")]
		[XmlElement("PurposeWell")]
        public WellPurpose? PurposeWell {
            get {
                return PurposeWellField;
            } 
            set {
                PurposeWellField = value;
             if(value!=null) 
                 this.PurposeWellSpecified = true;
                NotifyPropertyChanged("PurposeWell");
            }
        }

        private WellPurpose? PurposeWellField; 

        /// <summary>
        /// PurposeWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean PurposeWellSpecified {
            get {
                return PurposeWellSpecifiedField;
            } 
            set {
                PurposeWellSpecifiedField = value;
                NotifyPropertyChanged("PurposeWellSpecified");
            }
        }

        private Boolean PurposeWellSpecifiedField; 

        /// <summary>
        /// FluidWell property
        /// </summary>
		[Description("POSC well fluid. The type of fluid being produced from or injected  into a well facility.")]
		[XmlElement("FluidWell")]
        public WellFluid? FluidWell {
            get {
                return FluidWellField;
            } 
            set {
                FluidWellField = value;
             if(value!=null) 
                 this.FluidWellSpecified = true;
                NotifyPropertyChanged("FluidWell");
            }
        }

        private WellFluid? FluidWellField; 

        /// <summary>
        /// FluidWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean FluidWellSpecified {
            get {
                return FluidWellSpecifiedField;
            } 
            set {
                FluidWellSpecifiedField = value;
                NotifyPropertyChanged("FluidWellSpecified");
            }
        }

        private Boolean FluidWellSpecifiedField; 

        /// <summary>
        /// DirectionWell property
        /// </summary>
		[Description("POSC well direction. The direction of flow of the fluids in a well facility (generally, injected or produced, or some combination).")]
		[XmlElement("DirectionWell")]
        public WellDirection? DirectionWell {
            get {
                return DirectionWellField;
            } 
            set {
                DirectionWellField = value;
             if(value!=null) 
                 this.DirectionWellSpecified = true;
                NotifyPropertyChanged("DirectionWell");
            }
        }

        private WellDirection? DirectionWellField; 

        /// <summary>
        /// DirectionWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public Boolean DirectionWellSpecified {
            get {
                return DirectionWellSpecifiedField;
            } 
            set {
                DirectionWellSpecifiedField = value;
                NotifyPropertyChanged("DirectionWellSpecified");
            }
        }

        private Boolean DirectionWellSpecifiedField; 

        /// <summary>
        /// DTimSpud property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time at which well was spudded.")]
		[XmlElement("DTimSpud")]
        public String DateTimeSpud {
            get {
                return DTimSpudField;
            } 
            set {
                DTimSpudField = value;
                NotifyPropertyChanged("DateTimeSpud");
            }
        }

        private String DTimSpudField; 

        /// <summary>
        /// DTimPa property
        /// </summary>
		[RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date and time at which well was plugged and abandoned.")]
		[XmlElement("DTimPa")]
        public String DateTimePluggedAndAbandoned {
            get {
                return DTimPaField;
            } 
            set {
                DTimPaField = value;
                NotifyPropertyChanged("DateTimePluggedAndAbandoned");
            }
        }

        private String DTimPaField; 

        /// <summary>
        /// WaterDepth property
        /// </summary>
		[Description("Depth of water (not land rigs).")]
        [ComponentElement]
		[XmlElement("WaterDepth")]
        public LengthMeasure WaterDepth {
            get {
                return WaterDepthField;
            } 
            set {
                WaterDepthField = value;
                NotifyPropertyChanged("WaterDepth");
            }
        }

        private LengthMeasure WaterDepthField; 

        /// <summary>
        /// GeographicLocationWGS84 property
        /// </summary>
		[Description("The latitude (in coordinate1) and longitude (in coordinate2) of the well location in the WGS84 coordinate system (equivalent to EPSG:4326). Units are in decimal degrees.")]
        [ComponentElement]
		[XmlElement("GeographicLocationWGS84")]
        public GeodeticWellLocation GeographicLocationWGS84 {
            get {
                return GeographicLocationWGS84Field;
            } 
            set {
                GeographicLocationWGS84Field = value;
                NotifyPropertyChanged("GeographicLocationWGS84");
            }
        }

        private GeodeticWellLocation GeographicLocationWGS84Field; 

        /// <summary>
        /// WellLocation property
        /// </summary>
		[RecurringElement]
		[XmlElement("WellLocation")]
        public List<AbstractWellLocation> WellLocation {
            get {
                return WellLocationField;
            } 
            set {
                WellLocationField = value;
                NotifyPropertyChanged("WellLocation");
            }
        }

         [XmlIgnore]
         public bool WellLocationSpecified
         {
            get {
             if(WellLocationField!=null)
                return WellLocationField.Count>0?true:false;
             else return false;
            } 
         }
        private List<AbstractWellLocation> WellLocationField; 

        /// <summary>
        /// WellPublicLandSurveySystemLocation property
        /// </summary>
		[ComponentElement]
		[XmlElement("WellPublicLandSurveySystemLocation")]
        public PublicLandSurveySystem WellPublicLandSurveySystemLocation {
            get {
                return WellPublicLandSurveySystemLocationField;
            } 
            set {
                WellPublicLandSurveySystemLocationField = value;
                NotifyPropertyChanged("WellPublicLandSurveySystemLocation");
            }
        }

        private PublicLandSurveySystem WellPublicLandSurveySystemLocationField; 

        /// <summary>
        /// ReferencePoint property
        /// </summary>
		[RecurringElement]
		[XmlElement("ReferencePoint")]
        public List<ReferencePoint> ReferencePoint {
            get {
                return ReferencePointField;
            } 
            set {
                ReferencePointField = value;
                NotifyPropertyChanged("ReferencePoint");
            }
        }

         [XmlIgnore]
         public bool ReferencePointSpecified
         {
            get {
             if(ReferencePointField!=null)
                return ReferencePointField.Count>0?true:false;
             else return false;
            } 
         }
        private List<ReferencePoint> ReferencePointField; 

        /// <summary>
        /// WellheadElevation property
        /// </summary>
		[ComponentElement]
		[XmlElement("WellheadElevation")]
        public WellElevationCoord WellheadElevation {
            get {
                return WellheadElevationField;
            } 
            set {
                WellheadElevationField = value;
                NotifyPropertyChanged("WellheadElevation");
            }
        }

        private WellElevationCoord WellheadElevationField; 

        /// <summary>
        /// WellDatum property
        /// </summary>
		[RecurringElement]
		[XmlElement("WellDatum")]
        public List<WellDatum> WellDatum {
            get {
                return WellDatumField;
            } 
            set {
                WellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

         [XmlIgnore]
         public bool WellDatumSpecified
         {
            get {
             if(WellDatumField!=null)
                return WellDatumField.Count>0?true:false;
             else return false;
            } 
         }
        private List<WellDatum> WellDatumField; 

        /// <summary>
        /// GroundElevation property
        /// </summary>
		[ComponentElement]
		[XmlElement("GroundElevation")]
        public WellElevationCoord GroundElevation {
            get {
                return GroundElevationField;
            } 
            set {
                GroundElevationField = value;
                NotifyPropertyChanged("GroundElevation");
            }
        }

        private WellElevationCoord GroundElevationField; 


    } //here

    /// <summary>
    /// This class represents the DataAssuranceRecord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[Description("This class represents the DataAssuranceRecord xsd type.")]
    public partial class DataAssuranceRecord : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// PolicyId property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Identifier of the policy whose conformance is being described.")]
		[XmlElement("PolicyId")]
        public String PolicyId {
            get {
                return PolicyIdField;
            } 
            set {
                PolicyIdField = value;
                NotifyPropertyChanged("PolicyId");
            }
        }

        private String PolicyIdField; 

        /// <summary>
        /// PolicyName property
        /// </summary>
		[StringLength(2000)]
        [Description("Human-readable name of the policy")]
		[XmlElement("PolicyName")]
        public String PolicyName {
            get {
                return PolicyNameField;
            } 
            set {
                PolicyNameField = value;
                NotifyPropertyChanged("PolicyName");
            }
        }

        private String PolicyNameField; 

        /// <summary>
        /// ReferencedElementName property
        /// </summary>
		[StringLength(64)]
        [Description("If the Policy applies to a single element within the referenced data object this attribute holds its element name.")]
		[XmlElement("ReferencedElementName")]
        public String ReferencedElementName {
            get {
                return ReferencedElementNameField;
            } 
            set {
                ReferencedElementNameField = value;
                NotifyPropertyChanged("ReferencedElementName");
            }
        }

        private String ReferencedElementNameField; 

        /// <summary>
        /// ReferencedElementUid property
        /// </summary>
		[StringLength(64)]
        [Description("If the Policy applies to a single occurrence of a recurring element within the referenced data object this attribute holds its uid.  The name of the recurring element would be in the ReferencedElementName.")]
		[XmlElement("ReferencedElementUid")]
        public String ReferencedElementUid {
            get {
                return ReferencedElementUidField;
            } 
            set {
                ReferencedElementUidField = value;
                NotifyPropertyChanged("ReferencedElementUid");
            }
        }

        private String ReferencedElementUidField; 

        /// <summary>
        /// Origin property
        /// </summary>
		[Required]
        [Description("Agent which checked the data for conformance with the policy. This could be a person or an automated computer process or any number of other things.")]
		[XmlElement("Origin")]
        public String Origin {
            get {
                return OriginField;
            } 
            set {
                OriginField = value;
                NotifyPropertyChanged("Origin");
            }
        }

        private String OriginField; 

        /// <summary>
        /// Conformance property
        /// </summary>
		[Required]
        [Description("Yes/no flag indicating whether this particular data ???? conforms with the policy or not.")]
		[XmlElement("Conformance")]
        public Boolean? Conformance {
            get {
                return ConformanceField;
            } 
            set {
                ConformanceField = value;
                NotifyPropertyChanged("Conformance");
            }
        }

        private Boolean? ConformanceField; 

        /// <summary>
        /// Date property
        /// </summary>
		[Required]
        [RegularExpression(".+T.+[Z+\\-].*")]
        [Description("Date the policy was last checked. This is the date for which the Conformance value is valid.")]
		[XmlElement("Date")]
        public String Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                NotifyPropertyChanged("Date");
            }
        }

        private String DateField; 

        /// <summary>
        /// Comment property
        /// </summary>
		
		[XmlElement("Comment")]
        public String Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private String CommentField; 

        /// <summary>
        /// IndexRange property
        /// </summary>
		[ComponentElement]
		[XmlElement("IndexRange")]
        public IndexRange IndexRange {
            get {
                return IndexRangeField;
            } 
            set {
                IndexRangeField = value;
                NotifyPropertyChanged("IndexRange");
            }
        }

        private IndexRange IndexRangeField; 

        /// <summary>
        /// FailingRules property
        /// </summary>
		[RecurringElement]
		[XmlElement("FailingRules")]
        public List<FailingRule> FailingRules {
            get {
                return FailingRulesField;
            } 
            set {
                FailingRulesField = value;
                NotifyPropertyChanged("FailingRules");
            }
        }

         [XmlIgnore]
         public bool FailingRulesSpecified
         {
            get {
             if(FailingRulesField!=null)
                return FailingRulesField.Count>0?true:false;
             else return false;
            } 
         }
        private List<FailingRule> FailingRulesField; 

        /// <summary>
        /// ReferencedData property
        /// </summary>
		[Required]
        [ComponentElement]
		[XmlElement("ReferencedData")]
        public DataObjectReference ReferencedData {
            get {
                return ReferencedDataField;
            } 
            set {
                ReferencedDataField = value;
                NotifyPropertyChanged("ReferencedData");
            }
        }

        private DataObjectReference ReferencedDataField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalCrs xsd type.")]
    public partial class VerticalCrs : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Direction property
        /// </summary>
		
		[XmlElement("Direction")]
        public VerticalDirection? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                NotifyPropertyChanged("Direction");
            }
        }

        private VerticalDirection? DirectionField; 

        /// <summary>
        /// AbstractVerticalCrs property
        /// </summary>
		
		[XmlElement("AbstractVerticalCrs")]
        public AbstractVerticalCrs AbstractVerticalCrs {
            get {
                return AbstractVerticalCrsField;
            } 
            set {
                AbstractVerticalCrsField = value;
                NotifyPropertyChanged("AbstractVerticalCrs");
            }
        }

        private AbstractVerticalCrs AbstractVerticalCrsField; 

		/// <summary>
        /// uom property
        /// </summary>
		
        [XmlAttribute("uom")]
		
        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticCrs xsd type.")]
    public partial class GeodeticCrs : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractGeodeticCrs property
        /// </summary>
		
		[XmlElement("AbstractGeodeticCrs")]
        public AbstractGeodeticCrs AbstractGeodeticCrs {
            get {
                return AbstractGeodeticCrsField;
            } 
            set {
                AbstractGeodeticCrsField = value;
                NotifyPropertyChanged("AbstractGeodeticCrs");
            }
        }

        private AbstractGeodeticCrs AbstractGeodeticCrsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedCrs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedCrs xsd type.")]
    public partial class ProjectedCrs : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// AxisOrder property
        /// </summary>
		
		[XmlElement("AxisOrder")]
        public AxisOrder2d? AxisOrder {
            get {
                return AxisOrderField;
            } 
            set {
                AxisOrderField = value;
                NotifyPropertyChanged("AxisOrder");
            }
        }

        private AxisOrder2d? AxisOrderField; 

        /// <summary>
        /// AbstractProjectedCrs property
        /// </summary>
		
		[XmlElement("AbstractProjectedCrs")]
        public AbstractProjectedCrs AbstractProjectedCrs {
            get {
                return AbstractProjectedCrsField;
            } 
            set {
                AbstractProjectedCrsField = value;
                NotifyPropertyChanged("AbstractProjectedCrs");
            }
        }

        private AbstractProjectedCrs AbstractProjectedCrsField; 

		/// <summary>
        /// uom property
        /// </summary>
		
        [XmlAttribute("uom")]
		
        public String Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private String uomField; 


    } //here
    }

    /// <summary>
    /// This class represents the PropertyKindDictionary xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[Description("This class represents the PropertyKindDictionary xsd type.")]
    public partial class PropertyKindDictionary : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// PropertyKind property
        /// </summary>
		[Required]
        [Description("Defines which property kind are contained into a property kind dictionary.")]
        [RecurringElement]
		[XmlElement("PropertyKind")]
        public List<PropertyKind> PropertyKind {
            get {
                return PropertyKindField;
            } 
            set {
                PropertyKindField = value;
                NotifyPropertyChanged("PropertyKind");
            }
        }

         [XmlIgnore]
         public bool PropertyKindSpecified
         {
            get {
             if(PropertyKindField!=null)
                return PropertyKindField.Count>0?true:false;
             else return false;
            } 
         }
        private List<PropertyKind> PropertyKindField; 


    } //here

    /// <summary>
    /// This class represents the PropertyKind xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[Description("This class represents the PropertyKind xsd type.")]
    public partial class PropertyKind : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// QuantityClass property
        /// </summary>
		[Required]
        [Description("A reference to the name of a quantity class in the Energistics Unit of Measure Dictionary. If there is no match in the Energistics Unit of Measure Dictionary, then this attribute is purely for human information.")]
		[XmlElement("QuantityClass")]
        public QuantityClassKind? QuantityClass {
            get {
                return QuantityClassField;
            } 
            set {
                QuantityClassField = value;
                NotifyPropertyChanged("QuantityClass");
            }
        }

        private QuantityClassKind? QuantityClassField; 

        /// <summary>
        /// Parent property
        /// </summary>
		[Description("Indicates the parent of this property kind. BUSINESS RULE : Only the top root abstract property kind has not to define a parent property kind.")]
        [ComponentElement]
		[XmlElement("Parent")]
        public DataObjectReference Parent {
            get {
                return ParentField;
            } 
            set {
                ParentField = value;
                NotifyPropertyChanged("Parent");
            }
        }

        private DataObjectReference ParentField; 


    } //here

    /// <summary>
    /// This class represents the EpcExternalPartReference xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[Description("This class represents the EpcExternalPartReference xsd type.")]
    public partial class EpcExternalPartReference : AbstractObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Filename property
        /// </summary>
		[Required]
        [StringLength(2000)]
		[XmlElement("Filename")]
        public String Filename {
            get {
                return FilenameField;
            } 
            set {
                FilenameField = value;
                NotifyPropertyChanged("Filename");
            }
        }

        private String FilenameField; 

        /// <summary>
        /// MimeType property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("IAMF registered, if one exists, or a free text field. Needs documentation on seismic especially.  MIME type for HDF proxy is : application/x-hdf5 (by RESQML convention).")]
		[XmlElement("MimeType")]
        public String MimeType {
            get {
                return MimeTypeField;
            } 
            set {
                MimeTypeField = value;
                NotifyPropertyChanged("MimeType");
            }
        }

        private String MimeTypeField; 


    } //here

    #endregion

    #region Enumerations
    namespace ReferenceData {
        /// <summary>
        /// This class represents the LengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthUom xsd enumeration.")]
        public enum LengthUom 
        {
        /// <summary>
        /// Item01ft property
        /// </summary>
          [XmlEnum("0.1 ft")]
          Item01ft,
        /// <summary>
        /// Item01ftUS property
        /// </summary>
          [XmlEnum("0.1 ft[US]")]
          Item01ftUS,
        /// <summary>
        /// Item01in property
        /// </summary>
          [XmlEnum("0.1 in")]
          Item01in,
        /// <summary>
        /// Item01yd property
        /// </summary>
          [XmlEnum("0.1 yd")]
          Item01yd,
        /// <summary>
        /// Item116in property
        /// </summary>
          [XmlEnum("1/16 in")]
          Item116in,
        /// <summary>
        /// Item12ft property
        /// </summary>
          [XmlEnum("1/2 ft")]
          Item12ft,
        /// <summary>
        /// Item132in property
        /// </summary>
          [XmlEnum("1/32 in")]
          Item132in,
        /// <summary>
        /// Item164in property
        /// </summary>
          [XmlEnum("1/64 in")]
          Item164in,
        /// <summary>
        /// Item10ft property
        /// </summary>
          [XmlEnum("10 ft")]
          Item10ft,
        /// <summary>
        /// Item10in property
        /// </summary>
          [XmlEnum("10 in")]
          Item10in,
        /// <summary>
        /// Item10km property
        /// </summary>
          [XmlEnum("10 km")]
          Item10km,
        /// <summary>
        /// Item100ft property
        /// </summary>
          [XmlEnum("100 ft")]
          Item100ft,
        /// <summary>
        /// Item100km property
        /// </summary>
          [XmlEnum("100 km")]
          Item100km,
        /// <summary>
        /// Item1000ft property
        /// </summary>
          [XmlEnum("1000 ft")]
          Item1000ft,
        /// <summary>
        /// Item30ft property
        /// </summary>
          [XmlEnum("30 ft")]
          Item30ft,
        /// <summary>
        /// Item30m property
        /// </summary>
          [XmlEnum("30 m")]
          Item30m,
        /// <summary>
        /// angstrom property
        /// </summary>
          angstrom,
        /// <summary>
        /// chain property
        /// </summary>
          chain,
        /// <summary>
        /// chainBnA property
        /// </summary>
          [XmlEnum("chain[BnA]")]
          chainBnA,
        /// <summary>
        /// chainBnB property
        /// </summary>
          [XmlEnum("chain[BnB]")]
          chainBnB,
        /// <summary>
        /// chainCla property
        /// </summary>
          [XmlEnum("chain[Cla]")]
          chainCla,
        /// <summary>
        /// chainInd37 property
        /// </summary>
          [XmlEnum("chain[Ind37]")]
          chainInd37,
        /// <summary>
        /// chainSe property
        /// </summary>
          [XmlEnum("chain[Se]")]
          chainSe,
        /// <summary>
        /// chainSeT property
        /// </summary>
          [XmlEnum("chain[SeT]")]
          chainSeT,
        /// <summary>
        /// chainUS property
        /// </summary>
          [XmlEnum("chain[US]")]
          chainUS,
        /// <summary>
        /// cm property
        /// </summary>
          cm,
        /// <summary>
        /// dam property
        /// </summary>
          dam,
        /// <summary>
        /// dm property
        /// </summary>
          dm,
        /// <summary>
        /// Em property
        /// </summary>
          Em,
        /// <summary>
        /// fathom property
        /// </summary>
          fathom,
        /// <summary>
        /// fm property
        /// </summary>
          fm,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// ftBnA property
        /// </summary>
          [XmlEnum("ft[BnA]")]
          ftBnA,
        /// <summary>
        /// ftBnB property
        /// </summary>
          [XmlEnum("ft[BnB]")]
          ftBnB,
        /// <summary>
        /// ftBr36 property
        /// </summary>
          [XmlEnum("ft[Br36]")]
          ftBr36,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ft[Br65]")]
          ftBr65,
        /// <summary>
        /// ftCla property
        /// </summary>
          [XmlEnum("ft[Cla]")]
          ftCla,
        /// <summary>
        /// ftGC property
        /// </summary>
          [XmlEnum("ft[GC]")]
          ftGC,
        /// <summary>
        /// ftInd property
        /// </summary>
          [XmlEnum("ft[Ind]")]
          ftInd,
        /// <summary>
        /// ftInd37 property
        /// </summary>
          [XmlEnum("ft[Ind37]")]
          ftInd37,
        /// <summary>
        /// ftInd62 property
        /// </summary>
          [XmlEnum("ft[Ind62]")]
          ftInd62,
        /// <summary>
        /// ftInd75 property
        /// </summary>
          [XmlEnum("ft[Ind75]")]
          ftInd75,
        /// <summary>
        /// ftSe property
        /// </summary>
          [XmlEnum("ft[Se]")]
          ftSe,
        /// <summary>
        /// ftSeT property
        /// </summary>
          [XmlEnum("ft[SeT]")]
          ftSeT,
        /// <summary>
        /// ftUS property
        /// </summary>
          [XmlEnum("ft[US]")]
          ftUS,
        /// <summary>
        /// furUS property
        /// </summary>
          [XmlEnum("fur[US]")]
          furUS,
        /// <summary>
        /// Gm property
        /// </summary>
          Gm,
        /// <summary>
        /// hm property
        /// </summary>
          hm,
        /// <summary>
        /// in property
        /// </summary>
          @in,
        /// <summary>
        /// inUS property
        /// </summary>
          [XmlEnum("in[US]")]
          inUS,
        /// <summary>
        /// km property
        /// </summary>
          km,
        /// <summary>
        /// link property
        /// </summary>
          link,
        /// <summary>
        /// linkBnA property
        /// </summary>
          [XmlEnum("link[BnA]")]
          linkBnA,
        /// <summary>
        /// linkBnB property
        /// </summary>
          [XmlEnum("link[BnB]")]
          linkBnB,
        /// <summary>
        /// linkCla property
        /// </summary>
          [XmlEnum("link[Cla]")]
          linkCla,
        /// <summary>
        /// linkSe property
        /// </summary>
          [XmlEnum("link[Se]")]
          linkSe,
        /// <summary>
        /// linkSeT property
        /// </summary>
          [XmlEnum("link[SeT]")]
          linkSeT,
        /// <summary>
        /// linkUS property
        /// </summary>
          [XmlEnum("link[US]")]
          linkUS,
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// mGer property
        /// </summary>
          [XmlEnum("m[Ger]")]
          mGer,
        /// <summary>
        /// mi property
        /// </summary>
          mi,
        /// <summary>
        /// minaut property
        /// </summary>
          [XmlEnum("mi[naut]")]
          minaut,
        /// <summary>
        /// minautUK property
        /// </summary>
          [XmlEnum("mi[nautUK]")]
          minautUK,
        /// <summary>
        /// miUS property
        /// </summary>
          [XmlEnum("mi[US]")]
          miUS,
        /// <summary>
        /// mil property
        /// </summary>
          mil,
        /// <summary>
        /// mm property
        /// </summary>
          mm,
        /// <summary>
        /// Mm property
        /// </summary>
          Mm,
        /// <summary>
        /// nm property
        /// </summary>
          nm,
        /// <summary>
        /// pm property
        /// </summary>
          pm,
        /// <summary>
        /// rodUS property
        /// </summary>
          [XmlEnum("rod[US]")]
          rodUS,
        /// <summary>
        /// Tm property
        /// </summary>
          Tm,
        /// <summary>
        /// um property
        /// </summary>
          um,
        /// <summary>
        /// yd property
        /// </summary>
          yd,
        /// <summary>
        /// ydBnA property
        /// </summary>
          [XmlEnum("yd[BnA]")]
          ydBnA,
        /// <summary>
        /// ydBnB property
        /// </summary>
          [XmlEnum("yd[BnB]")]
          ydBnB,
        /// <summary>
        /// ydCla property
        /// </summary>
          [XmlEnum("yd[Cla]")]
          ydCla,
        /// <summary>
        /// ydInd property
        /// </summary>
          [XmlEnum("yd[Ind]")]
          ydInd,
        /// <summary>
        /// ydInd37 property
        /// </summary>
          [XmlEnum("yd[Ind37]")]
          ydInd37,
        /// <summary>
        /// ydInd62 property
        /// </summary>
          [XmlEnum("yd[Ind62]")]
          ydInd62,
        /// <summary>
        /// ydInd75 property
        /// </summary>
          [XmlEnum("yd[Ind75]")]
          ydInd75,
        /// <summary>
        /// ydSe property
        /// </summary>
          [XmlEnum("yd[Se]")]
          ydSe,
        /// <summary>
        /// ydSeT property
        /// </summary>
          [XmlEnum("yd[SeT]")]
          ydSeT,
        /// <summary>
        /// ydUS property
        /// </summary>
          [XmlEnum("yd[US]")]
          ydUS
        }
        /// <summary>
        /// This class represents the ErrorTermSource xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ErrorTermSource xsd enumeration.")]
        public enum ErrorTermSource 
        {
        /// <summary>
        /// sensor property
        /// </summary>
          sensor,
        /// <summary>
        /// azimuthreference property
        /// </summary>
          [XmlEnum("azimuth reference")]
          azimuthreference,
        /// <summary>
        /// magnetic property
        /// </summary>
          magnetic,
        /// <summary>
        /// alignment property
        /// </summary>
          alignment,
        /// <summary>
        /// misalignment property
        /// </summary>
          misalignment,
        /// <summary>
        /// depth property
        /// </summary>
          depth,
        /// <summary>
        /// reference property
        /// </summary>
          reference,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the SurveyToolOperatingMode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the SurveyToolOperatingMode xsd enumeration.")]
        public enum SurveyToolOperatingMode 
        {
        /// <summary>
        /// continuousxy property
        /// </summary>
          [XmlEnum("continuous xy")]
          continuousxy,
        /// <summary>
        /// continuousxyz property
        /// </summary>
          [XmlEnum("continuous xyz")]
          continuousxyz,
        /// <summary>
        /// continuousz property
        /// </summary>
          [XmlEnum("continuous z")]
          continuousz,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// stationary property
        /// </summary>
          stationary
        }
        /// <summary>
        /// This class represents the StimJobDiversionMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimJobDiversionMethod xsd enumeration.")]
        public enum StimJobDiversionMethod 
        {
        /// <summary>
        /// ballsealer property
        /// </summary>
          [XmlEnum("ball sealer")]
          ballsealer,
        /// <summary>
        /// bands property
        /// </summary>
          bands,
        /// <summary>
        /// chemical property
        /// </summary>
          chemical,
        /// <summary>
        /// fibers property
        /// </summary>
          fibers,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// packer property
        /// </summary>
          packer,
        /// <summary>
        /// solidparticle property
        /// </summary>
          [XmlEnum("solid particle")]
          solidparticle,
        /// <summary>
        /// straddlepacker property
        /// </summary>
          [XmlEnum("straddle packer")]
          straddlepacker
        }
        /// <summary>
        /// This class represents the PermeabilityRockUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PermeabilityRockUom xsd enumeration.")]
        public enum PermeabilityRockUom 
        {
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// DAPI property
        /// </summary>
          [XmlEnum("D[API]")]
          DAPI,
        /// <summary>
        /// mD property
        /// </summary>
          mD,
        /// <summary>
        /// TDAPI property
        /// </summary>
          [XmlEnum("TD[API]")]
          TDAPI
        }
        /// <summary>
        /// This class represents the PressureUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureUom xsd enumeration.")]
        public enum PressureUom 
        {
        /// <summary>
        /// Item001lbfft2 property
        /// </summary>
          [XmlEnum("0.01 lbf/ft2")]
          Item001lbfft2,
        /// <summary>
        /// at property
        /// </summary>
          at,
        /// <summary>
        /// atm property
        /// </summary>
          atm,
        /// <summary>
        /// bar property
        /// </summary>
          bar,
        /// <summary>
        /// cmH2O4degC property
        /// </summary>
          [XmlEnum("cmH2O[4degC]")]
          cmH2O4degC,
        /// <summary>
        /// cPa property
        /// </summary>
          cPa,
        /// <summary>
        /// dPa property
        /// </summary>
          dPa,
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne/cm2")]
          dynecm2,
        /// <summary>
        /// EPa property
        /// </summary>
          EPa,
        /// <summary>
        /// fPa property
        /// </summary>
          fPa,
        /// <summary>
        /// GPa property
        /// </summary>
          GPa,
        /// <summary>
        /// hbar property
        /// </summary>
          hbar,
        /// <summary>
        /// inH2O39degF property
        /// </summary>
          [XmlEnum("inH2O[39degF]")]
          inH2O39degF,
        /// <summary>
        /// inH2O60degF property
        /// </summary>
          [XmlEnum("inH2O[60degF]")]
          inH2O60degF,
        /// <summary>
        /// inHg32degF property
        /// </summary>
          [XmlEnum("inHg[32degF]")]
          inHg32degF,
        /// <summary>
        /// inHg60degF property
        /// </summary>
          [XmlEnum("inHg[60degF]")]
          inHg60degF,
        /// <summary>
        /// kgfcm2 property
        /// </summary>
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        /// <summary>
        /// kgfm2 property
        /// </summary>
          [XmlEnum("kgf/m2")]
          kgfm2,
        /// <summary>
        /// kgfmm2 property
        /// </summary>
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN/m2")]
          kNm2,
        /// <summary>
        /// kPa property
        /// </summary>
          kPa,
        /// <summary>
        /// kpsi property
        /// </summary>
          kpsi,
        /// <summary>
        /// lbfft2 property
        /// </summary>
          [XmlEnum("lbf/ft2")]
          lbfft2,
        /// <summary>
        /// mbar property
        /// </summary>
          mbar,
        /// <summary>
        /// mmHg0degC property
        /// </summary>
          [XmlEnum("mmHg[0degC]")]
          mmHg0degC,
        /// <summary>
        /// mPa property
        /// </summary>
          mPa,
        /// <summary>
        /// MPa property
        /// </summary>
          MPa,
        /// <summary>
        /// Mpsi property
        /// </summary>
          Mpsi,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N/m2")]
          Nm2,
        /// <summary>
        /// Nmm2 property
        /// </summary>
          [XmlEnum("N/mm2")]
          Nmm2,
        /// <summary>
        /// nPa property
        /// </summary>
          nPa,
        /// <summary>
        /// Pa property
        /// </summary>
          Pa,
        /// <summary>
        /// pPa property
        /// </summary>
          pPa,
        /// <summary>
        /// psi property
        /// </summary>
          psi,
        /// <summary>
        /// tonfUKft2 property
        /// </summary>
          [XmlEnum("tonf[UK]/ft2")]
          tonfUKft2,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonf[US]/ft2")]
          tonfUSft2,
        /// <summary>
        /// tonfUSin2 property
        /// </summary>
          [XmlEnum("tonf[US]/in2")]
          tonfUSin2,
        /// <summary>
        /// torr property
        /// </summary>
          torr,
        /// <summary>
        /// TPa property
        /// </summary>
          TPa,
        /// <summary>
        /// ubar property
        /// </summary>
          ubar,
        /// <summary>
        /// umHg0degC property
        /// </summary>
          [XmlEnum("umHg[0degC]")]
          umHg0degC,
        /// <summary>
        /// uPa property
        /// </summary>
          uPa,
        /// <summary>
        /// upsi property
        /// </summary>
          upsi
        }
        /// <summary>
        /// This class represents the IsothermalCompressibilityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the IsothermalCompressibilityUom xsd enumeration.")]
        public enum IsothermalCompressibilityUom 
        {
        /// <summary>
        /// dm3kWh property
        /// </summary>
          [XmlEnum("dm3/(kW.h)")]
          dm3kWh,
        /// <summary>
        /// dm3MJ property
        /// </summary>
          [XmlEnum("dm3/MJ")]
          dm3MJ,
        /// <summary>
        /// m3kWh property
        /// </summary>
          [XmlEnum("m3/(kW.h)")]
          m3kWh,
        /// <summary>
        /// m3J property
        /// </summary>
          [XmlEnum("m3/J")]
          m3J,
        /// <summary>
        /// mm3J property
        /// </summary>
          [XmlEnum("mm3/J")]
          mm3J,
        /// <summary>
        /// ptUKhph property
        /// </summary>
          [XmlEnum("pt[UK]/(hp.h)")]
          ptUKhph
        }
        /// <summary>
        /// This class represents the DynamicViscosityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DynamicViscosityUom xsd enumeration.")]
        public enum DynamicViscosityUom 
        {
        /// <summary>
        /// cP property
        /// </summary>
          cP,
        /// <summary>
        /// dP property
        /// </summary>
          dP,
        /// <summary>
        /// dynescm2 property
        /// </summary>
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        /// <summary>
        /// EP property
        /// </summary>
          EP,
        /// <summary>
        /// fP property
        /// </summary>
          fP,
        /// <summary>
        /// GP property
        /// </summary>
          GP,
        /// <summary>
        /// kgfsm2 property
        /// </summary>
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        /// <summary>
        /// kP property
        /// </summary>
          kP,
        /// <summary>
        /// lbfsft2 property
        /// </summary>
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        /// <summary>
        /// lbfsin2 property
        /// </summary>
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        /// <summary>
        /// mP property
        /// </summary>
          mP,
        /// <summary>
        /// MP property
        /// </summary>
          MP,
        /// <summary>
        /// mPas property
        /// </summary>
          [XmlEnum("mPa.s")]
          mPas,
        /// <summary>
        /// Nsm2 property
        /// </summary>
          [XmlEnum("N.s/m2")]
          Nsm2,
        /// <summary>
        /// nP property
        /// </summary>
          nP,
        /// <summary>
        /// P property
        /// </summary>
          P,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas,
        /// <summary>
        /// pP property
        /// </summary>
          pP,
        /// <summary>
        /// psis property
        /// </summary>
          [XmlEnum("psi.s")]
          psis,
        /// <summary>
        /// TP property
        /// </summary>
          TP,
        /// <summary>
        /// uP property
        /// </summary>
          uP
        }
        /// <summary>
        /// This class represents the DimensionlessUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DimensionlessUom xsd enumeration.")]
        public enum DimensionlessUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// dEuc property
        /// </summary>
          dEuc,
        /// <summary>
        /// EEuc property
        /// </summary>
          EEuc,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// fEuc property
        /// </summary>
          fEuc,
        /// <summary>
        /// GEuc property
        /// </summary>
          GEuc,
        /// <summary>
        /// kEuc property
        /// </summary>
          kEuc,
        /// <summary>
        /// MEuc property
        /// </summary>
          MEuc,
        /// <summary>
        /// mEuc property
        /// </summary>
          mEuc,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// pEuc property
        /// </summary>
          pEuc,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// TEuc property
        /// </summary>
          TEuc,
        /// <summary>
        /// uEuc property
        /// </summary>
          uEuc
        }
        /// <summary>
        /// This class represents the VolumePerVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerVolumeUom xsd enumeration.")]
        public enum VolumePerVolumeUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// vol property
        /// </summary>
          [XmlEnum("%[vol]")]
          vol,
        /// <summary>
        /// Item0001bblft3 property
        /// </summary>
          [XmlEnum("0.001 bbl/ft3")]
          Item0001bblft3,
        /// <summary>
        /// Item0001bblm3 property
        /// </summary>
          [XmlEnum("0.001 bbl/m3")]
          Item0001bblm3,
        /// <summary>
        /// Item0001galUKbbl property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/bbl")]
          Item0001galUKbbl,
        /// <summary>
        /// Item0001galUKgalUK property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/gal[UK]")]
          Item0001galUKgalUK,
        /// <summary>
        /// Item0001galUSbbl property
        /// </summary>
          [XmlEnum("0.001 gal[US]/bbl")]
          Item0001galUSbbl,
        /// <summary>
        /// Item0001galUSft3 property
        /// </summary>
          [XmlEnum("0.001 gal[US]/ft3")]
          Item0001galUSft3,
        /// <summary>
        /// Item0001galUSgalUS property
        /// </summary>
          [XmlEnum("0.001 gal[US]/gal[US]")]
          Item0001galUSgalUS,
        /// <summary>
        /// Item0001ptUKbbl property
        /// </summary>
          [XmlEnum("0.001 pt[UK]/bbl")]
          Item0001ptUKbbl,
        /// <summary>
        /// Item001bblbbl property
        /// </summary>
          [XmlEnum("0.01 bbl/bbl")]
          Item001bblbbl,
        /// <summary>
        /// Item01galUSbbl property
        /// </summary>
          [XmlEnum("0.1 gal[US]/bbl")]
          Item01galUSbbl,
        /// <summary>
        /// Item01Lbbl property
        /// </summary>
          [XmlEnum("0.1 L/bbl")]
          Item01Lbbl,
        /// <summary>
        /// Item01ptUSbbl property
        /// </summary>
          [XmlEnum("0.1 pt[US]/bbl")]
          Item01ptUSbbl,
        /// <summary>
        /// Item1000ft3bbl property
        /// </summary>
          [XmlEnum("1000 ft3/bbl")]
          Item1000ft3bbl,
        /// <summary>
        /// Item1000m3m3 property
        /// </summary>
          [XmlEnum("1000 m3/m3")]
          Item1000m3m3,
        /// <summary>
        /// Item1E6acreftbbl property
        /// </summary>
          [XmlEnum("1E-6 acre.ft/bbl")]
          Item1E6acreftbbl,
        /// <summary>
        /// Item1E6bblft3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/ft3")]
          Item1E6bblft3,
        /// <summary>
        /// Item1E6bblm3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/m3")]
          Item1E6bblm3,
        /// <summary>
        /// Item1E6bblacreft property
        /// </summary>
          [XmlEnum("1E6 bbl/(acre.ft)")]
          Item1E6bblacreft,
        /// <summary>
        /// Item1E6ft3acreft property
        /// </summary>
          [XmlEnum("1E6 ft3/(acre.ft)")]
          Item1E6ft3acreft,
        /// <summary>
        /// Item1E6ft3bbl property
        /// </summary>
          [XmlEnum("1E6 ft3/bbl")]
          Item1E6ft3bbl,
        /// <summary>
        /// bblacreft property
        /// </summary>
          [XmlEnum("bbl/(acre.ft)")]
          bblacreft,
        /// <summary>
        /// bblbbl property
        /// </summary>
          [XmlEnum("bbl/bbl")]
          bblbbl,
        /// <summary>
        /// bblft3 property
        /// </summary>
          [XmlEnum("bbl/ft3")]
          bblft3,
        /// <summary>
        /// bblm3 property
        /// </summary>
          [XmlEnum("bbl/m3")]
          bblm3,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// cm3cm3 property
        /// </summary>
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        /// <summary>
        /// cm3L property
        /// </summary>
          [XmlEnum("cm3/L")]
          cm3L,
        /// <summary>
        /// cm3m3 property
        /// </summary>
          [XmlEnum("cm3/m3")]
          cm3m3,
        /// <summary>
        /// dm3m3 property
        /// </summary>
          [XmlEnum("dm3/m3")]
          dm3m3,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// ft3bbl property
        /// </summary>
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        /// <summary>
        /// ft3ft3 property
        /// </summary>
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        /// <summary>
        /// galUKft3 property
        /// </summary>
          [XmlEnum("gal[UK]/ft3")]
          galUKft3,
        /// <summary>
        /// galUSbbl property
        /// </summary>
          [XmlEnum("gal[US]/bbl")]
          galUSbbl,
        /// <summary>
        /// galUSft3 property
        /// </summary>
          [XmlEnum("gal[US]/ft3")]
          galUSft3,
        /// <summary>
        /// Lm3 property
        /// </summary>
          [XmlEnum("L/m3")]
          Lm3,
        /// <summary>
        /// m3ham property
        /// </summary>
          [XmlEnum("m3/(ha.m)")]
          m3ham,
        /// <summary>
        /// m3bbl property
        /// </summary>
          [XmlEnum("m3/bbl")]
          m3bbl,
        /// <summary>
        /// m3m3 property
        /// </summary>
          [XmlEnum("m3/m3")]
          m3m3,
        /// <summary>
        /// mLgalUK property
        /// </summary>
          [XmlEnum("mL/gal[UK]")]
          mLgalUK,
        /// <summary>
        /// mLgalUS property
        /// </summary>
          [XmlEnum("mL/gal[US]")]
          mLgalUS,
        /// <summary>
        /// mLmL property
        /// </summary>
          [XmlEnum("mL/mL")]
          mLmL,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// ppmvol property
        /// </summary>
          [XmlEnum("ppm[vol]")]
          ppmvol
        }
        /// <summary>
        /// This class represents the VolumePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerLengthUom xsd enumeration.")]
        public enum VolumePerLengthUom 
        {
        /// <summary>
        /// Item001dm3km property
        /// </summary>
          [XmlEnum("0.01 dm3/km")]
          Item001dm3km,
        /// <summary>
        /// Item001Lkm property
        /// </summary>
          [XmlEnum("0.01 L/km")]
          Item001Lkm,
        /// <summary>
        /// bblft property
        /// </summary>
          [XmlEnum("bbl/ft")]
          bblft,
        /// <summary>
        /// bblin property
        /// </summary>
          [XmlEnum("bbl/in")]
          bblin,
        /// <summary>
        /// bblmi property
        /// </summary>
          [XmlEnum("bbl/mi")]
          bblmi,
        /// <summary>
        /// dm3m property
        /// </summary>
          [XmlEnum("dm3/m")]
          dm3m,
        /// <summary>
        /// ft3ft property
        /// </summary>
          [XmlEnum("ft3/ft")]
          ft3ft,
        /// <summary>
        /// galUKmi property
        /// </summary>
          [XmlEnum("gal[UK]/mi")]
          galUKmi,
        /// <summary>
        /// galUSft property
        /// </summary>
          [XmlEnum("gal[US]/ft")]
          galUSft,
        /// <summary>
        /// galUSmi property
        /// </summary>
          [XmlEnum("gal[US]/mi")]
          galUSmi,
        /// <summary>
        /// in3ft property
        /// </summary>
          [XmlEnum("in3/ft")]
          in3ft,
        /// <summary>
        /// Lm property
        /// </summary>
          [XmlEnum("L/m")]
          Lm,
        /// <summary>
        /// m3km property
        /// </summary>
          [XmlEnum("m3/km")]
          m3km,
        /// <summary>
        /// m3m property
        /// </summary>
          [XmlEnum("m3/m")]
          m3m
        }
        /// <summary>
        /// This class represents the MassPerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerLengthUom xsd enumeration.")]
        public enum MassPerLengthUom 
        {
        /// <summary>
        /// kgmcm2 property
        /// </summary>
          [XmlEnum("kg.m/cm2")]
          kgmcm2,
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg/m")]
          kgm,
        /// <summary>
        /// klbmin property
        /// </summary>
          [XmlEnum("klbm/in")]
          klbmin,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm/ft")]
          lbmft,
        /// <summary>
        /// Mgin property
        /// </summary>
          [XmlEnum("Mg/in")]
          Mgin
        }
        /// <summary>
        /// This class represents the ForcePerVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForcePerVolumeUom xsd enumeration.")]
        public enum ForcePerVolumeUom 
        {
        /// <summary>
        /// Item0001psift property
        /// </summary>
          [XmlEnum("0.001 psi/ft")]
          Item0001psift,
        /// <summary>
        /// Item001psift property
        /// </summary>
          [XmlEnum("0.01 psi/ft")]
          Item001psift,
        /// <summary>
        /// atmft property
        /// </summary>
          [XmlEnum("atm/ft")]
          atmft,
        /// <summary>
        /// atmhm property
        /// </summary>
          [XmlEnum("atm/hm")]
          atmhm,
        /// <summary>
        /// atmm property
        /// </summary>
          [XmlEnum("atm/m")]
          atmm,
        /// <summary>
        /// barkm property
        /// </summary>
          [XmlEnum("bar/km")]
          barkm,
        /// <summary>
        /// barm property
        /// </summary>
          [XmlEnum("bar/m")]
          barm,
        /// <summary>
        /// GPacm property
        /// </summary>
          [XmlEnum("GPa/cm")]
          GPacm,
        /// <summary>
        /// kPahm property
        /// </summary>
          [XmlEnum("kPa/hm")]
          kPahm,
        /// <summary>
        /// kPam property
        /// </summary>
          [XmlEnum("kPa/m")]
          kPam,
        /// <summary>
        /// lbfft3 property
        /// </summary>
          [XmlEnum("lbf/ft3")]
          lbfft3,
        /// <summary>
        /// lbfgalUS property
        /// </summary>
          [XmlEnum("lbf/gal[US]")]
          lbfgalUS,
        /// <summary>
        /// MPam property
        /// </summary>
          [XmlEnum("MPa/m")]
          MPam,
        /// <summary>
        /// Nm3 property
        /// </summary>
          [XmlEnum("N/m3")]
          Nm3,
        /// <summary>
        /// Pam property
        /// </summary>
          [XmlEnum("Pa/m")]
          Pam,
        /// <summary>
        /// psift property
        /// </summary>
          [XmlEnum("psi/ft")]
          psift,
        /// <summary>
        /// psim property
        /// </summary>
          [XmlEnum("psi/m")]
          psim
        }
        /// <summary>
        /// This class represents the StimFluidKind xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimFluidKind xsd enumeration.")]
        public enum StimFluidKind 
        {
        /// <summary>
        /// acidbased property
        /// </summary>
          [XmlEnum("acid-based")]
          acidbased,
        /// <summary>
        /// gas property
        /// </summary>
          gas,
        /// <summary>
        /// oilbased property
        /// </summary>
          [XmlEnum("oil-based")]
          oilbased,
        /// <summary>
        /// waterbased property
        /// </summary>
          [XmlEnum("water-based")]
          waterbased
        }
        /// <summary>
        /// This class represents the StimFluidSubtype xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimFluidSubtype xsd enumeration.")]
        public enum StimFluidSubtype 
        {
        /// <summary>
        /// acid property
        /// </summary>
          acid,
        /// <summary>
        /// base property
        /// </summary>
          @base,
        /// <summary>
        /// carbondioxide property
        /// </summary>
          [XmlEnum("carbon dioxide")]
          carbondioxide,
        /// <summary>
        /// carbondioxideandnitrogen property
        /// </summary>
          [XmlEnum("carbon dioxide and nitrogen")]
          carbondioxideandnitrogen,
        /// <summary>
        /// carbondioxideandwater property
        /// </summary>
          [XmlEnum("carbon dioxide and water")]
          carbondioxideandwater,
        /// <summary>
        /// condensate property
        /// </summary>
          condensate,
        /// <summary>
        /// crosslinkedgel property
        /// </summary>
          [XmlEnum("cross-linked gel")]
          crosslinkedgel,
        /// <summary>
        /// crudeoil property
        /// </summary>
          [XmlEnum("crude oil")]
          crudeoil,
        /// <summary>
        /// diesel property
        /// </summary>
          diesel,
        /// <summary>
        /// foam property
        /// </summary>
          foam,
        /// <summary>
        /// fracturingoil property
        /// </summary>
          [XmlEnum("fracturing oil")]
          fracturingoil,
        /// <summary>
        /// freshwater property
        /// </summary>
          [XmlEnum("fresh water")]
          freshwater,
        /// <summary>
        /// gelledacid property
        /// </summary>
          [XmlEnum("gelled acid")]
          gelledacid,
        /// <summary>
        /// gelledcondensate property
        /// </summary>
          [XmlEnum("gelled condensate")]
          gelledcondensate,
        /// <summary>
        /// gelledcrude property
        /// </summary>
          [XmlEnum("gelled crude")]
          gelledcrude,
        /// <summary>
        /// gelleddiesel property
        /// </summary>
          [XmlEnum("gelled diesel")]
          gelleddiesel,
        /// <summary>
        /// gelledoil property
        /// </summary>
          [XmlEnum("gelled oil")]
          gelledoil,
        /// <summary>
        /// gelledsaltwater property
        /// </summary>
          [XmlEnum("gelled salt water")]
          gelledsaltwater,
        /// <summary>
        /// hotcondensate property
        /// </summary>
          [XmlEnum("hot condensate")]
          hotcondensate,
        /// <summary>
        /// hotfreshwater property
        /// </summary>
          [XmlEnum("hot fresh water")]
          hotfreshwater,
        /// <summary>
        /// hotoil property
        /// </summary>
          [XmlEnum("hot oil")]
          hotoil,
        /// <summary>
        /// hotsaltwater property
        /// </summary>
          [XmlEnum("hot salt water")]
          hotsaltwater,
        /// <summary>
        /// hybrid property
        /// </summary>
          hybrid,
        /// <summary>
        /// lineargel property
        /// </summary>
          [XmlEnum("linear gel")]
          lineargel,
        /// <summary>
        /// liquefiedpetroleumgas property
        /// </summary>
          [XmlEnum("liquefied petroleum gas")]
          liquefiedpetroleumgas,
        /// <summary>
        /// nitrogen property
        /// </summary>
          nitrogen,
        /// <summary>
        /// oil property
        /// </summary>
          oil,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// producedwater property
        /// </summary>
          [XmlEnum("produced water")]
          producedwater,
        /// <summary>
        /// saltwater property
        /// </summary>
          [XmlEnum("salt water")]
          saltwater,
        /// <summary>
        /// slickwater property
        /// </summary>
          [XmlEnum("slick water")]
          slickwater
        }
        /// <summary>
        /// This class represents the VolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumeUom xsd enumeration.")]
        public enum VolumeUom 
        {
        /// <summary>
        /// Item1000bbl property
        /// </summary>
          [XmlEnum("1000 bbl")]
          Item1000bbl,
        /// <summary>
        /// Item1000ft3 property
        /// </summary>
          [XmlEnum("1000 ft3")]
          Item1000ft3,
        /// <summary>
        /// Item1000galUK property
        /// </summary>
          [XmlEnum("1000 gal[UK]")]
          Item1000galUK,
        /// <summary>
        /// Item1000galUS property
        /// </summary>
          [XmlEnum("1000 gal[US]")]
          Item1000galUS,
        /// <summary>
        /// Item1000m3 property
        /// </summary>
          [XmlEnum("1000 m3")]
          Item1000m3,
        /// <summary>
        /// Item1E6galUS property
        /// </summary>
          [XmlEnum("1E-6 gal[US]")]
          Item1E6galUS,
        /// <summary>
        /// Item1E12ft3 property
        /// </summary>
          [XmlEnum("1E12 ft3")]
          Item1E12ft3,
        /// <summary>
        /// Item1E6bbl property
        /// </summary>
          [XmlEnum("1E6 bbl")]
          Item1E6bbl,
        /// <summary>
        /// Item1E6ft3 property
        /// </summary>
          [XmlEnum("1E6 ft3")]
          Item1E6ft3,
        /// <summary>
        /// Item1E6m3 property
        /// </summary>
          [XmlEnum("1E6 m3")]
          Item1E6m3,
        /// <summary>
        /// Item1E9bbl property
        /// </summary>
          [XmlEnum("1E9 bbl")]
          Item1E9bbl,
        /// <summary>
        /// Item1E9ft3 property
        /// </summary>
          [XmlEnum("1E9 ft3")]
          Item1E9ft3,
        /// <summary>
        /// acreft property
        /// </summary>
          [XmlEnum("acre.ft")]
          acreft,
        /// <summary>
        /// bbl property
        /// </summary>
          bbl,
        /// <summary>
        /// cm3 property
        /// </summary>
          cm3,
        /// <summary>
        /// dm3 property
        /// </summary>
          dm3,
        /// <summary>
        /// flozUK property
        /// </summary>
          [XmlEnum("floz[UK]")]
          flozUK,
        /// <summary>
        /// flozUS property
        /// </summary>
          [XmlEnum("floz[US]")]
          flozUS,
        /// <summary>
        /// ft3 property
        /// </summary>
          ft3,
        /// <summary>
        /// galUK property
        /// </summary>
          [XmlEnum("gal[UK]")]
          galUK,
        /// <summary>
        /// galUS property
        /// </summary>
          [XmlEnum("gal[US]")]
          galUS,
        /// <summary>
        /// ham property
        /// </summary>
          [XmlEnum("ha.m")]
          ham,
        /// <summary>
        /// hL property
        /// </summary>
          hL,
        /// <summary>
        /// in3 property
        /// </summary>
          in3,
        /// <summary>
        /// km3 property
        /// </summary>
          km3,
        /// <summary>
        /// L property
        /// </summary>
          L,
        /// <summary>
        /// m3 property
        /// </summary>
          m3,
        /// <summary>
        /// mi3 property
        /// </summary>
          mi3,
        /// <summary>
        /// mL property
        /// </summary>
          mL,
        /// <summary>
        /// mm3 property
        /// </summary>
          mm3,
        /// <summary>
        /// ptUK property
        /// </summary>
          [XmlEnum("pt[UK]")]
          ptUK,
        /// <summary>
        /// ptUS property
        /// </summary>
          [XmlEnum("pt[US]")]
          ptUS,
        /// <summary>
        /// qtUK property
        /// </summary>
          [XmlEnum("qt[UK]")]
          qtUK,
        /// <summary>
        /// qtUS property
        /// </summary>
          [XmlEnum("qt[US]")]
          qtUS,
        /// <summary>
        /// um2m property
        /// </summary>
          [XmlEnum("um2.m")]
          um2m,
        /// <summary>
        /// yd3 property
        /// </summary>
          yd3
        }
        /// <summary>
        /// This class represents the MassPerVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerVolumeUom xsd enumeration.")]
        public enum MassPerVolumeUom 
        {
        /// <summary>
        /// Item0001lbmbbl property
        /// </summary>
          [XmlEnum("0.001 lbm/bbl")]
          Item0001lbmbbl,
        /// <summary>
        /// Item0001lbmgalUK property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[UK]")]
          Item0001lbmgalUK,
        /// <summary>
        /// Item0001lbmgalUS property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[US]")]
          Item0001lbmgalUS,
        /// <summary>
        /// Item001grainft3 property
        /// </summary>
          [XmlEnum("0.01 grain/ft3")]
          Item001grainft3,
        /// <summary>
        /// Item01lbmbbl property
        /// </summary>
          [XmlEnum("0.1 lbm/bbl")]
          Item01lbmbbl,
        /// <summary>
        /// Item10Mgm3 property
        /// </summary>
          [XmlEnum("10 Mg/m3")]
          Item10Mgm3,
        /// <summary>
        /// gcm3 property
        /// </summary>
          [XmlEnum("g/cm3")]
          gcm3,
        /// <summary>
        /// gdm3 property
        /// </summary>
          [XmlEnum("g/dm3")]
          gdm3,
        /// <summary>
        /// ggalUK property
        /// </summary>
          [XmlEnum("g/gal[UK]")]
          ggalUK,
        /// <summary>
        /// ggalUS property
        /// </summary>
          [XmlEnum("g/gal[US]")]
          ggalUS,
        /// <summary>
        /// gL property
        /// </summary>
          [XmlEnum("g/L")]
          gL,
        /// <summary>
        /// gm3 property
        /// </summary>
          [XmlEnum("g/m3")]
          gm3,
        /// <summary>
        /// grainft3 property
        /// </summary>
          [XmlEnum("grain/ft3")]
          grainft3,
        /// <summary>
        /// graingalUS property
        /// </summary>
          [XmlEnum("grain/gal[US]")]
          graingalUS,
        /// <summary>
        /// kgdm3 property
        /// </summary>
          [XmlEnum("kg/dm3")]
          kgdm3,
        /// <summary>
        /// kgL property
        /// </summary>
          [XmlEnum("kg/L")]
          kgL,
        /// <summary>
        /// kgm3 property
        /// </summary>
          [XmlEnum("kg/m3")]
          kgm3,
        /// <summary>
        /// lbmbbl property
        /// </summary>
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        /// <summary>
        /// lbmft3 property
        /// </summary>
          [XmlEnum("lbm/ft3")]
          lbmft3,
        /// <summary>
        /// lbmgalUK property
        /// </summary>
          [XmlEnum("lbm/gal[UK]")]
          lbmgalUK,
        /// <summary>
        /// lbmgalUS property
        /// </summary>
          [XmlEnum("lbm/gal[US]")]
          lbmgalUS,
        /// <summary>
        /// lbmin3 property
        /// </summary>
          [XmlEnum("lbm/in3")]
          lbmin3,
        /// <summary>
        /// mgdm3 property
        /// </summary>
          [XmlEnum("mg/dm3")]
          mgdm3,
        /// <summary>
        /// mggalUS property
        /// </summary>
          [XmlEnum("mg/gal[US]")]
          mggalUS,
        /// <summary>
        /// mgL property
        /// </summary>
          [XmlEnum("mg/L")]
          mgL,
        /// <summary>
        /// mgm3 property
        /// </summary>
          [XmlEnum("mg/m3")]
          mgm3,
        /// <summary>
        /// Mgm3 property
        /// </summary>
          [XmlEnum("Mg/m3")]
          Mgm3,
        /// <summary>
        /// tm3 property
        /// </summary>
          [XmlEnum("t/m3")]
          tm3,
        /// <summary>
        /// ugcm3 property
        /// </summary>
          [XmlEnum("ug/cm3")]
          ugcm3
        }
        /// <summary>
        /// This class represents the ThermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperatureUom 
        {
        /// <summary>
        /// degC property
        /// </summary>
          degC,
        /// <summary>
        /// degF property
        /// </summary>
          degF,
        /// <summary>
        /// degR property
        /// </summary>
          degR,
        /// <summary>
        /// K property
        /// </summary>
          K
        }
        /// <summary>
        /// This class represents the MassUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassUom xsd enumeration.")]
        public enum MassUom 
        {
        /// <summary>
        /// ag property
        /// </summary>
          ag,
        /// <summary>
        /// cg property
        /// </summary>
          cg,
        /// <summary>
        /// ct property
        /// </summary>
          ct,
        /// <summary>
        /// cwtUK property
        /// </summary>
          [XmlEnum("cwt[UK]")]
          cwtUK,
        /// <summary>
        /// cwtUS property
        /// </summary>
          [XmlEnum("cwt[US]")]
          cwtUS,
        /// <summary>
        /// Eg property
        /// </summary>
          Eg,
        /// <summary>
        /// fg property
        /// </summary>
          fg,
        /// <summary>
        /// g property
        /// </summary>
          g,
        /// <summary>
        /// Gg property
        /// </summary>
          Gg,
        /// <summary>
        /// grain property
        /// </summary>
          grain,
        /// <summary>
        /// hg property
        /// </summary>
          hg,
        /// <summary>
        /// kg property
        /// </summary>
          kg,
        /// <summary>
        /// klbm property
        /// </summary>
          klbm,
        /// <summary>
        /// lbm property
        /// </summary>
          lbm,
        /// <summary>
        /// mg property
        /// </summary>
          mg,
        /// <summary>
        /// Mg property
        /// </summary>
          Mg,
        /// <summary>
        /// ng property
        /// </summary>
          ng,
        /// <summary>
        /// ozm property
        /// </summary>
          ozm,
        /// <summary>
        /// ozmtroy property
        /// </summary>
          [XmlEnum("ozm[troy]")]
          ozmtroy,
        /// <summary>
        /// pg property
        /// </summary>
          pg,
        /// <summary>
        /// sack94lbm property
        /// </summary>
          [XmlEnum("sack[94lbm]")]
          sack94lbm,
        /// <summary>
        /// t property
        /// </summary>
          t,
        /// <summary>
        /// Tg property
        /// </summary>
          Tg,
        /// <summary>
        /// tonUK property
        /// </summary>
          [XmlEnum("ton[UK]")]
          tonUK,
        /// <summary>
        /// tonUS property
        /// </summary>
          [XmlEnum("ton[US]")]
          tonUS,
        /// <summary>
        /// ug property
        /// </summary>
          ug
        }
        /// <summary>
        /// This class represents the MassPerTimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerTimeUom xsd enumeration.")]
        public enum MassPerTimeUom 
        {
        /// <summary>
        /// Item1E6lbma property
        /// </summary>
          [XmlEnum("1E6 lbm/a")]
          Item1E6lbma,
        /// <summary>
        /// gs property
        /// </summary>
          [XmlEnum("g/s")]
          gs,
        /// <summary>
        /// kgd property
        /// </summary>
          [XmlEnum("kg/d")]
          kgd,
        /// <summary>
        /// kgh property
        /// </summary>
          [XmlEnum("kg/h")]
          kgh,
        /// <summary>
        /// kgmin property
        /// </summary>
          [XmlEnum("kg/min")]
          kgmin,
        /// <summary>
        /// kgs property
        /// </summary>
          [XmlEnum("kg/s")]
          kgs,
        /// <summary>
        /// lbmd property
        /// </summary>
          [XmlEnum("lbm/d")]
          lbmd,
        /// <summary>
        /// lbmh property
        /// </summary>
          [XmlEnum("lbm/h")]
          lbmh,
        /// <summary>
        /// lbmmin property
        /// </summary>
          [XmlEnum("lbm/min")]
          lbmmin,
        /// <summary>
        /// lbms property
        /// </summary>
          [XmlEnum("lbm/s")]
          lbms,
        /// <summary>
        /// Mga property
        /// </summary>
          [XmlEnum("Mg/a")]
          Mga,
        /// <summary>
        /// Mgd property
        /// </summary>
          [XmlEnum("Mg/d")]
          Mgd,
        /// <summary>
        /// Mgh property
        /// </summary>
          [XmlEnum("Mg/h")]
          Mgh,
        /// <summary>
        /// Mgmin property
        /// </summary>
          [XmlEnum("Mg/min")]
          Mgmin,
        /// <summary>
        /// ta property
        /// </summary>
          [XmlEnum("t/a")]
          ta,
        /// <summary>
        /// td property
        /// </summary>
          [XmlEnum("t/d")]
          td,
        /// <summary>
        /// th property
        /// </summary>
          [XmlEnum("t/h")]
          th,
        /// <summary>
        /// tmin property
        /// </summary>
          [XmlEnum("t/min")]
          tmin,
        /// <summary>
        /// tonUKa property
        /// </summary>
          [XmlEnum("ton[UK]/a")]
          tonUKa,
        /// <summary>
        /// tonUKd property
        /// </summary>
          [XmlEnum("ton[UK]/d")]
          tonUKd,
        /// <summary>
        /// tonUKh property
        /// </summary>
          [XmlEnum("ton[UK]/h")]
          tonUKh,
        /// <summary>
        /// tonUKmin property
        /// </summary>
          [XmlEnum("ton[UK]/min")]
          tonUKmin,
        /// <summary>
        /// tonUSa property
        /// </summary>
          [XmlEnum("ton[US]/a")]
          tonUSa,
        /// <summary>
        /// tonUSd property
        /// </summary>
          [XmlEnum("ton[US]/d")]
          tonUSd,
        /// <summary>
        /// tonUSh property
        /// </summary>
          [XmlEnum("ton[US]/h")]
          tonUSh,
        /// <summary>
        /// tonUSmin property
        /// </summary>
          [XmlEnum("ton[US]/min")]
          tonUSmin
        }
        /// <summary>
        /// This class represents the VolumePerTimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimeUom xsd enumeration.")]
        public enum VolumePerTimeUom 
        {
        /// <summary>
        /// Item130cm3min property
        /// </summary>
          [XmlEnum("1/30 cm3/min")]
          Item130cm3min,
        /// <summary>
        /// Item1000bbld property
        /// </summary>
          [XmlEnum("1000 bbl/d")]
          Item1000bbld,
        /// <summary>
        /// Item1000ft3d property
        /// </summary>
          [XmlEnum("1000 ft3/d")]
          Item1000ft3d,
        /// <summary>
        /// Item1000m3d property
        /// </summary>
          [XmlEnum("1000 m3/d")]
          Item1000m3d,
        /// <summary>
        /// Item1000m3h property
        /// </summary>
          [XmlEnum("1000 m3/h")]
          Item1000m3h,
        /// <summary>
        /// Item1E6bbld property
        /// </summary>
          [XmlEnum("1E6 bbl/d")]
          Item1E6bbld,
        /// <summary>
        /// Item1E6ft3d property
        /// </summary>
          [XmlEnum("1E6 ft3/d")]
          Item1E6ft3d,
        /// <summary>
        /// Item1E6m3d property
        /// </summary>
          [XmlEnum("1E6 m3/d")]
          Item1E6m3d,
        /// <summary>
        /// bbld property
        /// </summary>
          [XmlEnum("bbl/d")]
          bbld,
        /// <summary>
        /// bblh property
        /// </summary>
          [XmlEnum("bbl/h")]
          bblh,
        /// <summary>
        /// bblmin property
        /// </summary>
          [XmlEnum("bbl/min")]
          bblmin,
        /// <summary>
        /// cm3h property
        /// </summary>
          [XmlEnum("cm3/h")]
          cm3h,
        /// <summary>
        /// cm3min property
        /// </summary>
          [XmlEnum("cm3/min")]
          cm3min,
        /// <summary>
        /// cm3s property
        /// </summary>
          [XmlEnum("cm3/s")]
          cm3s,
        /// <summary>
        /// dm3s property
        /// </summary>
          [XmlEnum("dm3/s")]
          dm3s,
        /// <summary>
        /// ft3d property
        /// </summary>
          [XmlEnum("ft3/d")]
          ft3d,
        /// <summary>
        /// ft3h property
        /// </summary>
          [XmlEnum("ft3/h")]
          ft3h,
        /// <summary>
        /// ft3min property
        /// </summary>
          [XmlEnum("ft3/min")]
          ft3min,
        /// <summary>
        /// ft3s property
        /// </summary>
          [XmlEnum("ft3/s")]
          ft3s,
        /// <summary>
        /// galUKd property
        /// </summary>
          [XmlEnum("gal[UK]/d")]
          galUKd,
        /// <summary>
        /// galUKh property
        /// </summary>
          [XmlEnum("gal[UK]/h")]
          galUKh,
        /// <summary>
        /// galUKmin property
        /// </summary>
          [XmlEnum("gal[UK]/min")]
          galUKmin,
        /// <summary>
        /// galUSd property
        /// </summary>
          [XmlEnum("gal[US]/d")]
          galUSd,
        /// <summary>
        /// galUSh property
        /// </summary>
          [XmlEnum("gal[US]/h")]
          galUSh,
        /// <summary>
        /// galUSmin property
        /// </summary>
          [XmlEnum("gal[US]/min")]
          galUSmin,
        /// <summary>
        /// Lh property
        /// </summary>
          [XmlEnum("L/h")]
          Lh,
        /// <summary>
        /// Lmin property
        /// </summary>
          [XmlEnum("L/min")]
          Lmin,
        /// <summary>
        /// Ls property
        /// </summary>
          [XmlEnum("L/s")]
          Ls,
        /// <summary>
        /// m3d property
        /// </summary>
          [XmlEnum("m3/d")]
          m3d,
        /// <summary>
        /// m3h property
        /// </summary>
          [XmlEnum("m3/h")]
          m3h,
        /// <summary>
        /// m3min property
        /// </summary>
          [XmlEnum("m3/min")]
          m3min,
        /// <summary>
        /// m3s property
        /// </summary>
          [XmlEnum("m3/s")]
          m3s
        }
        /// <summary>
        /// This class represents the PowerUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerUom xsd enumeration.")]
        public enum PowerUom 
        {
        /// <summary>
        /// cW property
        /// </summary>
          cW,
        /// <summary>
        /// dW property
        /// </summary>
          dW,
        /// <summary>
        /// EW property
        /// </summary>
          EW,
        /// <summary>
        /// fW property
        /// </summary>
          fW,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// hp property
        /// </summary>
          hp,
        /// <summary>
        /// hpelec property
        /// </summary>
          [XmlEnum("hp[elec]")]
          hpelec,
        /// <summary>
        /// hphyd property
        /// </summary>
          [XmlEnum("hp[hyd]")]
          hphyd,
        /// <summary>
        /// hpmetric property
        /// </summary>
          [XmlEnum("hp[metric]")]
          hpmetric,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// pW property
        /// </summary>
          pW,
        /// <summary>
        /// tonRefrig property
        /// </summary>
          tonRefrig,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// uW property
        /// </summary>
          uW,
        /// <summary>
        /// W property
        /// </summary>
          W
        }
        /// <summary>
        /// This class represents the TimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimeUom xsd enumeration.")]
        public enum TimeUom 
        {
        /// <summary>
        /// Item12ms property
        /// </summary>
          [XmlEnum("1/2 ms")]
          Item12ms,
        /// <summary>
        /// Item100kat property
        /// </summary>
          [XmlEnum("100 ka[t]")]
          Item100kat,
        /// <summary>
        /// a property
        /// </summary>
          a,
        /// <summary>
        /// at property
        /// </summary>
          [XmlEnum("a[t]")]
          at,
        /// <summary>
        /// ca property
        /// </summary>
          ca,
        /// <summary>
        /// cs property
        /// </summary>
          cs,
        /// <summary>
        /// d property
        /// </summary>
          d,
        /// <summary>
        /// ds property
        /// </summary>
          ds,
        /// <summary>
        /// Eat property
        /// </summary>
          [XmlEnum("Ea[t]")]
          Eat,
        /// <summary>
        /// fa property
        /// </summary>
          fa,
        /// <summary>
        /// Gat property
        /// </summary>
          [XmlEnum("Ga[t]")]
          Gat,
        /// <summary>
        /// h property
        /// </summary>
          h,
        /// <summary>
        /// hs property
        /// </summary>
          hs,
        /// <summary>
        /// kat property
        /// </summary>
          [XmlEnum("ka[t]")]
          kat,
        /// <summary>
        /// Mat property
        /// </summary>
          [XmlEnum("Ma[t]")]
          Mat,
        /// <summary>
        /// min property
        /// </summary>
          min,
        /// <summary>
        /// ms property
        /// </summary>
          ms,
        /// <summary>
        /// na property
        /// </summary>
          na,
        /// <summary>
        /// ns property
        /// </summary>
          ns,
        /// <summary>
        /// ps property
        /// </summary>
          ps,
        /// <summary>
        /// s property
        /// </summary>
          s,
        /// <summary>
        /// Tat property
        /// </summary>
          [XmlEnum("Ta[t]")]
          Tat,
        /// <summary>
        /// us property
        /// </summary>
          us,
        /// <summary>
        /// wk property
        /// </summary>
          wk
        }
        /// <summary>
        /// This class represents the StimFetTestAnalysisMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimFetTestAnalysisMethod xsd enumeration.")]
        public enum StimFetTestAnalysisMethod 
        {
        /// <summary>
        /// average property
        /// </summary>
          average,
        /// <summary>
        /// deltapressureovergtime property
        /// </summary>
          [XmlEnum("delta pressure over g-time")]
          deltapressureovergtime,
        /// <summary>
        /// deltapressureoverlineartime property
        /// </summary>
          [XmlEnum("delta pressure over linear time")]
          deltapressureoverlineartime,
        /// <summary>
        /// deltapressureoverradialtime property
        /// </summary>
          [XmlEnum("delta pressure over radial time")]
          deltapressureoverradialtime,
        /// <summary>
        /// gdk2d property
        /// </summary>
          [XmlEnum("gdk 2-d")]
          gdk2d,
        /// <summary>
        /// horner property
        /// </summary>
          horner,
        /// <summary>
        /// linear property
        /// </summary>
          linear,
        /// <summary>
        /// loglog property
        /// </summary>
          [XmlEnum("log-log")]
          loglog,
        /// <summary>
        /// nolte property
        /// </summary>
          nolte,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// pdlcoefficient property
        /// </summary>
          [XmlEnum("pdl coefficient")]
          pdlcoefficient,
        /// <summary>
        /// perkinsandkern2d property
        /// </summary>
          [XmlEnum("perkins and kern 2-d")]
          perkinsandkern2d,
        /// <summary>
        /// radial2d property
        /// </summary>
          [XmlEnum("radial 2-d")]
          radial2d,
        /// <summary>
        /// squareroot property
        /// </summary>
          [XmlEnum("square root")]
          squareroot,
        /// <summary>
        /// thirdpartysoftware property
        /// </summary>
          [XmlEnum("third-party software")]
          thirdpartysoftware,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the VolumetricThermalExpansionUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumetricThermalExpansionUom xsd enumeration.")]
        public enum VolumetricThermalExpansionUom 
        {
        /// <summary>
        /// Item1deltaC property
        /// </summary>
          [XmlEnum("1/deltaC")]
          Item1deltaC,
        /// <summary>
        /// Item1deltaF property
        /// </summary>
          [XmlEnum("1/deltaF")]
          Item1deltaF,
        /// <summary>
        /// Item1deltaK property
        /// </summary>
          [XmlEnum("1/deltaK")]
          Item1deltaK,
        /// <summary>
        /// Item1deltaR property
        /// </summary>
          [XmlEnum("1/deltaR")]
          Item1deltaR,
        /// <summary>
        /// Item1E6m3m3deltaC property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.deltaC)")]
          Item1E6m3m3deltaC,
        /// <summary>
        /// Item1E6m3m3deltaF property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.deltaF)")]
          Item1E6m3m3deltaF,
        /// <summary>
        /// m3m3deltaK property
        /// </summary>
          [XmlEnum("m3/(m3.deltaK)")]
          m3m3deltaK,
        /// <summary>
        /// ppmvoldeltaC property
        /// </summary>
          [XmlEnum("ppm[vol]/deltaC")]
          ppmvoldeltaC,
        /// <summary>
        /// ppmvoldeltaF property
        /// </summary>
          [XmlEnum("ppm[vol]/deltaF")]
          ppmvoldeltaF
        }
        /// <summary>
        /// This class represents the ThermalConductivityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalConductivityUom xsd enumeration.")]
        public enum ThermalConductivityUom 
        {
        /// <summary>
        /// BtuIThftdeltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft.deltaF)")]
          BtuIThftdeltaF,
        /// <summary>
        /// calthhcmdeltaC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm.deltaC)")]
          calthhcmdeltaC,
        /// <summary>
        /// calthscmdeltaC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm.deltaC)")]
          calthscmdeltaC,
        /// <summary>
        /// kcalthhmdeltaC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m.deltaC)")]
          kcalthhmdeltaC,
        /// <summary>
        /// WmdeltaK property
        /// </summary>
          [XmlEnum("W/(m.deltaK)")]
          WmdeltaK
        }
        /// <summary>
        /// This class represents the SpecificHeatCapacityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SpecificHeatCapacityUom xsd enumeration.")]
        public enum SpecificHeatCapacityUom 
        {
        /// <summary>
        /// BtuITlbmdeltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.deltaF)")]
          BtuITlbmdeltaF,
        /// <summary>
        /// BtuITlbmdeltaR property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.deltaR)")]
          BtuITlbmdeltaR,
        /// <summary>
        /// calthgdeltaK property
        /// </summary>
          [XmlEnum("cal[th]/(g.deltaK)")]
          calthgdeltaK,
        /// <summary>
        /// JgdeltaK property
        /// </summary>
          [XmlEnum("J/(g.deltaK)")]
          JgdeltaK,
        /// <summary>
        /// JkgdeltaK property
        /// </summary>
          [XmlEnum("J/(kg.deltaK)")]
          JkgdeltaK,
        /// <summary>
        /// kcalthkgdeltaC property
        /// </summary>
          [XmlEnum("kcal[th]/(kg.deltaC)")]
          kcalthkgdeltaC,
        /// <summary>
        /// kJkgdeltaK property
        /// </summary>
          [XmlEnum("kJ/(kg.deltaK)")]
          kJkgdeltaK,
        /// <summary>
        /// kWhkgdeltaC property
        /// </summary>
          [XmlEnum("kW.h/(kg.deltaC)")]
          kWhkgdeltaC
        }
        /// <summary>
        /// This class represents the PermeabilityLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PermeabilityLengthUom xsd enumeration.")]
        public enum PermeabilityLengthUom 
        {
        /// <summary>
        /// Dft property
        /// </summary>
          [XmlEnum("D.ft")]
          Dft,
        /// <summary>
        /// Dm property
        /// </summary>
          [XmlEnum("D.m")]
          Dm,
        /// <summary>
        /// mDft property
        /// </summary>
          [XmlEnum("mD.ft")]
          mDft,
        /// <summary>
        /// mDm property
        /// </summary>
          [XmlEnum("mD.m")]
          mDm,
        /// <summary>
        /// TDAPIm property
        /// </summary>
          [XmlEnum("TD[API].m")]
          TDAPIm
        }
        /// <summary>
        /// This class represents the MassPerMassUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerMassUom xsd enumeration.")]
        public enum MassPerMassUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// mass property
        /// </summary>
          [XmlEnum("%[mass]")]
          mass,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// gkg property
        /// </summary>
          [XmlEnum("g/kg")]
          gkg,
        /// <summary>
        /// gt property
        /// </summary>
          [XmlEnum("g/t")]
          gt,
        /// <summary>
        /// kgkg property
        /// </summary>
          [XmlEnum("kg/kg")]
          kgkg,
        /// <summary>
        /// kgsack94lbm property
        /// </summary>
          [XmlEnum("kg/sack[94lbm]")]
          kgsack94lbm,
        /// <summary>
        /// kgt property
        /// </summary>
          [XmlEnum("kg/t")]
          kgt,
        /// <summary>
        /// mgg property
        /// </summary>
          [XmlEnum("mg/g")]
          mgg,
        /// <summary>
        /// mgkg property
        /// </summary>
          [XmlEnum("mg/kg")]
          mgkg,
        /// <summary>
        /// ngg property
        /// </summary>
          [XmlEnum("ng/g")]
          ngg,
        /// <summary>
        /// ngmg property
        /// </summary>
          [XmlEnum("ng/mg")]
          ngmg,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// ppmmass property
        /// </summary>
          [XmlEnum("ppm[mass]")]
          ppmmass,
        /// <summary>
        /// ugg property
        /// </summary>
          [XmlEnum("ug/g")]
          ugg,
        /// <summary>
        /// ugmg property
        /// </summary>
          [XmlEnum("ug/mg")]
          ugmg
        }
        /// <summary>
        /// This class represents the AreaPerMassUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerMassUom xsd enumeration.")]
        public enum AreaPerMassUom 
        {
        /// <summary>
        /// cm2g property
        /// </summary>
          [XmlEnum("cm2/g")]
          cm2g,
        /// <summary>
        /// ft2lbm property
        /// </summary>
          [XmlEnum("ft2/lbm")]
          ft2lbm,
        /// <summary>
        /// m2g property
        /// </summary>
          [XmlEnum("m2/g")]
          m2g,
        /// <summary>
        /// m2kg property
        /// </summary>
          [XmlEnum("m2/kg")]
          m2kg
        }
        /// <summary>
        /// This class represents the StimMaterialKind xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimMaterialKind xsd enumeration.")]
        public enum StimMaterialKind 
        {
        /// <summary>
        /// additive property
        /// </summary>
          additive,
        /// <summary>
        /// brine property
        /// </summary>
          brine,
        /// <summary>
        /// CO2 property
        /// </summary>
          CO2,
        /// <summary>
        /// gel property
        /// </summary>
          gel,
        /// <summary>
        /// N2 property
        /// </summary>
          N2,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// proppantagent property
        /// </summary>
          [XmlEnum("proppant agent")]
          proppantagent,
        /// <summary>
        /// water property
        /// </summary>
          water
        }
        /// <summary>
        /// This class represents the StimAdditiveKind xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimAdditiveKind xsd enumeration.")]
        public enum StimAdditiveKind 
        {
        /// <summary>
        /// acid property
        /// </summary>
          acid,
        /// <summary>
        /// activator property
        /// </summary>
          activator,
        /// <summary>
        /// biocide property
        /// </summary>
          biocide,
        /// <summary>
        /// breaker property
        /// </summary>
          breaker,
        /// <summary>
        /// breakeraid property
        /// </summary>
          [XmlEnum("breaker aid")]
          breakeraid,
        /// <summary>
        /// buffer property
        /// </summary>
          buffer,
        /// <summary>
        /// claystabilizer property
        /// </summary>
          [XmlEnum("clay stabilizer")]
          claystabilizer,
        /// <summary>
        /// corrosioninhibitor property
        /// </summary>
          [XmlEnum("corrosion inhibitor")]
          corrosioninhibitor,
        /// <summary>
        /// corrosioninhibitoraid property
        /// </summary>
          [XmlEnum("corrosion inhibitor aid")]
          corrosioninhibitoraid,
        /// <summary>
        /// crosslinker property
        /// </summary>
          crosslinker,
        /// <summary>
        /// delayingagent property
        /// </summary>
          [XmlEnum("delaying agent")]
          delayingagent,
        /// <summary>
        /// fibers property
        /// </summary>
          fibers,
        /// <summary>
        /// fluidlossadditive property
        /// </summary>
          [XmlEnum("fluid loss additive")]
          fluidlossadditive,
        /// <summary>
        /// foamer property
        /// </summary>
          foamer,
        /// <summary>
        /// frictionreducer property
        /// </summary>
          [XmlEnum("friction reducer")]
          frictionreducer,
        /// <summary>
        /// gellingagent property
        /// </summary>
          [XmlEnum("gelling agent")]
          gellingagent,
        /// <summary>
        /// ironcontroladditive property
        /// </summary>
          [XmlEnum("iron control additive")]
          ironcontroladditive,
        /// <summary>
        /// mutualsolvent property
        /// </summary>
          [XmlEnum("mutual solvent")]
          mutualsolvent,
        /// <summary>
        /// salt property
        /// </summary>
          salt,
        /// <summary>
        /// stabilizer property
        /// </summary>
          stabilizer,
        /// <summary>
        /// surfactant property
        /// </summary>
          surfactant
        }
        /// <summary>
        /// This class represents the SurfEquipType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the SurfEquipType xsd enumeration.")]
        public enum SurfEquipType 
        {
        /// <summary>
        /// IADC property
        /// </summary>
          IADC,
        /// <summary>
        /// custom property
        /// </summary>
          custom,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the AreaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaUom xsd enumeration.")]
        public enum AreaUom 
        {
        /// <summary>
        /// acre property
        /// </summary>
          acre,
        /// <summary>
        /// belectron property
        /// </summary>
          [XmlEnum("b/electron")]
          belectron,
        /// <summary>
        /// b property
        /// </summary>
          b,
        /// <summary>
        /// cm2 property
        /// </summary>
          cm2,
        /// <summary>
        /// ft2 property
        /// </summary>
          ft2,
        /// <summary>
        /// ha property
        /// </summary>
          ha,
        /// <summary>
        /// in2 property
        /// </summary>
          in2,
        /// <summary>
        /// km2 property
        /// </summary>
          km2,
        /// <summary>
        /// m2 property
        /// </summary>
          m2,
        /// <summary>
        /// miUS2 property
        /// </summary>
          [XmlEnum("mi[US]2")]
          miUS2,
        /// <summary>
        /// mi2 property
        /// </summary>
          mi2,
        /// <summary>
        /// mm2 property
        /// </summary>
          mm2,
        /// <summary>
        /// section property
        /// </summary>
          section,
        /// <summary>
        /// um2 property
        /// </summary>
          um2,
        /// <summary>
        /// yd2 property
        /// </summary>
          yd2
        }
        /// <summary>
        /// This class represents the PumpType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PumpType xsd enumeration.")]
        public enum PumpType 
        {
        /// <summary>
        /// centrifugal property
        /// </summary>
          centrifugal,
        /// <summary>
        /// duplex property
        /// </summary>
          duplex,
        /// <summary>
        /// triplex property
        /// </summary>
          triplex,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PowerPerPowerUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerPerPowerUom xsd enumeration.")]
        public enum PowerPerPowerUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// BtuIThph property
        /// </summary>
          [XmlEnum("Btu[IT]/(hp.h)")]
          BtuIThph,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// WkW property
        /// </summary>
          [XmlEnum("W/kW")]
          WkW,
        /// <summary>
        /// WW property
        /// </summary>
          [XmlEnum("W/W")]
          WW
        }
        /// <summary>
        /// This class represents the AngularVelocityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AngularVelocityUom xsd enumeration.")]
        public enum AngularVelocityUom 
        {
        /// <summary>
        /// degah property
        /// </summary>
          [XmlEnum("dega/h")]
          degah,
        /// <summary>
        /// degamin property
        /// </summary>
          [XmlEnum("dega/min")]
          degamin,
        /// <summary>
        /// degas property
        /// </summary>
          [XmlEnum("dega/s")]
          degas,
        /// <summary>
        /// rads property
        /// </summary>
          [XmlEnum("rad/s")]
          rads,
        /// <summary>
        /// revs property
        /// </summary>
          [XmlEnum("rev/s")]
          revs,
        /// <summary>
        /// rpm property
        /// </summary>
          rpm
        }
        /// <summary>
        /// This class represents the PitType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PitType xsd enumeration.")]
        public enum PitType 
        {
        /// <summary>
        /// bulk property
        /// </summary>
          bulk,
        /// <summary>
        /// chemical property
        /// </summary>
          chemical,
        /// <summary>
        /// drilling property
        /// </summary>
          drilling,
        /// <summary>
        /// mix property
        /// </summary>
          mix,
        /// <summary>
        /// mudcleaning property
        /// </summary>
          [XmlEnum("mud cleaning")]
          mudcleaning,
        /// <summary>
        /// sandtrap property
        /// </summary>
          [XmlEnum("sand trap")]
          sandtrap,
        /// <summary>
        /// slug property
        /// </summary>
          slug,
        /// <summary>
        /// storage property
        /// </summary>
          storage,
        /// <summary>
        /// surgetank property
        /// </summary>
          [XmlEnum("surge tank")]
          surgetank,
        /// <summary>
        /// triptank property
        /// </summary>
          [XmlEnum("trip tank")]
          triptank,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BopType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BopType xsd enumeration.")]
        public enum BopType 
        {
        /// <summary>
        /// annularpreventer property
        /// </summary>
          [XmlEnum("annular preventer")]
          annularpreventer,
        /// <summary>
        /// shearram property
        /// </summary>
          [XmlEnum("shear ram")]
          shearram,
        /// <summary>
        /// blindram property
        /// </summary>
          [XmlEnum("blind ram")]
          blindram,
        /// <summary>
        /// piperam property
        /// </summary>
          [XmlEnum("pipe ram")]
          piperam,
        /// <summary>
        /// drillingspool property
        /// </summary>
          [XmlEnum("drilling spool")]
          drillingspool,
        /// <summary>
        /// flexiblejoint property
        /// </summary>
          [XmlEnum("flexible joint")]
          flexiblejoint,
        /// <summary>
        /// connector property
        /// </summary>
          connector
        }
        /// <summary>
        /// This class represents the GasPeakType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the GasPeakType xsd enumeration.")]
        public enum GasPeakType 
        {
        /// <summary>
        /// circulatingbackgroundgas property
        /// </summary>
          [XmlEnum("circulating background gas")]
          circulatingbackgroundgas,
        /// <summary>
        /// connectiongas property
        /// </summary>
          [XmlEnum("connection gas")]
          connectiongas,
        /// <summary>
        /// drillingbackgroundgas property
        /// </summary>
          [XmlEnum("drilling background gas")]
          drillingbackgroundgas,
        /// <summary>
        /// drillinggaspeak property
        /// </summary>
          [XmlEnum("drilling gas peak")]
          drillinggaspeak,
        /// <summary>
        /// flowcheckgas property
        /// </summary>
          [XmlEnum("flow check gas")]
          flowcheckgas,
        /// <summary>
        /// noreadings property
        /// </summary>
          [XmlEnum("no readings")]
          noreadings,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// shutdowngas property
        /// </summary>
          [XmlEnum("shut down gas")]
          shutdowngas,
        /// <summary>
        /// tripgas property
        /// </summary>
          [XmlEnum("trip gas")]
          tripgas,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ElectricCurrentUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricCurrentUom xsd enumeration.")]
        public enum ElectricCurrentUom 
        {
        /// <summary>
        /// A property
        /// </summary>
          A,
        /// <summary>
        /// cA property
        /// </summary>
          cA,
        /// <summary>
        /// dA property
        /// </summary>
          dA,
        /// <summary>
        /// EA property
        /// </summary>
          EA,
        /// <summary>
        /// fA property
        /// </summary>
          fA,
        /// <summary>
        /// GA property
        /// </summary>
          GA,
        /// <summary>
        /// kA property
        /// </summary>
          kA,
        /// <summary>
        /// MA property
        /// </summary>
          MA,
        /// <summary>
        /// mA property
        /// </summary>
          mA,
        /// <summary>
        /// nA property
        /// </summary>
          nA,
        /// <summary>
        /// pA property
        /// </summary>
          pA,
        /// <summary>
        /// TA property
        /// </summary>
          TA,
        /// <summary>
        /// uA property
        /// </summary>
          uA
        }
        /// <summary>
        /// This class represents the MomentOfForceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MomentOfForceUom xsd enumeration.")]
        public enum MomentOfForceUom 
        {
        /// <summary>
        /// Item1000lbfft property
        /// </summary>
          [XmlEnum("1000 lbf.ft")]
          Item1000lbfft,
        /// <summary>
        /// daNm property
        /// </summary>
          [XmlEnum("daN.m")]
          daNm,
        /// <summary>
        /// dNm property
        /// </summary>
          [XmlEnum("dN.m")]
          dNm,
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// kgfm property
        /// </summary>
          [XmlEnum("kgf.m")]
          kgfm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN.m")]
          kNm,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf.ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf.in")]
          lbfin,
        /// <summary>
        /// lbmft2s2 property
        /// </summary>
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N.m")]
          Nm,
        /// <summary>
        /// pdlft property
        /// </summary>
          [XmlEnum("pdl.ft")]
          pdlft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonf[US].ft")]
          tonfUSft,
        /// <summary>
        /// tonfUSmi property
        /// </summary>
          [XmlEnum("tonf[US].mi")]
          tonfUSmi
        }
        /// <summary>
        /// This class represents the ForceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForceUom xsd enumeration.")]
        public enum ForceUom 
        {
        /// <summary>
        /// Item10kN property
        /// </summary>
          [XmlEnum("10 kN")]
          Item10kN,
        /// <summary>
        /// cN property
        /// </summary>
          cN,
        /// <summary>
        /// daN property
        /// </summary>
          daN,
        /// <summary>
        /// dN property
        /// </summary>
          dN,
        /// <summary>
        /// dyne property
        /// </summary>
          dyne,
        /// <summary>
        /// EN property
        /// </summary>
          EN,
        /// <summary>
        /// fN property
        /// </summary>
          fN,
        /// <summary>
        /// gf property
        /// </summary>
          gf,
        /// <summary>
        /// GN property
        /// </summary>
          GN,
        /// <summary>
        /// hN property
        /// </summary>
          hN,
        /// <summary>
        /// kdyne property
        /// </summary>
          kdyne,
        /// <summary>
        /// kgf property
        /// </summary>
          kgf,
        /// <summary>
        /// klbf property
        /// </summary>
          klbf,
        /// <summary>
        /// kN property
        /// </summary>
          kN,
        /// <summary>
        /// lbf property
        /// </summary>
          lbf,
        /// <summary>
        /// Mgf property
        /// </summary>
          Mgf,
        /// <summary>
        /// mN property
        /// </summary>
          mN,
        /// <summary>
        /// MN property
        /// </summary>
          MN,
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// nN property
        /// </summary>
          nN,
        /// <summary>
        /// ozf property
        /// </summary>
          ozf,
        /// <summary>
        /// pdl property
        /// </summary>
          pdl,
        /// <summary>
        /// pN property
        /// </summary>
          pN,
        /// <summary>
        /// TN property
        /// </summary>
          TN,
        /// <summary>
        /// tonfUK property
        /// </summary>
          [XmlEnum("tonf[UK]")]
          tonfUK,
        /// <summary>
        /// tonfUS property
        /// </summary>
          [XmlEnum("tonf[US]")]
          tonfUS,
        /// <summary>
        /// uN property
        /// </summary>
          uN
        }
        /// <summary>
        /// This class represents the LengthPerTimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerTimeUom xsd enumeration.")]
        public enum LengthPerTimeUom 
        {
        /// <summary>
        /// Item1000fth property
        /// </summary>
          [XmlEnum("1000 ft/h")]
          Item1000fth,
        /// <summary>
        /// Item1000fts property
        /// </summary>
          [XmlEnum("1000 ft/s")]
          Item1000fts,
        /// <summary>
        /// cma property
        /// </summary>
          [XmlEnum("cm/a")]
          cma,
        /// <summary>
        /// cms property
        /// </summary>
          [XmlEnum("cm/s")]
          cms,
        /// <summary>
        /// dms property
        /// </summary>
          [XmlEnum("dm/s")]
          dms,
        /// <summary>
        /// ftd property
        /// </summary>
          [XmlEnum("ft/d")]
          ftd,
        /// <summary>
        /// fth property
        /// </summary>
          [XmlEnum("ft/h")]
          fth,
        /// <summary>
        /// ftmin property
        /// </summary>
          [XmlEnum("ft/min")]
          ftmin,
        /// <summary>
        /// ftms property
        /// </summary>
          [XmlEnum("ft/ms")]
          ftms,
        /// <summary>
        /// fts property
        /// </summary>
          [XmlEnum("ft/s")]
          fts,
        /// <summary>
        /// ftus property
        /// </summary>
          [XmlEnum("ft/us")]
          ftus,
        /// <summary>
        /// ina property
        /// </summary>
          [XmlEnum("in/a")]
          ina,
        /// <summary>
        /// inmin property
        /// </summary>
          [XmlEnum("in/min")]
          inmin,
        /// <summary>
        /// ins property
        /// </summary>
          [XmlEnum("in/s")]
          ins,
        /// <summary>
        /// kmh property
        /// </summary>
          [XmlEnum("km/h")]
          kmh,
        /// <summary>
        /// kms property
        /// </summary>
          [XmlEnum("km/s")]
          kms,
        /// <summary>
        /// knot property
        /// </summary>
          knot,
        /// <summary>
        /// md property
        /// </summary>
          [XmlEnum("m/d")]
          md,
        /// <summary>
        /// mh property
        /// </summary>
          [XmlEnum("m/h")]
          mh,
        /// <summary>
        /// mmin property
        /// </summary>
          [XmlEnum("m/min")]
          mmin,
        /// <summary>
        /// mms property
        /// </summary>
          [XmlEnum("m/ms")]
          mms,
        /// <summary>
        /// ms property
        /// </summary>
          [XmlEnum("m/s")]
          ms,
        /// <summary>
        /// mih property
        /// </summary>
          [XmlEnum("mi/h")]
          mih,
        /// <summary>
        /// mila property
        /// </summary>
          [XmlEnum("mil/a")]
          mila,
        /// <summary>
        /// mma property
        /// </summary>
          [XmlEnum("mm/a")]
          mma,
        /// <summary>
        /// mms1 property
        /// </summary>
          [XmlEnum("mm/s")]
          mms1,
        /// <summary>
        /// nms property
        /// </summary>
          [XmlEnum("nm/s")]
          nms,
        /// <summary>
        /// ums property
        /// </summary>
          [XmlEnum("um/s")]
          ums
        }
        /// <summary>
        /// This class represents the IlluminanceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the IlluminanceUom xsd enumeration.")]
        public enum IlluminanceUom 
        {
        /// <summary>
        /// footcandle property
        /// </summary>
          footcandle,
        /// <summary>
        /// klx property
        /// </summary>
          klx,
        /// <summary>
        /// lmm2 property
        /// </summary>
          [XmlEnum("lm/m2")]
          lmm2,
        /// <summary>
        /// lx property
        /// </summary>
          lx
        }
        /// <summary>
        /// This class represents the ShowRating xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ShowRating xsd enumeration.")]
        public enum ShowRating 
        {
        /// <summary>
        /// none property
        /// </summary>
          none,
        /// <summary>
        /// verypoor property
        /// </summary>
          [XmlEnum("very poor")]
          verypoor,
        /// <summary>
        /// poor property
        /// </summary>
          poor,
        /// <summary>
        /// fair property
        /// </summary>
          fair,
        /// <summary>
        /// good property
        /// </summary>
          good,
        /// <summary>
        /// verygood property
        /// </summary>
          [XmlEnum("very good")]
          verygood,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the AreaPerAreaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerAreaUom xsd enumeration.")]
        public enum AreaPerAreaUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// area property
        /// </summary>
          [XmlEnum("%[area]")]
          area,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// in2ft2 property
        /// </summary>
          [XmlEnum("in2/ft2")]
          in2ft2,
        /// <summary>
        /// in2in2 property
        /// </summary>
          [XmlEnum("in2/in2")]
          in2in2,
        /// <summary>
        /// m2m2 property
        /// </summary>
          [XmlEnum("m2/m2")]
          m2m2,
        /// <summary>
        /// mm2mm2 property
        /// </summary>
          [XmlEnum("mm2/mm2")]
          mm2mm2
        }
        /// <summary>
        /// This class represents the ShowSpeed xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ShowSpeed xsd enumeration.")]
        public enum ShowSpeed 
        {
        /// <summary>
        /// slow property
        /// </summary>
          slow,
        /// <summary>
        /// moderatelyfast property
        /// </summary>
          [XmlEnum("moderately fast")]
          moderatelyfast,
        /// <summary>
        /// fast property
        /// </summary>
          fast,
        /// <summary>
        /// instantaneous property
        /// </summary>
          instantaneous,
        /// <summary>
        /// none property
        /// </summary>
          none,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowLevel xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ShowLevel xsd enumeration.")]
        public enum ShowLevel 
        {
        /// <summary>
        /// blooming property
        /// </summary>
          blooming,
        /// <summary>
        /// streaming property
        /// </summary>
          streaming,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowFluorescence xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ShowFluorescence xsd enumeration.")]
        public enum ShowFluorescence 
        {
        /// <summary>
        /// faint property
        /// </summary>
          faint,
        /// <summary>
        /// bright property
        /// </summary>
          bright,
        /// <summary>
        /// none property
        /// </summary>
          none,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the GeochronologicalRank xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the GeochronologicalRank xsd enumeration.")]
        public enum GeochronologicalRank 
        {
        /// <summary>
        /// eon property
        /// </summary>
          eon,
        /// <summary>
        /// era property
        /// </summary>
          era,
        /// <summary>
        /// period property
        /// </summary>
          period,
        /// <summary>
        /// epoch property
        /// </summary>
          epoch,
        /// <summary>
        /// age property
        /// </summary>
          age,
        /// <summary>
        /// chron property
        /// </summary>
          chron
        }
        /// <summary>
        /// This class represents the LithostratigraphicRank xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LithostratigraphicRank xsd enumeration.")]
        public enum LithostratigraphicRank 
        {
        /// <summary>
        /// group property
        /// </summary>
          group,
        /// <summary>
        /// formation property
        /// </summary>
          formation,
        /// <summary>
        /// member property
        /// </summary>
          member,
        /// <summary>
        /// bed property
        /// </summary>
          bed
        }
        /// <summary>
        /// This class represents the ShowFluid xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ShowFluid xsd enumeration.")]
        public enum ShowFluid 
        {
        /// <summary>
        /// gas property
        /// </summary>
          gas,
        /// <summary>
        /// oil property
        /// </summary>
          oil
        }
        /// <summary>
        /// This class represents the LineStyle xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LineStyle xsd enumeration.")]
        public enum LineStyle 
        {
        /// <summary>
        /// dashed property
        /// </summary>
          dashed,
        /// <summary>
        /// solid property
        /// </summary>
          solid,
        /// <summary>
        /// dotted property
        /// </summary>
          dotted,
        /// <summary>
        /// shortdashed property
        /// </summary>
          [XmlEnum("short dashed")]
          shortdashed,
        /// <summary>
        /// longdashed property
        /// </summary>
          [XmlEnum("long dashed")]
          longdashed
        }
        /// <summary>
        /// This class represents the ScaleType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ScaleType xsd enumeration.")]
        public enum ScaleType 
        {
        /// <summary>
        /// linear property
        /// </summary>
          linear,
        /// <summary>
        /// logarithmic property
        /// </summary>
          logarithmic
        }
        /// <summary>
        /// This class represents the BackupScaleType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BackupScaleType xsd enumeration.")]
        public enum BackupScaleType 
        {
        /// <summary>
        /// x10 property
        /// </summary>
          x10,
        /// <summary>
        /// offscaleleftright property
        /// </summary>
          [XmlEnum("offscale left/right")]
          offscaleleftright,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the LogTrackType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LogTrackType xsd enumeration.")]
        public enum LogTrackType 
        {
        /// <summary>
        /// curves property
        /// </summary>
          curves,
        /// <summary>
        /// data property
        /// </summary>
          data,
        /// <summary>
        /// depth property
        /// </summary>
          depth,
        /// <summary>
        /// traces property
        /// </summary>
          traces,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the CalibrationPointRole xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the CalibrationPointRole xsd enumeration.")]
        public enum CalibrationPointRole 
        {
        /// <summary>
        /// leftedge property
        /// </summary>
          [XmlEnum("left edge")]
          leftedge,
        /// <summary>
        /// rightedge property
        /// </summary>
          [XmlEnum("right edge")]
          rightedge,
        /// <summary>
        /// fraction property
        /// </summary>
          fraction,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the LogSectionType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LogSectionType xsd enumeration.")]
        public enum LogSectionType 
        {
        /// <summary>
        /// main property
        /// </summary>
          main,
        /// <summary>
        /// repeat property
        /// </summary>
          repeat,
        /// <summary>
        /// calibration property
        /// </summary>
          calibration,
        /// <summary>
        /// tiein property
        /// </summary>
          [XmlEnum("tie in")]
          tiein,
        /// <summary>
        /// goinginhole property
        /// </summary>
          [XmlEnum("going in hole")]
          goinginhole,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the LogIndexType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LogIndexType xsd enumeration.")]
        public enum LogIndexType 
        {
        /// <summary>
        /// datetime property
        /// </summary>
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// elapsedtime property
        /// </summary>
          [XmlEnum("elapsed time")]
          elapsedtime,
        /// <summary>
        /// length property
        /// </summary>
          length,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// verticaldepth property
        /// </summary>
          [XmlEnum("vertical depth")]
          verticaldepth,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ElevCodeEnum xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ElevCodeEnum xsd enumeration.")]
        public enum ElevCodeEnum 
        {
        /// <summary>
        /// CF property
        /// </summary>
          CF,
        /// <summary>
        /// CV property
        /// </summary>
          CV,
        /// <summary>
        /// DF property
        /// </summary>
          DF,
        /// <summary>
        /// GL property
        /// </summary>
          GL,
        /// <summary>
        /// KB property
        /// </summary>
          KB,
        /// <summary>
        /// RB property
        /// </summary>
          RB,
        /// <summary>
        /// RT property
        /// </summary>
          RT,
        /// <summary>
        /// SF property
        /// </summary>
          SF,
        /// <summary>
        /// LAT property
        /// </summary>
          LAT,
        /// <summary>
        /// SL property
        /// </summary>
          SL,
        /// <summary>
        /// MHHW property
        /// </summary>
          MHHW,
        /// <summary>
        /// MHW property
        /// </summary>
          MHW,
        /// <summary>
        /// MLLW property
        /// </summary>
          MLLW,
        /// <summary>
        /// MLW property
        /// </summary>
          MLW,
        /// <summary>
        /// MTL property
        /// </summary>
          MTL,
        /// <summary>
        /// KO property
        /// </summary>
          KO,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogRectangleType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LogRectangleType xsd enumeration.")]
        public enum LogRectangleType 
        {
        /// <summary>
        /// header property
        /// </summary>
          header,
        /// <summary>
        /// alternate property
        /// </summary>
          alternate
        }
        /// <summary>
        /// This class represents the DigitalStorageUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DigitalStorageUom xsd enumeration.")]
        public enum DigitalStorageUom 
        {
        /// <summary>
        /// bit property
        /// </summary>
          bit,
        /// <summary>
        /// byte property
        /// </summary>
          @byte,
        /// <summary>
        /// Kibyte property
        /// </summary>
          Kibyte,
        /// <summary>
        /// Mibyte property
        /// </summary>
          Mibyte
        }
        /// <summary>
        /// This class represents the ReciprocalLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalLengthUom xsd enumeration.")]
        public enum ReciprocalLengthUom 
        {
        /// <summary>
        /// Item1angstrom property
        /// </summary>
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        /// <summary>
        /// Item1cm property
        /// </summary>
          [XmlEnum("1/cm")]
          Item1cm,
        /// <summary>
        /// Item1ft property
        /// </summary>
          [XmlEnum("1/ft")]
          Item1ft,
        /// <summary>
        /// Item1in property
        /// </summary>
          [XmlEnum("1/in")]
          Item1in,
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// Item1mi property
        /// </summary>
          [XmlEnum("1/mi")]
          Item1mi,
        /// <summary>
        /// Item1mm property
        /// </summary>
          [XmlEnum("1/mm")]
          Item1mm,
        /// <summary>
        /// Item1nm property
        /// </summary>
          [XmlEnum("1/nm")]
          Item1nm,
        /// <summary>
        /// Item1yd property
        /// </summary>
          [XmlEnum("1/yd")]
          Item1yd,
        /// <summary>
        /// Item1E91ft property
        /// </summary>
          [XmlEnum("1E-9 1/ft")]
          Item1E91ft
        }
        /// <summary>
        /// This class represents the PumpOpType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PumpOpType xsd enumeration.")]
        public enum PumpOpType 
        {
        /// <summary>
        /// drilling property
        /// </summary>
          drilling,
        /// <summary>
        /// reaming property
        /// </summary>
          reaming,
        /// <summary>
        /// circulating property
        /// </summary>
          circulating,
        /// <summary>
        /// slowpump property
        /// </summary>
          [XmlEnum("slow pump")]
          slowpump,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ScrType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ScrType xsd enumeration.")]
        public enum ScrType 
        {
        /// <summary>
        /// stringannulus property
        /// </summary>
          [XmlEnum("string annulus")]
          stringannulus,
        /// <summary>
        /// stringkillline property
        /// </summary>
          [XmlEnum("string kill line")]
          stringkillline,
        /// <summary>
        /// stringchokeline property
        /// </summary>
          [XmlEnum("string choke line")]
          stringchokeline,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PlaneAngleUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PlaneAngleUom xsd enumeration.")]
        public enum PlaneAngleUom 
        {
        /// <summary>
        /// Item0001seca property
        /// </summary>
          [XmlEnum("0.001 seca")]
          Item0001seca,
        /// <summary>
        /// ccgr property
        /// </summary>
          ccgr,
        /// <summary>
        /// cgr property
        /// </summary>
          cgr,
        /// <summary>
        /// dega property
        /// </summary>
          dega,
        /// <summary>
        /// gon property
        /// </summary>
          gon,
        /// <summary>
        /// krad property
        /// </summary>
          krad,
        /// <summary>
        /// mila property
        /// </summary>
          mila,
        /// <summary>
        /// mina property
        /// </summary>
          mina,
        /// <summary>
        /// Mrad property
        /// </summary>
          Mrad,
        /// <summary>
        /// mrad property
        /// </summary>
          mrad,
        /// <summary>
        /// rad property
        /// </summary>
          rad,
        /// <summary>
        /// rev property
        /// </summary>
          rev,
        /// <summary>
        /// seca property
        /// </summary>
          seca,
        /// <summary>
        /// urad property
        /// </summary>
          urad
        }
        /// <summary>
        /// This class represents the SupportCraftType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the SupportCraftType xsd enumeration.")]
        public enum SupportCraftType 
        {
        /// <summary>
        /// barge property
        /// </summary>
          barge,
        /// <summary>
        /// standbyboat property
        /// </summary>
          [XmlEnum("standby boat")]
          standbyboat,
        /// <summary>
        /// helicopter property
        /// </summary>
          helicopter,
        /// <summary>
        /// supplyboat property
        /// </summary>
          [XmlEnum("supply boat")]
          supplyboat,
        /// <summary>
        /// truck property
        /// </summary>
          truck,
        /// <summary>
        /// crewvehicle property
        /// </summary>
          [XmlEnum("crew vehicle")]
          crewvehicle,
        /// <summary>
        /// tugboat property
        /// </summary>
          [XmlEnum("tug boat")]
          tugboat
        }
        /// <summary>
        /// This class represents the LinearAccelerationUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LinearAccelerationUom xsd enumeration.")]
        public enum LinearAccelerationUom 
        {
        /// <summary>
        /// cms2 property
        /// </summary>
          [XmlEnum("cm/s2")]
          cms2,
        /// <summary>
        /// fts2 property
        /// </summary>
          [XmlEnum("ft/s2")]
          fts2,
        /// <summary>
        /// Gal property
        /// </summary>
          Gal,
        /// <summary>
        /// gn property
        /// </summary>
          gn,
        /// <summary>
        /// ins2 property
        /// </summary>
          [XmlEnum("in/s2")]
          ins2,
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("m/s2")]
          ms2,
        /// <summary>
        /// mGal property
        /// </summary>
          mGal,
        /// <summary>
        /// mgn property
        /// </summary>
          mgn
        }
        /// <summary>
        /// This class represents the MagneticFluxDensityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFluxDensityUom xsd enumeration.")]
        public enum MagneticFluxDensityUom 
        {
        /// <summary>
        /// cgauss property
        /// </summary>
          cgauss,
        /// <summary>
        /// cT property
        /// </summary>
          cT,
        /// <summary>
        /// dgauss property
        /// </summary>
          dgauss,
        /// <summary>
        /// dT property
        /// </summary>
          dT,
        /// <summary>
        /// Egauss property
        /// </summary>
          Egauss,
        /// <summary>
        /// ET property
        /// </summary>
          ET,
        /// <summary>
        /// fgauss property
        /// </summary>
          fgauss,
        /// <summary>
        /// fT property
        /// </summary>
          fT,
        /// <summary>
        /// gauss property
        /// </summary>
          gauss,
        /// <summary>
        /// Ggauss property
        /// </summary>
          Ggauss,
        /// <summary>
        /// GT property
        /// </summary>
          GT,
        /// <summary>
        /// kgauss property
        /// </summary>
          kgauss,
        /// <summary>
        /// kT property
        /// </summary>
          kT,
        /// <summary>
        /// mgauss property
        /// </summary>
          mgauss,
        /// <summary>
        /// Mgauss property
        /// </summary>
          Mgauss,
        /// <summary>
        /// mT property
        /// </summary>
          mT,
        /// <summary>
        /// ngauss property
        /// </summary>
          ngauss,
        /// <summary>
        /// nT property
        /// </summary>
          nT,
        /// <summary>
        /// pgauss property
        /// </summary>
          pgauss,
        /// <summary>
        /// pT property
        /// </summary>
          pT,
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// Tgauss property
        /// </summary>
          Tgauss,
        /// <summary>
        /// TT property
        /// </summary>
          TT,
        /// <summary>
        /// ugauss property
        /// </summary>
          ugauss,
        /// <summary>
        /// uT property
        /// </summary>
          uT
        }
        /// <summary>
        /// This class represents the TrajStationType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TrajStationType xsd enumeration.")]
        public enum TrajStationType 
        {
        /// <summary>
        /// azimuthonplane property
        /// </summary>
          [XmlEnum("azimuth on plane")]
          azimuthonplane,
        /// <summary>
        /// buildratetodeltaMD property
        /// </summary>
          [XmlEnum("buildrate to delta-MD")]
          buildratetodeltaMD,
        /// <summary>
        /// buildratetoINCL property
        /// </summary>
          [XmlEnum("buildrate to INCL")]
          buildratetoINCL,
        /// <summary>
        /// buildratetoMD property
        /// </summary>
          [XmlEnum("buildrate to MD")]
          buildratetoMD,
        /// <summary>
        /// buildrateandturnratetoAZI property
        /// </summary>
          [XmlEnum("buildrate and turnrate to AZI")]
          buildrateandturnratetoAZI,
        /// <summary>
        /// buildrateandturnratetodeltaMD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to delta-MD")]
          buildrateandturnratetodeltaMD,
        /// <summary>
        /// buildrateandturnratetoINCL property
        /// </summary>
          [XmlEnum("buildrate and turnrate to INCL")]
          buildrateandturnratetoINCL,
        /// <summary>
        /// buildrateandturnratetoINCLandAZI property
        /// </summary>
          [XmlEnum("buildrate and turnrate to INCL and AZI")]
          buildrateandturnratetoINCLandAZI,
        /// <summary>
        /// buildrateandturnratetoMD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to MD")]
          buildrateandturnratetoMD,
        /// <summary>
        /// buildrateandturnratetoTVD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to TVD")]
          buildrateandturnratetoTVD,
        /// <summary>
        /// buildrateTVD property
        /// </summary>
          [XmlEnum("buildrate TVD")]
          buildrateTVD,
        /// <summary>
        /// casingMD property
        /// </summary>
          [XmlEnum("casing MD")]
          casingMD,
        /// <summary>
        /// casingTVD property
        /// </summary>
          [XmlEnum("casing TVD")]
          casingTVD,
        /// <summary>
        /// DLS property
        /// </summary>
          DLS,
        /// <summary>
        /// DLStoAZIandMD property
        /// </summary>
          [XmlEnum("DLS to AZI and MD")]
          DLStoAZIandMD,
        /// <summary>
        /// DLStoAZITVD property
        /// </summary>
          [XmlEnum("DLS to AZI-TVD")]
          DLStoAZITVD,
        /// <summary>
        /// DLStoINCL property
        /// </summary>
          [XmlEnum("DLS to INCL")]
          DLStoINCL,
        /// <summary>
        /// DLStoINCLandAZI property
        /// </summary>
          [XmlEnum("DLS to INCL and AZI")]
          DLStoINCLandAZI,
        /// <summary>
        /// DLStoINCLandMD property
        /// </summary>
          [XmlEnum("DLS to INCL and MD")]
          DLStoINCLandMD,
        /// <summary>
        /// DLStoINCLandTVD property
        /// </summary>
          [XmlEnum("DLS to INCL and TVD")]
          DLStoINCLandTVD,
        /// <summary>
        /// DLStoNS property
        /// </summary>
          [XmlEnum("DLS to NS")]
          DLStoNS,
        /// <summary>
        /// DLSandtoolfacetoAZI property
        /// </summary>
          [XmlEnum("DLS and toolface to AZI")]
          DLSandtoolfacetoAZI,
        /// <summary>
        /// DLSandtoolfacetodeltaMD property
        /// </summary>
          [XmlEnum("DLS and toolface to delta-MD")]
          DLSandtoolfacetodeltaMD,
        /// <summary>
        /// DLSandtoolfacetoINCL property
        /// </summary>
          [XmlEnum("DLS and toolface to INCL")]
          DLSandtoolfacetoINCL,
        /// <summary>
        /// DLSandtoolfacetoINCLAZI property
        /// </summary>
          [XmlEnum("DLS and toolface to INCL-AZI")]
          DLSandtoolfacetoINCLAZI,
        /// <summary>
        /// DLSandtoolfacetoMD property
        /// </summary>
          [XmlEnum("DLS and toolface to MD")]
          DLSandtoolfacetoMD,
        /// <summary>
        /// DLSandtoolfacetoTVD property
        /// </summary>
          [XmlEnum("DLS and toolface to TVD")]
          DLSandtoolfacetoTVD,
        /// <summary>
        /// formationMD property
        /// </summary>
          [XmlEnum("formation MD")]
          formationMD,
        /// <summary>
        /// formationTVD property
        /// </summary>
          [XmlEnum("formation TVD")]
          formationTVD,
        /// <summary>
        /// holdtodeltaMD property
        /// </summary>
          [XmlEnum("hold to delta-MD")]
          holdtodeltaMD,
        /// <summary>
        /// holdtoMD property
        /// </summary>
          [XmlEnum("hold to MD")]
          holdtoMD,
        /// <summary>
        /// holdtoTVD property
        /// </summary>
          [XmlEnum("hold to TVD")]
          holdtoTVD,
        /// <summary>
        /// INCLAZIandTVD property
        /// </summary>
          [XmlEnum("INCL AZI and TVD")]
          INCLAZIandTVD,
        /// <summary>
        /// interpolated property
        /// </summary>
          interpolated,
        /// <summary>
        /// markerMD property
        /// </summary>
          [XmlEnum("marker MD")]
          markerMD,
        /// <summary>
        /// markerTVD property
        /// </summary>
          [XmlEnum("marker TVD")]
          markerTVD,
        /// <summary>
        /// MDandINCL property
        /// </summary>
          [XmlEnum("MD and INCL")]
          MDandINCL,
        /// <summary>
        /// MDINCLandAZI property
        /// </summary>
          [XmlEnum("MD INCL and AZI")]
          MDINCLandAZI,
        /// <summary>
        /// NEandTVD property
        /// </summary>
          [XmlEnum("N E and TVD")]
          NEandTVD,
        /// <summary>
        /// NSEWandTVD property
        /// </summary>
          [XmlEnum("NS EW and TVD")]
          NSEWandTVD,
        /// <summary>
        /// targetcenter property
        /// </summary>
          [XmlEnum("target center")]
          targetcenter,
        /// <summary>
        /// targetoffset property
        /// </summary>
          [XmlEnum("target offset")]
          targetoffset,
        /// <summary>
        /// tieinpoint property
        /// </summary>
          [XmlEnum("tie in point")]
          tieinpoint,
        /// <summary>
        /// turnratetoAZI property
        /// </summary>
          [XmlEnum("turnrate to AZI")]
          turnratetoAZI,
        /// <summary>
        /// turnratetodeltaMD property
        /// </summary>
          [XmlEnum("turnrate to delta-MD")]
          turnratetodeltaMD,
        /// <summary>
        /// turnratetoMD property
        /// </summary>
          [XmlEnum("turnrate to MD")]
          turnratetoMD,
        /// <summary>
        /// turnratetoTVD property
        /// </summary>
          [XmlEnum("turnrate to TVD")]
          turnratetoTVD,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the AnglePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AnglePerLengthUom xsd enumeration.")]
        public enum AnglePerLengthUom 
        {
        /// <summary>
        /// Item001degaft property
        /// </summary>
          [XmlEnum("0.01 dega/ft")]
          Item001degaft,
        /// <summary>
        /// Item130degaft property
        /// </summary>
          [XmlEnum("1/30 dega/ft")]
          Item130degaft,
        /// <summary>
        /// Item130degam property
        /// </summary>
          [XmlEnum("1/30 dega/m")]
          Item130degam,
        /// <summary>
        /// degaft property
        /// </summary>
          [XmlEnum("dega/ft")]
          degaft,
        /// <summary>
        /// degam property
        /// </summary>
          [XmlEnum("dega/m")]
          degam,
        /// <summary>
        /// radft property
        /// </summary>
          [XmlEnum("rad/ft")]
          radft,
        /// <summary>
        /// radm property
        /// </summary>
          [XmlEnum("rad/m")]
          radm,
        /// <summary>
        /// revft property
        /// </summary>
          [XmlEnum("rev/ft")]
          revft,
        /// <summary>
        /// revm property
        /// </summary>
          [XmlEnum("rev/m")]
          revm
        }
        /// <summary>
        /// This class represents the TrajStationStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TrajStationStatus xsd enumeration.")]
        public enum TrajStationStatus 
        {
        /// <summary>
        /// open property
        /// </summary>
          open,
        /// <summary>
        /// rejected property
        /// </summary>
          rejected,
        /// <summary>
        /// position property
        /// </summary>
          position
        }
        /// <summary>
        /// This class represents the RelatedTimeTypeRelativePosition xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        [Description("This class represents the RelatedTimeTypeRelativePosition xsd enumeration.")]
        public enum RelatedTimeTypeRelativePosition 
        {
        /// <summary>
        /// Before property
        /// </summary>
          Before,
        /// <summary>
        /// After property
        /// </summary>
          After,
        /// <summary>
        /// Begins property
        /// </summary>
          Begins,
        /// <summary>
        /// Ends property
        /// </summary>
          Ends,
        /// <summary>
        /// During property
        /// </summary>
          During,
        /// <summary>
        /// Equals property
        /// </summary>
          Equals,
        /// <summary>
        /// Contains property
        /// </summary>
          Contains,
        /// <summary>
        /// Overlaps property
        /// </summary>
          Overlaps,
        /// <summary>
        /// Meets property
        /// </summary>
          Meets,
        /// <summary>
        /// OverlappedBy property
        /// </summary>
          OverlappedBy,
        /// <summary>
        /// MetBy property
        /// </summary>
          MetBy,
        /// <summary>
        /// BegunBy property
        /// </summary>
          BegunBy,
        /// <summary>
        /// EndedBy property
        /// </summary>
          EndedBy
        }
        /// <summary>
        /// This class represents the AggregationType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        [Description("This class represents the AggregationType xsd enumeration.")]
        public enum AggregationType 
        {
        /// <summary>
        /// set property
        /// </summary>
          set,
        /// <summary>
        /// bag property
        /// </summary>
          bag,
        /// <summary>
        /// sequence property
        /// </summary>
          sequence,
        /// <summary>
        /// array property
        /// </summary>
          array,
        /// <summary>
        /// record property
        /// </summary>
          record,
        /// <summary>
        /// table property
        /// </summary>
          table
        }
        /// <summary>
        /// This class represents the ErrorPropagationMode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ErrorPropagationMode xsd enumeration.")]
        public enum ErrorPropagationMode 
        {
        /// <summary>
        /// B property
        /// </summary>
          B,
        /// <summary>
        /// R property
        /// </summary>
          R,
        /// <summary>
        /// S property
        /// </summary>
          S,
        /// <summary>
        /// W property
        /// </summary>
          W,
        /// <summary>
        /// G property
        /// </summary>
          G
        }
        /// <summary>
        /// This class represents the ErrorModelMisalignmentMode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ErrorModelMisalignmentMode xsd enumeration.")]
        public enum ErrorModelMisalignmentMode 
        {
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// Item1 property
        /// </summary>
          [XmlEnum("1")]
          Item1,
        /// <summary>
        /// Item2 property
        /// </summary>
          [XmlEnum("2")]
          Item2,
        /// <summary>
        /// Item3 property
        /// </summary>
          [XmlEnum("3")]
          Item3
        }
        /// <summary>
        /// This class represents the AuthorizationStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the AuthorizationStatus xsd enumeration.")]
        public enum AuthorizationStatus 
        {
        /// <summary>
        /// draft property
        /// </summary>
          draft,
        /// <summary>
        /// authorized property
        /// </summary>
          authorized,
        /// <summary>
        /// superceded property
        /// </summary>
          superceded,
        /// <summary>
        /// withdrawn property
        /// </summary>
          withdrawn
        }
        /// <summary>
        /// This class represents the OtherConnectionTypes xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the OtherConnectionTypes xsd enumeration.")]
        public enum OtherConnectionTypes 
        {
        /// <summary>
        /// cementedinplace property
        /// </summary>
          [XmlEnum("cemented-in-place")]
          cementedinplace,
        /// <summary>
        /// dogscompressionfitsealed property
        /// </summary>
          [XmlEnum("dogscompressionfit-sealed")]
          dogscompressionfitsealed
        }
        /// <summary>
        /// This class represents the RodConnectionTypes xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RodConnectionTypes xsd enumeration.")]
        public enum RodConnectionTypes 
        {
        /// <summary>
        /// eatingnipplecup property
        /// </summary>
          [XmlEnum("eating nipple-cup")]
          eatingnipplecup,
        /// <summary>
        /// latched property
        /// </summary>
          latched,
        /// <summary>
        /// seatingnipplemechanical property
        /// </summary>
          [XmlEnum("seating nipple-mechanical")]
          seatingnipplemechanical,
        /// <summary>
        /// slipfitsealed property
        /// </summary>
          [XmlEnum("slipfit sealed")]
          slipfitsealed,
        /// <summary>
        /// threaded property
        /// </summary>
          threaded,
        /// <summary>
        /// welded property
        /// </summary>
          welded
        }
        /// <summary>
        /// This class represents the TubingConnectionTypes xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TubingConnectionTypes xsd enumeration.")]
        public enum TubingConnectionTypes 
        {
        /// <summary>
        /// dogscompressionfitnotsealed property
        /// </summary>
          [XmlEnum("dogscompressionfit-notsealed")]
          dogscompressionfitnotsealed,
        /// <summary>
        /// landed property
        /// </summary>
          landed,
        /// <summary>
        /// latched property
        /// </summary>
          latched,
        /// <summary>
        /// radial property
        /// </summary>
          radial,
        /// <summary>
        /// selfsealingthreaded property
        /// </summary>
          [XmlEnum("selfsealing-threaded")]
          selfsealingthreaded,
        /// <summary>
        /// slipfitsealed property
        /// </summary>
          [XmlEnum("slipfit-sealed")]
          slipfitsealed,
        /// <summary>
        /// threaded property
        /// </summary>
          threaded,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the CasingConnectionTypes xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the CasingConnectionTypes xsd enumeration.")]
        public enum CasingConnectionTypes 
        {
        /// <summary>
        /// landed property
        /// </summary>
          landed,
        /// <summary>
        /// selfsealingthreaded property
        /// </summary>
          [XmlEnum("self-sealing-threaded")]
          selfsealingthreaded,
        /// <summary>
        /// welded property
        /// </summary>
          welded
        }
        /// <summary>
        /// This class represents the ConnectionPosition xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ConnectionPosition xsd enumeration.")]
        public enum ConnectionPosition 
        {
        /// <summary>
        /// both property
        /// </summary>
          both,
        /// <summary>
        /// bottom property
        /// </summary>
          bottom,
        /// <summary>
        /// top property
        /// </summary>
          top,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the VolumePerMassUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerMassUom xsd enumeration.")]
        public enum VolumePerMassUom 
        {
        /// <summary>
        /// Item001Lkg property
        /// </summary>
          [XmlEnum("0.01 L/kg")]
          Item001Lkg,
        /// <summary>
        /// bbltonUK property
        /// </summary>
          [XmlEnum("bbl/ton[UK]")]
          bbltonUK,
        /// <summary>
        /// bbltonUS property
        /// </summary>
          [XmlEnum("bbl/ton[US]")]
          bbltonUS,
        /// <summary>
        /// cm3g property
        /// </summary>
          [XmlEnum("cm3/g")]
          cm3g,
        /// <summary>
        /// dm3kg property
        /// </summary>
          [XmlEnum("dm3/kg")]
          dm3kg,
        /// <summary>
        /// dm3t property
        /// </summary>
          [XmlEnum("dm3/t")]
          dm3t,
        /// <summary>
        /// ft3kg property
        /// </summary>
          [XmlEnum("ft3/kg")]
          ft3kg,
        /// <summary>
        /// ft3lbm property
        /// </summary>
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        /// <summary>
        /// ft3sack94lbm property
        /// </summary>
          [XmlEnum("ft3/sack[94lbm]")]
          ft3sack94lbm,
        /// <summary>
        /// galUKlbm property
        /// </summary>
          [XmlEnum("gal[UK]/lbm")]
          galUKlbm,
        /// <summary>
        /// galUSlbm property
        /// </summary>
          [XmlEnum("gal[US]/lbm")]
          galUSlbm,
        /// <summary>
        /// galUSsack94lbm property
        /// </summary>
          [XmlEnum("gal[US]/sack[94lbm]")]
          galUSsack94lbm,
        /// <summary>
        /// galUStonUK property
        /// </summary>
          [XmlEnum("gal[US]/ton[UK]")]
          galUStonUK,
        /// <summary>
        /// galUStonUS property
        /// </summary>
          [XmlEnum("gal[US]/ton[US]")]
          galUStonUS,
        /// <summary>
        /// Lkg property
        /// </summary>
          [XmlEnum("L/kg")]
          Lkg,
        /// <summary>
        /// Lt property
        /// </summary>
          [XmlEnum("L/t")]
          Lt,
        /// <summary>
        /// LtonUK property
        /// </summary>
          [XmlEnum("L/ton[UK]")]
          LtonUK,
        /// <summary>
        /// m3g property
        /// </summary>
          [XmlEnum("m3/g")]
          m3g,
        /// <summary>
        /// m3kg property
        /// </summary>
          [XmlEnum("m3/kg")]
          m3kg,
        /// <summary>
        /// m3t property
        /// </summary>
          [XmlEnum("m3/t")]
          m3t,
        /// <summary>
        /// m3tonUK property
        /// </summary>
          [XmlEnum("m3/ton[UK]")]
          m3tonUK,
        /// <summary>
        /// m3tonUS property
        /// </summary>
          [XmlEnum("m3/ton[US]")]
          m3tonUS
        }
        /// <summary>
        /// This class represents the WellboreFluidLocation xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellboreFluidLocation xsd enumeration.")]
        public enum WellboreFluidLocation 
        {
        /// <summary>
        /// annulus property
        /// </summary>
          annulus,
        /// <summary>
        /// deadend property
        /// </summary>
          deadend,
        /// <summary>
        /// inpipe property
        /// </summary>
          [XmlEnum("in pipe")]
          inpipe,
        /// <summary>
        /// rathole property
        /// </summary>
          [XmlEnum("rat hole")]
          rathole
        }
        /// <summary>
        /// This class represents the HoleCasingType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the HoleCasingType xsd enumeration.")]
        public enum HoleCasingType 
        {
        /// <summary>
        /// blowoutpreventer property
        /// </summary>
          [XmlEnum("blow out preventer")]
          blowoutpreventer,
        /// <summary>
        /// casing property
        /// </summary>
          casing,
        /// <summary>
        /// conductor property
        /// </summary>
          conductor,
        /// <summary>
        /// curvedconductor property
        /// </summary>
          [XmlEnum("curved conductor")]
          curvedconductor,
        /// <summary>
        /// liner property
        /// </summary>
          liner,
        /// <summary>
        /// openhole property
        /// </summary>
          [XmlEnum("open hole")]
          openhole,
        /// <summary>
        /// riser property
        /// </summary>
          riser,
        /// <summary>
        /// tubing property
        /// </summary>
          tubing
        }
        /// <summary>
        /// This class represents the EtpDataType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the EtpDataType xsd enumeration.")]
        public enum EtpDataType 
        {
        /// <summary>
        /// boolean property
        /// </summary>
          boolean,
        /// <summary>
        /// bytes property
        /// </summary>
          bytes,
        /// <summary>
        /// double property
        /// </summary>
          @double,
        /// <summary>
        /// float property
        /// </summary>
          @float,
        /// <summary>
        /// int property
        /// </summary>
          @int,
        /// <summary>
        /// long property
        /// </summary>
          @long,
        /// <summary>
        /// null property
        /// </summary>
          @null,
        /// <summary>
        /// string property
        /// </summary>
          @string,
        /// <summary>
        /// vector property
        /// </summary>
          vector
        }
        /// <summary>
        /// This class represents the ChannelIndexType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ChannelIndexType xsd enumeration.")]
        public enum ChannelIndexType 
        {
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// trueverticaldepth property
        /// </summary>
          [XmlEnum("true vertical depth")]
          trueverticaldepth,
        /// <summary>
        /// passindexeddepth property
        /// </summary>
          [XmlEnum("pass indexed depth")]
          passindexeddepth,
        /// <summary>
        /// datetime property
        /// </summary>
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// elapsedtime property
        /// </summary>
          [XmlEnum("elapsed time")]
          elapsedtime,
        /// <summary>
        /// temperature property
        /// </summary>
          temperature,
        /// <summary>
        /// pressure property
        /// </summary>
          pressure
        }
        /// <summary>
        /// This class represents the IndexDirection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the IndexDirection xsd enumeration.")]
        public enum IndexDirection 
        {
        /// <summary>
        /// decreasing property
        /// </summary>
          decreasing,
        /// <summary>
        /// increasing property
        /// </summary>
          increasing
        }
        /// <summary>
        /// This class represents the MudClass xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MudClass xsd enumeration.")]
        public enum MudClass 
        {
        /// <summary>
        /// oilbased property
        /// </summary>
          [XmlEnum("oil-based")]
          oilbased,
        /// <summary>
        /// waterbased property
        /// </summary>
          [XmlEnum("water-based")]
          waterbased,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// pneumatic property
        /// </summary>
          pneumatic
        }
        /// <summary>
        /// This class represents the ReadingKind xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ReadingKind xsd enumeration.")]
        public enum ReadingKind 
        {
        /// <summary>
        /// measured property
        /// </summary>
          measured,
        /// <summary>
        /// estimated property
        /// </summary>
          estimated,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ElectricPotentialDifferenceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricPotentialDifferenceUom xsd enumeration.")]
        public enum ElectricPotentialDifferenceUom 
        {
        /// <summary>
        /// cV property
        /// </summary>
          cV,
        /// <summary>
        /// dV property
        /// </summary>
          dV,
        /// <summary>
        /// fV property
        /// </summary>
          fV,
        /// <summary>
        /// GV property
        /// </summary>
          GV,
        /// <summary>
        /// kV property
        /// </summary>
          kV,
        /// <summary>
        /// mV property
        /// </summary>
          mV,
        /// <summary>
        /// MV property
        /// </summary>
          MV,
        /// <summary>
        /// nV property
        /// </summary>
          nV,
        /// <summary>
        /// pV property
        /// </summary>
          pV,
        /// <summary>
        /// TV property
        /// </summary>
          TV,
        /// <summary>
        /// uV property
        /// </summary>
          uV,
        /// <summary>
        /// V property
        /// </summary>
          V
        }
        /// <summary>
        /// This class represents the WellboreType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellboreType xsd enumeration.")]
        public enum WellboreType 
        {
        /// <summary>
        /// bypass property
        /// </summary>
          bypass,
        /// <summary>
        /// initial property
        /// </summary>
          initial,
        /// <summary>
        /// redrill property
        /// </summary>
          redrill,
        /// <summary>
        /// reentry property
        /// </summary>
          reentry,
        /// <summary>
        /// respud property
        /// </summary>
          respud,
        /// <summary>
        /// sidetrack property
        /// </summary>
          sidetrack,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PresTestType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PresTestType xsd enumeration.")]
        public enum PresTestType 
        {
        /// <summary>
        /// leakofftest property
        /// </summary>
          [XmlEnum("leak off test")]
          leakofftest,
        /// <summary>
        /// formationintegritytest property
        /// </summary>
          [XmlEnum("formation integrity test")]
          formationintegritytest,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellControlIncidentType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellControlIncidentType xsd enumeration.")]
        public enum WellControlIncidentType 
        {
        /// <summary>
        /// shallowgaskick property
        /// </summary>
          [XmlEnum("shallow gas kick")]
          shallowgaskick,
        /// <summary>
        /// waterkick property
        /// </summary>
          [XmlEnum("water kick")]
          waterkick,
        /// <summary>
        /// oilkick property
        /// </summary>
          [XmlEnum("oil kick")]
          oilkick,
        /// <summary>
        /// gaskick property
        /// </summary>
          [XmlEnum("gas kick")]
          gaskick,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellKillingProcedureType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellKillingProcedureType xsd enumeration.")]
        public enum WellKillingProcedureType 
        {
        /// <summary>
        /// drillersmethod property
        /// </summary>
          [XmlEnum("drillers method")]
          drillersmethod,
        /// <summary>
        /// waitandweight property
        /// </summary>
          [XmlEnum("wait and weight")]
          waitandweight,
        /// <summary>
        /// bullheading property
        /// </summary>
          bullheading,
        /// <summary>
        /// lubricateandbleed property
        /// </summary>
          [XmlEnum("lubricate and bleed")]
          lubricateandbleed,
        /// <summary>
        /// forwardcirculation property
        /// </summary>
          [XmlEnum("forward circulation")]
          forwardcirculation,
        /// <summary>
        /// reversecirculation property
        /// </summary>
          [XmlEnum("reverse circulation")]
          reversecirculation,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellTestType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellTestType xsd enumeration.")]
        public enum WellTestType 
        {
        /// <summary>
        /// drillstemtest property
        /// </summary>
          [XmlEnum("drill stem test")]
          drillstemtest,
        /// <summary>
        /// productiontest property
        /// </summary>
          [XmlEnum("production test")]
          productiontest,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the InnerBarrelType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the InnerBarrelType xsd enumeration.")]
        public enum InnerBarrelType 
        {
        /// <summary>
        /// undifferented property
        /// </summary>
          undifferented,
        /// <summary>
        /// aluminum property
        /// </summary>
          aluminum,
        /// <summary>
        /// gel property
        /// </summary>
          gel,
        /// <summary>
        /// fiberglass property
        /// </summary>
          fiberglass,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DrillActivityClassType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DrillActivityClassType xsd enumeration.")]
        public enum DrillActivityClassType 
        {
        /// <summary>
        /// planned property
        /// </summary>
          planned,
        /// <summary>
        /// unplanned property
        /// </summary>
          unplanned,
        /// <summary>
        /// downtime property
        /// </summary>
          downtime,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StateDetailActivity xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StateDetailActivity xsd enumeration.")]
        public enum StateDetailActivity 
        {
        /// <summary>
        /// injury property
        /// </summary>
          injury,
        /// <summary>
        /// operationfailed property
        /// </summary>
          [XmlEnum("operation failed")]
          operationfailed,
        /// <summary>
        /// kick property
        /// </summary>
          kick,
        /// <summary>
        /// circulationloss property
        /// </summary>
          [XmlEnum("circulation loss")]
          circulationloss,
        /// <summary>
        /// mudloss property
        /// </summary>
          [XmlEnum("mud loss")]
          mudloss,
        /// <summary>
        /// stuckequipment property
        /// </summary>
          [XmlEnum("stuck equipment")]
          stuckequipment,
        /// <summary>
        /// equipmentfailure property
        /// </summary>
          [XmlEnum("equipment failure")]
          equipmentfailure,
        /// <summary>
        /// equipmenthang property
        /// </summary>
          [XmlEnum("equipment hang")]
          equipmenthang,
        /// <summary>
        /// success property
        /// </summary>
          success,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemState xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ItemState xsd enumeration.")]
        public enum ItemState 
        {
        /// <summary>
        /// actual property
        /// </summary>
          actual,
        /// <summary>
        /// model property
        /// </summary>
          model,
        /// <summary>
        /// plan property
        /// </summary>
          plan,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NozzleType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the NozzleType xsd enumeration.")]
        public enum NozzleType 
        {
        /// <summary>
        /// extended property
        /// </summary>
          extended,
        /// <summary>
        /// normal property
        /// </summary>
          normal,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DeflectionMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DeflectionMethod xsd enumeration.")]
        public enum DeflectionMethod 
        {
        /// <summary>
        /// hybrid property
        /// </summary>
          hybrid,
        /// <summary>
        /// pointbit property
        /// </summary>
          [XmlEnum("point bit")]
          pointbit,
        /// <summary>
        /// pushbit property
        /// </summary>
          [XmlEnum("push bit")]
          pushbit
        }
        /// <summary>
        /// This class represents the MeasurementType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MeasurementType xsd enumeration.")]
        public enum MeasurementType 
        {
        /// <summary>
        /// acceleration property
        /// </summary>
          acceleration,
        /// <summary>
        /// acousticcaliper property
        /// </summary>
          [XmlEnum("acoustic caliper")]
          acousticcaliper,
        /// <summary>
        /// acousticcasingcollarlocator property
        /// </summary>
          [XmlEnum("acoustic casing collar locator")]
          acousticcasingcollarlocator,
        /// <summary>
        /// acousticimpedance property
        /// </summary>
          [XmlEnum("acoustic impedance")]
          acousticimpedance,
        /// <summary>
        /// acousticporosity property
        /// </summary>
          [XmlEnum("acoustic porosity")]
          acousticporosity,
        /// <summary>
        /// acousticvelocity property
        /// </summary>
          [XmlEnum("acoustic velocity")]
          acousticvelocity,
        /// <summary>
        /// acousticwavematrixtraveltime property
        /// </summary>
          [XmlEnum("acoustic wave matrix travel time")]
          acousticwavematrixtraveltime,
        /// <summary>
        /// acousticwavetraveltime property
        /// </summary>
          [XmlEnum("acoustic wave travel time")]
          acousticwavetraveltime,
        /// <summary>
        /// amplitude property
        /// </summary>
          amplitude,
        /// <summary>
        /// amplitudeofacousticwave property
        /// </summary>
          [XmlEnum("amplitude of acoustic wave")]
          amplitudeofacousticwave,
        /// <summary>
        /// amplitudeofEMwave property
        /// </summary>
          [XmlEnum("amplitude of E-M wave")]
          amplitudeofEMwave,
        /// <summary>
        /// amplituderatio property
        /// </summary>
          [XmlEnum("amplitude ratio")]
          amplituderatio,
        /// <summary>
        /// area property
        /// </summary>
          area,
        /// <summary>
        /// attenuation property
        /// </summary>
          attenuation,
        /// <summary>
        /// attenuationofacousticwave property
        /// </summary>
          [XmlEnum("attenuation of acoustic wave")]
          attenuationofacousticwave,
        /// <summary>
        /// attenuationofEMwave property
        /// </summary>
          [XmlEnum("attenuation of E-M wave")]
          attenuationofEMwave,
        /// <summary>
        /// auxiliary property
        /// </summary>
          auxiliary,
        /// <summary>
        /// averageporosity property
        /// </summary>
          [XmlEnum("average porosity")]
          averageporosity,
        /// <summary>
        /// azimuth property
        /// </summary>
          azimuth,
        /// <summary>
        /// baritemudcorrection property
        /// </summary>
          [XmlEnum("barite mud correction")]
          baritemudcorrection,
        /// <summary>
        /// bedthicknesscorrection property
        /// </summary>
          [XmlEnum("bed thickness correction")]
          bedthicknesscorrection,
        /// <summary>
        /// bitsize property
        /// </summary>
          [XmlEnum("bit size")]
          bitsize,
        /// <summary>
        /// blocked property
        /// </summary>
          blocked,
        /// <summary>
        /// boreholeenvironmentcorrection property
        /// </summary>
          [XmlEnum("borehole environment correction")]
          boreholeenvironmentcorrection,
        /// <summary>
        /// boreholefluidcorrection property
        /// </summary>
          [XmlEnum("borehole fluid correction")]
          boreholefluidcorrection,
        /// <summary>
        /// boreholesizecorrection property
        /// </summary>
          [XmlEnum("borehole size correction")]
          boreholesizecorrection,
        /// <summary>
        /// bromidemudcorrection property
        /// </summary>
          [XmlEnum("bromide mud correction")]
          bromidemudcorrection,
        /// <summary>
        /// bulkcompressibility property
        /// </summary>
          [XmlEnum("bulk compressibility")]
          bulkcompressibility,
        /// <summary>
        /// bulkdensity property
        /// </summary>
          [XmlEnum("bulk density")]
          bulkdensity,
        /// <summary>
        /// bulkvolume property
        /// </summary>
          [XmlEnum("bulk volume")]
          bulkvolume,
        /// <summary>
        /// bulkvolumegas property
        /// </summary>
          [XmlEnum("bulk volume gas")]
          bulkvolumegas,
        /// <summary>
        /// bulkvolumehydrocarbon property
        /// </summary>
          [XmlEnum("bulk volume hydrocarbon")]
          bulkvolumehydrocarbon,
        /// <summary>
        /// bulkvolumeoil property
        /// </summary>
          [XmlEnum("bulk volume oil")]
          bulkvolumeoil,
        /// <summary>
        /// bulkvolumewater property
        /// </summary>
          [XmlEnum("bulk volume water")]
          bulkvolumewater,
        /// <summary>
        /// COratio property
        /// </summary>
          [XmlEnum("C/O ratio")]
          COratio,
        /// <summary>
        /// caliper property
        /// </summary>
          caliper,
        /// <summary>
        /// casedholecorrection property
        /// </summary>
          [XmlEnum("cased hole correction")]
          casedholecorrection,
        /// <summary>
        /// casingcollarlocator property
        /// </summary>
          [XmlEnum("casing collar locator")]
          casingcollarlocator,
        /// <summary>
        /// casingcorrection property
        /// </summary>
          [XmlEnum("casing correction")]
          casingcorrection,
        /// <summary>
        /// casingdiametercorrection property
        /// </summary>
          [XmlEnum("casing diameter correction")]
          casingdiametercorrection,
        /// <summary>
        /// casinginspection property
        /// </summary>
          [XmlEnum("casing inspection")]
          casinginspection,
        /// <summary>
        /// casingthicknesscorrection property
        /// </summary>
          [XmlEnum("casing thickness correction")]
          casingthicknesscorrection,
        /// <summary>
        /// casingweightcorrection property
        /// </summary>
          [XmlEnum("casing weight correction")]
          casingweightcorrection,
        /// <summary>
        /// cementcorrection property
        /// </summary>
          [XmlEnum("cement correction")]
          cementcorrection,
        /// <summary>
        /// cementdensitycorrection property
        /// </summary>
          [XmlEnum("cement density correction")]
          cementdensitycorrection,
        /// <summary>
        /// cementevaluation property
        /// </summary>
          [XmlEnum("cement evaluation")]
          cementevaluation,
        /// <summary>
        /// cementthicknesscorrection property
        /// </summary>
          [XmlEnum("cement thickness correction")]
          cementthicknesscorrection,
        /// <summary>
        /// cementtypecorrection property
        /// </summary>
          [XmlEnum("cement type correction")]
          cementtypecorrection,
        /// <summary>
        /// CHdensityporosity property
        /// </summary>
          [XmlEnum("CH density porosity")]
          CHdensityporosity,
        /// <summary>
        /// CHdolomitedensityporosity property
        /// </summary>
          [XmlEnum("CH dolomite density porosity")]
          CHdolomitedensityporosity,
        /// <summary>
        /// CHdolomiteneutronporosity property
        /// </summary>
          [XmlEnum("CH dolomite neutron porosity")]
          CHdolomiteneutronporosity,
        /// <summary>
        /// CHlimestonedensityporosity property
        /// </summary>
          [XmlEnum("CH limestone density porosity")]
          CHlimestonedensityporosity,
        /// <summary>
        /// CHlimestoneneutronporosity property
        /// </summary>
          [XmlEnum("CH limestone neutron porosity")]
          CHlimestoneneutronporosity,
        /// <summary>
        /// CHneutronporosity property
        /// </summary>
          [XmlEnum("CH neutron porosity")]
          CHneutronporosity,
        /// <summary>
        /// CHsandstonedensityporosity property
        /// </summary>
          [XmlEnum("CH sandstone density porosity")]
          CHsandstonedensityporosity,
        /// <summary>
        /// CHsandstoneneutronporosity property
        /// </summary>
          [XmlEnum("CH sandstone neutron porosity")]
          CHsandstoneneutronporosity,
        /// <summary>
        /// compressionalwavedolomiteporosity property
        /// </summary>
          [XmlEnum("compressional wave dolomite porosity")]
          compressionalwavedolomiteporosity,
        /// <summary>
        /// compressionalwavelimestoneporosity property
        /// </summary>
          [XmlEnum("compressional wave limestone porosity")]
          compressionalwavelimestoneporosity,
        /// <summary>
        /// compressionalwavematrixtraveltime property
        /// </summary>
          [XmlEnum("compressional wave matrix travel time")]
          compressionalwavematrixtraveltime,
        /// <summary>
        /// compressionalwavesandstoneporosity property
        /// </summary>
          [XmlEnum("compressional wave sandstone porosity")]
          compressionalwavesandstoneporosity,
        /// <summary>
        /// compressionalwavetraveltime property
        /// </summary>
          [XmlEnum("compressional wave travel time")]
          compressionalwavetraveltime,
        /// <summary>
        /// conductivity property
        /// </summary>
          conductivity,
        /// <summary>
        /// conductivityfromattenuation property
        /// </summary>
          [XmlEnum("conductivity from attenuation")]
          conductivityfromattenuation,
        /// <summary>
        /// conductivityfromphaseshift property
        /// </summary>
          [XmlEnum("conductivity from phase shift")]
          conductivityfromphaseshift,
        /// <summary>
        /// connatewaterconductivity property
        /// </summary>
          [XmlEnum("connate water conductivity")]
          connatewaterconductivity,
        /// <summary>
        /// connatewaterresistivity property
        /// </summary>
          [XmlEnum("connate water resistivity")]
          connatewaterresistivity,
        /// <summary>
        /// conventionalcoreporosity property
        /// </summary>
          [XmlEnum("conventional core porosity")]
          conventionalcoreporosity,
        /// <summary>
        /// corematrixdensity property
        /// </summary>
          [XmlEnum("core matrix density")]
          corematrixdensity,
        /// <summary>
        /// corepermeability property
        /// </summary>
          [XmlEnum("core permeability")]
          corepermeability,
        /// <summary>
        /// coreporosity property
        /// </summary>
          [XmlEnum("core porosity")]
          coreporosity,
        /// <summary>
        /// corrected property
        /// </summary>
          corrected,
        /// <summary>
        /// countrate property
        /// </summary>
          [XmlEnum("count rate")]
          countrate,
        /// <summary>
        /// countrateratio property
        /// </summary>
          [XmlEnum("count rate ratio")]
          countrateratio,
        /// <summary>
        /// crossplotporosity property
        /// </summary>
          [XmlEnum("cross plot porosity")]
          crossplotporosity,
        /// <summary>
        /// decaytime property
        /// </summary>
          [XmlEnum("decay time")]
          decaytime,
        /// <summary>
        /// deepconductivity property
        /// </summary>
          [XmlEnum("deep conductivity")]
          deepconductivity,
        /// <summary>
        /// deepinductionconductivity property
        /// </summary>
          [XmlEnum("deep induction conductivity")]
          deepinductionconductivity,
        /// <summary>
        /// deepinductionresistivity property
        /// </summary>
          [XmlEnum("deep induction resistivity")]
          deepinductionresistivity,
        /// <summary>
        /// deeplaterologconductivity property
        /// </summary>
          [XmlEnum("deep laterolog conductivity")]
          deeplaterologconductivity,
        /// <summary>
        /// deeplaterologresistivity property
        /// </summary>
          [XmlEnum("deep laterolog resistivity")]
          deeplaterologresistivity,
        /// <summary>
        /// deepresistivity property
        /// </summary>
          [XmlEnum("deep resistivity")]
          deepresistivity,
        /// <summary>
        /// density property
        /// </summary>
          density,
        /// <summary>
        /// densityporosity property
        /// </summary>
          [XmlEnum("density porosity")]
          densityporosity,
        /// <summary>
        /// depth property
        /// </summary>
          depth,
        /// <summary>
        /// depthadjusted property
        /// </summary>
          [XmlEnum("depth adjusted")]
          depthadjusted,
        /// <summary>
        /// depthderivedfromvelocity property
        /// </summary>
          [XmlEnum("depth derived from velocity")]
          depthderivedfromvelocity,
        /// <summary>
        /// deviation property
        /// </summary>
          deviation,
        /// <summary>
        /// dielectric property
        /// </summary>
          dielectric,
        /// <summary>
        /// diffusioncorrection property
        /// </summary>
          [XmlEnum("diffusion correction")]
          diffusioncorrection,
        /// <summary>
        /// dip property
        /// </summary>
          dip,
        /// <summary>
        /// dipmeter property
        /// </summary>
          dipmeter,
        /// <summary>
        /// dipmeterconductivity property
        /// </summary>
          [XmlEnum("dipmeter conductivity")]
          dipmeterconductivity,
        /// <summary>
        /// dipmeterresistivity property
        /// </summary>
          [XmlEnum("dipmeter resistivity")]
          dipmeterresistivity,
        /// <summary>
        /// dolomiteacousticporosity property
        /// </summary>
          [XmlEnum("dolomite acoustic porosity")]
          dolomiteacousticporosity,
        /// <summary>
        /// dolomitedensityporosity property
        /// </summary>
          [XmlEnum("dolomite density porosity")]
          dolomitedensityporosity,
        /// <summary>
        /// dolomiteneutronporosity property
        /// </summary>
          [XmlEnum("dolomite neutron porosity")]
          dolomiteneutronporosity,
        /// <summary>
        /// edited property
        /// </summary>
          edited,
        /// <summary>
        /// effectiveporosity property
        /// </summary>
          [XmlEnum("effective porosity")]
          effectiveporosity,
        /// <summary>
        /// electriccurrent property
        /// </summary>
          [XmlEnum("electric current")]
          electriccurrent,
        /// <summary>
        /// electricpotential property
        /// </summary>
          [XmlEnum("electric potential")]
          electricpotential,
        /// <summary>
        /// electromagneticwavematrixtraveltime property
        /// </summary>
          [XmlEnum("electromagnetic wave matrix travel time")]
          electromagneticwavematrixtraveltime,
        /// <summary>
        /// electromagneticwavetraveltime property
        /// </summary>
          [XmlEnum("electromagnetic wave travel time")]
          electromagneticwavetraveltime,
        /// <summary>
        /// element property
        /// </summary>
          element,
        /// <summary>
        /// elementalratio property
        /// </summary>
          [XmlEnum("elemental ratio")]
          elementalratio,
        /// <summary>
        /// enhanced property
        /// </summary>
          enhanced,
        /// <summary>
        /// filtered property
        /// </summary>
          filtered,
        /// <summary>
        /// flowmeter property
        /// </summary>
          flowmeter,
        /// <summary>
        /// fluiddensity property
        /// </summary>
          [XmlEnum("fluid density")]
          fluiddensity,
        /// <summary>
        /// fluidvelocity property
        /// </summary>
          [XmlEnum("fluid velocity")]
          fluidvelocity,
        /// <summary>
        /// fluidviscosity property
        /// </summary>
          [XmlEnum("fluid viscosity")]
          fluidviscosity,
        /// <summary>
        /// flushedzoneconductivity property
        /// </summary>
          [XmlEnum("flushed zone conductivity")]
          flushedzoneconductivity,
        /// <summary>
        /// flushedzoneresistivity property
        /// </summary>
          [XmlEnum("flushed zone resistivity")]
          flushedzoneresistivity,
        /// <summary>
        /// flushedzonesaturation property
        /// </summary>
          [XmlEnum("flushed zone saturation")]
          flushedzonesaturation,
        /// <summary>
        /// force property
        /// </summary>
          force,
        /// <summary>
        /// formationdensitycorrection property
        /// </summary>
          [XmlEnum("formation density correction")]
          formationdensitycorrection,
        /// <summary>
        /// formationpropertiescorrection property
        /// </summary>
          [XmlEnum("formation properties correction")]
          formationpropertiescorrection,
        /// <summary>
        /// formationsalinitycorrection property
        /// </summary>
          [XmlEnum("formation salinity correction")]
          formationsalinitycorrection,
        /// <summary>
        /// formationsaturationcorrection property
        /// </summary>
          [XmlEnum("formation saturation correction")]
          formationsaturationcorrection,
        /// <summary>
        /// formationvolumefactorcorrection property
        /// </summary>
          [XmlEnum("formation volume factor correction")]
          formationvolumefactorcorrection,
        /// <summary>
        /// formationwaterdensitycorrection property
        /// </summary>
          [XmlEnum("formation water density correction")]
          formationwaterdensitycorrection,
        /// <summary>
        /// formationwatersaturationcorrection property
        /// </summary>
          [XmlEnum("formation water saturation correction")]
          formationwatersaturationcorrection,
        /// <summary>
        /// freefluidindex property
        /// </summary>
          [XmlEnum("free fluid index")]
          freefluidindex,
        /// <summary>
        /// frictioneffectcorrection property
        /// </summary>
          [XmlEnum("friction effect correction")]
          frictioneffectcorrection,
        /// <summary>
        /// gammaray property
        /// </summary>
          [XmlEnum("gamma ray")]
          gammaray,
        /// <summary>
        /// gammarayminusuranium property
        /// </summary>
          [XmlEnum("gamma ray minus uranium")]
          gammarayminusuranium,
        /// <summary>
        /// gassaturation property
        /// </summary>
          [XmlEnum("gas saturation")]
          gassaturation,
        /// <summary>
        /// gradiomanometer property
        /// </summary>
          gradiomanometer,
        /// <summary>
        /// highfrequencyconductivity property
        /// </summary>
          [XmlEnum("high frequency conductivity")]
          highfrequencyconductivity,
        /// <summary>
        /// highfrequencyelectromagnetic property
        /// </summary>
          [XmlEnum("high frequency electromagnetic")]
          highfrequencyelectromagnetic,
        /// <summary>
        /// highfrequencyelectromagneticporosity property
        /// </summary>
          [XmlEnum("high frequency electromagnetic porosity")]
          highfrequencyelectromagneticporosity,
        /// <summary>
        /// highfrequencyEMphaseshift property
        /// </summary>
          [XmlEnum("high frequency E-M phase shift")]
          highfrequencyEMphaseshift,
        /// <summary>
        /// highfrequencyresistivity property
        /// </summary>
          [XmlEnum("high frequency resistivity")]
          highfrequencyresistivity,
        /// <summary>
        /// hydrocarboncorrection property
        /// </summary>
          [XmlEnum("hydrocarbon correction")]
          hydrocarboncorrection,
        /// <summary>
        /// hydrocarbondensitycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon density correction")]
          hydrocarbondensitycorrection,
        /// <summary>
        /// hydrocarbongravitycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon gravity correction")]
          hydrocarbongravitycorrection,
        /// <summary>
        /// hydrocarbonsaturation property
        /// </summary>
          [XmlEnum("hydrocarbon saturation")]
          hydrocarbonsaturation,
        /// <summary>
        /// hydrocarbonviscositycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon viscosity correction")]
          hydrocarbonviscositycorrection,
        /// <summary>
        /// image property
        /// </summary>
          image,
        /// <summary>
        /// interpretationvariable property
        /// </summary>
          [XmlEnum("interpretation variable")]
          interpretationvariable,
        /// <summary>
        /// ironmudcorrection property
        /// </summary>
          [XmlEnum("iron mud correction")]
          ironmudcorrection,
        /// <summary>
        /// joined property
        /// </summary>
          joined,
        /// <summary>
        /// KClmudcorrection property
        /// </summary>
          [XmlEnum("KCl mud correction")]
          KClmudcorrection,
        /// <summary>
        /// length property
        /// </summary>
          length,
        /// <summary>
        /// limestoneacousticporosity property
        /// </summary>
          [XmlEnum("limestone acoustic porosity")]
          limestoneacousticporosity,
        /// <summary>
        /// limestonedensityporosity property
        /// </summary>
          [XmlEnum("limestone density porosity")]
          limestonedensityporosity,
        /// <summary>
        /// limestoneneutronporosity property
        /// </summary>
          [XmlEnum("limestone neutron porosity")]
          limestoneneutronporosity,
        /// <summary>
        /// lithologycorrection property
        /// </summary>
          [XmlEnum("lithology correction")]
          lithologycorrection,
        /// <summary>
        /// logderivedpermeability property
        /// </summary>
          [XmlEnum("log derived permeability")]
          logderivedpermeability,
        /// <summary>
        /// logmatrixdensity property
        /// </summary>
          [XmlEnum("log matrix density")]
          logmatrixdensity,
        /// <summary>
        /// magneticcasingcollarlocator property
        /// </summary>
          [XmlEnum("magnetic casing collar locator")]
          magneticcasingcollarlocator,
        /// <summary>
        /// matrixdensity property
        /// </summary>
          [XmlEnum("matrix density")]
          matrixdensity,
        /// <summary>
        /// matrixtraveltime property
        /// </summary>
          [XmlEnum("matrix travel time")]
          matrixtraveltime,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// mechanicalcaliper property
        /// </summary>
          [XmlEnum("mechanical caliper")]
          mechanicalcaliper,
        /// <summary>
        /// mechanicalcasingcollarlocator property
        /// </summary>
          [XmlEnum("mechanical casing collar locator")]
          mechanicalcasingcollarlocator,
        /// <summary>
        /// mediumconductivity property
        /// </summary>
          [XmlEnum("medium conductivity")]
          mediumconductivity,
        /// <summary>
        /// mediuminductionconductivity property
        /// </summary>
          [XmlEnum("medium induction conductivity")]
          mediuminductionconductivity,
        /// <summary>
        /// mediuminductionresistivity property
        /// </summary>
          [XmlEnum("medium induction resistivity")]
          mediuminductionresistivity,
        /// <summary>
        /// mediumlaterologconductivity property
        /// </summary>
          [XmlEnum("medium laterolog conductivity")]
          mediumlaterologconductivity,
        /// <summary>
        /// mediumlaterologresistivity property
        /// </summary>
          [XmlEnum("medium laterolog resistivity")]
          mediumlaterologresistivity,
        /// <summary>
        /// mediumresistivity property
        /// </summary>
          [XmlEnum("medium resistivity")]
          mediumresistivity,
        /// <summary>
        /// microconductivity property
        /// </summary>
          [XmlEnum("micro conductivity")]
          microconductivity,
        /// <summary>
        /// microinverseconductivity property
        /// </summary>
          [XmlEnum("micro inverse conductivity")]
          microinverseconductivity,
        /// <summary>
        /// microinverseresistivity property
        /// </summary>
          [XmlEnum("micro inverse resistivity")]
          microinverseresistivity,
        /// <summary>
        /// microlaterologconductivity property
        /// </summary>
          [XmlEnum("micro laterolog conductivity")]
          microlaterologconductivity,
        /// <summary>
        /// microlaterologresistivity property
        /// </summary>
          [XmlEnum("micro laterolog resistivity")]
          microlaterologresistivity,
        /// <summary>
        /// micronormalconductivity property
        /// </summary>
          [XmlEnum("micro normal conductivity")]
          micronormalconductivity,
        /// <summary>
        /// micronormalresistivity property
        /// </summary>
          [XmlEnum("micro normal resistivity")]
          micronormalresistivity,
        /// <summary>
        /// microresistivity property
        /// </summary>
          [XmlEnum("micro resistivity")]
          microresistivity,
        /// <summary>
        /// microsphericallyfocusedconductivity property
        /// </summary>
          [XmlEnum("micro spherically focused conductivity")]
          microsphericallyfocusedconductivity,
        /// <summary>
        /// microsphericallyfocusedresistivity property
        /// </summary>
          [XmlEnum("micro spherically focused resistivity")]
          microsphericallyfocusedresistivity,
        /// <summary>
        /// mineral property
        /// </summary>
          mineral,
        /// <summary>
        /// mudcakeconductivity property
        /// </summary>
          [XmlEnum("mud cake conductivity")]
          mudcakeconductivity,
        /// <summary>
        /// mudcakecorrection property
        /// </summary>
          [XmlEnum("mud cake correction")]
          mudcakecorrection,
        /// <summary>
        /// mudcakedensitycorrection property
        /// </summary>
          [XmlEnum("mud cake density correction")]
          mudcakedensitycorrection,
        /// <summary>
        /// mudcakeresistivity property
        /// </summary>
          [XmlEnum("mud cake resistivity")]
          mudcakeresistivity,
        /// <summary>
        /// mudcakeresistivitycorrection property
        /// </summary>
          [XmlEnum("mud cake resistivity correction")]
          mudcakeresistivitycorrection,
        /// <summary>
        /// mudcakethicknesscorrection property
        /// </summary>
          [XmlEnum("mud cake thickness correction")]
          mudcakethicknesscorrection,
        /// <summary>
        /// mudcompositioncorrection property
        /// </summary>
          [XmlEnum("mud composition correction")]
          mudcompositioncorrection,
        /// <summary>
        /// mudconductivity property
        /// </summary>
          [XmlEnum("mud conductivity")]
          mudconductivity,
        /// <summary>
        /// mudfiltrateconductivity property
        /// </summary>
          [XmlEnum("mud filtrate conductivity")]
          mudfiltrateconductivity,
        /// <summary>
        /// mudfiltratecorrection property
        /// </summary>
          [XmlEnum("mud filtrate correction")]
          mudfiltratecorrection,
        /// <summary>
        /// mudfiltratedensitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate density correction")]
          mudfiltratedensitycorrection,
        /// <summary>
        /// mudfiltrateresistivity property
        /// </summary>
          [XmlEnum("mud filtrate resistivity")]
          mudfiltrateresistivity,
        /// <summary>
        /// mudfiltrateresistivitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate resistivity correction")]
          mudfiltrateresistivitycorrection,
        /// <summary>
        /// mudfiltratesalinitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate salinity correction")]
          mudfiltratesalinitycorrection,
        /// <summary>
        /// mudresistivity property
        /// </summary>
          [XmlEnum("mud resistivity")]
          mudresistivity,
        /// <summary>
        /// mudsalinitycorrection property
        /// </summary>
          [XmlEnum("mud salinity correction")]
          mudsalinitycorrection,
        /// <summary>
        /// mudviscositycorrection property
        /// </summary>
          [XmlEnum("mud viscosity correction")]
          mudviscositycorrection,
        /// <summary>
        /// mudweightcorrection property
        /// </summary>
          [XmlEnum("mud weight correction")]
          mudweightcorrection,
        /// <summary>
        /// neutrondieawaytime property
        /// </summary>
          [XmlEnum("neutron die away time")]
          neutrondieawaytime,
        /// <summary>
        /// neutronporosity property
        /// </summary>
          [XmlEnum("neutron porosity")]
          neutronporosity,
        /// <summary>
        /// nuclearcaliper property
        /// </summary>
          [XmlEnum("nuclear caliper")]
          nuclearcaliper,
        /// <summary>
        /// nuclearmagneticdecaytime property
        /// </summary>
          [XmlEnum("nuclear magnetic decay time")]
          nuclearmagneticdecaytime,
        /// <summary>
        /// nuclearmagnetismlogpermeability property
        /// </summary>
          [XmlEnum("nuclear magnetism log permeability")]
          nuclearmagnetismlogpermeability,
        /// <summary>
        /// nuclearmagnetismporosity property
        /// </summary>
          [XmlEnum("nuclear magnetism porosity")]
          nuclearmagnetismporosity,
        /// <summary>
        /// OHdensityporosity property
        /// </summary>
          [XmlEnum("OH density porosity")]
          OHdensityporosity,
        /// <summary>
        /// OHdolomitedensityporosity property
        /// </summary>
          [XmlEnum("OH dolomite density porosity")]
          OHdolomitedensityporosity,
        /// <summary>
        /// OHdolomiteneutronporosity property
        /// </summary>
          [XmlEnum("OH dolomite neutron porosity")]
          OHdolomiteneutronporosity,
        /// <summary>
        /// OHlimestonedensityporosity property
        /// </summary>
          [XmlEnum("OH limestone density porosity")]
          OHlimestonedensityporosity,
        /// <summary>
        /// OHlimestoneneutronporosity property
        /// </summary>
          [XmlEnum("OH limestone neutron porosity")]
          OHlimestoneneutronporosity,
        /// <summary>
        /// OHneutronporosity property
        /// </summary>
          [XmlEnum("OH neutron porosity")]
          OHneutronporosity,
        /// <summary>
        /// OHsandstonedensityporosity property
        /// </summary>
          [XmlEnum("OH sandstone density porosity")]
          OHsandstonedensityporosity,
        /// <summary>
        /// OHsandstoneneutronporosity property
        /// </summary>
          [XmlEnum("OH sandstone neutron porosity")]
          OHsandstoneneutronporosity,
        /// <summary>
        /// oilbasedmudcorrection property
        /// </summary>
          [XmlEnum("oil based mud correction")]
          oilbasedmudcorrection,
        /// <summary>
        /// oilsaturation property
        /// </summary>
          [XmlEnum("oil saturation")]
          oilsaturation,
        /// <summary>
        /// perforating property
        /// </summary>
          perforating,
        /// <summary>
        /// permeability property
        /// </summary>
          permeability,
        /// <summary>
        /// phaseshift property
        /// </summary>
          [XmlEnum("phase shift")]
          phaseshift,
        /// <summary>
        /// photoelectricabsorption property
        /// </summary>
          [XmlEnum("photoelectric absorption")]
          photoelectricabsorption,
        /// <summary>
        /// photoelectricabsorptioncorrection property
        /// </summary>
          [XmlEnum("photoelectric absorption correction")]
          photoelectricabsorptioncorrection,
        /// <summary>
        /// physicalmeasurementcorrection property
        /// </summary>
          [XmlEnum("physical measurement correction")]
          physicalmeasurementcorrection,
        /// <summary>
        /// planeangle property
        /// </summary>
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// porosity property
        /// </summary>
          porosity,
        /// <summary>
        /// porositycorrection property
        /// </summary>
          [XmlEnum("porosity correction")]
          porositycorrection,
        /// <summary>
        /// potassium property
        /// </summary>
          potassium,
        /// <summary>
        /// pressure property
        /// </summary>
          pressure,
        /// <summary>
        /// pressurecorrection property
        /// </summary>
          [XmlEnum("pressure correction")]
          pressurecorrection,
        /// <summary>
        /// processed property
        /// </summary>
          processed,
        /// <summary>
        /// pulsedneutronporosity property
        /// </summary>
          [XmlEnum("pulsed neutron porosity")]
          pulsedneutronporosity,
        /// <summary>
        /// quality property
        /// </summary>
          quality,
        /// <summary>
        /// ratio property
        /// </summary>
          ratio,
        /// <summary>
        /// raw property
        /// </summary>
          raw,
        /// <summary>
        /// relativebearing property
        /// </summary>
          [XmlEnum("relative bearing")]
          relativebearing,
        /// <summary>
        /// resistivity property
        /// </summary>
          resistivity,
        /// <summary>
        /// resistivityfactorcorrection property
        /// </summary>
          [XmlEnum("resistivity factor correction")]
          resistivityfactorcorrection,
        /// <summary>
        /// resistivityfromattenuation property
        /// </summary>
          [XmlEnum("resistivity from attenuation")]
          resistivityfromattenuation,
        /// <summary>
        /// resistivityfromphaseshift property
        /// </summary>
          [XmlEnum("resistivity from phase shift")]
          resistivityfromphaseshift,
        /// <summary>
        /// resistivityphaseshift property
        /// </summary>
          [XmlEnum("resistivity phase shift")]
          resistivityphaseshift,
        /// <summary>
        /// resistivityratio property
        /// </summary>
          [XmlEnum("resistivity ratio")]
          resistivityratio,
        /// <summary>
        /// salinity property
        /// </summary>
          salinity,
        /// <summary>
        /// sampling property
        /// </summary>
          sampling,
        /// <summary>
        /// sandstoneacousticporosity property
        /// </summary>
          [XmlEnum("sandstone acoustic porosity")]
          sandstoneacousticporosity,
        /// <summary>
        /// sandstonedensityporosity property
        /// </summary>
          [XmlEnum("sandstone density porosity")]
          sandstonedensityporosity,
        /// <summary>
        /// sandstoneneutronporosity property
        /// </summary>
          [XmlEnum("sandstone neutron porosity")]
          sandstoneneutronporosity,
        /// <summary>
        /// saturation property
        /// </summary>
          saturation,
        /// <summary>
        /// shalevolume property
        /// </summary>
          [XmlEnum("shale volume")]
          shalevolume,
        /// <summary>
        /// shallowconductivity property
        /// </summary>
          [XmlEnum("shallow conductivity")]
          shallowconductivity,
        /// <summary>
        /// shallowinductionconductivity property
        /// </summary>
          [XmlEnum("shallow induction conductivity")]
          shallowinductionconductivity,
        /// <summary>
        /// shallowinductionresistivity property
        /// </summary>
          [XmlEnum("shallow induction resistivity")]
          shallowinductionresistivity,
        /// <summary>
        /// shallowlaterologconductivity property
        /// </summary>
          [XmlEnum("shallow laterolog conductivity")]
          shallowlaterologconductivity,
        /// <summary>
        /// shallowlaterologresistivity property
        /// </summary>
          [XmlEnum("shallow laterolog resistivity")]
          shallowlaterologresistivity,
        /// <summary>
        /// shallowresistivity property
        /// </summary>
          [XmlEnum("shallow resistivity")]
          shallowresistivity,
        /// <summary>
        /// shearwavedolomiteporosity property
        /// </summary>
          [XmlEnum("shear wave dolomite porosity")]
          shearwavedolomiteporosity,
        /// <summary>
        /// shearwavelimestoneporosity property
        /// </summary>
          [XmlEnum("shear wave limestone porosity")]
          shearwavelimestoneporosity,
        /// <summary>
        /// shearwavematrixtraveltime property
        /// </summary>
          [XmlEnum("shear wave matrix travel time")]
          shearwavematrixtraveltime,
        /// <summary>
        /// shearwavesandstoneporosity property
        /// </summary>
          [XmlEnum("shear wave sandstone porosity")]
          shearwavesandstoneporosity,
        /// <summary>
        /// shearwavetraveltime property
        /// </summary>
          [XmlEnum("shear wave travel time")]
          shearwavetraveltime,
        /// <summary>
        /// shifted property
        /// </summary>
          shifted,
        /// <summary>
        /// sidewallcoreporosity property
        /// </summary>
          [XmlEnum("sidewall core porosity")]
          sidewallcoreporosity,
        /// <summary>
        /// sigma property
        /// </summary>
          sigma,
        /// <summary>
        /// sigmaformation property
        /// </summary>
          [XmlEnum("sigma formation")]
          sigmaformation,
        /// <summary>
        /// sigmagas property
        /// </summary>
          [XmlEnum("sigma gas")]
          sigmagas,
        /// <summary>
        /// sigmahydrocarbon property
        /// </summary>
          [XmlEnum("sigma hydrocarbon")]
          sigmahydrocarbon,
        /// <summary>
        /// sigmamatrix property
        /// </summary>
          [XmlEnum("sigma matrix")]
          sigmamatrix,
        /// <summary>
        /// sigmaoil property
        /// </summary>
          [XmlEnum("sigma oil")]
          sigmaoil,
        /// <summary>
        /// sigmawater property
        /// </summary>
          [XmlEnum("sigma water")]
          sigmawater,
        /// <summary>
        /// slippagevelocitycorrection property
        /// </summary>
          [XmlEnum("slippage velocity correction")]
          slippagevelocitycorrection,
        /// <summary>
        /// smoothed property
        /// </summary>
          smoothed,
        /// <summary>
        /// spectralgammaray property
        /// </summary>
          [XmlEnum("spectral gamma ray")]
          spectralgammaray,
        /// <summary>
        /// sphericallyfocusedconductivity property
        /// </summary>
          [XmlEnum("spherically focused conductivity")]
          sphericallyfocusedconductivity,
        /// <summary>
        /// sphericallyfocusedresistivity property
        /// </summary>
          [XmlEnum("spherically focused resistivity")]
          sphericallyfocusedresistivity,
        /// <summary>
        /// spontaneouspotential property
        /// </summary>
          [XmlEnum("spontaneous potential")]
          spontaneouspotential,
        /// <summary>
        /// spreadinglosscorrection property
        /// </summary>
          [XmlEnum("spreading loss correction")]
          spreadinglosscorrection,
        /// <summary>
        /// syntheticwelllogtrace property
        /// </summary>
          [XmlEnum("synthetic well log trace")]
          syntheticwelllogtrace,
        /// <summary>
        /// temperature property
        /// </summary>
          temperature,
        /// <summary>
        /// temperaturecorrection property
        /// </summary>
          [XmlEnum("temperature correction")]
          temperaturecorrection,
        /// <summary>
        /// tension property
        /// </summary>
          tension,
        /// <summary>
        /// ThKratio property
        /// </summary>
          [XmlEnum("Th/K ratio")]
          ThKratio,
        /// <summary>
        /// thorium property
        /// </summary>
          thorium,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// tooldiametercorrection property
        /// </summary>
          [XmlEnum("tool diameter correction")]
          tooldiametercorrection,
        /// <summary>
        /// tooleccentricitycorrection property
        /// </summary>
          [XmlEnum("tool eccentricity correction")]
          tooleccentricitycorrection,
        /// <summary>
        /// totalgammaray property
        /// </summary>
          [XmlEnum("total gamma ray")]
          totalgammaray,
        /// <summary>
        /// totalporosity property
        /// </summary>
          [XmlEnum("total porosity")]
          totalporosity,
        /// <summary>
        /// tracersurvey property
        /// </summary>
          [XmlEnum("tracer survey")]
          tracersurvey,
        /// <summary>
        /// traveltime property
        /// </summary>
          [XmlEnum("travel time")]
          traveltime,
        /// <summary>
        /// trueconductivity property
        /// </summary>
          [XmlEnum("true conductivity")]
          trueconductivity,
        /// <summary>
        /// trueresistivity property
        /// </summary>
          [XmlEnum("true resistivity")]
          trueresistivity,
        /// <summary>
        /// trueverticaldepth property
        /// </summary>
          [XmlEnum("true vertical depth")]
          trueverticaldepth,
        /// <summary>
        /// tubewavedolomiteporosity property
        /// </summary>
          [XmlEnum("tube wave dolomite porosity")]
          tubewavedolomiteporosity,
        /// <summary>
        /// tubewavelimestoneporosity property
        /// </summary>
          [XmlEnum("tube wave limestone porosity")]
          tubewavelimestoneporosity,
        /// <summary>
        /// tubewavematrixtraveltime property
        /// </summary>
          [XmlEnum("tube wave matrix travel time")]
          tubewavematrixtraveltime,
        /// <summary>
        /// tubewavesandstoneporosity property
        /// </summary>
          [XmlEnum("tube wave sandstone porosity")]
          tubewavesandstoneporosity,
        /// <summary>
        /// tubewavetraveltime property
        /// </summary>
          [XmlEnum("tube wave travel time")]
          tubewavetraveltime,
        /// <summary>
        /// uranium property
        /// </summary>
          uranium,
        /// <summary>
        /// velocity property
        /// </summary>
          velocity,
        /// <summary>
        /// volume property
        /// </summary>
          volume,
        /// <summary>
        /// waterbasedfluidcorrection property
        /// </summary>
          [XmlEnum("water based fluid correction")]
          waterbasedfluidcorrection,
        /// <summary>
        /// waterholdupcorrection property
        /// </summary>
          [XmlEnum("water holdup correction")]
          waterholdupcorrection,
        /// <summary>
        /// watersaturatedconductivity property
        /// </summary>
          [XmlEnum("water saturated conductivity")]
          watersaturatedconductivity,
        /// <summary>
        /// watersaturatedresistivity property
        /// </summary>
          [XmlEnum("water saturated resistivity")]
          watersaturatedresistivity,
        /// <summary>
        /// watersaturation property
        /// </summary>
          [XmlEnum("water saturation")]
          watersaturation,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the HoleOpenerType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the HoleOpenerType xsd enumeration.")]
        public enum HoleOpenerType 
        {
        /// <summary>
        /// underreamer property
        /// </summary>
          [XmlEnum("under-reamer")]
          underreamer,
        /// <summary>
        /// fixedblade property
        /// </summary>
          [XmlEnum("fixed blade")]
          fixedblade,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BladeShapeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BladeShapeType xsd enumeration.")]
        public enum BladeShapeType 
        {
        /// <summary>
        /// dynamic property
        /// </summary>
          dynamic,
        /// <summary>
        /// melon property
        /// </summary>
          melon,
        /// <summary>
        /// spiral property
        /// </summary>
          spiral,
        /// <summary>
        /// straight property
        /// </summary>
          straight,
        /// <summary>
        /// variable property
        /// </summary>
          variable,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BladeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BladeType xsd enumeration.")]
        public enum BladeType 
        {
        /// <summary>
        /// clampon property
        /// </summary>
          [XmlEnum("clamp-on")]
          clampon,
        /// <summary>
        /// integral property
        /// </summary>
          integral,
        /// <summary>
        /// sleeve property
        /// </summary>
          sleeve,
        /// <summary>
        /// welded property
        /// </summary>
          welded,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BearingType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BearingType xsd enumeration.")]
        public enum BearingType 
        {
        /// <summary>
        /// oilseal property
        /// </summary>
          [XmlEnum("oil seal")]
          oilseal,
        /// <summary>
        /// mudlube property
        /// </summary>
          [XmlEnum("mud lube")]
          mudlube,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BitType xsd enumeration.")]
        public enum BitType 
        {
        /// <summary>
        /// diamond property
        /// </summary>
          diamond,
        /// <summary>
        /// diamondcore property
        /// </summary>
          [XmlEnum("diamond core")]
          diamondcore,
        /// <summary>
        /// insertrollercone property
        /// </summary>
          [XmlEnum("insert roller cone")]
          insertrollercone,
        /// <summary>
        /// PDC property
        /// </summary>
          PDC,
        /// <summary>
        /// PDCcore property
        /// </summary>
          [XmlEnum("PDC core")]
          PDCcore,
        /// <summary>
        /// rollercone property
        /// </summary>
          [XmlEnum("roller cone")]
          rollercone,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the IadcIntegerCode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the IadcIntegerCode xsd enumeration.")]
        public enum IadcIntegerCode 
        {
        /// <summary>
        /// Item0 property
        /// </summary>
          [XmlEnum("0")]
          Item0,
        /// <summary>
        /// Item1 property
        /// </summary>
          [XmlEnum("1")]
          Item1,
        /// <summary>
        /// Item2 property
        /// </summary>
          [XmlEnum("2")]
          Item2,
        /// <summary>
        /// Item3 property
        /// </summary>
          [XmlEnum("3")]
          Item3,
        /// <summary>
        /// Item4 property
        /// </summary>
          [XmlEnum("4")]
          Item4,
        /// <summary>
        /// Item5 property
        /// </summary>
          [XmlEnum("5")]
          Item5,
        /// <summary>
        /// Item6 property
        /// </summary>
          [XmlEnum("6")]
          Item6,
        /// <summary>
        /// Item7 property
        /// </summary>
          [XmlEnum("7")]
          Item7,
        /// <summary>
        /// Item8 property
        /// </summary>
          [XmlEnum("8")]
          Item8
        }
        /// <summary>
        /// This class represents the BitDullCode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BitDullCode xsd enumeration.")]
        public enum BitDullCode 
        {
        /// <summary>
        /// BC property
        /// </summary>
          BC,
        /// <summary>
        /// BT property
        /// </summary>
          BT,
        /// <summary>
        /// BU property
        /// </summary>
          BU,
        /// <summary>
        /// CC property
        /// </summary>
          CC,
        /// <summary>
        /// CD property
        /// </summary>
          CD,
        /// <summary>
        /// CI property
        /// </summary>
          CI,
        /// <summary>
        /// CR property
        /// </summary>
          CR,
        /// <summary>
        /// CT property
        /// </summary>
          CT,
        /// <summary>
        /// ER property
        /// </summary>
          ER,
        /// <summary>
        /// FC property
        /// </summary>
          FC,
        /// <summary>
        /// HC property
        /// </summary>
          HC,
        /// <summary>
        /// JD property
        /// </summary>
          JD,
        /// <summary>
        /// LC property
        /// </summary>
          LC,
        /// <summary>
        /// LN property
        /// </summary>
          LN,
        /// <summary>
        /// LT property
        /// </summary>
          LT,
        /// <summary>
        /// NO property
        /// </summary>
          NO,
        /// <summary>
        /// OC property
        /// </summary>
          OC,
        /// <summary>
        /// PB property
        /// </summary>
          PB,
        /// <summary>
        /// PN property
        /// </summary>
          PN,
        /// <summary>
        /// RG property
        /// </summary>
          RG,
        /// <summary>
        /// RO property
        /// </summary>
          RO,
        /// <summary>
        /// SD property
        /// </summary>
          SD,
        /// <summary>
        /// SS property
        /// </summary>
          SS,
        /// <summary>
        /// TR property
        /// </summary>
          TR,
        /// <summary>
        /// WO property
        /// </summary>
          WO,
        /// <summary>
        /// WT property
        /// </summary>
          WT,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the IadcBearingWearCode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the IadcBearingWearCode xsd enumeration.")]
        public enum IadcBearingWearCode 
        {
        /// <summary>
        /// Item0 property
        /// </summary>
          [XmlEnum("0")]
          Item0,
        /// <summary>
        /// Item1 property
        /// </summary>
          [XmlEnum("1")]
          Item1,
        /// <summary>
        /// Item2 property
        /// </summary>
          [XmlEnum("2")]
          Item2,
        /// <summary>
        /// Item3 property
        /// </summary>
          [XmlEnum("3")]
          Item3,
        /// <summary>
        /// Item4 property
        /// </summary>
          [XmlEnum("4")]
          Item4,
        /// <summary>
        /// Item5 property
        /// </summary>
          [XmlEnum("5")]
          Item5,
        /// <summary>
        /// Item6 property
        /// </summary>
          [XmlEnum("6")]
          Item6,
        /// <summary>
        /// Item7 property
        /// </summary>
          [XmlEnum("7")]
          Item7,
        /// <summary>
        /// Item8 property
        /// </summary>
          [XmlEnum("8")]
          Item8,
        /// <summary>
        /// E property
        /// </summary>
          E,
        /// <summary>
        /// F property
        /// </summary>
          F,
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// X property
        /// </summary>
          X
        }
        /// <summary>
        /// This class represents the BitReasonPulled xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BitReasonPulled xsd enumeration.")]
        public enum BitReasonPulled 
        {
        /// <summary>
        /// BHA property
        /// </summary>
          BHA,
        /// <summary>
        /// CM property
        /// </summary>
          CM,
        /// <summary>
        /// CP property
        /// </summary>
          CP,
        /// <summary>
        /// DMF property
        /// </summary>
          DMF,
        /// <summary>
        /// DP property
        /// </summary>
          DP,
        /// <summary>
        /// DST property
        /// </summary>
          DST,
        /// <summary>
        /// DTF property
        /// </summary>
          DTF,
        /// <summary>
        /// FM property
        /// </summary>
          FM,
        /// <summary>
        /// HP property
        /// </summary>
          HP,
        /// <summary>
        /// HR property
        /// </summary>
          HR,
        /// <summary>
        /// LOG property
        /// </summary>
          LOG,
        /// <summary>
        /// PP property
        /// </summary>
          PP,
        /// <summary>
        /// PR property
        /// </summary>
          PR,
        /// <summary>
        /// RIG property
        /// </summary>
          RIG,
        /// <summary>
        /// TD property
        /// </summary>
          TD,
        /// <summary>
        /// TQ property
        /// </summary>
          TQ,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// WC property
        /// </summary>
          WC,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the JarType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the JarType xsd enumeration.")]
        public enum JarType 
        {
        /// <summary>
        /// mechanical property
        /// </summary>
          mechanical,
        /// <summary>
        /// hydraulic property
        /// </summary>
          hydraulic,
        /// <summary>
        /// hydromechanical property
        /// </summary>
          [XmlEnum("hydro mechanical")]
          hydromechanical,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the JarAction xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the JarAction xsd enumeration.")]
        public enum JarAction 
        {
        /// <summary>
        /// up property
        /// </summary>
          up,
        /// <summary>
        /// down property
        /// </summary>
          down,
        /// <summary>
        /// both property
        /// </summary>
          both,
        /// <summary>
        /// vibrating property
        /// </summary>
          vibrating,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ForcePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForcePerLengthUom xsd enumeration.")]
        public enum ForcePerLengthUom 
        {
        /// <summary>
        /// Item001lbfft property
        /// </summary>
          [XmlEnum("0.01 lbf/ft")]
          Item001lbfft,
        /// <summary>
        /// Item130lbfm property
        /// </summary>
          [XmlEnum("1/30 lbf/m")]
          Item130lbfm,
        /// <summary>
        /// Item130Nm property
        /// </summary>
          [XmlEnum("1/30 N/m")]
          Item130Nm,
        /// <summary>
        /// dynecm property
        /// </summary>
          [XmlEnum("dyne/cm")]
          dynecm,
        /// <summary>
        /// kgfcm property
        /// </summary>
          [XmlEnum("kgf/cm")]
          kgfcm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN/m")]
          kNm,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf/ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf/in")]
          lbfin,
        /// <summary>
        /// mNkm property
        /// </summary>
          [XmlEnum("mN/km")]
          mNkm,
        /// <summary>
        /// mNm property
        /// </summary>
          [XmlEnum("mN/m")]
          mNm,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N/m")]
          Nm,
        /// <summary>
        /// pdlcm property
        /// </summary>
          [XmlEnum("pdl/cm")]
          pdlcm,
        /// <summary>
        /// tonfUKft property
        /// </summary>
          [XmlEnum("tonf[UK]/ft")]
          tonfUKft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonf[US]/ft")]
          tonfUSft
        }
        /// <summary>
        /// This class represents the LengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerLengthUom xsd enumeration.")]
        public enum LengthPerLengthUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Item001ftft property
        /// </summary>
          [XmlEnum("0.01 ft/ft")]
          Item001ftft,
        /// <summary>
        /// Item130mm property
        /// </summary>
          [XmlEnum("1/30 m/m")]
          Item130mm,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// ftft property
        /// </summary>
          [XmlEnum("ft/ft")]
          ftft,
        /// <summary>
        /// ftin property
        /// </summary>
          [XmlEnum("ft/in")]
          ftin,
        /// <summary>
        /// ftm property
        /// </summary>
          [XmlEnum("ft/m")]
          ftm,
        /// <summary>
        /// ftmi property
        /// </summary>
          [XmlEnum("ft/mi")]
          ftmi,
        /// <summary>
        /// kmcm property
        /// </summary>
          [XmlEnum("km/cm")]
          kmcm,
        /// <summary>
        /// mcm property
        /// </summary>
          [XmlEnum("m/cm")]
          mcm,
        /// <summary>
        /// mkm property
        /// </summary>
          [XmlEnum("m/km")]
          mkm,
        /// <summary>
        /// mm property
        /// </summary>
          [XmlEnum("m/m")]
          mm,
        /// <summary>
        /// miin property
        /// </summary>
          [XmlEnum("mi/in")]
          miin
        }
        /// <summary>
        /// This class represents the TubularComponentType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TubularComponentType xsd enumeration.")]
        public enum TubularComponentType 
        {
        /// <summary>
        /// accelerator property
        /// </summary>
          accelerator,
        /// <summary>
        /// adjustablekickoff property
        /// </summary>
          [XmlEnum("adjustable kickoff")]
          adjustablekickoff,
        /// <summary>
        /// bitcorediamond property
        /// </summary>
          [XmlEnum("bit core diamond")]
          bitcorediamond,
        /// <summary>
        /// bitcorePDC property
        /// </summary>
          [XmlEnum("bit core PDC")]
          bitcorePDC,
        /// <summary>
        /// bitdiamondfixedcut property
        /// </summary>
          [XmlEnum("bit diamond fixed cut")]
          bitdiamondfixedcut,
        /// <summary>
        /// bitholeopener property
        /// </summary>
          [XmlEnum("bit hole opener")]
          bitholeopener,
        /// <summary>
        /// bitinsertrollercone property
        /// </summary>
          [XmlEnum("bit insert roller cone")]
          bitinsertrollercone,
        /// <summary>
        /// bitmilltoothrollercone property
        /// </summary>
          [XmlEnum("bit mill tooth roller cone")]
          bitmilltoothrollercone,
        /// <summary>
        /// bitPDCfixedcutter property
        /// </summary>
          [XmlEnum("bit PDC fixed cutter")]
          bitPDCfixedcutter,
        /// <summary>
        /// bitunderreamer property
        /// </summary>
          [XmlEnum("bit under reamer")]
          bitunderreamer,
        /// <summary>
        /// bridgeplug property
        /// </summary>
          [XmlEnum("bridge plug")]
          bridgeplug,
        /// <summary>
        /// bullplug property
        /// </summary>
          [XmlEnum("bull plug")]
          bullplug,
        /// <summary>
        /// bullnose property
        /// </summary>
          bullnose,
        /// <summary>
        /// casing property
        /// </summary>
          casing,
        /// <summary>
        /// casingcrossover property
        /// </summary>
          [XmlEnum("casing crossover")]
          casingcrossover,
        /// <summary>
        /// casingcutter property
        /// </summary>
          [XmlEnum("casing cutter")]
          casingcutter,
        /// <summary>
        /// casinghead property
        /// </summary>
          [XmlEnum("casing head")]
          casinghead,
        /// <summary>
        /// casinginflatablepacker property
        /// </summary>
          [XmlEnum("casing inflatable packer")]
          casinginflatablepacker,
        /// <summary>
        /// casingshoescrewin property
        /// </summary>
          [XmlEnum("casing shoe screw-in")]
          casingshoescrewin,
        /// <summary>
        /// catchassembly property
        /// </summary>
          [XmlEnum("catch assembly")]
          catchassembly,
        /// <summary>
        /// coiledtubinginhole property
        /// </summary>
          [XmlEnum("coiled tubing in hole")]
          coiledtubinginhole,
        /// <summary>
        /// coiledtubingoncoil property
        /// </summary>
          [XmlEnum("coiled tubing on coil")]
          coiledtubingoncoil,
        /// <summary>
        /// corebarrel property
        /// </summary>
          [XmlEnum("core barrel")]
          corebarrel,
        /// <summary>
        /// coreorientationbarrel property
        /// </summary>
          [XmlEnum("core orientation barrel")]
          coreorientationbarrel,
        /// <summary>
        /// diecollar property
        /// </summary>
          [XmlEnum("die collar")]
          diecollar,
        /// <summary>
        /// diecollarLH property
        /// </summary>
          [XmlEnum("die collar LH")]
          diecollarLH,
        /// <summary>
        /// directionalguidancesystem property
        /// </summary>
          [XmlEnum("directional guidance system")]
          directionalguidancesystem,
        /// <summary>
        /// drillcollar property
        /// </summary>
          [XmlEnum("drill collar")]
          drillcollar,
        /// <summary>
        /// drillcollarshort property
        /// </summary>
          [XmlEnum("drill collar short")]
          drillcollarshort,
        /// <summary>
        /// drillpipe property
        /// </summary>
          [XmlEnum("drill pipe")]
          drillpipe,
        /// <summary>
        /// drillpipecompressive property
        /// </summary>
          [XmlEnum("drill pipe compressive")]
          drillpipecompressive,
        /// <summary>
        /// drillpipeLH property
        /// </summary>
          [XmlEnum("drill pipe LH")]
          drillpipeLH,
        /// <summary>
        /// drillstemtestBHA property
        /// </summary>
          [XmlEnum("drill stem test BHA")]
          drillstemtestBHA,
        /// <summary>
        /// drivepipe property
        /// </summary>
          [XmlEnum("drive pipe")]
          drivepipe,
        /// <summary>
        /// dualcatchassembly property
        /// </summary>
          [XmlEnum("dual catch assembly")]
          dualcatchassembly,
        /// <summary>
        /// extensionbowlovershot property
        /// </summary>
          [XmlEnum("extension bowl overshot")]
          extensionbowlovershot,
        /// <summary>
        /// extensionsubovershot property
        /// </summary>
          [XmlEnum("extension sub-overshot")]
          extensionsubovershot,
        /// <summary>
        /// floatcollar property
        /// </summary>
          [XmlEnum("float collar")]
          floatcollar,
        /// <summary>
        /// floatshoe property
        /// </summary>
          [XmlEnum("float shoe")]
          floatshoe,
        /// <summary>
        /// flowhead property
        /// </summary>
          [XmlEnum("flow head")]
          flowhead,
        /// <summary>
        /// guideshoe property
        /// </summary>
          [XmlEnum("guide shoe")]
          guideshoe,
        /// <summary>
        /// hangercasingsubsea property
        /// </summary>
          [XmlEnum("hanger casing subsea")]
          hangercasingsubsea,
        /// <summary>
        /// hangercasingsurface property
        /// </summary>
          [XmlEnum("hanger casing surface")]
          hangercasingsurface,
        /// <summary>
        /// hangerliner property
        /// </summary>
          [XmlEnum("hanger liner")]
          hangerliner,
        /// <summary>
        /// hangermudline property
        /// </summary>
          [XmlEnum("hanger mud line")]
          hangermudline,
        /// <summary>
        /// hangertubing property
        /// </summary>
          [XmlEnum("hanger tubing")]
          hangertubing,
        /// <summary>
        /// heavyweightdrillpipe property
        /// </summary>
          [XmlEnum("heavy weight drill pipe")]
          heavyweightdrillpipe,
        /// <summary>
        /// heavyweightdrillpipeLH property
        /// </summary>
          [XmlEnum("heavy weight drill pipe LH")]
          heavyweightdrillpipeLH,
        /// <summary>
        /// jar property
        /// </summary>
          jar,
        /// <summary>
        /// junkbasket property
        /// </summary>
          [XmlEnum("junk basket")]
          junkbasket,
        /// <summary>
        /// junkbasketreversecirculation property
        /// </summary>
          [XmlEnum("junk basket reverse circulation")]
          junkbasketreversecirculation,
        /// <summary>
        /// kelly property
        /// </summary>
          kelly,
        /// <summary>
        /// keyseatwipertool property
        /// </summary>
          [XmlEnum("keyseat wiper tool")]
          keyseatwipertool,
        /// <summary>
        /// landingfloatcollar property
        /// </summary>
          [XmlEnum("landing float collar")]
          landingfloatcollar,
        /// <summary>
        /// leadimpressionblock property
        /// </summary>
          [XmlEnum("lead impression block")]
          leadimpressionblock,
        /// <summary>
        /// liner property
        /// </summary>
          liner,
        /// <summary>
        /// loggingwhiledrillingtool property
        /// </summary>
          [XmlEnum("logging while drilling tool")]
          loggingwhiledrillingtool,
        /// <summary>
        /// magnet property
        /// </summary>
          magnet,
        /// <summary>
        /// millcasingcutting property
        /// </summary>
          [XmlEnum("mill casing cutting")]
          millcasingcutting,
        /// <summary>
        /// milldress property
        /// </summary>
          [XmlEnum("mill dress")]
          milldress,
        /// <summary>
        /// millflatbottom property
        /// </summary>
          [XmlEnum("mill flat bottom")]
          millflatbottom,
        /// <summary>
        /// millhollow property
        /// </summary>
          [XmlEnum("mill hollow")]
          millhollow,
        /// <summary>
        /// millpackerpickerassembly property
        /// </summary>
          [XmlEnum("mill packer picker assembly")]
          millpackerpickerassembly,
        /// <summary>
        /// millpilot property
        /// </summary>
          [XmlEnum("mill pilot")]
          millpilot,
        /// <summary>
        /// millpolish property
        /// </summary>
          [XmlEnum("mill polish")]
          millpolish,
        /// <summary>
        /// millsection property
        /// </summary>
          [XmlEnum("mill section")]
          millsection,
        /// <summary>
        /// milltaper property
        /// </summary>
          [XmlEnum("mill taper")]
          milltaper,
        /// <summary>
        /// millwashover property
        /// </summary>
          [XmlEnum("mill washover")]
          millwashover,
        /// <summary>
        /// millwatermelon property
        /// </summary>
          [XmlEnum("mill watermelon")]
          millwatermelon,
        /// <summary>
        /// milloutextension property
        /// </summary>
          [XmlEnum("millout extension")]
          milloutextension,
        /// <summary>
        /// motor property
        /// </summary>
          motor,
        /// <summary>
        /// motorinstrumented property
        /// </summary>
          [XmlEnum("motor instrumented")]
          motorinstrumented,
        /// <summary>
        /// motorsteerable property
        /// </summary>
          [XmlEnum("motor steerable")]
          motorsteerable,
        /// <summary>
        /// muleshoe property
        /// </summary>
          [XmlEnum("mule shoe")]
          muleshoe,
        /// <summary>
        /// multilateralhangerrunningtool property
        /// </summary>
          [XmlEnum("multilateral hanger running tool")]
          multilateralhangerrunningtool,
        /// <summary>
        /// MWDhangoffsub property
        /// </summary>
          [XmlEnum("MWD hang off sub")]
          MWDhangoffsub,
        /// <summary>
        /// MWDpulser property
        /// </summary>
          [XmlEnum("MWD pulser")]
          MWDpulser,
        /// <summary>
        /// nonmagneticcollar property
        /// </summary>
          [XmlEnum("non-magnetic collar")]
          nonmagneticcollar,
        /// <summary>
        /// nonmagneticstabilizer property
        /// </summary>
          [XmlEnum("non-magnetic stabilizer")]
          nonmagneticstabilizer,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// overshot property
        /// </summary>
          overshot,
        /// <summary>
        /// overshotLH property
        /// </summary>
          [XmlEnum("overshot LH")]
          overshotLH,
        /// <summary>
        /// oversizelipguideovershot property
        /// </summary>
          [XmlEnum("oversize lip guide overshot")]
          oversizelipguideovershot,
        /// <summary>
        /// packer property
        /// </summary>
          packer,
        /// <summary>
        /// packerretrieveTTsqueeze property
        /// </summary>
          [XmlEnum("packer retrieve TT squeeze")]
          packerretrieveTTsqueeze,
        /// <summary>
        /// packerRTTS property
        /// </summary>
          [XmlEnum("packer RTTS")]
          packerRTTS,
        /// <summary>
        /// packerstormvalveRTTS property
        /// </summary>
          [XmlEnum("packer storm valve RTTS")]
          packerstormvalveRTTS,
        /// <summary>
        /// pipecutter property
        /// </summary>
          [XmlEnum("pipe cutter")]
          pipecutter,
        /// <summary>
        /// polishedborereceptacle property
        /// </summary>
          [XmlEnum("polished bore receptacle")]
          polishedborereceptacle,
        /// <summary>
        /// portedstinger property
        /// </summary>
          [XmlEnum("ported stinger")]
          portedstinger,
        /// <summary>
        /// prepackedscreens property
        /// </summary>
          [XmlEnum("prepacked screens")]
          prepackedscreens,
        /// <summary>
        /// reamer property
        /// </summary>
          reamer,
        /// <summary>
        /// reversingtool property
        /// </summary>
          [XmlEnum("reversing tool")]
          reversingtool,
        /// <summary>
        /// riserhighpressure property
        /// </summary>
          [XmlEnum("riser high pressure")]
          riserhighpressure,
        /// <summary>
        /// risermarine property
        /// </summary>
          [XmlEnum("riser marine")]
          risermarine,
        /// <summary>
        /// riserproduction property
        /// </summary>
          [XmlEnum("riser production")]
          riserproduction,
        /// <summary>
        /// rotarysteeringtool property
        /// </summary>
          [XmlEnum("rotary steering tool")]
          rotarysteeringtool,
        /// <summary>
        /// runningtool property
        /// </summary>
          [XmlEnum("running tool")]
          runningtool,
        /// <summary>
        /// safetyjoint property
        /// </summary>
          [XmlEnum("safety joint")]
          safetyjoint,
        /// <summary>
        /// safetyjointLH property
        /// </summary>
          [XmlEnum("safety joint LH")]
          safetyjointLH,
        /// <summary>
        /// scablinerbitguide property
        /// </summary>
          [XmlEnum("scab liner bit guide")]
          scablinerbitguide,
        /// <summary>
        /// scraper property
        /// </summary>
          scraper,
        /// <summary>
        /// scratchers property
        /// </summary>
          scratchers,
        /// <summary>
        /// slottedliner property
        /// </summary>
          [XmlEnum("slotted liner")]
          slottedliner,
        /// <summary>
        /// spear property
        /// </summary>
          spear,
        /// <summary>
        /// stabilizer property
        /// </summary>
          stabilizer,
        /// <summary>
        /// stabilizerinline property
        /// </summary>
          [XmlEnum("stabilizer inline")]
          stabilizerinline,
        /// <summary>
        /// stabilizernearbit property
        /// </summary>
          [XmlEnum("stabilizer near bit")]
          stabilizernearbit,
        /// <summary>
        /// stabilizernearbitrollerreamer property
        /// </summary>
          [XmlEnum("stabilizer near bit roller reamer")]
          stabilizernearbitrollerreamer,
        /// <summary>
        /// stabilizernonrotating property
        /// </summary>
          [XmlEnum("stabilizer non-rotating")]
          stabilizernonrotating,
        /// <summary>
        /// stabilizersteerable property
        /// </summary>
          [XmlEnum("stabilizer steerable")]
          stabilizersteerable,
        /// <summary>
        /// stabilizerstring property
        /// </summary>
          [XmlEnum("stabilizer string")]
          stabilizerstring,
        /// <summary>
        /// stabilizerstringrollerreamer property
        /// </summary>
          [XmlEnum("stabilizer string roller reamer")]
          stabilizerstringrollerreamer,
        /// <summary>
        /// stabilizerturboback property
        /// </summary>
          [XmlEnum("stabilizer turbo back")]
          stabilizerturboback,
        /// <summary>
        /// stabilizervariableblade property
        /// </summary>
          [XmlEnum("stabilizer variable blade")]
          stabilizervariableblade,
        /// <summary>
        /// stagecementcollar property
        /// </summary>
          [XmlEnum("stage cement collar")]
          stagecementcollar,
        /// <summary>
        /// subbarcatcher property
        /// </summary>
          [XmlEnum("sub-bar catcher")]
          subbarcatcher,
        /// <summary>
        /// subbent property
        /// </summary>
          [XmlEnum("sub-bent")]
          subbent,
        /// <summary>
        /// subbit property
        /// </summary>
          [XmlEnum("sub-bit")]
          subbit,
        /// <summary>
        /// subbumper property
        /// </summary>
          [XmlEnum("sub-bumper")]
          subbumper,
        /// <summary>
        /// subcatcher property
        /// </summary>
          [XmlEnum("sub-catcher")]
          subcatcher,
        /// <summary>
        /// subcirculation property
        /// </summary>
          [XmlEnum("sub-circulation")]
          subcirculation,
        /// <summary>
        /// subcone property
        /// </summary>
          [XmlEnum("sub-cone")]
          subcone,
        /// <summary>
        /// subcrossover property
        /// </summary>
          [XmlEnum("sub-crossover")]
          subcrossover,
        /// <summary>
        /// subdart property
        /// </summary>
          [XmlEnum("sub-dart")]
          subdart,
        /// <summary>
        /// subfilter property
        /// </summary>
          [XmlEnum("sub-filter")]
          subfilter,
        /// <summary>
        /// subfloat property
        /// </summary>
          [XmlEnum("sub-float")]
          subfloat,
        /// <summary>
        /// subjetting property
        /// </summary>
          [XmlEnum("sub-jetting")]
          subjetting,
        /// <summary>
        /// subjunk property
        /// </summary>
          [XmlEnum("sub-junk")]
          subjunk,
        /// <summary>
        /// suborienting property
        /// </summary>
          [XmlEnum("sub-orienting")]
          suborienting,
        /// <summary>
        /// subported property
        /// </summary>
          [XmlEnum("sub-ported")]
          subported,
        /// <summary>
        /// subpressurerelief property
        /// </summary>
          [XmlEnum("sub-pressure relief")]
          subpressurerelief,
        /// <summary>
        /// subpumpout property
        /// </summary>
          [XmlEnum("sub-pump out")]
          subpumpout,
        /// <summary>
        /// subrestrictor property
        /// </summary>
          [XmlEnum("sub-restrictor")]
          subrestrictor,
        /// <summary>
        /// subsaver property
        /// </summary>
          [XmlEnum("sub-saver")]
          subsaver,
        /// <summary>
        /// subshock property
        /// </summary>
          [XmlEnum("sub-shock")]
          subshock,
        /// <summary>
        /// subsideentry property
        /// </summary>
          [XmlEnum("sub-side entry")]
          subsideentry,
        /// <summary>
        /// substop property
        /// </summary>
          [XmlEnum("sub-stop")]
          substop,
        /// <summary>
        /// surfacepipe property
        /// </summary>
          [XmlEnum("surface pipe")]
          surfacepipe,
        /// <summary>
        /// tapertap property
        /// </summary>
          [XmlEnum("taper tap")]
          tapertap,
        /// <summary>
        /// tapertapLH property
        /// </summary>
          [XmlEnum("taper tap LH")]
          tapertapLH,
        /// <summary>
        /// thruster property
        /// </summary>
          thruster,
        /// <summary>
        /// tiebackpolishedborereceptacle property
        /// </summary>
          [XmlEnum("tieback polished bore receptacle")]
          tiebackpolishedborereceptacle,
        /// <summary>
        /// tiebackstinger property
        /// </summary>
          [XmlEnum("tieback stinger")]
          tiebackstinger,
        /// <summary>
        /// tubing property
        /// </summary>
          tubing,
        /// <summary>
        /// tubingconveyedperforatinggun property
        /// </summary>
          [XmlEnum("tubing-conveyed perforating gun")]
          tubingconveyedperforatinggun,
        /// <summary>
        /// turbine property
        /// </summary>
          turbine,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// washoverpipe property
        /// </summary>
          [XmlEnum("washover pipe")]
          washoverpipe,
        /// <summary>
        /// whipstock property
        /// </summary>
          whipstock,
        /// <summary>
        /// whipstockanchor property
        /// </summary>
          [XmlEnum("whipstock anchor")]
          whipstockanchor
        }
        /// <summary>
        /// This class represents the BoxPinConfig xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BoxPinConfig xsd enumeration.")]
        public enum BoxPinConfig 
        {
        /// <summary>
        /// bottombox property
        /// </summary>
          [XmlEnum("bottom box")]
          bottombox,
        /// <summary>
        /// topbox property
        /// </summary>
          [XmlEnum("top box")]
          topbox,
        /// <summary>
        /// toppin property
        /// </summary>
          [XmlEnum("top pin")]
          toppin,
        /// <summary>
        /// bottompintopbox property
        /// </summary>
          [XmlEnum("bottom pin top box")]
          bottompintopbox,
        /// <summary>
        /// bottompin property
        /// </summary>
          [XmlEnum("bottom pin")]
          bottompin,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MaterialType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MaterialType xsd enumeration.")]
        public enum MaterialType 
        {
        /// <summary>
        /// aluminum property
        /// </summary>
          aluminum,
        /// <summary>
        /// berylliumcopper property
        /// </summary>
          [XmlEnum("beryllium copper")]
          berylliumcopper,
        /// <summary>
        /// chromealloy property
        /// </summary>
          [XmlEnum("chrome alloy")]
          chromealloy,
        /// <summary>
        /// composite property
        /// </summary>
          composite,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// nonmagneticsteel property
        /// </summary>
          [XmlEnum("non-magnetic steel")]
          nonmagneticsteel,
        /// <summary>
        /// plastic property
        /// </summary>
          plastic,
        /// <summary>
        /// steel property
        /// </summary>
          steel,
        /// <summary>
        /// steelalloy property
        /// </summary>
          [XmlEnum("steel alloy")]
          steelalloy,
        /// <summary>
        /// titanium property
        /// </summary>
          titanium,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the EastOrWest xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the EastOrWest xsd enumeration.")]
        public enum EastOrWest 
        {
        /// <summary>
        /// east property
        /// </summary>
          east,
        /// <summary>
        /// west property
        /// </summary>
          west,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NorthOrSouth xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the NorthOrSouth xsd enumeration.")]
        public enum NorthOrSouth 
        {
        /// <summary>
        /// north property
        /// </summary>
          north,
        /// <summary>
        /// south property
        /// </summary>
          south,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PrincipalMeridian xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PrincipalMeridian xsd enumeration.")]
        public enum PrincipalMeridian 
        {
        /// <summary>
        /// Item1stPrincipalMeridian property
        /// </summary>
          [XmlEnum("1st Principal Meridian")]
          Item1stPrincipalMeridian,
        /// <summary>
        /// Item2ndPrincipalMeridian property
        /// </summary>
          [XmlEnum("2nd Principal Meridian")]
          Item2ndPrincipalMeridian,
        /// <summary>
        /// Item3rdPrincipalMeridian property
        /// </summary>
          [XmlEnum("3rd Principal Meridian")]
          Item3rdPrincipalMeridian,
        /// <summary>
        /// Item4thPrincipalMeridian property
        /// </summary>
          [XmlEnum("4th Principal Meridian")]
          Item4thPrincipalMeridian,
        /// <summary>
        /// Item5thPrincipalMeridian property
        /// </summary>
          [XmlEnum("5th Principal Meridian")]
          Item5thPrincipalMeridian,
        /// <summary>
        /// Item6thPrincipalMeridian property
        /// </summary>
          [XmlEnum("6th Principal Meridian")]
          Item6thPrincipalMeridian,
        /// <summary>
        /// BlackHillsMeridian property
        /// </summary>
          [XmlEnum("Black Hills Meridian")]
          BlackHillsMeridian,
        /// <summary>
        /// BoiseMeridian property
        /// </summary>
          [XmlEnum("Boise Meridian")]
          BoiseMeridian,
        /// <summary>
        /// ChickasawMeridian property
        /// </summary>
          [XmlEnum("Chickasaw Meridian")]
          ChickasawMeridian,
        /// <summary>
        /// ChoctawMeridian property
        /// </summary>
          [XmlEnum("Choctaw Meridian")]
          ChoctawMeridian,
        /// <summary>
        /// CimarronMeridian property
        /// </summary>
          [XmlEnum("Cimarron Meridian")]
          CimarronMeridian,
        /// <summary>
        /// CopperRiverMeridian property
        /// </summary>
          [XmlEnum("Copper River Meridian")]
          CopperRiverMeridian,
        /// <summary>
        /// FairbanksMeridian property
        /// </summary>
          [XmlEnum("Fairbanks Meridian")]
          FairbanksMeridian,
        /// <summary>
        /// GilaandSaltRiverMeridian property
        /// </summary>
          [XmlEnum("Gila and Salt River Meridian")]
          GilaandSaltRiverMeridian,
        /// <summary>
        /// HumboldtMeridian property
        /// </summary>
          [XmlEnum("Humboldt Meridian")]
          HumboldtMeridian,
        /// <summary>
        /// HuntsvilleMeridian property
        /// </summary>
          [XmlEnum("Huntsville Meridian")]
          HuntsvilleMeridian,
        /// <summary>
        /// IndianMeridian property
        /// </summary>
          [XmlEnum("Indian Meridian")]
          IndianMeridian,
        /// <summary>
        /// KateelRiverMeridian property
        /// </summary>
          [XmlEnum("Kateel River Meridian")]
          KateelRiverMeridian,
        /// <summary>
        /// LousianaMeridian property
        /// </summary>
          [XmlEnum("Lousiana Meridian")]
          LousianaMeridian,
        /// <summary>
        /// MichiganMeridian property
        /// </summary>
          [XmlEnum("Michigan Meridian")]
          MichiganMeridian,
        /// <summary>
        /// MontanaMeridian property
        /// </summary>
          [XmlEnum("Montana Meridian")]
          MontanaMeridian,
        /// <summary>
        /// MountDiabloMeridian property
        /// </summary>
          [XmlEnum("Mount Diablo Meridian")]
          MountDiabloMeridian,
        /// <summary>
        /// NavajoMeridian property
        /// </summary>
          [XmlEnum("Navajo Meridian")]
          NavajoMeridian,
        /// <summary>
        /// NewMexicoMeridian property
        /// </summary>
          [XmlEnum("New Mexico Meridian")]
          NewMexicoMeridian,
        /// <summary>
        /// SaintHelenaMeridian property
        /// </summary>
          [XmlEnum("Saint Helena Meridian")]
          SaintHelenaMeridian,
        /// <summary>
        /// SaintStephensMeridian property
        /// </summary>
          [XmlEnum("Saint Stephens Meridian")]
          SaintStephensMeridian,
        /// <summary>
        /// SaltLakeMeridian property
        /// </summary>
          [XmlEnum("Salt Lake Meridian")]
          SaltLakeMeridian,
        /// <summary>
        /// SanBernardoMeridian property
        /// </summary>
          [XmlEnum("San Bernardo Meridian")]
          SanBernardoMeridian,
        /// <summary>
        /// SewardMeridian property
        /// </summary>
          [XmlEnum("Seward Meridian")]
          SewardMeridian,
        /// <summary>
        /// TallahasseeMeridian property
        /// </summary>
          [XmlEnum("Tallahassee Meridian")]
          TallahasseeMeridian,
        /// <summary>
        /// UintahMeridian property
        /// </summary>
          [XmlEnum("Uintah Meridian")]
          UintahMeridian,
        /// <summary>
        /// UmiatMeridian property
        /// </summary>
          [XmlEnum("Umiat Meridian")]
          UmiatMeridian,
        /// <summary>
        /// UteMeridian property
        /// </summary>
          [XmlEnum("Ute Meridian")]
          UteMeridian,
        /// <summary>
        /// WashingtonMeridian property
        /// </summary>
          [XmlEnum("Washington Meridian")]
          WashingtonMeridian,
        /// <summary>
        /// WilliametteMeridian property
        /// </summary>
          [XmlEnum("Williamette Meridian")]
          WilliametteMeridian,
        /// <summary>
        /// WindRiverMeridian property
        /// </summary>
          [XmlEnum("Wind River Meridian")]
          WindRiverMeridian,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ExistenceKind xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ExistenceKind xsd enumeration.")]
        public enum ExistenceKind 
        {
        /// <summary>
        /// actual property
        /// </summary>
          actual,
        /// <summary>
        /// planned property
        /// </summary>
          planned,
        /// <summary>
        /// simulated property
        /// </summary>
          simulated
        }
        /// <summary>
        /// This class represents the PIDXCommodityCode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PIDXCommodityCode xsd enumeration.")]
        public enum PIDXCommodityCode 
        {
        /// <summary>
        /// Item71131001 property
        /// </summary>
          [XmlEnum("71131001")]
          Item71131001,
        /// <summary>
        /// Item71131002 property
        /// </summary>
          [XmlEnum("71131002")]
          Item71131002,
        /// <summary>
        /// Item71131003 property
        /// </summary>
          [XmlEnum("71131003")]
          Item71131003,
        /// <summary>
        /// Item71131004 property
        /// </summary>
          [XmlEnum("71131004")]
          Item71131004,
        /// <summary>
        /// Item71131005 property
        /// </summary>
          [XmlEnum("71131005")]
          Item71131005,
        /// <summary>
        /// Item71131006 property
        /// </summary>
          [XmlEnum("71131006")]
          Item71131006,
        /// <summary>
        /// Item71131007 property
        /// </summary>
          [XmlEnum("71131007")]
          Item71131007,
        /// <summary>
        /// Item71131008 property
        /// </summary>
          [XmlEnum("71131008")]
          Item71131008,
        /// <summary>
        /// Item71131009 property
        /// </summary>
          [XmlEnum("71131009")]
          Item71131009,
        /// <summary>
        /// Item71131010 property
        /// </summary>
          [XmlEnum("71131010")]
          Item71131010,
        /// <summary>
        /// Item71131011 property
        /// </summary>
          [XmlEnum("71131011")]
          Item71131011,
        /// <summary>
        /// Item71131012 property
        /// </summary>
          [XmlEnum("71131012")]
          Item71131012,
        /// <summary>
        /// Item71131013 property
        /// </summary>
          [XmlEnum("71131013")]
          Item71131013,
        /// <summary>
        /// Item71131014 property
        /// </summary>
          [XmlEnum("71131014")]
          Item71131014,
        /// <summary>
        /// Item71131015 property
        /// </summary>
          [XmlEnum("71131015")]
          Item71131015,
        /// <summary>
        /// Item71131016 property
        /// </summary>
          [XmlEnum("71131016")]
          Item71131016,
        /// <summary>
        /// Item71131018 property
        /// </summary>
          [XmlEnum("71131018")]
          Item71131018,
        /// <summary>
        /// Item71131019 property
        /// </summary>
          [XmlEnum("71131019")]
          Item71131019
        }
        /// <summary>
        /// This class represents the RiskType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RiskType xsd enumeration.")]
        public enum RiskType 
        {
        /// <summary>
        /// risk property
        /// </summary>
          risk,
        /// <summary>
        /// event property
        /// </summary>
          @event,
        /// <summary>
        /// nearmiss property
        /// </summary>
          [XmlEnum("near miss")]
          nearmiss,
        /// <summary>
        /// bestpractice property
        /// </summary>
          [XmlEnum("best practice")]
          bestpractice,
        /// <summary>
        /// lessonslearned property
        /// </summary>
          [XmlEnum("lessons learned")]
          lessonslearned,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the RiskCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RiskCategory xsd enumeration.")]
        public enum RiskCategory 
        {
        /// <summary>
        /// hydraulics property
        /// </summary>
          hydraulics,
        /// <summary>
        /// mechanical property
        /// </summary>
          mechanical,
        /// <summary>
        /// timerelated property
        /// </summary>
          [XmlEnum("time related")]
          timerelated,
        /// <summary>
        /// wellborestability property
        /// </summary>
          [XmlEnum("wellbore stability")]
          wellborestability,
        /// <summary>
        /// directionaldrilling property
        /// </summary>
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// bit property
        /// </summary>
          bit,
        /// <summary>
        /// equipmentfailure property
        /// </summary>
          [XmlEnum("equipment failure")]
          equipmentfailure,
        /// <summary>
        /// completion property
        /// </summary>
          completion,
        /// <summary>
        /// casing property
        /// </summary>
          casing,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// HSE property
        /// </summary>
          HSE
        }
        /// <summary>
        /// This class represents the RiskSubCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RiskSubCategory xsd enumeration.")]
        public enum RiskSubCategory 
        {
        /// <summary>
        /// gaskick property
        /// </summary>
          [XmlEnum("gas kick")]
          gaskick,
        /// <summary>
        /// shallowwaterinflux property
        /// </summary>
          [XmlEnum("shallow water influx")]
          shallowwaterinflux,
        /// <summary>
        /// otherinfluxorkicks property
        /// </summary>
          [XmlEnum("other influx or kicks")]
          otherinfluxorkicks,
        /// <summary>
        /// losscirculation property
        /// </summary>
          [XmlEnum("loss circulation")]
          losscirculation,
        /// <summary>
        /// poorholecleaning property
        /// </summary>
          [XmlEnum("poor hole cleaning")]
          poorholecleaning,
        /// <summary>
        /// goodholecleaningathighROP property
        /// </summary>
          [XmlEnum("good hole cleaning at high ROP")]
          goodholecleaningathighROP,
        /// <summary>
        /// highmudweight property
        /// </summary>
          [XmlEnum("high mud weight")]
          highmudweight,
        /// <summary>
        /// specialadditivesneeded property
        /// </summary>
          [XmlEnum("special additives needed")]
          specialadditivesneeded,
        /// <summary>
        /// gumboproblems property
        /// </summary>
          [XmlEnum("gumbo problems")]
          gumboproblems,
        /// <summary>
        /// highECDrheologyrelated property
        /// </summary>
          [XmlEnum("high ECD - rheology related")]
          highECDrheologyrelated,
        /// <summary>
        /// excessivecirculation property
        /// </summary>
          [XmlEnum("excessive circulation")]
          excessivecirculation,
        /// <summary>
        /// performingakill property
        /// </summary>
          [XmlEnum("performing a kill")]
          performingakill,
        /// <summary>
        /// mudweightchange property
        /// </summary>
          [XmlEnum("mud weight change")]
          mudweightchange,
        /// <summary>
        /// excessivepipecementscaling property
        /// </summary>
          [XmlEnum("excessive pipe cement scaling")]
          excessivepipecementscaling,
        /// <summary>
        /// pitgainorloss property
        /// </summary>
          [XmlEnum("pit gain or loss")]
          pitgainorloss,
        /// <summary>
        /// mudstabilityproblems property
        /// </summary>
          [XmlEnum("mud stability problems")]
          mudstabilityproblems,
        /// <summary>
        /// shallowgasflow property
        /// </summary>
          [XmlEnum("shallow gas flow")]
          shallowgasflow,
        /// <summary>
        /// twistoff property
        /// </summary>
          [XmlEnum("twist off")]
          twistoff,
        /// <summary>
        /// stuckpipe property
        /// </summary>
          [XmlEnum("stuck pipe")]
          stuckpipe,
        /// <summary>
        /// wirelinestuckinhole property
        /// </summary>
          [XmlEnum("wireline stuck in hole")]
          wirelinestuckinhole,
        /// <summary>
        /// stickandslip property
        /// </summary>
          [XmlEnum("stick and slip")]
          stickandslip,
        /// <summary>
        /// vibrationaxial property
        /// </summary>
          [XmlEnum("vibration - axial")]
          vibrationaxial,
        /// <summary>
        /// vibrationtorsional property
        /// </summary>
          [XmlEnum("vibration - torsional")]
          vibrationtorsional,
        /// <summary>
        /// vibrationtransverse property
        /// </summary>
          [XmlEnum("vibration - transverse")]
          vibrationtransverse,
        /// <summary>
        /// vibrationunknownorroughdrilling property
        /// </summary>
          [XmlEnum("vibration unknown or rough drilling")]
          vibrationunknownorroughdrilling,
        /// <summary>
        /// unevenwearofBHA property
        /// </summary>
          [XmlEnum("uneven wear of BHA")]
          unevenwearofBHA,
        /// <summary>
        /// unevenwearofdrillstring property
        /// </summary>
          [XmlEnum("uneven wear of drillstring")]
          unevenwearofdrillstring,
        /// <summary>
        /// excessivetorque property
        /// </summary>
          [XmlEnum("excessive torque")]
          excessivetorque,
        /// <summary>
        /// excessivedrag property
        /// </summary>
          [XmlEnum("excessive drag")]
          excessivedrag,
        /// <summary>
        /// reaminggreaterthan2hours property
        /// </summary>
          [XmlEnum("reaming greater than 2 hours")]
          reaminggreaterthan2hours,
        /// <summary>
        /// washouts property
        /// </summary>
          washouts,
        /// <summary>
        /// tightholeoroverPull property
        /// </summary>
          [XmlEnum("tight hole or overPull")]
          tightholeoroverPull,
        /// <summary>
        /// failedinspectionsorfatiguewear property
        /// </summary>
          [XmlEnum("failed inspections or fatigue wear")]
          failedinspectionsorfatiguewear,
        /// <summary>
        /// mechanical property
        /// </summary>
          mechanical,
        /// <summary>
        /// drillinggreaterthan1000feetday property
        /// </summary>
          [XmlEnum("drilling greater than 1000 feet/day")]
          drillinggreaterthan1000feetday,
        /// <summary>
        /// drillinggreaterthan2000feetday property
        /// </summary>
          [XmlEnum("drilling greater than 2000 feet/day")]
          drillinggreaterthan2000feetday,
        /// <summary>
        /// drillinglessthan20feetday property
        /// </summary>
          [XmlEnum("drilling less than 20 feet/day")]
          drillinglessthan20feetday,
        /// <summary>
        /// tripsgreaterthan24hours property
        /// </summary>
          [XmlEnum("trips greater than 24 hours")]
          tripsgreaterthan24hours,
        /// <summary>
        /// excessivetimeforBHAmakeup property
        /// </summary>
          [XmlEnum("excessive time for BHA makeup")]
          excessivetimeforBHAmakeup,
        /// <summary>
        /// waitingondecisions property
        /// </summary>
          [XmlEnum("waiting on decisions")]
          waitingondecisions,
        /// <summary>
        /// waitingonweather property
        /// </summary>
          [XmlEnum("waiting on weather")]
          waitingonweather,
        /// <summary>
        /// waitingontools property
        /// </summary>
          [XmlEnum("waiting on tools")]
          waitingontools,
        /// <summary>
        /// sloughingorpackoffs property
        /// </summary>
          [XmlEnum("sloughing or packoffs")]
          sloughingorpackoffs,
        /// <summary>
        /// ballooning property
        /// </summary>
          ballooning,
        /// <summary>
        /// fractureproblems property
        /// </summary>
          [XmlEnum("fracture problems")]
          fractureproblems,
        /// <summary>
        /// unstablezones property
        /// </summary>
          [XmlEnum("unstable zones")]
          unstablezones,
        /// <summary>
        /// formationintegritytest property
        /// </summary>
          [XmlEnum("formation integrity test")]
          formationintegritytest,
        /// <summary>
        /// leakofftest property
        /// </summary>
          [XmlEnum("leak-off test")]
          leakofftest,
        /// <summary>
        /// tectonics property
        /// </summary>
          tectonics,
        /// <summary>
        /// porepressure property
        /// </summary>
          [XmlEnum("pore pressure")]
          porepressure,
        /// <summary>
        /// breakouts property
        /// </summary>
          breakouts,
        /// <summary>
        /// bedparallel property
        /// </summary>
          [XmlEnum("bed parallel")]
          bedparallel,
        /// <summary>
        /// wellborestability property
        /// </summary>
          [XmlEnum("wellbore stability")]
          wellborestability,
        /// <summary>
        /// excessivedoglegs property
        /// </summary>
          [XmlEnum("excessive doglegs")]
          excessivedoglegs,
        /// <summary>
        /// sidetrack property
        /// </summary>
          sidetrack,
        /// <summary>
        /// BHAchangefordirectional property
        /// </summary>
          [XmlEnum("BHA change for directional")]
          BHAchangefordirectional,
        /// <summary>
        /// wrongtotalflowarea property
        /// </summary>
          [XmlEnum("wrong total flow area")]
          wrongtotalflowarea,
        /// <summary>
        /// wellcollisionactual property
        /// </summary>
          [XmlEnum("well collision - actual")]
          wellcollisionactual,
        /// <summary>
        /// wellcollisiontechnical property
        /// </summary>
          [XmlEnum("well collision - technical")]
          wellcollisiontechnical,
        /// <summary>
        /// geosteering property
        /// </summary>
          geosteering,
        /// <summary>
        /// abnormaltendencychanges property
        /// </summary>
          [XmlEnum("abnormal tendency changes")]
          abnormaltendencychanges,
        /// <summary>
        /// resurveying property
        /// </summary>
          resurveying,
        /// <summary>
        /// infieldreferencingIFRactions property
        /// </summary>
          [XmlEnum("in-field referencing (IFR) actions")]
          infieldreferencingIFRactions,
        /// <summary>
        /// bitorBHAperformance property
        /// </summary>
          [XmlEnum("bit or BHA performance")]
          bitorBHAperformance,
        /// <summary>
        /// drillingoptimization property
        /// </summary>
          [XmlEnum("drilling optimization")]
          drillingoptimization,
        /// <summary>
        /// bitballing property
        /// </summary>
          [XmlEnum("bit balling")]
          bitballing,
        /// <summary>
        /// lostconesorbrokencutters property
        /// </summary>
          [XmlEnum("lost cones or broken cutters")]
          lostconesorbrokencutters,
        /// <summary>
        /// excessivebitwearorgauge property
        /// </summary>
          [XmlEnum("excessive bit wear or gauge")]
          excessivebitwearorgauge,
        /// <summary>
        /// lowrateofbitpenetration property
        /// </summary>
          [XmlEnum("low rate of bit penetration")]
          lowrateofbitpenetration,
        /// <summary>
        /// highrateofbitpenetration property
        /// </summary>
          [XmlEnum("high rate of bit penetration")]
          highrateofbitpenetration,
        /// <summary>
        /// downholetool property
        /// </summary>
          [XmlEnum("downhole tool")]
          downholetool,
        /// <summary>
        /// surfacesystem property
        /// </summary>
          [XmlEnum("surface system")]
          surfacesystem,
        /// <summary>
        /// motororrotarysteerablesystemfailure property
        /// </summary>
          [XmlEnum("motor or rotary steerable system failure")]
          motororrotarysteerablesystemfailure,
        /// <summary>
        /// topdrivefailure property
        /// </summary>
          [XmlEnum("topdrive failure")]
          topdrivefailure,
        /// <summary>
        /// hoistingequipmentfailure property
        /// </summary>
          [XmlEnum("hoisting equipment failure")]
          hoistingequipmentfailure,
        /// <summary>
        /// circulatingequipmentfailure property
        /// </summary>
          [XmlEnum("circulating equipment failure")]
          circulatingequipmentfailure,
        /// <summary>
        /// electricalsystemfailure property
        /// </summary>
          [XmlEnum("electrical system failure")]
          electricalsystemfailure,
        /// <summary>
        /// blowoutpreventerevents property
        /// </summary>
          [XmlEnum("blow out preventer events")]
          blowoutpreventerevents,
        /// <summary>
        /// surfaceinstrumentationproblems property
        /// </summary>
          [XmlEnum("surface instrumentation problems")]
          surfaceinstrumentationproblems,
        /// <summary>
        /// rigcommunications property
        /// </summary>
          [XmlEnum("rig communications")]
          rigcommunications,
        /// <summary>
        /// completionequipmentfailure property
        /// </summary>
          [XmlEnum("completion equipment failure")]
          completionequipmentfailure,
        /// <summary>
        /// miscellaneousrigequipment property
        /// </summary>
          [XmlEnum("miscellaneous rig equipment")]
          miscellaneousrigequipment,
        /// <summary>
        /// toolorequipmentfailure property
        /// </summary>
          [XmlEnum("tool or equipment failure")]
          toolorequipmentfailure,
        /// <summary>
        /// squeezejobs property
        /// </summary>
          [XmlEnum("squeeze jobs")]
          squeezejobs,
        /// <summary>
        /// casingsurgelosses property
        /// </summary>
          [XmlEnum("casing surge losses")]
          casingsurgelosses,
        /// <summary>
        /// stuckcasingorcompletion property
        /// </summary>
          [XmlEnum("stuck casing or completion")]
          stuckcasingorcompletion,
        /// <summary>
        /// shoefailures property
        /// </summary>
          [XmlEnum("shoe failures")]
          shoefailures,
        /// <summary>
        /// earlycementsetup property
        /// </summary>
          [XmlEnum("early cement setup")]
          earlycementsetup,
        /// <summary>
        /// casingcollapse property
        /// </summary>
          [XmlEnum("casing collapse")]
          casingcollapse,
        /// <summary>
        /// milling property
        /// </summary>
          milling,
        /// <summary>
        /// excessivecasingwearorcuttings property
        /// </summary>
          [XmlEnum("excessive casing wear or cuttings")]
          excessivecasingwearorcuttings,
        /// <summary>
        /// excessiveformationdamageorskin property
        /// </summary>
          [XmlEnum("excessive formation damage or skin")]
          excessiveformationdamageorskin,
        /// <summary>
        /// casingrotationorreciprocationrqd property
        /// </summary>
          [XmlEnum("casing rotation or reciprocation rqd")]
          casingrotationorreciprocationrqd,
        /// <summary>
        /// broaching property
        /// </summary>
          broaching,
        /// <summary>
        /// completionorcasing property
        /// </summary>
          [XmlEnum("completion or casing")]
          completionorcasing,
        /// <summary>
        /// stratigraphy property
        /// </summary>
          stratigraphy,
        /// <summary>
        /// fishing property
        /// </summary>
          fishing,
        /// <summary>
        /// junkinhole property
        /// </summary>
          [XmlEnum("junk in hole")]
          junkinhole,
        /// <summary>
        /// delayduetopoliticalunrest property
        /// </summary>
          [XmlEnum("delay due to political unrest")]
          delayduetopoliticalunrest,
        /// <summary>
        /// rigmove property
        /// </summary>
          [XmlEnum("rig move")]
          rigmove,
        /// <summary>
        /// gashydrates property
        /// </summary>
          [XmlEnum("gas hydrates")]
          gashydrates,
        /// <summary>
        /// pendinganalysis property
        /// </summary>
          [XmlEnum("pending analysis")]
          pendinganalysis,
        /// <summary>
        /// riserdisconnect property
        /// </summary>
          [XmlEnum("riser disconnect")]
          riserdisconnect,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// personnel property
        /// </summary>
          personnel,
        /// <summary>
        /// environmental property
        /// </summary>
          environmental,
        /// <summary>
        /// automotive property
        /// </summary>
          automotive,
        /// <summary>
        /// asset property
        /// </summary>
          asset,
        /// <summary>
        /// information property
        /// </summary>
          information,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// HSE property
        /// </summary>
          HSE
        }
        /// <summary>
        /// This class represents the RiskAffectedPersonnel xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RiskAffectedPersonnel xsd enumeration.")]
        public enum RiskAffectedPersonnel 
        {
        /// <summary>
        /// cementer property
        /// </summary>
          cementer,
        /// <summary>
        /// companyman property
        /// </summary>
          [XmlEnum("company man")]
          companyman,
        /// <summary>
        /// contractor property
        /// </summary>
          contractor,
        /// <summary>
        /// directionaldriller property
        /// </summary>
          [XmlEnum("directional driller")]
          directionaldriller,
        /// <summary>
        /// driller property
        /// </summary>
          driller,
        /// <summary>
        /// drillingengineer property
        /// </summary>
          [XmlEnum("drilling engineer")]
          drillingengineer,
        /// <summary>
        /// drillingsuperintendent property
        /// </summary>
          [XmlEnum("drilling superintendent")]
          drillingsuperintendent,
        /// <summary>
        /// drillingteam property
        /// </summary>
          [XmlEnum("drilling team")]
          drillingteam,
        /// <summary>
        /// facilityengineer property
        /// </summary>
          [XmlEnum("facility engineer")]
          facilityengineer,
        /// <summary>
        /// fieldservicemanager property
        /// </summary>
          [XmlEnum("field service manager")]
          fieldservicemanager,
        /// <summary>
        /// foreman property
        /// </summary>
          foreman,
        /// <summary>
        /// generalservicesupervisor property
        /// </summary>
          [XmlEnum("general service supervisor")]
          generalservicesupervisor,
        /// <summary>
        /// geologist property
        /// </summary>
          geologist,
        /// <summary>
        /// member property
        /// </summary>
          member,
        /// <summary>
        /// mudengineer property
        /// </summary>
          [XmlEnum("mud engineer")]
          mudengineer,
        /// <summary>
        /// mudlogger property
        /// </summary>
          [XmlEnum("mud logger")]
          mudlogger,
        /// <summary>
        /// MWDorLWDengineer property
        /// </summary>
          [XmlEnum("MWD or LWD engineer")]
          MWDorLWDengineer,
        /// <summary>
        /// performengineer property
        /// </summary>
          [XmlEnum("perform engineer")]
          performengineer,
        /// <summary>
        /// petrophysicist property
        /// </summary>
          petrophysicist,
        /// <summary>
        /// productionengineer property
        /// </summary>
          [XmlEnum("production engineer")]
          productionengineer,
        /// <summary>
        /// remotelyoperatedvehicleengineer property
        /// </summary>
          [XmlEnum("remotely operated vehicle engineer")]
          remotelyoperatedvehicleengineer,
        /// <summary>
        /// safetymanger property
        /// </summary>
          [XmlEnum("safety manger")]
          safetymanger,
        /// <summary>
        /// salesengineer property
        /// </summary>
          [XmlEnum("sales engineer")]
          salesengineer,
        /// <summary>
        /// servicesupervisor property
        /// </summary>
          [XmlEnum("service supervisor")]
          servicesupervisor,
        /// <summary>
        /// technicalsupport property
        /// </summary>
          [XmlEnum("technical support")]
          technicalsupport,
        /// <summary>
        /// toolpusher property
        /// </summary>
          [XmlEnum("tool pusher")]
          toolpusher,
        /// <summary>
        /// wirelineengineer property
        /// </summary>
          [XmlEnum("wireline engineer")]
          wirelineengineer
        }
        /// <summary>
        /// This class represents the RigType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RigType xsd enumeration.")]
        public enum RigType 
        {
        /// <summary>
        /// barge property
        /// </summary>
          barge,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// floater property
        /// </summary>
          floater,
        /// <summary>
        /// jackup property
        /// </summary>
          jackup,
        /// <summary>
        /// land property
        /// </summary>
          land,
        /// <summary>
        /// platform property
        /// </summary>
          platform,
        /// <summary>
        /// semisubmersible property
        /// </summary>
          [XmlEnum("semi-submersible")]
          semisubmersible
        }
        /// <summary>
        /// This class represents the DerrickType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DerrickType xsd enumeration.")]
        public enum DerrickType 
        {
        /// <summary>
        /// double property
        /// </summary>
          @double,
        /// <summary>
        /// quadruple property
        /// </summary>
          quadruple,
        /// <summary>
        /// slant property
        /// </summary>
          slant,
        /// <summary>
        /// triple property
        /// </summary>
          triple
        }
        /// <summary>
        /// This class represents the DrawWorksType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DrawWorksType xsd enumeration.")]
        public enum DrawWorksType 
        {
        /// <summary>
        /// mechanical property
        /// </summary>
          mechanical,
        /// <summary>
        /// standardelectric property
        /// </summary>
          [XmlEnum("standard electric")]
          standardelectric,
        /// <summary>
        /// dieselelectric property
        /// </summary>
          [XmlEnum("diesel electric")]
          dieselelectric,
        /// <summary>
        /// ramrig property
        /// </summary>
          [XmlEnum("ram rig")]
          ramrig
        }
        /// <summary>
        /// This class represents the DriveType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DriveType xsd enumeration.")]
        public enum DriveType 
        {
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// rotarykellydrive property
        /// </summary>
          [XmlEnum("rotary kelly drive")]
          rotarykellydrive,
        /// <summary>
        /// topdrive property
        /// </summary>
          [XmlEnum("top drive")]
          topdrive
        }
        /// <summary>
        /// This class represents the ChannelStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ChannelStatus xsd enumeration.")]
        public enum ChannelStatus 
        {
        /// <summary>
        /// active property
        /// </summary>
          active,
        /// <summary>
        /// closed property
        /// </summary>
          closed,
        /// <summary>
        /// inactive property
        /// </summary>
          inactive
        }
        /// <summary>
        /// This class represents the FileNameType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the FileNameType xsd enumeration.")]
        public enum FileNameType 
        {
        /// <summary>
        /// filename property
        /// </summary>
          [XmlEnum("file name")]
          filename,
        /// <summary>
        /// pathname property
        /// </summary>
          [XmlEnum("path name")]
          pathname,
        /// <summary>
        /// universalresourcelocator property
        /// </summary>
          [XmlEnum("universal resource locator")]
          universalresourcelocator,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the MimeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MimeType xsd enumeration.")]
        public enum MimeType 
        {
        /// <summary>
        /// imagetiff property
        /// </summary>
          [XmlEnum("image/tiff")]
          imagetiff,
        /// <summary>
        /// imagegif property
        /// </summary>
          [XmlEnum("image/gif")]
          imagegif,
        /// <summary>
        /// imagepng property
        /// </summary>
          [XmlEnum("image/png")]
          imagepng,
        /// <summary>
        /// imagexmlsvg property
        /// </summary>
          [XmlEnum("image/xml+svg")]
          imagexmlsvg,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the MessageDigestType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MessageDigestType xsd enumeration.")]
        public enum MessageDigestType 
        {
        /// <summary>
        /// MD5 property
        /// </summary>
          MD5,
        /// <summary>
        /// SHA1 property
        /// </summary>
          SHA1,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the AziRef xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the AziRef xsd enumeration.")]
        public enum AziRef 
        {
        /// <summary>
        /// magneticnorth property
        /// </summary>
          [XmlEnum("magnetic north")]
          magneticnorth,
        /// <summary>
        /// gridnorth property
        /// </summary>
          [XmlEnum("grid north")]
          gridnorth,
        /// <summary>
        /// truenorth property
        /// </summary>
          [XmlEnum("true north")]
          truenorth,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the CementJobType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the CementJobType xsd enumeration.")]
        public enum CementJobType 
        {
        /// <summary>
        /// primary property
        /// </summary>
          primary,
        /// <summary>
        /// plug property
        /// </summary>
          plug,
        /// <summary>
        /// squeeze property
        /// </summary>
          squeeze,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ChannelState xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ChannelState xsd enumeration.")]
        public enum ChannelState 
        {
        /// <summary>
        /// calculated property
        /// </summary>
          calculated,
        /// <summary>
        /// final property
        /// </summary>
          final,
        /// <summary>
        /// memory property
        /// </summary>
          memory,
        /// <summary>
        /// processed property
        /// </summary>
          processed,
        /// <summary>
        /// realtime property
        /// </summary>
          [XmlEnum("real time")]
          realtime
        }
        /// <summary>
        /// This class represents the ChannelDerivation xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ChannelDerivation xsd enumeration.")]
        public enum ChannelDerivation 
        {
        /// <summary>
        /// raw property
        /// </summary>
          raw,
        /// <summary>
        /// simulated property
        /// </summary>
          simulated,
        /// <summary>
        /// spliced property
        /// </summary>
          spliced,
        /// <summary>
        /// sampled property
        /// </summary>
          sampled,
        /// <summary>
        /// model property
        /// </summary>
          model
        }
        /// <summary>
        /// This class represents the LoggingMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LoggingMethod xsd enumeration.")]
        public enum LoggingMethod 
        {
        /// <summary>
        /// computed property
        /// </summary>
          computed,
        /// <summary>
        /// distributed property
        /// </summary>
          distributed,
        /// <summary>
        /// LWD property
        /// </summary>
          LWD,
        /// <summary>
        /// mixed property
        /// </summary>
          mixed,
        /// <summary>
        /// MWD property
        /// </summary>
          MWD,
        /// <summary>
        /// surface property
        /// </summary>
          surface,
        /// <summary>
        /// wireline property
        /// </summary>
          wireline
        }
        /// <summary>
        /// This class represents the BhaStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BhaStatus xsd enumeration.")]
        public enum BhaStatus 
        {
        /// <summary>
        /// final property
        /// </summary>
          final,
        /// <summary>
        /// progress property
        /// </summary>
          progress,
        /// <summary>
        /// plan property
        /// </summary>
          plan
        }
        /// <summary>
        /// This class represents the OpsReportVersion xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the OpsReportVersion xsd enumeration.")]
        public enum OpsReportVersion 
        {
        /// <summary>
        /// preliminary property
        /// </summary>
          preliminary,
        /// <summary>
        /// normal property
        /// </summary>
          normal,
        /// <summary>
        /// final property
        /// </summary>
          final,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TubularAssembly xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TubularAssembly xsd enumeration.")]
        public enum TubularAssembly 
        {
        /// <summary>
        /// drilling property
        /// </summary>
          drilling,
        /// <summary>
        /// directionaldrilling property
        /// </summary>
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// fishing property
        /// </summary>
          fishing,
        /// <summary>
        /// conditionmud property
        /// </summary>
          [XmlEnum("condition mud")]
          conditionmud,
        /// <summary>
        /// tubingconveyedlogging property
        /// </summary>
          [XmlEnum("tubing conveyed logging")]
          tubingconveyedlogging,
        /// <summary>
        /// cementing property
        /// </summary>
          cementing,
        /// <summary>
        /// casing property
        /// </summary>
          casing,
        /// <summary>
        /// cleanout property
        /// </summary>
          [XmlEnum("clean out")]
          cleanout,
        /// <summary>
        /// completionortesting property
        /// </summary>
          [XmlEnum("completion or testing")]
          completionortesting,
        /// <summary>
        /// coring property
        /// </summary>
          coring,
        /// <summary>
        /// holeopeningorunderreaming property
        /// </summary>
          [XmlEnum("hole opening or underreaming")]
          holeopeningorunderreaming,
        /// <summary>
        /// millingordressingorcutting property
        /// </summary>
          [XmlEnum("milling or dressing or cutting")]
          millingordressingorcutting,
        /// <summary>
        /// wiperorcheckorreaming property
        /// </summary>
          [XmlEnum("wiper or check or reaming")]
          wiperorcheckorreaming,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the WellStatus xsd enumeration.")]
        public enum WellStatus 
        {
        /// <summary>
        /// abandoned property
        /// </summary>
          abandoned,
        /// <summary>
        /// active property
        /// </summary>
          active,
        /// <summary>
        /// activeinjecting property
        /// </summary>
          [XmlEnum("active -- injecting")]
          activeinjecting,
        /// <summary>
        /// activeproducing property
        /// </summary>
          [XmlEnum("active -- producing")]
          activeproducing,
        /// <summary>
        /// completed property
        /// </summary>
          completed,
        /// <summary>
        /// drilling property
        /// </summary>
          drilling,
        /// <summary>
        /// partiallyplugged property
        /// </summary>
          [XmlEnum("partially plugged")]
          partiallyplugged,
        /// <summary>
        /// permitted property
        /// </summary>
          permitted,
        /// <summary>
        /// pluggedandabandoned property
        /// </summary>
          [XmlEnum("plugged and abandoned")]
          pluggedandabandoned,
        /// <summary>
        /// proposed property
        /// </summary>
          proposed,
        /// <summary>
        /// sold property
        /// </summary>
          sold,
        /// <summary>
        /// suspended property
        /// </summary>
          suspended,
        /// <summary>
        /// temporarilyabandoned property
        /// </summary>
          [XmlEnum("temporarily abandoned")]
          temporarilyabandoned,
        /// <summary>
        /// testing property
        /// </summary>
          testing,
        /// <summary>
        /// tight property
        /// </summary>
          tight,
        /// <summary>
        /// workingover property
        /// </summary>
          [XmlEnum("working over")]
          workingover,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellPurpose xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellPurpose xsd enumeration.")]
        public enum WellPurpose 
        {
        /// <summary>
        /// appraisal property
        /// </summary>
          appraisal,
        /// <summary>
        /// appraisalconfirmationappraisal property
        /// </summary>
          [XmlEnum("appraisal -- confirmation appraisal")]
          appraisalconfirmationappraisal,
        /// <summary>
        /// appraisalexploratoryappraisal property
        /// </summary>
          [XmlEnum("appraisal -- exploratory appraisal")]
          appraisalexploratoryappraisal,
        /// <summary>
        /// exploration property
        /// </summary>
          exploration,
        /// <summary>
        /// explorationdeeperpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- deeper-pool wildcat")]
          explorationdeeperpoolwildcat,
        /// <summary>
        /// explorationnewfieldwildcat property
        /// </summary>
          [XmlEnum("exploration -- new-field wildcat")]
          explorationnewfieldwildcat,
        /// <summary>
        /// explorationnewpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- new-pool wildcat")]
          explorationnewpoolwildcat,
        /// <summary>
        /// explorationoutpostwildcat property
        /// </summary>
          [XmlEnum("exploration -- outpost wildcat")]
          explorationoutpostwildcat,
        /// <summary>
        /// explorationshallowerpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- shallower-pool wildcat")]
          explorationshallowerpoolwildcat,
        /// <summary>
        /// development property
        /// </summary>
          development,
        /// <summary>
        /// developmentinfilldevelopment property
        /// </summary>
          [XmlEnum("development -- infill development")]
          developmentinfilldevelopment,
        /// <summary>
        /// developmentinjector property
        /// </summary>
          [XmlEnum("development -- injector")]
          developmentinjector,
        /// <summary>
        /// developmentproducer property
        /// </summary>
          [XmlEnum("development -- producer")]
          developmentproducer,
        /// <summary>
        /// fluidstorage property
        /// </summary>
          [XmlEnum("fluid storage")]
          fluidstorage,
        /// <summary>
        /// fluidstoragegasstorage property
        /// </summary>
          [XmlEnum("fluid storage -- gas storage")]
          fluidstoragegasstorage,
        /// <summary>
        /// generalsrvc property
        /// </summary>
          [XmlEnum("general srvc")]
          generalsrvc,
        /// <summary>
        /// generalsrvcboreholereacquisition property
        /// </summary>
          [XmlEnum("general srvc -- borehole re-acquisition")]
          generalsrvcboreholereacquisition,
        /// <summary>
        /// generalsrvcobservation property
        /// </summary>
          [XmlEnum("general srvc -- observation")]
          generalsrvcobservation,
        /// <summary>
        /// generalsrvcrelief property
        /// </summary>
          [XmlEnum("general srvc -- relief")]
          generalsrvcrelief,
        /// <summary>
        /// generalsrvcresearch property
        /// </summary>
          [XmlEnum("general srvc -- research")]
          generalsrvcresearch,
        /// <summary>
        /// generalsrvcresearchdrilltest property
        /// </summary>
          [XmlEnum("general srvc -- research -- drill test")]
          generalsrvcresearchdrilltest,
        /// <summary>
        /// generalsrvcresearchstrattest property
        /// </summary>
          [XmlEnum("general srvc -- research -- strat test")]
          generalsrvcresearchstrattest,
        /// <summary>
        /// generalsrvcwastedisposal property
        /// </summary>
          [XmlEnum("general srvc -- waste disposal")]
          generalsrvcwastedisposal,
        /// <summary>
        /// mineral property
        /// </summary>
          mineral,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellboreShape xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellboreShape xsd enumeration.")]
        public enum WellboreShape 
        {
        /// <summary>
        /// buildandhold property
        /// </summary>
          [XmlEnum("build and hold")]
          buildandhold,
        /// <summary>
        /// deviated property
        /// </summary>
          deviated,
        /// <summary>
        /// doublekickoff property
        /// </summary>
          [XmlEnum("double kickoff")]
          doublekickoff,
        /// <summary>
        /// horizontal property
        /// </summary>
          horizontal,
        /// <summary>
        /// Sshaped property
        /// </summary>
          [XmlEnum("S-shaped")]
          Sshaped,
        /// <summary>
        /// vertical property
        /// </summary>
          vertical,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellFluid xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellFluid xsd enumeration.")]
        public enum WellFluid 
        {
        /// <summary>
        /// air property
        /// </summary>
          air,
        /// <summary>
        /// condensate property
        /// </summary>
          condensate,
        /// <summary>
        /// dry property
        /// </summary>
          dry,
        /// <summary>
        /// gas property
        /// </summary>
          gas,
        /// <summary>
        /// gaswater property
        /// </summary>
          [XmlEnum("gas-water")]
          gaswater,
        /// <summary>
        /// nonHCgas property
        /// </summary>
          [XmlEnum("non HC gas")]
          nonHCgas,
        /// <summary>
        /// nonHCgasCO2 property
        /// </summary>
          [XmlEnum("non HC gas -- CO2")]
          nonHCgasCO2,
        /// <summary>
        /// oil property
        /// </summary>
          oil,
        /// <summary>
        /// oilgas property
        /// </summary>
          [XmlEnum("oil-gas")]
          oilgas,
        /// <summary>
        /// oilwater property
        /// </summary>
          [XmlEnum("oil-water")]
          oilwater,
        /// <summary>
        /// steam property
        /// </summary>
          steam,
        /// <summary>
        /// water property
        /// </summary>
          water,
        /// <summary>
        /// waterbrine property
        /// </summary>
          [XmlEnum("water -- brine")]
          waterbrine,
        /// <summary>
        /// waterfreshwater property
        /// </summary>
          [XmlEnum("water -- fresh water")]
          waterfreshwater,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellDirection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellDirection xsd enumeration.")]
        public enum WellDirection 
        {
        /// <summary>
        /// huffnpuff property
        /// </summary>
          [XmlEnum("huff-n-puff")]
          huffnpuff,
        /// <summary>
        /// injector property
        /// </summary>
          injector,
        /// <summary>
        /// producer property
        /// </summary>
          producer,
        /// <summary>
        /// uncertain property
        /// </summary>
          uncertain,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the VerticalDirection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VerticalDirection xsd enumeration.")]
        public enum VerticalDirection 
        {
        /// <summary>
        /// up property
        /// </summary>
          up,
        /// <summary>
        /// down property
        /// </summary>
          down
        }
        /// <summary>
        /// This class represents the AxisOrder2d xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AxisOrder2d xsd enumeration.")]
        public enum AxisOrder2d 
        {
        /// <summary>
        /// eastingnorthing property
        /// </summary>
          [XmlEnum("easting northing")]
          eastingnorthing,
        /// <summary>
        /// northingeasting property
        /// </summary>
          [XmlEnum("northing easting")]
          northingeasting,
        /// <summary>
        /// westingsouthing property
        /// </summary>
          [XmlEnum("westing southing")]
          westingsouthing,
        /// <summary>
        /// southingwesting property
        /// </summary>
          [XmlEnum("southing westing")]
          southingwesting,
        /// <summary>
        /// northingwesting property
        /// </summary>
          [XmlEnum("northing westing")]
          northingwesting,
        /// <summary>
        /// westingnorthing property
        /// </summary>
          [XmlEnum("westing northing")]
          westingnorthing
        }
        /// <summary>
        /// This class represents the QuantityClassKind xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the QuantityClassKind xsd enumeration.")]
        public enum QuantityClassKind 
        {
        /// <summary>
        /// AbsorbedDose property
        /// </summary>
          AbsorbedDose,
        /// <summary>
        /// ActivityOfRadioactivity property
        /// </summary>
          ActivityOfRadioactivity,
        /// <summary>
        /// AmountOfSubstance property
        /// </summary>
          AmountOfSubstance,
        /// <summary>
        /// AmountOfSubstancePerAmountOfSubstance property
        /// </summary>
          AmountOfSubstancePerAmountOfSubstance,
        /// <summary>
        /// AmountOfSubstancePerArea property
        /// </summary>
          AmountOfSubstancePerArea,
        /// <summary>
        /// AmountOfSubstancePerTime property
        /// </summary>
          AmountOfSubstancePerTime,
        /// <summary>
        /// AmountOfSubstancePerTimePerArea property
        /// </summary>
          AmountOfSubstancePerTimePerArea,
        /// <summary>
        /// AmountOfSubstancePerVolume property
        /// </summary>
          AmountOfSubstancePerVolume,
        /// <summary>
        /// AnglePerLength property
        /// </summary>
          AnglePerLength,
        /// <summary>
        /// AnglePerVolume property
        /// </summary>
          AnglePerVolume,
        /// <summary>
        /// AngularAcceleration property
        /// </summary>
          AngularAcceleration,
        /// <summary>
        /// AngularVelocity property
        /// </summary>
          AngularVelocity,
        /// <summary>
        /// APIGammaRay property
        /// </summary>
          APIGammaRay,
        /// <summary>
        /// APIGravity property
        /// </summary>
          APIGravity,
        /// <summary>
        /// APINeutron property
        /// </summary>
          APINeutron,
        /// <summary>
        /// Area property
        /// </summary>
          Area,
        /// <summary>
        /// AreaPerAmountOfSubstance property
        /// </summary>
          AreaPerAmountOfSubstance,
        /// <summary>
        /// AreaPerArea property
        /// </summary>
          AreaPerArea,
        /// <summary>
        /// AreaPerMass property
        /// </summary>
          AreaPerMass,
        /// <summary>
        /// AreaPerTime property
        /// </summary>
          AreaPerTime,
        /// <summary>
        /// AreaPerVolume property
        /// </summary>
          AreaPerVolume,
        /// <summary>
        /// AttenuationPerFrequencyInterval property
        /// </summary>
          AttenuationPerFrequencyInterval,
        /// <summary>
        /// Capacitance property
        /// </summary>
          Capacitance,
        /// <summary>
        /// DataTransferSpeed property
        /// </summary>
          DataTransferSpeed,
        /// <summary>
        /// DiffusionCoefficient property
        /// </summary>
          DiffusionCoefficient,
        /// <summary>
        /// DigitalStorage property
        /// </summary>
          DigitalStorage,
        /// <summary>
        /// Dimensionless property
        /// </summary>
          Dimensionless,
        /// <summary>
        /// DipoleMoment property
        /// </summary>
          DipoleMoment,
        /// <summary>
        /// DoseEquivalent property
        /// </summary>
          DoseEquivalent,
        /// <summary>
        /// DynamicViscosity property
        /// </summary>
          DynamicViscosity,
        /// <summary>
        /// ElectricalResistivity property
        /// </summary>
          ElectricalResistivity,
        /// <summary>
        /// ElectricCharge property
        /// </summary>
          ElectricCharge,
        /// <summary>
        /// ElectricChargePerArea property
        /// </summary>
          ElectricChargePerArea,
        /// <summary>
        /// ElectricChargePerMass property
        /// </summary>
          ElectricChargePerMass,
        /// <summary>
        /// ElectricChargePerVolume property
        /// </summary>
          ElectricChargePerVolume,
        /// <summary>
        /// ElectricConductance property
        /// </summary>
          ElectricConductance,
        /// <summary>
        /// ElectricConductivity property
        /// </summary>
          ElectricConductivity,
        /// <summary>
        /// ElectricCurrent property
        /// </summary>
          ElectricCurrent,
        /// <summary>
        /// ElectricCurrentDensity property
        /// </summary>
          ElectricCurrentDensity,
        /// <summary>
        /// ElectricFieldStrength property
        /// </summary>
          ElectricFieldStrength,
        /// <summary>
        /// ElectricPotentialDifference property
        /// </summary>
          ElectricPotentialDifference,
        /// <summary>
        /// ElectricResistance property
        /// </summary>
          ElectricResistance,
        /// <summary>
        /// ElectricResistancePerLength property
        /// </summary>
          ElectricResistancePerLength,
        /// <summary>
        /// ElectromagneticMoment property
        /// </summary>
          ElectromagneticMoment,
        /// <summary>
        /// Energy property
        /// </summary>
          Energy,
        /// <summary>
        /// EnergyLengthPerArea property
        /// </summary>
          EnergyLengthPerArea,
        /// <summary>
        /// EnergyLengthPerTimeAreaTemperature property
        /// </summary>
          EnergyLengthPerTimeAreaTemperature,
        /// <summary>
        /// EnergyPerArea property
        /// </summary>
          EnergyPerArea,
        /// <summary>
        /// EnergyPerLength property
        /// </summary>
          EnergyPerLength,
        /// <summary>
        /// EnergyPerMass property
        /// </summary>
          EnergyPerMass,
        /// <summary>
        /// EnergyPerMassPerTime property
        /// </summary>
          EnergyPerMassPerTime,
        /// <summary>
        /// EnergyPerVolume property
        /// </summary>
          EnergyPerVolume,
        /// <summary>
        /// Force property
        /// </summary>
          Force,
        /// <summary>
        /// ForceArea property
        /// </summary>
          ForceArea,
        /// <summary>
        /// ForceLengthPerLength property
        /// </summary>
          ForceLengthPerLength,
        /// <summary>
        /// ForcePerForce property
        /// </summary>
          ForcePerForce,
        /// <summary>
        /// ForcePerLength property
        /// </summary>
          ForcePerLength,
        /// <summary>
        /// ForcePerVolume property
        /// </summary>
          ForcePerVolume,
        /// <summary>
        /// Frequency property
        /// </summary>
          Frequency,
        /// <summary>
        /// FrequencyInterval property
        /// </summary>
          FrequencyInterval,
        /// <summary>
        /// HeatCapacity property
        /// </summary>
          HeatCapacity,
        /// <summary>
        /// HeatFlowRate property
        /// </summary>
          HeatFlowRate,
        /// <summary>
        /// HeatTransferCoefficient property
        /// </summary>
          HeatTransferCoefficient,
        /// <summary>
        /// Illuminance property
        /// </summary>
          Illuminance,
        /// <summary>
        /// Inductance property
        /// </summary>
          Inductance,
        /// <summary>
        /// IsothermalCompressibility property
        /// </summary>
          IsothermalCompressibility,
        /// <summary>
        /// KinematicViscosity property
        /// </summary>
          KinematicViscosity,
        /// <summary>
        /// Length property
        /// </summary>
          Length,
        /// <summary>
        /// LengthPerLength property
        /// </summary>
          LengthPerLength,
        /// <summary>
        /// LengthPerMass property
        /// </summary>
          LengthPerMass,
        /// <summary>
        /// LengthPerPressure property
        /// </summary>
          LengthPerPressure,
        /// <summary>
        /// LengthPerTemperature property
        /// </summary>
          LengthPerTemperature,
        /// <summary>
        /// LengthPerTime property
        /// </summary>
          LengthPerTime,
        /// <summary>
        /// LengthPerVolume property
        /// </summary>
          LengthPerVolume,
        /// <summary>
        /// LightExposure property
        /// </summary>
          LightExposure,
        /// <summary>
        /// LinearAcceleration property
        /// </summary>
          LinearAcceleration,
        /// <summary>
        /// LinearThermalExpansion property
        /// </summary>
          LinearThermalExpansion,
        /// <summary>
        /// LogarithmicPowerRatio property
        /// </summary>
          LogarithmicPowerRatio,
        /// <summary>
        /// LogarithmicPowerRatioPerLength property
        /// </summary>
          LogarithmicPowerRatioPerLength,
        /// <summary>
        /// Luminance property
        /// </summary>
          Luminance,
        /// <summary>
        /// LuminousEfficacy property
        /// </summary>
          LuminousEfficacy,
        /// <summary>
        /// LuminousFlux property
        /// </summary>
          LuminousFlux,
        /// <summary>
        /// LuminousIntensity property
        /// </summary>
          LuminousIntensity,
        /// <summary>
        /// MagneticDipoleMoment property
        /// </summary>
          MagneticDipoleMoment,
        /// <summary>
        /// MagneticFieldStrength property
        /// </summary>
          MagneticFieldStrength,
        /// <summary>
        /// MagneticFlux property
        /// </summary>
          MagneticFlux,
        /// <summary>
        /// MagneticFluxDensity property
        /// </summary>
          MagneticFluxDensity,
        /// <summary>
        /// MagneticFluxDensityPerLength property
        /// </summary>
          MagneticFluxDensityPerLength,
        /// <summary>
        /// MagneticPermeability property
        /// </summary>
          MagneticPermeability,
        /// <summary>
        /// MagneticVectorPotential property
        /// </summary>
          MagneticVectorPotential,
        /// <summary>
        /// Mass property
        /// </summary>
          Mass,
        /// <summary>
        /// MassLength property
        /// </summary>
          MassLength,
        /// <summary>
        /// MassPerArea property
        /// </summary>
          MassPerArea,
        /// <summary>
        /// MassPerEnergy property
        /// </summary>
          MassPerEnergy,
        /// <summary>
        /// MassPerLength property
        /// </summary>
          MassPerLength,
        /// <summary>
        /// MassPerMass property
        /// </summary>
          MassPerMass,
        /// <summary>
        /// MassPerTime property
        /// </summary>
          MassPerTime,
        /// <summary>
        /// MassPerTimePerArea property
        /// </summary>
          MassPerTimePerArea,
        /// <summary>
        /// MassPerTimePerLength property
        /// </summary>
          MassPerTimePerLength,
        /// <summary>
        /// MassPerVolume property
        /// </summary>
          MassPerVolume,
        /// <summary>
        /// MassPerVolumePerLength property
        /// </summary>
          MassPerVolumePerLength,
        /// <summary>
        /// Mobility property
        /// </summary>
          Mobility,
        /// <summary>
        /// MolarEnergy property
        /// </summary>
          MolarEnergy,
        /// <summary>
        /// MolarHeatCapacity property
        /// </summary>
          MolarHeatCapacity,
        /// <summary>
        /// MolarVolume property
        /// </summary>
          MolarVolume,
        /// <summary>
        /// MolecularWeight property
        /// </summary>
          MolecularWeight,
        /// <summary>
        /// MomentOfForce property
        /// </summary>
          MomentOfForce,
        /// <summary>
        /// MomentOfInertia property
        /// </summary>
          MomentOfInertia,
        /// <summary>
        /// Momentum property
        /// </summary>
          Momentum,
        /// <summary>
        /// NormalizedPower property
        /// </summary>
          NormalizedPower,
        /// <summary>
        /// PermeabilityLength property
        /// </summary>
          PermeabilityLength,
        /// <summary>
        /// PermeabilityRock property
        /// </summary>
          PermeabilityRock,
        /// <summary>
        /// Permittivity property
        /// </summary>
          Permittivity,
        /// <summary>
        /// PlaneAngle property
        /// </summary>
          PlaneAngle,
        /// <summary>
        /// PotentialDifferencePerPowerDrop property
        /// </summary>
          PotentialDifferencePerPowerDrop,
        /// <summary>
        /// Power property
        /// </summary>
          Power,
        /// <summary>
        /// PowerPerArea property
        /// </summary>
          PowerPerArea,
        /// <summary>
        /// PowerPerPower property
        /// </summary>
          PowerPerPower,
        /// <summary>
        /// PowerPerVolume property
        /// </summary>
          PowerPerVolume,
        /// <summary>
        /// Pressure property
        /// </summary>
          Pressure,
        /// <summary>
        /// PressurePerTime property
        /// </summary>
          PressurePerTime,
        /// <summary>
        /// PressurePerVolume property
        /// </summary>
          PressurePerVolume,
        /// <summary>
        /// PressureSquared property
        /// </summary>
          PressureSquared,
        /// <summary>
        /// PressureSquaredPerForceTimePerArea property
        /// </summary>
          PressureSquaredPerForceTimePerArea,
        /// <summary>
        /// PressureTimePerVolume property
        /// </summary>
          PressureTimePerVolume,
        /// <summary>
        /// QuantityOfLight property
        /// </summary>
          QuantityOfLight,
        /// <summary>
        /// Radiance property
        /// </summary>
          Radiance,
        /// <summary>
        /// RadiantIntensity property
        /// </summary>
          RadiantIntensity,
        /// <summary>
        /// ReciprocalArea property
        /// </summary>
          ReciprocalArea,
        /// <summary>
        /// ReciprocalElectricPotentialDifference property
        /// </summary>
          ReciprocalElectricPotentialDifference,
        /// <summary>
        /// ReciprocalForce property
        /// </summary>
          ReciprocalForce,
        /// <summary>
        /// ReciprocalLength property
        /// </summary>
          ReciprocalLength,
        /// <summary>
        /// ReciprocalMass property
        /// </summary>
          ReciprocalMass,
        /// <summary>
        /// ReciprocalMassTime property
        /// </summary>
          ReciprocalMassTime,
        /// <summary>
        /// ReciprocalPressure property
        /// </summary>
          ReciprocalPressure,
        /// <summary>
        /// ReciprocalTime property
        /// </summary>
          ReciprocalTime,
        /// <summary>
        /// ReciprocalVolume property
        /// </summary>
          ReciprocalVolume,
        /// <summary>
        /// Reluctance property
        /// </summary>
          Reluctance,
        /// <summary>
        /// SecondMomentOfArea property
        /// </summary>
          SecondMomentOfArea,
        /// <summary>
        /// SignalingEventPerTime property
        /// </summary>
          SignalingEventPerTime,
        /// <summary>
        /// SolidAngle property
        /// </summary>
          SolidAngle,
        /// <summary>
        /// SpecificHeatCapacity property
        /// </summary>
          SpecificHeatCapacity,
        /// <summary>
        /// TemperatureInterval property
        /// </summary>
          TemperatureInterval,
        /// <summary>
        /// TemperatureIntervalPerLength property
        /// </summary>
          TemperatureIntervalPerLength,
        /// <summary>
        /// TemperatureIntervalPerPressure property
        /// </summary>
          TemperatureIntervalPerPressure,
        /// <summary>
        /// TemperatureIntervalPerTime property
        /// </summary>
          TemperatureIntervalPerTime,
        /// <summary>
        /// ThermalConductance property
        /// </summary>
          ThermalConductance,
        /// <summary>
        /// ThermalConductivity property
        /// </summary>
          ThermalConductivity,
        /// <summary>
        /// ThermalDiffusivity property
        /// </summary>
          ThermalDiffusivity,
        /// <summary>
        /// ThermalInsulance property
        /// </summary>
          ThermalInsulance,
        /// <summary>
        /// ThermalResistance property
        /// </summary>
          ThermalResistance,
        /// <summary>
        /// ThermodynamicTemperature property
        /// </summary>
          ThermodynamicTemperature,
        /// <summary>
        /// Time property
        /// </summary>
          Time,
        /// <summary>
        /// TimePerLength property
        /// </summary>
          TimePerLength,
        /// <summary>
        /// TimePerMass property
        /// </summary>
          TimePerMass,
        /// <summary>
        /// TimePerTime property
        /// </summary>
          TimePerTime,
        /// <summary>
        /// TimePerVolume property
        /// </summary>
          TimePerVolume,
        /// <summary>
        /// VerticalCoordinate property
        /// </summary>
          VerticalCoordinate,
        /// <summary>
        /// Volume property
        /// </summary>
          Volume,
        /// <summary>
        /// VolumeFlowRatePerVolumeFlowRate property
        /// </summary>
          VolumeFlowRatePerVolumeFlowRate,
        /// <summary>
        /// VolumePerArea property
        /// </summary>
          VolumePerArea,
        /// <summary>
        /// VolumePerLength property
        /// </summary>
          VolumePerLength,
        /// <summary>
        /// VolumePerMass property
        /// </summary>
          VolumePerMass,
        /// <summary>
        /// VolumePerPressure property
        /// </summary>
          VolumePerPressure,
        /// <summary>
        /// VolumePerRotation property
        /// </summary>
          VolumePerRotation,
        /// <summary>
        /// VolumePerTime property
        /// </summary>
          VolumePerTime,
        /// <summary>
        /// VolumePerTimeLength property
        /// </summary>
          VolumePerTimeLength,
        /// <summary>
        /// VolumePerTimePerArea property
        /// </summary>
          VolumePerTimePerArea,
        /// <summary>
        /// VolumePerTimePerLength property
        /// </summary>
          VolumePerTimePerLength,
        /// <summary>
        /// VolumePerTimePerPressure property
        /// </summary>
          VolumePerTimePerPressure,
        /// <summary>
        /// VolumePerTimePerPressureLength property
        /// </summary>
          VolumePerTimePerPressureLength,
        /// <summary>
        /// VolumePerTimePerTime property
        /// </summary>
          VolumePerTimePerTime,
        /// <summary>
        /// VolumePerTimePerVolume property
        /// </summary>
          VolumePerTimePerVolume,
        /// <summary>
        /// VolumePerVolume property
        /// </summary>
          VolumePerVolume,
        /// <summary>
        /// VolumetricHeatTransferCoefficient property
        /// </summary>
          VolumetricHeatTransferCoefficient,
        /// <summary>
        /// VolumetricThermalExpansion property
        /// </summary>
          VolumetricThermalExpansion
        }
    }
    #endregion
}