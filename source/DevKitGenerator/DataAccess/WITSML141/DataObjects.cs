// 
// License notice 
// Standards DevKit, version 1.0 
// Copyright 2011 ExxonMobil Upstream Research Company
//  
// The following Energistics (c) products were used in the creation of this work: 
// 
// •	WITSML Data Schema Specifications, Version 1.4.1 
// •	WITSML API Specifications, version 1.4.1 
// •	WITSML Data Schema Specifications, Version 1.3.1.1 
// •	WITSML API Specifications, version 1.3.1 
// •	PRODML Data Schema Specifications, Version 1.2 
// •	PRODML Web Service Specifications, Version 2.0
// 
// All rights in the WITSML™ Standard and the PRODML™ Standard, or any portion thereof, which remain in the 
// Standards DevKitshall remain with Energistics or its suppliers and shall remain subject to the terms of 
// the Product License Agreement available at http://www.energistics.org/product-license-agreement. 
// 
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
// compliance with the License. 
// 
// You may obtain a copy of the License at 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software distributed under the License is 
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
// 
// See the License for the specific language governing permissions and limitations under the License. 
// 

//This code was generated using the Energistics Generator tool.  Direct changes to this code will be lost
//during regeneration.

using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

using Energistics.DataAccess.WITSML141.ComponentSchemas;
using Energistics.DataAccess.WITSML141.ReferenceData;

namespace Energistics.DataAccess.WITSML141
{
    #region Classes
    /// <summary>
    /// This class represents the abstractObject xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConvCoreList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DrillReportList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChangeLogList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RigList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreGeometryList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TubularList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TrajectoryList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToolErrorTermSetList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToolErrorModelList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TargetList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SurveyProgramList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimJobList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SidewallCoreList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RiskList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OpsReportList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ObjectGroupList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MessageList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LogList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FormationMarkerList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidsReportList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJobList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BhaRunList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AttachmentList))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="abstractObject", Namespace="http://www.energistics.org/schemas/abstract")]
    [Description("This class represents the abstractObject xsd type.")]
    public abstract partial class AbstractObject : Object 
    {

    }

    /// <summary>
    /// This class represents the obj_attachments xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("attachments", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_attachments xsd type.")]
    public partial class AttachmentList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single attachment Object
        /// </summary>
        [XmlElement("attachment")]
        public List<Attachment> Attachment { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Attachment;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.")]
    public partial class DocumentInfo : Object 
    {

        /// <summary>
        /// An identifier for the document. This is intended to be unique within the context of the NamingSystem.
        /// </summary>
        [XmlElement("documentName")]
        public NameStruct DocumentName { get; set; }
		/// <summary>
        /// Zero or more alternate names for the document. These names do not need to be unique within the naming system.
        /// </summary>
        [XmlElement("documentAlias")]
        public List<NameStruct> DocumentAlias { get; set; }
        /// <summary>
        /// The date of the creation of the document. This is not the same as the date that the file was created. For this date, the document is considered to be the set of information associated with this document information. For example, the document may be a seismic binset. This represents the date that the binset was created. The FileCreation information would capture the date that the XML file was created to send or exchange the binset.
        /// </summary>
        [XmlElement("documentDate")]
        public DateTime? DocumentDate {
            get {
                return documentDateField;
            } 
            set { 
                documentDateField = value;
                this.DocumentDateSpecified = true;
            }
        }

        private DateTime? documentDateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DocumentDateSpecified { get; set; }
		/// <summary>
        /// A document class. Examples of classes would be a metadata classification or a set of keywords. 
        /// </summary>
        [XmlElement("documentClass")]
        public List<NameStruct> DocumentClass { get; set; }
        /// <summary>
        /// The information about the creation of the exchange file. This is not about the creation of the data within the file, but the creation of the file itself.
        /// </summary>
        [XmlElement("fileCreationInformation")]
        public DocumentFileCreation FileCreationInformation { get; set; }
		/// <summary>
        /// Information about the security to be applied to this file. More than one classification can be given.
        /// </summary>
        [XmlElement("securityInformation")]
        public List<DocumentSecurityInfo> SecurityInformation { get; set; }
        /// <summary>
        /// A free-form string that allows a disclaimer to accompany the information.
        /// </summary>
        [XmlElement("disclaimer")]
        public String Disclaimer { get; set; }
        /// <summary>
        /// A collection of events that can document the history of the data.
        /// </summary>
        [XmlElement("auditTrail")]
        public List<DocumentEvent> AuditTrail { get; set; }
        /// <summary>
        /// The owner of the data.
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
        /// <summary>
        /// An optional comment about the document.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the nameStruct xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="nameStruct", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the nameStruct xsd type.")]
    public partial class NameStruct : Object 
    {
        public NameStruct() {}
        public NameStruct(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The naming system within the name is (hopefully) unique.
        /// </summary>
        [XmlAttribute("namingSystem")]
        public String NamingSystem { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Wellbore object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellbore", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Wellbore object.")]
    public partial class Wellbore : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// This is a pointer to the parent wellbore. No parent = starts from top. 
        /// </summary>
        [XmlElement("parentWellbore")]
        public RefNameString PluggedAndAbandonedrentWellbore { get; set; }
        /// <summary>
        /// Operator borehole number. 
        /// </summary>
        [XmlElement("number")]
        public String Number { get; set; }
        /// <summary>
        /// API suffix. 
        /// </summary>
        [XmlElement("suffixAPI")]
        public String SuffixAPI { get; set; }
        /// <summary>
        /// Government assigned number. 
        /// </summary>
        [XmlElement("numGovt")]
        public String NumGovt { get; set; }
        /// <summary>
        /// POSC wellbore status. 
        /// </summary>
        [XmlElement("statusWellbore")]
        public WellStatus? StatusWellbore {
            get {
                return statusWellboreField;
            } 
            set { 
                statusWellboreField = value;
                this.StatusWellboreSpecified = true;
            }
        }

        private WellStatus? statusWellboreField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StatusWellboreSpecified { get; set; }
        /// <summary>
        /// True (="1" or "true") indicates that the wellbore is active. False (="0" or "false") indicates otherwise. It is the servers responsibility to set this value based on its available internal data (e.g., what objects are changing).
        /// </summary>
        [XmlElement("isActive")]
        public Boolean? IsActive {
            get {
                return isActiveField;
            } 
            set { 
                isActiveField = value;
                this.IsActiveSpecified = true;
            }
        }

        private Boolean? isActiveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsActiveSpecified { get; set; }
        /// <summary>
        /// POSC wellbore purpose. 
        /// </summary>
        [XmlElement("purposeWellbore")]
        public WellPurpose? PurposeWellbore {
            get {
                return purposeWellboreField;
            } 
            set { 
                purposeWellboreField = value;
                this.PurposeWellboreSpecified = true;
            }
        }

        private WellPurpose? purposeWellboreField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PurposeWellboreSpecified { get; set; }
        /// <summary>
        /// Type of wellbore. 
        /// </summary>
        [XmlElement("typeWellbore")]
        public WellboreType? TypeWellbore {
            get {
                return typeWellboreField;
            } 
            set { 
                typeWellboreField = value;
                this.TypeWellboreSpecified = true;
            }
        }

        private WellboreType? typeWellboreField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeWellboreSpecified { get; set; }
        /// <summary>
        /// POSC wellbore trajectory shape. 
        /// </summary>
        [XmlElement("shape")]
        public WellboreShape? Shape {
            get {
                return shapeField;
            } 
            set { 
                shapeField = value;
                this.ShapeSpecified = true;
            }
        }

        private WellboreShape? shapeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ShapeSpecified { get; set; }
        /// <summary>
        /// Date and time of wellbore kickoff. 
        /// </summary>
        [XmlElement("dTimKickoff")]
        public DateTime? DateTimeKickoff {
            get {
                return dTimKickoffField;
            } 
            set { 
                dTimKickoffField = value;
                this.DateTimeKickoffSpecified = true;
            }
        }

        private DateTime? dTimKickoffField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeKickoffSpecified { get; set; }
        /// <summary>
        /// True ("true" of "1") indicates that the wellbore has acheieved total depth. That is, drilling has completed. False ("false" or "0") indicates otherwise. Not given indicates that it is not known whether total depth has been reached.
        /// </summary>
        [XmlElement("achievedTD")]
        public Boolean? AchievedTD {
            get {
                return achievedTDField;
            } 
            set { 
                achievedTDField = value;
                this.AchievedTDSpecified = true;
            }
        }

        private Boolean? achievedTDField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AchievedTDSpecified { get; set; }
        /// <summary>
        /// The measured depth of the borehole. If status is plugged, indicates the maximum depth reached before plugging. It is recommended that this value be updated about every 10 minutes by an assigned raw data provider at a site.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// The true vertical depth of the borehole. If status is plugged, indicates the maximum depth reached before plugging. It is recommended that this value be updated about every 10 minutes by an assigned raw data provider at a site.
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// The measured depth of the bit. If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned raw data provider at a site.
        /// </summary>
        [XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit { get; set; }
        /// <summary>
        /// The true vertical depth of the bit. If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned raw data provider at a site.
        /// </summary>
        [XmlElement("tvdBit")]
        public WellVerticalDepthCoord TvdBit { get; set; }
        /// <summary>
        /// Kickoff measured depth of the wellbore. 
        /// </summary>
        [XmlElement("mdKickoff")]
        public MeasuredDepthCoord MDKickoff { get; set; }
        /// <summary>
        /// Kickoff true vertical depth of the wellbore. 
        /// </summary>
        [XmlElement("tvdKickoff")]
        public WellVerticalDepthCoord TvdKickoff { get; set; }
        /// <summary>
        /// Planned measured depth for the wellbore total depth. 
        /// </summary>
        [XmlElement("mdPlanned")]
        public MeasuredDepthCoord MDPlanned { get; set; }
        /// <summary>
        /// Planned true vertical depth for the wellbore total depth. 
        /// </summary>
        [XmlElement("tvdPlanned")]
        public WellVerticalDepthCoord TvdPlanned { get; set; }
        /// <summary>
        /// Planned measured for the wellbore total depth - with respect to seabed. 
        /// </summary>
        [XmlElement("mdSubSeaPlanned")]
        public MeasuredDepthCoord MDSubSeaPlanned { get; set; }
        /// <summary>
        /// Planned true vertical depth for the wellbore total depth - with respect to seabed. 
        /// </summary>
        [XmlElement("tvdSubSeaPlanned")]
        public WellVerticalDepthCoord TvdSubSeaPlanned { get; set; }
        /// <summary>
        /// Target days for drilling wellbore. 
        /// </summary>
        [XmlElement("dayTarget")]
        public TimeMeasure DayTarget { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refNameString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refNameString", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the refNameString xsd type.")]
    public partial class RefNameString : Object 
    {
        public RefNameString() {}
        public RefNameString(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the node referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
        [XmlAttribute("uidRef")]
        public String UidRef { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the abstractMeasure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthPerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PermeabilityRockMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FootageEastWest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FootageNorthSouth))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellElevationCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellVerticalDepthCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasuredDepthCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RatioGenericMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GenericMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasureOrQuantity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasurePercent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(YAxisAzimuth))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeFlowRateMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VelocityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermodynamicTemperatureMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermalVolumetricExpansionMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermalConductivityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandardVolumePerTimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandardVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecificVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecificHeatCapacityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelativePowerMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PressureMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PowerMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaneAngleMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MomentOfForceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassPerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassConcentrationMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MagneticInductionMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IlluminanceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForcePerVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForcePerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentPerMassMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectricPotentialMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectricCurrentMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DynamicViscosityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DimensionlessMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DensityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompressibilityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaPerAreaMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnglePerTimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnglePerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AccelerationLinearMeasure))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="abstractMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the abstractMeasure xsd type.")]
    public abstract partial class AbstractMeasure : Object 
    {

		
        [XmlText]
        public Double Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the measuredDepthCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="measuredDepthCoord", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the measuredDepthCoord xsd type.")]
    public partial class MeasuredDepthCoord : AbstractMeasure 
    {
        public MeasuredDepthCoord() {}
        public MeasuredDepthCoord(Double value, MeasuredDepthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value.
        /// </summary>
        [XmlAttribute("uom")]
        public MeasuredDepthUom Uom { get; set; }
		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. This value is assumed to match the uid value in a WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
        [XmlAttribute("datum")]
        public String Datum { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the footageEastWest xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="footageEastWest", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the footageEastWest xsd type.")]
    public partial class FootageEastWest : AbstractMeasure 
    {
        public FootageEastWest() {}
        public FootageEastWest(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the distance value.
        /// </summary>
        [XmlAttribute("uom")]
        public LengthUom Uom { get; set; }
		/// <summary>
        /// Specifies the reference line that is the origin of the distance.
        /// </summary>
        [XmlAttribute("ref")]
        public EastOrWest Ref { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the footageNorthSouth xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="footageNorthSouth", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the footageNorthSouth xsd type.")]
    public partial class FootageNorthSouth : AbstractMeasure 
    {
        public FootageNorthSouth() {}
        public FootageNorthSouth(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the distance value.
        /// </summary>
        [XmlAttribute("uom")]
        public LengthUom Uom { get; set; }
		/// <summary>
        /// Specifies the reference line that is the origin of the distance.
        /// </summary>
        [XmlAttribute("ref")]
        public NorthOrSouth Ref { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellElevationCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellElevationCoord", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the wellElevationCoord xsd type.")]
    public partial class WellElevationCoord : AbstractMeasure 
    {
        public WellElevationCoord() {}
        public WellElevationCoord(Double value, WellVerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value. If not given then the default unit of measure of the explicitly or implicitly given datum must be assumed.
        /// </summary>
        [XmlAttribute("uom")]
        public WellVerticalCoordinateUom Uom { get; set; }
		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
        [XmlAttribute("datum")]
        public String Datum { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellVerticalDepthCoord xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellVerticalDepthCoord", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the wellVerticalDepthCoord xsd type.")]
    public partial class WellVerticalDepthCoord : AbstractMeasure 
    {
        public WellVerticalDepthCoord() {}
        public WellVerticalDepthCoord(Double value, WellVerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value.
        /// </summary>
        [XmlAttribute("uom")]
        public WellVerticalCoordinateUom Uom { get; set; }
		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
        [XmlAttribute("datum")]
        public String Datum { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ratioGenericMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ratioGenericMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the ratioGenericMeasure xsd type.")]
    public partial class RatioGenericMeasure : AbstractMeasure 
    {
        public RatioGenericMeasure() {}
        public RatioGenericMeasure(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public String Uom { get; set; }
		
        [XmlAttribute("numerator")]
        public Double Numerator {
            get {
                return numeratorField;
            } 
            set { 
                numeratorField = value;
                this.NumeratorSpecified = true;
            }
        }

        private Double numeratorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumeratorSpecified { get; set; }
		
        [XmlAttribute("denominator")]
        public Double Denominator {
            get {
                return denominatorField;
            } 
            set { 
                denominatorField = value;
                this.DenominatorSpecified = true;
            }
        }

        private Double denominatorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DenominatorSpecified { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the genericMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="genericMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the genericMeasure xsd type.")]
    public partial class GenericMeasure : AbstractMeasure 
    {
        public GenericMeasure() {}
        public GenericMeasure(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the quantity.
        /// </summary>
        [XmlAttribute("uom")]
        public String Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the measureOrQuantity xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="measureOrQuantity", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the measureOrQuantity xsd type.")]
    public partial class MeasureOrQuantity : AbstractMeasure 
    {
        public MeasureOrQuantity() {}
        public MeasureOrQuantity(Double value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the quantity. This value must conform to the values allowed by a measure class. If the value is a measure then the uom must be specified.
        /// </summary>
        [XmlAttribute("uom")]
        public String Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerVolumeMeasurePercent xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasurePercent", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the volumePerVolumeMeasurePercent xsd type.")]
    public partial class VolumePerVolumeMeasurePercent : AbstractMeasure 
    {
        public VolumePerVolumeMeasurePercent() {}
        public VolumePerVolumeMeasurePercent(Double value, PercentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public PercentUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the yAxisAzimuth xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="yAxisAzimuth", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the yAxisAzimuth xsd type.")]
    public partial class YAxisAzimuth : AbstractMeasure 
    {
        public YAxisAzimuth() {}
        public YAxisAzimuth(Double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the azimuth value.
        /// </summary>
        [XmlAttribute("uom")]
        public PlaneAngleUom Uom { get; set; }
		/// <summary>
        /// Specifies the direction to be considered North for the y axis.
        /// </summary>
        [XmlAttribute("northDirection")]
        public AziRef NorthDirection {
            get {
                return northDirectionField;
            } 
            set { 
                northDirectionField = value;
                this.NorthDirectionSpecified = true;
            }
        }

        private AziRef northDirectionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NorthDirectionSpecified { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the volumePerVolumeMeasure xsd type.")]
    public partial class VolumePerVolumeMeasure : AbstractMeasure 
    {
        public VolumePerVolumeMeasure() {}
        public VolumePerVolumeMeasure(Double value, VolumePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public VolumePerVolumeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the volumePerLengthMeasure xsd type.")]
    public partial class VolumePerLengthMeasure : AbstractMeasure 
    {
        public VolumePerLengthMeasure() {}
        public VolumePerLengthMeasure(Double value, VolumePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public VolumePerLengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeFlowRateMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeFlowRateMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the volumeFlowRateMeasure xsd type.")]
    public partial class VolumeFlowRateMeasure : AbstractMeasure 
    {
        public VolumeFlowRateMeasure() {}
        public VolumeFlowRateMeasure(Double value, VolumeFlowRateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public VolumeFlowRateUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the volumeMeasure xsd type.")]
    public partial class VolumeMeasure : AbstractMeasure 
    {
        public VolumeMeasure() {}
        public VolumeMeasure(Double value, VolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public VolumeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the velocityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="velocityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the velocityMeasure xsd type.")]
    public partial class VelocityMeasure : AbstractMeasure 
    {
        public VelocityMeasure() {}
        public VelocityMeasure(Double value, VelocityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public VelocityUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the timeMeasure xsd type.")]
    public partial class TimeMeasure : AbstractMeasure 
    {
        public TimeMeasure() {}
        public TimeMeasure(Double value, TimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public TimeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermodynamicTemperatureMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermodynamicTemperatureMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the thermodynamicTemperatureMeasure xsd type.")]
    public partial class ThermodynamicTemperatureMeasure : AbstractMeasure 
    {
        public ThermodynamicTemperatureMeasure() {}
        public ThermodynamicTemperatureMeasure(Double value, ThermodynamicTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ThermodynamicTemperatureUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermalVolumetricExpansionMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermalVolumetricExpansionMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the thermalVolumetricExpansionMeasure xsd type.")]
    public partial class ThermalVolumetricExpansionMeasure : AbstractMeasure 
    {
        public ThermalVolumetricExpansionMeasure() {}
        public ThermalVolumetricExpansionMeasure(Double value, ThermalVolumetricExpansionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ThermalVolumetricExpansionUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermalConductivityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermalConductivityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the thermalConductivityMeasure xsd type.")]
    public partial class ThermalConductivityMeasure : AbstractMeasure 
    {
        public ThermalConductivityMeasure() {}
        public ThermalConductivityMeasure(Double value, ThermalConductivityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ThermalConductivityUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the standardVolumePerTimeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="standardVolumePerTimeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the standardVolumePerTimeMeasure xsd type.")]
    public partial class StandardVolumePerTimeMeasure : AbstractMeasure 
    {
        public StandardVolumePerTimeMeasure() {}
        public StandardVolumePerTimeMeasure(Double value, StandardVolumePerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public StandardVolumePerTimeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the standardVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="standardVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the standardVolumeMeasure xsd type.")]
    public partial class StandardVolumeMeasure : AbstractMeasure 
    {
        public StandardVolumeMeasure() {}
        public StandardVolumeMeasure(Double value, StandardVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public StandardVolumeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the specificVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="specificVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the specificVolumeMeasure xsd type.")]
    public partial class SpecificVolumeMeasure : AbstractMeasure 
    {
        public SpecificVolumeMeasure() {}
        public SpecificVolumeMeasure(Double value, SpecificVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public SpecificVolumeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the specificHeatCapacityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="specificHeatCapacityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the specificHeatCapacityMeasure xsd type.")]
    public partial class SpecificHeatCapacityMeasure : AbstractMeasure 
    {
        public SpecificHeatCapacityMeasure() {}
        public SpecificHeatCapacityMeasure(Double value, SpecificHeatCapacityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public SpecificHeatCapacityUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the relativePowerMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="relativePowerMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the relativePowerMeasure xsd type.")]
    public partial class RelativePowerMeasure : AbstractMeasure 
    {
        public RelativePowerMeasure() {}
        public RelativePowerMeasure(Double value, RelativePowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public RelativePowerUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the pressureMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="pressureMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the pressureMeasure xsd type.")]
    public partial class PressureMeasure : AbstractMeasure 
    {
        public PressureMeasure() {}
        public PressureMeasure(Double value, PressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public PressureUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the powerMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="powerMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the powerMeasure xsd type.")]
    public partial class PowerMeasure : AbstractMeasure 
    {
        public PowerMeasure() {}
        public PowerMeasure(Double value, PowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public PowerUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the planeAngleMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="planeAngleMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the planeAngleMeasure xsd type.")]
    public partial class PlaneAngleMeasure : AbstractMeasure 
    {
        public PlaneAngleMeasure() {}
        public PlaneAngleMeasure(Double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public PlaneAngleUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the permeabilityRockMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="permeabilityRockMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the permeabilityRockMeasure xsd type.")]
    public partial class PermeabilityRockMeasure : AbstractMeasure 
    {
        public PermeabilityRockMeasure() {}
        public PermeabilityRockMeasure(Double value, PermeabilityRockUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public PermeabilityRockUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the perLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="perLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the perLengthMeasure xsd type.")]
    public partial class PerLengthMeasure : AbstractMeasure 
    {
        public PerLengthMeasure() {}
        public PerLengthMeasure(Double value, PerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public PerLengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the momentOfForceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="momentOfForceMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the momentOfForceMeasure xsd type.")]
    public partial class MomentOfForceMeasure : AbstractMeasure 
    {
        public MomentOfForceMeasure() {}
        public MomentOfForceMeasure(Double value, MomentOfForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public MomentOfForceUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massPerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massPerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the massPerLengthMeasure xsd type.")]
    public partial class MassPerLengthMeasure : AbstractMeasure 
    {
        public MassPerLengthMeasure() {}
        public MassPerLengthMeasure(Double value, MassPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public MassPerLengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the massMeasure xsd type.")]
    public partial class MassMeasure : AbstractMeasure 
    {
        public MassMeasure() {}
        public MassMeasure(Double value, MassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public MassUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massConcentrationMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massConcentrationMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the massConcentrationMeasure xsd type.")]
    public partial class MassConcentrationMeasure : AbstractMeasure 
    {
        public MassConcentrationMeasure() {}
        public MassConcentrationMeasure(Double value, MassConcentrationUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public MassConcentrationUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the magneticInductionMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="magneticInductionMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the magneticInductionMeasure xsd type.")]
    public partial class MagneticInductionMeasure : AbstractMeasure 
    {
        public MagneticInductionMeasure() {}
        public MagneticInductionMeasure(Double value, MagneticInductionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public MagneticInductionUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lengthPerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthPerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the lengthPerLengthMeasure xsd type.")]
    public partial class LengthPerLengthMeasure : AbstractMeasure 
    {
        public LengthPerLengthMeasure() {}
        public LengthPerLengthMeasure(Double value, LengthPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public LengthPerLengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the lengthMeasure xsd type.")]
    public partial class LengthMeasure : AbstractMeasure 
    {
        public LengthMeasure() {}
        public LengthMeasure(Double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public LengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the illuminanceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="illuminanceMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the illuminanceMeasure xsd type.")]
    public partial class IlluminanceMeasure : AbstractMeasure 
    {
        public IlluminanceMeasure() {}
        public IlluminanceMeasure(Double value, IlluminanceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public IlluminanceUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forcePerVolumeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forcePerVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the forcePerVolumeMeasure xsd type.")]
    public partial class ForcePerVolumeMeasure : AbstractMeasure 
    {
        public ForcePerVolumeMeasure() {}
        public ForcePerVolumeMeasure(Double value, ForcePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ForcePerVolumeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forcePerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forcePerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the forcePerLengthMeasure xsd type.")]
    public partial class ForcePerLengthMeasure : AbstractMeasure 
    {
        public ForcePerLengthMeasure() {}
        public ForcePerLengthMeasure(Double value, ForcePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ForcePerLengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forceMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forceMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the forceMeasure xsd type.")]
    public partial class ForceMeasure : AbstractMeasure 
    {
        public ForceMeasure() {}
        public ForceMeasure(Double value, ForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ForceUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the equivalentPerMassMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="equivalentPerMassMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the equivalentPerMassMeasure xsd type.")]
    public partial class EquivalentPerMassMeasure : AbstractMeasure 
    {
        public EquivalentPerMassMeasure() {}
        public EquivalentPerMassMeasure(Double value, EquivalentPerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public EquivalentPerMassUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the electricPotentialMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="electricPotentialMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the electricPotentialMeasure xsd type.")]
    public partial class ElectricPotentialMeasure : AbstractMeasure 
    {
        public ElectricPotentialMeasure() {}
        public ElectricPotentialMeasure(Double value, ElectricPotentialUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ElectricPotentialUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the electricCurrentMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="electricCurrentMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the electricCurrentMeasure xsd type.")]
    public partial class ElectricCurrentMeasure : AbstractMeasure 
    {
        public ElectricCurrentMeasure() {}
        public ElectricCurrentMeasure(Double value, ElectricCurrentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public ElectricCurrentUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the dynamicViscosityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dynamicViscosityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the dynamicViscosityMeasure xsd type.")]
    public partial class DynamicViscosityMeasure : AbstractMeasure 
    {
        public DynamicViscosityMeasure() {}
        public DynamicViscosityMeasure(Double value, DynamicViscosityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public DynamicViscosityUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the dimensionlessMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dimensionlessMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the dimensionlessMeasure xsd type.")]
    public partial class DimensionlessMeasure : AbstractMeasure 
    {
        public DimensionlessMeasure() {}
        public DimensionlessMeasure(Double value, DimensionlessUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public DimensionlessUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the densityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="densityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the densityMeasure xsd type.")]
    public partial class DensityMeasure : AbstractMeasure 
    {
        public DensityMeasure() {}
        public DensityMeasure(Double value, DensityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public DensityUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the compressibilityMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="compressibilityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the compressibilityMeasure xsd type.")]
    public partial class CompressibilityMeasure : AbstractMeasure 
    {
        public CompressibilityMeasure() {}
        public CompressibilityMeasure(Double value, CompressibilityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public CompressibilityUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the areaPerAreaMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="areaPerAreaMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the areaPerAreaMeasure xsd type.")]
    public partial class AreaPerAreaMeasure : AbstractMeasure 
    {
        public AreaPerAreaMeasure() {}
        public AreaPerAreaMeasure(Double value, AreaPerAreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public AreaPerAreaUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the areaMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="areaMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the areaMeasure xsd type.")]
    public partial class AreaMeasure : AbstractMeasure 
    {
        public AreaMeasure() {}
        public AreaMeasure(Double value, AreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public AreaUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the anglePerTimeMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="anglePerTimeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the anglePerTimeMeasure xsd type.")]
    public partial class AnglePerTimeMeasure : AbstractMeasure 
    {
        public AnglePerTimeMeasure() {}
        public AnglePerTimeMeasure(Double value, AnglePerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public AnglePerTimeUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the anglePerLengthMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="anglePerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the anglePerLengthMeasure xsd type.")]
    public partial class AnglePerLengthMeasure : AbstractMeasure 
    {
        public AnglePerLengthMeasure() {}
        public AnglePerLengthMeasure(Double value, AnglePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public AnglePerLengthUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the accelerationLinearMeasure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="accelerationLinearMeasure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the accelerationLinearMeasure xsd type.")]
    public partial class AccelerationLinearMeasure : AbstractMeasure 
    {
        public AccelerationLinearMeasure() {}
        public AccelerationLinearMeasure(Double value, AccelerationLinearUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("uom")]
        public AccelerationLinearUom Uom { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Common Data Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_commonData", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Common Data Component Schema ")]
    public partial class CommonData : Object 
    {

        /// <summary>
        /// An identifier to indicate the data originator. This identifies the server that originally created the object and thus most of the uids in the object (but not necessarily the uids of the parents). This is typically a url. 
        /// </summary>
        [XmlElement("sourceName")]
        public String SourceName { get; set; }
        /// <summary>
        /// When the data was created at the persistent data store. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
        [XmlElement("dTimCreation")]
        public DateTime? DateTimeCreation {
            get {
                return dTimCreationField;
            } 
            set { 
                dTimCreationField = value;
                this.DateTimeCreationSpecified = true;
            }
        }

        private DateTime? dTimCreationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCreationSpecified { get; set; }
        /// <summary>
        /// Last change of any element of the data at the persistent data store. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
        [XmlElement("dTimLastChange")]
        public DateTime? DateTimeLastChange {
            get {
                return dTimLastChangeField;
            } 
            set { 
                dTimLastChangeField = value;
                this.DateTimeLastChangeSpecified = true;
            }
        }

        private DateTime? dTimLastChangeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeLastChangeSpecified { get; set; }
        /// <summary>
        /// The item state for the data object. 
        /// </summary>
        [XmlElement("itemState")]
        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set { 
                itemStateField = value;
                this.ItemStateSpecified = true;
            }
        }

        private ItemState? itemStateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ItemStateSpecified { get; set; }
        /// <summary>
        /// The category of the service related to the creation of the object. For example, "mud log service", "cement service", "LWD service", "rig service", "drilling service". 
        /// </summary>
        [XmlElement("serviceCategory")]
        public String ServiceCategory { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		/// <summary>
        /// The local time zone of the original acquisition date-time values. It is the deviation in hours and minutes from UTC. The first occurrence should be the actual local time zone at the start of acquisition and may represent a seasonally adjusted value such as daylight savings. The dTim attribute must be populated in the second and subsequent occurrences if the local time zone changes during acquisition. This knowledge is required because the original time zone in a dateTime value may be lost when software converts to a different time zone.
        /// </summary>
        [XmlElement("acquisitionTimeZone")]
        public List<TimestampedTimeZone> AcquisitionTimeZone { get; set; }
        /// <summary>
        /// A pointer to the default wellDatum for measured depth coordinates, vertical depth coordinates and elevation coordinates in this object. Depth coordinates that do not specify a datum attribute shall be assumed to be measured relative to this default vertical datum. The referenced wellDatum must be defined within the well object associated with this object.
        /// </summary>
        [XmlElement("defaultDatum")]
        public RefNameString DefaultDatum { get; set; }
        /// <summary>
        /// This is an API query parameter. See the API specification for the behavior related to this element.
        /// </summary>
        [XmlElement("privateGroupOnly")]
        public Boolean? PrivateGroupOnly {
            get {
                return privateGroupOnlyField;
            } 
            set { 
                privateGroupOnlyField = value;
                this.PrivateGroupOnlySpecified = true;
            }
        }

        private Boolean? privateGroupOnlyField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PrivateGroupOnlySpecified { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timestampedTimeZone xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timestampedTimeZone", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the timestampedTimeZone xsd type.")]
    public partial class TimestampedTimeZone : Object 
    {
        public TimestampedTimeZone() {}
        public TimestampedTimeZone(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The date and time when this local time zone became active. This value must be defined on the second and subsequent occurrences.
        /// </summary>
        [XmlAttribute("dTim")]
        public DateTime DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Extension Schema. The intent is to allow standard WITSML schema extensions which will validate in older clients or servers. A client or server can ignore any schema that it does not recognize. New versions will modify specific elements to replace this type with a type that adds new elements, including another element with this type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_extensionAny", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Extension Schema. The intent is to allow standard WITSML schema extensions which will validate in older clients or servers. A client or server can ignore any schema that it does not recognize. New versions will modify specific elements to replace this type with a type that adds new elements, including another element with this type.")]
    public partial class ExtensionAny : Object 
    {

        
        [XmlElement("Any")]
        public List<XmlElement> Any { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Extension values Schema. The intent is to allow standard WITSML "named" extensions without having to modify the schema. A client or server can ignore any name that it does not recognize but certain meta data is required in order to allow generic clients or servers to process the value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_extensionNameValue", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Extension values Schema. The intent is to allow standard WITSML named extensions without having to modify the schema. A client or server can ignore any name that it does not recognize but certain meta data is required in order to allow generic clients or servers to process the value.")]
    public partial class ExtensionNameValue : Object 
    {

        /// <summary>
        /// The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size. For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the WITSML SIG Technical Team before use.
        /// </summary>
        [XmlElement("name")]
        public ExtensionName Name { get; set; }
        /// <summary>
        /// The value of the extension. This may also include a uom attribute. The content should conform to constraints defined by the data type.
        /// </summary>
        [XmlElement("value")]
        public Extensionvalue Value { get; set; }
        /// <summary>
        /// The underlying XML type of the value.
        /// </summary>
        [XmlElement("dataType")]
        public PrimitiveType? DataType { get; set; }
        /// <summary>
        /// The date-time associated with the value.
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// The measured depth associated with the value.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Indexes things with the same name. That is, 1 indicates the first one, 2 incidates the second one, etc.
        /// </summary>
        [XmlElement("index")]
        public Int16? Index {
            get {
                return indexField;
            } 
            set { 
                indexField = value;
                this.IndexSpecified = true;
            }
        }

        private Int16? indexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IndexSpecified { get; set; }
        /// <summary>
        /// The kind of the measure. For example, "length". This should be specified if the value requires a unit of measure.
        /// </summary>
        [XmlElement("measureClass")]
        public MeasureClass MeasureClass {
            get {
                return measureClassField;
            } 
            set { 
                measureClassField = value;
                this.MeasureClassSpecified = true;
            }
        }

        private MeasureClass measureClassField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MeasureClassSpecified { get; set; }
        /// <summary>
        /// A textual description of the extension.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the extensionvalue xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="extensionvalue", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the extensionvalue xsd type.")]
    public partial class Extensionvalue : Object 
    {
        public Extensionvalue() {}
        public Extensionvalue(String value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the value. This value must conform to the values allowed by a measure class.
        /// </summary>
        [XmlAttribute("uom")]
        public String Uom { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_customData xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_customData", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_customData xsd type.")]
    public partial class CustomData : Object 
    {

        
        [XmlElement("Any")]
        public List<XmlElement> Any { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Reference Point Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_referencePoint", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Reference Point Component Schema.")]
    public partial class ReferencePoint : Object 
    {

        /// <summary>
        /// Human recognizable context for the point. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The kind of point. For example, 'well reference point', 'platform reference point', 'sea surface', 'sea bottom'. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// The gravity based elevation coordinate of this point as measured from a datum. Positive moving upward from the elevation datum. 
        /// </summary>
        [XmlElement("elevation")]
        public WellElevationCoord Elevation { get; set; }
        /// <summary>
        /// The measured depth coordinate of this reference point. Positive moving toward the bottomhole from the measured depth datum. This should be given when the reference is "downhole", such as an ocean bottom template, or when the reference point is also used as a vertical well datum. The measured depth value can be used to determine if the reference point and a vertical well datum are at the same point.
        /// </summary>
        [XmlElement("measuredDepth")]
        public MeasuredDepthCoord MeasuredDepth { get; set; }
		/// <summary>
        /// Two dimensional coordinates that locate the point. 
        /// </summary>
        [XmlElement("location")]
        public List<Location> Location { get; set; }
        /// <summary>
        /// A textual description of the point. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Location Component Schema This is a location that is expressed in terms of 2D coordinates. In order that the location be understood, the coordinate reference system (CRS) must be known. The survey location is given by a pair of tagged values. The pairs may be: (1) latitude/longitude, (2) easting/northing, (3) westing/southing, (4) projectedX/projectedY, or (5) localX/localY. The appropriate pair must be chosen for the data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_location", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML Location Component Schema This is a location that is expressed in terms of 2D coordinates. In order that the location be understood, the coordinate reference system (CRS) must be known. The survey location is given by a pair of tagged values. The pairs may be: (1) latitude/longitude, (2) easting/northing, (3) westing/southing, (4) projectedX/projectedY, or (5) localX/localY. The appropriate pair must be chosen for the data.")]
    public partial class Location : Object 
    {

        /// <summary>
        /// A pointer to the wellCRS that defines the CRS for the coordinates. While optional, it is strongly recommended that this be specified.
        /// </summary>
        [XmlElement("wellCRS")]
        public RefNameString WellCRS { get; set; }
        /// <summary>
        /// The latitude with north being positive. If you set this property, you must also set Longitude.
        /// </summary>
        [XmlElement("latitude")]
        public PlaneAngleMeasure Latitude {
            get {
                return latitudeField;
            } 
            set { 
                if (westingFieldSpecified) throw new Exception("Cannot set property Latitude when property Westing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property Latitude when property Southing is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Latitude when property LocalX is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Latitude when property LocalY is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property Latitude when property Easting is already set");
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Latitude when property ProjectedX is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property Latitude when property Northing is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Latitude when property ProjectedY is already set");
                latitudeField = value;
                latitudeFieldSpecified = true;
            }
        }

        private PlaneAngleMeasure latitudeField; 
        private bool latitudeFieldSpecified = false; 

        /// <summary>
        /// The longitude with east being positive. If you set this property, you must also set Latitude.
        /// </summary>
        [XmlElement("longitude")]
        public PlaneAngleMeasure Longitude {
            get {
                return longitudeField;
            } 
            set { 
                if (westingFieldSpecified) throw new Exception("Cannot set property Longitude when property Westing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property Longitude when property Southing is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Longitude when property LocalX is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Longitude when property LocalY is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property Longitude when property Easting is already set");
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Longitude when property ProjectedX is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property Longitude when property Northing is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Longitude when property ProjectedY is already set");
                longitudeField = value;
                longitudeFieldSpecified = true;
            }
        }

        private PlaneAngleMeasure longitudeField; 
        private bool longitudeFieldSpecified = false; 

        /// <summary>
        /// The projected coordinate with east being positive. This is the most common type of projected coordinates. UTM coordinates are expressed in Easting and Northing. If you set this property, you must also set Northing.
        /// </summary>
        [XmlElement("easting")]
        public LengthMeasure Easting {
            get {
                return eastingField;
            } 
            set { 
                if (westingFieldSpecified) throw new Exception("Cannot set property Easting when property Westing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property Easting when property Southing is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property Easting when property Longitude is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property Easting when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Easting when property LocalX is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Easting when property LocalY is already set");
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Easting when property ProjectedX is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Easting when property ProjectedY is already set");
                eastingField = value;
                eastingFieldSpecified = true;
            }
        }

        private LengthMeasure eastingField; 
        private bool eastingFieldSpecified = false; 

        /// <summary>
        /// The projected coordinate with north being positive. This is the most common type of projected coordinates. UTM coordinates are expressed in Easting and Northing. If you set this property, you must also set Easting.
        /// </summary>
        [XmlElement("northing")]
        public LengthMeasure Northing {
            get {
                return northingField;
            } 
            set { 
                if (westingFieldSpecified) throw new Exception("Cannot set property Northing when property Westing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property Northing when property Southing is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property Northing when property Longitude is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property Northing when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Northing when property LocalX is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Northing when property LocalY is already set");
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Northing when property ProjectedX is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Northing when property ProjectedY is already set");
                northingField = value;
                northingFieldSpecified = true;
            }
        }

        private LengthMeasure northingField; 
        private bool northingFieldSpecified = false; 

        /// <summary>
        /// The projected coordinate with west being positive. The positive directions are reversed from the usual Easting and Northing values. These values are generally located in the southern hemisphere, most notably in South Africa and Australia. If you set this property, you must also set Southing.
        /// </summary>
        [XmlElement("westing")]
        public LengthMeasure Westing {
            get {
                return westingField;
            } 
            set { 
                if (longitudeFieldSpecified) throw new Exception("Cannot set property Westing when property Longitude is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property Westing when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Westing when property LocalX is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Westing when property LocalY is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property Westing when property Easting is already set");
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Westing when property ProjectedX is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property Westing when property Northing is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Westing when property ProjectedY is already set");
                westingField = value;
                westingFieldSpecified = true;
            }
        }

        private LengthMeasure westingField; 
        private bool westingFieldSpecified = false; 

        /// <summary>
        /// The projected coordinate with south being positive. The positive directions are reversed from the usual Easting and Northing values. These values are generally located in the southern hemisphere, most notably in South Africa and Australia. If you set this property, you must also set Westing.
        /// </summary>
        [XmlElement("southing")]
        public LengthMeasure Southing {
            get {
                return southingField;
            } 
            set { 
                if (longitudeFieldSpecified) throw new Exception("Cannot set property Southing when property Longitude is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property Southing when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property Southing when property LocalX is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property Southing when property LocalY is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property Southing when property Easting is already set");
                if (projectedXFieldSpecified) throw new Exception("Cannot set property Southing when property ProjectedX is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property Southing when property Northing is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property Southing when property ProjectedY is already set");
                southingField = value;
                southingFieldSpecified = true;
            }
        }

        private LengthMeasure southingField; 
        private bool southingFieldSpecified = false; 

        /// <summary>
        /// The projected X coordinate with the positive direction unknown. ProjectedX and ProjectedY are used when it is not known what the meaning of the coordinates is. If the meaning is known, the Easting/Northing or Westing/Southing should be used. Use of this pair implies a lack of knowledge on the part of the sender. If you set this property, you must also set ProjectedY.
        /// </summary>
        [XmlElement("projectedX")]
        public LengthMeasure ProjectedX {
            get {
                return projectedXField;
            } 
            set { 
                if (westingFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Westing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Southing is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Longitude is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property ProjectedX when property LocalX is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property ProjectedX when property LocalY is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Easting is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property ProjectedX when property Northing is already set");
                projectedXField = value;
                projectedXFieldSpecified = true;
            }
        }

        private LengthMeasure projectedXField; 
        private bool projectedXFieldSpecified = false; 

        /// <summary>
        /// The projected Y coordinate with the positive direction unknown. ProjectedX and ProjectedY are used when it is not known what the meaning of the coordinates is. If the meaning is known, the Easting/Northing or Westing/Southing should be used. Use of this pair implies a lack of knowledge on the part of the sender. If you set this property, you must also set ProjectedX.
        /// </summary>
        [XmlElement("projectedY")]
        public LengthMeasure ProjectedY {
            get {
                return projectedYField;
            } 
            set { 
                if (westingFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Westing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Southing is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Longitude is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Latitude is already set");
                if (localXFieldSpecified) throw new Exception("Cannot set property ProjectedY when property LocalX is already set");
                if (localYFieldSpecified) throw new Exception("Cannot set property ProjectedY when property LocalY is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Easting is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property ProjectedY when property Northing is already set");
                projectedYField = value;
                projectedYFieldSpecified = true;
            }
        }

        private LengthMeasure projectedYField; 
        private bool projectedYFieldSpecified = false; 

        /// <summary>
        /// The local (engineering) X coordinate. The CRS will define the orientation of the axis. If you set this property, you must also set LocalY.
        /// </summary>
        [XmlElement("localX")]
        public LengthMeasure LocalX {
            get {
                return localXField;
            } 
            set { 
                if (westingFieldSpecified) throw new Exception("Cannot set property LocalX when property Westing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property LocalX when property Southing is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property LocalX when property Longitude is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property LocalX when property Latitude is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property LocalX when property Easting is already set");
                if (projectedXFieldSpecified) throw new Exception("Cannot set property LocalX when property ProjectedX is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property LocalX when property Northing is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property LocalX when property ProjectedY is already set");
                localXField = value;
                localXFieldSpecified = true;
            }
        }

        private LengthMeasure localXField; 
        private bool localXFieldSpecified = false; 

        /// <summary>
        /// The local (engineering) Y coordinate. The CRS will define the orientation of the axis. If you set this property, you must also set LocalX.
        /// </summary>
        [XmlElement("localY")]
        public LengthMeasure LocalY {
            get {
                return localYField;
            } 
            set { 
                if (westingFieldSpecified) throw new Exception("Cannot set property LocalY when property Westing is already set");
                if (southingFieldSpecified) throw new Exception("Cannot set property LocalY when property Southing is already set");
                if (longitudeFieldSpecified) throw new Exception("Cannot set property LocalY when property Longitude is already set");
                if (latitudeFieldSpecified) throw new Exception("Cannot set property LocalY when property Latitude is already set");
                if (eastingFieldSpecified) throw new Exception("Cannot set property LocalY when property Easting is already set");
                if (projectedXFieldSpecified) throw new Exception("Cannot set property LocalY when property ProjectedX is already set");
                if (northingFieldSpecified) throw new Exception("Cannot set property LocalY when property Northing is already set");
                if (projectedYFieldSpecified) throw new Exception("Cannot set property LocalY when property ProjectedY is already set");
                localYField = value;
                localYFieldSpecified = true;
            }
        }

        private LengthMeasure localYField; 
        private bool localYFieldSpecified = false; 


		
        [XmlIgnore]
		[Browsable(false)]
        public List<ItemsChoiceType> ItemsElementName { get; set; }
        /// <summary>
        /// Flag indicating (if "true" or "1") that this pair of values was the original data given for the location. If the pair of values was calculated from an original pair of values, this flag should be "false" (or "0"), or not present.
        /// </summary>
        [XmlElement("original")]
        public Boolean? Original {
            get {
                return originalField;
            } 
            set { 
                originalField = value;
                this.OriginalSpecified = true;
            }
        }

        private Boolean? originalField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean OriginalSpecified { get; set; }
        /// <summary>
        /// A Comment, generally given to help the reader interpret the coordinates if the CRS and the chosen pair do not make them clear.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_publicLandSurveySystem xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_publicLandSurveySystem", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_publicLandSurveySystem xsd type.")]
    public partial class PublicLandSurveySystem : Object 
    {

        /// <summary>
        /// Principal meridian for this location.
        /// </summary>
        [XmlElement("principalMeridian")]
        public PrincipalMeridian? PrincipalMeridian {
            get {
                return principalMeridianField;
            } 
            set { 
                principalMeridianField = value;
                this.PrincipalMeridianSpecified = true;
            }
        }

        private PrincipalMeridian? principalMeridianField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PrincipalMeridianSpecified { get; set; }
        /// <summary>
        /// Range number.
        /// </summary>
        [XmlElement("range")]
        public Int16? Range {
            get {
                return rangeField;
            } 
            set { 
                rangeField = value;
                this.RangeSpecified = true;
            }
        }

        private Int16? rangeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RangeSpecified { get; set; }
        /// <summary>
        /// Range direction.
        /// </summary>
        [XmlElement("rangeDir")]
        public EastOrWest? RangeDir {
            get {
                return rangeDirField;
            } 
            set { 
                rangeDirField = value;
                this.RangeDirSpecified = true;
            }
        }

        private EastOrWest? rangeDirField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RangeDirSpecified { get; set; }
        /// <summary>
        /// Township number.
        /// </summary>
        [XmlElement("township")]
        public Int16? Township {
            get {
                return townshipField;
            } 
            set { 
                townshipField = value;
                this.TownshipSpecified = true;
            }
        }

        private Int16? townshipField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TownshipSpecified { get; set; }
        /// <summary>
        /// Township direction.
        /// </summary>
        [XmlElement("townshipDir")]
        public NorthOrSouth? TownshipDir {
            get {
                return townshipDirField;
            } 
            set { 
                townshipDirField = value;
                this.TownshipDirSpecified = true;
            }
        }

        private NorthOrSouth? townshipDirField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TownshipDirSpecified { get; set; }
        /// <summary>
        /// Section number.
        /// </summary>
        [XmlElement("section")]
        public String Section { get; set; }
        /// <summary>
        /// The location of the well within the section, with the primary component listed first. Spot location will be made some from combination of the following codes: NE, NW, SW, SE, N2, S2, E2, W2, C (center quarter), LTxx (where xx represents a two digit lot designation), TRzz (where zz represents a one or two character trac designation). Free format will allow for entries such as NESW (southwest quarter of northeast quarter), E2NESE (southeast quarter of northeast quarter of east half), CNE (northeast quarter of center quarter), etc.
        /// </summary>
        [XmlElement("quarterSection")]
        public String QuarterSection { get; set; }
        /// <summary>
        /// Quarter township.
        /// </summary>
        [XmlElement("quarterTownship")]
        public String QuarterTownship { get; set; }
        /// <summary>
        /// Distance inside of the boundary line of the specified section. North specifies the distance from the north boundary line.
        /// </summary>
        [XmlElement("footageNS")]
        public FootageNorthSouth FootageNS { get; set; }
        /// <summary>
        /// Distance inside of the boundary line of the specified section. East specifies the distance from the east boundary line.
        /// </summary>
        [XmlElement("footageEW")]
        public FootageEastWest FootageEW { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Well object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_well", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Well object.")]
    public partial class Well : Object 
    {

        /// <summary>
        /// Human recognizable context for the well. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Legal name of the well. 
        /// </summary>
        [XmlElement("nameLegal")]
        public String NameLegal { get; set; }
        /// <summary>
        /// License number of the well. 
        /// </summary>
        [XmlElement("numLicense")]
        public String NumLicense { get; set; }
        /// <summary>
        /// Government assigned well number. 
        /// </summary>
        [XmlElement("numGovt")]
        public String NumGovt { get; set; }
        /// <summary>
        /// Date and time license was issued. 
        /// </summary>
        [XmlElement("dTimLicense")]
        public DateTime? DateTimeLicense {
            get {
                return dTimLicenseField;
            } 
            set { 
                dTimLicenseField = value;
                this.DateTimeLicenseSpecified = true;
            }
        }

        private DateTime? dTimLicenseField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeLicenseSpecified { get; set; }
        /// <summary>
        /// Name of the field in which the well is located. 
        /// </summary>
        [XmlElement("field")]
        public String Field { get; set; }
        /// <summary>
        /// Country in which well is located. 
        /// </summary>
        [XmlElement("country")]
        public String Country { get; set; }
        /// <summary>
        /// State or province in which well is located. 
        /// </summary>
        [XmlElement("state")]
        public String State { get; set; }
        /// <summary>
        /// County in which the well is located. 
        /// </summary>
        [XmlElement("county")]
        public String County { get; set; }
        /// <summary>
        /// Geo-political region. 
        /// </summary>
        [XmlElement("region")]
        public String Region { get; set; }
        /// <summary>
        /// Geo-political district name. 
        /// </summary>
        [XmlElement("district")]
        public String District { get; set; }
        /// <summary>
        /// Block name in which well is located. 
        /// </summary>
        [XmlElement("block")]
        public String Block { get; set; }
        /// <summary>
        /// The time zone in which well is located. It is the deviation in hours and minutes from UTC. This should be the normal time zone at the well and not a seasonally adjusted value such as daylight savings time.
        /// </summary>
        [XmlElement("timeZone")]
        public String TimeZone { get; set; }
        /// <summary>
        /// Operator company name. 
        /// </summary>
        [XmlElement("operator")]
        public String Operator { get; set; }
        /// <summary>
        /// Division of operator company. 
        /// </summary>
        [XmlElement("operatorDiv")]
        public String OperatorDivision { get; set; }
        /// <summary>
        /// Interest for Operator. Commonly in percent. 
        /// </summary>
        [XmlElement("pcInterest")]
        public DimensionlessMeasure PercentInterest { get; set; }
        /// <summary>
        /// American Petroleum Institute well number. 
        /// </summary>
        [XmlElement("numAPI")]
        public String NumAPI { get; set; }
        /// <summary>
        /// POSC Well status. 
        /// </summary>
        [XmlElement("statusWell")]
        public WellStatus? StatusWell {
            get {
                return statusWellField;
            } 
            set { 
                statusWellField = value;
                this.StatusWellSpecified = true;
            }
        }

        private WellStatus? statusWellField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StatusWellSpecified { get; set; }
        /// <summary>
        /// POSC well purpose. 
        /// </summary>
        [XmlElement("purposeWell")]
        public WellPurpose? PurposeWell {
            get {
                return purposeWellField;
            } 
            set { 
                purposeWellField = value;
                this.PurposeWellSpecified = true;
            }
        }

        private WellPurpose? purposeWellField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PurposeWellSpecified { get; set; }
        /// <summary>
        /// POSC well fluid. The type of fluid being produced from or injected into a well facility. 
        /// </summary>
        [XmlElement("fluidWell")]
        public WellFluid? FluidWell {
            get {
                return fluidWellField;
            } 
            set { 
                fluidWellField = value;
                this.FluidWellSpecified = true;
            }
        }

        private WellFluid? fluidWellField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FluidWellSpecified { get; set; }
        /// <summary>
        /// POSC well direction. The direction of flow of the fluids in a well facility (generally, injected or produced, or some combination). 
        /// </summary>
        [XmlElement("directionWell")]
        public WellDirection? DirectionWell {
            get {
                return directionWellField;
            } 
            set { 
                directionWellField = value;
                this.DirectionWellSpecified = true;
            }
        }

        private WellDirection? directionWellField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DirectionWellSpecified { get; set; }
        /// <summary>
        /// Date and time at which well was spudded. 
        /// </summary>
        [XmlElement("dTimSpud")]
        public DateTime? DateTimeSpud {
            get {
                return dTimSpudField;
            } 
            set { 
                dTimSpudField = value;
                this.DateTimeSpudSpecified = true;
            }
        }

        private DateTime? dTimSpudField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpudSpecified { get; set; }
        /// <summary>
        /// Date and time at which well was plugged and abandoned. 
        /// </summary>
        [XmlElement("dTimPa")]
        public DateTime? DateTimePluggedAndAbandoned {
            get {
                return dTimPaField;
            } 
            set { 
                dTimPaField = value;
                this.DateTimePluggedAndAbandonedSpecified = true;
            }
        }

        private DateTime? dTimPaField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePluggedAndAbandonedSpecified { get; set; }
        /// <summary>
        /// Elevation of wellhead relative to a wellDatum. 
        /// </summary>
        [XmlElement("wellheadElevation")]
        public WellElevationCoord WellheadElevation { get; set; }
		/// <summary>
        /// A vertical datum to which elevations and depths are referenced. 
        /// </summary>
        [XmlElement("wellDatum")]
        public List<WellDatum> WellDatum { get; set; }
        /// <summary>
        /// Elevation of ground level (land rigs). 
        /// </summary>
        [XmlElement("groundElevation")]
        public WellElevationCoord GroundElevation { get; set; }
        /// <summary>
        /// Depth of water (not land rigs). 
        /// </summary>
        [XmlElement("waterDepth")]
        public LengthMeasure WaterDepth { get; set; }
		/// <summary>
        /// the 2D coordinates of the well surface point in one coordinate reference system. This is where the well crosses ground level on land and crosses the platform offshore. 
        /// </summary>
        [XmlElement("wellLocation")]
        public List<Location> WellLocation { get; set; }
        /// <summary>
        /// Township, section, range, quarter, and footage calls for USA Public Land Survey System.
        /// </summary>
        [XmlElement("wellPublicLandSurveySystemLocation")]
        public PublicLandSurveySystem WellPublicLandSurveySystemLocation { get; set; }
		/// <summary>
        /// Defines a reference point within the context of the well. 
        /// </summary>
        [XmlElement("referencePoint")]
        public List<ReferencePoint> ReferencePoint { get; set; }
		/// <summary>
        /// A coordinate reference system that was used within the context of this well. 
        /// </summary>
        [XmlElement("wellCRS")]
        public List<WellCRS> WellCRS { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates within the context of a well. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellDatum", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates within the context of a well. ")]
    public partial class WellDatum : Object 
    {

        /// <summary>
        /// The human understandable contextual name of the reference datum.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The code value that represents the type of reference datum. This may represent a point on a device (e.g., kelly bushing) or it may represent a vertical reference datum (e.g., mean sea level).
        /// </summary>
        [XmlElement("code")]
        public ElevCodeEnum? Code {
            get {
                return codeField;
            } 
            set { 
                codeField = value;
                this.CodeSpecified = true;
            }
        }

        private ElevCodeEnum? codeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CodeSpecified { get; set; }
        /// <summary>
        /// A reference to the coordinateReferenceSystem object representing the vertical reference datum (i.e., this wellDatum). This should only be specified if the above 'code' represents some variation of sea level. 
        /// </summary>
        [XmlElement("datumCRS")]
        public RefNameString DatumCRS {
            get {
                return datumCRSField;
            } 
            set { 
                if (datumNameFieldSpecified) throw new Exception("Cannot set property DatumCRS when property DatumName is already set");
                datumCRSField = value;
                datumCRSFieldSpecified = true;
            }
        }

        private RefNameString datumCRSField; 
        private bool datumCRSFieldSpecified = false; 

        /// <summary>
        /// The name of the vertical reference datum in a particular naming system. This should only be specified if the above 'code' represents some variation of sea level. An optional short name (code) can also be specified. Specifying a well known datum is highly desired if the above code is a variant of sea level because sea level varies over time and space. An example would be to specify a name of 'Caspian Sea' with a code of '5106' in the 'EPSG' naming system.
        /// </summary>
        [XmlElement("datumName")]
        public WellKnownNameStruct DatumName {
            get {
                return datumNameField;
            } 
            set { 
                if (datumCRSFieldSpecified) throw new Exception("Cannot set property DatumName when property DatumCRS is already set");
                datumNameField = value;
                datumNameFieldSpecified = true;
            }
        }

        private WellKnownNameStruct datumNameField; 
        private bool datumNameFieldSpecified = false; 


		/// <summary>
        /// Since various activities may use different points as measurement datums, it is useful to characterize the point based on its usage. A well reference datum may have more than one such characterization. For example, it may be the datum used by the driller and logger for measuring their depths. Example usage values would be 'permanent','driller', 'logger' 'WRP' (well reference point) and 'SRP' (site reference point).
        /// </summary>
        [XmlElement("kind")]
        public List<String> Kind { get; set; }
        /// <summary>
        /// A pointer to the wellbore that contains the reference datum. This should be specified if a measured depth is given.
        /// </summary>
        [XmlElement("wellbore")]
        public RefWellWellbore Wellbore { get; set; }
        /// <summary>
        /// A pointer to the rig that contains the device used as a reference datum. The rig may be associated with a wellbore in another well (e.g., pattern drilling using a rig on a track).
        /// </summary>
        [XmlElement("rig")]
        public RefWellWellboreRig Rig { get; set; }
        /// <summary>
        /// The gravity based elevation coordinate of this reference datum as measured from another datum. Positive moving upward from the elevation datum. An elevation should be given unless this is a vertical reference datum (e.g., sea level). 
        /// </summary>
        [XmlElement("elevation")]
        public WellElevationCoord Elevation { get; set; }
        /// <summary>
        /// The measured depth coordinate of this reference datum as measured from another datum. The measured depth datum should either be the same as the elevation datum or it should be relatable to the elevation datum through other datums. Positive moving toward the bottomhole from the measured depth datum. This should be given when a local reference is "downhole", such as a kickoff point or ocean bottom template, and the borehole may not be vertical. If a Depth is given then an Elevation should also be given.
        /// </summary>
        [XmlElement("measuredDepth")]
        public MeasuredDepthCoord MeasuredDepth { get; set; }
        /// <summary>
        /// The horizontal location of the point being used as a well datum. This may be used when the point is not directly above or below the well point location. For example, a well being drilled from a platform may have its location at the entrance into the sea floor, while the well datum may be located on the drilling rig. Or the well datum may be a kickoff point, that is not directly under the well surface point. 
        /// </summary>
        [XmlElement("horizontalLocation")]
        public Location HorizontalLocation { get; set; }
        /// <summary>
        /// A contextual description of the well reference datum.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		/// <summary>
        /// The unique identifier of the node. All measured depth, vertical depth and elevation coordinates may point to this uid using attribute "datum". Alternatively, the commonData elements defaultMeasuredDatum, defaultVerticalDatum and defaultElevationDatum may point to this value. The best practice for the uid is to derive it from the name. For example, by changing spaces to underscores.
        /// </summary>
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellKnownNameStruct xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellKnownNameStruct", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the wellKnownNameStruct xsd type.")]
    public partial class WellKnownNameStruct : Object 
    {
        public WellKnownNameStruct() {}
        public WellKnownNameStruct(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The naming system within the name is unique.
        /// </summary>
        [XmlAttribute("namingSystem")]
        public String NamingSystem { get; set; }
		/// <summary>
        /// A unique (short) code associated with the name.
        /// </summary>
        [XmlAttribute("code")]
        public String Code { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Data that represents a foreign key to a wellbore. The wellbore may be defined within the context of another well.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellWellbore", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Data that represents a foreign key to a wellbore. The wellbore may be defined within the context of another well.")]
    public partial class RefWellWellbore : Object 
    {

        /// <summary>
        /// A pointer the wellbore with which there is a relationship.
        /// </summary>
        [XmlElement("wellboreReference")]
        public RefNameString WellboreReference { get; set; }
        /// <summary>
        /// A pointer to the well that contains the wellboreReference. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
        [XmlElement("wellParent")]
        public RefNameString WellPluggedAndAbandonedrent { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A reference to a rig within a wellbore. The wellbore may be defined within the context of another well. This value represents a foreign key from one node to another.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellWellboreRig", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("A reference to a rig within a wellbore. The wellbore may be defined within the context of another well. This value represents a foreign key from one node to another.")]
    public partial class RefWellWellboreRig : Object 
    {

        /// <summary>
        /// A pointer to the rig with which there is a relationship.
        /// </summary>
        [XmlElement("rigReference")]
        public RefNameString RigReference { get; set; }
        /// <summary>
        /// A pointer to the wellbore that contains the rigReference. This is not needed unless the referenced rig is outside the context of a common parent wellbore.
        /// </summary>
        [XmlElement("wellboreParent")]
        public RefNameString WellborePluggedAndAbandonedrent { get; set; }
        /// <summary>
        /// A pointer to the well that contains the wellboreParent. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
        [XmlElement("wellParent")]
        public RefNameString WellPluggedAndAbandonedrent { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Well Coordinate Reference System Component Schema. Note that this is intended for use with two dimensional coordinates. That does not prevent the use of a three dimensional CRS. It just means that only two coordinates will be specified in that 3D system. The veritcal coordinates are specified separately and, for 3D systems, one of the linked wellDatums should represent the vertical datum of that 3D system so that the height in the 3d system can be determined. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellCRS", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Well Coordinate Reference System Component Schema. Note that this is intended for use with two dimensional coordinates. That does not prevent the use of a three dimensional CRS. It just means that only two coordinates will be specified in that 3D system. The veritcal coordinates are specified separately and, for 3D systems, one of the linked wellDatums should represent the vertical datum of that 3D system so that the height in the 3d system can be determined. ")]
    public partial class WellCRS : Object 
    {

        /// <summary>
        /// Human recognizable context for the system. For a geodetic system this is commonly the name of the datum. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A reference to the coordinateReferenceSystems object representing the Map projection system.
        /// </summary>
        [XmlElement("mapProjectionCRS")]
        public RefNameString MapProjectionCRS {
            get {
                return mapProjectionCRSField;
            } 
            set { 
                if (geodeticCRSFieldSpecified) throw new Exception("Cannot set property MapProjectionCRS when property GeodeticCRS is already set");
                if (geographicFieldSpecified) throw new Exception("Cannot set property MapProjectionCRS when property Geographic is already set");
                if (localCRSFieldSpecified) throw new Exception("Cannot set property MapProjectionCRS when property LocalCRS is already set");
                if (mapProjectionFieldSpecified) throw new Exception("Cannot set property MapProjectionCRS when property MapProjection is already set");
                mapProjectionCRSField = value;
                mapProjectionCRSFieldSpecified = true;
            }
        }

        private RefNameString mapProjectionCRSField; 
        private bool mapProjectionCRSFieldSpecified = false; 

        /// <summary>
        /// A reference to the coordinateReferenceSystems object representing the Geodetic (i.e., Geocentric or Geographic) system.
        /// </summary>
        [XmlElement("geodeticCRS")]
        public RefNameString GeodeticCRS {
            get {
                return geodeticCRSField;
            } 
            set { 
                if (mapProjectionCRSFieldSpecified) throw new Exception("Cannot set property GeodeticCRS when property MapProjectionCRS is already set");
                if (geographicFieldSpecified) throw new Exception("Cannot set property GeodeticCRS when property Geographic is already set");
                if (localCRSFieldSpecified) throw new Exception("Cannot set property GeodeticCRS when property LocalCRS is already set");
                if (mapProjectionFieldSpecified) throw new Exception("Cannot set property GeodeticCRS when property MapProjection is already set");
                geodeticCRSField = value;
                geodeticCRSFieldSpecified = true;
            }
        }

        private RefNameString geodeticCRSField; 
        private bool geodeticCRSFieldSpecified = false; 

        /// <summary>
        /// Geographic system. Note that these structures do not truly define a CRS but rather specify information that could be used to describe a CRS. 
        /// </summary>
        [XmlElement("geographic")]
        public GeodeticModel Geographic {
            get {
                return geographicField;
            } 
            set { 
                if (mapProjectionCRSFieldSpecified) throw new Exception("Cannot set property Geographic when property MapProjectionCRS is already set");
                if (geodeticCRSFieldSpecified) throw new Exception("Cannot set property Geographic when property GeodeticCRS is already set");
                if (localCRSFieldSpecified) throw new Exception("Cannot set property Geographic when property LocalCRS is already set");
                if (mapProjectionFieldSpecified) throw new Exception("Cannot set property Geographic when property MapProjection is already set");
                geographicField = value;
                geographicFieldSpecified = true;
            }
        }

        private GeodeticModel geographicField; 
        private bool geographicFieldSpecified = false; 

        /// <summary>
        /// Local (engineering) system. Note that these structures do not truly define a CRS but rather specify information that could be used to describe a CRS. 
        /// </summary>
        [XmlElement("localCRS")]
        public LocalCRS LocalCRS {
            get {
                return localCRSField;
            } 
            set { 
                if (mapProjectionCRSFieldSpecified) throw new Exception("Cannot set property LocalCRS when property MapProjectionCRS is already set");
                if (geodeticCRSFieldSpecified) throw new Exception("Cannot set property LocalCRS when property GeodeticCRS is already set");
                if (geographicFieldSpecified) throw new Exception("Cannot set property LocalCRS when property Geographic is already set");
                if (mapProjectionFieldSpecified) throw new Exception("Cannot set property LocalCRS when property MapProjection is already set");
                localCRSField = value;
                localCRSFieldSpecified = true;
            }
        }

        private LocalCRS localCRSField; 
        private bool localCRSFieldSpecified = false; 

        /// <summary>
        /// Map projection system. Note that these structures do not truly define a CRS but rather specify information that could be used to describe a CRS. 
        /// </summary>
        [XmlElement("mapProjection")]
        public Projectionx MapProjection {
            get {
                return mapProjectionField;
            } 
            set { 
                if (mapProjectionCRSFieldSpecified) throw new Exception("Cannot set property MapProjection when property MapProjectionCRS is already set");
                if (geodeticCRSFieldSpecified) throw new Exception("Cannot set property MapProjection when property GeodeticCRS is already set");
                if (geographicFieldSpecified) throw new Exception("Cannot set property MapProjection when property Geographic is already set");
                if (localCRSFieldSpecified) throw new Exception("Cannot set property MapProjection when property LocalCRS is already set");
                mapProjectionField = value;
                mapProjectionFieldSpecified = true;
            }
        }

        private Projectionx mapProjectionField; 
        private bool mapProjectionFieldSpecified = false; 


		
        [XmlIgnore]
		[Browsable(false)]
        public ItemChoiceType? ItemElementName { get; set; }
        /// <summary>
        /// A textual description of the system. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Geodetic Model Component Schema. All elements except nameCRS have been deprecated. Either use a well known name of a CRS or use the wellCRS reference to a gmlCoordinateReferenceSystem.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_geodeticModel", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Geodetic Model Component Schema. All elements except nameCRS have been deprecated. Either use a well known name of a CRS or use the wellCRS reference to a gmlCoordinateReferenceSystem.")]
    public partial class GeodeticModel : Object 
    {

        /// <summary>
        /// The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'ED50' with a code of '4230' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is also true for any other naming system. If in doubt, contact your local geodesist.
        /// </summary>
        [XmlElement("nameCRS")]
        public WellKnownNameStruct NameCRS { get; set; }
        /// <summary>
        /// DEPRECATED. Geodetic datum code. This defines a system in the Geoshare naming system and should probably not be used with CRSName. 
        /// </summary>
        [Obsolete()]
        [XmlElement("geodeticDatumCode")]
        public GeodeticDatum? GeodeticDatumCode {
            get {
                return geodeticDatumCodeField;
            } 
            set { 
                geodeticDatumCodeField = value;
                this.GeodeticDatumCodeSpecified = true;
            }
        }

        private GeodeticDatum? geodeticDatumCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean GeodeticDatumCodeSpecified { get; set; }
        /// <summary>
        /// DEPRECATED. Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
        [Obsolete()]
        [XmlElement("xTranslation")]
        public LengthMeasure XTranslation { get; set; }
        /// <summary>
        /// DEPRECATED. Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
        [Obsolete()]
        [XmlElement("yTranslation")]
        public LengthMeasure YTranslation { get; set; }
        /// <summary>
        /// DEPRECATED. Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
        [Obsolete()]
        [XmlElement("zTranslation")]
        public LengthMeasure ZTranslation { get; set; }
        /// <summary>
        /// DEPRECATED. Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
        [Obsolete()]
        [XmlElement("xRotation")]
        public PlaneAngleMeasure XRotation { get; set; }
        /// <summary>
        /// DEPRECATED. Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
        [Obsolete()]
        [XmlElement("yRotation")]
        public PlaneAngleMeasure YRotation { get; set; }
        /// <summary>
        /// DEPRECATED. Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
        [Obsolete()]
        [XmlElement("zRotation")]
        public PlaneAngleMeasure ZRotation { get; set; }
        /// <summary>
        /// DEPRECATED. Ellipsoid scale factor. 
        /// </summary>
        [Obsolete()]
        [XmlElement("scaleFactor")]
        public Double? ScaleFactor {
            get {
                return scaleFactorField;
            } 
            set { 
                scaleFactorField = value;
                this.ScaleFactorSpecified = true;
            }
        }

        private Double? scaleFactorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ScaleFactorSpecified { get; set; }
        /// <summary>
        /// DEPRECATED. Ellipsoid code (spheroid) defining geographic or planar coordinates. Implied if geodeticDatumCode is specified (and is not user defined). 
        /// </summary>
        [Obsolete()]
        [XmlElement("ellipsoidCode")]
        public Ellipsoid? EllipsoidCode {
            get {
                return ellipsoidCodeField;
            } 
            set { 
                ellipsoidCodeField = value;
                this.EllipsoidCodeSpecified = true;
            }
        }

        private Ellipsoid? ellipsoidCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EllipsoidCodeSpecified { get; set; }
        /// <summary>
        /// DEPRECATED. Ellipsoid semi-major axis size. Implied if geodeticDatumCode or ellipsoidCode specified. 
        /// </summary>
        [Obsolete()]
        [XmlElement("ellipsoidSemiMajorAxis")]
        public LengthMeasure EllipsoidSemiMajorAxis { get; set; }
        /// <summary>
        /// DEPRECATED. Ellipsoid inverse flattening value (ie. 1/x). Implied if geodeticDatumCode or ellipsoidCode specified. 
        /// </summary>
        [Obsolete()]
        [XmlElement("ellipsoidInverseFlattening")]
        public Double? EllipsoidInverseFlattening {
            get {
                return ellipsoidInverseFlatteningField;
            } 
            set { 
                ellipsoidInverseFlatteningField = value;
                this.EllipsoidInverseFlatteningSpecified = true;
            }
        }

        private Double? ellipsoidInverseFlatteningField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EllipsoidInverseFlatteningSpecified { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_localCRS xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_localCRS", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_localCRS xsd type.")]
    public partial class LocalCRS : Object 
    {

        /// <summary>
        /// A textual description of the origin.
        /// </summary>
        [XmlElement("originDescription")]
        public String OriginDescription {
            get {
                return originDescriptionField;
            } 
            set { 
                if (originFieldSpecified) throw new Exception("Cannot set property OriginDescription when property Origin is already set");
                if (usesWellAsOriginFieldSpecified) throw new Exception("Cannot set property OriginDescription when property UsesWellAsOrigin is already set");
                originDescriptionField = value;
                originDescriptionFieldSpecified = true;
            }
        }

        private String originDescriptionField; 
        private bool originDescriptionFieldSpecified = false; 

        /// <summary>
        /// A pointer to the well reference point that is the origin of this CRS.
        /// </summary>
        [XmlElement("origin")]
        public RefNameString Origin {
            get {
                return originField;
            } 
            set { 
                if (originDescriptionFieldSpecified) throw new Exception("Cannot set property Origin when property OriginDescription is already set");
                if (usesWellAsOriginFieldSpecified) throw new Exception("Cannot set property Origin when property UsesWellAsOrigin is already set");
                originField = value;
                originFieldSpecified = true;
            }
        }

        private RefNameString originField; 
        private bool originFieldSpecified = false; 

        /// <summary>
        /// True ("true" or "1") indicates that the well surface point is the origin of this CRS. False ("false" or "0") or not given indicates otherwise.
        /// </summary>
        [XmlElement("usesWellAsOrigin")]
        public Boolean UsesWellAsOrigin {
            get {
                return usesWellAsOriginField;
            } 
            set { 
                if (originDescriptionFieldSpecified) throw new Exception("Cannot set property UsesWellAsOrigin when property OriginDescription is already set");
                if (originFieldSpecified) throw new Exception("Cannot set property UsesWellAsOrigin when property Origin is already set");
                usesWellAsOriginField = value;
                usesWellAsOriginFieldSpecified = true;
            }
        }

        private Boolean usesWellAsOriginField; 
        private bool usesWellAsOriginFieldSpecified = false; 


        /// <summary>
        /// The angle of the Y axis from North (as described in attribute northDirection). Defaults to zero. Positive clockwise.
        /// </summary>
        [XmlElement("yAxisAzimuth")]
        public YAxisAzimuth YAxisAzimuth { get; set; }
        /// <summary>
        /// The angle between magnetic north and true north. The angle is measured positive clockwise from true north to magnetic north. This value SHOULD be given if the yAxisAzimuth is measured from the magnetic north direction.
        /// </summary>
        [XmlElement("magneticDeclination")]
        public PlaneAngleMeasure MagneticDeclination { get; set; }
        /// <summary>
        /// The angle between true north and the northing axis or the projection grid being used. The angle is measured at the point in question, and is measured from true north to grid north, positive clockwise.
        /// </summary>
        [XmlElement("gridConvergence")]
        public PlaneAngleMeasure GridConvergence { get; set; }
        /// <summary>
        /// A free-form description of the Y axis. Examples would be 'parallel to the west side of the platform', or 'along the main entry road'.
        /// </summary>
        [XmlElement("yAxisDescription")]
        public String YAxisDescription { get; set; }
        /// <summary>
        /// True ("true" or "1") indicates that the X axis is rotated counter-clockwise from the Y axis when viewed from above the earth looking down. False ("false" or "0") or not given indicates a clockwise rotation. Generally the X axis is rotated clockwise.
        /// </summary>
        [XmlElement("xRotationCounterClockwise")]
        public Boolean? XRotationCounterClockwise {
            get {
                return xRotationCounterClockwiseField;
            } 
            set { 
                xRotationCounterClockwiseField = value;
                this.XRotationCounterClockwiseSpecified = true;
            }
        }

        private Boolean? xRotationCounterClockwiseField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean XRotationCounterClockwiseSpecified { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Element Types All elements except nameCRS have been deprecated. Either use a well known name of a CRS or use the wellCRS reference to a gmlCoordinateReferenceSystem.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_projectionx", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML Element Types All elements except nameCRS have been deprecated. Either use a well known name of a CRS or use the wellCRS reference to a gmlCoordinateReferenceSystem.")]
    public partial class Projectionx : Object 
    {

        /// <summary>
        /// The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'WGS 84 / UTM zone 10N' with a code of '32610' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is also true for any other naming system. If in doubt, contact your local geodesist.
        /// </summary>
        [XmlElement("nameCRS")]
        public WellKnownNameStruct NameCRS { get; set; }
        /// <summary>
        /// DEPRECATED. A code to identify the type of projection. 
        /// </summary>
        [Obsolete()]
        [XmlElement("projectionCode")]
        public Projection? ProjectionCode {
            get {
                return projectionCodeField;
            } 
            set { 
                projectionCodeField = value;
                this.ProjectionCodeSpecified = true;
            }
        }

        private Projection? projectionCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ProjectionCodeSpecified { get; set; }
        /// <summary>
        /// DEPRECATED. A pointer to the wellCRS that represents the geographic system from which this system was projected.
        /// </summary>
        [Obsolete()]
        [XmlElement("projectedFrom")]
        public RefNameString ProjectedFrom { get; set; }
        /// <summary>
        /// DEPRECATED. Latitude of first standard parallel. 
        /// </summary>
        [Obsolete()]
        [XmlElement("stdParallel1")]
        public PlaneAngleMeasure StdPluggedAndAbandonedrallel1 { get; set; }
        /// <summary>
        /// DEPRECATED. Latitude of second standard parallel, if used. 
        /// </summary>
        [Obsolete()]
        [XmlElement("stdParallel2")]
        public PlaneAngleMeasure StdPluggedAndAbandonedrallel2 { get; set; }
        /// <summary>
        /// DEPRECATED. Longitude of the Y axis of the resulting map. 
        /// </summary>
        [Obsolete()]
        [XmlElement("centralMeridian")]
        public PlaneAngleMeasure CentralMeridian { get; set; }
        /// <summary>
        /// DEPRECATED. Latitude at which the X axis intersects the central meridian. 
        /// </summary>
        [Obsolete()]
        [XmlElement("originLatitude")]
        public PlaneAngleMeasure OriginLatitude { get; set; }
        /// <summary>
        /// DEPRECATED. Longitude of the central meridian. 
        /// </summary>
        [Obsolete()]
        [XmlElement("originLongitude")]
        public PlaneAngleMeasure OriginLongitude { get; set; }
        /// <summary>
        /// DEPRECATED. Latitude of the first point if the two-point specification of the central line is used. 
        /// </summary>
        [Obsolete()]
        [XmlElement("latitude1")]
        public PlaneAngleMeasure Latitude1 { get; set; }
        /// <summary>
        /// DEPRECATED. Longitude of the first point if the two-point specification of the central line is used. 
        /// </summary>
        [Obsolete()]
        [XmlElement("longitude1")]
        public PlaneAngleMeasure Longitude1 { get; set; }
        /// <summary>
        /// DEPRECATED. Latitude of the second point if the two-point specification of the central line is used. 
        /// </summary>
        [Obsolete()]
        [XmlElement("latitude2")]
        public PlaneAngleMeasure Latitude2 { get; set; }
        /// <summary>
        /// DEPRECATED. Longitude of the second point if the two-point specification of the central line is used. 
        /// </summary>
        [Obsolete()]
        [XmlElement("longitude2")]
        public PlaneAngleMeasure Longitude2 { get; set; }
        /// <summary>
        /// DEPRECATED. Latitude of a point for which the scale factor is specified exactly. Default to origin. 
        /// </summary>
        [Obsolete()]
        [XmlElement("latitudeForScale")]
        public PlaneAngleMeasure LatitudeForScale { get; set; }
        /// <summary>
        /// DEPRECATED. Longitude of a point for which the scale factor is specified exactly. Default to origin. 
        /// </summary>
        [Obsolete()]
        [XmlElement("longitudeForScale")]
        public PlaneAngleMeasure LongitudeForScale { get; set; }
        /// <summary>
        /// DEPRECATED. Latitude at which the scale on the map is exact. If none is provided, scale is assumed to be exact at the equator. 
        /// </summary>
        [Obsolete()]
        [XmlElement("trueScaleLatitude")]
        public PlaneAngleMeasure TrueScaleLatitude { get; set; }
        /// <summary>
        /// DEPRECATED. Spheroid radius. 
        /// </summary>
        [Obsolete()]
        [XmlElement("spheroidRadius")]
        public LengthMeasure SpheroidRadius { get; set; }
        /// <summary>
        /// DEPRECATED. Ellipsoid scale factor. 
        /// </summary>
        [Obsolete()]
        [XmlElement("scaleFactor")]
        public Double? ScaleFactor {
            get {
                return scaleFactorField;
            } 
            set { 
                scaleFactorField = value;
                this.ScaleFactorSpecified = true;
            }
        }

        private Double? scaleFactorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ScaleFactorSpecified { get; set; }
        /// <summary>
        /// DEPRECATED. Projection method variant - establishes minor variations of the projection. Geoshare proposal. 
        /// </summary>
        [Obsolete()]
        [XmlElement("methodVariant")]
        public ProjectionVariantsObliqueMercator? MethodVariant {
            get {
                return methodVariantField;
            } 
            set { 
                methodVariantField = value;
                this.MethodVariantSpecified = true;
            }
        }

        private ProjectionVariantsObliqueMercator? methodVariantField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MethodVariantSpecified { get; set; }
        /// <summary>
        /// DEPRECATED. Height above the surface origin location from which the perspective is taken. 
        /// </summary>
        [Obsolete()]
        [XmlElement("perspectiveHeight")]
        public LengthMeasure PerspectiveHeight { get; set; }
        /// <summary>
        /// DEPRECATED. Zone for the type of projection. Zones have values from 1 to 60 with a required direction of "N" (North) or "S" (South). For example, "21N". 
        /// </summary>
        [Obsolete()]
        [XmlElement("zone")]
        public String Zone { get; set; }
        /// <summary>
        /// DEPRECATED. North American Datum type. 
        /// </summary>
        [Obsolete()]
        [XmlElement("NADType")]
        public NADTypeList? NADType {
            get {
                return NADTypeField;
            } 
            set { 
                NADTypeField = value;
                this.NADTypeSpecified = true;
            }
        }

        private NADTypeList? NADTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NADTypeSpecified { get; set; }
        /// <summary>
        /// DEPRECATED. Artificial value added to the X axis. 
        /// </summary>
        [Obsolete()]
        [XmlElement("falseEasting")]
        public LengthMeasure FalseEasting { get; set; }
        /// <summary>
        /// DEPRECATED. Artificial value added to the Y axis. 
        /// </summary>
        [Obsolete()]
        [XmlElement("falseNorthing")]
        public LengthMeasure FalseNorthing { get; set; }
        /// <summary>
        /// DEPRECATED. Bearing angle of the great circle with respect to north at the central point. 
        /// </summary>
        [Obsolete()]
        [XmlElement("bearing")]
        public PlaneAngleMeasure Bearing { get; set; }
        /// <summary>
        /// DEPRECATED. Is the projection in the northern hemisphere or the southern hemisphere. 
        /// </summary>
        [Obsolete()]
        [XmlElement("hemisphere")]
        public HemisphereList? Hemisphere {
            get {
                return hemisphereField;
            } 
            set { 
                hemisphereField = value;
                this.HemisphereSpecified = true;
            }
        }

        private HemisphereList? hemisphereField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean HemisphereSpecified { get; set; }
        /// <summary>
        /// DEPRECATED. Description of item and details. 
        /// </summary>
        [Obsolete()]
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// DEPRECATED. Parameter describing the user-defined projection. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.
        /// </summary>
        [Obsolete()]
        [XmlElement("parameter")]
        public List<IndexedObject> PluggedAndAbandonedrameter { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the indexedObject xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="indexedObject", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the indexedObject xsd type.")]
    public partial class IndexedObject : Object 
    {
        public IndexedObject() {}
        public IndexedObject(String value, String uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        public override string ToString()
        {
            return Value + " " + Uom;
        }

		
        [XmlAttribute("index")]
        public Int16 Index { get; set; }
		
        [XmlAttribute("name")]
        public String Name { get; set; }
		
        [XmlAttribute("uom")]
        public String Uom { get; set; }
		
        [XmlAttribute("description")]
        public String Description { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    /// <summary>
    /// WITSML - Wellbore Geometry Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wbGeometry", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Wellbore Geometry Component Schema ")]
    public partial class StandAloneWellboreGeometry : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the wellbore geometry. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore geometry. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Time report generated. 
        /// </summary>
        [XmlElement("dTimReport")]
        public DateTime? DateTimeReport { get; set; }
        /// <summary>
        /// Measured depth at bottom. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// Air gap. 
        /// </summary>
        [XmlElement("gapAir")]
        public LengthMeasure GapAir { get; set; }
        /// <summary>
        /// Water depth. 
        /// </summary>
        [XmlElement("depthWaterMean")]
        public LengthMeasure DepthWaterMean { get; set; }
		/// <summary>
        /// Wellbore geometry section object. 
        /// </summary>
        [XmlElement("wbGeometrySection")]
        public List<WellboreGeometrySection> WellboreGeometrySection { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Wellbore Geometry Component Schema. This defines the "fixed" components in a wellbore. It does not define the "transient" drilling strings or the "hanging" production components. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wbGeometrySection", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Wellbore Geometry Component Schema. This defines the fixed components in a wellbore. It does not define the transient drilling strings or the hanging production components. ")]
    public partial class WellboreGeometrySection : Object 
    {

        /// <summary>
        /// Type of fixed component. 
        /// </summary>
        [XmlElement("typeHoleCasing")]
        public HoleCasingType? TypeHoleCAsing {
            get {
                return typeHoleCasingField;
            } 
            set { 
                typeHoleCasingField = value;
                this.TypeHoleCAsingSpecified = true;
            }
        }

        private HoleCasingType? typeHoleCasingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeHoleCAsingSpecified { get; set; }
        /// <summary>
        /// Measured depth at Top of Interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at bottom of the section. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// True vertical depth at top of the section. 
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// True vertical depth at bottom of the section. 
        /// </summary>
        [XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom { get; set; }
        /// <summary>
        /// Inner diameter. 
        /// </summary>
        [XmlElement("idSection")]
        public LengthMeasure InnerDiameterSection { get; set; }
        /// <summary>
        /// Outer diameter - Only for casings and risers. 
        /// </summary>
        [XmlElement("odSection")]
        public LengthMeasure OuterDiameterSection { get; set; }
        /// <summary>
        /// Weight per unit length for casing sections. 
        /// </summary>
        [XmlElement("wtPerLen")]
        public MassPerLengthMeasure WeightPerLen { get; set; }
        /// <summary>
        /// Material grade for the tubular section. 
        /// </summary>
        [XmlElement("grade")]
        public String Grade { get; set; }
        /// <summary>
        /// Curved conductor? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("curveConductor")]
        public Boolean? CurveConductor {
            get {
                return curveConductorField;
            } 
            set { 
                curveConductorField = value;
                this.CurveConductorSpecified = true;
            }
        }

        private Boolean? curveConductorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CurveConductorSpecified { get; set; }
        /// <summary>
        /// Maximum diameter that can pass through. 
        /// </summary>
        [XmlElement("diaDrift")]
        public LengthMeasure DiaDrift { get; set; }
        /// <summary>
        /// Friction factor. 
        /// </summary>
        [XmlElement("factFric")]
        public Double? FactFric {
            get {
                return factFricField;
            } 
            set { 
                factFricField = value;
                this.FactFricSpecified = true;
            }
        }

        private Double? factFricField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FactFricSpecified { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rotary Steerable Tool Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rotarySteerableTool", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Rotary Steerable Tool Component Schema ")]
    public partial class RotarySteerableTool : Object 
    {

        /// <summary>
        /// Method used to direct the deviation of the trajectory: PointBit or PushBit.
        /// </summary>
        [XmlElement("deflectionMethod")]
        public DeflectionMethod? DeflectionMethod { get; set; }
        /// <summary>
        /// Used with PointTheBit type RSS tools, describes the angle of the bit.
        /// </summary>
        [XmlElement("bendAngle")]
        public PlaneAngleMeasure BendAngle {
            get {
                return bendAngleField;
            } 
            set { 
                if (bendOffsetFieldSpecified) throw new Exception("Cannot set property BendAngle when property BendOffset is already set");
                bendAngleField = value;
                bendAngleFieldSpecified = true;
            }
        }

        private PlaneAngleMeasure bendAngleField; 
        private bool bendAngleFieldSpecified = false; 

        /// <summary>
        /// Offset from bottom connection to bend.
        /// </summary>
        [XmlElement("bendOffset")]
        public LengthMeasure BendOffset {
            get {
                return bendOffsetField;
            } 
            set { 
                if (bendAngleFieldSpecified) throw new Exception("Cannot set property BendOffset when property BendAngle is already set");
                bendOffsetField = value;
                bendOffsetFieldSpecified = true;
            }
        }

        private LengthMeasure bendOffsetField; 
        private bool bendOffsetFieldSpecified = false; 


        /// <summary>
        /// Minimum size of hole in which the tool can operate.
        /// </summary>
        [XmlElement("holeSizeMn")]
        public LengthMeasure HoleSizeMin { get; set; }
        /// <summary>
        /// Maximum size of hole in which the tool can operate.
        /// </summary>
        [XmlElement("holeSizeMx")]
        public LengthMeasure HoleSizeMax { get; set; }
        /// <summary>
        /// Maximum weight on the bit.
        /// </summary>
        [XmlElement("wobMx")]
        public ForceMeasure WobMax { get; set; }
        /// <summary>
        /// Suggested operating speed.
        /// </summary>
        [XmlElement("operatingSpeed")]
        public AnglePerTimeMeasure OperatingSpeed { get; set; }
        /// <summary>
        /// Maximum rotation speed.
        /// </summary>
        [XmlElement("speedMx")]
        public AnglePerTimeMeasure SpeedMax { get; set; }
        /// <summary>
        /// Minimum flow rate for tool operation.
        /// </summary>
        [XmlElement("flowRateMn")]
        public VolumeFlowRateMeasure FlowRateMin { get; set; }
        /// <summary>
        /// Maximum flow rate for tool operation.
        /// </summary>
        [XmlElement("flowRateMx")]
        public VolumeFlowRateMeasure FlowRateMax { get; set; }
        /// <summary>
        /// Minimum flow rate for programming tool.
        /// </summary>
        [XmlElement("downLinkFlowRateMn")]
        public VolumeFlowRateMeasure DownLinkFlowRateMin { get; set; }
        /// <summary>
        /// Maximum flow rate for programming tool.
        /// </summary>
        [XmlElement("downLinkFlowRateMx")]
        public VolumeFlowRateMeasure DownLinkFlowRateMax { get; set; }
        /// <summary>
        /// Pressure drop across tool.
        /// </summary>
        [XmlElement("pressLossFact")]
        public Double? PressLossFact {
            get {
                return pressLossFactField;
            } 
            set { 
                pressLossFactField = value;
                this.PressLossFactSpecified = true;
            }
        }

        private Double? pressLossFactField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PressLossFactSpecified { get; set; }
        /// <summary>
        /// The number of contact pads.
        /// </summary>
        [XmlElement("padCount")]
        public Int16? PluggedAndAbandoneddCount {
            get {
                return padCountField;
            } 
            set { 
                padCountField = value;
                this.PluggedAndAbandoneddCountSpecified = true;
            }
        }

        private Int16? padCountField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PluggedAndAbandoneddCountSpecified { get; set; }
        /// <summary>
        /// Length of contact pad.
        /// </summary>
        [XmlElement("padLen")]
        public LengthMeasure PluggedAndAbandoneddLen { get; set; }
        /// <summary>
        /// Width of contact pad.
        /// </summary>
        [XmlElement("padWidth")]
        public LengthMeasure PluggedAndAbandoneddWidth { get; set; }
        /// <summary>
        /// Offset from bottom of pad to bottom connector.
        /// </summary>
        [XmlElement("padOffset")]
        public LengthMeasure PluggedAndAbandoneddOffset { get; set; }
        /// <summary>
        /// Outside diameter of tool when pads are activated.
        /// </summary>
        [XmlElement("openPadOd")]
        public LengthMeasure OpenPluggedAndAbandoneddOuterDiameter { get; set; }
        /// <summary>
        /// Outiside diameter of tool when pads are closed.
        /// </summary>
        [XmlElement("closePadOd")]
        public LengthMeasure ClosePluggedAndAbandoneddOuterDiameter { get; set; }
		/// <summary>
        /// A sensor.
        /// </summary>
        [XmlElement("sensor")]
        public List<Sensor> Sensor { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Sensor Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_sensor", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Tubular Sensor Component Schema")]
    public partial class Sensor : Object 
    {

        /// <summary>
        /// Type from POSC. 
        /// </summary>
        [XmlElement("typeMeasurement")]
        public MeasurementType? TypeMeasurement {
            get {
                return typeMeasurementField;
            } 
            set { 
                typeMeasurementField = value;
                this.TypeMeasurementSpecified = true;
            }
        }

        private MeasurementType? typeMeasurementField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeMeasurementSpecified { get; set; }
        /// <summary>
        /// Offset from bottom of measurement while drilling tool. 
        /// </summary>
        [XmlElement("offsetBot")]
        public LengthMeasure OffsetBot { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Hole Opener Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_holeOpener", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Hole Opener Component Schema")]
    public partial class HoleOpener : Object 
    {

        /// <summary>
        /// Under reamer or fixed blade. 
        /// </summary>
        [XmlElement("typeHoleOpener")]
        public HoleOpenerType? TypeHoleOpener {
            get {
                return typeHoleOpenerField;
            } 
            set { 
                typeHoleOpenerField = value;
                this.TypeHoleOpenerSpecified = true;
            }
        }

        private HoleOpenerType? typeHoleOpenerField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeHoleOpenerSpecified { get; set; }
        /// <summary>
        /// Number of cutters. 
        /// </summary>
        [XmlElement("numCutter")]
        public Int16? NumCutter {
            get {
                return numCutterField;
            } 
            set { 
                numCutterField = value;
                this.NumCutterSpecified = true;
            }
        }

        private Int16? numCutterField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumCutterSpecified { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Diameter of the reamer. 
        /// </summary>
        [XmlElement("diaHoleOpener")]
        public LengthMeasure DiaHoleOpener { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Bend Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bend", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Tubular Bend Component Schema.")]
    public partial class Bend : Object 
    {

        /// <summary>
        /// Angle of the bend. 
        /// </summary>
        [XmlElement("angle")]
        public PlaneAngleMeasure Angle { get; set; }
        /// <summary>
        /// Distance of bend from bottom of component. 
        /// </summary>
        [XmlElement("distBendBot")]
        public LengthMeasure DistBendBot { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Stablizer Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stabilizer", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Stablizer Component Schema")]
    public partial class Stabilizer : Object 
    {

        /// <summary>
        /// Length of blade. 
        /// </summary>
        [XmlElement("lenBlade")]
        public LengthMeasure LenBlade { get; set; }
        /// <summary>
        /// Gauge Length of blade. That is, the length of the blade which measures at the odBladeMx.
        /// </summary>
        [XmlElement("lenBladeGauge")]
        public LengthMeasure LenBladeGauge { get; set; }
        /// <summary>
        /// Maximum outer diameter of blade. 
        /// </summary>
        [XmlElement("odBladeMx")]
        public LengthMeasure OuterDiameterBladeMax { get; set; }
        /// <summary>
        /// Minimum outer diameter of blade. 
        /// </summary>
        [XmlElement("odBladeMn")]
        public LengthMeasure OuterDiameterBladeMin { get; set; }
        /// <summary>
        /// Distance of blade bottom from bottom of component. 
        /// </summary>
        [XmlElement("distBladeBot")]
        public LengthMeasure DistBladeBot { get; set; }
        /// <summary>
        /// Blade shape. 
        /// </summary>
        [XmlElement("shapeBlade")]
        public BladeShapeType? ShapeBlade {
            get {
                return shapeBladeField;
            } 
            set { 
                shapeBladeField = value;
                this.ShapeBladeSpecified = true;
            }
        }

        private BladeShapeType? shapeBladeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ShapeBladeSpecified { get; set; }
        /// <summary>
        /// Friction factor. 
        /// </summary>
        [XmlElement("factFric")]
        public Double? FactFric {
            get {
                return factFricField;
            } 
            set { 
                factFricField = value;
                this.FactFricSpecified = true;
            }
        }

        private Double? factFricField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FactFricSpecified { get; set; }
        /// <summary>
        /// Blade type. 
        /// </summary>
        [XmlElement("typeBlade")]
        public BladeType? TypeBlade {
            get {
                return typeBladeField;
            } 
            set { 
                typeBladeField = value;
                this.TypeBladeSpecified = true;
            }
        }

        private BladeType? typeBladeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeBladeSpecified { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Motor Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_motor", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Tubular Motor Component Schema")]
    public partial class Motor : Object 
    {

        /// <summary>
        /// Tool offset from bottom. 
        /// </summary>
        [XmlElement("offsetTool")]
        public LengthMeasure OffsetTool { get; set; }
        /// <summary>
        /// Pressure loss factor. 
        /// </summary>
        [XmlElement("presLossFact")]
        public Double? PresLossFact {
            get {
                return presLossFactField;
            } 
            set { 
                presLossFactField = value;
                this.PresLossFactSpecified = true;
            }
        }

        private Double? presLossFactField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PresLossFactSpecified { get; set; }
        /// <summary>
        /// Minimum flow rate. 
        /// </summary>
        [XmlElement("flowrateMn")]
        public VolumeFlowRateMeasure FlowrateMin { get; set; }
        /// <summary>
        /// Maximum flow rate. 
        /// </summary>
        [XmlElement("flowrateMx")]
        public VolumeFlowRateMeasure FlowrateMax { get; set; }
        /// <summary>
        /// Diameter of rotor at nozzle. 
        /// </summary>
        [XmlElement("diaRotorNozzle")]
        public LengthMeasure DiaRotorNozzle { get; set; }
        /// <summary>
        /// Clearance inside bearing box. 
        /// </summary>
        [XmlElement("clearanceBearBox")]
        public LengthMeasure ClearanceBearBox { get; set; }
        /// <summary>
        /// Number of rotor lobes. 
        /// </summary>
        [XmlElement("lobesRotor")]
        public Int16? LobesRotor {
            get {
                return lobesRotorField;
            } 
            set { 
                lobesRotorField = value;
                this.LobesRotorSpecified = true;
            }
        }

        private Int16? lobesRotorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LobesRotorSpecified { get; set; }
        /// <summary>
        /// Number of stator lobes. 
        /// </summary>
        [XmlElement("lobesStator")]
        public Int16? LobesStator {
            get {
                return lobesStatorField;
            } 
            set { 
                lobesStatorField = value;
                this.LobesStatorSpecified = true;
            }
        }

        private Int16? lobesStatorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LobesStatorSpecified { get; set; }
        /// <summary>
        /// Type of bearing. 
        /// </summary>
        [XmlElement("typeBearing")]
        public BearingType? TypeBearing {
            get {
                return typeBearingField;
            } 
            set { 
                typeBearingField = value;
                this.TypeBearingSpecified = true;
            }
        }

        private BearingType? typeBearingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeBearingSpecified { get; set; }
        /// <summary>
        /// Maximum operating temperature. 
        /// </summary>
        [XmlElement("tempOpMx")]
        public ThermodynamicTemperatureMeasure TempOperatingMax { get; set; }
        /// <summary>
        /// Is rotor catcher present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("rotorCatcher")]
        public Boolean? RotorCatcher {
            get {
                return rotorCatcherField;
            } 
            set { 
                rotorCatcherField = value;
                this.RotorCatcherSpecified = true;
            }
        }

        private Boolean? rotorCatcherField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RotorCatcherSpecified { get; set; }
        /// <summary>
        /// Is dump valve present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("dumpValve")]
        public Boolean? DumpValve {
            get {
                return dumpValveField;
            } 
            set { 
                dumpValveField = value;
                this.DumpValveSpecified = true;
            }
        }

        private Boolean? dumpValveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DumpValveSpecified { get; set; }
        /// <summary>
        /// Nozzle diameter. 
        /// </summary>
        [XmlElement("diaNozzle")]
        public LengthMeasure DiaNozzle { get; set; }
        /// <summary>
        /// Is motor rotatable? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("rotatable")]
        public Boolean? Rotatable {
            get {
                return rotatableField;
            } 
            set { 
                rotatableField = value;
                this.RotatableSpecified = true;
            }
        }

        private Boolean? rotatableField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RotatableSpecified { get; set; }
        /// <summary>
        /// Minimum bend angle setting. 
        /// </summary>
        [XmlElement("bendSettingsMn")]
        public PlaneAngleMeasure BendSettingsMin { get; set; }
        /// <summary>
        /// Maximum bend angle setting. 
        /// </summary>
        [XmlElement("bendSettingsMx")]
        public PlaneAngleMeasure BendSettingsMax { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular MWD Tool Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mwdTool", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Tubular MWD Tool Component Schema")]
    public partial class MwdTool : Object 
    {

        /// <summary>
        /// Minimum flow rate. 
        /// </summary>
        [XmlElement("flowrateMn")]
        public VolumeFlowRateMeasure FlowrateMin { get; set; }
        /// <summary>
        /// Maximum flow rate. 
        /// </summary>
        [XmlElement("flowrateMx")]
        public VolumeFlowRateMeasure FlowrateMax { get; set; }
        /// <summary>
        /// Maximum Temperature. 
        /// </summary>
        [XmlElement("tempMx")]
        public ThermodynamicTemperatureMeasure TempMax { get; set; }
        /// <summary>
        /// Equivalent inner diameter. 
        /// </summary>
        [XmlElement("idEquv")]
        public LengthMeasure IdEquv { get; set; }
		/// <summary>
        /// Sensor object. 
        /// </summary>
        [XmlElement("sensor")]
        public List<Sensor> Sensor { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Jar Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_jar", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Tubular Jar Component Schema")]
    public partial class Jar : Object 
    {

        /// <summary>
        /// Up set force. 
        /// </summary>
        [XmlElement("forUpSet")]
        public ForceMeasure ForUpSet { get; set; }
        /// <summary>
        /// Down set force. 
        /// </summary>
        [XmlElement("forDownSet")]
        public ForceMeasure ForDownSet { get; set; }
        /// <summary>
        /// Up trip force. 
        /// </summary>
        [XmlElement("forUpTrip")]
        public ForceMeasure ForUpTrip { get; set; }
        /// <summary>
        /// Down trip force. 
        /// </summary>
        [XmlElement("forDownTrip")]
        public ForceMeasure ForDownTrip { get; set; }
        /// <summary>
        /// Pump open force. 
        /// </summary>
        [XmlElement("forPmpOpen")]
        public ForceMeasure ForPmpOpen { get; set; }
        /// <summary>
        /// Seal friction force. 
        /// </summary>
        [XmlElement("forSealFric")]
        public ForceMeasure ForSealFric { get; set; }
        /// <summary>
        /// The kind of jar. 
        /// </summary>
        [XmlElement("typeJar")]
        public JarType? TypeJar {
            get {
                return typeJarField;
            } 
            set { 
                typeJarField = value;
                this.TypeJarSpecified = true;
            }
        }

        private JarType? typeJarField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeJarSpecified { get; set; }
        /// <summary>
        /// The jar action. 
        /// </summary>
        [XmlElement("jarAction")]
        public JarAction? JarAction {
            get {
                return jarActionField;
            } 
            set { 
                jarActionField = value;
                this.JarActionSpecified = true;
            }
        }

        private JarAction? jarActionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean JarActionSpecified { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Tubular Connection Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_connection", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Tubular Connection Component Schema ")]
    public partial class Connection : Object 
    {

        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
        [XmlElement("id")]
        public LengthMeasure InnerDiameter { get; set; }
        /// <summary>
        /// Outside diameter of the body of the item. 
        /// </summary>
        [XmlElement("od")]
        public LengthMeasure OuterDiameter { get; set; }
        /// <summary>
        /// Length of the item. 
        /// </summary>
        [XmlElement("len")]
        public LengthMeasure Len { get; set; }
        /// <summary>
        /// Thread type from API RP7G, 5CT. 
        /// </summary>
        [XmlElement("typeThread")]
        public String TypeThread { get; set; }
        /// <summary>
        /// Thread size. 
        /// </summary>
        [XmlElement("sizeThread")]
        public LengthMeasure SizeThread { get; set; }
        /// <summary>
        /// Yield stress of steel - worn stress. 
        /// </summary>
        [XmlElement("tensYield")]
        public PressureMeasure TensYield { get; set; }
        /// <summary>
        /// Torque at which yield occurs.
        /// </summary>
        [XmlElement("tqYield")]
        public MomentOfForceMeasure TorqueYield { get; set; }
        /// <summary>
        /// Where connected. 
        /// </summary>
        [XmlElement("position")]
        public ConnectionPosition? Position {
            get {
                return positionField;
            } 
            set { 
                positionField = value;
                this.PositionSpecified = true;
            }
        }

        private ConnectionPosition? positionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PositionSpecified { get; set; }
        /// <summary>
        /// For bending stiffness ratio. 
        /// </summary>
        [XmlElement("criticalCrossSection")]
        public AreaMeasure CriticalCrossSection { get; set; }
        /// <summary>
        /// Leak pressure rating. 
        /// </summary>
        [XmlElement("presLeak")]
        public PressureMeasure PresLeak { get; set; }
        /// <summary>
        /// Make up torque. 
        /// </summary>
        [XmlElement("tqMakeup")]
        public MomentOfForceMeasure TorqueMakeup { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Nozzle Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_nozzle", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Nozzle Component Schema")]
    public partial class Nozzle : Object 
    {

        /// <summary>
        /// Index if this is an indexed object. 
        /// </summary>
        [XmlElement("index")]
        public Int16? Index {
            get {
                return indexField;
            } 
            set { 
                indexField = value;
                this.IndexSpecified = true;
            }
        }

        private Int16? indexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IndexSpecified { get; set; }
        /// <summary>
        /// Nozzle diameter. 
        /// </summary>
        [XmlElement("diaNozzle")]
        public LengthMeasure DiaNozzle { get; set; }
        /// <summary>
        /// Nozzle type. 
        /// </summary>
        [XmlElement("typeNozzle")]
        public NozzleType? TypeNozzle {
            get {
                return typeNozzleField;
            } 
            set { 
                typeNozzleField = value;
                this.TypeNozzleSpecified = true;
            }
        }

        private NozzleType? typeNozzleField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeNozzleSpecified { get; set; }
        /// <summary>
        /// Length of the nozzle. 
        /// </summary>
        [XmlElement("len")]
        public LengthMeasure Len { get; set; }
        /// <summary>
        /// Nozzle orientation. 
        /// </summary>
        [XmlElement("orientation")]
        public String Orientation { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - tubular component - component schema. The order of the components in the XML instance is significant. The components are list in the order that they enter the hole. That is, the first component is closest to the bit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_tubularComponent", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - tubular component - component schema. The order of the components in the XML instance is significant. The components are list in the order that they enter the hole. That is, the first component is closest to the bit.")]
    public partial class TubularComponent : Object 
    {

        /// <summary>
        /// Type of component. 
        /// </summary>
        [XmlElement("typeTubularComp")]
        public TubularComponentType? TypeTubularComp { get; set; }
        /// <summary>
        /// The sequence within which the components entered the hole. That is, a sequence number of 1 entered first, 2 entered next, etc. 
        /// </summary>
        [XmlElement("sequence")]
        public Int16? Sequence { get; set; }
        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
        [XmlElement("id")]
        public LengthMeasure InnerDiameter { get; set; }
        /// <summary>
        /// Outside diameter of the body of the item. 
        /// </summary>
        [XmlElement("od")]
        public LengthMeasure OuterDiameter { get; set; }
        /// <summary>
        /// Maximum outside diameter.
        /// </summary>
        [XmlElement("odMx")]
        public LengthMeasure OuterDiameterMax { get; set; }
        /// <summary>
        /// Length of the item. 
        /// </summary>
        [XmlElement("len")]
        public LengthMeasure Len { get; set; }
        /// <summary>
        /// Average length of joint for tubulars. 
        /// </summary>
        [XmlElement("lenJointAv")]
        public LengthMeasure LenJointAverage { get; set; }
        /// <summary>
        /// Number of joints per stand of tubular. 
        /// </summary>
        [XmlElement("numJointStand")]
        public Int16? NumJointStand {
            get {
                return numJointStandField;
            } 
            set { 
                numJointStandField = value;
                this.NumJointStandSpecified = true;
            }
        }

        private Int16? numJointStandField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumJointStandSpecified { get; set; }
        /// <summary>
        /// Weight per unit length. 
        /// </summary>
        [XmlElement("wtPerLen")]
        public MassPerLengthMeasure WeightPerLen { get; set; }
        /// <summary>
        /// Material grade for the tubular section. 
        /// </summary>
        [XmlElement("grade")]
        public String Grade { get; set; }
        /// <summary>
        /// Minimum pass through diameter. 
        /// </summary>
        [XmlElement("odDrift")]
        public LengthMeasure OuterDiameterDrift { get; set; }
        /// <summary>
        /// Yield stress of steel - worn stress. 
        /// </summary>
        [XmlElement("tensYield")]
        public PressureMeasure TensYield { get; set; }
        /// <summary>
        /// Torque at which yield occurs.
        /// </summary>
        [XmlElement("tqYield")]
        public MomentOfForceMeasure TorqueYield { get; set; }
        /// <summary>
        /// Fatigue endurance limit. 
        /// </summary>
        [XmlElement("stressFatig")]
        public PressureMeasure StressFatig { get; set; }
        /// <summary>
        /// Fish neck length. 
        /// </summary>
        [XmlElement("lenFishneck")]
        public LengthMeasure LenFishneck { get; set; }
        /// <summary>
        /// Fish neck inside diameter. 
        /// </summary>
        [XmlElement("idFishneck")]
        public LengthMeasure InnerDiameterFishneck { get; set; }
        /// <summary>
        /// Fish neck outside diameter. 
        /// </summary>
        [XmlElement("odFishneck")]
        public LengthMeasure OuterDiameterFishneck { get; set; }
        /// <summary>
        /// Closed end displacement. 
        /// </summary>
        [XmlElement("disp")]
        public VolumeMeasure Disp { get; set; }
        /// <summary>
        /// Burst pressure. 
        /// </summary>
        [XmlElement("presBurst")]
        public PressureMeasure PresBurst { get; set; }
        /// <summary>
        /// Collapse pressure. 
        /// </summary>
        [XmlElement("presCollapse")]
        public PressureMeasure PresCollapse { get; set; }
        /// <summary>
        /// Service class. 
        /// </summary>
        [XmlElement("classService")]
        public String ClassService { get; set; }
        /// <summary>
        /// Wall thickness wear (commonly in percent). 
        /// </summary>
        [XmlElement("wearWall")]
        public LengthPerLengthMeasure WearWall { get; set; }
        /// <summary>
        /// Wall thickness. 
        /// </summary>
        [XmlElement("thickWall")]
        public LengthMeasure ThickWall { get; set; }
        /// <summary>
        /// Box/Pin configuration. 
        /// </summary>
        [XmlElement("configCon")]
        public BoxPinConfig? ConfigCon {
            get {
                return configConField;
            } 
            set { 
                configConField = value;
                this.ConfigConSpecified = true;
            }
        }

        private BoxPinConfig? configConField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ConfigConSpecified { get; set; }
        /// <summary>
        /// Bending stiffness of tubular. 
        /// </summary>
        [XmlElement("bendStiffness")]
        public ForcePerLengthMeasure BendStiffness { get; set; }
        /// <summary>
        /// Axial stiffness of tubular. 
        /// </summary>
        [XmlElement("axialStiffness")]
        public ForcePerLengthMeasure AxialStiffness { get; set; }
        /// <summary>
        /// Torsional stiffness of tubular. 
        /// </summary>
        [XmlElement("torsionalStiffness")]
        public ForcePerLengthMeasure TorsionalStiffness { get; set; }
        /// <summary>
        /// Type of material. 
        /// </summary>
        [XmlElement("typeMaterial")]
        public MaterialType? TypeMaterial {
            get {
                return typeMaterialField;
            } 
            set { 
                typeMaterialField = value;
                this.TypeMaterialSpecified = true;
            }
        }

        private MaterialType? typeMaterialField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeMaterialSpecified { get; set; }
        /// <summary>
        /// Maximum dogleg severity. 
        /// </summary>
        [XmlElement("doglegMx")]
        public AnglePerLengthMeasure DoglegMax { get; set; }
        /// <summary>
        /// Name of vendor. 
        /// </summary>
        [XmlElement("vendor")]
        public String Vendor { get; set; }
        /// <summary>
        /// Component name from manufacturer. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
		/// <summary>
        /// An identification tag for the component tool. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
        /// <summary>
        /// Bit object. 
        /// </summary>
        [XmlElement("bitRecord")]
        public BitRecord BitRecord { get; set; }
        /// <summary>
        /// Total area of nozzles. 
        /// </summary>
        [XmlElement("areaNozzleFlow")]
        public AreaMeasure AreaNozzleFlow { get; set; }
		/// <summary>
        /// Set of nozzle objects. Examples of items that have nozzles are bit, hole opener, circulation sub, jetting sub, pressure relief sub. 
        /// </summary>
        [XmlElement("nozzle")]
        public List<Nozzle> Nozzle { get; set; }
		/// <summary>
        /// Connection object. 
        /// </summary>
        [XmlElement("connection")]
        public List<Connection> Connection { get; set; }
        /// <summary>
        /// Jar object. 
        /// </summary>
        [XmlElement("jar")]
        public Jar Jar { get; set; }
        /// <summary>
        /// MWD (measurement while drilling) tool object. 
        /// </summary>
        [XmlElement("mwdTool")]
        public MwdTool MwdTool { get; set; }
        /// <summary>
        /// Motor object. 
        /// </summary>
        [XmlElement("motor")]
        public Motor Motor { get; set; }
		/// <summary>
        /// Stabilizer object. 
        /// </summary>
        [XmlElement("stabilizer")]
        public List<Stabilizer> Stabilizer { get; set; }
		/// <summary>
        /// Bend object. 
        /// </summary>
        [XmlElement("bend")]
        public List<Bend> Bend { get; set; }
        /// <summary>
        /// Hole opener object. 
        /// </summary>
        [XmlElement("holeOpener")]
        public HoleOpener HoleOpener { get; set; }
        /// <summary>
        /// Rotary Steerable Tool. 
        /// </summary>
        [XmlElement("rotarySteerableTool")]
        public RotarySteerableTool RotarySteerableTool { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Equipment NameTag Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_nameTag", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Equipment NameTag Schema")]
    public partial class NameTag : Object 
    {

        /// <summary>
        /// The physical identification string of the equipment tag.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The format or encoding specification of the equipment tag. The tag may contain may different pieces of information and knowledge of that information is inherent in the specification. The "identification string" is a mandatory part of the information in a tag.
        /// </summary>
        [XmlElement("numberingScheme")]
        public NameTagNumberingScheme NumberingScheme { get; set; }
        /// <summary>
        /// Identifies the general type of identifier on an item. If multiple identifiers exist on an item, a separate description set for each identifier should be created. For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling. The barcode label may in turn be an RFID equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label' - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label' - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.
        /// </summary>
        [XmlElement("technology")]
        public NameTagTechnology Technology {
            get {
                return technologyField;
            } 
            set { 
                technologyField = value;
                this.TechnologySpecified = true;
            }
        }

        private NameTagTechnology technologyField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TechnologySpecified { get; set; }
        /// <summary>
        /// An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item. This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener. 'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item. Most non-downhole tools will use either 'body', 'other' or not specified as the location tends to lose value with smaller or non threaded items.
        /// </summary>
        [XmlElement("location")]
        public NameTagLocation Location {
            get {
                return locationField;
            } 
            set { 
                locationField = value;
                this.LocationSpecified = true;
            }
        }

        private NameTagLocation locationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LocationSpecified { get; set; }
        /// <summary>
        /// When the tag was installed in or on the item. 
        /// </summary>
        [XmlElement("installationDate")]
        public DateTime? InstallationDate {
            get {
                return installationDateField;
            } 
            set { 
                installationDateField = value;
                this.InstallationDateSpecified = true;
            }
        }

        private DateTime? installationDateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean InstallationDateSpecified { get; set; }
        /// <summary>
        /// The name of the company that installed the tag. 
        /// </summary>
        [XmlElement("installationCompany")]
        public String InstallationCompany { get; set; }
        /// <summary>
        /// Reference to a manufacturers or installers installation description, code, or method. 
        /// </summary>
        [XmlElement("mountingCode")]
        public String MountingCode { get; set; }
        /// <summary>
        /// A comment or remark about the tag.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Bit Record Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bitRecord", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Bit Record Component Schema.")]
    public partial class BitRecord : Object 
    {

        /// <summary>
        /// Bit number and rerun number e.g. "4.1" for the first rerun of bit 4. 
        /// </summary>
        [XmlElement("numBit")]
        public String NumBit { get; set; }
        /// <summary>
        /// Diameter of drilled hole. 
        /// </summary>
        [XmlElement("diaBit")]
        public LengthMeasure DiaBit { get; set; }
        /// <summary>
        /// Minimum hole or tubing which bit will pass through (for bi-center bits). 
        /// </summary>
        [XmlElement("diaPassThru")]
        public LengthMeasure DiaPluggedAndAbandonedssThru { get; set; }
        /// <summary>
        /// Diameter of pilot bit (for bi-center bits). 
        /// </summary>
        [XmlElement("diaPilot")]
        public LengthMeasure DiaPilot { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Type of bit. 
        /// </summary>
        [XmlElement("typeBit")]
        public BitType? TypeBit {
            get {
                return typeBitField;
            } 
            set { 
                typeBitField = value;
                this.TypeBitSpecified = true;
            }
        }

        private BitType? typeBitField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeBitSpecified { get; set; }
        /// <summary>
        /// Bit cost in local currency. 
        /// </summary>
        [XmlElement("cost")]
        public Cost Cost { get; set; }
        /// <summary>
        /// The manufacturers code for the bit. 
        /// </summary>
        [XmlElement("codeMfg")]
        public String CodeMfg { get; set; }
        /// <summary>
        /// IADC bit code. 
        /// </summary>
        [XmlElement("codeIADC")]
        public String CodeIADC { get; set; }
        /// <summary>
        /// Condition of inner tooth rows (inner 2/3 of bit) (0-8). 
        /// </summary>
        [XmlElement("condInitInner")]
        public Int16? CondInitInner {
            get {
                return condInitInnerField;
            } 
            set { 
                condInitInnerField = value;
                this.CondInitInnerSpecified = true;
            }
        }

        private Int16? condInitInnerField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondInitInnerSpecified { get; set; }
        /// <summary>
        /// Condition of outer tooth rows (outer 1/3 of bit) (0-8). 
        /// </summary>
        [XmlElement("condInitOuter")]
        public Int16? CondInitOuter {
            get {
                return condInitOuterField;
            } 
            set { 
                condInitOuterField = value;
                this.CondInitOuterSpecified = true;
            }
        }

        private Int16? condInitOuterField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondInitOuterSpecified { get; set; }
        /// <summary>
        /// Overall dull condition from IADC bit wear 2 character codes. 
        /// </summary>
        [XmlElement("condInitDull")]
        public BitDullCode? CondInitDull {
            get {
                return condInitDullField;
            } 
            set { 
                condInitDullField = value;
                this.CondInitDullSpecified = true;
            }
        }

        private BitDullCode? condInitDullField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondInitDullSpecified { get; set; }
        /// <summary>
        /// Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc). 
        /// </summary>
        [XmlElement("condInitLocation")]
        public String CondInitLocation { get; set; }
        /// <summary>
        /// Condition of bit bearings (integer 0-8 or E, F, N or X)). 
        /// </summary>
        [XmlElement("condInitBearing")]
        public String CondInitBearing { get; set; }
        /// <summary>
        /// Condition of bit gauge in 1/16 of an inch. I = in gauge, else number of 16ths out of gauge. 
        /// </summary>
        [XmlElement("condInitGauge")]
        public String CondInitGauge { get; set; }
        /// <summary>
        /// Other comments on bit condition from IADC list (BitDullCode in standard list). 
        /// </summary>
        [XmlElement("condInitOther")]
        public String CondInitOther { get; set; }
        /// <summary>
        /// Reason bit was pulled from IADC codes. 
        /// </summary>
        [XmlElement("condInitReason")]
        public BitReasonPulled? CondInitReason {
            get {
                return condInitReasonField;
            } 
            set { 
                condInitReasonField = value;
                this.CondInitReasonSpecified = true;
            }
        }

        private BitReasonPulled? condInitReasonField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondInitReasonSpecified { get; set; }
        /// <summary>
        /// Condition of inner tooth rows (inner 2/3 of bit) (0-8). 
        /// </summary>
        [XmlElement("condFinalInner")]
        public Int16? CondFinalInner {
            get {
                return condFinalInnerField;
            } 
            set { 
                condFinalInnerField = value;
                this.CondFinalInnerSpecified = true;
            }
        }

        private Int16? condFinalInnerField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondFinalInnerSpecified { get; set; }
        /// <summary>
        /// Condition of outer tooth rows (outer 1/3 of bit) (0-8). 
        /// </summary>
        [XmlElement("condFinalOuter")]
        public Int16? CondFinalOuter {
            get {
                return condFinalOuterField;
            } 
            set { 
                condFinalOuterField = value;
                this.CondFinalOuterSpecified = true;
            }
        }

        private Int16? condFinalOuterField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondFinalOuterSpecified { get; set; }
        /// <summary>
        /// Overall dull condition from IADC bit wear 2 character codes. 
        /// </summary>
        [XmlElement("condFinalDull")]
        public BitDullCode? CondFinalDull {
            get {
                return condFinalDullField;
            } 
            set { 
                condFinalDullField = value;
                this.CondFinalDullSpecified = true;
            }
        }

        private BitDullCode? condFinalDullField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondFinalDullSpecified { get; set; }
        /// <summary>
        /// Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc). 
        /// </summary>
        [XmlElement("condFinalLocation")]
        public String CondFinalLocation { get; set; }
        /// <summary>
        /// Condition of bit bearings (integer 0-8 or E, F, N or X). 
        /// </summary>
        [XmlElement("condFinalBearing")]
        public String CondFinalBearing { get; set; }
        /// <summary>
        /// Condition of bit gauge in 1/16 of a inch. I = in gauge, else number of 16ths out of gauge. 
        /// </summary>
        [XmlElement("condFinalGauge")]
        public String CondFinalGauge { get; set; }
        /// <summary>
        /// Other comments on bit condition from IADC list (BitDullCode in Standard LISTS). 
        /// </summary>
        [XmlElement("condFinalOther")]
        public String CondFinalOther { get; set; }
        /// <summary>
        /// Reason bit was pulled from IADC codes. 
        /// </summary>
        [XmlElement("condFinalReason")]
        public BitReasonPulled? CondFinalReason {
            get {
                return condFinalReasonField;
            } 
            set { 
                condFinalReasonField = value;
                this.CondFinalReasonSpecified = true;
            }
        }

        private BitReasonPulled? condFinalReasonField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CondFinalReasonSpecified { get; set; }
        /// <summary>
        /// Bit drive type (Motor, rotary table etc). 
        /// </summary>
        [XmlElement("drive")]
        public String Drive { get; set; }
        /// <summary>
        /// N = new, U = used. 
        /// </summary>
        [XmlElement("bitClass")]
        public String BitClass { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
        [XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cost xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cost", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cost xsd type.")]
    public partial class Cost : Object 
    {
        public Cost() {}
        public Cost(Double value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		
        [XmlAttribute("currency")]
        public String Currency { get; set; }
		
        [XmlText]
        public Double Value { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML tubular object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_tubular", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML tubular object.")]
    public partial class Tubular : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the tubular. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the tubular (assembly). 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Type of tubular assembly. 
        /// </summary>
        [XmlElement("typeTubularAssy")]
        public TubularAssembly? TypeTubularAssy { get; set; }
        /// <summary>
        /// Is float valve present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("valveFloat")]
        public Boolean? ValveFloat {
            get {
                return valveFloatField;
            } 
            set { 
                valveFloatField = value;
                this.ValveFloatSpecified = true;
            }
        }

        private Boolean? valveFloatField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ValveFloatSpecified { get; set; }
        /// <summary>
        /// Is nuclear tool present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("sourceNuclear")]
        public Boolean? SourceNuclear {
            get {
                return sourceNuclearField;
            } 
            set { 
                sourceNuclearField = value;
                this.SourceNuclearSpecified = true;
            }
        }

        private Boolean? sourceNuclearField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SourceNuclearSpecified { get; set; }
        /// <summary>
        /// Maximum hole size generated by assembly. 
        /// </summary>
        [XmlElement("diaHoleAssy")]
        public LengthMeasure DiaHoleAssy { get; set; }
		/// <summary>
        /// Container element for the tubular component elements. 
        /// </summary>
        [XmlElement("tubularComponent")]
        public List<TubularComponent> TubularComponent { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_refWellboreTrajectory xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellboreTrajectory", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_refWellboreTrajectory xsd type.")]
    public partial class RefWellboreTrajectory : Object 
    {

        /// <summary>
        /// A pointer to the trajectory within the wellbore.
        /// </summary>
        [XmlElement("trajectoryReference")]
        public RefNameString TrajectoryReference { get; set; }
        /// <summary>
        /// A pointer to the wellbore that contains the trajectoryReference. This is not needed unless the trajectory is outside the context of a common parent wellbore.
        /// </summary>
        [XmlElement("wellboreParent")]
        public RefNameString WellborePluggedAndAbandonedrent { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Trajectory object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_trajectory", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Trajectory object.")]
    public partial class Trajectory : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the trajectory. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the trajectory. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
        [XmlElement("objectGrowing")]
        public Boolean? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set { 
                objectGrowingField = value;
                this.ObjectGrowingSpecified = true;
            }
        }

        private Boolean? objectGrowingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ObjectGrowingSpecified { get; set; }
        /// <summary>
        /// If a trajectory is tied into another trajectory, a pointer to the parent trajectory. The trajectory may be in another wellbore.
        /// </summary>
        [XmlElement("parentTrajectory")]
        public RefWellboreTrajectory PluggedAndAbandonedrentTrajectory { get; set; }
        /// <summary>
        /// Start date and time of trajectory station measurements. Note that this is NOT a server query parameter.
        /// </summary>
        [XmlElement("dTimTrajStart")]
        public DateTime? DateTimeTrajStart {
            get {
                return dTimTrajStartField;
            } 
            set { 
                dTimTrajStartField = value;
                this.DateTimeTrajStartSpecified = true;
            }
        }

        private DateTime? dTimTrajStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeTrajStartSpecified { get; set; }
        /// <summary>
        /// End date and time of trajectory station measurements. Note that this is NOT a server query parameter.
        /// </summary>
        [XmlElement("dTimTrajEnd")]
        public DateTime? DateTimeTrajEnd {
            get {
                return dTimTrajEndField;
            } 
            set { 
                dTimTrajEndField = value;
                this.DateTimeTrajEndSpecified = true;
            }
        }

        private DateTime? dTimTrajEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeTrajEndSpecified { get; set; }
        /// <summary>
        /// Minimum measured depth of this object. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("mdMn")]
        public MeasuredDepthCoord MDMin { get; set; }
        /// <summary>
        /// Maximum measured depth of this object. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("mdMx")]
        public MeasuredDepthCoord MDMax { get; set; }
        /// <summary>
        /// Name of contractor who provided the service.
        /// </summary>
        [XmlElement("serviceCompany")]
        public String ServiceCompany { get; set; }
        /// <summary>
        /// Magnetic declination used to correct a Magnetic North referenced azimuth to a True North azimuth. Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added. Starting value if stations have individual values. 
        /// </summary>
        [XmlElement("magDeclUsed")]
        public PlaneAngleMeasure MagDeclUsed { get; set; }
        /// <summary>
        /// DEPRECATED - use gridConUsed. Grid correction used to correct a survey. Starting value if stations have individual values.
        /// </summary>
        [XmlElement("gridCorUsed")]
        public PlaneAngleMeasure GridCorUsed { get; set; }
        /// <summary>
        /// Magnetic declination used to correct a Magnetic North referenced azimuth to a True North azimuth. Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added. Starting value if stations have individual values.
        /// </summary>
        [XmlElement("gridConUsed")]
        public PlaneAngleMeasure GridConUsed { get; set; }
        /// <summary>
        /// Azimuth used for vertical section plot/computations.
        /// </summary>
        [XmlElement("aziVertSect")]
        public PlaneAngleMeasure AziVertSect { get; set; }
        /// <summary>
        /// Origin north-south used for vertical section plot/computations.
        /// </summary>
        [XmlElement("dispNsVertSectOrig")]
        public LengthMeasure DispNSVertSectOrig { get; set; }
        /// <summary>
        /// Origin east-west used for vertical section plot/computations.
        /// </summary>
        [XmlElement("dispEwVertSectOrig")]
        public LengthMeasure DispEWVertSectOrig { get; set; }
        /// <summary>
        /// True ("true" or "1") indicates that this trajectory is definitive for this wellbore. False ("false" or "0") or not given indicates otherwise. There can only be one trajectory per wellbore with definitive=true and it must define the geometry of the whole wellbore (surface to bottom). The definitive trajectory may represent a composite of information in many other trajectories. A query requesting a subset of the possible information can provide a simplistic view of the geometry of the wellbore.
        /// </summary>
        [XmlElement("definitive")]
        public Boolean? Definitive {
            get {
                return definitiveField;
            } 
            set { 
                definitiveField = value;
                this.DefinitiveSpecified = true;
            }
        }

        private Boolean? definitiveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DefinitiveSpecified { get; set; }
        /// <summary>
        /// Is trajectory a result of a memory dump from a tool? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("memory")]
        public Boolean? Memory {
            get {
                return memoryField;
            } 
            set { 
                memoryField = value;
                this.MemorySpecified = true;
            }
        }

        private Boolean? memoryField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MemorySpecified { get; set; }
        /// <summary>
        /// Is trajectory a final or intermediate/preliminary? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("finalTraj")]
        public Boolean? FinalTraj {
            get {
                return finalTrajField;
            } 
            set { 
                finalTrajField = value;
                this.FinalTrajSpecified = true;
            }
        }

        private Boolean? finalTrajField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FinalTrajSpecified { get; set; }
        /// <summary>
        /// Specifies the definition of north. While this is optional because of legacy data, it is strongly recommended that this always be specified.
        /// </summary>
        [XmlElement("aziRef")]
        public AziRef? AziRef {
            get {
                return aziRefField;
            } 
            set { 
                aziRefField = value;
                this.AziRefSpecified = true;
            }
        }

        private AziRef? aziRefField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AziRefSpecified { get; set; }
		/// <summary>
        /// Container element for trajectory station elements. This is an API "data-node" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("trajectoryStation")]
        public List<TrajectoryStation> TrajectoryStation { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Trajectory Station Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_trajectoryStation", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Trajectory Station Component Schema")]
    public partial class TrajectoryStation : Object 
    {

        /// <summary>
        /// A pointer to the intended target of this station. 
        /// </summary>
        [XmlElement("target")]
        public RefNameString Target { get; set; }
        /// <summary>
        /// Date and time the station was measured or created. 
        /// </summary>
        [XmlElement("dTimStn")]
        public DateTime? DateTimeStn {
            get {
                return dTimStnField;
            } 
            set { 
                dTimStnField = value;
                this.DateTimeStnSpecified = true;
            }
        }

        private DateTime? dTimStnField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStnSpecified { get; set; }
        /// <summary>
        /// Type of survey station. 
        /// </summary>
        [XmlElement("typeTrajStation")]
        public TrajStationType? TypeTrajStation { get; set; }
        /// <summary>
        /// The type of tool used for the measurements.
        /// </summary>
        [XmlElement("typeSurveyTool")]
        public String TypeSurveyTool { get; set; }
        /// <summary>
        /// The type of algorithm used in the position calculation.
        /// </summary>
        [XmlElement("calcAlgorithm")]
        public String CAlcAlgorithm { get; set; }
        /// <summary>
        /// Measured depth of measurement from the drill datum. This is an API "node-index" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// Hole inclination, measured from vertical. 
        /// </summary>
        [XmlElement("incl")]
        public PlaneAngleMeasure Incl { get; set; }
        /// <summary>
        /// Hole azimuth. Corrected to wells azimuth reference. 
        /// </summary>
        [XmlElement("azi")]
        public PlaneAngleMeasure Azi { get; set; }
        /// <summary>
        /// Toolface angle (magnetic). 
        /// </summary>
        [XmlElement("mtf")]
        public PlaneAngleMeasure Mtf { get; set; }
        /// <summary>
        /// Toolface angle (gravity). 
        /// </summary>
        [XmlElement("gtf")]
        public PlaneAngleMeasure Gtf { get; set; }
        /// <summary>
        /// North-south offset, positive to the North. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.
        /// </summary>
        [XmlElement("dispNs")]
        public LengthMeasure DispNS { get; set; }
        /// <summary>
        /// East-west offset, positive to the East. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location. 
        /// </summary>
        [XmlElement("dispEw")]
        public LengthMeasure DispEW { get; set; }
        /// <summary>
        /// Distance along vertical section azimuth plane. 
        /// </summary>
        [XmlElement("vertSect")]
        public LengthMeasure VertSect { get; set; }
        /// <summary>
        /// Dogleg severity. 
        /// </summary>
        [XmlElement("dls")]
        public AnglePerLengthMeasure DoglegSeverity { get; set; }
        /// <summary>
        /// Turn rate, radius of curvature computation. 
        /// </summary>
        [XmlElement("rateTurn")]
        public AnglePerLengthMeasure RateTurn { get; set; }
        /// <summary>
        /// Build Rate, radius of curvature computation. 
        /// </summary>
        [XmlElement("rateBuild")]
        public AnglePerLengthMeasure RateBuild { get; set; }
        /// <summary>
        /// Delta measured depth from previous station. 
        /// </summary>
        [XmlElement("mdDelta")]
        public LengthMeasure MDDelta { get; set; }
        /// <summary>
        /// Delta true vertical depth from previous station. 
        /// </summary>
        [XmlElement("tvdDelta")]
        public LengthMeasure TvdDelta { get; set; }
        /// <summary>
        /// DEPRECATED. Tool error model used to compute covariance matrix. 
        /// </summary>
        [Obsolete()]
        [XmlElement("modelToolError")]
        public String ModelToolError { get; set; }
        /// <summary>
        /// Reference to the toolErrorModel object used to compute covariance matrix.
        /// </summary>
        [XmlElement("iscwsaToolErrorModel")]
        public RefNameString IscwsaToolErrorModel { get; set; }
        /// <summary>
        /// Survey tool gravity uncertainty. 
        /// </summary>
        [XmlElement("gravTotalUncert")]
        public AccelerationLinearMeasure GravTotalUncert { get; set; }
        /// <summary>
        /// Survey tool dip uncertainty. 
        /// </summary>
        [XmlElement("dipAngleUncert")]
        public PlaneAngleMeasure DipAngleUncert { get; set; }
        /// <summary>
        /// Survey tool magnetic uncertainty. 
        /// </summary>
        [XmlElement("magTotalUncert")]
        public MagneticInductionMeasure MagTotalUncert { get; set; }
        /// <summary>
        /// Was an accelerometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("gravAccelCorUsed")]
        public Boolean? GravAccelCorUsed {
            get {
                return gravAccelCorUsedField;
            } 
            set { 
                gravAccelCorUsedField = value;
                this.GravAccelCorUsedSpecified = true;
            }
        }

        private Boolean? gravAccelCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean GravAccelCorUsedSpecified { get; set; }
        /// <summary>
        /// Was a magnetometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("magXAxialCorUsed")]
        public Boolean? MagXAxialCorUsed {
            get {
                return magXAxialCorUsedField;
            } 
            set { 
                magXAxialCorUsedField = value;
                this.MagXAxialCorUsedSpecified = true;
            }
        }

        private Boolean? magXAxialCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MagXAxialCorUsedSpecified { get; set; }
        /// <summary>
        /// Was a bottom hole assembly sag correction applied to the survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("sagCorUsed")]
        public Boolean? SagCorUsed {
            get {
                return sagCorUsedField;
            } 
            set { 
                sagCorUsedField = value;
                this.SagCorUsedSpecified = true;
            }
        }

        private Boolean? sagCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SagCorUsedSpecified { get; set; }
        /// <summary>
        /// Was a drillstring magnetism correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("magDrlstrCorUsed")]
        public Boolean? MagDrlstrCorUsed {
            get {
                return magDrlstrCorUsedField;
            } 
            set { 
                magDrlstrCorUsedField = value;
                this.MagDrlstrCorUsedSpecified = true;
            }
        }

        private Boolean? magDrlstrCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MagDrlstrCorUsedSpecified { get; set; }
        /// <summary>
        /// Was an In Field Referencing (IFR) correction applied to the azimuth value? Values are "true" (or "1") and "false" (or "0"). An IFR survey measures the strength and direction of the Earth's magnetic field over the area of interest. By taking a geomagnetic modelled values away from these field survey results, we are left with a local crustal correction, which since it is assumed geological in nature, only varies over geological timescales. For MWD survey operations, these corrections are applied in addition to the geomagnetic model to provide accurate knowledge of the local magnetic field and hence to improve the accuracy of MWD magnetic azimuth measurements.
        /// </summary>
        [XmlElement("infieldRefCorUsed")]
        public Boolean? InfieldRefCorUsed {
            get {
                return infieldRefCorUsedField;
            } 
            set { 
                infieldRefCorUsedField = value;
                this.InfieldRefCorUsedSpecified = true;
            }
        }

        private Boolean? infieldRefCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean InfieldRefCorUsedSpecified { get; set; }
        /// <summary>
        /// Was an Interpolated In Field Referencing (IIFR) correction applied to the azimuth value? Values are "true" (or "1") and "false" (or "0"). Interpolated In Field Referencing measures the diurnal Earth magnetic field variations resulting from electrical currents in the ionosphere and effects of magnetic storms hitting the Earth. It increases again the accuracy of the magnetic azimuth measurement.
        /// </summary>
        [XmlElement("interpolatedInfieldRefCorUsed")]
        public Boolean? InterpolatedInfieldRefCorUsed {
            get {
                return interpolatedInfieldRefCorUsedField;
            } 
            set { 
                interpolatedInfieldRefCorUsedField = value;
                this.InterpolatedInfieldRefCorUsedSpecified = true;
            }
        }

        private Boolean? interpolatedInfieldRefCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean InterpolatedInfieldRefCorUsedSpecified { get; set; }
        /// <summary>
        /// Was an In Hole Referencing (IHR) correction applied to the inclination and/or azimuth values? Values are "true" (or "1") and "false" (or "0"). In-Hole Referencing essentially involves comparing gyro surveys to MWD surveys in a tangent section of a well. Once a small part of a tangent section has been drilled and surveyed using an MWD tool, then an open hole (OH) gyro is run. By comparing the Gyro surveys to the MWD surveys a correction can be calculated for the MWD. This correction is then assumed as valid for the rest of the tangent section allowing to have a near gyro accuracy for the whole section, therefore reducing the ellipse of uncertainty (EOU) size.
        /// </summary>
        [XmlElement("inHoleRefCorUsed")]
        public Boolean? InHoleRefCorUsed {
            get {
                return inHoleRefCorUsedField;
            } 
            set { 
                inHoleRefCorUsedField = value;
                this.InHoleRefCorUsedSpecified = true;
            }
        }

        private Boolean? inHoleRefCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean InHoleRefCorUsedSpecified { get; set; }
        /// <summary>
        /// Was an Axial Magnetic Interference (AMI) correction applied to the azimuth value? Values are "true" (or "1") and "false" (or "0"). Most of the BHAs used to drill wells include an MWD tool. An MWD is a magnetic survey tool and as such suffer from magnetic interferences from a wide variety of sources. Magnetic interferences can be categorized into axial and radial type interferences. Axial interferences are mainly the result of magnetic poles from the drill string steel components located below and above the MWD tool. Radial interferences are numerous. Therefore, there is a risk that magXAxialCorUsed includes both Axial and radial corrections.
        /// </summary>
        [XmlElement("axialMagInterferenceCorUsed")]
        public Boolean? AxialMagInterferenceCorUsed {
            get {
                return axialMagInterferenceCorUsedField;
            } 
            set { 
                axialMagInterferenceCorUsedField = value;
                this.AxialMagInterferenceCorUsedSpecified = true;
            }
        }

        private Boolean? axialMagInterferenceCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AxialMagInterferenceCorUsedSpecified { get; set; }
        /// <summary>
        /// WWas a Cosag Correction applied to the azimuth values? Values are "true" (or "1") and "false" (or "0"). The BHA Sag Correction is the same as the Sag Correction except it includes the horizontal misalignment (Cosag).
        /// </summary>
        [XmlElement("cosagCorUsed")]
        public Boolean? CosagCorUsed {
            get {
                return cosagCorUsedField;
            } 
            set { 
                cosagCorUsedField = value;
                this.CosagCorUsedSpecified = true;
            }
        }

        private Boolean? cosagCorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CosagCorUsedSpecified { get; set; }
        /// <summary>
        /// Was a correction applied to the survey due to a Multi-Station Analysis process? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("MSACorUsed")]
        public Boolean? MSACorUsed {
            get {
                return MSACorUsedField;
            } 
            set { 
                MSACorUsedField = value;
                this.MSACorUsedSpecified = true;
            }
        }

        private Boolean? MSACorUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MSACorUsedSpecified { get; set; }
        /// <summary>
        /// Gravitational field theoretical/reference value. 
        /// </summary>
        [XmlElement("gravTotalFieldReference")]
        public AccelerationLinearMeasure GravTotalFieldReference { get; set; }
        /// <summary>
        /// Geomagnetic field theoretical/reference value. 
        /// </summary>
        [XmlElement("magTotalFieldReference")]
        public MagneticInductionMeasure MagTotalFieldReference { get; set; }
        /// <summary>
        /// Magnetic dip angle theoretical/reference value. 
        /// </summary>
        [XmlElement("magDipAngleReference")]
        public PlaneAngleMeasure MagDipAngleReference { get; set; }
        /// <summary>
        /// Geomagnetic model used. 
        /// </summary>
        [XmlElement("magModelUsed")]
        public String MagModelUsed { get; set; }
        /// <summary>
        /// Current valid interval for the geomagnetic model used. 
        /// </summary>
        [XmlElement("magModelValid")]
        public String MagModelValid { get; set; }
        /// <summary>
        /// Gravitational model used. 
        /// </summary>
        [XmlElement("geoModelUsed")]
        public String GeoModelUsed { get; set; }
        /// <summary>
        /// Status of the station. 
        /// </summary>
        [XmlElement("statusTrajStation")]
        public TrajStationStatus? StatusTrajStation {
            get {
                return statusTrajStationField;
            } 
            set { 
                statusTrajStationField = value;
                this.StatusTrajStationSpecified = true;
            }
        }

        private TrajStationStatus? statusTrajStationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StatusTrajStationSpecified { get; set; }
        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
        [XmlElement("rawData")]
        public StnTrajRawData RawData { get; set; }
        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
        [XmlElement("corUsed")]
        public StnTrajCorUsed CorUsed { get; set; }
        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
        [XmlElement("valid")]
        public StnTrajValid Valid { get; set; }
        /// <summary>
        /// Covariance matrix for error model. 
        /// </summary>
        [XmlElement("matrixCov")]
        public StnTrajMatrixCov MatrixCov { get; set; }
		/// <summary>
        /// The 2D coordinates of the item. Note that within the context of trajectory, the "original" coordinates are inherently local coordinates as defined above.
        /// </summary>
        [XmlElement("location")]
        public List<Location> Location { get; set; }
        /// <summary>
        /// A pointer to the trajectoryStation from which this station was derived. The trajectoryStation may be in another wellbore.
        /// </summary>
        [XmlElement("sourceStation")]
        public RefWellboreTrajectoryStation SourceStation { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Trajectory Station Raw Data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajRawData", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML Trajectory Station Raw Data")]
    public partial class StnTrajRawData : Object 
    {

        /// <summary>
        /// Uncorrected gravitational field strength measured in axial direction. 
        /// </summary>
        [XmlElement("gravAxialRaw")]
        public AccelerationLinearMeasure GravAxialRaw { get; set; }
        /// <summary>
        /// Uncorrected gravitational field strength measured in transverse direction. 
        /// </summary>
        [XmlElement("gravTran1Raw")]
        public AccelerationLinearMeasure GravTran1Raw { get; set; }
        /// <summary>
        /// Uncorrected gravitational field strength measured in transverse direction, approximately normal to tran1. 
        /// </summary>
        [XmlElement("gravTran2Raw")]
        public AccelerationLinearMeasure GravTran2Raw { get; set; }
        /// <summary>
        /// Uncorrected magnetic field strength measured in axial direction. 
        /// </summary>
        [XmlElement("magAxialRaw")]
        public MagneticInductionMeasure MagAxialRaw { get; set; }
        /// <summary>
        /// Uncorrected magnetic field strength measured in transverse direction. 
        /// </summary>
        [XmlElement("magTran1Raw")]
        public MagneticInductionMeasure MagTran1Raw { get; set; }
        /// <summary>
        /// Uncorrected magnetic field strength measured in transverse direction, approximately normal to tran1. 
        /// </summary>
        [XmlElement("magTran2Raw")]
        public MagneticInductionMeasure MagTran2Raw { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Trajectory Station Corrections Applied
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajCorUsed", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML Trajectory Station Corrections Applied")]
    public partial class StnTrajCorUsed : Object 
    {

        /// <summary>
        /// Calculated gravitational field strength correction. 
        /// </summary>
        [XmlElement("gravAxialAccelCor")]
        public AccelerationLinearMeasure GravAxialAccelCor { get; set; }
        /// <summary>
        /// The correction applied to a cross-axial (direction 1) component of the Earths gravitational field.
        /// </summary>
        [XmlElement("gravTran1AccelCor")]
        public AccelerationLinearMeasure GravTran1AccelCor { get; set; }
        /// <summary>
        /// The correction applied to a cross-axial (direction 2) component of the Earths gravitational field.
        /// </summary>
        [XmlElement("gravTran2AccelCor")]
        public AccelerationLinearMeasure GravTran2AccelCor { get; set; }
        /// <summary>
        /// Axial magnetic drillstring correction. 
        /// </summary>
        [XmlElement("magAxialDrlstrCor")]
        public MagneticInductionMeasure MagAxialDrlstrCor { get; set; }
        /// <summary>
        /// Cross-axial magnetic correction. 
        /// </summary>
        [XmlElement("magTran1DrlstrCor")]
        public MagneticInductionMeasure MagTran1DrlstrCor { get; set; }
        /// <summary>
        /// Cross-axial magnetic correction. 
        /// </summary>
        [XmlElement("magTran2DrlstrCor")]
        public MagneticInductionMeasure MagTran2DrlstrCor { get; set; }
        /// <summary>
        /// Cross-axial (direction 1) magnetic correction due to multi-station analysis process.
        /// </summary>
        [XmlElement("magTran1MSACor")]
        public MagneticInductionMeasure MagTran1MSACor { get; set; }
        /// <summary>
        /// Cross-axial (direction 2) magnetic correction due to multi-station analysis process.
        /// </summary>
        [XmlElement("magTran2MSACor")]
        public MagneticInductionMeasure MagTran2MSACor { get; set; }
        /// <summary>
        /// Axial magnetic correction due to multi-station analysis process.
        /// </summary>
        [XmlElement("magAxialMSACor")]
        public MagneticInductionMeasure MagAxialMSACor { get; set; }
        /// <summary>
        /// Calculated sag correction to inclination. 
        /// </summary>
        [XmlElement("sagIncCor")]
        public PlaneAngleMeasure SagIncCor { get; set; }
        /// <summary>
        /// Calculated cosag correction to azimuth.
        /// </summary>
        [XmlElement("sagAziCor")]
        public PlaneAngleMeasure SagAziCor { get; set; }
        /// <summary>
        /// Magnetic declination used to correct a Magnetic North referenced azimuth to a True North azimuth. Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.
        /// </summary>
        [XmlElement("stnMagDeclUsed")]
        public PlaneAngleMeasure StnMagDeclUsed { get; set; }
        /// <summary>
        /// DEPRECATED - use stnGridConUsed. Grid Correction (Meridian convergence). The angle between True North and Grid North. Grid Correction is positive when True North is west of Grid North. The correction is added to the raw observation, thus yielding a reduced or corrected observation that can go into the subsequent calculations.
        /// </summary>
        [XmlElement("stnGridCorUsed")]
        public PlaneAngleMeasure StnGridCorUsed { get; set; }
        /// <summary>
        /// Magnetic declination used to correct a Magnetic North referenced azimuth to a True North azimuth. Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.
        /// </summary>
        [XmlElement("stnGridConUsed")]
        public PlaneAngleMeasure StnGridConUsed { get; set; }
        /// <summary>
        /// Offset relative to bit. 
        /// </summary>
        [XmlElement("dirSensorOffset")]
        public LengthMeasure DirSensorOffset { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Validation Information for Survey
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajValid", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML Validation Information for Survey")]
    public partial class StnTrajValid : Object 
    {

        /// <summary>
        /// Calculated total intensity of the geomagnetic field as sum of BGGM, IFR and local field. 
        /// </summary>
        [XmlElement("magTotalFieldCalc")]
        public MagneticInductionMeasure MagTotalFieldCAlc { get; set; }
        /// <summary>
        /// Calculated magnetic dip (inclination), the angle between the horizontal and the geomagnetic field (positive down, res .001). 
        /// </summary>
        [XmlElement("magDipAngleCalc")]
        public PlaneAngleMeasure MagDipAngleCAlc { get; set; }
        /// <summary>
        /// Calculated total gravitational field. 
        /// </summary>
        [XmlElement("gravTotalFieldCalc")]
        public AccelerationLinearMeasure GravTotalFieldCAlc { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Validation Information for Covariance Matrix
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajMatrixCov", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML Validation Information for Covariance Matrix")]
    public partial class StnTrajMatrixCov : Object 
    {

        /// <summary>
        /// Covariance north north. 
        /// </summary>
        [XmlElement("varianceNN")]
        public AreaMeasure VarianceNN { get; set; }
        /// <summary>
        /// Crossvariance north east. 
        /// </summary>
        [XmlElement("varianceNE")]
        public AreaMeasure VarianceNE { get; set; }
        /// <summary>
        /// Crossvariance north vertical. 
        /// </summary>
        [XmlElement("varianceNVert")]
        public AreaMeasure VarianceNVert { get; set; }
        /// <summary>
        /// Covariance east east. 
        /// </summary>
        [XmlElement("varianceEE")]
        public AreaMeasure VarianceEE { get; set; }
        /// <summary>
        /// Crossvariance east vertical. 
        /// </summary>
        [XmlElement("varianceEVert")]
        public AreaMeasure VarianceEVert { get; set; }
        /// <summary>
        /// Covariance vertical vertical. 
        /// </summary>
        [XmlElement("varianceVertVert")]
        public AreaMeasure VarianceVertVert { get; set; }
        /// <summary>
        /// Bias north. 
        /// </summary>
        [XmlElement("biasN")]
        public LengthMeasure BiasN { get; set; }
        /// <summary>
        /// Bias east. 
        /// </summary>
        [XmlElement("biasE")]
        public LengthMeasure BiasE { get; set; }
        /// <summary>
        /// Bias vertical. The coordinate system is set up in a right-handed configuration which makes the vertical direction increasing (i.e., positive) downwards.
        /// </summary>
        [XmlElement("biasVert")]
        public LengthMeasure BiasVert { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_refWellboreTrajectoryStation xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellboreTrajectoryStation", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_refWellboreTrajectoryStation xsd type.")]
    public partial class RefWellboreTrajectoryStation : Object 
    {

        /// <summary>
        /// A pointer to the trajectoryStation within the parent trajectory. This is a special case where we only use a uid for the pointer. The natural identity of a station is its physical characteristics (e.g., md).
        /// </summary>
        [XmlElement("stationReference")]
        public String StationReference { get; set; }
        /// <summary>
        /// A pointer to the trajectory within the parent wellbore. This trajectory contains the trajectoryStation.
        /// </summary>
        [XmlElement("trajectoryParent")]
        public RefNameString TrajectoryPluggedAndAbandonedrent { get; set; }
        /// <summary>
        /// A pointer to the wellbore that contains the trajectory. This is not needed unless the trajectory is outside the context of a common parent wellbore.
        /// </summary>
        [XmlElement("wellboreParent")]
        public RefNameString WellborePluggedAndAbandonedrent { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Describes what survey measurement or value the error term applies to.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaErrorCoefficient", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Describes what survey measurement or value the error term applies to.")]
    public partial class IscwsaErrorCoefficient : Object 
    {

        /// <summary>
        /// Measured deviation from vertical.
        /// </summary>
        [XmlElement("inc")]
        public String Inc {
            get {
                return incField;
            } 
            set { 
                if (depthFieldSpecified) throw new Exception("Cannot set property Inc when property Depth is already set");
                if (aziFieldSpecified) throw new Exception("Cannot set property Inc when property Azi is already set");
                if (tvdFieldSpecified) throw new Exception("Cannot set property Inc when property Tvd is already set");
                incField = value;
                incFieldSpecified = true;
            }
        }

        private String incField; 
        private bool incFieldSpecified = false; 

        /// <summary>
        /// Measured depth along the wellbore.
        /// </summary>
        [XmlElement("depth")]
        public String Depth {
            get {
                return depthField;
            } 
            set { 
                if (incFieldSpecified) throw new Exception("Cannot set property Depth when property Inc is already set");
                if (aziFieldSpecified) throw new Exception("Cannot set property Depth when property Azi is already set");
                if (tvdFieldSpecified) throw new Exception("Cannot set property Depth when property Tvd is already set");
                depthField = value;
                depthFieldSpecified = true;
            }
        }

        private String depthField; 
        private bool depthFieldSpecified = false; 

        /// <summary>
        /// Measured horizontal azimuth.
        /// </summary>
        [XmlElement("azi")]
        public String Azi {
            get {
                return aziField;
            } 
            set { 
                if (incFieldSpecified) throw new Exception("Cannot set property Azi when property Inc is already set");
                if (depthFieldSpecified) throw new Exception("Cannot set property Azi when property Depth is already set");
                if (tvdFieldSpecified) throw new Exception("Cannot set property Azi when property Tvd is already set");
                aziField = value;
                aziFieldSpecified = true;
            }
        }

        private String aziField; 
        private bool aziFieldSpecified = false; 

        /// <summary>
        /// True Vertical Depth.
        /// </summary>
        [XmlElement("tvd")]
        public String Tvd {
            get {
                return tvdField;
            } 
            set { 
                if (incFieldSpecified) throw new Exception("Cannot set property Tvd when property Inc is already set");
                if (depthFieldSpecified) throw new Exception("Cannot set property Tvd when property Depth is already set");
                if (aziFieldSpecified) throw new Exception("Cannot set property Tvd when property Azi is already set");
                tvdField = value;
                tvdFieldSpecified = true;
            }
        }

        private String tvdField; 
        private bool tvdFieldSpecified = false; 


		
        [XmlIgnore]
		[Browsable(false)]
        public ItemChoiceType2? ItemElementName { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Error Term Component Schema. The reference error terms that are included in error models via ErrorTermValues.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaErrorTerm", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Error Term Component Schema. The reference error terms that are included in error models via ErrorTermValues.")]
    public partial class IscwsaErrorTerm : Object 
    {

        /// <summary>
        /// This is the unique mnemonic for this term. For example, "ABIX" or "DECR".
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The class of the error source.
        /// </summary>
        [XmlElement("type")]
        public ErrorTermSource? Type {
            get {
                return typeField;
            } 
            set { 
                typeField = value;
                this.TypeSpecified = true;
            }
        }

        private ErrorTermSource? typeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeSpecified { get; set; }
        /// <summary>
        /// The kind of quantity that the term represents. This constrains the unit that can be used for any errorTermValues.
        /// </summary>
        [XmlElement("measureClass")]
        public MeasureClass MeasureClass {
            get {
                return measureClassField;
            } 
            set { 
                measureClassField = value;
                this.MeasureClassSpecified = true;
            }
        }

        private MeasureClass measureClassField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MeasureClassSpecified { get; set; }
        /// <summary>
        /// Human-readable name for the term, may be presented in application software. E.g., "MWD: X-Acceleromter Bias with Z-Axis Corr."
        /// </summary>
        [XmlElement("label")]
        public String Label { get; set; }
        /// <summary>
        /// Human-readable name for the term, may be presented in application software. E.g., "MWD: X-Acceleromter Bias with Z-Axis Corr."
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Describes what measurement(s) the error variance(s) apply to.
        /// </summary>
        [XmlElement("errorCoefficient")]
        public List<IscwsaErrorCoefficient> ErrorCoefficient { get; set; }
		/// <summary>
        /// Operating mode that is valid for this error term. In the absence of this element assume Stationary.
        /// </summary>
        [XmlElement("operatingMode")]
        public List<SurveyToolOperatingMode> OperatingMode { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A nomenclature constant.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaNomenclatureConstant", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("A nomenclature constant.")]
    public partial class IscwsaNomenclatureConstant : Object 
    {

        /// <summary>
        /// The name of the constant.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The value of the constant.
        /// </summary>
        [XmlElement("value")]
        public Double? Value { get; set; }
        /// <summary>
        /// The unit of measure of the constant. This value must match an acronym from the WITSML unit of measure dictionary.
        /// </summary>
        [XmlElement("unit")]
        public String Unit { get; set; }
        /// <summary>
        /// A textual description of the constant.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A generic type which captures a name and a description of something. The semantics of the something is defined by the parent element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaNameAndDescription", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("A generic type which captures a name and a description of something. The semantics of the something is defined by the parent element.")]
    public partial class IscwsaNameAndDescription : Object 
    {

        /// <summary>
        /// The name of the item.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A textual description of the item.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A nomenclature for the description of errror terms.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaNomenclature", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("A nomenclature for the description of errror terms.")]
    public partial class IscwsaNomenclature : Object 
    {

		/// <summary>
        /// Variable names used within a function. Each parameter name must be unique within the context of this nomenclature.
        /// </summary>
        [XmlElement("parameter")]
        public List<IscwsaNameAndDescription> PluggedAndAbandonedrameter { get; set; }
		/// <summary>
        /// Mathmatical function used to generate error term values from parameters. Each function name must be unique within the context of this nomenclature.
        /// </summary>
        [XmlElement("function")]
        public List<IscwsaNameAndDescription> Function { get; set; }
		/// <summary>
        /// Numerical constant used by functions. Each constant name must be unique within the context of this nomenclature.
        /// </summary>
        [XmlElement("constant")]
        public List<IscwsaNomenclatureConstant> Constant { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML error term set object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_toolErrorTermSet", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML error term set object.")]
    public partial class ToolErrorTermSet : Object 
    {

        /// <summary>
        /// Human-readable name for the set of terms.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The definitive source for this set of error terms.
        /// </summary>
        [XmlElement("authorization")]
        public IscwsaAuthorizationData Authorization { get; set; }
        /// <summary>
        /// Defines the nomenclature used in the error terms.
        /// </summary>
        [XmlElement("nomenclature")]
        public IscwsaNomenclature Nomenclature { get; set; }
		/// <summary>
        /// Defines an error term.
        /// </summary>
        [XmlElement("errorTerm")]
        public List<IscwsaErrorTerm> ErrorTerm { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Authorization state of some entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaAuthorizationData", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Authorization state of some entity.")]
    public partial class IscwsaAuthorizationData : Object 
    {

        /// <summary>
        /// Person responsible for the information.
        /// </summary>
        [XmlElement("author")]
        public String Author { get; set; }
        /// <summary>
        /// Source from which the information is derived.
        /// </summary>
        [XmlElement("source")]
        public String Source { get; set; }
        /// <summary>
        /// Person or collective body responsible for authorizing the information.
        /// </summary>
        [XmlElement("authority")]
        public String Authority { get; set; }
        /// <summary>
        /// Authorization state of the information.
        /// </summary>
        [XmlElement("status")]
        public AuthorizationStatus? Status { get; set; }
        /// <summary>
        /// Version name or number.
        /// </summary>
        [XmlElement("version")]
        public String Version { get; set; }
        /// <summary>
        /// A comment about the object. This should include information regarding the derivation of the information.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The instantiation of an error term in an error model. The content of this element (a number) is the variance scaling factor of the term in the model. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaErrorTermValue", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The instantiation of an error term in an error model. The content of this element (a number) is the variance scaling factor of the term in the model. ")]
    public partial class IscwsaErrorTermValue : Object 
    {

        /// <summary>
        /// A pointer to the errorTerm represented by this value. This term must exist in the toolErrorTermSet referenced by the parent of this node. The same term may only be referenced once in the model.
        /// </summary>
        [XmlElement("term")]
        public RefNameString Term { get; set; }
        /// <summary>
        /// This is the propagation mode for this term in this model.
        /// </summary>
        [XmlElement("prop")]
        public ErrorPropagationMode? Prop { get; set; }
        /// <summary>
        /// The mean or expected value of the variance.
        /// </summary>
        [XmlElement("bias")]
        public Double? Bias {
            get {
                return biasField;
            } 
            set { 
                biasField = value;
                this.BiasSpecified = true;
            }
        }

        private Double? biasField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BiasSpecified { get; set; }
        /// <summary>
        /// The value of the error term in this model. The unit of measure must be in the set allowed by the measure class of the referenced error term.
        /// </summary>
        [XmlElement("value")]
        public MeasureOrQuantity Value { get; set; }
        /// <summary>
        /// A textual comment about this error term value.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Various parameters controlling the generation of the survey variance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaModelParameters", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Various parameters controlling the generation of the survey variance.")]
    public partial class IscwsaModelParameters : Object 
    {

        /// <summary>
        /// Choice of mathmatical modelling of misalignment.
        /// </summary>
        [XmlElement("misalignmentMode")]
        public ErrorModelMisalignmentMode? MisalignmentMode { get; set; }
        /// <summary>
        /// Inclination at which gyro initialization occurs.
        /// </summary>
        [XmlElement("gyroInitialization")]
        public PlaneAngleMeasure GyroInitialization { get; set; }
        /// <summary>
        /// Maximum length of continuous survey before re-initialisation.
        /// </summary>
        [XmlElement("gyroReinitializationDistance")]
        public LengthMeasure GyroReinitializationDistance { get; set; }
        /// <summary>
        /// True if the survey tool is rotated at inclinations greater than 90 degrees.
        /// </summary>
        [XmlElement("switching")]
        public Boolean? Switching {
            get {
                return switchingField;
            } 
            set { 
                switchingField = value;
                this.SwitchingSpecified = true;
            }
        }

        private Boolean? switchingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SwitchingSpecified { get; set; }
        /// <summary>
        /// Factor applied to Random Noise error terms depending on mode of gyro initialisation. Values must be greater than zero and less than or equal to 1.
        /// </summary>
        [XmlElement("noiseReductionFactor")]
        public Double? NoiseReductionFactor {
            get {
                return noiseReductionFactorField;
            } 
            set { 
                noiseReductionFactorField = value;
                this.NoiseReductionFactorSpecified = true;
            }
        }

        private Double? noiseReductionFactorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NoiseReductionFactorSpecified { get; set; }
        /// <summary>
        /// Speed at which the tool traverses the wellbore during continuous survey.
        /// </summary>
        [XmlElement("gyroRunningSpeed")]
        public VelocityMeasure GyroRunningSpeed { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Inclination interval for a particular operating mode. Intervals may overlap to suppress mode flip-flopping, but should cover the entire valid range of the tool. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaSurveyToolOperatingInterval", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Inclination interval for a particular operating mode. Intervals may overlap to suppress mode flip-flopping, but should cover the entire valid range of the tool. ")]
    public partial class IscwsaSurveyToolOperatingInterval : Object 
    {

        /// <summary>
        /// Tool operating mode over this interval.
        /// </summary>
        [XmlElement("mode")]
        public SurveyToolOperatingMode? Mode { get; set; }
        /// <summary>
        /// Inclination at which mode commences.
        /// </summary>
        [XmlElement("start")]
        public PlaneAngleMeasure Start { get; set; }
        /// <summary>
        /// Inclination at which mode terminates.
        /// </summary>
        [XmlElement("end")]
        public PlaneAngleMeasure End { get; set; }
        /// <summary>
        /// Running speed for continuous surveys.
        /// </summary>
        [XmlElement("speed")]
        public VelocityMeasure Speed { get; set; }
        /// <summary>
        /// Time between survey samples for continuous surveys.
        /// </summary>
        [XmlElement("sampleRate")]
        public TimeMeasure SampleRate { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Describes the survey acquisition context in which an error model is valid as a sequence of constraints
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaSurveyToolOperatingCondition", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Describes the survey acquisition context in which an error model is valid as a sequence of constraints")]
    public partial class IscwsaSurveyToolOperatingCondition : Object 
    {

        /// <summary>
        /// A particular constraint.
        /// </summary>
        [XmlElement("parameter")]
        public String PluggedAndAbandonedrameter { get; set; }
        /// <summary>
        /// The least value the constraint may take.
        /// </summary>
        [XmlElement("min")]
        public GenericMeasure Min { get; set; }
        /// <summary>
        /// The greatest value the constraint may take.
        /// </summary>
        [XmlElement("max")]
        public GenericMeasure Max { get; set; }
        /// <summary>
        /// A fixed value that the constraint must take.
        /// </summary>
        [XmlElement("value")]
        public String Value { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Tool Error Model object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_toolErrorModel", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Tool Error Model object.")]
    public partial class ToolErrorModel : Object 
    {

        /// <summary>
        /// Human-readable name for the model.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The definitive source, authority, status and version of this model.
        /// </summary>
        [XmlElement("authorization")]
        public IscwsaAuthorizationData Authorization { get; set; }
        /// <summary>
        /// The type of tool used for the measurements. This is the same list as defined for a trajectoryStation.
        /// </summary>
        [XmlElement("typeSurveyTool")]
        public String TypeSurveyTool { get; set; }
		/// <summary>
        /// The operating condition for this tool. If not specified then stationary should be assumed.
        /// </summary>
        [XmlElement("operatingCondition")]
        public List<IscwsaSurveyToolOperatingCondition> OperatingCondition { get; set; }
		/// <summary>
        /// The operating interval for this tool. If not specified then stationary should be assumed.
        /// </summary>
        [XmlElement("operatingInterval")]
        public List<IscwsaSurveyToolOperatingInterval> OperatingInterval { get; set; }
        /// <summary>
        /// Values related to the tool running conditions that influence the variance generation.
        /// </summary>
        [XmlElement("modelParameters")]
        public IscwsaModelParameters ModelPluggedAndAbandonedrameters { get; set; }
        /// <summary>
        /// Reference to the toolErrorTermSet object that contains the error terms used in this model.
        /// </summary>
        [XmlElement("useErrorTermSet")]
        public RefNameString UseErrorTermSet { get; set; }
		/// <summary>
        /// Value for an error term that is part of the model.
        /// </summary>
        [XmlElement("errorTermValue")]
        public List<IscwsaErrorTermValue> ErrorTermValue { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Element Types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_targetSection", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML Element Types")]
    public partial class TargetSection : Object 
    {

        /// <summary>
        /// Sequence number of section, 1,2,3. 
        /// </summary>
        [XmlElement("sectNumber")]
        public Int16? SectNumber { get; set; }
        /// <summary>
        /// Section scope: Line or Arc. 
        /// </summary>
        [XmlElement("typeTargetSectionScope")]
        public TargetSectionScope? TypeTargetSectionScope { get; set; }
        /// <summary>
        /// Length of straight line section or radius of arc for continuous curve section. 
        /// </summary>
        [XmlElement("lenRadius")]
        public LengthMeasure LenRadius { get; set; }
        /// <summary>
        /// Direction of straight line section or radius of arc for continuous curve section. 
        /// </summary>
        [XmlElement("angleArc")]
        public PlaneAngleMeasure AngleArc { get; set; }
        /// <summary>
        /// Height of target above center point at the start of the section. In the case of an arc, the thickness above should vary linearly with the arc length. 
        /// </summary>
        [XmlElement("thickAbove")]
        public LengthMeasure ThickAbove { get; set; }
        /// <summary>
        /// Depth of target below center point at the start of the section. In the case of an arc, the thickness below should vary linearly with the arc length. 
        /// </summary>
        [XmlElement("thickBelow")]
        public LengthMeasure ThickBelow { get; set; }
		/// <summary>
        /// The 2D coordinates of the item at the start of the section. This is redundant information and can be computed by starting at the section origin and applying the sequence of angleArcs and lenRadius. 
        /// </summary>
        [XmlElement("location")]
        public List<Location> Location { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Target object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_target", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Target object.")]
    public partial class Target : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the target. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the target. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A pointer to the parent target. This represents a relationship between a drillers and geological target. 
        /// </summary>
        [XmlElement("parentTarget")]
        public RefNameString PluggedAndAbandonedrentTarget { get; set; }
        /// <summary>
        /// Northing of target center point in map coordinates. 
        /// </summary>
        [XmlElement("dispNsCenter")]
        public LengthMeasure DispNSCenter { get; set; }
        /// <summary>
        /// Easting of target center point in map coordinates. 
        /// </summary>
        [XmlElement("dispEwCenter")]
        public LengthMeasure DispEWCenter { get; set; }
        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// North-south offset of target intercept point from shape center. 
        /// </summary>
        [XmlElement("dispNsOffset")]
        public LengthMeasure DispNSOffset { get; set; }
        /// <summary>
        /// East-west offset of target intercept point from shape center. 
        /// </summary>
        [XmlElement("dispEwOffset")]
        public LengthMeasure DispEWOffset { get; set; }
        /// <summary>
        /// Height of target above center point. 
        /// </summary>
        [XmlElement("thickAbove")]
        public LengthMeasure ThickAbove { get; set; }
        /// <summary>
        /// Depth of target below center point. 
        /// </summary>
        [XmlElement("thickBelow")]
        public LengthMeasure ThickBelow { get; set; }
        /// <summary>
        /// Angle of dip with respect to horizontal. 
        /// </summary>
        [XmlElement("dip")]
        public PlaneAngleMeasure Dip { get; set; }
        /// <summary>
        /// Direction of dip with respect to north azimuth reference. 
        /// </summary>
        [XmlElement("strike")]
        public PlaneAngleMeasure Strike { get; set; }
        /// <summary>
        /// Direction of target geometry with respect to north azimuth reference. 
        /// </summary>
        [XmlElement("rotation")]
        public PlaneAngleMeasure Rotation { get; set; }
        /// <summary>
        /// Distance from center to perimeter in rotation direction. This may be ignored depending on the value of typeTargetScope.
        /// </summary>
        [XmlElement("lenMajorAxis")]
        public LengthMeasure LenMajorAxis { get; set; }
        /// <summary>
        /// Distance from center to perimeter at 90 deg to rotation direction. This may be ignored depending on the value of typeTargetScope. 
        /// </summary>
        [XmlElement("widMinorAxis")]
        public LengthMeasure WidMinorAxis { get; set; }
        /// <summary>
        /// The type of scope of the drilling target.
        /// </summary>
        [XmlElement("typeTargetScope")]
        public TargetScope? TypeTargetScope {
            get {
                return typeTargetScopeField;
            } 
            set { 
                typeTargetScopeField = value;
                this.TypeTargetScopeSpecified = true;
            }
        }

        private TargetScope? typeTargetScopeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeTargetScopeSpecified { get; set; }
        /// <summary>
        /// Origin north-south used as starting point for sections, mandatory parameter when sections are used.. 
        /// </summary>
        [XmlElement("dispNsSectOrig")]
        public LengthMeasure DispNSSectOrig { get; set; }
        /// <summary>
        /// Origin east-west used as starting point for sections, mandatory parameter when sections are used. 
        /// </summary>
        [XmlElement("dispEwSectOrig")]
        public LengthMeasure DispEWSectOrig { get; set; }
        /// <summary>
        /// Specifies the definition of north. 
        /// </summary>
        [XmlElement("aziRef")]
        public AziRef? AziRef {
            get {
                return aziRefField;
            } 
            set { 
                aziRefField = value;
                this.AziRefSpecified = true;
            }
        }

        private AziRef? aziRefField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AziRefSpecified { get; set; }
        /// <summary>
        /// Geological or drillers target. 
        /// </summary>
        [XmlElement("catTarg")]
        public TargetCategory? CatTarg {
            get {
                return catTargField;
            } 
            set { 
                catTargField = value;
                this.CatTargSpecified = true;
            }
        }

        private TargetCategory? catTargField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CatTargSpecified { get; set; }
		/// <summary>
        /// The 2D coordinates of the item at the start of the section. The location object is mandatory for the first section starting point. 
        /// </summary>
        [XmlElement("location")]
        public List<Location> Location { get; set; }
		/// <summary>
        /// Sections describing target. These may be ignored depending on the value of typeTargetScope. 
        /// </summary>
        [XmlElement("targetSection")]
        public List<TargetSection> TargetSection { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Survey Section Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_surveySection", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Survey Section Component Schema ")]
    public partial class SurveySection : Object 
    {

        /// <summary>
        /// Order in which program sections will be executed / were executed. 
        /// </summary>
        [XmlElement("sequence")]
        public Int16? Sequence { get; set; }
        /// <summary>
        /// Name of survey program section. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Hole measured depth at which the survey run will begin/began. 
        /// </summary>
        [XmlElement("mdStart")]
        public MeasuredDepthCoord MDStart { get; set; }
        /// <summary>
        /// Hole measured depth at which the survey run will end/ended. 
        /// </summary>
        [XmlElement("mdEnd")]
        public MeasuredDepthCoord MDEnd { get; set; }
        /// <summary>
        /// Company who will run / has run sruvey tool. 
        /// </summary>
        [XmlElement("nameSurveyCompany")]
        public String NameSurveyCompany { get; set; }
        /// <summary>
        /// Name of survey tool to be used / used for this section. 
        /// </summary>
        [XmlElement("nameTool")]
        public String NameTool { get; set; }
        /// <summary>
        /// Type of tool used. 
        /// </summary>
        [XmlElement("typeTool")]
        public String TypeTool { get; set; }
        /// <summary>
        /// Error model used to calculate ellipses of uncertainty. 
        /// </summary>
        [XmlElement("modelError")]
        public String ModelError { get; set; }
        /// <summary>
        /// Normally true, higher index trajectory takes precedence over overlapping section of previous trajectory. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("overwrite")]
        public Boolean? Overwrite {
            get {
                return overwriteField;
            } 
            set { 
                overwriteField = value;
                this.OverwriteSpecified = true;
            }
        }

        private Boolean? overwriteField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean OverwriteSpecified { get; set; }
        /// <summary>
        /// Maximum allowable depth frequency for survey stations for this survey run. 
        /// </summary>
        [XmlElement("frequencyMx")]
        public LengthMeasure FrequencyMax { get; set; }
        /// <summary>
        /// The item state for the data object. 
        /// </summary>
        [XmlElement("itemState")]
        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set { 
                itemStateField = value;
                this.ItemStateSpecified = true;
            }
        }

        private ItemState? itemStateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ItemStateSpecified { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Survey Program object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_surveyProgram", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Survey Program object.")]
    public partial class SurveyProgram : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the survey program. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the survey program. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Survey version number, incremented every time the program is modified. 
        /// </summary>
        [XmlElement("surveyVer")]
        public Int16? SurveyVer { get; set; }
        /// <summary>
        /// Date and time trajectory program was created or edited. 
        /// </summary>
        [XmlElement("dTimTrajProg")]
        public DateTime? DateTimeTrajProg {
            get {
                return dTimTrajProgField;
            } 
            set { 
                dTimTrajProgField = value;
                this.DateTimeTrajProgSpecified = true;
            }
        }

        private DateTime? dTimTrajProgField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeTrajProgSpecified { get; set; }
        /// <summary>
        /// Name of engineer. 
        /// </summary>
        [XmlElement("engineer")]
        public String Engineer { get; set; }
        /// <summary>
        /// Is program a final or intermediate/preliminary? 
        /// </summary>
        [XmlElement("final")]
        public String Final { get; set; }
		/// <summary>
        /// Survey section object. 
        /// </summary>
        [XmlElement("surveySection")]
        public List<SurveySection> SurveySection { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information about a set of perforations. The assumption is that all perforations within a given set are created with the same device or method. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimPerforationSet", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Information about a set of perforations. The assumption is that all perforations within a given set are created with the same device or method. ")]
    public partial class StimPerforationSet : Object 
    {

        /// <summary>
        /// The type of perforation and/or how the perforation was created.
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// Measured depth of the top perforation.
        /// </summary>
        [XmlElement("mdPerforationsTop")]
        public MeasuredDepthCoord MDPerforationsTop { get; set; }
        /// <summary>
        /// Measured depth of the bottom perforation.
        /// </summary>
        [XmlElement("mdPerforationsBottom")]
        public MeasuredDepthCoord MDPerforationsBottom { get; set; }
        /// <summary>
        /// True vertical depth of the top perforation.
        /// </summary>
        [XmlElement("tvdPerforationsTop")]
        public WellVerticalDepthCoord TvdPerforationsTop { get; set; }
        /// <summary>
        /// True vertical depth of the bottom perforation.
        /// </summary>
        [XmlElement("tvdPerforationsBottom")]
        public WellVerticalDepthCoord TvdPerforationsBottom { get; set; }
        /// <summary>
        /// The number of perforations in this interval.
        /// </summary>
        [XmlElement("perforationCount")]
        public Int16? PerforationCount {
            get {
                return perforationCountField;
            } 
            set { 
                perforationCountField = value;
                this.PerforationCountSpecified = true;
            }
        }

        private Int16? perforationCountField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PerforationCountSpecified { get; set; }
        /// <summary>
        /// The size of the perforations.
        /// </summary>
        [XmlElement("size")]
        public LengthMeasure Size { get; set; }
        /// <summary>
        /// The number of perforation holes per length across the treatment interval. Used to describe but not limited to the configuration of perforating guns or the placement of perforations (holes, slots, openings ...) in the wellbore, and is often abbreviated to spf (shots per foot).
        /// </summary>
        [XmlElement("densityPerforation")]
        public PerLengthMeasure DensityPerforation { get; set; }
        /// <summary>
        /// The radial distribution of successive perforations around the wellbore axis. Radial distribution is commonly available in 0, 180 120, 90 and 60 degree phasing.
        /// </summary>
        [XmlElement("phasingPerforation")]
        public PlaneAngleMeasure PHasingPerforation { get; set; }
        /// <summary>
        /// The friction factor of each perforation set.
        /// </summary>
        [XmlElement("frictionFactor")]
        public Double? FrictionFactor {
            get {
                return frictionFactorField;
            } 
            set { 
                frictionFactorField = value;
                this.FrictionFactorSpecified = true;
            }
        }

        private Double? frictionFactorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FrictionFactorSpecified { get; set; }
        /// <summary>
        /// The friction pressure for the perforation set.
        /// </summary>
        [XmlElement("frictionPres")]
        public PressureMeasure FrictionPres { get; set; }
        /// <summary>
        /// A coefficient used in the equation for calculation of pressure drop across a perforation set.
        /// </summary>
        [XmlElement("dischargeCoefficient")]
        public Double? DischargeCoefficient {
            get {
                return dischargeCoefficientField;
            } 
            set { 
                dischargeCoefficientField = value;
                this.DischargeCoefficientSpecified = true;
            }
        }

        private Double? dischargeCoefficientField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DischargeCoefficientSpecified { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Reservoir Interval Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimReservoirInterval", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Reservoir Interval Component Schema.")]
    public partial class StimReservoirInterval : Object 
    {

        /// <summary>
        /// Measured depth at top of interval.
        /// </summary>
        [XmlElement("mdLithTop")]
        public MeasuredDepthCoord MDLithTop { get; set; }
        /// <summary>
        /// Measured depth at base of interval.
        /// </summary>
        [XmlElement("mdLithBottom")]
        public MeasuredDepthCoord MDLithBottom { get; set; }
        /// <summary>
        /// Formation permeability, a measurement of the ability of a fluid to flow through a rock. Commonly measured in milliDarcys (1m2 = 0.000000000000986923 Darcy).
        /// </summary>
        [XmlElement("lithFormationPermeability")]
        public PermeabilityRockMeasure LithFormationPermeability { get; set; }
        /// <summary>
        /// Young's modulus (E) is a measure of the stiffness of an isotropic elastic material. It is also known as the Young modulus, modulus of elasticity, elastic modulus (though Young's modulus is actually one of several elastic moduli such as the bulk modulus and the shear modulus) or tensile modulus. It is defined as the ratio of the uniaxial stress over the uniaxial strain.
        /// </summary>
        [XmlElement("lithYoungsModulus")]
        public PressureMeasure LithYoungsModulus { get; set; }
        /// <summary>
        /// Refers to the pressure of fluids held within a soil or rock, in gaps between particles formation porosity.
        /// </summary>
        [XmlElement("lithPorePres")]
        public PressureMeasure LithPorePres { get; set; }
        /// <summary>
        /// Net pay is computed. It is the thickness of rock that can deliver hydrocarbons to the well bore formation.
        /// </summary>
        [XmlElement("lithNetPayThickness")]
        public LengthMeasure LithNetPluggedAndAbandonedyThickness { get; set; }
        /// <summary>
        /// A name for the formation lithology.
        /// </summary>
        [XmlElement("lithName")]
        public String LithName { get; set; }
        /// <summary>
        /// Measured depth of the top of the formation.
        /// </summary>
        [XmlElement("mdGrossPayTop")]
        public MeasuredDepthCoord MDGrossPluggedAndAbandonedyTop { get; set; }
        /// <summary>
        /// Measured depth of the bottom of the formation.
        /// </summary>
        [XmlElement("mdGrossPayBottom")]
        public MeasuredDepthCoord MDGrossPluggedAndAbandonedyBottom { get; set; }
        /// <summary>
        /// The total thickness of the interval being treated, whether or not it is productive.
        /// </summary>
        [XmlElement("grossPayThickness")]
        public LengthMeasure GrossPluggedAndAbandonedyThickness { get; set; }
        /// <summary>
        /// The thickness of the most productive part of the interval. Net pay is a subset of the gross.
        /// </summary>
        [XmlElement("netPayThickness")]
        public LengthMeasure NetPluggedAndAbandonedyThickness { get; set; }
        /// <summary>
        /// The pore pressure of the net pay.
        /// </summary>
        [XmlElement("netPayPorePres")]
        public PressureMeasure NetPluggedAndAbandonedyPorePres { get; set; }
        /// <summary>
        /// The volume change of the fluid in the net pay when pressure is applied.
        /// </summary>
        [XmlElement("netPayFluidCompressibility")]
        public CompressibilityMeasure NetPluggedAndAbandonedyFluidCompressibility { get; set; }
        /// <summary>
        /// With respect to the net pay, a measurement of the internal resistance of a fluid to flow against itself. Expressed as the ratio of shear stress to shear rate.
        /// </summary>
        [XmlElement("netPayFluidViscosity")]
        public DynamicViscosityMeasure NetPluggedAndAbandonedyFluidViscosity { get; set; }
        /// <summary>
        /// The name used for the net pay zone.
        /// </summary>
        [XmlElement("netPayName")]
        public String NetPluggedAndAbandonedyName { get; set; }
        /// <summary>
        /// The permeability of the net pay.
        /// </summary>
        [XmlElement("netPayFormationPermeability")]
        public PermeabilityRockMeasure NetPluggedAndAbandonedyFormationPermeability { get; set; }
        /// <summary>
        /// The ratio of the relative contraction strain, or transverse strain (normal to the applied load), divided by the relative extension strain, or axial strain (in the direction of the applied load).
        /// </summary>
        [XmlElement("lithPoissonsRatio")]
        public DimensionlessMeasure LithPoissonsRatio { get; set; }
        /// <summary>
        /// Porosity of the net pay formation.
        /// </summary>
        [XmlElement("netPayFormationPorosity")]
        public VolumePerVolumeMeasurePercent NetPluggedAndAbandonedyFormationPorosity { get; set; }
        /// <summary>
        /// Permeability of the formation.
        /// </summary>
        [XmlElement("formationPermeability")]
        public PermeabilityRockMeasure FormationPermeability { get; set; }
        /// <summary>
        /// Porosity of the formation.
        /// </summary>
        [XmlElement("formationPorosity")]
        public VolumePerVolumeMeasurePercent FormationPorosity { get; set; }
        /// <summary>
        /// Name of the formation.
        /// </summary>
        [XmlElement("nameFormation")]
        public String NameFormation { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// In a step down pump diagnostics test, this item contains all the data for a particular step in that test.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimTestStep", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("In a step down pump diagnostics test, this item contains all the data for a particular step in that test.")]
    public partial class StimTestStep : Object 
    {

        
        [XmlElement("number")]
        public Int16? Number { get; set; }
        
        [XmlElement("bottomholeRate")]
        public VolumeFlowRateMeasure BottomholeRate { get; set; }
        
        [XmlElement("pres")]
        public PressureMeasure Pres { get; set; }
        
        [XmlElement("pipeFriction")]
        public PressureMeasure PipeFriction { get; set; }
        
        [XmlElement("entryFriction")]
        public PressureMeasure EntryFriction { get; set; }
        
        [XmlElement("perfFriction")]
        public PressureMeasure PerfFriction { get; set; }
        
        [XmlElement("nearWellboreFriction")]
        public PressureMeasure NearWellboreFriction { get; set; }
        
        [XmlElement("surfaceRate")]
        public VolumeFlowRateMeasure SurfaceRate { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Diagnostic test involving flowing a well back after treatment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimStepDownTest", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Diagnostic test involving flowing a well back after treatment.")]
    public partial class StimStepDownTest : Object 
    {

        /// <summary>
        /// The initial shutin pressure.
        /// </summary>
        [XmlElement("initialShutinPres")]
        public PressureMeasure InitialShutinPres { get; set; }
        /// <summary>
        /// The density of the fluid at the bottom of the hole adjusting for bottomhole temperature and pressure during the step test.
        /// </summary>
        [XmlElement("bottomholeFluidDensity")]
        public DensityMeasure BottomholeFluidDensity { get; set; }
        /// <summary>
        /// Diameter of the injection point or perforation.
        /// </summary>
        [XmlElement("diameterEntryHole")]
        public LengthMeasure DiameterEntryHole { get; set; }
        /// <summary>
        /// The number of perforations in the interval being tested.
        /// </summary>
        [XmlElement("perforationCount")]
        public Int16? PerforationCount {
            get {
                return perforationCountField;
            } 
            set { 
                perforationCountField = value;
                this.PerforationCountSpecified = true;
            }
        }

        private Int16? perforationCountField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PerforationCountSpecified { get; set; }
        /// <summary>
        /// A coefficient used in the equation for calculation of pressure drop across a perforation set.
        /// </summary>
        [XmlElement("dischargeCoefficient")]
        public Double? DischargeCoefficient {
            get {
                return dischargeCoefficientField;
            } 
            set { 
                dischargeCoefficientField = value;
                this.DischargeCoefficientSpecified = true;
            }
        }

        private Double? dischargeCoefficientField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DischargeCoefficientSpecified { get; set; }
        /// <summary>
        /// The number of perforations in the interval being tested calculated to be open to injection determined during the step down test.
        /// </summary>
        [XmlElement("effectivePerfs")]
        public Double? EffectivePerfs {
            get {
                return effectivePerfsField;
            } 
            set { 
                effectivePerfsField = value;
                this.EffectivePerfsSpecified = true;
            }
        }

        private Double? effectivePerfsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EffectivePerfsSpecified { get; set; }
		/// <summary>
        /// The data related to a particular step in the step down test.
        /// </summary>
        [XmlElement("step")]
        public List<StimTestStep> Step { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Diagnostic test involving flowing a well back after treatment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimPumpFlowBackTest", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Diagnostic test involving flowing a well back after treatment.")]
    public partial class StimPumpFlowBackTest : Object 
    {

        /// <summary>
        /// The time required for the fracture width to become zero.
        /// </summary>
        [XmlElement("fractureCloseDuration")]
        public TimeMeasure FractureCloseDuration { get; set; }
        /// <summary>
        /// The pressure when the fracture width becomes zero.
        /// </summary>
        [XmlElement("fractureClosePres")]
        public PressureMeasure FractureClosePres { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A diagnostic test determining fluid efficiency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimFetTest", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("A diagnostic test determining fluid efficiency.")]
    public partial class StimFetTest : Object 
    {

        /// <summary>
        /// Start time for the fluid efficiency test (FET).
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// End time for the fluid efficiency test.
        /// </summary>
        [XmlElement("dTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set { 
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
            }
        }

        private DateTime? dTimEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndSpecified { get; set; }
        /// <summary>
        /// The end of the pressure dependent leakoff portion of the fluid efficiency test.
        /// </summary>
        [XmlElement("endPdlDuration")]
        public TimeMeasure EndPdlDuration { get; set; }
        /// <summary>
        /// The time at which the fracture effectively closes without proppant in place.
        /// </summary>
        [XmlElement("fractureCloseDuration")]
        public TimeMeasure FractureCloseDuration { get; set; }
        /// <summary>
        /// The pressure at which the fracture effectively closes without proppant in place.
        /// </summary>
        [XmlElement("fractureClosePres")]
        public PressureMeasure FractureClosePres { get; set; }
        /// <summary>
        /// The fracture pressure limit for an unfractured formation is the fracture initiation pressure. This is typically considered the upper bound for the minimum horizontal stress or closure pressure. A step rate test is used to determine the fracture extension pressure.
        /// </summary>
        [XmlElement("fractureExtensionPres")]
        public PressureMeasure FractureExtensionPres { get; set; }
        /// <summary>
        /// The difference between the fracture extension pressure and the pressure that exists in the fracture.
        /// </summary>
        [XmlElement("netPres")]
        public PressureMeasure NetPres { get; set; }
        /// <summary>
        /// The pressure of the liquids in the formation pores.
        /// </summary>
        [XmlElement("porePres")]
        public PressureMeasure PorePres { get; set; }
        /// <summary>
        /// The Horner plot is used to determine if pseudo-radial flow developed during pressure decline. If a semi-log straight line is observed and the line can be extrapolated to a reasonable value of reservoir pressure, radial or pseudo-radial flow may be affecting the decline behavior. This suggests that the fracture is already closed and that data beyond the point of influence need not be considered in the evaluation of closure.
        /// </summary>
        [XmlElement("pseudoRadialPres")]
        public PressureMeasure PseudoRadialPres { get; set; }
        /// <summary>
        /// Fracture length is the length of the fracture tip to tip; fracture half length, the length of one wing of a fracture from the wellbore to the tip.
        /// </summary>
        [XmlElement("fractureLength")]
        public LengthMeasure FractureLength { get; set; }
        /// <summary>
        /// The width of a fracture at the wellbore. Hydraulic frac width is generated by frac fluid viscosity and/or pump rate (i.e., horsepower).
        /// </summary>
        [XmlElement("fractureWidth")]
        public LengthMeasure FractureWidth { get; set; }
        /// <summary>
        /// A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.
        /// </summary>
        [XmlElement("fluidEfficiency")]
        public VolumePerVolumeMeasurePercent FluidEfficiency { get; set; }
        /// <summary>
        /// The pressure dependent leakoff coefficient.
        /// </summary>
        [XmlElement("pdlCoef")]
        public Double? PdlCoef {
            get {
                return pdlCoefField;
            } 
            set { 
                pdlCoefField = value;
                this.PdlCoefSpecified = true;
            }
        }

        private Double? pdlCoefField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PdlCoefSpecified { get; set; }
        /// <summary>
        /// That permeability which remains after a fractured formation has closed, allowing the the formation fracture face to be pressurized before the fracture is mechanically reopened.
        /// </summary>
        [XmlElement("residualPermeability")]
        public PermeabilityRockMeasure ResidualPermeability { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// In an injection step test, the injection rate at a particular pressure.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimPressureFlowRate", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("In an injection step test, the injection rate at a particular pressure.")]
    public partial class StimPressureFlowRate : Object 
    {

        /// <summary>
        /// The pressure of the step test.
        /// </summary>
        [XmlElement("pres")]
        public PressureMeasure Pres { get; set; }
        /// <summary>
        /// The flow of the fluid at the bottomhole.
        /// </summary>
        [XmlElement("bottomholeRate")]
        public VolumeFlowRateMeasure BottomholeRate { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// An injection test, plotted pressure against injection rate, where a curve deflection and change of slope indicates the fracture breakdown pressure.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimStepTest", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("An injection test, plotted pressure against injection rate, where a curve deflection and change of slope indicates the fracture breakdown pressure.")]
    public partial class StimStepTest : Object 
    {

		/// <summary>
        /// A pressure and fluid rate data reading.
        /// </summary>
        [XmlElement("presMeasurement")]
        public List<StimPressureFlowRate> PresMeasurement { get; set; }
        /// <summary>
        /// The pressure necessary to extend the fracture once initiated. The fracture extension pressure may rise slightly with increasing fracture length and/or height because of friction pressure drop down the length of the fracture.
        /// </summary>
        [XmlElement("fractureExtensionPres")]
        public PressureMeasure FractureExtensionPres { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A pumping diagnostics session.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimPdatSession", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("A pumping diagnostics session.")]
    public partial class StimPdatSession : Object 
    {

        /// <summary>
        /// The name of the session.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A description of the session.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// The number of this pumping diagnostics session.
        /// </summary>
        [XmlElement("number")]
        public Int16? Number {
            get {
                return numberField;
            } 
            set { 
                numberField = value;
                this.NumberSpecified = true;
            }
        }

        private Int16? numberField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumberSpecified { get; set; }
        /// <summary>
        /// The date and time pumping began.
        /// </summary>
        [XmlElement("dTimPumpOn")]
        public DateTime? DateTimePumpOn {
            get {
                return dTimPumpOnField;
            } 
            set { 
                dTimPumpOnField = value;
                this.DateTimePumpOnSpecified = true;
            }
        }

        private DateTime? dTimPumpOnField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePumpOnSpecified { get; set; }
        /// <summary>
        /// The date and time pumping ended.
        /// </summary>
        [XmlElement("dTimPumpOff")]
        public DateTime? DateTimePumpOff {
            get {
                return dTimPumpOffField;
            } 
            set { 
                dTimPumpOffField = value;
                this.DateTimePumpOffSpecified = true;
            }
        }

        private DateTime? dTimPumpOffField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePumpOffSpecified { get; set; }
        /// <summary>
        /// The date and time at which a well ceases flowing and the valves are closed.
        /// </summary>
        [XmlElement("dTimWellShutin")]
        public DateTime? DateTimeWellShutin {
            get {
                return dTimWellShutinField;
            } 
            set { 
                dTimWellShutinField = value;
                this.DateTimeWellShutinSpecified = true;
            }
        }

        private DateTime? dTimWellShutinField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeWellShutinSpecified { get; set; }
        /// <summary>
        /// The date and time when the fluid in the fracture is completely leaked off into the formation and the fracture closes on its faces.
        /// </summary>
        [XmlElement("dTimFractureClose")]
        public DateTime? DateTimeFractureClose {
            get {
                return dTimFractureCloseField;
            } 
            set { 
                dTimFractureCloseField = value;
                this.DateTimeFractureCloseSpecified = true;
            }
        }

        private DateTime? dTimFractureCloseField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeFractureCloseSpecified { get; set; }
        /// <summary>
        /// The time between the shutin time and the pump on time.
        /// </summary>
        [XmlElement("pumpDuration")]
        public TimeMeasure PumpDuration { get; set; }
        /// <summary>
        /// Average bottomhole treatment pressure.
        /// </summary>
        [XmlElement("avgBottomholeTreatmentPres")]
        public PressureMeasure AveragegBottomholeTreatmentPres { get; set; }
        /// <summary>
        /// Bottomhole hydrostatic pressure.
        /// </summary>
        [XmlElement("bottomholeHydrostaticPres")]
        public PressureMeasure BottomholeHydrostaticPres { get; set; }
        /// <summary>
        /// The pressure at which gas begins to break out of an under saturated oil and form a free gas phase in the matrix or a gas cap.
        /// </summary>
        [XmlElement("bubblePointPres")]
        public PressureMeasure BubblePointPres { get; set; }
        /// <summary>
        /// The pressure when the fracture width becoms zero.
        /// </summary>
        [XmlElement("fractureClosePres")]
        public PressureMeasure FractureClosePres { get; set; }
        /// <summary>
        /// The pressure loss due to fluid friction with the pipe while a fluid is being pumped.
        /// </summary>
        [XmlElement("frictionPres")]
        public PressureMeasure FrictionPres { get; set; }
        /// <summary>
        /// Initial shutin pressure.
        /// </summary>
        [XmlElement("initialShutinPres")]
        public PressureMeasure InitialShutinPres { get; set; }
        /// <summary>
        /// The pressure of the liquids in the formation pores.
        /// </summary>
        [XmlElement("porePres")]
        public PressureMeasure PorePres { get; set; }
        /// <summary>
        /// Average bottomhole treatment flow rate.
        /// </summary>
        [XmlElement("avgBottomholeTreatmentRate")]
        public VolumeFlowRateMeasure AveragegBottomholeTreatmentRate { get; set; }
        /// <summary>
        /// The density of the fluid.
        /// </summary>
        [XmlElement("fluidDensity")]
        public DensityMeasure FluidDensity { get; set; }
        /// <summary>
        /// Base fluid volume entering equipment.
        /// </summary>
        [XmlElement("baseFluidVol")]
        public VolumeMeasure BaseFluidVol { get; set; }
        /// <summary>
        /// The volume of fluid in the wellbore.
        /// </summary>
        [XmlElement("wellboreVolume")]
        public VolumeMeasure WellboreVolume { get; set; }
        /// <summary>
        /// The measured depth of the wellbore to its injection point.
        /// </summary>
        [XmlElement("mdSurface")]
        public MeasuredDepthCoord MDSurface { get; set; }
        /// <summary>
        /// The measured depth of the bottom of the hole.
        /// </summary>
        [XmlElement("mdBottomhole")]
        public MeasuredDepthCoord MDBottomhole { get; set; }
        /// <summary>
        /// The measured depth of the middle perforation.
        /// </summary>
        [XmlElement("mdMidPerforation")]
        public MeasuredDepthCoord MDMidPerforation { get; set; }
        /// <summary>
        /// The true vertical depth of the middle perforation.
        /// </summary>
        [XmlElement("tvdMidPerforation")]
        public WellVerticalDepthCoord TvdMidPerforation { get; set; }
        /// <summary>
        /// The constant earth temperature at a given depth specific to a region.
        /// </summary>
        [XmlElement("surfaceTemperature")]
        public ThermodynamicTemperatureMeasure SurfaceTemperature { get; set; }
        /// <summary>
        /// Static bottomhole temperature.
        /// </summary>
        [XmlElement("bottomholeTemperature")]
        public ThermodynamicTemperatureMeasure BottomholeTemperature { get; set; }
        /// <summary>
        /// Temperature of the fluid at the surface.
        /// </summary>
        [XmlElement("surfaceFluidTemperature")]
        public ThermodynamicTemperatureMeasure SurfaceFluidTemperature { get; set; }
        /// <summary>
        /// The volume change of a fluid when pressure is applied.
        /// </summary>
        [XmlElement("fluidCompressibility")]
        public CompressibilityMeasure FluidCompressibility { get; set; }
        /// <summary>
        /// The volume change of a reservoir material when pressure is applied.
        /// </summary>
        [XmlElement("reservoirTotalCompressibility")]
        public CompressibilityMeasure ReservoirTotalCompressibility { get; set; }
        /// <summary>
        /// Power law component. As n decreases from 1, the fluid becomes more shear thinning. Reducing n produces more non-Newtonian behavior.
        /// </summary>
        [XmlElement("fluidNprimeFactor")]
        public Double? FluidNprimeFactor {
            get {
                return fluidNprimeFactorField;
            } 
            set { 
                fluidNprimeFactorField = value;
                this.FluidNprimeFactorSpecified = true;
            }
        }

        private Double? fluidNprimeFactorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FluidNprimeFactorSpecified { get; set; }
        /// <summary>
        /// The consistency index K is the shear stress or viscosity of the fluid at one sec-1 shear rate. An increasing K raises the effective viscosity.
        /// </summary>
        [XmlElement("fluidKprimeFactor")]
        public Double? FluidKprimeFactor {
            get {
                return fluidKprimeFactorField;
            } 
            set { 
                fluidKprimeFactorField = value;
                this.FluidKprimeFactorSpecified = true;
            }
        }

        private Double? fluidKprimeFactorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FluidKprimeFactorSpecified { get; set; }
        /// <summary>
        /// The heat required to raise one unit mass of a substance by one degree.
        /// </summary>
        [XmlElement("fluidSpecificHeat")]
        public SpecificHeatCapacityMeasure FluidSpecificHeat { get; set; }
        /// <summary>
        /// In physics, thermal conductivity is the property of a material describing its ability to conduct heat. It appears primarily in Fourier's Law for heat conduction. Thermal conductivity is measured in watts per kelvin-meter. Multiplied by a temperature difference (in kelvins) and an area (in square meters), and divided by a thickness (in meters), the thermal conductivity predicts the rate of energy loss (in watts) through a piece of material.
        /// </summary>
        [XmlElement("fluidThermalConductivity")]
        public ThermalConductivityMeasure FluidThermalConductivity { get; set; }
        /// <summary>
        /// Dimensional response to temperature change is expressed by its coefficient of thermal expansion. When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling. The degree of expansion divided by the change in temperature is called the material's coefficient of thermal expansion and generally varies with temperature.
        /// </summary>
        [XmlElement("fluidThermalExpansionCoefficient")]
        public ThermalVolumetricExpansionMeasure FluidThermalExpansionCoefficient { get; set; }
        /// <summary>
        /// A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.
        /// </summary>
        [XmlElement("fluidEfficiency")]
        public VolumePerVolumeMeasurePercent FluidEfficiency { get; set; }
        /// <summary>
        /// Foam quality percentage of foam for the job during the stimulation services.
        /// </summary>
        [XmlElement("foamQuality")]
        public VolumePerVolumeMeasurePercent FoamQuality { get; set; }
        /// <summary>
        /// The volume of the pad divided by the (volume of the pad + the volume of the proppant laden fluid).
        /// </summary>
        [XmlElement("percentPad")]
        public VolumePerVolumeMeasurePercent PercentPluggedAndAbandonedd { get; set; }
        /// <summary>
        /// The number of a stage associated with this diagnostics session.
        /// </summary>
        [XmlElement("stageNumber")]
        public Int16? StageNumber {
            get {
                return stageNumberField;
            } 
            set { 
                stageNumberField = value;
                this.StageNumberSpecified = true;
            }
        }

        private Int16? stageNumberField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StageNumberSpecified { get; set; }
        /// <summary>
        /// Are the calculations corrected for temperature. A value of "true" (or "1") indicates that the calculations were corrected for temperature. A value of "false" (or "0") or not given indicates otherwise.
        /// </summary>
        [XmlElement("temperatureCorrectionApplied")]
        public Boolean? TemperatureCorrectionApplied {
            get {
                return temperatureCorrectionAppliedField;
            } 
            set { 
                temperatureCorrectionAppliedField = value;
                this.TemperatureCorrectionAppliedSpecified = true;
            }
        }

        private Boolean? temperatureCorrectionAppliedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TemperatureCorrectionAppliedSpecified { get; set; }
		/// <summary>
        /// An injection test, plotted pressure against injection rate, where a curve deflection and change of slope indicates the fracture breakdown pressure.
        /// </summary>
        [XmlElement("stepRateTest")]
        public List<StimStepTest> StepRateTest { get; set; }
		/// <summary>
        /// A diagnostic test determining fluid efficiency.
        /// </summary>
        [XmlElement("fluidEfficiencyTest")]
        public List<StimFetTest> FluidEfficiencyTest { get; set; }
		/// <summary>
        /// A diagnostic test involving flowing a well back after treatment.
        /// </summary>
        [XmlElement("pumpFlowBackTest")]
        public List<StimPumpFlowBackTest> PumpFlowBackTest { get; set; }
		/// <summary>
        /// An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure.
        /// </summary>
        [XmlElement("stepDownTest")]
        public List<StimStepDownTest> StepDownTest { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - event log for stimulation jobs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimEvent", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - event log for stimulation jobs.")]
    public partial class StimEvent : Object 
    {

        /// <summary>
        /// Event number.
        /// </summary>
        [XmlElement("number")]
        public Int16? Number { get; set; }
        /// <summary>
        /// Date time of this event.
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// A short description of the event.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
        /// <summary>
        /// Stage number - use to reference an existing job stage entry.
        /// </summary>
        [XmlElement("numStage")]
        public Int16? NumStage {
            get {
                return numStageField;
            } 
            set { 
                numStageField = value;
                this.NumStageSpecified = true;
            }
        }

        private Int16? numStageField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumStageSpecified { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - proppants for stimulation jobs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimProppant", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - proppants for stimulation jobs.")]
    public partial class StimProppant : Object 
    {

        /// <summary>
        /// Proppant name.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Proppant type or Function.
        /// </summary>
        [XmlElement("kind")]
        public StimProppantType? Kind {
            get {
                return kindField;
            } 
            set { 
                kindField = value;
                this.KindSpecified = true;
            }
        }

        private StimProppantType? kindField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean KindSpecified { get; set; }
        /// <summary>
        /// Volume of the additive used.
        /// </summary>
        [XmlElement("weight")]
        public MassMeasure Weight { get; set; }
        /// <summary>
        /// The size of the sieve through which a proppant will pass. Measures the fineness of the grind.
        /// </summary>
        [XmlElement("sieveSize")]
        public String SieveSize { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - additive for stimulation jobs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimAdditive", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - additive for stimulation jobs.")]
    public partial class StimAdditive : Object 
    {

        /// <summary>
        /// Additive name.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Additive type or function.
        /// </summary>
        [XmlElement("kind")]
        public StimAdditiveType? Kind {
            get {
                return kindField;
            } 
            set { 
                kindField = value;
                this.KindSpecified = true;
            }
        }

        private StimAdditiveType? kindField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean KindSpecified { get; set; }
        /// <summary>
        /// Volume of the liquid additive used.
        /// </summary>
        [XmlElement("volume")]
        public VolumeMeasure Volume { get; set; }
        /// <summary>
        /// The mass of the dry additive used.
        /// </summary>
        [XmlElement("mass")]
        public MassMeasure Mass { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Stimulation Fluid Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimFluid", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Stimulation Fluid Component Schema.")]
    public partial class StimFluid : Object 
    {

        /// <summary>
        /// The name of the fluid.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Volume of fluid.
        /// </summary>
        [XmlElement("fluidVol")]
        public VolumeMeasure FluidVol { get; set; }
        /// <summary>
        /// Source of the water used in the fluid. 256 char max size.
        /// </summary>
        [XmlElement("waterSource")]
        public String WaterSource { get; set; }
		/// <summary>
        /// Additives used in the fluid.
        /// </summary>
        [XmlElement("additive")]
        public List<StimAdditive> Additive { get; set; }
        /// <summary>
        /// Proppants used in the fluid.
        /// </summary>
        [XmlElement("proppant")]
        public StimProppant Proppant { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Job stage for a well stimulation treatment, where one or more stages are part of a flow path, one or more flow paths are part of a treatment, and one or more treatments are part of a job.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimJobStage", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Job stage for a well stimulation treatment, where one or more stages are part of a flow path, one or more flow paths are part of a treatment, and one or more treatments are part of a job.")]
    public partial class StimJobStage : Object 
    {

        /// <summary>
        /// The type of stage for the stimulation job.
        /// </summary>
        [XmlElement("kind")]
        public StimStageType? Kind { get; set; }
        /// <summary>
        /// A human readable name for the stage.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A short description of the stage.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Stage number.
        /// </summary>
        [XmlElement("number")]
        public Int16? Number { get; set; }
        /// <summary>
        /// Date time of start of this stimulation stage.
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// Date time of end of this stimulation stage.
        /// </summary>
        [XmlElement("dTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set { 
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
            }
        }

        private DateTime? dTimEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndSpecified { get; set; }
        /// <summary>
        /// Total pumping time for this stage.
        /// </summary>
        [XmlElement("pumpTime")]
        public TimeMeasure PumpTime { get; set; }
        /// <summary>
        /// Starting liquid pump rate in volume per time at the surface.
        /// </summary>
        [XmlElement("startRateSurfaceLiquid")]
        public VolumeFlowRateMeasure StartRateSurfaceLiquid { get; set; }
        /// <summary>
        /// Final liquid pump rate in volume per time at the surface..
        /// </summary>
        [XmlElement("endRateSurfaceLiquid")]
        public VolumeFlowRateMeasure EndRateSurfaceLiquid { get; set; }
        /// <summary>
        /// Average liquid pump rate in volume per time at the surface.
        /// </summary>
        [XmlElement("avgRateSurfaceLiquid")]
        public VolumeFlowRateMeasure AveragegRateSurfaceLiquid { get; set; }
        /// <summary>
        /// Starting carbon dioxide pump rate in volume per time at the surface.
        /// </summary>
        [XmlElement("startRateSurfaceCO2")]
        public VolumeFlowRateMeasure StartRateSurfaceCO2 { get; set; }
        /// <summary>
        /// Final carbon dioxide pump rate in volume per time at the surface.
        /// </summary>
        [XmlElement("endRateSurfaceCO2")]
        public VolumeFlowRateMeasure EndRateSurfaceCO2 { get; set; }
        /// <summary>
        /// Average carbon dioxide pump rate in volume per time at the surface.
        /// </summary>
        [XmlElement("avgRateSurfaceCO2")]
        public VolumeFlowRateMeasure AveragegRateSurfaceCO2 { get; set; }
        /// <summary>
        /// Starting nitrogen pump rate in volume per time at the surface.
        /// </summary>
        [XmlElement("startStdRateSurfaceN2")]
        public StandardVolumePerTimeMeasure StartStdRateSurfaceN2 { get; set; }
        /// <summary>
        /// Final nitrogen pump rate in volume per time at the surface.
        /// </summary>
        [XmlElement("endStdRateSurfaceN2")]
        public StandardVolumePerTimeMeasure EndStdRateSurfaceN2 { get; set; }
        /// <summary>
        /// Average nitrogen pump rate in volume per time at the surface.
        /// </summary>
        [XmlElement("avgStdRateSurfaceN2")]
        public StandardVolumePerTimeMeasure AveragegStdRateSurfaceN2 { get; set; }
        /// <summary>
        /// Starting surface pressure.
        /// </summary>
        [XmlElement("startPresSurface")]
        public PressureMeasure StartPresSurface { get; set; }
        /// <summary>
        /// Final surface pressure.
        /// </summary>
        [XmlElement("endPresSurface")]
        public PressureMeasure EndPresSurface { get; set; }
        /// <summary>
        /// Average surface pressure.
        /// </summary>
        [XmlElement("averagePresSurface")]
        public PressureMeasure AverageeragePresSurface { get; set; }
        /// <summary>
        /// Starting pump rate in volume per time at bottomhole.
        /// </summary>
        [XmlElement("startPumpRateBottomhole")]
        public VolumeFlowRateMeasure StartPumpRateBottomhole { get; set; }
        /// <summary>
        /// Final pump rate in volume per time at bottomhole.
        /// </summary>
        [XmlElement("endPumpRateBottomhole")]
        public VolumeFlowRateMeasure EndPumpRateBottomhole { get; set; }
        /// <summary>
        /// Average pump rate in volume per time at bottomhole.
        /// </summary>
        [XmlElement("avgPumpRateBottomhole")]
        public VolumeFlowRateMeasure AveragegPumpRateBottomhole { get; set; }
        /// <summary>
        /// Starting bottomhole pressure.
        /// </summary>
        [XmlElement("startPresBottomhole")]
        public PressureMeasure StartPresBottomhole { get; set; }
        /// <summary>
        /// Final bottomhole pressure.
        /// </summary>
        [XmlElement("endPresBottomhole")]
        public PressureMeasure EndPresBottomhole { get; set; }
        /// <summary>
        /// Average bottomhole pressure.
        /// </summary>
        [XmlElement("averagePresBottomhole")]
        public PressureMeasure AverageeragePresBottomhole { get; set; }
        /// <summary>
        /// The beginning proppant concentration at the surface.
        /// </summary>
        [XmlElement("startProppantConcSurface")]
        public DensityMeasure StartProppantConcSurface { get; set; }
        /// <summary>
        /// The final proppant concentration at the surface.
        /// </summary>
        [XmlElement("endProppantConcSurface")]
        public DensityMeasure EndProppantConcSurface { get; set; }
        /// <summary>
        /// The average proppant concentration at the surface.
        /// </summary>
        [XmlElement("avgProppantConcSurface")]
        public DensityMeasure AveragegProppantConcSurface { get; set; }
        /// <summary>
        /// The beginning proppant concentration bottomhole.
        /// </summary>
        [XmlElement("startProppantConcBottomhole")]
        public DensityMeasure StartProppantConcBottomhole { get; set; }
        /// <summary>
        /// The final proppant concentration bottomhole.
        /// </summary>
        [XmlElement("endProppantConcBottomhole")]
        public DensityMeasure EndProppantConcBottomhole { get; set; }
        /// <summary>
        /// The average proppant concentration bottomhole.
        /// </summary>
        [XmlElement("avgProppantConcBottomhole")]
        public DensityMeasure AveragegProppantConcBottomhole { get; set; }
        /// <summary>
        /// Starting nitrogen foam rate.
        /// </summary>
        [XmlElement("startFoamRateN2")]
        public VolumeFlowRateMeasure StartFoamRateN2 { get; set; }
        /// <summary>
        /// Final nitrogen foam rate.
        /// </summary>
        [XmlElement("endFoamRateN2")]
        public VolumeFlowRateMeasure EndFoamRateN2 { get; set; }
        /// <summary>
        /// Starting carbon dioxide foam rate.
        /// </summary>
        [XmlElement("startFoamRateCO2")]
        public VolumeFlowRateMeasure StartFoamRateCO2 { get; set; }
        /// <summary>
        /// Final carbon dioxide foam rate.
        /// </summary>
        [XmlElement("endFoamRateCO2")]
        public VolumeFlowRateMeasure EndFoamRateCO2 { get; set; }
        /// <summary>
        /// The stage volume of the base stage.
        /// </summary>
        [XmlElement("fluidVolBase")]
        public VolumeMeasure FluidVolBase { get; set; }
        /// <summary>
        /// The volume of the slurry (dirty) stage.
        /// </summary>
        [XmlElement("fluidVolSlurry")]
        public VolumeMeasure FluidVolSlurry { get; set; }
        /// <summary>
        /// The starting slurry rate.
        /// </summary>
        [XmlElement("slurryRateBegin")]
        public VolumeFlowRateMeasure SlurryRateBegin { get; set; }
        /// <summary>
        /// The endinging slurry rate.
        /// </summary>
        [XmlElement("slurryRateEnd")]
        public VolumeFlowRateMeasure SlurryRateEnd { get; set; }
        /// <summary>
        /// The mass of the proppant at the wellhead.
        /// </summary>
        [XmlElement("proppantMassWellHead")]
        public MassMeasure ProppantMassWellHead { get; set; }
        /// <summary>
        /// The mass of the proppant.
        /// </summary>
        [XmlElement("proppantMass")]
        public MassMeasure ProppantMass { get; set; }
        /// <summary>
        /// Maximum pumping pressure.
        /// </summary>
        [XmlElement("maxPres")]
        public PressureMeasure MaxPres { get; set; }
        /// <summary>
        /// Maximum slurry rate.
        /// </summary>
        [XmlElement("maxSlurryRate")]
        public VolumeFlowRateMeasure MaxSlurryRate { get; set; }
        /// <summary>
        /// Maximum rate at the wellhead.
        /// </summary>
        [XmlElement("maxWellheadRate")]
        public VolumeFlowRateMeasure MaxWellheadRate { get; set; }
        /// <summary>
        /// Maximum nitrogen rate recorded at for the annulus injection for the zone of interest during the stimulation services.
        /// </summary>
        [XmlElement("maxN2StdRate")]
        public StandardVolumePerTimeMeasure MaxN2StdRate { get; set; }
        /// <summary>
        /// Maximum carbon dioxide flow rate recorded for the annulus injection for the zone of interest during the stimulation services.
        /// </summary>
        [XmlElement("maxCO2LiquidRate")]
        public VolumeFlowRateMeasure MaxCO2LiquidRate { get; set; }
        /// <summary>
        /// Stage maximum proppant concentration at the wellhead for the stage during the stimulation services.
        /// </summary>
        [XmlElement("maxPropConc")]
        public DensityMeasure MaxPropConc { get; set; }
        /// <summary>
        /// Maximum proppant concentration exiting equipment for the stage during the stimulation services.
        /// </summary>
        [XmlElement("maxSlurryPropConc")]
        public DensityMeasure MaxSlurryPropConc { get; set; }
        /// <summary>
        /// Average proppant concentration at the wellhead for the stage during the stimulation services.
        /// </summary>
        [XmlElement("avgPropConc")]
        public DensityMeasure AveragegPropConc { get; set; }
        /// <summary>
        /// Average proppant concentration exiting equipment for the stage during the stimulation services.
        /// </summary>
        [XmlElement("avgSlurryPropConc")]
        public DensityMeasure AveragegSlurryPropConc { get; set; }
        /// <summary>
        /// Average fluid temperature during the stage.
        /// </summary>
        [XmlElement("avgTemperature")]
        public ThermodynamicTemperatureMeasure AveragegTemperature { get; set; }
        /// <summary>
        /// Internal Gas Phase percentage of foam for the stage during the stimulation services.
        /// </summary>
        [XmlElement("avgInternalPhaseFraction")]
        public VolumePerVolumeMeasurePercent AveragegInternalPHaseFraction { get; set; }
        /// <summary>
        /// Base quality percentage of foam for the stage during the stimulation services.
        /// </summary>
        [XmlElement("avgBaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AveragegBaseFluidQuality { get; set; }
        /// <summary>
        /// Base quality nitrogen percentage of foam for the stage during the stimulation services.
        /// </summary>
        [XmlElement("avgN2BaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AveragegN2BaseFluidQuality { get; set; }
        /// <summary>
        /// Base quality carbon dioxide percent of foam for the stage during the stimulation services.
        /// </summary>
        [XmlElement("avgCO2BaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AveragegCO2BaseFluidQuality { get; set; }
        /// <summary>
        /// Hydraulic horse power used for stage.
        /// </summary>
        [XmlElement("avgHydraulicPower")]
        public PowerMeasure AveragegHydraulicPower { get; set; }
        /// <summary>
        /// Average base fluid rate.
        /// </summary>
        [XmlElement("avgBaseFluidRate")]
        public VolumeFlowRateMeasure AveragegBaseFluidRate { get; set; }
        /// <summary>
        /// Average slurry rate.
        /// </summary>
        [XmlElement("avgSlurryRate")]
        public VolumeFlowRateMeasure AveragegSlurryRate { get; set; }
        /// <summary>
        /// Average wellhead rate.
        /// </summary>
        [XmlElement("avgWellheadRate")]
        public VolumeFlowRateMeasure AveragegWellheadRate { get; set; }
        /// <summary>
        /// Average nitrogen rate.
        /// </summary>
        [XmlElement("avgN2StdRate")]
        public StandardVolumePerTimeMeasure AveragegN2StdRate { get; set; }
        /// <summary>
        /// Average carbon dioxide rate.
        /// </summary>
        [XmlElement("avgCO2Rate")]
        public VolumeFlowRateMeasure AveragegCO2Rate { get; set; }
        /// <summary>
        /// Base fluid volume entering equipment.
        /// </summary>
        [XmlElement("baseFluidVol")]
        public VolumeMeasure BaseFluidVol { get; set; }
        /// <summary>
        /// Slurry volume exiting equipment (assumption that this will enter well).
        /// </summary>
        [XmlElement("slurryVol")]
        public VolumeMeasure SlurryVol { get; set; }
        /// <summary>
        /// Slurry volume entering the well.
        /// </summary>
        [XmlElement("wellheadVol")]
        public VolumeMeasure WellheadVol { get; set; }
        /// <summary>
        /// PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the average of all the pmax pressures calculated for this stage.
        /// </summary>
        [XmlElement("maxPmaxPacPres")]
        public PressureMeasure MaxPmaxPluggedAndAbandonedcPres { get; set; }
        /// <summary>
        /// Maximum allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.
        /// </summary>
        [XmlElement("maxPmaxWeaklinkPres")]
        public PressureMeasure MaxPmaxWeaklinkPres { get; set; }
        /// <summary>
        /// Maximum gel mixing rate entering the flow stream for the stage.
        /// </summary>
        [XmlElement("maxGelRate")]
        public VolumeFlowRateMeasure MaxGelRate { get; set; }
        /// <summary>
        /// Maximum oil mixing rate entering the flow stream for the stage.
        /// </summary>
        [XmlElement("maxOilRate")]
        public VolumeFlowRateMeasure MaxOilRate { get; set; }
        /// <summary>
        /// Maximum acid mixing rate entering the flow stream for the stage.
        /// </summary>
        [XmlElement("maxAcidRate")]
        public VolumeFlowRateMeasure MaxAcidRate { get; set; }
        /// <summary>
        /// Average gel mixing rate entering the flow stream for the stage.
        /// </summary>
        [XmlElement("avgGelRate")]
        public VolumeFlowRateMeasure AveragegGelRate { get; set; }
        /// <summary>
        /// Average oil mixing rate entering the flow stream for the stage.
        /// </summary>
        [XmlElement("avgOilRate")]
        public VolumeFlowRateMeasure AveragegOilRate { get; set; }
        /// <summary>
        /// Average acid mixing rate entering the flow stream for the stage.
        /// </summary>
        [XmlElement("avgAcidRate")]
        public VolumeFlowRateMeasure AveragegAcidRate { get; set; }
        /// <summary>
        /// Gel fluid volume for the stage during the stimulation services.
        /// </summary>
        [XmlElement("gelVolume")]
        public VolumeMeasure GelVolume { get; set; }
        /// <summary>
        /// Oil fluid volume for the stage during the stimulation services.
        /// </summary>
        [XmlElement("oilVolume")]
        public VolumeMeasure OilVolume { get; set; }
        /// <summary>
        /// Acid fluid volume for the stage during the stimulation services.
        /// </summary>
        [XmlElement("acidVolume")]
        public VolumeMeasure AcidVolume { get; set; }
        /// <summary>
        /// Base fluid volume recorded after equipment set to bypass.
        /// </summary>
        [XmlElement("baseFluidBypassVol")]
        public VolumeMeasure BaseFluidBypassVol { get; set; }
        /// <summary>
        /// Numeric value used to scale a calculated rheological friction.
        /// </summary>
        [XmlElement("frictionFactor")]
        public Double? FrictionFactor {
            get {
                return frictionFactorField;
            } 
            set { 
                frictionFactorField = value;
                this.FrictionFactorSpecified = true;
            }
        }

        private Double? frictionFactorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FrictionFactorSpecified { get; set; }
        /// <summary>
        /// The fluid used for this stage of the stimulation job.
        /// </summary>
        [XmlElement("stageFluid")]
        public StimFluid StageFluid { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// In a production enhancement job, this item constitutes the data for a tubular in the hole.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimTubular", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("In a production enhancement job, this item constitutes the data for a tubular in the hole.")]
    public partial class StimTubular : Object 
    {

        /// <summary>
        /// The type of tubular (e.g., casing, tubing, liner, packer, open hole, other).
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// The inside diameter of the tubular used.
        /// </summary>
        [XmlElement("id")]
        public LengthMeasure Id { get; set; }
        /// <summary>
        /// The outside diameter of the tubular used.
        /// </summary>
        [XmlElement("od")]
        public LengthMeasure OuterDiameter { get; set; }
        /// <summary>
        /// The weight per length of the tubular.
        /// </summary>
        [XmlElement("weight")]
        public MassPerLengthMeasure Weight { get; set; }
        /// <summary>
        /// The measured depth of the top of the tubular.
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// The measured depth of the bottom of the tubular.
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// The true vertical depth of the top of the tubular.
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// The true vertical depth of the bottom of the tubular.
        /// </summary>
        [XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom { get; set; }
        /// <summary>
        /// The volume per length of the tubular.
        /// </summary>
        [XmlElement("volumeFactor")]
        public VolumePerLengthMeasure VolumeFactor { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - the flow path for a well stimulation job.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimFlowPath", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - the flow path for a well stimulation job.")]
    public partial class StimFlowPath : Object 
    {

        /// <summary>
        /// The type of flow path.
        /// </summary>
        [XmlElement("kind")]
        public StimStageFlowPathType? Kind { get; set; }
        /// <summary>
        /// A human readable name for the flow path.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A short description of the flow path.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Maximum pressure.
        /// </summary>
        [XmlElement("maxTreatmentPres")]
        public PressureMeasure MaxTreatmentPres { get; set; }
        /// <summary>
        /// Maximum dirty rate.
        /// </summary>
        [XmlElement("maxSlurryRate")]
        public VolumeFlowRateMeasure MaxSlurryRate { get; set; }
        /// <summary>
        /// Maximum rate at the wellhead.
        /// </summary>
        [XmlElement("maxWellheadRate")]
        public VolumeFlowRateMeasure MaxWellheadRate { get; set; }
        /// <summary>
        /// Maximum nitrogen rate recorded at for the annulus injection for the Zone of interest during the stimulation services.
        /// </summary>
        [XmlElement("maxN2StdRate")]
        public StandardVolumePerTimeMeasure MaxN2StdRate { get; set; }
        /// <summary>
        /// Maximum carbon dioxide flow rate recorded for the annulus injection for the zone of interest during the stimulation services.
        /// </summary>
        [XmlElement("maxCO2LiquidRate")]
        public VolumeFlowRateMeasure MaxCO2LiquidRate { get; set; }
        /// <summary>
        /// Maximum gel flow rate during the stimulation services.
        /// </summary>
        [XmlElement("maxGelRate")]
        public VolumeFlowRateMeasure MaxGelRate { get; set; }
        /// <summary>
        /// Maximum oil flow rate during the stimulation services.
        /// </summary>
        [XmlElement("maxOilRate")]
        public VolumeFlowRateMeasure MaxOilRate { get; set; }
        /// <summary>
        /// Maximum acid flow rate during the stimulation services.
        /// </summary>
        [XmlElement("maxAcidRate")]
        public VolumeFlowRateMeasure MaxAcidRate { get; set; }
        /// <summary>
        /// Maximum proppant concentration at the wellhead.
        /// </summary>
        [XmlElement("maxPropConc")]
        public DensityMeasure MaxPropConc { get; set; }
        /// <summary>
        /// Maximum proppant concentration exiting equipment.
        /// </summary>
        [XmlElement("maxSlurryPropConc")]
        public DensityMeasure MaxSlurryPropConc { get; set; }
        /// <summary>
        /// Average pressure.
        /// </summary>
        [XmlElement("avgTreatPres")]
        public PressureMeasure AveragegTreatPres { get; set; }
        /// <summary>
        /// Average base fluid flow rate.
        /// </summary>
        [XmlElement("avgBaseFluidRate")]
        public VolumeFlowRateMeasure AveragegBaseFluidRate { get; set; }
        /// <summary>
        /// Average slurry flow rate.
        /// </summary>
        [XmlElement("avgSlurryRate")]
        public VolumeFlowRateMeasure AveragegSlurryRate { get; set; }
        /// <summary>
        /// Average wellhead rate.
        /// </summary>
        [XmlElement("avgWellheadRate")]
        public VolumeFlowRateMeasure AveragegWellheadRate { get; set; }
        /// <summary>
        /// Average nitrigen rate.
        /// </summary>
        [XmlElement("avgN2StdRate")]
        public StandardVolumePerTimeMeasure AveragegN2StdRate { get; set; }
        /// <summary>
        /// Average carbon dioxide rate.
        /// </summary>
        [XmlElement("avgCO2LiquidRate")]
        public VolumeFlowRateMeasure AveragegCO2LiquidRate { get; set; }
        /// <summary>
        /// Average gel mixing rate entering the flow stream for the flow path.
        /// </summary>
        [XmlElement("avgGelRate")]
        public VolumeFlowRateMeasure AveragegGelRate { get; set; }
        /// <summary>
        /// Average oil mixing rate entering the flow stream for the flow path.
        /// </summary>
        [XmlElement("avgOilRate")]
        public VolumeFlowRateMeasure AveragegOilRate { get; set; }
        /// <summary>
        /// Average acid mixing rate entering the flow stream for the flow path.
        /// </summary>
        [XmlElement("avgAcidRate")]
        public VolumeFlowRateMeasure AveragegAcidRate { get; set; }
        /// <summary>
        /// Average proppant concentration at the wellhead.
        /// </summary>
        [XmlElement("avgPropConc")]
        public DensityMeasure AveragegPropConc { get; set; }
        /// <summary>
        /// Average proppant concentration exiting equipment.
        /// </summary>
        [XmlElement("avgSlurryPropConc")]
        public DensityMeasure AveragegSlurryPropConc { get; set; }
        /// <summary>
        /// Average fluid temperature during the stimulation services for this flow path.
        /// </summary>
        [XmlElement("avgTemperature")]
        public ThermodynamicTemperatureMeasure AveragegTemperature { get; set; }
        /// <summary>
        /// Internal gas phase percentage of foam for the flowpath during the stimulation services.
        /// </summary>
        [XmlElement("avgIntervalPhaseFraction")]
        public Int16? AveragegIntervalPHaseFraction {
            get {
                return avgIntervalPhaseFractionField;
            } 
            set { 
                avgIntervalPhaseFractionField = value;
                this.AveragegIntervalPHaseFractionSpecified = true;
            }
        }

        private Int16? avgIntervalPhaseFractionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AveragegIntervalPHaseFractionSpecified { get; set; }
        /// <summary>
        /// Base fluid quality percentage of foam for the flowpath during the stimulation services.
        /// </summary>
        [XmlElement("avgBaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AveragegBaseFluidQuality { get; set; }
        /// <summary>
        /// Base fluid quality nitrogen percentage of foam for the flowpath during the stimulation services.
        /// </summary>
        [XmlElement("avgN2BaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AveragegN2BaseFluidQuality { get; set; }
        /// <summary>
        /// Base fluid quality carbon dioxide percentage of foam for the flowpath during the stimulation services.
        /// </summary>
        [XmlElement("avgCO2BaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AveragegCO2BaseFluidQuality { get; set; }
        /// <summary>
        /// Hydraulic horse power used for flowpath.
        /// </summary>
        [XmlElement("avgHydraulicPower")]
        public PowerMeasure AveragegHydraulicPower { get; set; }
        /// <summary>
        /// Base fluid volume entering equipment.
        /// </summary>
        [XmlElement("baseFluidVol")]
        public VolumeMeasure BaseFluidVol { get; set; }
        /// <summary>
        /// Dirty volume exiting equipment (assumption that this will enter well).
        /// </summary>
        [XmlElement("slurryVol")]
        public VolumeMeasure SlurryVol { get; set; }
        /// <summary>
        /// Fluid volume entering the well.
        /// </summary>
        [XmlElement("wellheadVol")]
        public VolumeMeasure WellheadVol { get; set; }
        /// <summary>
        /// Nitrogen volume.
        /// </summary>
        [XmlElement("stdVolN2")]
        public StandardVolumeMeasure StdVolN2 { get; set; }
        /// <summary>
        /// The mass of carbon dioxide used.
        /// </summary>
        [XmlElement("massCO2")]
        public MassMeasure MassCO2 { get; set; }
        /// <summary>
        /// Gel fluid volume for the flowpath during the stimulation services.
        /// </summary>
        [XmlElement("gelVol")]
        public VolumeMeasure GelVol { get; set; }
        /// <summary>
        /// Oil fluid volume for the flowpath during the stimulation services.
        /// </summary>
        [XmlElement("oilVol")]
        public VolumeMeasure OilVol { get; set; }
        /// <summary>
        /// Acid fluid volume for the flowpath during the stimulation services.
        /// </summary>
        [XmlElement("acidVol")]
        public VolumeMeasure AcidVol { get; set; }
        /// <summary>
        /// Base volume recorded after equipment set to bypass.
        /// </summary>
        [XmlElement("baseFluidBypassVol")]
        public VolumeMeasure BaseFluidBypassVol { get; set; }
        /// <summary>
        /// The mass of proppant used.
        /// </summary>
        [XmlElement("propMass")]
        public MassMeasure PropMass { get; set; }
        /// <summary>
        /// PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the maximum of all the pmax pressures calculated for this flow path. 
        /// </summary>
        [XmlElement("maxPmaxPacPres")]
        public PressureMeasure MaxPmaxPluggedAndAbandonedcPres { get; set; }
        /// <summary>
        /// Maximum allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.
        /// </summary>
        [XmlElement("maxPmaxWeaklinkPres")]
        public PressureMeasure MaxPmaxWeaklinkPres { get; set; }
        /// <summary>
        /// PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the average of all the pmax pressures calculated for this flow path.
        /// </summary>
        [XmlElement("avgPmaxPacPres")]
        public PressureMeasure AveragegPmaxPluggedAndAbandonedcPres { get; set; }
        /// <summary>
        /// Average allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.
        /// </summary>
        [XmlElement("avgPmaxWeaklinkPres")]
        public PressureMeasure AveragegPmaxWeaklinkPres { get; set; }
        /// <summary>
        /// The pressure 5 minutes after shutin.
        /// </summary>
        [XmlElement("shutinPres5Min")]
        public PressureMeasure ShutinPres5Min { get; set; }
        /// <summary>
        /// The pressure 10 minutes after shutin.
        /// </summary>
        [XmlElement("shutinPres10Min")]
        public PressureMeasure ShutinPres10Min { get; set; }
        /// <summary>
        /// The pressure 15 minutes after shutin.
        /// </summary>
        [XmlElement("shutinPres15Min")]
        public PressureMeasure ShutinPres15Min { get; set; }
        /// <summary>
        /// The pressure at which the formation broke.
        /// </summary>
        [XmlElement("breakDownPres")]
        public PressureMeasure BreakDownPres { get; set; }
        /// <summary>
        /// The volume of the pad divided by the (volume of the pad + the volume of the proppant laden fluid).
        /// </summary>
        [XmlElement("percentPad")]
        public VolumePerVolumeMeasurePercent PercentPluggedAndAbandonedd { get; set; }
        /// <summary>
        /// The formation fracture gradient for this treatment interval.
        /// </summary>
        [XmlElement("fractureGradient")]
        public ForcePerVolumeMeasure FractureGradient { get; set; }
        /// <summary>
        /// The friction factor for the pipe or tubing.
        /// </summary>
        [XmlElement("pipeFrictionFactor")]
        public Double? PipeFrictionFactor {
            get {
                return pipeFrictionFactorField;
            } 
            set { 
                pipeFrictionFactorField = value;
                this.PipeFrictionFactorSpecified = true;
            }
        }

        private Double? pipeFrictionFactorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PipeFrictionFactorSpecified { get; set; }
        /// <summary>
        /// The number of stages for this flowpath.
        /// </summary>
        [XmlElement("stageCount")]
        public Int16? StageCount {
            get {
                return stageCountField;
            } 
            set { 
                stageCountField = value;
                this.StageCountSpecified = true;
            }
        }

        private Int16? stageCountField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StageCountSpecified { get; set; }
		/// <summary>
        /// The tubulars used for this flowpath.
        /// </summary>
        [XmlElement("tubular")]
        public List<StimTubular> Tubular { get; set; }
		/// <summary>
        /// The set of stages for this flowpath.
        /// </summary>
        [XmlElement("jobStage")]
        public List<StimJobStage> JobStage { get; set; }
		/// <summary>
        /// Events which happened during treatment of this flowpath.
        /// </summary>
        [XmlElement("jobEvent")]
        public List<StimEvent> JobEvent { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A pressure measurement taken a certain time after the well has been shutin. This object is intended to be used with the performance enhancement schemas.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimShutInPressure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("A pressure measurement taken a certain time after the well has been shutin. This object is intended to be used with the performance enhancement schemas.")]
    public partial class StimShutInPressure : Object 
    {

        /// <summary>
        /// The shutin pressure.
        /// </summary>
        [XmlElement("pres")]
        public PressureMeasure Pres { get; set; }
        /// <summary>
        /// The time span after shutin at which the pressure was measured.
        /// </summary>
        [XmlElement("timeAfterShutin")]
        public TimeMeasure TimeAfterShutin { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The name and amount of a proppant used during some time period in a    performance enhancement job.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimProppantUsage", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The name and amount of a proppant used during some time period in a    performance enhancement job.")]
    public partial class StimProppantUsage : Object 
    {

        /// <summary>
        /// The name of the proppant.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The mass of the proppant used.
        /// </summary>
        [XmlElement("mass")]
        public MassMeasure Mass { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information for a well stimulation job treatment interval
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimJobInterval", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Information for a well stimulation job treatment interval")]
    public partial class StimJobInterval : Object 
    {

        /// <summary>
        /// Identifier for the stimulation treatment interval unique to the stimulation job.
        /// </summary>
        [XmlElement("uidTreatmentInterval")]
        public String UidTreatmentInterval { get; set; }
        /// <summary>
        /// Human recognizable context for the well stimulation treatment name.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The treatment number associated with this interval.
        /// </summary>
        [XmlElement("number")]
        public Int16? Number { get; set; }
        /// <summary>
        /// Starting date and time for the stimulation treatment interval.
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// Ending date and time for the stimulation treatment interval.
        /// </summary>
        [XmlElement("dTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set { 
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
            }
        }

        private DateTime? dTimEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndSpecified { get; set; }
        /// <summary>
        /// The name of the formation being stimulated.
        /// </summary>
        [XmlElement("formationName")]
        public String FormationName { get; set; }
        /// <summary>
        /// Measured depth of the top of the formation.
        /// </summary>
        [XmlElement("mdFormationTop")]
        public MeasuredDepthCoord MDFormationTop { get; set; }
        /// <summary>
        /// Measured depth of the bottom of the formation.
        /// </summary>
        [XmlElement("mdFormationBottom")]
        public MeasuredDepthCoord MDFormationBottom { get; set; }
        /// <summary>
        /// True vertical depth of the top of the formation.
        /// </summary>
        [XmlElement("tvdFormationTop")]
        public WellVerticalDepthCoord TvdFormationTop { get; set; }
        /// <summary>
        /// True vertical depth of the bottom of the formation.
        /// </summary>
        [XmlElement("tvdFormationBottom")]
        public WellVerticalDepthCoord TvdFormationBottom { get; set; }
        /// <summary>
        /// A name for the open hole. To be used for open hole completions.
        /// </summary>
        [XmlElement("openHoleName")]
        public String OpenHoleName { get; set; }
        /// <summary>
        /// The diameter of the open hole.
        /// </summary>
        [XmlElement("openHoleDiameter")]
        public LengthMeasure OpenHoleDiameter { get; set; }
        /// <summary>
        /// Measured depth of the top open hole.
        /// </summary>
        [XmlElement("mdOpenHoleTop")]
        public MeasuredDepthCoord MDOpenHoleTop { get; set; }
        /// <summary>
        /// Measured depth of the bottom open hole.
        /// </summary>
        [XmlElement("mdOpenHoleBottom")]
        public MeasuredDepthCoord MDOpenHoleBottom { get; set; }
        /// <summary>
        /// True vertical depth of the top open hole.
        /// </summary>
        [XmlElement("tvdOpenHoleTop")]
        public WellVerticalDepthCoord TvdOpenHoleTop { get; set; }
        /// <summary>
        /// True vertical depth of the bottom open hole.
        /// </summary>
        [XmlElement("tvdOpenHoleBottom")]
        public WellVerticalDepthCoord TvdOpenHoleBottom { get; set; }
        /// <summary>
        /// The total friction pressure loss.
        /// </summary>
        [XmlElement("totalFrictionPresLoss")]
        public PressureMeasure TotalFrictionPresLoss { get; set; }
        /// <summary>
        /// The total pumping time for the treatment treatment interval.
        /// </summary>
        [XmlElement("totalPumpTime")]
        public TimeMeasure TotalPumpTime { get; set; }
        /// <summary>
        /// The highest tubing pressure of any stage for the treatment interval.
        /// </summary>
        [XmlElement("maxPresTubing")]
        public PressureMeasure MaxPresTubing { get; set; }
        /// <summary>
        /// The highest casing pressure of any stage for the treatment interval.
        /// </summary>
        [XmlElement("maxPresCasing")]
        public PressureMeasure MaxPresCAsing { get; set; }
        /// <summary>
        /// The highest annulus pressure of any stage for the treatment interval.
        /// </summary>
        [XmlElement("maxPresAnnulus")]
        public PressureMeasure MaxPresAnnulus { get; set; }
        /// <summary>
        /// Maximum tubing fluid pumping rate of any stage for the treatment interval.
        /// </summary>
        [XmlElement("maxFluidRateTubing")]
        public VolumeFlowRateMeasure MaxFluidRateTubing { get; set; }
        /// <summary>
        /// Maximum casing fluid pumping rate of any stage for the treatment interval.
        /// </summary>
        [XmlElement("maxFluidRateCasing")]
        public VolumeFlowRateMeasure MaxFluidRateCAsing { get; set; }
        /// <summary>
        /// Maximum annulus fluid pumping rate of any stage for the treatment interval.
        /// </summary>
        [XmlElement("maxFluidRateAnnulus")]
        public VolumeFlowRateMeasure MaxFluidRateAnnulus { get; set; }
        /// <summary>
        /// The average tubing pressure of any stage for the treatment interval.
        /// </summary>
        [XmlElement("avgPresTubing")]
        public PressureMeasure AveragegPresTubing { get; set; }
        /// <summary>
        /// The average casing pressure of any stage for the treatment interval.
        /// </summary>
        [XmlElement("avgPresCasing")]
        public PressureMeasure AveragegPresCAsing { get; set; }
        /// <summary>
        /// The average annulus pressure for any stage for the treatment interval.
        /// </summary>
        [XmlElement("avgPresAnnulus")]
        public PressureMeasure AveragegPresAnnulus { get; set; }
        /// <summary>
        /// The pressure at which the formation fractures and accepts injected fluid.
        /// </summary>
        [XmlElement("breakDownPres")]
        public PressureMeasure BreakDownPres { get; set; }
        /// <summary>
        /// The average pressure for the treatment interval across stages for all flowpaths for the treatment.
        /// </summary>
        [XmlElement("averagePres")]
        public PressureMeasure AverageeragePres { get; set; }
        /// <summary>
        /// Average base fluid pumping rate of all stages for the treatment interval.
        /// </summary>
        [XmlElement("avgBaseFluidReturnRate")]
        public VolumeFlowRateMeasure AveragegBaseFluidReturnRate { get; set; }
        /// <summary>
        /// Average slurry pumping rate of all stages for the treatment interval.
        /// </summary>
        [XmlElement("avgSlurryReturnRate")]
        public VolumeFlowRateMeasure AveragegSlurryReturnRate { get; set; }
        /// <summary>
        /// Average bottomhole treatment flow rate.
        /// </summary>
        [XmlElement("avgBottomholeRate")]
        public VolumeFlowRateMeasure AveragegBottomholeRate { get; set; }
        /// <summary>
        /// Total volume pumped for the interval.
        /// </summary>
        [XmlElement("totalVolume")]
        public VolumeMeasure TotalVolume { get; set; }
        /// <summary>
        /// The maximum proppant concentration on the surface.
        /// </summary>
        [XmlElement("maxProppantConcSurface")]
        public DensityMeasure MaxProppantConcSurface { get; set; }
        /// <summary>
        /// The maximum proppant concentration at the bottom of the wellbore.
        /// </summary>
        [XmlElement("maxProppantConcBottomhole")]
        public DensityMeasure MaxProppantConcBottomhole { get; set; }
        /// <summary>
        /// The average proppant concentration on the surface.
        /// </summary>
        [XmlElement("avgProppantConcSurface")]
        public DensityMeasure AveragegProppantConcSurface { get; set; }
        /// <summary>
        /// The average proppant concentration at the bottom of the hole.
        /// </summary>
        [XmlElement("avgProppantConcBottomhole")]
        public DensityMeasure AveragegProppantConcBottomhole { get; set; }
        /// <summary>
        /// The proppant concentration at the perforations.
        /// </summary>
        [XmlElement("perfproppantConc")]
        public DensityMeasure PerfproppantConc { get; set; }
        /// <summary>
        /// The total mass of proppant used in the interval.
        /// </summary>
        [XmlElement("totalProppantMass")]
        public MassMeasure TotalProppantMass { get; set; }
		/// <summary>
        /// The total mass of a particular proppant used in an interval.
        /// </summary>
        [XmlElement("totalProppantUsage")]
        public List<StimProppantUsage> TotalProppantUsage { get; set; }
        /// <summary>
        /// Total proppant mass used as a percent of the design mass.
        /// </summary>
        [XmlElement("percentProppantPumped")]
        public VolumePerVolumeMeasurePercent PercentProppantPumped { get; set; }
        /// <summary>
        /// The weight of proppant left in the wellbore after pumping has stopped.
        /// </summary>
        [XmlElement("wellboreProppantMass")]
        public MassMeasure WellboreProppantMass { get; set; }
		/// <summary>
        /// Name of the proppant used for the treatment interval.
        /// </summary>
        [XmlElement("proppantName")]
        public List<String> ProppantName { get; set; }
        /// <summary>
        /// The weight of proppant placed in the formation.
        /// </summary>
        [XmlElement("formationProppantMass")]
        public MassMeasure FormationProppantMass { get; set; }
        /// <summary>
        /// Total number of perforation balls used in the stimulation job.
        /// </summary>
        [XmlElement("perfBallCount")]
        public Int16? PerfBallCount {
            get {
                return perfBallCountField;
            } 
            set { 
                perfBallCountField = value;
                this.PerfBallCountSpecified = true;
            }
        }

        private Int16? perfBallCountField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PerfBallCountSpecified { get; set; }
        /// <summary>
        /// Volume of nitrogen used in the treatment interval.
        /// </summary>
        [XmlElement("totalN2StdVolume")]
        public StandardVolumeMeasure TotalN2StdVolume { get; set; }
        /// <summary>
        /// Mass of carbon dioxide used in the treatment interval.
        /// </summary>
        [XmlElement("totalCO2Mass")]
        public MassMeasure TotalCO2Mass { get; set; }
		/// <summary>
        /// The names of the each fluid used in this interval.
        /// </summary>
        [XmlElement("fluidName")]
        public List<String> FluidName { get; set; }
        /// <summary>
        /// The formation fracture gradient for this treatment interval.
        /// </summary>
        [XmlElement("fractureGradient")]
        public ForcePerVolumeMeasure FractureGradient { get; set; }
        /// <summary>
        /// The formation fracture gradient for this treatment interval after treatment.
        /// </summary>
        [XmlElement("finalFractureGradient")]
        public ForcePerVolumeMeasure FinalFractureGradient { get; set; }
        /// <summary>
        /// The initial shutin pressure.
        /// </summary>
        [XmlElement("initialShutinPres")]
        public PressureMeasure InitialShutinPres { get; set; }
		/// <summary>
        /// The final shutin pressure at a timespan after shutin.
        /// </summary>
        [XmlElement("shutinPres")]
        public List<StimShutInPressure> ShutinPres { get; set; }
        /// <summary>
        /// The screen out pressure.
        /// </summary>
        [XmlElement("screenOutPres")]
        public PressureMeasure ScreenOutPres { get; set; }
        /// <summary>
        /// Carbon dioxide hydraulic horsepower ordered for the interval.
        /// </summary>
        [XmlElement("hhpOrderedCO2")]
        public PowerMeasure HhpOrderedCO2 { get; set; }
        /// <summary>
        /// Fluid hydraulic horsepower ordered for the interval.
        /// </summary>
        [XmlElement("hhpOrderedFluid")]
        public PowerMeasure HhpOrderedFluid { get; set; }
        /// <summary>
        /// Carbon dioxide hydraulic horsepower actually used for the interval.
        /// </summary>
        [XmlElement("hhpUsedCO2")]
        public PowerMeasure HhpUsedCO2 { get; set; }
        /// <summary>
        /// Fluid hydraulic horsepower actually used for the interval.
        /// </summary>
        [XmlElement("hhpUsedFluid")]
        public PowerMeasure HhpUsedFluid { get; set; }
        /// <summary>
        /// The size of the perforation balls used.
        /// </summary>
        [XmlElement("perfBallSize")]
        public LengthMeasure PerfBallSize { get; set; }
        /// <summary>
        /// Boolean as to whether or not screen out occurred. True ("true" or "1") indicates that screen out occurred. False ("false" or "0") or not given indicates otherwise.
        /// </summary>
        [XmlElement("screenedOut")]
        public Boolean? ScreenedOut {
            get {
                return screenedOutField;
            } 
            set { 
                screenedOutField = value;
                this.ScreenedOutSpecified = true;
            }
        }

        private Boolean? screenedOutField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ScreenedOutSpecified { get; set; }
        /// <summary>
        /// Average fracture width created during the treatment during the stimulation services.
        /// </summary>
        [XmlElement("avgFractureWidth")]
        public LengthMeasure AveragegFractureWidth { get; set; }
        /// <summary>
        /// Average conductivity of fracture created during the treatment supported by proppant during the stimulation services Hydraulic conductivity, symbolically represented as K, is a property of vascular plants, soil or rock, that describes the ease with which water can move through pore spaces or fractures. It depends on the intrinsic permeability of the material and on the degree of saturation. Saturated hydraulic conductivity, Ksat, describes water movement through saturated media.
        /// </summary>
        [XmlElement("avgConductivity")]
        public VelocityMeasure AveragegConductivity { get; set; }
        /// <summary>
        /// The difference between the pressure which holds a fracture closed (minimal principal stress) and that pressure which is necessary to open the fracture.
        /// </summary>
        [XmlElement("netPres")]
        public PressureMeasure NetPres { get; set; }
        /// <summary>
        /// An analysis parameter used in hydraulic fracture design to indicate the pressure at which the fracture effectively closes without proppant in place.
        /// </summary>
        [XmlElement("closurePres")]
        public PressureMeasure ClosurePres { get; set; }
        /// <summary>
        /// Delta time recorded for the closure of the fracture to occur during the stimulation services.
        /// </summary>
        [XmlElement("closureDuration")]
        public TimeMeasure ClosureDuration { get; set; }
		/// <summary>
        /// The flow paths of this stimulation job treatment interval.
        /// </summary>
        [XmlElement("flowPath")]
        public List<StimFlowPath> FlowPluggedAndAbandonedth { get; set; }
		/// <summary>
        /// A pumping diagnostics session.
        /// </summary>
        [XmlElement("pdatSession")]
        public List<StimPdatSession> PdatSession { get; set; }
		/// <summary>
        /// Reservoir Interval Component Schema.
        /// </summary>
        [XmlElement("reservoirInterval")]
        public List<StimReservoirInterval> ReservoirInterval { get; set; }
		/// <summary>
        /// A set of perforations being stimulated.
        /// </summary>
        [XmlElement("perforationInterval")]
        public List<StimPerforationSet> PerforationInterval { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML well stimulation Job.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_stimJob", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML well stimulation Job.")]
    public partial class StimJob : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the well stimulation job.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Type of well stimulation job.
        /// </summary>
        [XmlElement("kind")]
        public String Kind { get; set; }
        /// <summary>
        /// UNSPSC(Segment 71) Commodity Code from Oil and gas extraction and production enhancement services family.
        /// </summary>
        [XmlElement("commodityCode")]
        public PIDXCommodityCode? CommodityCode {
            get {
                return commodityCodeField;
            } 
            set { 
                commodityCodeField = value;
                this.CommodityCodeSpecified = true;
            }
        }

        private PIDXCommodityCode? commodityCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CommodityCodeSpecified { get; set; }
        /// <summary>
        /// Name of the well stimulation contractor.
        /// </summary>
        [XmlElement("serviceCompany")]
        public String ServiceCompany { get; set; }
        /// <summary>
        /// Name of service company supervisor.
        /// </summary>
        [XmlElement("supervisor")]
        public String Supervisor { get; set; }
        /// <summary>
        /// The API or equivalent identifier number for the well.
        /// </summary>
        [XmlElement("apiNumber")]
        public String ApiNumber { get; set; }
        /// <summary>
        /// Customer or company name.
        /// </summary>
        [XmlElement("customerName")]
        public String CustomerName { get; set; }
        /// <summary>
        /// Date and time at which the stimulation contractor arrives on location.
        /// </summary>
        [XmlElement("dTimArrival")]
        public DateTime? DateTimeArrival {
            get {
                return dTimArrivalField;
            } 
            set { 
                dTimArrivalField = value;
                this.DateTimeArrivalSpecified = true;
            }
        }

        private DateTime? dTimArrivalField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeArrivalSpecified { get; set; }
        /// <summary>
        /// Start date and time of well stimulation Job.
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// Ending date and time of well stimulation job.
        /// </summary>
        [XmlElement("dTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set { 
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
            }
        }

        private DateTime? dTimEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndSpecified { get; set; }
        /// <summary>
        /// The total pumping time.
        /// </summary>
        [XmlElement("totalPumpTime")]
        public TimeMeasure TotalPumpTime { get; set; }
        /// <summary>
        /// Maximum pressure encountered during the job.
        /// </summary>
        [XmlElement("maxJobPres")]
        public PressureMeasure MaxJobPres { get; set; }
        /// <summary>
        /// Maximum job fluid pumping rate of any treatment interval of any stage.
        /// </summary>
        [XmlElement("maxFluidRate")]
        public VolumeFlowRateMeasure MaxFluidRate { get; set; }
        /// <summary>
        /// Average pressure encountered of all treatment interval of any stage.
        /// </summary>
        [XmlElement("avgJobPres")]
        public PressureMeasure AveragegJobPres { get; set; }
        /// <summary>
        /// Total volume pumped for all treatments.
        /// </summary>
        [XmlElement("totalJobVolume")]
        public VolumeMeasure TotalJobVolume { get; set; }
        /// <summary>
        /// Total weight of proppant used for the stimulation job.
        /// </summary>
        [XmlElement("totalProppantWt")]
        public MassMeasure TotalProppantWeight { get; set; }
		/// <summary>
        /// Name of a proppant used for the stimulation job.
        /// </summary>
        [XmlElement("proppantName")]
        public List<String> ProppantName { get; set; }
        /// <summary>
        /// Total number of perforation balls used in the stimulation job.
        /// </summary>
        [XmlElement("perfBallCount")]
        public Int16? PerfBallCount {
            get {
                return perfBallCountField;
            } 
            set { 
                perfBallCountField = value;
                this.PerfBallCountSpecified = true;
            }
        }

        private Int16? perfBallCountField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PerfBallCountSpecified { get; set; }
        /// <summary>
        /// Total volume of nitrogen used in the stimulation job.
        /// </summary>
        [XmlElement("totalN2StdVolume")]
        public StandardVolumeMeasure TotalN2StdVolume { get; set; }
        /// <summary>
        /// Total mass of carbon dioxide used in the stimulation job.
        /// </summary>
        [XmlElement("totalCO2Mass")]
        public MassMeasure TotalCO2Mass { get; set; }
        /// <summary>
        /// Hydraulic horsepower ordered for the stimulation job.
        /// </summary>
        [XmlElement("hhpOrdered")]
        public PowerMeasure HhpOrdered { get; set; }
        /// <summary>
        /// Hydraulic horsepower actually used for the stimulation job.
        /// </summary>
        [XmlElement("hhpUsed")]
        public PowerMeasure HhpUsed { get; set; }
        /// <summary>
        /// Number of Treatments treated during the stimulation service.
        /// </summary>
        [XmlElement("treatmentCount")]
        public Int16? TreatmentCount {
            get {
                return treatmentCountField;
            } 
            set { 
                treatmentCountField = value;
                this.TreatmentCountSpecified = true;
            }
        }

        private Int16? treatmentCountField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TreatmentCountSpecified { get; set; }
        /// <summary>
        /// Percentage of fluid volume in the fracture at the end of pumping.
        /// </summary>
        [XmlElement("fluidEfficiency")]
        public VolumePerVolumeMeasurePercent FluidEfficiency { get; set; }
        /// <summary>
        /// Pressure recorded on fluid returning to surface.
        /// </summary>
        [XmlElement("flowBackPres")]
        public PressureMeasure FlowBackPres { get; set; }
        /// <summary>
        /// Rate recorded on fluid returning to surface.
        /// </summary>
        [XmlElement("flowBackRate")]
        public VolumeFlowRateMeasure FlowBackRate { get; set; }
        /// <summary>
        /// Volume recorded on fluid returning to surface.
        /// </summary>
        [XmlElement("flowBackVolume")]
        public VolumeMeasure FlowBackVolume { get; set; }
        /// <summary>
        /// Number of treatment interval (zones), treated during the stimulation service.
        /// </summary>
        [XmlElement("treatmentIntervalCount")]
        public Int16? TreatmentIntervalCount {
            get {
                return treatmentIntervalCountField;
            } 
            set { 
                treatmentIntervalCountField = value;
                this.TreatmentIntervalCountSpecified = true;
            }
        }

        private Int16? treatmentIntervalCountField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TreatmentIntervalCountSpecified { get; set; }
        /// <summary>
        /// Bottomhole static temperature for the job.
        /// </summary>
        [XmlElement("bottomholeStaticTemperature")]
        public ThermodynamicTemperatureMeasure BottomholeStaticTemperature { get; set; }
        /// <summary>
        /// Expected or calculated bottomhole treating temperature for the job.
        /// </summary>
        [XmlElement("treatingBottomholeTemperature")]
        public ThermodynamicTemperatureMeasure TreatingBottomholeTemperature { get; set; }
		/// <summary>
        /// An interval for the stimulation job.
        /// </summary>
        [XmlElement("jobInterval")]
        public List<StimJobInterval> JobInterval { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects.
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Sidewall Core Sample Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_swcSample", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Sidewall Core Sample Component Schema")]
    public partial class SwcSample : Object 
    {

        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Set of Lithology records for the Interval 
        /// </summary>
        [XmlElement("lithology")]
        public Lithology Lithology { get; set; }
        /// <summary>
        /// Show description for the plug. 
        /// </summary>
        [XmlElement("show")]
        public Show Show { get; set; }
        /// <summary>
        /// Name of formation penetrated. 
        /// </summary>
        [XmlElement("nameFormation")]
        public String NameFormation { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Lithology Component Schema. The standard for this version is principally intended for the implementation of the graphical columns for lithology and anticipates the use of a free text entry for the description. It is possible in the future the standard may be used to generate a structured text description from discrete entries and so some of terminology has been better defined to enable that useage. Either the free text description should be used, or structured description, but not both.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_lithology", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Lithology Component Schema. The standard for this version is principally intended for the implementation of the graphical columns for lithology and anticipates the use of a free text entry for the description. It is possible in the future the standard may be used to generate a structured text description from discrete entries and so some of terminology has been better defined to enable that useage. Either the free text description should be used, or structured description, but not both.")]
    public partial class Lithology : Object 
    {

        /// <summary>
        /// The geological name for the type of lithology from the enum table listing a subset of the OneGeology / CGI defined formation types.
        /// </summary>
        [XmlElement("type")]
        public LithologyType Type { get; set; }
        /// <summary>
        /// A custom Lithology encoding sceme if desired. (It is recommended that if used, this follows the NPD required useage with the numeric values noted in the enum tables, which was the original intent for this item). The NPD Coding System assigned a digital code to the main lithologies as per the Norwegian Blue Book data standards. The code was then derived by Lithology = (Main lithology * 10) + cement + (modifier / 100). Example: Calcite cemented silty micaceous sandstone: ( 33 * 10 ) + 1 + (21 / 100) gives a numeric code of 331.21. However the NPD is also working through Energistics/Ceasar to potentially change this useage.) This should not be used for mnemonics, as those vary by operator, and if an abbreviation is required a local look up table should be used by the rendering client, based on Lithology Type.
        /// </summary>
        [XmlElement("codeLith")]
        public String CodeLith { get; set; }
        /// <summary>
        /// The lithology represents the portion of the sampled interval this lithology type relates to. The total of the lithologies within an interval should add up to 100 percent. If LithologySource in cs-geology is "interpreted" only 100% is allowed. If "core" or "cuttings" then recommended useage is the creating application uses blocks of 10%. i.e. 10, 20, 30, 40, 50, 60, 70, 80, 90, 100. Ideally the input application should enforce a total of 100% for every defined depth interval. If the total for a depth interval does not add up to 100%, the "undifferentiated" code should be used to fill out to 100%. 
        /// </summary>
        [XmlElement("lithPc")]
        public VolumePerVolumeMeasurePercent LithPercent { get; set; }
        /// <summary>
        /// Free text sample description of item and details, using a structured approach as per AAPG and Shell style, or specific operator descriptive hierarchy typically in the order of Rock Type, Qualifier,colour, Texture, Cement matrix type, compaction, Fracture, accessories, fossils, structure porosity, Shows. This should be blank if a structured approach to creating the description is used. Example clastic descriptions: SST, qtz, wh lt gy grn, m - c g, well sort, subrnd-subang, sub sph - sph, grst tex, wk calc cmt, fria, glauc rr mica, gd vis por, patchy dk brn oil stn, wk yel dir fluor, bri yel cut fluor, instant blooming yel-wh crush cut fluor, dk brn cut col. Example carbonate description: LST; wh buff lt brn, m-c g, bioclastic grst, xln cmt, hd, ang brk, tr pyr, poor vis por. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// DEPRECATED. Lithology classification description. (In the past this was intended to distinguish between alternative classification schemes such as Dunham or Folk. This is no longer necessary with the classifications included in Lithology Type)
        /// </summary>
        [Obsolete()]
        [XmlElement("lithClass")]
        public String LithClass { get; set; }
        /// <summary>
        /// DEPRECATED. Use sizeGrain below. Granulometry.
        /// </summary>
        [Obsolete()]
        [XmlElement("grainType")]
        public String GrainType { get; set; }
        /// <summary>
        /// DEPRECATED. Dunham / Embry and Klovan limestone classification. No longer used, as the terms are available as alternates for carbonates within the Lithology type. i.e. A Dunham defined lithology will be plotted graphically as a limestone, but the Dunham terminology will be available to use in a structured description. 
        /// </summary>
        [Obsolete()]
        [XmlElement("dunhamClass")]
        public String DunhamClass { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology color description, from Shell 1995 4.3.3.1 and 4.3.3.2 Colours with the addition of Frosted. eg black blue brown buff green grey olive orange pink purple red translucent frosted white yellow, modified by dark, light, moderate, medium, mottled, variegated, slight, weak, strong, vivid. 
        /// </summary>
        [XmlElement("color")]
        public String Color { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology matrix texture description from Shell 1995 4.3.2.6. crystalline, (often "feather-edge" appearance on breaking), friable, dull, earthy, chalky, (particle size less than 20m; often exhibits capillary imbibition) visibly particulate, granular, sucrosic, (often exhibits capillary imbibition). e.g.: compact interlocking, particulate, (Gradational textures are quite common,) chalky matrix with sucrosic patches, (Composite textures also occur) 
        /// </summary>
        [XmlElement("texture")]
        public String Texture { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Mineral hardness. (Typically this will rarely be used as mineral hardness is not typically recorded. What is recorded is typically compaction. It is retained though for use defined as per Mohs scale of mineral hardness.) 
        /// </summary>
        [XmlElement("hardness")]
        public String Hardness { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology compaction from Shell 1995 4.3.1.5. not compacted, slightly compacted, compacted, strongly compacted, friable, indurated, hard. 
        /// </summary>
        [XmlElement("compaction")]
        public String Compaction { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology grain size description. Defined from Shell 4.3.1.1.(Wentworth) modified to remove the ambiguous term Pelite. Size ranges in millimeter (or micrometer) and Inches. LT 256 mm LT 10.1 in "boulder"; 64-256 mm 2.5-10.1 in "cobble"; 32-64 mm 1.26-2.5 in "very coarse gravel"; 16-32 mm 0.63-1.26 in "coarse gravel"; 8-16 mm 0.31-0.63 in "medium gravel"; 4-8 mm 0.157-0.31 in "fine gravel"; 2-4 mm 0.079-0.157 in "very fine gravel"; 1-2 mm 0.039-0.079 in "very coarse sand"; 0.5-1 mm 0.020-0.039 in "coarse sand"; 0.25-0.5 mm 0.010-0.020 in "medium sand"; 125-250 um 0.0049-0.010 in "fine sand"; 62.5-125 um 0.0025-0.0049 in "very fine sand"; 3.90625-62.5 um 0.00015-0.0025 in "silt"; LT 3.90625 um LT 0.00015 in "clay"; LT 1 um LT 0.000039 in "colloid" 
        /// </summary>
        [XmlElement("sizeGrain")]
        public String SizeGrain { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology roundness description from Shell 4.3.1.3 Roundness (roundness refers to modal size class). very angular, angular, subangular, subrounded, rounded, well rounded. 
        /// </summary>
        [XmlElement("roundness")]
        public String Roundness { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology sphericity description for the modal size class of grains in the sample, defined as per Shell 4.3.1.4 Sphericity. very elongated, elongated, slightly elongated, slightly spherical, spherical, very spherical 
        /// </summary>
        [XmlElement("sphericity")]
        public String Sphericity { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology sorting descriptione from Shell 4.3.1.2 Sorting. very poorly sorted, unsorted, poorly sorted, poorly to moderately well sorted, moderately well sorted, well sorted, very well sorted, unimodally sorted, bimodally sorted. 
        /// </summary>
        [XmlElement("sorting")]
        public String Sorting { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology matrix/cement description. Terms will be as defined in the enumeration table. eg. "calcite" (Common) "dolomite", "ankerite" (eg. North Sea HPHT reservoirs such as Elgin and Franklin have almost pure Ankerite cementation, "siderite" (Sherwood sandstones, southern UK typical Siderite cements), "quartz" (grain to grain contact cementation or secondary quartz deposition), "kaolinite", "illite" (eg. Village Fields North Sea), "smectite","chlorite" (Teg, Algeria.) 
        /// </summary>
        [XmlElement("matrixCement")]
        public MatrixCementType MatrixCement {
            get {
                return matrixCementField;
            } 
            set { 
                matrixCementField = value;
                this.MatrixCementSpecified = true;
            }
        }

        private MatrixCementType matrixCementField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MatrixCementSpecified { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology visible porosity description. Defined after BakerHughes definitions, as opposed to Shell, which has no linkage to actual numeric estimates. The theoretical maximum porosity for a clastic rock is about 26%. This is normally much reduced by other factors. When estimating porosities use: MT 15% "good" 10 to 15% "fair" 5 to 10% "poor" LT 5% "trace" 0 "none" 
        /// </summary>
        [XmlElement("porosityVisible")]
        public String PorosityVisible { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Visible porosity fabric description from after Shell 4.3.2.1 and 4.3.2.2. intergranular (particle size greater than 20m), fine interparticle (particle size less than 20m), intercrystalline, intragranular, intraskeletal, intracrystalline, mouldic, fenestral, shelter, framework, stylolitic, replacement, solution, vuggy, channel, cavernous. 
        /// </summary>
        [XmlElement("porosityFabric")]
        public String PorosityFabric { get; set; }
        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology permeability description from Shell 4.3.2.5. In future these would benefit from quantification. tight, slightly, fairly, highly.
        /// </summary>
        [XmlElement("permeability")]
        public String Permeability { get; set; }
        /// <summary>
        /// DEPRECATED. This entry for shale density should not be used. Shale densities should be entered in the Shale Density in cs_geologyInterval.
        /// </summary>
        [Obsolete()]
        [XmlElement("densShale")]
        public DensityMeasure DensShale { get; set; }
		/// <summary>
        /// A single qualifier from the Qualifier enum table for graphical representation in the Lithology columns. In mudlogging terms, a qualifier is a graphical symbol in the Interpreted Lithology column of the Formation Evaluation Log (aka "the mudlog"). In addition to the major lithologies (e.g., sand, shale, etc) existing in the sample, other minerals (present as accessories or inclusions e.g. chert, pyrite, glauconite) and fossils (forams, oyster shells, bryozoans, etc.) may exist and their abundance is generally categorized using ranges such as Trace. These additional minerals and fossils can be of disproportionately great diagnostic and descriptive value. For example,qualifiers can be used to indicate facies changes, marker beds or something that impacted drilling conditions. These qualifiers (representing accessories, inclusions and/or fossils) are used to rapidly and graphically indicate to the recipient of the mudlog that a significant lithological event was encountered while drilling the well. The qualifier can also be used in creating the structured descriptions. 
        /// </summary>
        [XmlElement("qualifier")]
        public List<Qualifier> Qualifier { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - lithology qualifier Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_qualifier", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - lithology qualifier Component Schema")]
    public partial class Qualifier : Object 
    {

        /// <summary>
        /// The type of qualifier.
        /// </summary>
        [XmlElement("type")]
        public QualifierType Type { get; set; }
        /// <summary>
        /// The measured depth at the top of the interval represented by the qualifier. This must be within the range of the parent geologic interval. If mdTop and mdBottom are not given then the qualifier is deemed to exist over the depth range of the parent geologyInterval.
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// The measured depth at the bottom of the interval represented by the qualifier. A point can be indicated by specifying bottom=top. This must be within the range of the parent geologic interval.
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// The relative abundance of the qualifier estimated based on a "visual area" basis by inspecting the cuttings spread out on the shaker table prior to washing, or in the sample tray after washing. This represents the upper bound of the observed range, and is in the following increments at the upper bound. 1 = less than or equal to 1%, 2 = greater than or equal to 1 and less than 2%, 5 = greater than or equal to 2 and less than 5% and then in 5% increments, 10 (=5-10%), 15 (=10-15%) up to 100(=95-100%). The end user can then elect to either display the %, or map then to an operator specific term or coding, i.e. 1 less then or equal to 1%=Rare Trace, or occasional, or very sparse etc., depending on the the end users' terminology.) 
        /// </summary>
        [XmlElement("abundance")]
        public VolumePerVolumeMeasurePercent Abundance { get; set; }
        /// <summary>
        /// DEPRECATED. This prior useage for a specific terminology is suggested to no longer be used, as the intent should be to avoid encoding proprietary terms. But, for the sake of interoperability, proprietary descriptive use of a specific term for a percentage, should be derived from the abundance % by the end users' visualization application, using the end users' terminology. (i.e. if 1 less than or equal to 1% = Rare Trace or equivalent terminology for the specific operator; this can be mapped in the end user application, but is redundant to be encoded in the standard.)
        /// </summary>
        [Obsolete()]
        [XmlElement("abundanceCode")]
        public String AbundanceCode { get; set; }
        /// <summary>
        /// A textual description of the qualifier.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Geology Show Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_show", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML Geology Show Component Schema")]
    public partial class Show : Object 
    {

        /// <summary>
        /// Show Rating. 
        /// </summary>
        [XmlElement("showRat")]
        public ShowRating? ShowRat {
            get {
                return showRatField;
            } 
            set { 
                showRatField = value;
                this.ShowRatSpecified = true;
            }
        }

        private ShowRating? showRatField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ShowRatSpecified { get; set; }
        /// <summary>
        /// Visible Stain Color. 
        /// </summary>
        [XmlElement("stainColor")]
        public String StainColor { get; set; }
        /// <summary>
        /// Visible Stain Distribution. 
        /// </summary>
        [XmlElement("stainDistr")]
        public String StainDistr { get; set; }
        /// <summary>
        /// Visible Stain (commonly in percent). 
        /// </summary>
        [XmlElement("stainPc")]
        public AreaPerAreaMeasure StainPercent { get; set; }
        /// <summary>
        /// Natural Fluorescence Color. 
        /// </summary>
        [XmlElement("natFlorColor")]
        public String NatFlorColor { get; set; }
        /// <summary>
        /// Natural fluorescence (commonly in percent). 
        /// </summary>
        [XmlElement("natFlorPc")]
        public AreaPerAreaMeasure NatFlorPercent { get; set; }
        /// <summary>
        /// Natural fluorescence level. 
        /// </summary>
        [XmlElement("natFlorLevel")]
        public ShowFluorescence? NatFlorLevel {
            get {
                return natFlorLevelField;
            } 
            set { 
                natFlorLevelField = value;
                this.NatFlorLevelSpecified = true;
            }
        }

        private ShowFluorescence? natFlorLevelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NatFlorLevelSpecified { get; set; }
        /// <summary>
        /// Natural fluorescence description. 
        /// </summary>
        [XmlElement("natFlorDesc")]
        public String NatFlorDesc { get; set; }
        /// <summary>
        /// Cut color. 
        /// </summary>
        [XmlElement("cutColor")]
        public String CutColor { get; set; }
        /// <summary>
        /// Cut speed. 
        /// </summary>
        [XmlElement("cutSpeed")]
        public ShowSpeed? CutSpeed {
            get {
                return cutSpeedField;
            } 
            set { 
                cutSpeedField = value;
                this.CutSpeedSpecified = true;
            }
        }

        private ShowSpeed? cutSpeedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CutSpeedSpecified { get; set; }
        /// <summary>
        /// Cut strength. 
        /// </summary>
        [XmlElement("cutStrength")]
        public String CutStrength { get; set; }
        /// <summary>
        /// Cut formulation. 
        /// </summary>
        [XmlElement("cutForm")]
        public ShowLevel? CutForm {
            get {
                return cutFormField;
            } 
            set { 
                cutFormField = value;
                this.CutFormSpecified = true;
            }
        }

        private ShowLevel? cutFormField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CutFormSpecified { get; set; }
        /// <summary>
        /// Cut level (Faint, Bright, etc.). 
        /// </summary>
        [XmlElement("cutLevel")]
        public String CutLevel { get; set; }
        /// <summary>
        /// Cut fluorescence color. 
        /// </summary>
        [XmlElement("cutFlorColor")]
        public String CutFlorColor { get; set; }
        /// <summary>
        /// Cut fluorescence speed. 
        /// </summary>
        [XmlElement("cutFlorSpeed")]
        public ShowSpeed? CutFlorSpeed {
            get {
                return cutFlorSpeedField;
            } 
            set { 
                cutFlorSpeedField = value;
                this.CutFlorSpeedSpecified = true;
            }
        }

        private ShowSpeed? cutFlorSpeedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CutFlorSpeedSpecified { get; set; }
        /// <summary>
        /// Cut fluorescence strength. 
        /// </summary>
        [XmlElement("cutFlorStrength")]
        public String CutFlorStrength { get; set; }
        /// <summary>
        /// Cut fluorescence form. 
        /// </summary>
        [XmlElement("cutFlorForm")]
        public ShowLevel? CutFlorForm {
            get {
                return cutFlorFormField;
            } 
            set { 
                cutFlorFormField = value;
                this.CutFlorFormSpecified = true;
            }
        }

        private ShowLevel? cutFlorFormField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CutFlorFormSpecified { get; set; }
        /// <summary>
        /// Cut fluorescence level. 
        /// </summary>
        [XmlElement("cutFlorLevel")]
        public ShowFluorescence? CutFlorLevel {
            get {
                return cutFlorLevelField;
            } 
            set { 
                cutFlorLevelField = value;
                this.CutFlorLevelSpecified = true;
            }
        }

        private ShowFluorescence? cutFlorLevelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CutFlorLevelSpecified { get; set; }
        /// <summary>
        /// Residue color. 
        /// </summary>
        [XmlElement("residueColor")]
        public String ResidueColor { get; set; }
        /// <summary>
        /// Free format show description. 
        /// </summary>
        [XmlElement("showDesc")]
        public String ShowDesc { get; set; }
        /// <summary>
        /// Impregnated lithology. 
        /// </summary>
        [XmlElement("impregnatedLitho")]
        public String ImpregnatedLitho { get; set; }
        /// <summary>
        /// Description of any hydrocarbon type odors smelled. 
        /// </summary>
        [XmlElement("odor")]
        public String OuterDiameteror { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Sidewall Core object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_sidewallCore", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Sidewall Core object.")]
    public partial class SidewallCore : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the sidewall core. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the sidewall core. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Date and time logging suite run in the hole. 
        /// </summary>
        [XmlElement("dTimToolRun")]
        public DateTime? DateTimeToolRun {
            get {
                return dTimToolRunField;
            } 
            set { 
                dTimToolRunField = value;
                this.DateTimeToolRunSpecified = true;
            }
        }

        private DateTime? dTimToolRunField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeToolRunSpecified { get; set; }
        /// <summary>
        /// Date and time logging suite pulled out of the hole. 
        /// </summary>
        [XmlElement("dTimToolPull")]
        public DateTime? DateTimeToolPull {
            get {
                return dTimToolPullField;
            } 
            set { 
                dTimToolPullField = value;
                this.DateTimeToolPullSpecified = true;
            }
        }

        private DateTime? dTimToolPullField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeToolPullSpecified { get; set; }
        /// <summary>
        /// Tool reference measured depth. 
        /// </summary>
        [XmlElement("mdToolReference")]
        public MeasuredDepthCoord MDToolReference { get; set; }
        /// <summary>
        /// Reference log information. 
        /// </summary>
        [XmlElement("coreReferenceLog")]
        public String CoreReferenceLog { get; set; }
        /// <summary>
        /// Measured depth of core. 
        /// </summary>
        [XmlElement("mdCore")]
        public MeasuredDepthCoord MDCore { get; set; }
        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
        [XmlElement("serviceCompany")]
        public String ServiceCompany { get; set; }
        /// <summary>
        /// Analysis company 
        /// </summary>
        [XmlElement("analysisContractor")]
        public String AnalysisContractor { get; set; }
        /// <summary>
        /// Name of engineer analyzing sidewall core samples. 
        /// </summary>
        [XmlElement("analysisBy")]
        public String AnalysisBy { get; set; }
        /// <summary>
        /// Sidewall coring tool description. 
        /// </summary>
        [XmlElement("sidewallCoringTool")]
        public String SidewallCoringTool { get; set; }
        /// <summary>
        /// Hole diameter. 
        /// </summary>
        [XmlElement("diaHole")]
        public LengthMeasure DiaHole { get; set; }
        /// <summary>
        /// Diameter of plugs. 
        /// </summary>
        [XmlElement("diaPlug")]
        public LengthMeasure DiaPlug { get; set; }
        /// <summary>
        /// Number of shots fired. 
        /// </summary>
        [XmlElement("numPlugsShot")]
        public Int16? NumPlugsShot {
            get {
                return numPlugsShotField;
            } 
            set { 
                numPlugsShotField = value;
                this.NumPlugsShotSpecified = true;
            }
        }

        private Int16? numPlugsShotField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumPlugsShotSpecified { get; set; }
        /// <summary>
        /// Number of recovered plugs. 
        /// </summary>
        [XmlElement("numRecPlugs")]
        public Int16? NumRecPlugs {
            get {
                return numRecPlugsField;
            } 
            set { 
                numRecPlugsField = value;
                this.NumRecPlugsSpecified = true;
            }
        }

        private Int16? numRecPlugsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumRecPlugsSpecified { get; set; }
        /// <summary>
        /// Number of plugs that misfired. 
        /// </summary>
        [XmlElement("numMisfiredPlugs")]
        public Int16? NumMisfiredPlugs {
            get {
                return numMisfiredPlugsField;
            } 
            set { 
                numMisfiredPlugsField = value;
                this.NumMisfiredPlugsSpecified = true;
            }
        }

        private Int16? numMisfiredPlugsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumMisfiredPlugsSpecified { get; set; }
        /// <summary>
        /// Number of plugs that fired OK but were empty. 
        /// </summary>
        [XmlElement("numEmptyPlugs")]
        public Int16? NumEmptyPlugs {
            get {
                return numEmptyPlugsField;
            } 
            set { 
                numEmptyPlugsField = value;
                this.NumEmptyPlugsSpecified = true;
            }
        }

        private Int16? numEmptyPlugsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumEmptyPlugsSpecified { get; set; }
        /// <summary>
        /// Number of lost plugs. 
        /// </summary>
        [XmlElement("numLostPlugs")]
        public Int16? NumLostPlugs {
            get {
                return numLostPlugsField;
            } 
            set { 
                numLostPlugsField = value;
                this.NumLostPlugsSpecified = true;
            }
        }

        private Int16? numLostPlugsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumLostPlugsSpecified { get; set; }
        /// <summary>
        /// Number of plugs paid for by client. 
        /// </summary>
        [XmlElement("numPaidPlugs")]
        public Int16? NumPluggedAndAbandonedidPlugs {
            get {
                return numPaidPlugsField;
            } 
            set { 
                numPaidPlugsField = value;
                this.NumPluggedAndAbandonedidPlugsSpecified = true;
            }
        }

        private Int16? numPaidPlugsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumPluggedAndAbandonedidPlugsSpecified { get; set; }
		/// <summary>
        /// Set of plug sample descriptions. 
        /// </summary>
        [XmlElement("swcSample")]
        public List<SwcSample> SwcSample { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Risk object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_risk", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Risk object.")]
    public partial class Risk : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the risk. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the risk. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A reference to an object that is defined within the context of a wellbore.
        /// </summary>
        [XmlElement("objectReference")]
        public RefObjectString ObjectReference { get; set; }
        /// <summary>
        /// The type of risk.
        /// </summary>
        [XmlElement("type")]
        public RiskType? Type { get; set; }
        /// <summary>
        /// The category of risk.
        /// </summary>
        [XmlElement("category")]
        public RiskCategory? Category { get; set; }
        /// <summary>
        /// The sub category of risk.
        /// </summary>
        [XmlElement("subCategory")]
        public RiskSubCategory? SubCategory {
            get {
                return subCategoryField;
            } 
            set { 
                subCategoryField = value;
                this.SubCategorySpecified = true;
            }
        }

        private RiskSubCategory? subCategoryField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SubCategorySpecified { get; set; }
        /// <summary>
        /// Custom string to further categorize the risk.
        /// </summary>
        [XmlElement("extendCategory")]
        public String ExtendCategory { get; set; }
		/// <summary>
        /// The personnel afected by the risk.
        /// </summary>
        [XmlElement("affectedPersonnel")]
        public List<RiskAffectedPersonnel> AffectedPersonnel { get; set; }
        /// <summary>
        /// Date and time that activities started.
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// Date and time that activities were completed.
        /// </summary>
        [XmlElement("dTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set { 
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
            }
        }

        private DateTime? dTimEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndSpecified { get; set; }
        /// <summary>
        /// Measured Depth at start of activity.
        /// </summary>
        [XmlElement("mdHoleStart")]
        public MeasuredDepthCoord MDHoleStart { get; set; }
        /// <summary>
        /// Measured Depth at end of activity.
        /// </summary>
        [XmlElement("mdHoleEnd")]
        public MeasuredDepthCoord MDHoleEnd { get; set; }
        /// <summary>
        /// True Vertical Depth at start of activity.
        /// </summary>
        [XmlElement("tvdHoleStart")]
        public WellVerticalDepthCoord TvdHoleStart { get; set; }
        /// <summary>
        /// True Vertical Depth at end of activity.
        /// </summary>
        [XmlElement("tvdHoleEnd")]
        public WellVerticalDepthCoord TvdHoleEnd { get; set; }
        /// <summary>
        /// Measured depth of bit at start of activity.
        /// </summary>
        [XmlElement("mdBitStart")]
        public MeasuredDepthCoord MDBitStart { get; set; }
        /// <summary>
        /// Measured depth of bit at end of activity.
        /// </summary>
        [XmlElement("mdBitEnd")]
        public MeasuredDepthCoord MDBitEnd { get; set; }
        /// <summary>
        /// Hole diameter. 
        /// </summary>
        [XmlElement("diaHole")]
        public LengthMeasure DiaHole { get; set; }
        /// <summary>
        /// Severity Level of the Risk. Values of 1 through 5 with 1 being the lowest.
        /// </summary>
        [XmlElement("severityLevel")]
        public Int16? SeverityLevel {
            get {
                return severityLevelField;
            } 
            set { 
                severityLevelField = value;
                this.SeverityLevelSpecified = true;
            }
        }

        private Int16? severityLevelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SeverityLevelSpecified { get; set; }
        /// <summary>
        /// Probability Level of the Risk. Values of 1 through 5 with 1 being the lowest.
        /// </summary>
        [XmlElement("probabilityLevel")]
        public Int16? ProbabilityLevel {
            get {
                return probabilityLevelField;
            } 
            set { 
                probabilityLevelField = value;
                this.ProbabilityLevelSpecified = true;
            }
        }

        private Int16? probabilityLevelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ProbabilityLevelSpecified { get; set; }
        /// <summary>
        /// summary description of risk.
        /// </summary>
        [XmlElement("summary")]
        public String Summary { get; set; }
        /// <summary>
        /// Complete description of Risk.
        /// </summary>
        [XmlElement("details")]
        public String Details { get; set; }
        /// <summary>
        /// Details for identifing the Risk.
        /// </summary>
        [XmlElement("identification")]
        public String Identification { get; set; }
        /// <summary>
        /// Plan of action if the Risk materializes.
        /// </summary>
        [XmlElement("contingency")]
        public String Contingency { get; set; }
		/// <summary>
        /// Plan of action to ensure the risk does not materialize.
        /// </summary>
        [XmlElement("mitigation")]
        public List<String> Mitigation { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refObjectString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refObjectString", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the refObjectString xsd type.")]
    public partial class RefObjectString : Object 
    {
        public RefObjectString() {}
        public RefObjectString(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The type of data-object being referenced (e.g., "well", "wellbore").
        /// </summary>
        [XmlAttribute("object")]
        public String Object { get; set; }
		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the object referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
        [XmlAttribute("uidRef")]
        public String UidRef { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Surface Equipment Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_surfaceEquipment", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Rig Surface Equipment Component Schema ")]
    public partial class SurfaceEquipment : Object 
    {

        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Pressure rating of the item. 
        /// </summary>
        [XmlElement("presRating")]
        public PressureMeasure PresRating { get; set; }
        /// <summary>
        /// Surface equipment type (IADC1-4,Custom, Coiled Tubing). 
        /// </summary>
        [XmlElement("typeSurfEquip")]
        public SurfEquipType? TypeSurfEquip { get; set; }
        /// <summary>
        /// Use pump discharge Line. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("usePumpDischarge")]
        public Boolean? UsePumpDischarge {
            get {
                return usePumpDischargeField;
            } 
            set { 
                usePumpDischargeField = value;
                this.UsePumpDischargeSpecified = true;
            }
        }

        private Boolean? usePumpDischargeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UsePumpDischargeSpecified { get; set; }
        /// <summary>
        /// Use standpipe geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useStandpipe")]
        public Boolean? UseStandpipe {
            get {
                return useStandpipeField;
            } 
            set { 
                useStandpipeField = value;
                this.UseStandpipeSpecified = true;
            }
        }

        private Boolean? useStandpipeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseStandpipeSpecified { get; set; }
        /// <summary>
        /// Use kelly hose geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useHose")]
        public Boolean? UseHose {
            get {
                return useHoseField;
            } 
            set { 
                useHoseField = value;
                this.UseHoseSpecified = true;
            }
        }

        private Boolean? useHoseField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseHoseSpecified { get; set; }
        /// <summary>
        /// Use swivel geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useSwivel")]
        public Boolean? UseSwivel {
            get {
                return useSwivelField;
            } 
            set { 
                useSwivelField = value;
                this.UseSwivelSpecified = true;
            }
        }

        private Boolean? useSwivelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseSwivelSpecified { get; set; }
        /// <summary>
        /// Use kelly geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useKelly")]
        public Boolean? UseKelly {
            get {
                return useKellyField;
            } 
            set { 
                useKellyField = value;
                this.UseKellySpecified = true;
            }
        }

        private Boolean? useKellyField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseKellySpecified { get; set; }
        /// <summary>
        /// Use top stack height. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useTopStack")]
        public Boolean? UseTopStack {
            get {
                return useTopStackField;
            } 
            set { 
                useTopStackField = value;
                this.UseTopStackSpecified = true;
            }
        }

        private Boolean? useTopStackField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseTopStackSpecified { get; set; }
        /// <summary>
        /// Use injector stack height. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useInjStack")]
        public Boolean? UseInjStack {
            get {
                return useInjStackField;
            } 
            set { 
                useInjStackField = value;
                this.UseInjStackSpecified = true;
            }
        }

        private Boolean? useInjStackField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseInjStackSpecified { get; set; }
        /// <summary>
        /// Use surface iron description. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("useSurfaceIron")]
        public Boolean? UseSurfaceIron {
            get {
                return useSurfaceIronField;
            } 
            set { 
                useSurfaceIronField = value;
                this.UseSurfaceIronSpecified = true;
            }
        }

        private Boolean? useSurfaceIronField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UseSurfaceIronSpecified { get; set; }
        /// <summary>
        /// Inner diameter of standpipe. 
        /// </summary>
        [XmlElement("idStandpipe")]
        public LengthMeasure InnerDiameterStandpipe { get; set; }
        /// <summary>
        /// Length of standpipe. 
        /// </summary>
        [XmlElement("lenStandpipe")]
        public LengthMeasure LenStandpipe { get; set; }
        /// <summary>
        /// Inner diameter of kelly hose. 
        /// </summary>
        [XmlElement("idHose")]
        public LengthMeasure InnerDiameterHose { get; set; }
        /// <summary>
        /// Length of kelly hose. 
        /// </summary>
        [XmlElement("lenHose")]
        public LengthMeasure LenHose { get; set; }
        /// <summary>
        /// Inner diameter of swivel. 
        /// </summary>
        [XmlElement("idSwivel")]
        public LengthMeasure InnerDiameterSwivel { get; set; }
        /// <summary>
        /// Length of swivel. 
        /// </summary>
        [XmlElement("lenSwivel")]
        public LengthMeasure LenSwivel { get; set; }
        /// <summary>
        /// Inner diameter of kelly hose. 
        /// </summary>
        [XmlElement("idKelly")]
        public LengthMeasure InnerDiameterKelly { get; set; }
        /// <summary>
        /// Length of kelly. 
        /// </summary>
        [XmlElement("lenKelly")]
        public LengthMeasure LenKelly { get; set; }
        /// <summary>
        /// Inner diameter of surface iron. 
        /// </summary>
        [XmlElement("idSurfaceIron")]
        public LengthMeasure InnerDiameterSurfaceIron { get; set; }
        /// <summary>
        /// Length of surface iron. 
        /// </summary>
        [XmlElement("lenSurfaceIron")]
        public LengthMeasure LenSurfaceIron { get; set; }
        /// <summary>
        /// Height of surface iron. 
        /// </summary>
        [XmlElement("htSurfaceIron")]
        public LengthMeasure HeightSurfaceIron { get; set; }
        /// <summary>
        /// Coiled tubing - Inner diameter of pump discharge line. 
        /// </summary>
        [XmlElement("idDischargeLine")]
        public LengthMeasure InnerDiameterDischargeLine { get; set; }
        /// <summary>
        /// Coiled tubing - Length of pump discharge line. 
        /// </summary>
        [XmlElement("lenDischargeLine")]
        public LengthMeasure LenDischargeLine { get; set; }
        /// <summary>
        /// Coiled tubing - Coiled tubing wrap type. 
        /// </summary>
        [XmlElement("ctWrapType")]
        public String CTWrapType { get; set; }
        /// <summary>
        /// Coiled tubing - Specifies the OD of the coiled tubing reel. 
        /// </summary>
        [XmlElement("odReel")]
        public LengthMeasure OuterDiameterReel { get; set; }
        /// <summary>
        /// Coiled tubing - Outer diameter of the reel core that the coiled tubing is wrapped around. 
        /// </summary>
        [XmlElement("odCore")]
        public LengthMeasure OuterDiameterCore { get; set; }
        /// <summary>
        /// Coiled tubing - Width of the reel core. This is the inside dimension. 
        /// </summary>
        [XmlElement("widReelWrap")]
        public LengthMeasure WidReelWrap { get; set; }
        /// <summary>
        /// Coiled tubing - Length of the coiled tubing remaining on the reel. 
        /// </summary>
        [XmlElement("lenReel")]
        public LengthMeasure LenReel { get; set; }
        /// <summary>
        /// Coiled tubing - Injector Stack Up. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("injStkUp")]
        public Boolean? InjStkUp {
            get {
                return injStkUpField;
            } 
            set { 
                injStkUpField = value;
                this.InjStkUpSpecified = true;
            }
        }

        private Boolean? injStkUpField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean InjStkUpSpecified { get; set; }
        /// <summary>
        /// Coiled tubing -The length of tubing from the end of the coil reel to the rotary kelly bushing. Basically we define what is in the hole and on the reel. This measurement takes into account the 20 or so feet of tubing that is being straightened and shoved through the injector head. 
        /// </summary>
        [XmlElement("htInjStk")]
        public LengthMeasure HeightInjStk { get; set; }
        /// <summary>
        /// Coiled tubing - Umbilical inside, true/false check box so that you can account for the wireline inside the coiled tubing. With this pressure loss calculation, you can calculate for the strings used for logging, wire line coring, etc. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("umbInside")]
        public Boolean? UmbInside {
            get {
                return umbInsideField;
            } 
            set { 
                umbInsideField = value;
                this.UmbInsideSpecified = true;
            }
        }

        private Boolean? umbInsideField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UmbInsideSpecified { get; set; }
        /// <summary>
        /// Coiled tubing - Outer diameter of the umbilical. 
        /// </summary>
        [XmlElement("odUmbilical")]
        public LengthMeasure OuterDiameterUmbilical { get; set; }
        /// <summary>
        /// Coiled tubing - Length of the umbilical. 
        /// </summary>
        [XmlElement("lenUmbilical")]
        public LengthMeasure LenUmbilical { get; set; }
        /// <summary>
        /// Top drive - Inner diameter of top stack. 
        /// </summary>
        [XmlElement("idTopStk")]
        public LengthMeasure InnerDiameterTopStk { get; set; }
        /// <summary>
        /// Top drive - The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. We are measuring the distance that the mud will flow through the top drive. 
        /// </summary>
        [XmlElement("htTopStk")]
        public LengthMeasure HeightTopStk { get; set; }
        /// <summary>
        /// Height of flange. If you select Top Drive Stackup Height, Swivel and Kelly are disabled so that you can specify the top-drive rotary system. 
        /// </summary>
        [XmlElement("htFlange")]
        public LengthMeasure HeightFlange { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Degasser Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_degasser", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Rig Degasser Component Schema ")]
    public partial class Degasser : Object 
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal date and time. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Description for the type of object. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
        /// <summary>
        /// Height of separator. 
        /// </summary>
        [XmlElement("height")]
        public LengthMeasure Height { get; set; }
        /// <summary>
        /// Length of separator. 
        /// </summary>
        [XmlElement("len")]
        public LengthMeasure Len { get; set; }
        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
        [XmlElement("id")]
        public LengthMeasure InnerDiameter { get; set; }
        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
        [XmlElement("capFlow")]
        public VolumeFlowRateMeasure CapFlow { get; set; }
        /// <summary>
        /// Flow area of separator. 
        /// </summary>
        [XmlElement("areaSeparatorFlow")]
        public AreaMeasure AreaSeparatorFlow { get; set; }
        /// <summary>
        /// Depth of trip-tank fluid level to provide back pressure against separator flow. 
        /// </summary>
        [XmlElement("htMudSeal")]
        public LengthMeasure HeightMudSeal { get; set; }
        /// <summary>
        /// Internal diameter of inlet line. 
        /// </summary>
        [XmlElement("idInlet")]
        public LengthMeasure InnerDiameterInlet { get; set; }
        /// <summary>
        /// Internal diameter of vent line. 
        /// </summary>
        [XmlElement("idVentLine")]
        public LengthMeasure InnerDiameterVentLine { get; set; }
        /// <summary>
        /// Length of vent line. 
        /// </summary>
        [XmlElement("lenVentLine")]
        public LengthMeasure LenVentLine { get; set; }
        /// <summary>
        /// Safe gas separating capacity. 
        /// </summary>
        [XmlElement("capGasSep")]
        public VolumeFlowRateMeasure CapGasSep { get; set; }
        /// <summary>
        /// Gas vent rate at which the vent line pressure drop exceeds the hydrostatic head due to the mud seal. 
        /// </summary>
        [XmlElement("capBlowdown")]
        public VolumeFlowRateMeasure CapBlowdown { get; set; }
        /// <summary>
        /// Pressure rating of the item. 
        /// </summary>
        [XmlElement("presRating")]
        public PressureMeasure PresRating { get; set; }
        /// <summary>
        /// Temperature rating of separator. 
        /// </summary>
        [XmlElement("tempRating")]
        public ThermodynamicTemperatureMeasure TempRating { get; set; }
		/// <summary>
        /// An identification tag for the degasser. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig HydroCyclones Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_hydrocyclone", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Rig HydroCyclones Component Schema ")]
    public partial class Hydrocyclone : Object 
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal date and time. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Description for the type of object. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// Cones description. 
        /// </summary>
        [XmlElement("descCone")]
        public String DescCone { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
		/// <summary>
        /// An identification tag for the hydrocyclone. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Centrifuge Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_centrifuge", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Rig Centrifuge Component Schema ")]
    public partial class Centrifuge : Object 
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal date and time. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Description for the type of object. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
        [XmlElement("capFlow")]
        public VolumeFlowRateMeasure CapFlow { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
		/// <summary>
        /// An identification tag for the centrifuge. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Shaker Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shaker", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Rig Shaker Component Schema ")]
    public partial class Shaker : Object 
    {

        /// <summary>
        /// Human recognizable context for the shaker.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal date and time. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Description for the type of object. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// Shaker location on rig. 
        /// </summary>
        [XmlElement("locationShaker")]
        public String LocationShaker { get; set; }
        /// <summary>
        /// Number of decks. 
        /// </summary>
        [XmlElement("numDecks")]
        public Int16? NumDecks {
            get {
                return numDecksField;
            } 
            set { 
                numDecksField = value;
                this.NumDecksSpecified = true;
            }
        }

        private Int16? numDecksField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumDecksSpecified { get; set; }
        /// <summary>
        /// Number of cascade levels. 
        /// </summary>
        [XmlElement("numCascLevel")]
        public Int16? NumCAscLevel {
            get {
                return numCascLevelField;
            } 
            set { 
                numCascLevelField = value;
                this.NumCAscLevelSpecified = true;
            }
        }

        private Int16? numCascLevelField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumCAscLevelSpecified { get; set; }
        /// <summary>
        /// Is part of mud cleaning assembly as opposed to discrete Shale Shaker. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("mudCleaner")]
        public Boolean? MudCleaner {
            get {
                return mudCleanerField;
            } 
            set { 
                mudCleanerField = value;
                this.MudCleanerSpecified = true;
            }
        }

        private Boolean? mudCleanerField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MudCleanerSpecified { get; set; }
        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
        [XmlElement("capFlow")]
        public VolumeFlowRateMeasure CapFlow { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
        /// <summary>
        /// Minimum mesh size. 
        /// </summary>
        [XmlElement("sizeMeshMn")]
        public LengthMeasure SizeMeshMin { get; set; }
		/// <summary>
        /// An identification tag for the shaker. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Pump Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pump", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Rig Pump Component Schema ")]
    public partial class Pump : Object 
    {

        /// <summary>
        /// Relative pump number. One-based. 
        /// </summary>
        [XmlElement("index")]
        public Int16? Index { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of pump installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Date and time the pump was removed.
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
        /// <summary>
        /// Pump type reference list. 
        /// </summary>
        [XmlElement("typePump")]
        public PumpType? TypePump {
            get {
                return typePumpField;
            } 
            set { 
                typePumpField = value;
                this.TypePumpSpecified = true;
            }
        }

        private PumpType? typePumpField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypePumpSpecified { get; set; }
        /// <summary>
        /// Number of cylinders (3=single acting, 2 = double acting) 
        /// </summary>
        [XmlElement("numCyl")]
        public Int16? NumCyl {
            get {
                return numCylField;
            } 
            set { 
                numCylField = value;
                this.NumCylSpecified = true;
            }
        }

        private Int16? numCylField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumCylSpecified { get; set; }
        /// <summary>
        /// Rod outer diameter. 
        /// </summary>
        [XmlElement("odRod")]
        public LengthMeasure OuterDiameterRod { get; set; }
        /// <summary>
        /// Inner diameter of the pump liner. 
        /// </summary>
        [XmlElement("idLiner")]
        public LengthMeasure LinerSize { get; set; }
        /// <summary>
        /// Pump action. 1 = Single acting, 2 = double acting. 
        /// </summary>
        [XmlElement("pumpAction")]
        public Int16? PumpAction {
            get {
                return pumpActionField;
            } 
            set { 
                pumpActionField = value;
                this.PumpActionSpecified = true;
            }
        }

        private Int16? pumpActionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PumpActionSpecified { get; set; }
        /// <summary>
        /// Efficiency of the pump. 
        /// </summary>
        [XmlElement("eff")]
        public RelativePowerMeasure Eff { get; set; }
        /// <summary>
        /// Stroke length. 
        /// </summary>
        [XmlElement("lenStroke")]
        public LengthMeasure LenStroke { get; set; }
        /// <summary>
        /// Maximum pump pressure. 
        /// </summary>
        [XmlElement("presMx")]
        public PressureMeasure PresMax { get; set; }
        /// <summary>
        /// Maximum hydraulics horsepower. 
        /// </summary>
        [XmlElement("powHydMx")]
        public PowerMeasure PowHydMax { get; set; }
        /// <summary>
        /// Maximum Speed. 
        /// </summary>
        [XmlElement("spmMx")]
        public AnglePerTimeMeasure SpmMax { get; set; }
        /// <summary>
        ///  Pump displacement.
        /// </summary>
        [XmlElement("displacement")]
        public VolumeMeasure Displacement { get; set; }
        /// <summary>
        /// Pulsation dampener pressure. 
        /// </summary>
        [XmlElement("presDamp")]
        public PressureMeasure PresDamp { get; set; }
        /// <summary>
        /// Pulsation dampener volume. 
        /// </summary>
        [XmlElement("volDamp")]
        public VolumeMeasure VolDamp { get; set; }
        /// <summary>
        /// Maximum mechanical power. 
        /// </summary>
        [XmlElement("powMechMx")]
        public PowerMeasure PowMechMax { get; set; }
		/// <summary>
        /// An identification tag for the pump. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Pit Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pit", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Rig Pit Component Schema ")]
    public partial class Pit : Object 
    {

        /// <summary>
        /// Relative pit number of all pits on the rig. One-based. 
        /// </summary>
        [XmlElement("index")]
        public Int16? Index { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal date and time. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
        /// <summary>
        /// Maximum pit capacity. 
        /// </summary>
        [XmlElement("capMx")]
        public VolumeMeasure CapMax { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
        /// <summary>
        /// The type of pit. 
        /// </summary>
        [XmlElement("typePit")]
        public PitType? TypePit {
            get {
                return typePitField;
            } 
            set { 
                typePitField = value;
                this.TypePitSpecified = true;
            }
        }

        private PitType? typePitField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypePitSpecified { get; set; }
        /// <summary>
        /// Flag to indicate if Pit is part of the active system. Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("isActive")]
        public Boolean? IsActive {
            get {
                return isActiveField;
            } 
            set { 
                isActiveField = value;
                this.IsActiveSpecified = true;
            }
        }

        private Boolean? isActiveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsActiveSpecified { get; set; }
		/// <summary>
        /// An identification tag for the pit. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Blow Out Preventer Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bopComponent", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Blow Out Preventer Component Schema.")]
    public partial class BopComponent : Object 
    {

        /// <summary>
        /// Type of ram/preventer. 
        /// </summary>
        [XmlElement("typeBopComp")]
        public BopType? TypeBopComp {
            get {
                return typeBopCompField;
            } 
            set { 
                typeBopCompField = value;
                this.TypeBopCompSpecified = true;
            }
        }

        private BopType? typeBopCompField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeBopCompSpecified { get; set; }
        /// <summary>
        /// Description of component. 
        /// </summary>
        [XmlElement("descComp")]
        public String DescComp { get; set; }
        /// <summary>
        /// Inner diameter that tubulars can pass thru. 
        /// </summary>
        [XmlElement("idPassThru")]
        public LengthMeasure InnerDiameterPluggedAndAbandonedssThru { get; set; }
        /// <summary>
        /// Working rating pressure of the component. 
        /// </summary>
        [XmlElement("presWork")]
        public PressureMeasure PresWork { get; set; }
        /// <summary>
        /// Minimum diameter of component it will seal. 
        /// </summary>
        [XmlElement("diaCloseMn")]
        public LengthMeasure DiaCloseMin { get; set; }
        /// <summary>
        /// Maximum diameter of component it will seal. 
        /// </summary>
        [XmlElement("diaCloseMx")]
        public LengthMeasure DiaCloseMax { get; set; }
        /// <summary>
        /// Arrangement nomenclature for the Blow Out Preventer stack (e.g. S, R, A).
        /// </summary>
        [XmlElement("nomenclature")]
        public String Nomenclature { get; set; }
        /// <summary>
        /// Is Ram bore variable or single size? Defaults to false. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("isVariable")]
        public Boolean? IsVariable {
            get {
                return isVariableField;
            } 
            set { 
                isVariableField = value;
                this.IsVariableSpecified = true;
            }
        }

        private Boolean? isVariableField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsVariableSpecified { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Rig BOP Component Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bop", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Rig BOP Component Schema.")]
    public partial class Bop : Object 
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Date and time of installation. 
        /// </summary>
        [XmlElement("dTimInstall")]
        public DateTime? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set { 
                dTimInstallField = value;
                this.DateTimeInstallSpecified = true;
            }
        }

        private DateTime? dTimInstallField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeInstallSpecified { get; set; }
        /// <summary>
        /// Removal Date. 
        /// </summary>
        [XmlElement("dTimRemove")]
        public DateTime? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set { 
                dTimRemoveField = value;
                this.DateTimeRemoveSpecified = true;
            }
        }

        private DateTime? dTimRemoveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRemoveSpecified { get; set; }
		/// <summary>
        /// An identification tag for the blow out preventer. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
        /// <summary>
        /// Type of connection to Blow Out Preventer. 
        /// </summary>
        [XmlElement("typeConnectionBop")]
        public String TypeConnectionBop { get; set; }
        /// <summary>
        /// Size of connection to Blow Out Preventer. 
        /// </summary>
        [XmlElement("sizeConnectionBop")]
        public LengthMeasure SizeConnectionBop { get; set; }
        /// <summary>
        /// Maximum Pressure rating of Blow Out Preventer. 
        /// </summary>
        [XmlElement("presBopRating")]
        public PressureMeasure PresBopRating { get; set; }
        /// <summary>
        /// Maximum tubulars passable through Blow Out Preventer. 
        /// </summary>
        [XmlElement("sizeBopSys")]
        public LengthMeasure SizeBopSys { get; set; }
        /// <summary>
        /// Is this a Rotating Blow Out Preventer? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("rotBop")]
        public Boolean? RotBop {
            get {
                return rotBopField;
            } 
            set { 
                rotBopField = value;
                this.RotBopSpecified = true;
            }
        }

        private Boolean? rotBopField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RotBopSpecified { get; set; }
        /// <summary>
        /// Inner diameter of Booster Line. 
        /// </summary>
        [XmlElement("idBoosterLine")]
        public LengthMeasure InnerDiameterBoosterLine { get; set; }
        /// <summary>
        /// Outer diameter of Booster Line. 
        /// </summary>
        [XmlElement("odBoosterLine")]
        public LengthMeasure OuterDiameterBoosterLine { get; set; }
        /// <summary>
        /// Length of Booster Line along riser. 
        /// </summary>
        [XmlElement("lenBoosterLine")]
        public LengthMeasure LenBoosterLine { get; set; }
        /// <summary>
        /// Inner diameter of Surface Line. 
        /// </summary>
        [XmlElement("idSurfLine")]
        public LengthMeasure InnerDiameterSurfLine { get; set; }
        /// <summary>
        /// Outer diameter of Surface Line. 
        /// </summary>
        [XmlElement("odSurfLine")]
        public LengthMeasure OuterDiameterSurfLine { get; set; }
        /// <summary>
        /// Length of Choke Line along riser. 
        /// </summary>
        [XmlElement("lenSurfLine")]
        public LengthMeasure LenSurfLine { get; set; }
        /// <summary>
        /// Inner diameter of Choke Line. 
        /// </summary>
        [XmlElement("idChkLine")]
        public LengthMeasure InnerDiameterChkLine { get; set; }
        /// <summary>
        /// Outer diameter of Choke Line. 
        /// </summary>
        [XmlElement("odChkLine")]
        public LengthMeasure OuterDiameterChkLine { get; set; }
        /// <summary>
        /// Length of Choke Line along riser. 
        /// </summary>
        [XmlElement("lenChkLine")]
        public LengthMeasure LenChkLine { get; set; }
        /// <summary>
        /// Inner diameter of Kill Line. 
        /// </summary>
        [XmlElement("idKillLine")]
        public LengthMeasure InnerDiameterKillLine { get; set; }
        /// <summary>
        /// Outer diameter of Kill Line. 
        /// </summary>
        [XmlElement("odKillLine")]
        public LengthMeasure OuterDiameterKillLine { get; set; }
        /// <summary>
        /// Length of Kill Line. 
        /// </summary>
        [XmlElement("lenKillLine")]
        public LengthMeasure LenKillLine { get; set; }
		/// <summary>
        /// Container element for Blow Out Preventer component schema elements. 
        /// </summary>
        [XmlElement("bopComponent")]
        public List<BopComponent> BopComponent { get; set; }
        /// <summary>
        /// Diverter description. 
        /// </summary>
        [XmlElement("typeDiverter")]
        public String TypeDivisionerter { get; set; }
        /// <summary>
        /// Diameter of diverter. 
        /// </summary>
        [XmlElement("diaDiverter")]
        public LengthMeasure DiaDivisionerter { get; set; }
        /// <summary>
        /// Working rating pressure of the component. 
        /// </summary>
        [XmlElement("presWorkDiverter")]
        public PressureMeasure PresWorkDivisionerter { get; set; }
        /// <summary>
        /// Type of accumulator/description. 
        /// </summary>
        [XmlElement("accumulator")]
        public String Accumulator { get; set; }
        /// <summary>
        /// Accumulator fluid capacity. 
        /// </summary>
        [XmlElement("capAccFluid")]
        public VolumeMeasure CapAccFluid { get; set; }
        /// <summary>
        /// Accumulator pre-charge pressure. 
        /// </summary>
        [XmlElement("presAccPreCharge")]
        public PressureMeasure PresAccPreCharge { get; set; }
        /// <summary>
        /// Accumulator pre-charge volume
        /// </summary>
        [XmlElement("volAccPreCharge")]
        public VolumeMeasure VolAccPreCharge { get; set; }
        /// <summary>
        /// Accumulator operating pressure rating. 
        /// </summary>
        [XmlElement("presAccOpRating")]
        public PressureMeasure PresAccOperatingRating { get; set; }
        /// <summary>
        /// Blow Out Preventer Control System. 
        /// </summary>
        [XmlElement("typeControlManifold")]
        public String TypeControlManifold { get; set; }
        /// <summary>
        /// Description of control system. 
        /// </summary>
        [XmlElement("descControlManifold")]
        public String DescControlManifold { get; set; }
        /// <summary>
        /// Type of choke manifold. 
        /// </summary>
        [XmlElement("typeChokeManifold")]
        public String TypeChokeManifold { get; set; }
        /// <summary>
        /// Choke manifold pressure. 
        /// </summary>
        [XmlElement("presChokeManifold")]
        public PressureMeasure PresChokeManifold { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Rig object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_rig", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Rig object.")]
    public partial class Rig : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the rig. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the rig. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Contractor/owner. 
        /// </summary>
        [XmlElement("owner")]
        public String Owner { get; set; }
        /// <summary>
        /// Rig type. 
        /// </summary>
        [XmlElement("typeRig")]
        public RigType? TypeRig {
            get {
                return typeRigField;
            } 
            set { 
                typeRigField = value;
                this.TypeRigSpecified = true;
            }
        }

        private RigType? typeRigField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeRigSpecified { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Year entered service (CCYY). 
        /// </summary>
        [XmlElement("yearEntService")]
        public Int32? YearEntService {
            get {
                return yearEntServiceField;
            } 
            set { 
                yearEntServiceField = value;
                this.YearEntServiceSpecified = true;
            }
        }

        private Int32? yearEntServiceField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean YearEntServiceSpecified { get; set; }
        /// <summary>
        /// Rig classification. 
        /// </summary>
        [XmlElement("classRig")]
        public String ClassRig { get; set; }
        /// <summary>
        /// Rig approvals/certification. 
        /// </summary>
        [XmlElement("approvals")]
        public String Approvals { get; set; }
        /// <summary>
        /// Rig registration location. 
        /// </summary>
        [XmlElement("registration")]
        public String Registration { get; set; }
        /// <summary>
        /// Rig telephone number. 
        /// </summary>
        [XmlElement("telNumber")]
        public String TelNumber { get; set; }
        /// <summary>
        /// Rig fax number. 
        /// </summary>
        [XmlElement("faxNumber")]
        public String FaxNumber { get; set; }
        /// <summary>
        /// Rig Email address. 
        /// </summary>
        [XmlElement("emailAddress")]
        public String EmailAddress { get; set; }
        /// <summary>
        /// Name of contact person. 
        /// </summary>
        [XmlElement("nameContact")]
        public String NameContact { get; set; }
        /// <summary>
        /// Maximum hole depth rating for the rig. 
        /// </summary>
        [XmlElement("ratingDrillDepth")]
        public LengthMeasure RatingDrillDepth { get; set; }
        /// <summary>
        /// Working water depth capability of rig. 
        /// </summary>
        [XmlElement("ratingWaterDepth")]
        public LengthMeasure RatingWaterDepth { get; set; }
        /// <summary>
        /// Flag to indicate that rig is an offshore rig (Drill Ship, Semi, Jack-up, Platform, TADU). Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("isOffshore")]
        public Boolean? IsOffshore {
            get {
                return isOffshoreField;
            } 
            set { 
                isOffshoreField = value;
                this.IsOffshoreSpecified = true;
            }
        }

        private Boolean? isOffshoreField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsOffshoreSpecified { get; set; }
        /// <summary>
        /// Air gap from Rig Floor to ground or mean sea level depending on location. 
        /// </summary>
        [XmlElement("airGap")]
        public LengthMeasure AirGap { get; set; }
        /// <summary>
        /// Date and time rig operations started, or date and time object created. 
        /// </summary>
        [XmlElement("dTimStartOp")]
        public DateTime? DateTimeStartOperating {
            get {
                return dTimStartOpField;
            } 
            set { 
                dTimStartOpField = value;
                this.DateTimeStartOperatingSpecified = true;
            }
        }

        private DateTime? dTimStartOpField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartOperatingSpecified { get; set; }
        /// <summary>
        /// Date and time rig operations ended (May be NULL for active rig). 
        /// </summary>
        [XmlElement("dTimEndOp")]
        public DateTime? DateTimeEndOperating {
            get {
                return dTimEndOpField;
            } 
            set { 
                dTimEndOpField = value;
                this.DateTimeEndOperatingSpecified = true;
            }
        }

        private DateTime? dTimEndOpField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndOperatingSpecified { get; set; }
        /// <summary>
        /// Blow out preventer description and components. 
        /// </summary>
        [XmlElement("bop")]
        public Bop Bop { get; set; }
		/// <summary>
        /// Pit equipment for the rig. 
        /// </summary>
        [XmlElement("pit")]
        public List<Pit> Pit { get; set; }
		/// <summary>
        /// Drilling fluid (mud/cement) pumping units for the rig. 
        /// </summary>
        [XmlElement("pump")]
        public List<Pump> Pump { get; set; }
		/// <summary>
        /// Mud cleaning shaker equipment for the rig. 
        /// </summary>
        [XmlElement("shaker")]
        public List<Shaker> Shaker { get; set; }
		/// <summary>
        /// Mud cleaning centrifuge equipment for the rig. 
        /// </summary>
        [XmlElement("centrifuge")]
        public List<Centrifuge> Centrifuge { get; set; }
		/// <summary>
        /// Mud cleaning hydrocyclone equipment for the rig. 
        /// </summary>
        [XmlElement("hydrocyclone")]
        public List<Hydrocyclone> Hydrocyclone { get; set; }
		/// <summary>
        /// Mud de-gasser equipment for the rig. 
        /// </summary>
        [XmlElement("degasser")]
        public List<Degasser> Degasser { get; set; }
        /// <summary>
        /// Coiled tubing specific equipment configuration. 
        /// </summary>
        [XmlElement("surfaceEquipment")]
        public SurfaceEquipment SurfaceEquipment { get; set; }
        /// <summary>
        /// Number of derricks on the rig. 
        /// </summary>
        [XmlElement("numDerricks")]
        public Int16? NumDerricks {
            get {
                return numDerricksField;
            } 
            set { 
                numDerricksField = value;
                this.NumDerricksSpecified = true;
            }
        }

        private Int16? numDerricksField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumDerricksSpecified { get; set; }
        /// <summary>
        /// Derrick type. 
        /// </summary>
        [XmlElement("typeDerrick")]
        public DerrickType? TypeDerrick {
            get {
                return typeDerrickField;
            } 
            set { 
                typeDerrickField = value;
                this.TypeDerrickSpecified = true;
            }
        }

        private DerrickType? typeDerrickField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeDerrickSpecified { get; set; }
        /// <summary>
        /// Maximum support load applied to derrick structure. 
        /// </summary>
        [XmlElement("ratingDerrick")]
        public ForceMeasure RatingDerrick { get; set; }
        /// <summary>
        /// Height of derrick. 
        /// </summary>
        [XmlElement("htDerrick")]
        public LengthMeasure HeightDerrick { get; set; }
        /// <summary>
        /// Maximum hookload rating. 
        /// </summary>
        [XmlElement("ratingHkld")]
        public ForceMeasure RatingHookload { get; set; }
        /// <summary>
        /// Derrick wind capacity. 
        /// </summary>
        [XmlElement("capWindDerrick")]
        public VelocityMeasure CapWindDerrick { get; set; }
        /// <summary>
        /// Block weight. 
        /// </summary>
        [XmlElement("wtBlock")]
        public ForceMeasure WeightBlock { get; set; }
        /// <summary>
        /// Weight rating of the travelling block. 
        /// </summary>
        [XmlElement("ratingBlock")]
        public ForceMeasure RatingBlock { get; set; }
        /// <summary>
        /// Number of block lines. 
        /// </summary>
        [XmlElement("numBlockLines")]
        public Int16? NumBlockLines {
            get {
                return numBlockLinesField;
            } 
            set { 
                numBlockLinesField = value;
                this.NumBlockLinesSpecified = true;
            }
        }

        private Int16? numBlockLinesField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumBlockLinesSpecified { get; set; }
        /// <summary>
        /// Type of hook. 
        /// </summary>
        [XmlElement("typeHook")]
        public String TypeHook { get; set; }
        /// <summary>
        /// Weight rating of the hook. 
        /// </summary>
        [XmlElement("ratingHook")]
        public ForceMeasure RatingHook { get; set; }
        /// <summary>
        /// Drill line diameter. 
        /// </summary>
        [XmlElement("sizeDrillLine")]
        public LengthMeasure SizeDrillLine { get; set; }
        /// <summary>
        /// Draw-works type. 
        /// </summary>
        [XmlElement("typeDrawWorks")]
        public DrawWorksType? TypeDrawWorks {
            get {
                return typeDrawWorksField;
            } 
            set { 
                typeDrawWorksField = value;
                this.TypeDrawWorksSpecified = true;
            }
        }

        private DrawWorksType? typeDrawWorksField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeDrawWorksSpecified { get; set; }
        /// <summary>
        /// Draw works horse power. 
        /// </summary>
        [XmlElement("powerDrawWorks")]
        public PowerMeasure PowerDrawWorks { get; set; }
        /// <summary>
        /// Weight rating of the drawworks. 
        /// </summary>
        [XmlElement("ratingDrawWorks")]
        public ForceMeasure RatingDrawWorks { get; set; }
        /// <summary>
        /// Description of the drawworks motor. 
        /// </summary>
        [XmlElement("motorDrawWorks")]
        public String MotorDrawWorks { get; set; }
        /// <summary>
        /// Rig brake description. 
        /// </summary>
        [XmlElement("descBrake")]
        public String DescBrake { get; set; }
        /// <summary>
        /// Type of Swivel. 
        /// </summary>
        [XmlElement("typeSwivel")]
        public String TypeSwivel { get; set; }
        /// <summary>
        /// Maximum swivel rating. 
        /// </summary>
        [XmlElement("ratingSwivel")]
        public ForceMeasure RatingSwivel { get; set; }
        /// <summary>
        /// Work string drive type. 
        /// </summary>
        [XmlElement("rotSystem")]
        public DriveType? RotSystem {
            get {
                return rotSystemField;
            } 
            set { 
                rotSystemField = value;
                this.RotSystemSpecified = true;
            }
        }

        private DriveType? rotSystemField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RotSystemSpecified { get; set; }
        /// <summary>
        /// Description of rotating system. 
        /// </summary>
        [XmlElement("descRotSystem")]
        public String DescRotSystem { get; set; }
        /// <summary>
        /// Work string rotational torque rating. 
        /// </summary>
        [XmlElement("ratingTqRotSys")]
        public MomentOfForceMeasure RatingTorqueRotSys { get; set; }
        /// <summary>
        /// Rotary size opening. 
        /// </summary>
        [XmlElement("rotSizeOpening")]
        public LengthMeasure RotSizeOpening { get; set; }
        /// <summary>
        /// Work string rotational torque rating. 
        /// </summary>
        [XmlElement("ratingRotSystem")]
        public ForceMeasure RatingRotSystem { get; set; }
        /// <summary>
        /// Description of slow circulation rates system. 
        /// </summary>
        [XmlElement("scrSystem")]
        public String ScrSystem { get; set; }
        /// <summary>
        /// Name of pipe handling system. 
        /// </summary>
        [XmlElement("pipeHandlingSystem")]
        public String PipeHandlingSystem { get; set; }
        /// <summary>
        /// Bulk/dry mud storage capacity. 
        /// </summary>
        [XmlElement("capBulkMud")]
        public VolumeMeasure CapBulkMud { get; set; }
        /// <summary>
        /// Liquid mud storage capacity. 
        /// </summary>
        [XmlElement("capLiquidMud")]
        public VolumeMeasure CapLiquidMud { get; set; }
        /// <summary>
        /// Drill water capacity. 
        /// </summary>
        [XmlElement("capDrillWater")]
        public VolumeMeasure CapDrillWater { get; set; }
        /// <summary>
        /// Potable water capacity. 
        /// </summary>
        [XmlElement("capPotableWater")]
        public VolumeMeasure CapPotableWater { get; set; }
        /// <summary>
        /// Fuel capacity. 
        /// </summary>
        [XmlElement("capFuel")]
        public VolumeMeasure CapFuel { get; set; }
        /// <summary>
        /// Capacity of builk cement. 
        /// </summary>
        [XmlElement("capBulkCement")]
        public VolumeMeasure CapBulkCement { get; set; }
        /// <summary>
        /// Power system. 
        /// </summary>
        [XmlElement("mainEngine")]
        public String MainEngine { get; set; }
        /// <summary>
        /// Description of the electrical power generating system. 
        /// </summary>
        [XmlElement("generator")]
        public String Generator { get; set; }
        /// <summary>
        /// Name of cement unit on the rig. 
        /// </summary>
        [XmlElement("cementUnit")]
        public String CementUnit { get; set; }
        /// <summary>
        /// Number of beds available on the rig. 
        /// </summary>
        [XmlElement("numBunks")]
        public Int16? NumBunks {
            get {
                return numBunksField;
            } 
            set { 
                numBunksField = value;
                this.NumBunksSpecified = true;
            }
        }

        private Int16? numBunksField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumBunksSpecified { get; set; }
        /// <summary>
        /// Number of bunks per room. 
        /// </summary>
        [XmlElement("bunksPerRoom")]
        public Int16? BunksPerRoom {
            get {
                return bunksPerRoomField;
            } 
            set { 
                bunksPerRoomField = value;
                this.BunksPerRoomSpecified = true;
            }
        }

        private Int16? bunksPerRoomField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BunksPerRoomSpecified { get; set; }
        /// <summary>
        /// Number of cranes on the rig. 
        /// </summary>
        [XmlElement("numCranes")]
        public Int16? NumCranes {
            get {
                return numCranesField;
            } 
            set { 
                numCranesField = value;
                this.NumCranesSpecified = true;
            }
        }

        private Int16? numCranesField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumCranesSpecified { get; set; }
        /// <summary>
        /// Number of anchors. 
        /// </summary>
        [XmlElement("numAnch")]
        public Int16? NumAnch {
            get {
                return numAnchField;
            } 
            set { 
                numAnchField = value;
                this.NumAnchSpecified = true;
            }
        }

        private Int16? numAnchField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumAnchSpecified { get; set; }
        /// <summary>
        /// Mooring type. 
        /// </summary>
        [XmlElement("moorType")]
        public String MoorType { get; set; }
        /// <summary>
        /// Number of guideline tensioners. 
        /// </summary>
        [XmlElement("numGuideTens")]
        public Int16? NumGuideTens {
            get {
                return numGuideTensField;
            } 
            set { 
                numGuideTensField = value;
                this.NumGuideTensSpecified = true;
            }
        }

        private Int16? numGuideTensField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumGuideTensSpecified { get; set; }
        /// <summary>
        /// Number of riser tensioners. 
        /// </summary>
        [XmlElement("numRiserTens")]
        public Int16? NumRiserTens {
            get {
                return numRiserTensField;
            } 
            set { 
                numRiserTensField = value;
                this.NumRiserTensSpecified = true;
            }
        }

        private Int16? numRiserTensField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumRiserTensSpecified { get; set; }
        /// <summary>
        /// Variable deck load maximum (offshore rigs only). 
        /// </summary>
        [XmlElement("varDeckLdMx")]
        public ForceMeasure VarDeckLoadMax { get; set; }
        /// <summary>
        /// Variable deck load storm rating (offshore rigs only). 
        /// </summary>
        [XmlElement("vdlStorm")]
        public ForceMeasure VdlStorm { get; set; }
        /// <summary>
        /// Number of thrusters. 
        /// </summary>
        [XmlElement("numThrusters")]
        public Int16? NumThrusters {
            get {
                return numThrustersField;
            } 
            set { 
                numThrustersField = value;
                this.NumThrustersSpecified = true;
            }
        }

        private Int16? numThrustersField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumThrustersSpecified { get; set; }
        /// <summary>
        /// Are the thrusters azimuth. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("azimuthing")]
        public Boolean? Azimuthing {
            get {
                return azimuthingField;
            } 
            set { 
                azimuthingField = value;
                this.AzimuthingSpecified = true;
            }
        }

        private Boolean? azimuthingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AzimuthingSpecified { get; set; }
        /// <summary>
        /// Minimum motion compensation. 
        /// </summary>
        [XmlElement("motionCompensationMn")]
        public ForceMeasure MotionCompensationMin { get; set; }
        /// <summary>
        /// Maximum motion compensation. 
        /// </summary>
        [XmlElement("motionCompensationMx")]
        public ForceMeasure MotionCompensationMax { get; set; }
        /// <summary>
        /// Length of motion compensation provided by equipment. 
        /// </summary>
        [XmlElement("strokeMotionCompensation")]
        public LengthMeasure StrokeMotionCompensation { get; set; }
        /// <summary>
        /// Riser angle limit. 
        /// </summary>
        [XmlElement("riserAngleLimit")]
        public PlaneAngleMeasure RiserAngleLimit { get; set; }
        /// <summary>
        /// Maximum allowable heave. 
        /// </summary>
        [XmlElement("heaveMx")]
        public LengthMeasure HeaveMax { get; set; }
        /// <summary>
        /// Description of gantry. 
        /// </summary>
        [XmlElement("gantry")]
        public String Gantry { get; set; }
        /// <summary>
        /// Description of flare. 
        /// </summary>
        [XmlElement("flares")]
        public String Flares { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Weather Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_weather", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Weather Component Schema")]
    public partial class Weather : Object 
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// Name of company that supplied the data. 
        /// </summary>
        [XmlElement("agency")]
        public String Agency { get; set; }
        /// <summary>
        /// Atmospheric pressure. 
        /// </summary>
        [XmlElement("barometricPressure")]
        public PressureMeasure BarometricPressure { get; set; }
        /// <summary>
        /// The Beaufort wind scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th Century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions. 
        /// </summary>
        [XmlElement("beaufortScaleNumber")]
        public Int16? BeaufortScaleNumber {
            get {
                return beaufortScaleNumberField;
            } 
            set { 
                beaufortScaleNumberField = value;
                this.BeaufortScaleNumberSpecified = true;
            }
        }

        private Int16? beaufortScaleNumberField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BeaufortScaleNumberSpecified { get; set; }
        /// <summary>
        /// Minimum temperature above ground. Temperature of the atmosphere. 
        /// </summary>
        [XmlElement("tempSurfaceMn")]
        public ThermodynamicTemperatureMeasure TempSurfaceMin { get; set; }
        /// <summary>
        /// Maximum temperature above ground. 
        /// </summary>
        [XmlElement("tempSurfaceMx")]
        public ThermodynamicTemperatureMeasure TempSurfaceMax { get; set; }
        /// <summary>
        /// A measure of the combined chilling effect of wind and low temperature on living things, also named chill factor, e.g., according to US weather service table, an air temperature of 30 degF with a 10 mi/h corresponds to a windchill of 22 degF. 
        /// </summary>
        [XmlElement("tempWindChill")]
        public ThermodynamicTemperatureMeasure TempWindChill { get; set; }
        /// <summary>
        /// Sea temperature. 
        /// </summary>
        [XmlElement("tempsea")]
        public ThermodynamicTemperatureMeasure Tempsea { get; set; }
        /// <summary>
        /// Horizontal visibility. 
        /// </summary>
        [XmlElement("visibility")]
        public LengthMeasure Visibility { get; set; }
        /// <summary>
        /// The direction from which the waves are coming, measured from true north. 
        /// </summary>
        [XmlElement("aziWave")]
        public PlaneAngleMeasure AziWave { get; set; }
        /// <summary>
        /// Average height of the waves. 
        /// </summary>
        [XmlElement("htWave")]
        public LengthMeasure HeightWave { get; set; }
        /// <summary>
        /// An average of the higher 1/3 of the wave heights passing during a sample period (typically 20 to 30 minutes). 
        /// </summary>
        [XmlElement("significantWave")]
        public LengthMeasure SignificantWave { get; set; }
        /// <summary>
        /// The maximum wave height.
        /// </summary>
        [XmlElement("maxWave")]
        public LengthMeasure MaxWave { get; set; }
        /// <summary>
        /// The elapsed time between the passing of two wave tops. 
        /// </summary>
        [XmlElement("periodWave")]
        public TimeMeasure PeriodWave { get; set; }
        /// <summary>
        /// The direction from which the wind is blowing, measured from true north. 
        /// </summary>
        [XmlElement("aziWind")]
        public PlaneAngleMeasure AziWind { get; set; }
        /// <summary>
        /// Wind speed. 
        /// </summary>
        [XmlElement("velWind")]
        public VelocityMeasure VelWind { get; set; }
        /// <summary>
        /// Type of precipitation. 
        /// </summary>
        [XmlElement("typePrecip")]
        public String TypePrecip { get; set; }
        /// <summary>
        /// Amount of precipitation. 
        /// </summary>
        [XmlElement("amtPrecip")]
        public LengthMeasure AmtPrecip { get; set; }
        /// <summary>
        /// Description of cloud cover. 
        /// </summary>
        [XmlElement("coverCloud")]
        public String CoverCloud { get; set; }
        /// <summary>
        /// Height of cloud cover. 
        /// </summary>
        [XmlElement("ceilingCloud")]
        public LengthMeasure CeilingCloud { get; set; }
        /// <summary>
        /// Current speed. 
        /// </summary>
        [XmlElement("currentSea")]
        public VelocityMeasure CurrentSea { get; set; }
        /// <summary>
        /// Azimuth of current. 
        /// </summary>
        [XmlElement("aziCurrentSea")]
        public PlaneAngleMeasure AziCurrentSea { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Support Craft Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_supportCraft", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Support Craft Component Schema")]
    public partial class SupportCraft : Object 
    {

        /// <summary>
        /// Human recognizable context for support craft. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Type of support craft. 
        /// </summary>
        [XmlElement("typeSuppCraft")]
        public SupportCraftType? TypeSuppCraft {
            get {
                return typeSuppCraftField;
            } 
            set { 
                typeSuppCraftField = value;
                this.TypeSuppCraftSpecified = true;
            }
        }

        private SupportCraftType? typeSuppCraftField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeSuppCraftSpecified { get; set; }
        /// <summary>
        /// Date and time when vehicle arrived at rig site. 
        /// </summary>
        [XmlElement("dTimArrived")]
        public DateTime? DateTimeArrived {
            get {
                return dTimArrivedField;
            } 
            set { 
                dTimArrivedField = value;
                this.DateTimeArrivedSpecified = true;
            }
        }

        private DateTime? dTimArrivedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeArrivedSpecified { get; set; }
        /// <summary>
        /// Date and time when vehicle departed rig site. 
        /// </summary>
        [XmlElement("dTimDeparted")]
        public DateTime? DateTimeDeparted {
            get {
                return dTimDepartedField;
            } 
            set { 
                dTimDepartedField = value;
                this.DateTimeDepartedSpecified = true;
            }
        }

        private DateTime? dTimDepartedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeDepartedSpecified { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Personnel Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_personnel", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Personnel Component Schema")]
    public partial class Personnel : Object 
    {

        /// <summary>
        /// Name of company. 
        /// </summary>
        [XmlElement("company")]
        public String Company { get; set; }
        /// <summary>
        /// Service provided by the company. 
        /// </summary>
        [XmlElement("typeService")]
        public String TypeService { get; set; }
        /// <summary>
        /// Number of people on board for that company. 
        /// </summary>
        [XmlElement("numPeople")]
        public Int16? NumPeople {
            get {
                return numPeopleField;
            } 
            set { 
                numPeopleField = value;
                this.NumPeopleSpecified = true;
            }
        }

        private Int16? numPeopleField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumPeopleSpecified { get; set; }
        /// <summary>
        /// Total time worked by the company (commonly in hours). 
        /// </summary>
        [XmlElement("totalTime")]
        public TimeMeasure TotalTime { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations HSE Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_incident", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations HSE Component Schema")]
    public partial class Incident : Object 
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// Name of person who prepared incident report. 
        /// </summary>
        [XmlElement("reporter")]
        public String Reporter { get; set; }
        /// <summary>
        /// Number of personnel with minor injuries. 
        /// </summary>
        [XmlElement("numMinorInjury")]
        public Int16? NumMinorInjury {
            get {
                return numMinorInjuryField;
            } 
            set { 
                numMinorInjuryField = value;
                this.NumMinorInjurySpecified = true;
            }
        }

        private Int16? numMinorInjuryField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumMinorInjurySpecified { get; set; }
        /// <summary>
        /// Number of personnel with major injuries. 
        /// </summary>
        [XmlElement("numMajorInjury")]
        public Int16? NumMajorInjury {
            get {
                return numMajorInjuryField;
            } 
            set { 
                numMajorInjuryField = value;
                this.NumMajorInjurySpecified = true;
            }
        }

        private Int16? numMajorInjuryField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumMajorInjurySpecified { get; set; }
        /// <summary>
        /// Number of personnel killed in incident. 
        /// </summary>
        [XmlElement("numFatality")]
        public Int16? NumFatality {
            get {
                return numFatalityField;
            } 
            set { 
                numFatalityField = value;
                this.NumFatalitySpecified = true;
            }
        }

        private Int16? numFatalityField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumFatalitySpecified { get; set; }
        /// <summary>
        /// Near miss incident occurrence? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("isNearMiss")]
        public Boolean? IsNearMiss {
            get {
                return isNearMissField;
            } 
            set { 
                isNearMissField = value;
                this.IsNearMissSpecified = true;
            }
        }

        private Boolean? isNearMissField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsNearMissSpecified { get; set; }
        /// <summary>
        /// Location description. 
        /// </summary>
        [XmlElement("descLocation")]
        public String DescLocation { get; set; }
        /// <summary>
        /// Accident description. 
        /// </summary>
        [XmlElement("descAccident")]
        public String DescAccident { get; set; }
        /// <summary>
        /// Remedial action description. 
        /// </summary>
        [XmlElement("remedialActionDesc")]
        public String RemedialActionDesc { get; set; }
        /// <summary>
        /// Cause description. 
        /// </summary>
        [XmlElement("causeDesc")]
        public String CAuseDesc { get; set; }
        /// <summary>
        /// Number of hours lost due to incident. 
        /// </summary>
        [XmlElement("eTimLostGross")]
        public TimeMeasure ETimeLostGross { get; set; }
        /// <summary>
        /// Gross estimate of cost incurred due to incident. 
        /// </summary>
        [XmlElement("costLostGross")]
        public Cost CostLostGross { get; set; }
        /// <summary>
        /// Name of company that caused incident. 
        /// </summary>
        [XmlElement("responsibleCompany")]
        public String ResponsibleCompany { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Health, Safety and Environment Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_hse", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Health, Safety and Environment Component Schema")]
    public partial class Hse : Object 
    {

        /// <summary>
        /// Incident free duration (commonly in days). 
        /// </summary>
        [XmlElement("daysIncFree")]
        public TimeMeasure DaysIncFree { get; set; }
		/// <summary>
        /// Incident report occurrences description. 
        /// </summary>
        [XmlElement("incident")]
        public List<Incident> Incident { get; set; }
        /// <summary>
        /// Last casing pressure test date and time. 
        /// </summary>
        [XmlElement("lastCsgPresTest")]
        public DateTime? LastCsgPresTest {
            get {
                return lastCsgPresTestField;
            } 
            set { 
                lastCsgPresTestField = value;
                this.LastCsgPresTestSpecified = true;
            }
        }

        private DateTime? lastCsgPresTestField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastCsgPresTestSpecified { get; set; }
        /// <summary>
        /// Last casing pressure test pressure. 
        /// </summary>
        [XmlElement("presLastCsg")]
        public PressureMeasure PresLastCsg { get; set; }
        /// <summary>
        /// Last blow out preventer pressure test. 
        /// </summary>
        [XmlElement("lastBopPresTest")]
        public DateTime? LastBopPresTest {
            get {
                return lastBopPresTestField;
            } 
            set { 
                lastBopPresTestField = value;
                this.LastBopPresTestSpecified = true;
            }
        }

        private DateTime? lastBopPresTestField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastBopPresTestSpecified { get; set; }
        /// <summary>
        /// Next blow out preventer pressure test. 
        /// </summary>
        [XmlElement("nextBopPresTest")]
        public DateTime? NextBopPresTest {
            get {
                return nextBopPresTestField;
            } 
            set { 
                nextBopPresTestField = value;
                this.NextBopPresTestSpecified = true;
            }
        }

        private DateTime? nextBopPresTestField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NextBopPresTestSpecified { get; set; }
        /// <summary>
        /// Standpipe manifold pressure tested to. 
        /// </summary>
        [XmlElement("presStdPipe")]
        public PressureMeasure PresStdPipe { get; set; }
        /// <summary>
        /// Kelly hose pressure tested to. 
        /// </summary>
        [XmlElement("presKellyHose")]
        public PressureMeasure PresKellyHose { get; set; }
        /// <summary>
        /// Blow out preventer diverter pressure tested to. 
        /// </summary>
        [XmlElement("presDiverter")]
        public PressureMeasure PresDivisionerter { get; set; }
        /// <summary>
        /// Blow out preventer annular preventer pressure tested to. 
        /// </summary>
        [XmlElement("presAnnular")]
        public PressureMeasure PresAnnular { get; set; }
        /// <summary>
        /// Blow out preventer ram pressure tested to. 
        /// </summary>
        [XmlElement("presRams")]
        public PressureMeasure PresRams { get; set; }
        /// <summary>
        /// Choke line pressure tested to. 
        /// </summary>
        [XmlElement("presChokeLine")]
        public PressureMeasure PresChokeLine { get; set; }
        /// <summary>
        /// Choke line manifold pressure tested to. 
        /// </summary>
        [XmlElement("presChokeMan")]
        public PressureMeasure PresChokeMan { get; set; }
        /// <summary>
        /// Last fire or boat drill. 
        /// </summary>
        [XmlElement("lastFireBoatDrill")]
        public DateTime? LastFireBoatDrill {
            get {
                return lastFireBoatDrillField;
            } 
            set { 
                lastFireBoatDrillField = value;
                this.LastFireBoatDrillSpecified = true;
            }
        }

        private DateTime? lastFireBoatDrillField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastFireBoatDrillSpecified { get; set; }
        /// <summary>
        /// Last abandonment drill. 
        /// </summary>
        [XmlElement("lastAbandonDrill")]
        public DateTime? LastAbandonDrill {
            get {
                return lastAbandonDrillField;
            } 
            set { 
                lastAbandonDrillField = value;
                this.LastAbandonDrillSpecified = true;
            }
        }

        private DateTime? lastAbandonDrillField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastAbandonDrillSpecified { get; set; }
        /// <summary>
        /// Last rig inspection/check. 
        /// </summary>
        [XmlElement("lastRigInspection")]
        public DateTime? LastRigInspection {
            get {
                return lastRigInspectionField;
            } 
            set { 
                lastRigInspectionField = value;
                this.LastRigInspectionSpecified = true;
            }
        }

        private DateTime? lastRigInspectionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastRigInspectionSpecified { get; set; }
        /// <summary>
        /// Last safety meeting. 
        /// </summary>
        [XmlElement("lastSafetyMeeting")]
        public DateTime? LastSafetyMeeting {
            get {
                return lastSafetyMeetingField;
            } 
            set { 
                lastSafetyMeetingField = value;
                this.LastSafetyMeetingSpecified = true;
            }
        }

        private DateTime? lastSafetyMeetingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastSafetyMeetingSpecified { get; set; }
        /// <summary>
        /// Last safety inspection. 
        /// </summary>
        [XmlElement("lastSafetyInspection")]
        public DateTime? LastSafetyInspection {
            get {
                return lastSafetyInspectionField;
            } 
            set { 
                lastSafetyInspectionField = value;
                this.LastSafetyInspectionSpecified = true;
            }
        }

        private DateTime? lastSafetyInspectionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastSafetyInspectionSpecified { get; set; }
        /// <summary>
        /// Last trip drill. 
        /// </summary>
        [XmlElement("lastTripDrill")]
        public DateTime? LastTripDrill {
            get {
                return lastTripDrillField;
            } 
            set { 
                lastTripDrillField = value;
                this.LastTripDrillSpecified = true;
            }
        }

        private DateTime? lastTripDrillField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastTripDrillSpecified { get; set; }
        /// <summary>
        /// Last diverter drill. 
        /// </summary>
        [XmlElement("lastDiverterDrill")]
        public DateTime? LastDivisionerterDrill {
            get {
                return lastDiverterDrillField;
            } 
            set { 
                lastDiverterDrillField = value;
                this.LastDivisionerterDrillSpecified = true;
            }
        }

        private DateTime? lastDiverterDrillField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastDivisionerterDrillSpecified { get; set; }
        /// <summary>
        /// Last blow out preventer drill. 
        /// </summary>
        [XmlElement("lastBopDrill")]
        public DateTime? LastBopDrill {
            get {
                return lastBopDrillField;
            } 
            set { 
                lastBopDrillField = value;
                this.LastBopDrillSpecified = true;
            }
        }

        private DateTime? lastBopDrillField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean LastBopDrillSpecified { get; set; }
        /// <summary>
        /// Governmental regulatory inspection agency inspection? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("regAgencyInsp")]
        public Boolean? RegAgencyInsp {
            get {
                return regAgencyInspField;
            } 
            set { 
                regAgencyInspField = value;
                this.RegAgencyInspSpecified = true;
            }
        }

        private Boolean? regAgencyInspField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RegAgencyInspSpecified { get; set; }
        /// <summary>
        /// Inspection non-compliance notice served? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("nonComplianceIssued")]
        public Boolean? NonComplianceIssued {
            get {
                return nonComplianceIssuedField;
            } 
            set { 
                nonComplianceIssuedField = value;
                this.NonComplianceIssuedSpecified = true;
            }
        }

        private Boolean? nonComplianceIssuedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NonComplianceIssuedSpecified { get; set; }
        /// <summary>
        /// Number of Health, Safety and Environment incidents reported. 
        /// </summary>
        [XmlElement("numStopCards")]
        public Int16? NumStopCArds {
            get {
                return numStopCardsField;
            } 
            set { 
                numStopCardsField = value;
                this.NumStopCArdsSpecified = true;
            }
        }

        private Int16? numStopCardsField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumStopCArdsSpecified { get; set; }
        /// <summary>
        /// Daily whole mud discarded. 
        /// </summary>
        [XmlElement("fluidDischarged")]
        public VolumeMeasure FluidDischarged { get; set; }
        /// <summary>
        /// Volume of cuttings discharged. 
        /// </summary>
        [XmlElement("volCtgDischarged")]
        public VolumeMeasure VolCTgDischarged { get; set; }
        /// <summary>
        /// Oil on cuttings daily discharge. 
        /// </summary>
        [XmlElement("volOilCtgDischarge")]
        public VolumeMeasure VolOilCTgDischarge { get; set; }
        /// <summary>
        /// Volume of sanitary waste discharged. 
        /// </summary>
        [XmlElement("wasteDischarged")]
        public VolumeMeasure WasteDischarged { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Shaker Screen Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shakerScreen", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Shaker Screen Component Schema")]
    public partial class ShakerScreen : Object 
    {

        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// Date and time activities were completed. 
        /// </summary>
        [XmlElement("dTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set { 
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
            }
        }

        private DateTime? dTimEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndSpecified { get; set; }
        /// <summary>
        /// Deck number mesh installed on. 
        /// </summary>
        [XmlElement("numDeck")]
        public Int16? NumDeck {
            get {
                return numDeckField;
            } 
            set { 
                numDeckField = value;
                this.NumDeckSpecified = true;
            }
        }

        private Int16? numDeckField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumDeckSpecified { get; set; }
        /// <summary>
        /// Mesh size in the X direction. 
        /// </summary>
        [XmlElement("meshX")]
        public LengthMeasure MeshX { get; set; }
        /// <summary>
        /// Mesh size in the Y direction. 
        /// </summary>
        [XmlElement("meshY")]
        public LengthMeasure MeshY { get; set; }
        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
        [XmlElement("manufacturer")]
        public String Manufacturer { get; set; }
        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
        [XmlElement("model")]
        public String Model { get; set; }
        /// <summary>
        /// Shaker screen cut point - the maximum size that will pass through the screen.
        /// </summary>
        [XmlElement("cutPoint")]
        public LengthMeasure CutPoint { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Shaker Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shakerOp", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Shaker Component Schema")]
    public partial class ShakerOp : Object 
    {

        /// <summary>
        /// A pointer to the shaker that is characterized by this report. 
        /// </summary>
        [XmlElement("shaker")]
        public RefNameString Shaker { get; set; }
        /// <summary>
        /// Hole measured depth at time of measurement. 
        /// </summary>
        [XmlElement("mdHole")]
        public MeasuredDepthCoord MDHole { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Hours run for this operation. 
        /// </summary>
        [XmlElement("hoursRun")]
        public TimeMeasure HoursRun { get; set; }
        /// <summary>
        /// Percent of screen covered by cuttings. 
        /// </summary>
        [XmlElement("pcScreenCovered")]
        public AreaPerAreaMeasure PercentScreenCovered { get; set; }
        /// <summary>
        /// Set of shaker screen records for the operation. 
        /// </summary>
        [XmlElement("shakerScreen")]
        public ShakerScreen ShakerScreen { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Pump Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pumpOp", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Pump Component Schema")]
    public partial class PumpOp : Object 
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// This is a pointer to the corresponding pump on the rig. 
        /// </summary>
        [XmlElement("pump")]
        public RefPositiveCount Pump { get; set; }
        /// <summary>
        /// Type of pump operation. 
        /// </summary>
        [XmlElement("typeOperation")]
        public PumpOpType? TypeOperatingeration {
            get {
                return typeOperationField;
            } 
            set { 
                typeOperationField = value;
                this.TypeOperatingerationSpecified = true;
            }
        }

        private PumpOpType? typeOperationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeOperatingerationSpecified { get; set; }
        /// <summary>
        /// Liner size. 
        /// </summary>
        [XmlElement("idLiner")]
        public LengthMeasure LinerSize { get; set; }
        /// <summary>
        /// Stroke Length. 
        /// </summary>
        [XmlElement("lenStroke")]
        public LengthMeasure LenStroke { get; set; }
        /// <summary>
        /// Pump rate (Strokes per minute). 
        /// </summary>
        [XmlElement("rateStroke")]
        public AnglePerTimeMeasure RateStroke { get; set; }
        /// <summary>
        /// Pump pressure recorded. 
        /// </summary>
        [XmlElement("pressure")]
        public PressureMeasure Pressure { get; set; }
        /// <summary>
        /// Pump efficiency. 
        /// </summary>
        [XmlElement("pcEfficiency")]
        public RelativePowerMeasure PercentEfficiency { get; set; }
        /// <summary>
        /// Pump output (incl. for efficiency). 
        /// </summary>
        [XmlElement("pumpOutput")]
        public VolumeFlowRateMeasure PumpOutput { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refPositiveCount xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refPositiveCount", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the refPositiveCount xsd type.")]
    public partial class RefPositiveCount : Object 
    {
        public RefPositiveCount() {}
        public RefPositiveCount(Int16 value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the node referenced by the index value. This attribute is required within the context of a WITSML server.
        /// </summary>
        [XmlAttribute("uidRef")]
        public String UidRef { get; set; }
		
        [XmlText]
        public Int16 Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Rig Response Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rigResponse", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Rig Response Component Schema")]
    public partial class RigResponse : Object 
    {

		/// <summary>
        /// Vector of the tension on anchors #1 to #n. For this usage the name attribute is irrelevant because the semantics are carried in the element name. The index attribute represents which anchor is being described.
        /// </summary>
        [XmlElement("anchorTension")]
        public List<IndexedObject> AnchorTension { get; set; }
		/// <summary>
        /// Vector of the angles of the anchors #1 to #n. 
        /// </summary>
        [XmlElement("anchorAngle")]
        public List<IndexedObject> AnchorAngle { get; set; }
        /// <summary>
        /// Direction, relative to true north, to which the rig is facing. 
        /// </summary>
        [XmlElement("rigHeading")]
        public PlaneAngleMeasure RigHeading { get; set; }
        /// <summary>
        /// Maximum amplitude of the vertical motion of the rig. 
        /// </summary>
        [XmlElement("rigHeave")]
        public LengthMeasure RigHeave { get; set; }
        /// <summary>
        /// Measure of the fore-aft rotational movement of the rig due the combined effects of wind and waves; measured as the angle from horizontal 
        /// </summary>
        [XmlElement("rigPitchAngle")]
        public PlaneAngleMeasure RigPitchAngle { get; set; }
        /// <summary>
        /// Measure of the side-to-side rotational movement of the rig due the combined effects of wind and waves; measured as the angle from vertical 
        /// </summary>
        [XmlElement("rigRollAngle")]
        public PlaneAngleMeasure RigRollAngle { get; set; }
        /// <summary>
        /// Angle of the marine riser with the vertical. 
        /// </summary>
        [XmlElement("riserAngle")]
        public PlaneAngleMeasure RiserAngle { get; set; }
        /// <summary>
        /// Direction of the marine riser. 
        /// </summary>
        [XmlElement("riserDirection")]
        public PlaneAngleMeasure RiserDirection { get; set; }
        /// <summary>
        /// Tension of the marine riser. 
        /// </summary>
        [XmlElement("riserTension")]
        public ForceMeasure RiserTension { get; set; }
        /// <summary>
        /// Current temporary load on the rig deck. 
        /// </summary>
        [XmlElement("variableDeckLoad")]
        public ForceMeasure VariableDeckLoad { get; set; }
        /// <summary>
        /// Total deck load. 
        /// </summary>
        [XmlElement("totalDeckLoad")]
        public ForceMeasure TotalDeckLoad { get; set; }
        /// <summary>
        /// Direction of the guide base. 
        /// </summary>
        [XmlElement("guideBaseAngle")]
        public PlaneAngleMeasure GuideBaseAngle { get; set; }
        /// <summary>
        /// Angle between riser and blow out preventer at the flex joint. 
        /// </summary>
        [XmlElement("ballJointAngle")]
        public PlaneAngleMeasure BallJointAngle { get; set; }
        /// <summary>
        /// Direction of the ball joint. 
        /// </summary>
        [XmlElement("ballJointDirection")]
        public PlaneAngleMeasure BallJointDirection { get; set; }
        /// <summary>
        /// Horizontal displacement of the rig relative to the wellhead. 
        /// </summary>
        [XmlElement("offsetRig")]
        public LengthMeasure OffsetRig { get; set; }
        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
        [XmlElement("loadLeg1")]
        public ForceMeasure LoadLeg1 { get; set; }
        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
        [XmlElement("loadLeg2")]
        public ForceMeasure LoadLeg2 { get; set; }
        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
        [XmlElement("loadLeg3")]
        public ForceMeasure LoadLeg3 { get; set; }
        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
        [XmlElement("loadLeg4")]
        public ForceMeasure LoadLeg4 { get; set; }
        /// <summary>
        /// Penetration of leg into seabed. 
        /// </summary>
        [XmlElement("penetrationLeg1")]
        public LengthMeasure PenetrationLeg1 { get; set; }
        /// <summary>
        /// Penetration of leg into seabed. 
        /// </summary>
        [XmlElement("penetrationLeg2")]
        public LengthMeasure PenetrationLeg2 { get; set; }
        /// <summary>
        /// Penetration of leg into seabed 
        /// </summary>
        [XmlElement("penetrationLeg3")]
        public LengthMeasure PenetrationLeg3 { get; set; }
        /// <summary>
        /// Penetration of leg into seabed 
        /// </summary>
        [XmlElement("penetrationLeg4")]
        public LengthMeasure PenetrationLeg4 { get; set; }
        /// <summary>
        /// Vessel displacement (in water). 
        /// </summary>
        [XmlElement("dispRig")]
        public LengthMeasure DispRig { get; set; }
        /// <summary>
        /// Mean draft at mid-section. 
        /// </summary>
        [XmlElement("meanDraft")]
        public LengthMeasure MeanDraft { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Inventory Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_inventory", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Inventory Component Schema ")]
    public partial class Inventory : Object 
    {

        /// <summary>
        /// Name or type of inventory item. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Volume per item unit. 
        /// </summary>
        [XmlElement("itemVolPerUnit")]
        public VolumeMeasure ItemVolPerUnit {
            get {
                return itemVolPerUnitField;
            } 
            set { 
                if (itemWtPerUnitFieldSpecified) throw new Exception("Cannot set property ItemVolPerUnit when property ItemWeightPerUnit is already set");
                itemVolPerUnitField = value;
                itemVolPerUnitFieldSpecified = true;
            }
        }

        private VolumeMeasure itemVolPerUnitField; 
        private bool itemVolPerUnitFieldSpecified = false; 

        /// <summary>
        /// Weight per item unit. 
        /// </summary>
        [XmlElement("itemWtPerUnit")]
        public MassMeasure ItemWeightPerUnit {
            get {
                return itemWtPerUnitField;
            } 
            set { 
                if (itemVolPerUnitFieldSpecified) throw new Exception("Cannot set property ItemWeightPerUnit when property ItemVolPerUnit is already set");
                itemWtPerUnitField = value;
                itemWtPerUnitFieldSpecified = true;
            }
        }

        private MassMeasure itemWtPerUnitField; 
        private bool itemWtPerUnitFieldSpecified = false; 


        /// <summary>
        /// Price per item unit, assume same currency for all items. 
        /// </summary>
        [XmlElement("pricePerUnit")]
        public Cost PricePerUnit { get; set; }
        /// <summary>
        /// Start quantity for report interval. 
        /// </summary>
        [XmlElement("qtyStart")]
        public Int16? QtyStart {
            get {
                return qtyStartField;
            } 
            set { 
                qtyStartField = value;
                this.QtyStartSpecified = true;
            }
        }

        private Int16? qtyStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyStartSpecified { get; set; }
        /// <summary>
        /// Daily quantity adjustment/correction. 
        /// </summary>
        [XmlElement("qtyAdjustment")]
        public Int32? QtyAdjustment {
            get {
                return qtyAdjustmentField;
            } 
            set { 
                qtyAdjustmentField = value;
                this.QtyAdjustmentSpecified = true;
            }
        }

        private Int32? qtyAdjustmentField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyAdjustmentSpecified { get; set; }
        /// <summary>
        /// Quantity received at site. 
        /// </summary>
        [XmlElement("qtyReceived")]
        public Int16? QtyReceived {
            get {
                return qtyReceivedField;
            } 
            set { 
                qtyReceivedField = value;
                this.QtyReceivedSpecified = true;
            }
        }

        private Int16? qtyReceivedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyReceivedSpecified { get; set; }
        /// <summary>
        /// Quantity returned to base from site. 
        /// </summary>
        [XmlElement("qtyReturned")]
        public Int16? QtyReturned {
            get {
                return qtyReturnedField;
            } 
            set { 
                qtyReturnedField = value;
                this.QtyReturnedSpecified = true;
            }
        }

        private Int16? qtyReturnedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyReturnedSpecified { get; set; }
        /// <summary>
        /// Quantity used for the report period 
        /// </summary>
        [XmlElement("qtyUsed")]
        public Int16? QtyUsed {
            get {
                return qtyUsedField;
            } 
            set { 
                qtyUsedField = value;
                this.QtyUsedSpecified = true;
            }
        }

        private Int16? qtyUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyUsedSpecified { get; set; }
        /// <summary>
        /// Cost for the product for the interval. 
        /// </summary>
        [XmlElement("costItem")]
        public Cost CostItem { get; set; }
        /// <summary>
        /// Amount of item remaining on location after all adjustments for the report interval. 
        /// </summary>
        [XmlElement("qtyOnLocation")]
        public Int16? QtyOnLocation {
            get {
                return qtyOnLocationField;
            } 
            set { 
                qtyOnLocationField = value;
                this.QtyOnLocationSpecified = true;
            }
        }

        private Int16? qtyOnLocationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyOnLocationSpecified { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Mud Losses Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudLosses", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Mud Losses Component Schema")]
    public partial class MudLosses : Object 
    {

        /// <summary>
        /// Volume of mud lost at shakers (at surface). 
        /// </summary>
        [XmlElement("volLostShakerSurf")]
        public VolumeMeasure VolLostShakerSurf { get; set; }
        /// <summary>
        /// Volume of mud lost in mud cleaning equipment (at surface). 
        /// </summary>
        [XmlElement("volLostMudCleanerSurf")]
        public VolumeMeasure VolLostMudCleanerSurf { get; set; }
        /// <summary>
        /// Volume of mud lost in pit room (at surface). 
        /// </summary>
        [XmlElement("volLostPitsSurf")]
        public VolumeMeasure VolLostPitsSurf { get; set; }
        /// <summary>
        /// Volume of mud lost while tripping (at surface). 
        /// </summary>
        [XmlElement("volLostTrippingSurf")]
        public VolumeMeasure VolLostTrippingSurf { get; set; }
        /// <summary>
        /// Surface volume lost other location. 
        /// </summary>
        [XmlElement("volLostOtherSurf")]
        public VolumeMeasure VolLostOtherSurf { get; set; }
        /// <summary>
        /// Total volume of mud lost at surface. 
        /// </summary>
        [XmlElement("volTotMudLostSurf")]
        public VolumeMeasure VolTotMudLostSurf { get; set; }
        /// <summary>
        /// Mud volume lost downhole while circulating. 
        /// </summary>
        [XmlElement("volLostCircHole")]
        public VolumeMeasure VolLostCircHole { get; set; }
        /// <summary>
        /// Mud volume lost downhole while running casing. 
        /// </summary>
        [XmlElement("volLostCsgHole")]
        public VolumeMeasure VolLostCsgHole { get; set; }
        /// <summary>
        /// Mud volume lost downhole while cementing. 
        /// </summary>
        [XmlElement("volLostCmtHole")]
        public VolumeMeasure VolLostCmtHole { get; set; }
        /// <summary>
        /// Mud volume lost downhole behind casing. 
        /// </summary>
        [XmlElement("volLostBhdCsgHole")]
        public VolumeMeasure VolLostBhdCsgHole { get; set; }
        /// <summary>
        /// Mud volume lost downhole during abandonment. 
        /// </summary>
        [XmlElement("volLostAbandonHole")]
        public VolumeMeasure VolLostAbandonHole { get; set; }
        /// <summary>
        /// Mud volume lost downhole from other location. 
        /// </summary>
        [XmlElement("volLostOtherHole")]
        public VolumeMeasure VolLostOtherHole { get; set; }
        /// <summary>
        /// Total volume of mud lost downhole. 
        /// </summary>
        [XmlElement("volTotMudLostHole")]
        public VolumeMeasure VolTotMudLostHole { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Mud Volume Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudVolume", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Mud Volume Component Schema")]
    public partial class MudVolume : Object 
    {

        /// <summary>
        /// Total volume of mud at start of report interval (including pits and hole). 
        /// </summary>
        [XmlElement("volTotMudStart")]
        public VolumeMeasure VolTotMudStart { get; set; }
        /// <summary>
        /// Volume of mud dumped. 
        /// </summary>
        [XmlElement("volMudDumped")]
        public VolumeMeasure VolMudDumped { get; set; }
        /// <summary>
        /// Volume of mud received from mud warehouse. 
        /// </summary>
        [XmlElement("volMudReceived")]
        public VolumeMeasure VolMudReceived { get; set; }
        /// <summary>
        /// Volume of mud returned to mud warehouse. 
        /// </summary>
        [XmlElement("volMudReturned")]
        public VolumeMeasure VolMudReturned { get; set; }
        /// <summary>
        /// Mud losses detailed breakdown between Surface and Down Hole. 
        /// </summary>
        [XmlElement("mudLosses")]
        public MudLosses MudLosses { get; set; }
        /// <summary>
        /// Volume of mud built. 
        /// </summary>
        [XmlElement("volMudBuilt")]
        public VolumeMeasure VolMudBuilt { get; set; }
        /// <summary>
        /// Volume of mud contained within active string. 
        /// </summary>
        [XmlElement("volMudString")]
        public VolumeMeasure VolMudString { get; set; }
        /// <summary>
        /// Volume of mud contained in casing annulus. 
        /// </summary>
        [XmlElement("volMudCasing")]
        public VolumeMeasure VolMudCAsing { get; set; }
        /// <summary>
        /// Volume of mud contained in open hole annulus. 
        /// </summary>
        [XmlElement("volMudHole")]
        public VolumeMeasure VolMudHole { get; set; }
        /// <summary>
        /// Volume of mud contained in riser section annulus. 
        /// </summary>
        [XmlElement("volMudRiser")]
        public VolumeMeasure VolMudRiser { get; set; }
        /// <summary>
        /// Total volume of mud at the end of the report interval (including pits and hole). 
        /// </summary>
        [XmlElement("volTotMudEnd")]
        public VolumeMeasure VolTotMudEnd { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Pit Volume Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pitVolume", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Pit Volume Component Schema")]
    public partial class PitVolume : Object 
    {

        /// <summary>
        /// This is a pointer to the corresponding pit on the rig.
        /// </summary>
        [XmlElement("pit")]
        public RefPositiveCount Pit { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Volume of fluid in pit. 
        /// </summary>
        [XmlElement("volPit")]
        public VolumeMeasure VolPit { get; set; }
        /// <summary>
        /// Density of fluid in pit. 
        /// </summary>
        [XmlElement("densFluid")]
        public DensityMeasure DensFluid { get; set; }
        /// <summary>
        /// Fluid description. 
        /// </summary>
        [XmlElement("descFluid")]
        public String DescFluid { get; set; }
        /// <summary>
        /// Funnel viscosity in seconds. 
        /// </summary>
        [XmlElement("visFunnel")]
        public TimeMeasure VisFunnel { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Slow Circulation Rates (SCR) Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_scr", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Slow Circulation Rates (SCR) Component Schema")]
    public partial class Scr : Object 
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// This is a pointer to the corresponding pump on the rig.
        /// </summary>
        [XmlElement("pump")]
        public RefPositiveCount Pump { get; set; }
        /// <summary>
        /// Type of slow circulation rate. 
        /// </summary>
        [XmlElement("typeScr")]
        public ScrType? TypeScr { get; set; }
        /// <summary>
        /// Pump stroke rate. 
        /// </summary>
        [XmlElement("rateStroke")]
        public AnglePerTimeMeasure RateStroke { get; set; }
        /// <summary>
        /// Recorded pump pressure for the stroke rate. 
        /// </summary>
        [XmlElement("presRecorded")]
        public PressureMeasure PresRecorded { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Day Cost Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_dayCost", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Day Cost Component Schema ")]
    public partial class DayCost : Object 
    {

        /// <summary>
        /// AFE number that this cost item applies to. 
        /// </summary>
        [XmlElement("numAFE")]
        public String NumAFE { get; set; }
        /// <summary>
        /// Cost group code. 
        /// </summary>
        [XmlElement("costGroup")]
        public String CostGroup { get; set; }
        /// <summary>
        /// Cost class code. 
        /// </summary>
        [XmlElement("costClass")]
        public String CostClass { get; set; }
        /// <summary>
        /// Cost code. 
        /// </summary>
        [XmlElement("costCode")]
        public String CostCode { get; set; }
        /// <summary>
        /// Cost subcode. 
        /// </summary>
        [XmlElement("costSubCode")]
        public String CostSubCode { get; set; }
        /// <summary>
        /// Description of cost item. 
        /// </summary>
        [XmlElement("costItemDescription")]
        public String CostItemDescription { get; set; }
        /// <summary>
        /// Cost per cost item, assume same currency.
        /// </summary>
        [XmlElement("costPerItem")]
        public Cost CostPerItem { get; set; }
        /// <summary>
        /// The kind of cost item specified (e.g., rig dayrate, joints casing). 
        /// </summary>
        [XmlElement("itemKind")]
        public String ItemKind { get; set; }
        /// <summary>
        /// Size of one cost item. 
        /// </summary>
        [XmlElement("itemSize")]
        public Double? ItemSize {
            get {
                return itemSizeField;
            } 
            set { 
                itemSizeField = value;
                this.ItemSizeSpecified = true;
            }
        }

        private Double? itemSizeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ItemSizeSpecified { get; set; }
        /// <summary>
        /// Number of cost items used that day e.g. 1 rig dayrate, 30 joints casing. 
        /// </summary>
        [XmlElement("qtyItem")]
        public Int16? QtyItem {
            get {
                return qtyItemField;
            } 
            set { 
                qtyItemField = value;
                this.QtyItemSpecified = true;
            }
        }

        private Int16? qtyItemField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean QtyItemSpecified { get; set; }
        /// <summary>
        /// Cost for the item for this record. 
        /// </summary>
        [XmlElement("costAmount")]
        public Cost CostAmount { get; set; }
        /// <summary>
        /// Invoice number for cost item, bill sent to Operator. 
        /// </summary>
        [XmlElement("numInvoice")]
        public String NumInvoice { get; set; }
        /// <summary>
        /// Purchase order number, provided by Operator. 
        /// </summary>
        [XmlElement("numPO")]
        public String NumPO { get; set; }
        /// <summary>
        /// Field Ticket number, issued by service company on location. 
        /// </summary>
        [XmlElement("numTicket")]
        public String NumTicket { get; set; }
        /// <summary>
        /// Is this item carried from day to day? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("isCarryOver")]
        public Boolean? IsCarryOver {
            get {
                return isCarryOverField;
            } 
            set { 
                isCarryOverField = value;
                this.IsCarryOverSpecified = true;
            }
        }

        private Boolean? isCarryOverField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsCarryOverSpecified { get; set; }
        /// <summary>
        /// Is this item a rental? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("isRental")]
        public Boolean? IsRental {
            get {
                return isRentalField;
            } 
            set { 
                isRentalField = value;
                this.IsRentalSpecified = true;
            }
        }

        private Boolean? isRentalField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IsRentalSpecified { get; set; }
		/// <summary>
        /// An identification tag for the item. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
        [XmlElement("nameTag")]
        public List<NameTag> NameTag { get; set; }
        /// <summary>
        /// Serial number. 
        /// </summary>
        [XmlElement("numSerial")]
        public String NumSerial { get; set; }
        /// <summary>
        /// Name of vendor. 
        /// </summary>
        [XmlElement("nameVendor")]
        public String NameVendor { get; set; }
        /// <summary>
        /// Vendor number. 
        /// </summary>
        [XmlElement("numVendor")]
        public String NumVendor { get; set; }
        /// <summary>
        /// Name of pool/reservoir that this cost item can be accounted to. 
        /// </summary>
        [XmlElement("pool")]
        public String Pool { get; set; }
        /// <summary>
        /// Is this an estimated cost? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("estimated")]
        public Boolean? Estimated {
            get {
                return estimatedField;
            } 
            set { 
                estimatedField = value;
                this.EstimatedSpecified = true;
            }
        }

        private Boolean? estimatedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EstimatedSpecified { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Operations Report object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_opsReport", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Operations Report object.")]
    public partial class OpsReport : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the operations report. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the operations report. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A pointer to the rig utilized in this reporting period. 
        /// </summary>
        [XmlElement("rig")]
        public RefNameString Rig { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// Time from start of Operations (commonly in days). 
        /// </summary>
        [XmlElement("eTimStart")]
        public TimeMeasure ETimeStart { get; set; }
        /// <summary>
        /// Time since bit broke ground (commonly in days). 
        /// </summary>
        [XmlElement("eTimSpud")]
        public TimeMeasure ETimeSpud { get; set; }
        /// <summary>
        /// Time rig on location (commonly in days). 
        /// </summary>
        [XmlElement("eTimLoc")]
        public TimeMeasure ETimeLoc { get; set; }
        /// <summary>
        /// Wellbore Measured Depth. 
        /// </summary>
        [XmlElement("mdReport")]
        public MeasuredDepthCoord MDReport { get; set; }
        /// <summary>
        /// Wellbore True Vertical Depth. 
        /// </summary>
        [XmlElement("tvdReport")]
        public WellVerticalDepthCoord TvdReport { get; set; }
        /// <summary>
        /// Distance drilled since last report. 
        /// </summary>
        [XmlElement("distDrill")]
        public LengthMeasure DistDrill { get; set; }
        /// <summary>
        /// Drilling time. 
        /// </summary>
        [XmlElement("eTimDrill")]
        public TimeMeasure ETimeDrill { get; set; }
        /// <summary>
        /// Measured depth of plan for this day number. 
        /// </summary>
        [XmlElement("mdPlanned")]
        public MeasuredDepthCoord MDPlanned { get; set; }
        /// <summary>
        /// Average Rate of Penetration through Interval. 
        /// </summary>
        [XmlElement("ropAv")]
        public VelocityMeasure RopAverage { get; set; }
        /// <summary>
        /// Rate of penetration at report time. 
        /// </summary>
        [XmlElement("ropCurrent")]
        public VelocityMeasure RopCurrent { get; set; }
        /// <summary>
        /// Name of operator rig supervisor. 
        /// </summary>
        [XmlElement("supervisor")]
        public String Supervisor { get; set; }
        /// <summary>
        /// Nae of Engineer. 
        /// </summary>
        [XmlElement("engineer")]
        public String Engineer { get; set; }
        /// <summary>
        /// Name of operator wellsite geologist. 
        /// </summary>
        [XmlElement("geologist")]
        public String Geologist { get; set; }
        /// <summary>
        /// Time spent rotary drilling for report interval. 
        /// </summary>
        [XmlElement("eTimDrillRot")]
        public TimeMeasure ETimeDrillRot { get; set; }
        /// <summary>
        /// Time spent slide drilling from start of bit run. 
        /// </summary>
        [XmlElement("eTimDrillSlid")]
        public TimeMeasure ETimeDrillSlid { get; set; }
        /// <summary>
        /// Time spent circulating from start of bit run. 
        /// </summary>
        [XmlElement("eTimCirc")]
        public TimeMeasure ETimeCirc { get; set; }
        /// <summary>
        /// Time spent reaming from start of bit run. 
        /// </summary>
        [XmlElement("eTimReam")]
        public TimeMeasure ETimeReam { get; set; }
        /// <summary>
        /// Time spent with no DD work (commonly in hours). 
        /// </summary>
        [XmlElement("eTimHold")]
        public TimeMeasure ETimeHold { get; set; }
        /// <summary>
        /// Time spent steering bottom hole assembly (commonly in hours). 
        /// </summary>
        [XmlElement("eTimSteering")]
        public TimeMeasure ETimeSteering { get; set; }
        /// <summary>
        /// Distance drilled - rotating. 
        /// </summary>
        [XmlElement("distDrillRot")]
        public LengthMeasure DistDrillRot { get; set; }
        /// <summary>
        /// Distance drilled - sliding. 
        /// </summary>
        [XmlElement("distDrillSlid")]
        public LengthMeasure DistDrillSlid { get; set; }
        /// <summary>
        /// Distance reamed. 
        /// </summary>
        [XmlElement("distReam")]
        public LengthMeasure DistReam { get; set; }
        /// <summary>
        /// Distance covered while holding angle with a steerable drilling assembly. 
        /// </summary>
        [XmlElement("distHold")]
        public LengthMeasure DistHold { get; set; }
        /// <summary>
        /// Distance covered while actively steering with a steerable drilling assembly. 
        /// </summary>
        [XmlElement("distSteering")]
        public LengthMeasure DistSteering { get; set; }
        /// <summary>
        /// Total number of personnel on board. 
        /// </summary>
        [XmlElement("numPob")]
        public Int16? NumPob {
            get {
                return numPobField;
            } 
            set { 
                numPobField = value;
                this.NumPobSpecified = true;
            }
        }

        private Int16? numPobField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumPobSpecified { get; set; }
        /// <summary>
        /// Number of contractor personnel on board. 
        /// </summary>
        [XmlElement("numContract")]
        public Int16? NumContract {
            get {
                return numContractField;
            } 
            set { 
                numContractField = value;
                this.NumContractSpecified = true;
            }
        }

        private Int16? numContractField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumContractSpecified { get; set; }
        /// <summary>
        /// Number of Operator personnel on board. 
        /// </summary>
        [XmlElement("numOperator")]
        public Int16? NumOperator {
            get {
                return numOperatorField;
            } 
            set { 
                numOperatorField = value;
                this.NumOperatorSpecified = true;
            }
        }

        private Int16? numOperatorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumOperatorSpecified { get; set; }
        /// <summary>
        /// Number of service company personnel on board. 
        /// </summary>
        [XmlElement("numService")]
        public Int16? NumService {
            get {
                return numServiceField;
            } 
            set { 
                numServiceField = value;
                this.NumServiceSpecified = true;
            }
        }

        private Int16? numServiceField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumServiceSpecified { get; set; }
		/// <summary>
        /// Activity breakdown, multiple for many activities. 
        /// </summary>
        [XmlElement("activity")]
        public List<Activity> Activity { get; set; }
		/// <summary>
        /// Average bottom hole assembly parameters for report duration or actual instances of bottom hole assembly operations. 
        /// </summary>
        [XmlElement("drillingParams")]
        public List<DrillingParams> DrillingPluggedAndAbandonedrams { get; set; }
        /// <summary>
        /// Record of actual hole geometry at report time. 
        /// </summary>
        [XmlElement("wbGeometry")]
        public WellboreGeometry WellboreGeometry { get; set; }
		/// <summary>
        /// Cost item for the report interval. 
        /// </summary>
        [XmlElement("dayCost")]
        public List<DayCost> DayCost { get; set; }
		/// <summary>
        /// Survey station recorded during the report interval. 
        /// </summary>
        [XmlElement("trajectoryStation")]
        public List<TrajectoryStation> TrajectoryStation { get; set; }
		/// <summary>
        /// One fluid record. 
        /// </summary>
        [XmlElement("fluid")]
        public List<Fluid> Fluid { get; set; }
		/// <summary>
        /// Slow circulation rate pressure test for well control operations. 
        /// </summary>
        [XmlElement("scr")]
        public List<Scr> Scr { get; set; }
		/// <summary>
        /// Pit volume record for the report interval. 
        /// </summary>
        [XmlElement("pitVolume")]
        public List<PitVolume> PitVolume { get; set; }
        /// <summary>
        /// Description of mud built, received, etc. 
        /// </summary>
        [XmlElement("mudVolume")]
        public MudVolume MudVolume { get; set; }
		/// <summary>
        /// Mud inventory item and cost for the report interval. 
        /// </summary>
        [XmlElement("mudInventory")]
        public List<Inventory> MudInventory { get; set; }
		/// <summary>
        /// Bulk item usage and cost. 
        /// </summary>
        [XmlElement("bulk")]
        public List<Inventory> Bulk { get; set; }
        /// <summary>
        /// Average rig response readings for the day. 
        /// </summary>
        [XmlElement("rigResponse")]
        public RigResponse RigResponse { get; set; }
		/// <summary>
        /// Pump rate/pressure reading. 
        /// </summary>
        [XmlElement("pumpOp")]
        public List<PumpOp> PumpOperating { get; set; }
		/// <summary>
        /// Container element for shaker operation elements. 
        /// </summary>
        [XmlElement("shakerOp")]
        public List<ShakerOp> ShakerOperating { get; set; }
        /// <summary>
        /// Health, safety and environmental information. 
        /// </summary>
        [XmlElement("hse")]
        public Hse Hse { get; set; }
		/// <summary>
        /// Personnel records. 
        /// </summary>
        [XmlElement("personnel")]
        public List<Personnel> Personnel { get; set; }
		/// <summary>
        /// Support craft object container element. 
        /// </summary>
        [XmlElement("supportCraft")]
        public List<SupportCraft> SupportCraft { get; set; }
		/// <summary>
        /// Metrological readings for the day. 
        /// </summary>
        [XmlElement("weather")]
        public List<Weather> Weather { get; set; }
        /// <summary>
        /// AFE (authorization for expenditure) number that this cost item applies to. 
        /// </summary>
        [XmlElement("numAFE")]
        public String NumAFE { get; set; }
        /// <summary>
        /// Daily Cost. 
        /// </summary>
        [XmlElement("costDay")]
        public Cost CostDay { get; set; }
        /// <summary>
        /// Daily Mud Cost. 
        /// </summary>
        [XmlElement("costDayMud")]
        public Cost CostDayMud { get; set; }
        /// <summary>
        /// Hole diameter. 
        /// </summary>
        [XmlElement("diaHole")]
        public LengthMeasure DiaHole { get; set; }
        /// <summary>
        /// Hole condition description. 
        /// </summary>
        [XmlElement("conditionHole")]
        public String ConditionHole { get; set; }
        /// <summary>
        /// Lithology for the Interval. 
        /// </summary>
        [XmlElement("lithology")]
        public String Lithology { get; set; }
        /// <summary>
        /// Name of formation. 
        /// </summary>
        [XmlElement("nameFormation")]
        public String NameFormation { get; set; }
        /// <summary>
        /// Diameter of last casing. 
        /// </summary>
        [XmlElement("diaCsgLast")]
        public LengthMeasure DiaCsgLast { get; set; }
        /// <summary>
        /// Measured depth of last casing. 
        /// </summary>
        [XmlElement("mdCsgLast")]
        public MeasuredDepthCoord MDCsgLast { get; set; }
        /// <summary>
        /// True vertical depth of last casing. 
        /// </summary>
        [XmlElement("tvdCsgLast")]
        public WellVerticalDepthCoord TvdCsgLast { get; set; }
        /// <summary>
        /// True vertical depth of leak off test point. 
        /// </summary>
        [XmlElement("tvdLot")]
        public WellVerticalDepthCoord TvdLot { get; set; }
        /// <summary>
        /// Leak off test equivalent mud weight. 
        /// </summary>
        [XmlElement("presLotEmw")]
        public DensityMeasure PresLotEmw { get; set; }
        /// <summary>
        /// Kick tolerance pressure. 
        /// </summary>
        [XmlElement("presKickTol")]
        public PressureMeasure PresKickTol { get; set; }
        /// <summary>
        /// Kick tolerance volume. 
        /// </summary>
        [XmlElement("volKickTol")]
        public VolumeMeasure VolKickTol { get; set; }
        /// <summary>
        /// Maximum allowable shut-in casing pressure. 
        /// </summary>
        [XmlElement("maasp")]
        public PressureMeasure Maasp { get; set; }
        /// <summary>
        /// A pointer to the tubular (assembly) used in this report period. This represents a foreign key to tubular. 
        /// </summary>
        [XmlElement("tubular")]
        public RefNameString Tubular { get; set; }
        /// <summary>
        /// 24 hour summary description. 
        /// </summary>
        [XmlElement("sum24Hr")]
        public String Sum24Hr { get; set; }
        /// <summary>
        /// Forecast for next 24 hrs. 
        /// </summary>
        [XmlElement("forecast24Hr")]
        public String Forecast24Hr { get; set; }
        /// <summary>
        /// Current status description. 
        /// </summary>
        [XmlElement("statusCurrent")]
        public String StatusCurrent { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Activity Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_activity", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Operations Activity Component Schema ")]
    public partial class Activity : Object 
    {

        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// Date and time that activities were completed. 
        /// </summary>
        [XmlElement("dTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set { 
                dTimEndField = value;
                this.DateTimeEndSpecified = true;
            }
        }

        private DateTime? dTimEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeEndSpecified { get; set; }
        /// <summary>
        /// The activity duration (commonly in hours). 
        /// </summary>
        [XmlElement("duration")]
        public TimeMeasure Duration { get; set; }
        /// <summary>
        /// The measured depth to the drilling operation.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// True Vertical Depth to the drilling operation.
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// Phase (large activity classification) e.g. Drill Surface Hole. 
        /// </summary>
        [XmlElement("phase")]
        public String PHase { get; set; }
        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
        [XmlElement("activityCode")]
        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set { 
                activityCodeField = value;
                this.ActivityCodeSpecified = true;
            }
        }

        private ActivityCode activityCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ActivityCodeSpecified { get; set; }
		/// <summary>
        /// A proprietary code used to define rig activity. The name of the proprietary system should be defined in the namingSystem attribute.
        /// </summary>
        [XmlElement("proprietaryCode")]
        public List<NameStruct> ProprietaryCode { get; set; }
        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
        [XmlElement("detailActivity")]
        public String DetailActivity { get; set; }
        /// <summary>
        /// Classifier (Planned, Unplanned, Downtime). 
        /// </summary>
        [XmlElement("typeActivityClass")]
        public ActivityClassType? TypeActivityClass {
            get {
                return typeActivityClassField;
            } 
            set { 
                typeActivityClassField = value;
                this.TypeActivityClassSpecified = true;
            }
        }

        private ActivityClassType? typeActivityClassField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeActivityClassSpecified { get; set; }
        /// <summary>
        /// Measured Depth at start of activity. 
        /// </summary>
        [XmlElement("mdHoleStart")]
        public MeasuredDepthCoord MDHoleStart { get; set; }
        /// <summary>
        /// True Vertical Depth at start of activity 
        /// </summary>
        [XmlElement("tvdHoleStart")]
        public WellVerticalDepthCoord TvdHoleStart { get; set; }
        /// <summary>
        /// Measured Depth at end of activity. 
        /// </summary>
        [XmlElement("mdHoleEnd")]
        public MeasuredDepthCoord MDHoleEnd { get; set; }
        /// <summary>
        /// True Vertical Depth at end of activity. 
        /// </summary>
        [XmlElement("tvdHoleEnd")]
        public WellVerticalDepthCoord TvdHoleEnd { get; set; }
        /// <summary>
        /// Measured depth of bit at start of activity. 
        /// </summary>
        [XmlElement("mdBitStart")]
        public MeasuredDepthCoord MDBitStart { get; set; }
        /// <summary>
        /// Measured depth of bit at end of activity. 
        /// </summary>
        [XmlElement("mdBitEnd")]
        public MeasuredDepthCoord MDBitEnd { get; set; }
        /// <summary>
        /// Finish, interrupted, failed, etc. 
        /// </summary>
        [XmlElement("state")]
        public String State { get; set; }
        /// <summary>
        /// The outcome of the detailed activity.
        /// </summary>
        [XmlElement("stateDetailActivity")]
        public StateDetailActivity? StateDetailActivity {
            get {
                return stateDetailActivityField;
            } 
            set { 
                stateDetailActivityField = value;
                this.StateDetailActivitySpecified = true;
            }
        }

        private StateDetailActivity? stateDetailActivityField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StateDetailActivitySpecified { get; set; }
        /// <summary>
        /// Operator company name. 
        /// </summary>
        [XmlElement("operator")]
        public String Operator { get; set; }
        /// <summary>
        /// A pointer to the tubular related to this activity.
        /// </summary>
        [XmlElement("tubular")]
        public RefNameString Tubular { get; set; }
        /// <summary>
        /// Is the activity optimum. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("optimum")]
        public Boolean? Operatingtimum {
            get {
                return optimumField;
            } 
            set { 
                optimumField = value;
                this.OperatingtimumSpecified = true;
            }
        }

        private Boolean? optimumField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean OperatingtimumSpecified { get; set; }
        /// <summary>
        /// Does activity bring closer to objective. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("productive")]
        public Boolean? Productive {
            get {
                return productiveField;
            } 
            set { 
                productiveField = value;
                this.ProductiveSpecified = true;
            }
        }

        private Boolean? productiveField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ProductiveSpecified { get; set; }
        /// <summary>
        /// The item state for the data object. 
        /// </summary>
        [XmlElement("itemState")]
        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set { 
                itemStateField = value;
                this.ItemStateSpecified = true;
            }
        }

        private ItemState? itemStateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ItemStateSpecified { get; set; }
        /// <summary>
        /// Comments and Remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Bottom hole assembly drilling parameters component schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillingParams", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Bottom hole assembly drilling parameters component schema ")]
    public partial class DrillingParams : Object 
    {

        /// <summary>
        /// Operating time spent by bit for run. 
        /// </summary>
        [XmlElement("eTimOpBit")]
        public TimeMeasure ETimeOperatingBit { get; set; }
        /// <summary>
        /// Measured depth at start. 
        /// </summary>
        [XmlElement("mdHoleStart")]
        public MeasuredDepthCoord MDHoleStart { get; set; }
        /// <summary>
        /// Measured depth at stop. 
        /// </summary>
        [XmlElement("mdHoleStop")]
        public MeasuredDepthCoord MDHoleStop { get; set; }
        /// <summary>
        /// A pointer to the tubular assembly. 
        /// </summary>
        [XmlElement("tubular")]
        public RefNameString Tubular { get; set; }
        /// <summary>
        /// Hookload - rotating. 
        /// </summary>
        [XmlElement("hkldRot")]
        public ForceMeasure HookloadRot { get; set; }
        /// <summary>
        /// hkldUp-hkldRot. 
        /// </summary>
        [XmlElement("overPull")]
        public ForceMeasure OverPull { get; set; }
        /// <summary>
        /// hkldRot-hkldDown. 
        /// </summary>
        [XmlElement("slackOff")]
        public ForceMeasure SlackOff { get; set; }
        /// <summary>
        /// Hookload - string moving up. 
        /// </summary>
        [XmlElement("hkldUp")]
        public ForceMeasure HookloadUp { get; set; }
        /// <summary>
        /// Hookload - string moving down. 
        /// </summary>
        [XmlElement("hkldDn")]
        public ForceMeasure HookloadDown { get; set; }
        /// <summary>
        /// Average Torque - on bottom. 
        /// </summary>
        [XmlElement("tqOnBotAv")]
        public MomentOfForceMeasure TorqueOnBotAverage { get; set; }
        /// <summary>
        /// Maximum torque - on bottom. 
        /// </summary>
        [XmlElement("tqOnBotMx")]
        public MomentOfForceMeasure TorqueOnBotMax { get; set; }
        /// <summary>
        /// Minimum torque - on bottom. 
        /// </summary>
        [XmlElement("tqOnBotMn")]
        public MomentOfForceMeasure TorqueOnBotMin { get; set; }
        /// <summary>
        /// Average torque - off bottom. 
        /// </summary>
        [XmlElement("tqOffBotAv")]
        public MomentOfForceMeasure TorqueOffBotAverage { get; set; }
        /// <summary>
        /// Average torque - downhole. 
        /// </summary>
        [XmlElement("tqDhAv")]
        public MomentOfForceMeasure TorqueDownholeAverage { get; set; }
        /// <summary>
        /// Weight above jars. 
        /// </summary>
        [XmlElement("wtAboveJar")]
        public ForceMeasure WeightAboveJar { get; set; }
        /// <summary>
        /// Weight below jars. 
        /// </summary>
        [XmlElement("wtBelowJar")]
        public ForceMeasure WeightBelowJar { get; set; }
        /// <summary>
        /// Mud density. 
        /// </summary>
        [XmlElement("wtMud")]
        public DensityMeasure WeightMud { get; set; }
        /// <summary>
        /// Pump flow rate. 
        /// </summary>
        [XmlElement("flowratePump")]
        public VolumeFlowRateMeasure FlowratePump { get; set; }
        /// <summary>
        /// Bit hydraulic. 
        /// </summary>
        [XmlElement("powBit")]
        public PowerMeasure PowBit { get; set; }
        /// <summary>
        /// Bit nozzle average velocity. 
        /// </summary>
        [XmlElement("velNozzleAv")]
        public VelocityMeasure VelNozzleAverage { get; set; }
        /// <summary>
        /// Pressure drop in bit. 
        /// </summary>
        [XmlElement("presDropBit")]
        public PressureMeasure PresDropBit { get; set; }
        /// <summary>
        /// Time spent on hold from start of bit run. 
        /// </summary>
        [XmlElement("cTimHold")]
        public TimeMeasure CTimHold { get; set; }
        /// <summary>
        /// Time spent steering from start of bit run. 
        /// </summary>
        [XmlElement("cTimSteering")]
        public TimeMeasure CTimSteering { get; set; }
        /// <summary>
        /// Time spent rotary drilling from start of bit run. 
        /// </summary>
        [XmlElement("cTimDrillRot")]
        public TimeMeasure CTimDrillRot { get; set; }
        /// <summary>
        /// Time spent slide drilling from start of bit run. 
        /// </summary>
        [XmlElement("cTimDrillSlid")]
        public TimeMeasure CTimDrillSlid { get; set; }
        /// <summary>
        /// Time spent circulating from start of bit run. 
        /// </summary>
        [XmlElement("cTimCirc")]
        public TimeMeasure CTimCirc { get; set; }
        /// <summary>
        /// Time spent reaming from start of bit run. 
        /// </summary>
        [XmlElement("cTimReam")]
        public TimeMeasure CTimReam { get; set; }
        /// <summary>
        /// Distance drilled - rotating. 
        /// </summary>
        [XmlElement("distDrillRot")]
        public LengthMeasure DistDrillRot { get; set; }
        /// <summary>
        /// Distance drilled - sliding 
        /// </summary>
        [XmlElement("distDrillSlid")]
        public LengthMeasure DistDrillSlid { get; set; }
        /// <summary>
        /// Distance reamed. 
        /// </summary>
        [XmlElement("distReam")]
        public LengthMeasure DistReam { get; set; }
        /// <summary>
        /// Distance covered while holding angle with a steerable drilling assembly. 
        /// </summary>
        [XmlElement("distHold")]
        public LengthMeasure DistHold { get; set; }
        /// <summary>
        /// Distance covered while actively steering with a steerable drilling assembly. 
        /// </summary>
        [XmlElement("distSteering")]
        public LengthMeasure DistSteering { get; set; }
        /// <summary>
        /// Average turn rate (commonly in rpm) through Interval. 
        /// </summary>
        [XmlElement("rpmAv")]
        public AnglePerTimeMeasure RpmAverage { get; set; }
        /// <summary>
        /// Maximum turn rate (commonly in rpm). 
        /// </summary>
        [XmlElement("rpmMx")]
        public AnglePerTimeMeasure RpmMax { get; set; }
        /// <summary>
        /// Minimum turn rate (commonly in rpm). 
        /// </summary>
        [XmlElement("rpmMn")]
        public AnglePerTimeMeasure RpmMin { get; set; }
        /// <summary>
        /// Average turn rate (commonly in rpm) downhole. 
        /// </summary>
        [XmlElement("rpmAvDh")]
        public AnglePerTimeMeasure RpmAverageDownhole { get; set; }
        /// <summary>
        /// Average rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropAv")]
        public VelocityMeasure RopAverage { get; set; }
        /// <summary>
        /// Maximum rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropMx")]
        public VelocityMeasure RopMax { get; set; }
        /// <summary>
        /// Minimum rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropMn")]
        public VelocityMeasure RopMin { get; set; }
        /// <summary>
        /// Surface weight on bit - average through interval. 
        /// </summary>
        [XmlElement("wobAv")]
        public ForceMeasure WobAverage { get; set; }
        /// <summary>
        /// Weight on bit - maximum. 
        /// </summary>
        [XmlElement("wobMx")]
        public ForceMeasure WobMax { get; set; }
        /// <summary>
        /// Weight on bit - minimum. 
        /// </summary>
        [XmlElement("wobMn")]
        public ForceMeasure WobMin { get; set; }
        /// <summary>
        /// Weight on bit - average downhole. 
        /// </summary>
        [XmlElement("wobAvDh")]
        public ForceMeasure WobAverageDownhole { get; set; }
        /// <summary>
        /// Reason for trip. 
        /// </summary>
        [XmlElement("reasonTrip")]
        public String ReasonTrip { get; set; }
        /// <summary>
        /// Objective of bottom hole assembly. 
        /// </summary>
        [XmlElement("objectiveBha")]
        public String ObjectiveBha { get; set; }
        /// <summary>
        /// Azimuth at start measured depth. 
        /// </summary>
        [XmlElement("aziTop")]
        public PlaneAngleMeasure AziTop { get; set; }
        /// <summary>
        /// Azimuth at stop measured depth. 
        /// </summary>
        [XmlElement("aziBottom")]
        public PlaneAngleMeasure AziBottom { get; set; }
        /// <summary>
        /// Inclination at start measured depth. 
        /// </summary>
        [XmlElement("inclStart")]
        public PlaneAngleMeasure InclStart { get; set; }
        /// <summary>
        /// Maximum inclination. 
        /// </summary>
        [XmlElement("inclMx")]
        public PlaneAngleMeasure InclMax { get; set; }
        /// <summary>
        /// Minimum inclination. 
        /// </summary>
        [XmlElement("inclMn")]
        public PlaneAngleMeasure InclMin { get; set; }
        /// <summary>
        /// Inclination at stop measured depth. 
        /// </summary>
        [XmlElement("inclStop")]
        public PlaneAngleMeasure InclStop { get; set; }
        /// <summary>
        /// Maximum mud temperature downhole during run. 
        /// </summary>
        [XmlElement("tempMudDhMx")]
        public ThermodynamicTemperatureMeasure TempMudDownholeMax { get; set; }
        /// <summary>
        /// Average pump pressure. 
        /// </summary>
        [XmlElement("presPumpAv")]
        public PressureMeasure PresPumpAverage { get; set; }
        /// <summary>
        /// Flow rate at bit. 
        /// </summary>
        [XmlElement("flowrateBit")]
        public VolumeFlowRateMeasure FlowrateBit { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Wellbore Geometry Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wbGeometry", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Wellbore Geometry Component Schema ")]
    public partial class WellboreGeometry : Object 
    {

        /// <summary>
        /// Time report generated. 
        /// </summary>
        [XmlElement("dTimReport")]
        public DateTime? DateTimeReport { get; set; }
        /// <summary>
        /// Measured depth at bottom. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// Air gap. 
        /// </summary>
        [XmlElement("gapAir")]
        public LengthMeasure GapAir { get; set; }
        /// <summary>
        /// Water depth. 
        /// </summary>
        [XmlElement("depthWaterMean")]
        public LengthMeasure DepthWaterMean { get; set; }
		/// <summary>
        /// Wellbore geometry section object. 
        /// </summary>
        [XmlElement("wbGeometrySection")]
        public List<WellboreGeometrySection> WellboreGeometrySection { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - fluids component schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluid", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - fluids component schema ")]
    public partial class Fluid : Object 
    {

        /// <summary>
        /// Description for the type of fluid. 
        /// </summary>
        [XmlElement("type")]
        public String Type { get; set; }
        /// <summary>
        /// Sample location. 
        /// </summary>
        [XmlElement("locationSample")]
        public String LocationSample { get; set; }
        /// <summary>
        /// The time when fluid readings were recorded. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// The measured depth where the fluid readings were recorded.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// The true vertical depth where the fluid readings were recorded.
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// Maximum pressure rating of the blow out preventer.
        /// </summary>
        [XmlElement("presBopRating")]
        public PressureMeasure PresBopRating { get; set; }
        /// <summary>
        /// The class of the drilling fluid.
        /// </summary>
        [XmlElement("mudClass")]
        public MudClass? MudClass {
            get {
                return mudClassField;
            } 
            set { 
                mudClassField = value;
                this.MudClassSpecified = true;
            }
        }

        private MudClass? mudClassField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MudClassSpecified { get; set; }
        /// <summary>
        /// Fluid density. 
        /// </summary>
        [XmlElement("density")]
        public DensityMeasure Density { get; set; }
        /// <summary>
        /// Funnel viscosity in seconds. 
        /// </summary>
        [XmlElement("visFunnel")]
        public TimeMeasure VisFunnel { get; set; }
        /// <summary>
        /// Funnel viscosity temperature. 
        /// </summary>
        [XmlElement("tempVis")]
        public ThermodynamicTemperatureMeasure TempVis { get; set; }
        /// <summary>
        /// Plastic viscosity. 
        /// </summary>
        [XmlElement("pv")]
        public DynamicViscosityMeasure PV { get; set; }
        /// <summary>
        /// Yield point (Bingham and Herschel Bulkley models). 
        /// </summary>
        [XmlElement("yp")]
        public PressureMeasure YP { get; set; }
        /// <summary>
        /// 10 second gels. 
        /// </summary>
        [XmlElement("gel10Sec")]
        public PressureMeasure Gel10Sec { get; set; }
        /// <summary>
        /// 10 minute gels. 
        /// </summary>
        [XmlElement("gel10Min")]
        public PressureMeasure Gel10Min { get; set; }
        /// <summary>
        /// 30 minute gels. 
        /// </summary>
        [XmlElement("gel30Min")]
        public PressureMeasure Gel30Min { get; set; }
        /// <summary>
        /// Filter cake thickness at low (normal) temperature and pressure. 
        /// </summary>
        [XmlElement("filterCakeLtlp")]
        public LengthMeasure FilterCAkeLtlp { get; set; }
        /// <summary>
        /// API water loss (low temperature and pressure mud filtrate measurement) (volume per 30min). 
        /// </summary>
        [XmlElement("filtrateLtlp")]
        public VolumeMeasure FiltrateLtlp { get; set; }
        /// <summary>
        /// High temperature high pressure (HTHP) temperature. 
        /// </summary>
        [XmlElement("tempHthp")]
        public ThermodynamicTemperatureMeasure TempHeighthp { get; set; }
        /// <summary>
        /// High temperature high pressure (HTHP) pressure. 
        /// </summary>
        [XmlElement("presHthp")]
        public PressureMeasure PresHeighthp { get; set; }
        /// <summary>
        /// High temperature high pressure (HTHP) filtrate (volume per 30min). 
        /// </summary>
        [XmlElement("filtrateHthp")]
        public VolumeMeasure FiltrateHeighthp { get; set; }
        /// <summary>
        /// High temperature high pressure (HTHP) Filter cake thickness. 
        /// </summary>
        [XmlElement("filterCakeHthp")]
        public LengthMeasure FilterCAkeHeighthp { get; set; }
        /// <summary>
        /// Solids percentage from retort (commonly in percent). 
        /// </summary>
        [XmlElement("solidsPc")]
        public VolumePerVolumeMeasure SolidsPercent { get; set; }
        /// <summary>
        /// Water content (commonly in percent). 
        /// </summary>
        [XmlElement("waterPc")]
        public VolumePerVolumeMeasure WaterPercent { get; set; }
        /// <summary>
        /// Oil content from retort (commonly in percent). 
        /// </summary>
        [XmlElement("oilPc")]
        public VolumePerVolumeMeasure OilPercent { get; set; }
        /// <summary>
        /// Sand content (commonly in percent). 
        /// </summary>
        [XmlElement("sandPc")]
        public VolumePerVolumeMeasure SandPercent { get; set; }
        /// <summary>
        /// Low gravity solids (%). 
        /// </summary>
        [XmlElement("solidsLowGravPc")]
        public VolumePerVolumeMeasure SolidsLowGravPercent { get; set; }
        /// <summary>
        /// Solids content (calculated) (commonly in percent). 
        /// </summary>
        [XmlElement("solidsCalcPc")]
        public VolumePerVolumeMeasure SolidsCAlcPercent { get; set; }
        /// <summary>
        /// Barite content (commonly in percent). 
        /// </summary>
        [XmlElement("baritePc")]
        public VolumePerVolumeMeasure BaritePercent { get; set; }
        /// <summary>
        /// Lost circulation material. 
        /// </summary>
        [XmlElement("lcm")]
        public DensityMeasure Lcm { get; set; }
        /// <summary>
        /// Cation exchange capacity (CEC) of the mud sample as measured by methylene blue titration (MBT). 
        /// </summary>
        [XmlElement("mbt")]
        public EquivalentPerMassMeasure Mbt { get; set; }
        /// <summary>
        /// Mud pH. 
        /// </summary>
        [XmlElement("ph")]
        public Double? PH {
            get {
                return phField;
            } 
            set { 
                phField = value;
                this.PHSpecified = true;
            }
        }

        private Double? phField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PHSpecified { get; set; }
        /// <summary>
        /// Mud pH measurement temperature. 
        /// </summary>
        [XmlElement("tempPh")]
        public ThermodynamicTemperatureMeasure TempPH { get; set; }
        /// <summary>
        /// Phenolphthalein alkalinity of whole mud. 
        /// </summary>
        [XmlElement("pm")]
        public VolumeMeasure Pm { get; set; }
        /// <summary>
        /// Phenolphthalein alkalinity of mud filtrate. 
        /// </summary>
        [XmlElement("pmFiltrate")]
        public VolumeMeasure PmFiltrate { get; set; }
        /// <summary>
        /// Methyl orange alkalinity of filtrate. 
        /// </summary>
        [XmlElement("mf")]
        public VolumeMeasure Mf { get; set; }
        /// <summary>
        /// Mud alkalinity P1 from alternate alkalinity method (volume in ml of 0.02N acid to reach the phenolphthalein endpoint). 
        /// </summary>
        [XmlElement("alkalinityP1")]
        public VolumeMeasure AlkalinityP1 { get; set; }
        /// <summary>
        /// Mud alkalinity P2 from alternate alkalinity method (volume in ml of 0.02N acid to titrate the reagent mixture to the phenolphthalein endpoint). 
        /// </summary>
        [XmlElement("alkalinityP2")]
        public VolumeMeasure AlkalinityP2 { get; set; }
        /// <summary>
        /// Chloride content. 
        /// </summary>
        [XmlElement("chloride")]
        public DensityMeasure Chloride { get; set; }
        /// <summary>
        /// Calcium content. 
        /// </summary>
        [XmlElement("calcium")]
        public DensityMeasure CAlcium { get; set; }
        /// <summary>
        /// Magnesium content. 
        /// </summary>
        [XmlElement("magnesium")]
        public DensityMeasure Magnesium { get; set; }
        /// <summary>
        /// Potassium content. 
        /// </summary>
        [XmlElement("potassium")]
        public DensityMeasure Potassium { get; set; }
		/// <summary>
        /// One or more sets of rheometer readings at given temperature and pressure. 
        /// </summary>
        [XmlElement("rheometer")]
        public List<Rheometer> Rheometer { get; set; }
        /// <summary>
        /// Brine content (commonly in percent). 
        /// </summary>
        [XmlElement("brinePc")]
        public VolumePerVolumeMeasure BrinePercent { get; set; }
        /// <summary>
        /// Lime content. 
        /// </summary>
        [XmlElement("lime")]
        public DensityMeasure Lime { get; set; }
        /// <summary>
        /// Measurement of the emulsion stability and oil-wetting capability in oil-based muds. 
        /// </summary>
        [XmlElement("electStab")]
        public ElectricPotentialMeasure ElectStab { get; set; }
        /// <summary>
        /// Calcium chloride content. 
        /// </summary>
        [XmlElement("calciumChloride")]
        public DensityMeasure CAlciumChloride { get; set; }
        /// <summary>
        /// Name of company. 
        /// </summary>
        [XmlElement("company")]
        public String Company { get; set; }
        /// <summary>
        /// Engineer name 
        /// </summary>
        [XmlElement("engineer")]
        public String Engineer { get; set; }
        /// <summary>
        /// Average specific gravity of solids. 
        /// </summary>
        [XmlElement("asg")]
        public Double? Asg {
            get {
                return asgField;
            } 
            set { 
                asgField = value;
                this.AsgSpecified = true;
            }
        }

        private Double? asgField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AsgSpecified { get; set; }
        /// <summary>
        /// Solids high gravity (commonly in percent). 
        /// </summary>
        [XmlElement("solidsHiGravPc")]
        public VolumePerVolumeMeasure SolidsHiGravPercent { get; set; }
        /// <summary>
        /// Polymers present in mud system. 
        /// </summary>
        [XmlElement("polymer")]
        public VolumePerVolumeMeasure Polymer { get; set; }
        /// <summary>
        /// Type of polymers present in mud system. 
        /// </summary>
        [XmlElement("polyType")]
        public String PolyType { get; set; }
        /// <summary>
        /// Solids corrected for Chloride content (commonly in percent). 
        /// </summary>
        [XmlElement("solCorPc")]
        public VolumePerVolumeMeasure SolCorPercent { get; set; }
        /// <summary>
        /// Oil on Cuttings. 
        /// </summary>
        [XmlElement("oilCtg")]
        public MassConcentrationMeasure OilCTg { get; set; }
        /// <summary>
        /// Total calcium hardness. 
        /// </summary>
        [XmlElement("hardnessCa")]
        public MassConcentrationMeasure HardnessCA { get; set; }
        /// <summary>
        /// Sulfide content. 
        /// </summary>
        [XmlElement("sulfide")]
        public DensityMeasure Sulfide { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rheometer Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rheometer", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Rheometer Component Schema ")]
    public partial class Rheometer : Object 
    {

        /// <summary>
        /// Rheometer temperature. 
        /// </summary>
        [XmlElement("tempRheom")]
        public ThermodynamicTemperatureMeasure TempRheom { get; set; }
        /// <summary>
        /// Rheometer pressure. 
        /// </summary>
        [XmlElement("presRheom")]
        public PressureMeasure PresRheom { get; set; }
        /// <summary>
        /// 3 RPM viscometer reading 
        /// </summary>
        [XmlElement("vis3Rpm")]
        public Double? Vis3Rpm {
            get {
                return vis3RpmField;
            } 
            set { 
                vis3RpmField = value;
                this.Vis3RpmSpecified = true;
            }
        }

        private Double? vis3RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis3RpmSpecified { get; set; }
        /// <summary>
        /// 6 RPM viscometer reading. 
        /// </summary>
        [XmlElement("vis6Rpm")]
        public Double? Vis6Rpm {
            get {
                return vis6RpmField;
            } 
            set { 
                vis6RpmField = value;
                this.Vis6RpmSpecified = true;
            }
        }

        private Double? vis6RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis6RpmSpecified { get; set; }
        /// <summary>
        /// 100 RPM viscometer reading. 
        /// </summary>
        [XmlElement("vis100Rpm")]
        public Double? Vis100Rpm {
            get {
                return vis100RpmField;
            } 
            set { 
                vis100RpmField = value;
                this.Vis100RpmSpecified = true;
            }
        }

        private Double? vis100RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis100RpmSpecified { get; set; }
        /// <summary>
        /// 200 RPM viscometer reading. 
        /// </summary>
        [XmlElement("vis200Rpm")]
        public Double? Vis200Rpm {
            get {
                return vis200RpmField;
            } 
            set { 
                vis200RpmField = value;
                this.Vis200RpmSpecified = true;
            }
        }

        private Double? vis200RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis200RpmSpecified { get; set; }
        /// <summary>
        /// 300 RPM viscometer reading. 
        /// </summary>
        [XmlElement("vis300Rpm")]
        public Double? Vis300Rpm {
            get {
                return vis300RpmField;
            } 
            set { 
                vis300RpmField = value;
                this.Vis300RpmSpecified = true;
            }
        }

        private Double? vis300RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis300RpmSpecified { get; set; }
        /// <summary>
        /// 600 RPM viscometer reading. 
        /// </summary>
        [XmlElement("vis600Rpm")]
        public Double? Vis600Rpm {
            get {
                return vis600RpmField;
            } 
            set { 
                vis600RpmField = value;
                this.Vis600RpmSpecified = true;
            }
        }

        private Double? vis600RpmField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean Vis600RpmSpecified { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the objectSequence xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="objectSequence", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the objectSequence xsd type.")]
    public partial class ObjectSequence : Object 
    {
        public ObjectSequence() {}
        public ObjectSequence(Int16 value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A description related to the sequence number.
        /// </summary>
        [XmlAttribute("description")]
        public String Description { get; set; }
		
        [XmlText]
        public Int16 Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines a member of an objectGroup.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_memberObject", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Defines a member of an objectGroup.")]
    public partial class MemberObject : Object 
    {

        /// <summary>
        /// A reference to an object that is defined within the context of the specified wellbore.
        /// </summary>
        [XmlElement("objectReference")]
        public RefObjectString ObjectReference { get; set; }
        /// <summary>
        /// For a log object, this specifies the kind of the index curve for the log. This is only relevant for a systematically growing object.
        /// </summary>
        [XmlElement("indexType")]
        public LogIndexType? IndexType {
            get {
                return indexTypeField;
            } 
            set { 
                indexTypeField = value;
                this.IndexTypeSpecified = true;
            }
        }

        private LogIndexType? indexTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IndexTypeSpecified { get; set; }
        /// <summary>
        /// Defines primary numeric ordering of this object within the group. The meaning of this order will be defined by the groupType.
        /// </summary>
        [XmlElement("sequence1")]
        public ObjectSequence Sequence1 { get; set; }
        /// <summary>
        /// Defines secondary numeric ordering of this object within the group. The meaning of this order will be defined by the groupType. A value for sequence2 can only be given if a value is given for sequence1.
        /// </summary>
        [XmlElement("sequence2")]
        public ObjectSequence Sequence2 { get; set; }
        /// <summary>
        /// Defines tertiary numeric ordering of this object within the group. The meaning of this order will be defined by the groupType. A value for sequence3 can only be given if a value is given for sequence2.
        /// </summary>
        [XmlElement("sequence3")]
        public ObjectSequence Sequence3 { get; set; }
        /// <summary>
        /// The minimum growing-object index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
        [XmlElement("rangeMin")]
        public GenericMeasure RangeMin { get; set; }
        /// <summary>
        /// The maximum growing-object index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
        [XmlElement("rangeMax")]
        public GenericMeasure RangeMax { get; set; }
        /// <summary>
        /// The minimum log date-time index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
        [XmlElement("rangeDateTimeMin")]
        public DateTime? RangeDateTimeMin {
            get {
                return rangeDateTimeMinField;
            } 
            set { 
                rangeDateTimeMinField = value;
                this.RangeDateTimeMinSpecified = true;
            }
        }

        private DateTime? rangeDateTimeMinField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RangeDateTimeMinSpecified { get; set; }
        /// <summary>
        /// The maximum log date-time index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
        [XmlElement("rangeDateTimeMax")]
        public DateTime? RangeDateTimeMax {
            get {
                return rangeDateTimeMaxField;
            } 
            set { 
                rangeDateTimeMaxField = value;
                this.RangeDateTimeMaxSpecified = true;
            }
        }

        private DateTime? rangeDateTimeMaxField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RangeDateTimeMaxSpecified { get; set; }
        /// <summary>
        /// A comma delimited list of log curve mnemonics. Each mnemonic should only occur once in the list. If not specified then the group applies to all curves in the log.
        /// </summary>
        [XmlElement("mnemonicList")]
        public String MinemonicList { get; set; }
        /// <summary>
        /// A measured depth related to this group. This does not necessarily represent an actual depth within a growing-object. The significance of this depth is defined by the groupType.
        /// </summary>
        [XmlElement("referenceDepth")]
        public MeasuredDepthCoord ReferenceDepth { get; set; }
        /// <summary>
        /// A date and time related to this group. This does not necessarily represent an actual index within a growing-object. The significance of this time is defined by the groupType.
        /// </summary>
        [XmlElement("referenceDateTime")]
        public DateTime? ReferenceDateTime {
            get {
                return referenceDateTimeField;
            } 
            set { 
                referenceDateTimeField = value;
                this.ReferenceDateTimeSpecified = true;
            }
        }

        private DateTime? referenceDateTimeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ReferenceDateTimeSpecified { get; set; }
		/// <summary>
        /// Any extra parameter data related to the group. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.
        /// </summary>
        [XmlElement("param")]
        public List<IndexedObject> PluggedAndAbandonedram { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML objectGroup object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_objectGroup", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML objectGroup object.")]
    public partial class ObjectGroup : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the (sub) object that is represented by the objectGroup. If no wellbore is specified then the objectGroup represents the well. If a wellbore is specified but no other object is specified then the objectGroup represents the wellbore.
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the objectGroup.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Defines the type of group.
        /// </summary>
        [XmlElement("groupType")]
        public ObjectGroupKind GroupType { get; set; }
        /// <summary>
        /// The sequence number related to the group. The meaning of the sequence is defined by the groupType.
        /// </summary>
        [XmlElement("sequence")]
        public Int16? Sequence {
            get {
                return sequenceField;
            } 
            set { 
                sequenceField = value;
                this.SequenceSpecified = true;
            }
        }

        private Int16? sequenceField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SequenceSpecified { get; set; }
        /// <summary>
        /// A description of attachment
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Any extra parameter data. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.
        /// </summary>
        [XmlElement("param")]
        public List<IndexedObject> PluggedAndAbandonedram { get; set; }
		/// <summary>
        /// References a specific data-object that is a member of this group.
        /// </summary>
        [XmlElement("memberObject")]
        public List<MemberObject> MemberObject { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects.
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Mud Log Parameter Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudLogParameter", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Mud Log Parameter Component Schema")]
    public partial class MudLogParameter : Object 
    {

        /// <summary>
        /// The type of the mud log parameter.
        /// </summary>
        [XmlElement("type")]
        public MudLogParameterType? Type { get; set; }
        /// <summary>
        /// The data and time related to the parameter. The time refers to the top of the interval. 
        /// </summary>
        [XmlElement("dTime")]
        public DateTime? DateTimee {
            get {
                return dTimeField;
            } 
            set { 
                dTimeField = value;
                this.DateTimeeSpecified = true;
            }
        }

        private DateTime? dTimeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeeSpecified { get; set; }
        /// <summary>
        /// The measured depth at a point or at the top of an interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// The bottom of an interval along the borehole. A point interval should be indicated by setting mdTop=mdBottom.
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// A concentration value that represents the parameter. If you set this property, you must also set TypeConc.
        /// </summary>
        [XmlElement("concentration")]
        public VolumePerVolumeMeasure Concentration {
            get {
                return concentrationField;
            } 
            set { 
                if (equivalentMudWeightFieldSpecified) throw new Exception("Cannot set property Concentration when property EquivalentMudWeight is already set");
                if (forceFieldSpecified) throw new Exception("Cannot set property Concentration when property Force is already set");
                if (pressureGradientFieldSpecified) throw new Exception("Cannot set property Concentration when property PressureGradient is already set");
                concentrationField = value;
                concentrationFieldSpecified = true;
            }
        }

        private VolumePerVolumeMeasure concentrationField; 
        private bool concentrationFieldSpecified = false; 

        /// <summary>
        /// A equivalent mud weight value that represents the parameter. This commonly used for pressure gradient parameters and pressure parameters.
        /// </summary>
        [XmlElement("equivalentMudWeight")]
        public DensityMeasure EquivalentMudWeight {
            get {
                return equivalentMudWeightField;
            } 
            set { 
                if (concentrationFieldSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property Concentration is already set");
                if (forceFieldSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property Force is already set");
                if (pressureGradientFieldSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property PressureGradient is already set");
                equivalentMudWeightField = value;
                equivalentMudWeightFieldSpecified = true;
            }
        }

        private DensityMeasure equivalentMudWeightField; 
        private bool equivalentMudWeightFieldSpecified = false; 

        /// <summary>
        /// A force value (e.g., hookload) that represents the parameter.
        /// </summary>
        [XmlElement("force")]
        public ForceMeasure Force {
            get {
                return forceField;
            } 
            set { 
                if (equivalentMudWeightFieldSpecified) throw new Exception("Cannot set property Force when property EquivalentMudWeight is already set");
                if (concentrationFieldSpecified) throw new Exception("Cannot set property Force when property Concentration is already set");
                if (pressureGradientFieldSpecified) throw new Exception("Cannot set property Force when property PressureGradient is already set");
                forceField = value;
                forceFieldSpecified = true;
            }
        }

        private ForceMeasure forceField; 
        private bool forceFieldSpecified = false; 

        /// <summary>
        /// A pressure gradient value that represents the parameter. This is sometimes specified instead of an equivalent mud weight.
        /// </summary>
        [XmlElement("pressureGradient")]
        public ForcePerVolumeMeasure PressureGradient {
            get {
                return pressureGradientField;
            } 
            set { 
                if (equivalentMudWeightFieldSpecified) throw new Exception("Cannot set property PressureGradient when property EquivalentMudWeight is already set");
                if (concentrationFieldSpecified) throw new Exception("Cannot set property PressureGradient when property Concentration is already set");
                if (forceFieldSpecified) throw new Exception("Cannot set property PressureGradient when property Force is already set");
                pressureGradientField = value;
                pressureGradientFieldSpecified = true;
            }
        }

        private ForcePerVolumeMeasure pressureGradientField; 
        private bool pressureGradientFieldSpecified = false; 


        /// <summary>
        /// A textual parameter value. This value is typically annotation on the log. All spaces, tabs, line feeds and carriage returns are retained in the string. Characters representing line breaks should be replaced by a line feed or carriage return.
        /// </summary>
        [XmlElement("text")]
        public String Text { get; set; }
        /// <summary>
        /// A container element for creation and last-change DateTime information.
        /// </summary>
        [XmlElement("commonTime")]
        public CommonTime CommonTime { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Common Time Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_commonTime", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Common Time Component Schema ")]
    public partial class CommonTime : Object 
    {

        /// <summary>
        /// When the data was created at the persistent data store. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
        [XmlElement("dTimCreation")]
        public DateTime? DateTimeCreation {
            get {
                return dTimCreationField;
            } 
            set { 
                dTimCreationField = value;
                this.DateTimeCreationSpecified = true;
            }
        }

        private DateTime? dTimCreationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCreationSpecified { get; set; }
        /// <summary>
        /// Last change of any element of the data at the persistent data store. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
        [XmlElement("dTimLastChange")]
        public DateTime? DateTimeLastChange {
            get {
                return dTimLastChangeField;
            } 
            set { 
                dTimLastChangeField = value;
                this.DateTimeLastChangeSpecified = true;
            }
        }

        private DateTime? dTimLastChangeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeLastChangeSpecified { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Mud Log object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_mudLog", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Mud Log object.")]
    public partial class MudLog : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the mud log. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the mud log. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
        [XmlElement("objectGrowing")]
        public Boolean? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set { 
                objectGrowingField = value;
                this.ObjectGrowingSpecified = true;
            }
        }

        private Boolean? objectGrowingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ObjectGrowingSpecified { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Name of the company recording the information. 
        /// </summary>
        [XmlElement("mudLogCompany")]
        public String MudLogCompany { get; set; }
        /// <summary>
        /// Concatenated names of mud loggers constructing the log. 
        /// </summary>
        [XmlElement("mudLogEngineers")]
        public String MudLogEngineers { get; set; }
        /// <summary>
        /// The minimum mdTop value for this object. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("startMd")]
        public MeasuredDepthCoord StartMD { get; set; }
        /// <summary>
        /// The maximum mdTop value for this object. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("endMd")]
        public MeasuredDepthCoord EndMD { get; set; }
		/// <summary>
        /// A foreign key to a related Log. This is a pointer to a log that is related to the mud log. The log may or may not have been created as a result of the mudlogging process. The log must represent the same well and wellbore as the mud log.
        /// </summary>
        [XmlElement("relatedLog")]
        public List<RefNameString> RelatedLog { get; set; }
		/// <summary>
        /// A single mud log parameter.
        /// </summary>
        [XmlElement("parameter")]
        public List<MudLogParameter> PluggedAndAbandonedrameter { get; set; }
		/// <summary>
        /// Set of geology and drilling information records for the wellbore. This is an API "data-node" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("geologyInterval")]
        public List<GeologyInterval> GeologyInterval { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Geology Interval Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_geologyInterval", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Geology Interval Component Schema")]
    public partial class GeologyInterval : Object 
    {

        /// <summary>
        /// The type of lithology declaration. An interpreted type will specify one lithology for the whole interval (i.e., the percentage is 100%). A cuttings or core type may specify one or more lithologies for the interval based on a visual inspection of the cuttings or core and a relative percentage will be assigned to each lithology.
        /// </summary>
        [XmlElement("typeLithology")]
        public LithologySource? TypeLithology { get; set; }
        /// <summary>
        /// Measured depth at top of interval. This is an API "node-index" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at base of interval. A point interval should be indicated by setting mdTop=mdBottom. This is an API "node-index" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// Date and time the information is related to. The time refers to the top of the interval. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// True vertical depth at top of the section. 
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// True vertical depth at base of interval. 
        /// </summary>
        [XmlElement("tvdBase")]
        public WellVerticalDepthCoord TvdBase { get; set; }
        /// <summary>
        /// Average rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropAv")]
        public VelocityMeasure RopAverage { get; set; }
        /// <summary>
        /// Minimum rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropMn")]
        public VelocityMeasure RopMin { get; set; }
        /// <summary>
        /// Maximum rate of penetration through Interval. 
        /// </summary>
        [XmlElement("ropMx")]
        public VelocityMeasure RopMax { get; set; }
        /// <summary>
        /// Surface weight on bit - average through interval. 
        /// </summary>
        [XmlElement("wobAv")]
        public ForceMeasure WobAverage { get; set; }
        /// <summary>
        /// Average torque through interval. 
        /// </summary>
        [XmlElement("tqAv")]
        public MomentOfForceMeasure TorqueAverage { get; set; }
        /// <summary>
        /// Average current through interval. This is the raw measurement from which the average torque could be calculated.
        /// </summary>
        [XmlElement("currentAv")]
        public ElectricCurrentMeasure CurrentAverage { get; set; }
        /// <summary>
        /// Average turn rate through interval (commonly in rpm). 
        /// </summary>
        [XmlElement("rpmAv")]
        public AnglePerTimeMeasure RpmAverage { get; set; }
        /// <summary>
        /// Average mud density in through interval. 
        /// </summary>
        [XmlElement("wtMudAv")]
        public DensityMeasure WeightMudAverage { get; set; }
        /// <summary>
        /// Average effective circulating density at TD through Interval. 
        /// </summary>
        [XmlElement("ecdTdAv")]
        public DensityMeasure EcdTdAverage { get; set; }
        /// <summary>
        /// Average drilling exponent through Interval. 
        /// </summary>
        [XmlElement("dxcAv")]
        public Double? DxcAverage {
            get {
                return dxcAvField;
            } 
            set { 
                dxcAvField = value;
                this.DxcAverageSpecified = true;
            }
        }

        private Double? dxcAvField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DxcAverageSpecified { get; set; }
		/// <summary>
        /// Set of lithology records for the Interval. 
        /// </summary>
        [XmlElement("lithology")]
        public List<Lithology> Lithology { get; set; }
        /// <summary>
        /// Show record through the Interval. 
        /// </summary>
        [XmlElement("show")]
        public Show Show { get; set; }
        /// <summary>
        /// Chromatographic break down for the interval. 
        /// </summary>
        [XmlElement("chromatograph")]
        public Chromatograph Chromatograph { get; set; }
        /// <summary>
        /// Total gas readings associated with this interval. 
        /// </summary>
        [XmlElement("mudGas")]
        public MudGas MudGas { get; set; }
        /// <summary>
        /// Sample bulk density for the interval. 
        /// </summary>
        [XmlElement("densBulk")]
        public DensityMeasure DensBulk { get; set; }
        /// <summary>
        /// Shale density for the interval. 
        /// </summary>
        [XmlElement("densShale")]
        public DensityMeasure DensShale { get; set; }
        /// <summary>
        /// Calcimetry calcite percentage. 
        /// </summary>
        [XmlElement("calcite")]
        public VolumePerVolumeMeasure CAlcite { get; set; }
        /// <summary>
        /// Calcimetry dolomite percentage. 
        /// </summary>
        [XmlElement("dolomite")]
        public VolumePerVolumeMeasure Dolomite { get; set; }
        /// <summary>
        /// Cuttings cationic exchange capacity. 
        /// </summary>
        [XmlElement("cec")]
        public EquivalentPerMassMeasure Cec { get; set; }
        /// <summary>
        /// Fluorescence as measured using a device licensed for the Quantitative Fluorescence Technique.
        /// </summary>
        [XmlElement("qft")]
        public IlluminanceMeasure Qft { get; set; }
        /// <summary>
        /// Calcimetry stabilized percentage. 
        /// </summary>
        [XmlElement("calcStab")]
        public VolumePerVolumeMeasure CAlcStab { get; set; }
		/// <summary>
        /// DEPRECATED. Formerly defined as name of formation penetrated, now deprecated to be replaced by lithostratigraphic with kind=formation. 
        /// </summary>
        [Obsolete()]
        [XmlElement("nameFormation")]
        public List<String> NameFormation { get; set; }
		/// <summary>
        /// Name of lithostratigraphy, regionally dependent.
        /// </summary>
        [XmlElement("lithostratigraphic")]
        public List<LithostratigraphyStruct> Lithostratigraphic { get; set; }
		/// <summary>
        /// Chronostratigraphic classification. 
        /// </summary>
        [XmlElement("chronostratigraphic")]
        public List<ChronostratigraphyStruct> Chronostratigraphic { get; set; }
        /// <summary>
        /// Minimum size. 
        /// </summary>
        [XmlElement("sizeMn")]
        public LengthMeasure SizeMin { get; set; }
        /// <summary>
        /// Maximum size. 
        /// </summary>
        [XmlElement("sizeMx")]
        public LengthMeasure SizeMax { get; set; }
        /// <summary>
        /// Plug length. 
        /// </summary>
        [XmlElement("lenPlug")]
        public LengthMeasure LenPlug { get; set; }
        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// Sample treatment : cutting fluid. 
        /// </summary>
        [XmlElement("cuttingFluid")]
        public String CuttingFluid { get; set; }
        /// <summary>
        /// Sample treatment : cleaning method. 
        /// </summary>
        [XmlElement("cleaningMethod")]
        public String CleaningMethod { get; set; }
        /// <summary>
        /// Sample treatment : drying method. 
        /// </summary>
        [XmlElement("dryingMethod")]
        public String DryingMethod { get; set; }
        /// <summary>
        /// Comments and remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
        /// <summary>
        /// A container element for creation and last-change DateTime information.
        /// </summary>
        [XmlElement("commonTime")]
        public CommonTime CommonTime { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Chromatographic Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_chromatograph", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Chromatographic Component Schema ")]
    public partial class Chromatograph : Object 
    {

        /// <summary>
        /// The date and time at which the gas sample was processed. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Measured depth at top of Interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at base of interval. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// Mud density in (active pits). 
        /// </summary>
        [XmlElement("wtMudIn")]
        public DensityMeasure WeightMudIn { get; set; }
        /// <summary>
        /// Mud density out (flowline). 
        /// </summary>
        [XmlElement("wtMudOut")]
        public DensityMeasure WeightMudOut { get; set; }
        /// <summary>
        /// Chromatograph type. 
        /// </summary>
        [XmlElement("chromType")]
        public String ChromType { get; set; }
        /// <summary>
        /// Chromatograph cycle time. Commonly in seconds. 
        /// </summary>
        [XmlElement("eTimChromCycle")]
        public TimeMeasure ETimeChromCycle { get; set; }
        /// <summary>
        /// Chromatograph integrator report time, format may be variable due to recording equipment 
        /// </summary>
        [XmlElement("chromIntRpt")]
        public DateTime? ChromIntRpt {
            get {
                return chromIntRptField;
            } 
            set { 
                chromIntRptField = value;
                this.ChromIntRptSpecified = true;
            }
        }

        private DateTime? chromIntRptField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ChromIntRptSpecified { get; set; }
        /// <summary>
        /// Methane (C1) ppm (average). 
        /// </summary>
        [XmlElement("methAv")]
        public VolumePerVolumeMeasure MethAverage { get; set; }
        /// <summary>
        /// Methane (C1) ppm (minimum). 
        /// </summary>
        [XmlElement("methMn")]
        public VolumePerVolumeMeasure MethMin { get; set; }
        /// <summary>
        /// Methane (C1) ppm (maximum). 
        /// </summary>
        [XmlElement("methMx")]
        public VolumePerVolumeMeasure MethMax { get; set; }
        /// <summary>
        /// Ethane (C2) ppm (average). 
        /// </summary>
        [XmlElement("ethAv")]
        public VolumePerVolumeMeasure EthAverage { get; set; }
        /// <summary>
        /// Ethane (C2) ppm (minimum). 
        /// </summary>
        [XmlElement("ethMn")]
        public VolumePerVolumeMeasure EthMin { get; set; }
        /// <summary>
        /// Ethane (C2) ppm (maximum). 
        /// </summary>
        [XmlElement("ethMx")]
        public VolumePerVolumeMeasure EthMax { get; set; }
        /// <summary>
        /// Propane (C3) ppm (average). 
        /// </summary>
        [XmlElement("propAv")]
        public VolumePerVolumeMeasure PropAverage { get; set; }
        /// <summary>
        /// Propane (C3) ppm (minimum). 
        /// </summary>
        [XmlElement("propMn")]
        public VolumePerVolumeMeasure PropMin { get; set; }
        /// <summary>
        /// Propane (C3) ppm (maximum). 
        /// </summary>
        [XmlElement("propMx")]
        public VolumePerVolumeMeasure PropMax { get; set; }
        /// <summary>
        /// iso-Butane (iC4) ppm (average). 
        /// </summary>
        [XmlElement("ibutAv")]
        public VolumePerVolumeMeasure IbutAverage { get; set; }
        /// <summary>
        /// iso-Butane (iC4) ppm (minimum). 
        /// </summary>
        [XmlElement("ibutMn")]
        public VolumePerVolumeMeasure IbutMin { get; set; }
        /// <summary>
        /// iso-Butane (iC4) ppm (maximum). 
        /// </summary>
        [XmlElement("ibutMx")]
        public VolumePerVolumeMeasure IbutMax { get; set; }
        /// <summary>
        /// nor-Butane (nC4) ppm (average). 
        /// </summary>
        [XmlElement("nbutAv")]
        public VolumePerVolumeMeasure NbutAverage { get; set; }
        /// <summary>
        /// nor-Butane (nC4) ppm (minimum). 
        /// </summary>
        [XmlElement("nbutMn")]
        public VolumePerVolumeMeasure NbutMin { get; set; }
        /// <summary>
        /// nor-Butane (nC4) ppm (maximum). 
        /// </summary>
        [XmlElement("nbutMx")]
        public VolumePerVolumeMeasure NbutMax { get; set; }
        /// <summary>
        /// iso-Pentane (iC5) ppm (average). 
        /// </summary>
        [XmlElement("ipentAv")]
        public VolumePerVolumeMeasure IpentAverage { get; set; }
        /// <summary>
        /// iso-Pentane (iC5) ppm (minimum). 
        /// </summary>
        [XmlElement("ipentMn")]
        public VolumePerVolumeMeasure IpentMin { get; set; }
        /// <summary>
        /// iso-Pentane (iC5) ppm (maximum). 
        /// </summary>
        [XmlElement("ipentMx")]
        public VolumePerVolumeMeasure IpentMax { get; set; }
        /// <summary>
        /// nor-Pentane (nC5) ppm (average). 
        /// </summary>
        [XmlElement("npentAv")]
        public VolumePerVolumeMeasure NpentAverage { get; set; }
        /// <summary>
        /// nor-Pentane (nC5) ppm (minimum). 
        /// </summary>
        [XmlElement("npentMn")]
        public VolumePerVolumeMeasure NpentMin { get; set; }
        /// <summary>
        /// nor-Pentane (nC5) ppm (maximum). 
        /// </summary>
        [XmlElement("npentMx")]
        public VolumePerVolumeMeasure NpentMax { get; set; }
        /// <summary>
        /// neo-Pentane (eC5) ppm (average). 
        /// </summary>
        [XmlElement("epentAv")]
        public VolumePerVolumeMeasure EpentAverage { get; set; }
        /// <summary>
        /// neo-Pentane (eC5) ppm (minimum). 
        /// </summary>
        [XmlElement("epentMn")]
        public VolumePerVolumeMeasure EpentMin { get; set; }
        /// <summary>
        /// neo-Pentane (eC5) ppm (maximum). 
        /// </summary>
        [XmlElement("epentMx")]
        public VolumePerVolumeMeasure EpentMax { get; set; }
        /// <summary>
        /// iso-Hexane (iC6) ppm (average). 
        /// </summary>
        [XmlElement("ihexAv")]
        public VolumePerVolumeMeasure IhexAverage { get; set; }
        /// <summary>
        /// iso-Hexane (iC6) ppm (minimum). 
        /// </summary>
        [XmlElement("ihexMn")]
        public VolumePerVolumeMeasure IhexMin { get; set; }
        /// <summary>
        /// iso-Hexane (iC6) ppm (maximum). 
        /// </summary>
        [XmlElement("ihexMx")]
        public VolumePerVolumeMeasure IhexMax { get; set; }
        /// <summary>
        /// nor-Hexane (nC6) ppm (average). 
        /// </summary>
        [XmlElement("nhexAv")]
        public VolumePerVolumeMeasure NhexAverage { get; set; }
        /// <summary>
        /// nor-Hexane (nC6) ppm (minimum). 
        /// </summary>
        [XmlElement("nhexMn")]
        public VolumePerVolumeMeasure NhexMin { get; set; }
        /// <summary>
        /// nor-Hexane (nC6) ppm (maximum). 
        /// </summary>
        [XmlElement("nhexMx")]
        public VolumePerVolumeMeasure NhexMax { get; set; }
        /// <summary>
        /// Carbon Dioxide ppm (average). 
        /// </summary>
        [XmlElement("co2Av")]
        public VolumePerVolumeMeasure Co2Average { get; set; }
        /// <summary>
        /// Carbon Dioxide ppm (minimum). 
        /// </summary>
        [XmlElement("co2Mn")]
        public VolumePerVolumeMeasure Co2Min { get; set; }
        /// <summary>
        /// Carbon Dioxide ppm (maximum). 
        /// </summary>
        [XmlElement("co2Mx")]
        public VolumePerVolumeMeasure Co2Max { get; set; }
        /// <summary>
        /// Hydrogen Sulfide (average) ppm. 
        /// </summary>
        [XmlElement("h2sAv")]
        public VolumePerVolumeMeasure H2sAverage { get; set; }
        /// <summary>
        /// Hydrogen Sulfide (minimum) ppm. 
        /// </summary>
        [XmlElement("h2sMn")]
        public VolumePerVolumeMeasure H2sMin { get; set; }
        /// <summary>
        /// Hydrogen Sulfide (maximum) ppm. 
        /// </summary>
        [XmlElement("h2sMx")]
        public VolumePerVolumeMeasure H2sMax { get; set; }
        /// <summary>
        /// Acetylene. 
        /// </summary>
        [XmlElement("acetylene")]
        public VolumePerVolumeMeasure Acetylene { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Mud Gas Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudGas", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML Mud Gas Component Schema")]
    public partial class MudGas : Object 
    {

        /// <summary>
        /// Average total gas. 
        /// </summary>
        [XmlElement("gasAv")]
        public VolumePerVolumeMeasure GasAverage { get; set; }
        /// <summary>
        /// Peak gas reading. 
        /// </summary>
        [XmlElement("gasPeak")]
        public VolumePerVolumeMeasure GasPeak { get; set; }
        /// <summary>
        /// Type of gas peak. 
        /// </summary>
        [XmlElement("gasPeakType")]
        public GasPeakType? GasPeakType {
            get {
                return gasPeakTypeField;
            } 
            set { 
                gasPeakTypeField = value;
                this.GasPeakTypeSpecified = true;
            }
        }

        private GasPeakType? gasPeakTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean GasPeakTypeSpecified { get; set; }
        /// <summary>
        /// Background gas reading. 
        /// </summary>
        [XmlElement("gasBackgnd")]
        public VolumePerVolumeMeasure GasBackgnd { get; set; }
        /// <summary>
        /// Connection gas (average). 
        /// </summary>
        [XmlElement("gasConAv")]
        public VolumePerVolumeMeasure GasConAverage { get; set; }
        /// <summary>
        /// Connection gas (maximum). 
        /// </summary>
        [XmlElement("gasConMx")]
        public VolumePerVolumeMeasure GasConMax { get; set; }
        /// <summary>
        /// Trip gas last reading. 
        /// </summary>
        [XmlElement("gasTrip")]
        public VolumePerVolumeMeasure GasTrip { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lithostratigraphyStruct xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lithostratigraphyStruct", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the lithostratigraphyStruct xsd type.")]
    public partial class LithostratigraphyStruct : Object 
    {
        public LithostratigraphyStruct() {}
        public LithostratigraphyStruct(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The unit of lithostratigraphy.
        /// </summary>
        [XmlAttribute("kind")]
        public LithostratigraphyUnit Kind {
            get {
                return kindField;
            } 
            set { 
                kindField = value;
                this.KindSpecified = true;
            }
        }

        private LithostratigraphyUnit kindField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean KindSpecified { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the chronostratigraphyStruct xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="chronostratigraphyStruct", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the chronostratigraphyStruct xsd type.")]
    public partial class ChronostratigraphyStruct : Object 
    {
        public ChronostratigraphyStruct() {}
        public ChronostratigraphyStruct(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The unit of chronostratigraphy.
        /// </summary>
        [XmlAttribute("kind")]
        public ChronostratigraphyUnit Kind {
            get {
                return kindField;
            } 
            set { 
                kindField = value;
                this.KindSpecified = true;
            }
        }

        private ChronostratigraphyUnit kindField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean KindSpecified { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Message object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_message", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Message object.")]
    public partial class Message : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the message. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the risk. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A reference to an object that is defined within the context of a wellbore.
        /// </summary>
        [XmlElement("objectReference")]
        public RefObjectString ObjectReference { get; set; }
        /// <summary>
        /// A reference to an sub-object that is defined within the context of the object referenced by objectReference. This should only refer to recurring components of a growing object.
        /// </summary>
        [XmlElement("subObjectReference")]
        public RefObjectString SubObjectReference { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
        [XmlElement("activityCode")]
        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set { 
                activityCodeField = value;
                this.ActivityCodeSpecified = true;
            }
        }

        private ActivityCode activityCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ActivityCodeSpecified { get; set; }
        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
        [XmlElement("detailActivity")]
        public String DetailActivity { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit { get; set; }
        /// <summary>
        /// Message type. 
        /// </summary>
        [XmlElement("typeMessage")]
        public MessageType? TypeMessage { get; set; }
        /// <summary>
        /// Message text. 
        /// </summary>
        [XmlElement("messageText")]
        public String MessageText { get; set; }
		/// <summary>
        /// Any extra numeric data. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.
        /// </summary>
        [XmlElement("param")]
        public List<IndexedObject> PluggedAndAbandonedram { get; set; }
        /// <summary>
        /// Severity of incident. 
        /// </summary>
        [XmlElement("severity")]
        public MessageSeverity? Severity {
            get {
                return severityField;
            } 
            set { 
                severityField = value;
                this.SeveritySpecified = true;
            }
        }

        private MessageSeverity? severityField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SeveritySpecified { get; set; }
        /// <summary>
        /// A warning probability (applies to warning).
        /// </summary>
        [XmlElement("warnProbability")]
        public MessageProbability? WarnProbability {
            get {
                return warnProbabilityField;
            } 
            set { 
                warnProbabilityField = value;
                this.WarnProbabilitySpecified = true;
            }
        }

        private MessageProbability? warnProbabilityField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean WarnProbabilitySpecified { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Log - Curve Information The order of the data should correspond to the 'direction'.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_logData", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML Log - Curve Information The order of the data should correspond to the 'direction'.")]
    public partial class LogData : Object 
    {

        /// <summary>
        /// A comma delimited list of curve mnemonics. Each mnemonic should only occur once in the list. The order of the mnemonics defines the order of the delimited values in elements "unitList" and "data". If the index curve is specified then it must be first in the list. This is an API "column-identifier" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("mnemonicList")]
        public String MinemonicList { get; set; }
        /// <summary>
        /// A comma delimited list of unit of measure acronyms that represent the values in "data". The units are in the same order as the mnemonics in element mnemonicList. Each unit value must match the value in the logCurveInfo structure for that curve. A null value (i.e., unitless as opposed to dimensionless) will be defined by adjacent commas.
        /// </summary>
        [XmlElement("unitList")]
        public String UnitList { get; set; }
		/// <summary>
        /// The actual data corresponding to the curves defined in the "mnemonicList" element. Normally a comma delimited list of data values (see dataDelimiter) with one value for each curve on the log (e.g., "xxx,yyy, zzz"). For array curves, the value of the array curve will be a space delimited list of values that are contained within the commas that delimit the value for that curve (e.g., "xxx,aa bb cc,zzz"). This essentially represents one row of a table where the curve mnemonics represent the column headings. This is an API "data-node" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("data")]
        public List<String> Data { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Metadata by which the array structure of a compound value is defined. This defines one axis of an array. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_axisDefinition", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Metadata by which the array structure of a compound value is defined. This defines one axis of an array. ")]
    public partial class AxisDefinition : Object 
    {

        /// <summary>
        /// The order of this axis. The order should begin with one and increment by one for each additional axis. The order indicates how fast the index of the axis varies in the serialized list of values. The index of an axis with an order of one varies the slowest. The index of an axis with an order of two varies the next slowest. And so on. This is the same ordering that is used in the C programming language. For example, the following array: [ x axis ] | z11 z12 z13 y axis: z21 z22 z23 | z31 z32 z33 | z41 z42 z43 may be encoded as follows: axisDefinition[order=1].name='x' axisDefinition[order=1].count='3' axisDefinition[order=2].name='y' axisDefinition[order=2].count='4' { z11 z21 z31 z41 z12 z22 z32 z42 z13 z23 z33 z43 } or alternatively: axisDefinition[order=1].name='y' axisDefinition[order=1].count='4' axisDefinition[order=2].name='x' axisDefinition[order=2].count='3' { z11 z12 z13 z21 z22 z23 z31 z32 z33 z41 z42 z43 } STORE UNIQUE KEY: When accessed via the Store Interface, the "order" must be unique. 
        /// </summary>
        [XmlElement("order")]
        public Int16? Order { get; set; }
        /// <summary>
        /// The count of elements along this axis of the array.
        /// </summary>
        [XmlElement("count")]
        public Int16? Count { get; set; }
        /// <summary>
        /// The name of the array axis.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The property type by which the array axis is classified.
        /// </summary>
        [XmlElement("propertyType")]
        public String PropertyType { get; set; }
        /// <summary>
        /// A string representing the units of measure of the axis values.
        /// </summary>
        [XmlElement("uom")]
        public String Uom { get; set; }
        /// <summary>
        /// The serialziation of the axis positions of an array as a whitespace-delimited list values of type xsd:String. Note: the serialization of string elements with embedded whitespace cannot be properly decoded.
        /// </summary>
        [XmlElement("stringValues")]
        public String StringValues {
            get {
                return stringValuesField;
            } 
            set { 
                if (doubleValuesFieldSpecified) throw new Exception("Cannot set property StringValues when property DoubleValues is already set");
                stringValuesField = value;
                stringValuesFieldSpecified = true;
            }
        }

        private String stringValuesField; 
        private bool stringValuesFieldSpecified = false; 

        /// <summary>
        /// The serialziation of the axis positions of an array as a whitespace-delimited list values of type xsd:double. If the length of this list is less than 'count' then the difference in the last two values represents the increment to be used to fill out the list. For example, the list '2 4' with count=4 represents the list '2 4 6 8'. Note: This has an underlying string type because .NET will not properly handle a "list of double".
        /// </summary>
        [XmlElement("doubleValues")]
        public String DoubleValues {
            get {
                return doubleValuesField;
            } 
            set { 
                if (stringValuesFieldSpecified) throw new Exception("Cannot set property DoubleValues when property StringValues is already set");
                doubleValuesField = value;
                doubleValuesFieldSpecified = true;
            }
        }

        private String doubleValuesField; 
        private bool doubleValuesFieldSpecified = false; 


		
        [XmlIgnore]
		[Browsable(false)]
        public ItemChoiceType1? ItemElementName { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the shortNameStruct xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="shortNameStruct", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the shortNameStruct xsd type.")]
    public partial class ShortNameStruct : Object 
    {
        public ShortNameStruct() {}
        public ShortNameStruct(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The naming system within the name is (hopefully) unique.
        /// </summary>
        [XmlAttribute("namingSystem")]
        public String NamingSystem { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Log - Curve Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_logCurveInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML Log - Curve Information")]
    public partial class LogCurveInfo : Object 
    {

        /// <summary>
        /// The curve name. This must be unique for all curves in a log. The naming authority for the mnemonic can be catptured in the namingSystem attribute. Since both the mnemonic and uid have similar requirements within the context of a WITSML server, the uid can be derived from the mnemonic (e.g., by converting blank to underscore).
        /// </summary>
        [XmlElement("mnemonic")]
        public ShortNameStruct Minemonic { get; set; }
        /// <summary>
        /// The curve classification obtained from a lookup in the vendors mnemonic catalog.
        /// </summary>
        [XmlElement("classWitsml")]
        public String ClassWitsml { get; set; }
        /// <summary>
        /// The count relative to (possibly) repeating values of classWitsml. This is used to indicate something like the first pump, second pump, etc.
        /// </summary>
        [XmlElement("classIndex")]
        public Int16? ClassIndex {
            get {
                return classIndexField;
            } 
            set { 
                classIndexField = value;
                this.ClassIndexSpecified = true;
            }
        }

        private Int16? classIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ClassIndexSpecified { get; set; }
        /// <summary>
        /// Unit of measurement of the data values. 
        /// </summary>
        [XmlElement("unit")]
        public String Unit { get; set; }
        /// <summary>
        /// Name alias for this trace. The naming authority for the mnemonic can be catptured in the namingSystem attribute.
        /// </summary>
        [XmlElement("mnemAlias")]
        public ShortNameStruct MinemAlias { get; set; }
        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e., when the null value representation is not explicitly defined). If a null value is defined in the logCurveInfo, it overrides any null value specified at the logHeader level. An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
        [XmlElement("nullValue")]
        public String NullValue { get; set; }
        /// <summary>
        /// True (true or 1) if this curve is a candidate to be a primary index. False (false or 0) or not given, indicates otherwise. An index curve should monotonically change when sorted on its own values (i.e., no duplicates). 
        /// </summary>
        [XmlElement("alternateIndex")]
        public Boolean? AlternateIndex {
            get {
                return alternateIndexField;
            } 
            set { 
                alternateIndexField = value;
                this.AlternateIndexSpecified = true;
            }
        }

        private Boolean? alternateIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AlternateIndexSpecified { get; set; }
        /// <summary>
        /// A pointer to the wellDatum that represents the values of this trace. This is only relevant for measured depths, vertical depths or elevations.
        /// </summary>
        [XmlElement("wellDatum")]
        public RefNameString WellDatum { get; set; }
        /// <summary>
        /// The minimum index value of any valid data point in the curve. Null values are excluded from this determination. The value is the same regardless of the direction of the curve. This is an API "column-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("minIndex")]
        public GenericMeasure MinIndex { get; set; }
        /// <summary>
        /// The maximum index value of any valid data point in the curve. Null values are excluded from this determination. The value is the same regardless of the direction of the curve. This is an API "column-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("maxIndex")]
        public GenericMeasure MaxIndex { get; set; }
        /// <summary>
        /// The minimum index value of any valid data point in the curve. Null values are excluded from this determination. The value is the same regardless of the direction of the curve. This is an API "column-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("minDateTimeIndex")]
        public DateTime? MinDateTimeIndex {
            get {
                return minDateTimeIndexField;
            } 
            set { 
                minDateTimeIndexField = value;
                this.MinDateTimeIndexSpecified = true;
            }
        }

        private DateTime? minDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MinDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// The maximum index value of any valid data point in the curve. Null values are excluded from this determination. The value is the same regardless of the direction of the curve. This is an API "column-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("maxDateTimeIndex")]
        public DateTime? MaxDateTimeIndex {
            get {
                return maxDateTimeIndexField;
            } 
            set { 
                maxDateTimeIndexField = value;
                this.MaxDateTimeIndexSpecified = true;
            }
        }

        private DateTime? maxDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean MaxDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// Description of the curve. 
        /// </summary>
        [XmlElement("curveDescription")]
        public String CurveDescription { get; set; }
        /// <summary>
        /// Offset of sensor from a downhole equipment vertical reference (the drill bit, for MWD logs; the tool zero reference for wireline logs). This element is only informative (log values are presented at actual depth, not requiring subtraction of an offset).
        /// </summary>
        [XmlElement("sensorOffset")]
        public LengthMeasure SensorOffset { get; set; }
        /// <summary>
        /// Data source, could be tool name/id. 
        /// </summary>
        [XmlElement("dataSource")]
        public String DataSource { get; set; }
        /// <summary>
        /// Data density of sample in samples per length unit. 
        /// </summary>
        [XmlElement("densData")]
        public PerLengthMeasure DensData { get; set; }
        /// <summary>
        /// State of trace data. 
        /// </summary>
        [XmlElement("traceState")]
        public LogTraceState? TraceState {
            get {
                return traceStateField;
            } 
            set { 
                traceStateField = value;
                this.TraceStateSpecified = true;
            }
        }

        private LogTraceState? traceStateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TraceStateSpecified { get; set; }
        /// <summary>
        /// Origin of trace data. 
        /// </summary>
        [XmlElement("traceOrigin")]
        public LogTraceOrigin? TraceOrigin {
            get {
                return traceOriginField;
            } 
            set { 
                traceOriginField = value;
                this.TraceOriginSpecified = true;
            }
        }

        private LogTraceOrigin? traceOriginField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TraceOriginSpecified { get; set; }
        /// <summary>
        /// Log data type.
        /// </summary>
        [XmlElement("typeLogData")]
        public LogDataType? TypeLogData { get; set; }
		/// <summary>
        /// Indicates that the curve is an array curve (i.e., multi-valued samples), and provides meta data by which an axis of the array can be understood. A separate definition is required for each axis of an N-dimensional array.
        /// </summary>
        [XmlElement("axisDefinition")]
        public List<AxisDefinition> AxisDefinition { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Log.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_log", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Log.")]
    public partial class Log : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the log. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the log. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
        [XmlElement("objectGrowing")]
        public Boolean? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set { 
                objectGrowingField = value;
                this.ObjectGrowingSpecified = true;
            }
        }

        private Boolean? objectGrowingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ObjectGrowingSpecified { get; set; }
        /// <summary>
        /// The data append rate (in seconds) of this growing object. This is an API server parameter releted to the "Special Handling Systematically Growing Objects" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
        [XmlElement("dataUpateRate")]
        public Int32? DataUpateRate {
            get {
                return dataUpateRateField;
            } 
            set { 
                dataUpateRateField = value;
                this.DataUpateRateSpecified = true;
            }
        }

        private Int32? dataUpateRateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DataUpateRateSpecified { get; set; }
        /// <summary>
        /// Requests that only the latest N values be returned from the end of each curve. This is an API server parameter releted to the "Special Handling Systematically Growing Objects" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
        [XmlElement("requestLatestValue")]
        public Int32? RequestLatestValue {
            get {
                return requestLatestValueField;
            } 
            set { 
                requestLatestValueField = value;
                this.RequestLatestValueSpecified = true;
            }
        }

        private Int32? requestLatestValueField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RequestLatestValueSpecified { get; set; }
        /// <summary>
        /// This value is only relevant within the context of a server. True ("true" or "1") indicates that all curves have the same sensor offset from the downhole equipment vertical reference. False ("false" or 0") or not given indicates otherwise. For a growing log, a value of true will allow a query to use the the endIndex from the previous query as the startIndex of the next query.
        /// </summary>
        [XmlElement("curveSensorsAligned")]
        public Boolean? CurveSensorsAligned {
            get {
                return curveSensorsAlignedField;
            } 
            set { 
                curveSensorsAlignedField = value;
                this.CurveSensorsAlignedSpecified = true;
            }
        }

        private Boolean? curveSensorsAlignedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CurveSensorsAlignedSpecified { get; set; }
        /// <summary>
        /// The name of the grouping represented by curves in this log. A group represents a named combination of curves and the curves in a particular log should be represented in that list.
        /// </summary>
        [XmlElement("dataGroup")]
        public String DataGroup { get; set; }
        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
        [XmlElement("serviceCompany")]
        public String ServiceCompany { get; set; }
        /// <summary>
        /// Log run number. This should normally be a number; however some legacy systems encode other information in this value.
        /// </summary>
        [XmlElement("runNumber")]
        public String RunNumber { get; set; }
        /// <summary>
        /// The bottom hole assembly run number associated with this log. This should match the run number on the BHA run object.
        /// </summary>
        [XmlElement("bhaRunNumber")]
        public Int16? BhaRunNumber {
            get {
                return bhaRunNumberField;
            } 
            set { 
                bhaRunNumberField = value;
                this.BhaRunNumberSpecified = true;
            }
        }

        private Int16? bhaRunNumberField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BhaRunNumberSpecified { get; set; }
        /// <summary>
        /// Identifies the pass within the run.
        /// </summary>
        [XmlElement("pass")]
        public String PluggedAndAbandonedss { get; set; }
        /// <summary>
        /// Date and time that the log was created. 
        /// </summary>
        [XmlElement("creationDate")]
        public DateTime? CreationDate {
            get {
                return creationDateField;
            } 
            set { 
                creationDateField = value;
                this.CreationDateSpecified = true;
            }
        }

        private DateTime? creationDateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CreationDateSpecified { get; set; }
        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// The value delimiter in the data string. Defaults to a comma. Note that this does not affect any space delimited array data.
        /// </summary>
        [XmlElement("dataDelimiter")]
        public String DataDelimiter { get; set; }
        /// <summary>
        /// Primary index type. 
        /// </summary>
        [XmlElement("indexType")]
        public LogIndexType? IndexType { get; set; }
        /// <summary>
        /// When the log header defines the direction as "Increasing", the startIndex is the starting (minimum) index value at which the first non-null data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first non-null data point is located. Either a quantity index set (start and end) or a date time index set must be given. If both sets are given then "indexType" and "indexCurve" must represent an elapsed time from "startDateTimeIndex". This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("startIndex")]
        public GenericMeasure StartIndex { get; set; }
        /// <summary>
        /// When the log header defines the direction as "Increasing", the endIndex is the ending (maximum) index value at which the last non-null data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last non-null data point is located. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("endIndex")]
        public GenericMeasure EndIndex { get; set; }
        /// <summary>
        /// The sampling increment. Set to zero for unequal sampling. A non-zero value indicates that the data is regularly sampled even if it has an explicit index curve. If it is zero or not given then assume that it is non-regular even though it may be regular. The problem is that writers generally cannot guarantee the regularity of the log until after they have finished processing it For curves that are originally sampled at a constant increment, this value should be retained because calculated values may have cumulative errors.
        /// </summary>
        [XmlElement("stepIncrement")]
        public RatioGenericMeasure StepIncrement { get; set; }
        /// <summary>
        /// When the log header defines the direction as "Increasing", the startIndex is the starting (minimum) index value at which the first non-null data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first non-null data point is located. Either a quantity index set (start and end) or a date time index set must be given. If both sets are given then "indexType" and "indexCurve" must represent an elapsed time from "startDateTimeIndex". This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("startDateTimeIndex")]
        public DateTime? StartDateTimeIndex {
            get {
                return startDateTimeIndexField;
            } 
            set { 
                startDateTimeIndexField = value;
                this.StartDateTimeIndexSpecified = true;
            }
        }

        private DateTime? startDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StartDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// When the log header defines the direction as "Increasing", the endIndex is the ending (maximum) index value at which the last non-null data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last non-null data point is located. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("endDateTimeIndex")]
        public DateTime? EndDateTimeIndex {
            get {
                return endDateTimeIndexField;
            } 
            set { 
                endDateTimeIndexField = value;
                this.EndDateTimeIndexSpecified = true;
            }
        }

        private DateTime? endDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EndDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// The sort order of the data row index values in the XML instance. For an "Increasing" direction the index value of consecutive data nodes are ascending. For a "Decreasing" direction the index value of consecutive data nodes are descending. The default direction is "Increasing". The direction of a log cannot be changed once it has been created. That is, this value cannot be updated in a server.
        /// </summary>
        [XmlElement("direction")]
        public LogIndexDirection? Direction {
            get {
                return directionField;
            } 
            set { 
                directionField = value;
                this.DirectionSpecified = true;
            }
        }

        private LogIndexDirection? directionField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DirectionSpecified { get; set; }
        /// <summary>
        /// The mnemonic of the index curve. Duplicate index values can exist in a log but a change of direction is not allowed. If a change of direction is required then a new log must be created. Some servers may eliminate (i.e., overwrite) duplicate indexes. The data values associated with this curve represent an API "node-index" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("indexCurve")]
        public String IndexCurve { get; set; }
        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e. when the null value representation is not explicitly defined). If a null value representation is defined for a log, this becomes the default for all curves in that log (but can be overridden at the curve level). An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
        [XmlElement("nullValue")]
        public String NullValue { get; set; }
		/// <summary>
        /// Log parameters. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats. A parameter name of "multipass" represents a boolean values ("true" or "false"). A "multipass" parameter value of "true" asserts that the object contains values for bhaRunNumber (or runNumber), passNumber and direction.
        /// </summary>
        [XmlElement("logParam")]
        public List<IndexedObject> LogPluggedAndAbandonedram { get; set; }
		/// <summary>
        /// Container element for the log curve information. This is an API "column-definition" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
        [XmlElement("logCurveInfo")]
        public List<LogCurveInfo> LogCurveInfo { get; set; }
		/// <summary>
        /// Container for one or more "rows" of log data. The use of more than one logData node represents a sparse view of the actual data and is contrained for use in the WITSML API for adding and updating sparse data. Any other usage should utilize only one instance of logData.
        /// </summary>
        [XmlElement("logData")]
        public List<LogData> LogData { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Formation Marker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_formationMarker", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Formation Marker.")]
    public partial class FormationMarker : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the formation marker. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the formation marker. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Prognosed measured depth. 
        /// </summary>
        [XmlElement("mdPrognosed")]
        public MeasuredDepthCoord MDPrognosed { get; set; }
        /// <summary>
        /// Prognosed true vertical depth. 
        /// </summary>
        [XmlElement("tvdPrognosed")]
        public WellVerticalDepthCoord TvdPrognosed { get; set; }
        /// <summary>
        /// Sampled measured depth at top of marker. 
        /// </summary>
        [XmlElement("mdTopSample")]
        public MeasuredDepthCoord MDTopSample { get; set; }
        /// <summary>
        /// Sampled true vertical depth at top of marker. 
        /// </summary>
        [XmlElement("tvdTopSample")]
        public WellVerticalDepthCoord TvdTopSample { get; set; }
        /// <summary>
        /// Bed Thickness. 
        /// </summary>
        [XmlElement("thicknessBed")]
        public LengthMeasure ThicknessBed { get; set; }
        /// <summary>
        /// Formation exposed along the wellbore. 
        /// </summary>
        [XmlElement("thicknessApparent")]
        public LengthMeasure ThicknessApparent { get; set; }
        /// <summary>
        /// Perpendicular thickness. 
        /// </summary>
        [XmlElement("thicknessPerpen")]
        public LengthMeasure ThicknessPerpen { get; set; }
        /// <summary>
        /// Logged measured depth at top of marker. 
        /// </summary>
        [XmlElement("mdLogSample")]
        public MeasuredDepthCoord MDLogSample { get; set; }
        /// <summary>
        /// Logged true vertical depth at top of marker. 
        /// </summary>
        [XmlElement("tvdLogSample")]
        public WellVerticalDepthCoord TvdLogSample { get; set; }
        /// <summary>
        /// Angle of dip with respect to horizontal. 
        /// </summary>
        [XmlElement("dip")]
        public PlaneAngleMeasure Dip { get; set; }
        /// <summary>
        /// Interpreted downdip direction. 
        /// </summary>
        [XmlElement("dipDirection")]
        public PlaneAngleMeasure DipDirection { get; set; }
        /// <summary>
        /// Chronostratigraphic classification. 
        /// </summary>
        [XmlElement("chronostratigraphic")]
        public String Chronostratigraphic { get; set; }
        /// <summary>
        /// Formation name. 
        /// </summary>
        [XmlElement("nameFormation")]
        public String NameFormation { get; set; }
        /// <summary>
        /// Description of item and details. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects.
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Fluids Report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_fluidsReport", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Fluids Report.")]
    public partial class FluidsReport : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the fluids report. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the fluids report. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// Fluids report number. 
        /// </summary>
        [XmlElement("numReport")]
        public Int16? NumReport {
            get {
                return numReportField;
            } 
            set { 
                numReportField = value;
                this.NumReportSpecified = true;
            }
        }

        private Int16? numReportField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumReportSpecified { get; set; }
		/// <summary>
        /// A Fluid record. 
        /// </summary>
        [XmlElement("fluid")]
        public List<Fluid> Fluid { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportGasReadingInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportGasReadingInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportGasReadingInfo xsd type.")]
    public partial class DrillReportGasReadingInfo : Object 
    {

        /// <summary>
        /// Date and time of the gas reading.
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Type of gas reading. 
        /// </summary>
        [XmlElement("readingType")]
        public GasPeakType? ReadingType {
            get {
                return readingTypeField;
            } 
            set { 
                readingTypeField = value;
                this.ReadingTypeSpecified = true;
            }
        }

        private GasPeakType? readingTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ReadingTypeSpecified { get; set; }
        /// <summary>
        /// Measured depth at the top of the interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at the bottom of the test interval. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// True vertical depth at the top of the interval. 
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// True vertical depth at the bottom of the interval. 
        /// </summary>
        [XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom { get; set; }
        /// <summary>
        /// The highest gas reading. 
        /// </summary>
        [XmlElement("gasHigh")]
        public VolumePerVolumeMeasure GasHigh { get; set; }
        /// <summary>
        /// The lowest gas reading. 
        /// </summary>
        [XmlElement("gasLow")]
        public VolumePerVolumeMeasure GasLow { get; set; }
        /// <summary>
        /// Methane (C1) concentration. 
        /// </summary>
        [XmlElement("meth")]
        public VolumePerVolumeMeasure Meth { get; set; }
        /// <summary>
        /// Ethane (C2) concentration. 
        /// </summary>
        [XmlElement("eth")]
        public VolumePerVolumeMeasure Eth { get; set; }
        /// <summary>
        /// Propane (C3) concentration. 
        /// </summary>
        [XmlElement("prop")]
        public VolumePerVolumeMeasure Prop { get; set; }
        /// <summary>
        /// iso-Butane (iC4) concentration. 
        /// </summary>
        [XmlElement("ibut")]
        public VolumePerVolumeMeasure Ibut { get; set; }
        /// <summary>
        /// nor-Butane (nC4) concentration. 
        /// </summary>
        [XmlElement("nbut")]
        public VolumePerVolumeMeasure Nbut { get; set; }
        /// <summary>
        /// iso-Pentane (iC5) concentration. 
        /// </summary>
        [XmlElement("ipent")]
        public VolumePerVolumeMeasure Ipent { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportPerfInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportPerfInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportPerfInfo xsd type.")]
    public partial class DrillReportPerfInfo : Object 
    {

        /// <summary>
        /// The date and time at which the well perforation interval is opened.
        /// </summary>
        [XmlElement("dTimOpen")]
        public DateTime? DateTimeOpen {
            get {
                return dTimOpenField;
            } 
            set { 
                dTimOpenField = value;
                this.DateTimeOpenSpecified = true;
            }
        }

        private DateTime? dTimOpenField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeOpenSpecified { get; set; }
        /// <summary>
        /// The date and time at which the well perforation interval is closed.
        /// </summary>
        [XmlElement("dTimClose")]
        public DateTime? DateTimeClose {
            get {
                return dTimCloseField;
            } 
            set { 
                dTimCloseField = value;
                this.DateTimeCloseSpecified = true;
            }
        }

        private DateTime? dTimCloseField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCloseSpecified { get; set; }
        /// <summary>
        /// Measured depth at the top of the perforation interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at the bottom of the perforation interval. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// True vertical depth at the top of the perforation interval. 
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// True vertical depth at the bottom of the perforation interval. 
        /// </summary>
        [XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportStratInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportStratInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportStratInfo xsd type.")]
    public partial class DrillReportStratInfo : Object 
    {

        /// <summary>
        /// Date and time at which a preliminary zonation is established.
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Measured depth at the top of the formation. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// True vertical depth at the top of the formation. 
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// A lithological description of the geological formation at the given depth.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportControlIncidentInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportControlIncidentInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportControlIncidentInfo xsd type.")]
    public partial class DrillReportControlIncidentInfo : Object 
    {

        /// <summary>
        /// Date and time of the well control incident. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// The measured depth to the well inflow entry point. 
        /// </summary>
        [XmlElement("mdInflow")]
        public MeasuredDepthCoord MDInflow { get; set; }
        /// <summary>
        /// The true vertical depth to the well inflow entery point. 
        /// </summary>
        [XmlElement("tvdInflow")]
        public WellVerticalDepthCoord TvdInflow { get; set; }
        /// <summary>
        /// Phase (large activity classification) e.g. Drill Surface Hole. 
        /// </summary>
        [XmlElement("phase")]
        public String PHase { get; set; }
        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
        [XmlElement("activityCode")]
        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set { 
                activityCodeField = value;
                this.ActivityCodeSpecified = true;
            }
        }

        private ActivityCode activityCodeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ActivityCodeSpecified { get; set; }
		/// <summary>
        /// A proprietary code used to define rig activity. The name of the proprietary system should be defined in the namingSystem attribute.
        /// </summary>
        [XmlElement("proprietaryCode")]
        public List<NameStruct> ProprietaryCode { get; set; }
        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
        [XmlElement("detailActivity")]
        public String DetailActivity { get; set; }
        /// <summary>
        /// The amount of time lost because of the well control incident. Commonly specified in hours.
        /// </summary>
        [XmlElement("eTimLost")]
        public TimeMeasure ETimeLost { get; set; }
        /// <summary>
        /// The date and time at which control of the well is regained.
        /// </summary>
        [XmlElement("dTimRegained")]
        public DateTime? DateTimeRegained {
            get {
                return dTimRegainedField;
            } 
            set { 
                dTimRegainedField = value;
                this.DateTimeRegainedSpecified = true;
            }
        }

        private DateTime? dTimRegainedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRegainedSpecified { get; set; }
        /// <summary>
        /// The drill bit nominal outside diameter at time of well control incident.
        /// </summary>
        [XmlElement("diaBit")]
        public LengthMeasure DiaBit { get; set; }
        /// <summary>
        /// The measured depth of bit at the time of the well control incident.
        /// </summary>
        [XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit { get; set; }
        /// <summary>
        /// The density of the drilling fluid.
        /// </summary>
        [XmlElement("wtMud")]
        public DensityMeasure WeightMud { get; set; }
        /// <summary>
        /// The equivalent mud weight value of the pore pressure reading.
        /// </summary>
        [XmlElement("porePressure")]
        public DensityMeasure PorePressure { get; set; }
        /// <summary>
        /// Diameter of the last installed casing. 
        /// </summary>
        [XmlElement("diaCsgLast")]
        public LengthMeasure DiaCsgLast { get; set; }
        /// <summary>
        /// Measured depth of last casing. 
        /// </summary>
        [XmlElement("mdCsgLast")]
        public MeasuredDepthCoord MDCsgLast { get; set; }
        /// <summary>
        /// The gained volume of drilling fluid due to well kick.
        /// </summary>
        [XmlElement("volMudGained")]
        public VolumeMeasure VolMudGained { get; set; }
        /// <summary>
        /// The shut in casing pressure. 
        /// </summary>
        [XmlElement("presShutInCasing")]
        public PressureMeasure PresShutInCAsing { get; set; }
        /// <summary>
        /// The actual pressure in the drill pipe when the rams are closed around it.
        /// </summary>
        [XmlElement("presShutInDrill")]
        public PressureMeasure PresShutInDrill { get; set; }
        /// <summary>
        /// The type of well control incident. 
        /// </summary>
        [XmlElement("incidentType")]
        public WellControlIncidentType? IncidentType {
            get {
                return incidentTypeField;
            } 
            set { 
                incidentTypeField = value;
                this.IncidentTypeSpecified = true;
            }
        }

        private WellControlIncidentType? incidentTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean IncidentTypeSpecified { get; set; }
        /// <summary>
        /// The type of well control incident. 
        /// </summary>
        [XmlElement("killingType")]
        public WellKillingProcedureType? KillingType {
            get {
                return killingTypeField;
            } 
            set { 
                killingTypeField = value;
                this.KillingTypeSpecified = true;
            }
        }

        private WellKillingProcedureType? killingTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean KillingTypeSpecified { get; set; }
        /// <summary>
        /// The lithological description of a geological formation at the incident depth.
        /// </summary>
        [XmlElement("formation")]
        public String Formation { get; set; }
        /// <summary>
        /// the temperature at the bottom of the wellbore. 
        /// </summary>
        [XmlElement("tempBottom")]
        public ThermodynamicTemperatureMeasure TempBottom { get; set; }
        /// <summary>
        /// The maximum pressure that the choke valve can be exposed to.
        /// </summary>
        [XmlElement("presMaxChoke")]
        public PressureMeasure PresMaxChoke { get; set; }
        /// <summary>
        /// A description of the well control incident.
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportEquipFailureInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportEquipFailureInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportEquipFailureInfo xsd type.")]
    public partial class DrillReportEquipFailureInfo : Object 
    {

        /// <summary>
        /// Date and time that the equipment failed.
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// The measured depth to the operation end point due to failure.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// The true vertical depth to the operation end point due to failure.
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// The classification of the equipment that failed.
        /// </summary>
        [XmlElement("equipClass")]
        public String EquipClass { get; set; }
        /// <summary>
        /// The missed production time due to equipment failure. 
        /// </summary>
        [XmlElement("eTimMissProduction")]
        public TimeMeasure ETimeMissProduction { get; set; }
        /// <summary>
        /// The date and time at which the production equipment was repaired and ready for production.
        /// </summary>
        [XmlElement("dTimRepair")]
        public DateTime? DateTimeRepair {
            get {
                return dTimRepairField;
            } 
            set { 
                dTimRepairField = value;
                this.DateTimeRepairSpecified = true;
            }
        }

        private DateTime? dTimRepairField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRepairSpecified { get; set; }
        /// <summary>
        /// A description that gives a information about the equipment failure. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportLithShowInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportLithShowInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportLithShowInfo xsd type.")]
    public partial class DrillReportLithShowInfo : Object 
    {

        /// <summary>
        /// Date and time that the well test was completed. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Measured depth at the top of the lithology interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at the bottom of the lithology interval. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// True vertical depth at the top of the lithology interval. 
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// True vertical depth at the bottom of the lithology interval. 
        /// </summary>
        [XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom { get; set; }
        /// <summary>
        /// A textual description of any shows in the interval. 
        /// </summary>
        [XmlElement("show")]
        public String Show { get; set; }
        /// <summary>
        /// A description that gives a geological/lithological description/evaluation of the interval. 
        /// </summary>
        [XmlElement("lithology")]
        public String Lithology { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportFormTestInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportFormTestInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportFormTestInfo xsd type.")]
    public partial class DrillReportFormTestInfo : Object 
    {

        /// <summary>
        /// Date and time that the wireline formation test was completed. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Measured depth of the wireline formation test. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// True vertical depth of the wireline formation test. 
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// The formation pore pressure. The pressure of fluids within the pores of a reservoir, usually hydrostatic pressure, or the pressure exerted by a column of water from the formation's depth to sea level.
        /// </summary>
        [XmlElement("presPore")]
        public PressureMeasure PresPore { get; set; }
        /// <summary>
        /// True ("true" or "1") indicates that there was a good seal for the wireline formation test. False ("false" or "0") or not given indicates otherwise. 
        /// </summary>
        [XmlElement("goodSeal")]
        public Boolean? GoodSeal {
            get {
                return goodSealField;
            } 
            set { 
                goodSealField = value;
                this.GoodSealSpecified = true;
            }
        }

        private Boolean? goodSealField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean GoodSealSpecified { get; set; }
        /// <summary>
        /// Measured depth where the fluid sample was taken. 
        /// </summary>
        [XmlElement("mdSample")]
        public MeasuredDepthCoord MDSample { get; set; }
        /// <summary>
        /// The dominate component in the fluid sample. 
        /// </summary>
        [XmlElement("dominateComponent")]
        public String DominateComponent { get; set; }
        /// <summary>
        /// The density of hydrocarbon component of the fluid sample. 
        /// </summary>
        [XmlElement("densityHC")]
        public DensityMeasure DensityHC { get; set; }
        /// <summary>
        /// The volume of the fluid sample. 
        /// </summary>
        [XmlElement("volumeSample")]
        public VolumeMeasure VolumeSample { get; set; }
        /// <summary>
        /// A description that describes the wireline formation test in more detail. 
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportWellTestInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportWellTestInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportWellTestInfo xsd type.")]
    public partial class DrillReportWellTestInfo : Object 
    {

        /// <summary>
        /// Date and time that the well test was completed. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// The type of well test. 
        /// </summary>
        [XmlElement("testType")]
        public WellTestType? TestType {
            get {
                return testTypeField;
            } 
            set { 
                testTypeField = value;
                this.TestTypeSpecified = true;
            }
        }

        private WellTestType? testTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TestTypeSpecified { get; set; }
        /// <summary>
        /// The number of the well test. 
        /// </summary>
        [XmlElement("testNumber")]
        public Int16? TestNumber {
            get {
                return testNumberField;
            } 
            set { 
                testNumberField = value;
                this.TestNumberSpecified = true;
            }
        }

        private Int16? testNumberField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TestNumberSpecified { get; set; }
        /// <summary>
        /// Measured depth at the top of the test interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at the bottom of the test interval. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// True vertical depth at the top of the test interval. 
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// True vertical depth at the bottom of the test interval. 
        /// </summary>
        [XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom { get; set; }
        /// <summary>
        /// The diameter of the choke opening. 
        /// </summary>
        [XmlElement("chokeOrificeSize")]
        public LengthMeasure ChokeOrificeSize { get; set; }
        /// <summary>
        /// The density of the produced oil. 
        /// </summary>
        [XmlElement("densityOil")]
        public DensityMeasure DensityOil { get; set; }
        /// <summary>
        /// The density of the produced water. 
        /// </summary>
        [XmlElement("densityWater")]
        public DensityMeasure DensityWater { get; set; }
        /// <summary>
        /// The density of the produced gas. 
        /// </summary>
        [XmlElement("densityGas")]
        public DensityMeasure DensityGas { get; set; }
        /// <summary>
        /// The maximum rate at which oil was produced. 
        /// </summary>
        [XmlElement("flowRateOil")]
        public VolumeFlowRateMeasure FlowRateOil { get; set; }
        /// <summary>
        /// The maximum rate at which water was produced. 
        /// </summary>
        [XmlElement("flowRateWater")]
        public VolumeFlowRateMeasure FlowRateWater { get; set; }
        /// <summary>
        /// The maximum rate at which gas was produced. 
        /// </summary>
        [XmlElement("flowRateGas")]
        public VolumeFlowRateMeasure FlowRateGas { get; set; }
        /// <summary>
        /// The final shut in pressure. 
        /// </summary>
        [XmlElement("presShutIn")]
        public PressureMeasure PresShutIn { get; set; }
        /// <summary>
        /// The final flowing pressure. 
        /// </summary>
        [XmlElement("presFlowing")]
        public PressureMeasure PresFlowing { get; set; }
        /// <summary>
        /// The final bottom hole pressure. 
        /// </summary>
        [XmlElement("presBottom")]
        public PressureMeasure PresBottom { get; set; }
        /// <summary>
        /// The ratio of the volume of gas to the volume of oil. 
        /// </summary>
        [XmlElement("gasOilRatio")]
        public VolumePerVolumeMeasure GasOilRatio { get; set; }
        /// <summary>
        /// The relative amount of water per amount of oil. 
        /// </summary>
        [XmlElement("waterOilRatio")]
        public VolumePerVolumeMeasure WaterOilRatio { get; set; }
        /// <summary>
        /// The relative amount of chloride in the produced water. 
        /// </summary>
        [XmlElement("chloride")]
        public MassConcentrationMeasure Chloride { get; set; }
        /// <summary>
        /// The relative amount of CO2 gas. 
        /// </summary>
        [XmlElement("carbonDioxide")]
        public MassConcentrationMeasure CArbonDioxide { get; set; }
        /// <summary>
        /// The relative amount of H2S gas. 
        /// </summary>
        [XmlElement("hydrogenSulfide")]
        public MassConcentrationMeasure HydrogenSulfide { get; set; }
        /// <summary>
        /// The total amount of oil produced. This includes oil that was disposed of (e.g., burned).
        /// </summary>
        [XmlElement("volOilTotal")]
        public VolumeMeasure VolOilTotal { get; set; }
        /// <summary>
        /// The total amount of gas produced. This includes gas that was disposed of (e.g., burned).
        /// </summary>
        [XmlElement("volGasTotal")]
        public VolumeMeasure VolGasTotal { get; set; }
        /// <summary>
        /// The total amount of water produced. This includes water that was disposed of.
        /// </summary>
        [XmlElement("volWaterTotal")]
        public VolumeMeasure VolWaterTotal { get; set; }
        /// <summary>
        /// The total amount of produced oil that was stored.
        /// </summary>
        [XmlElement("volOilStored")]
        public VolumeMeasure VolOilStored { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportCoreInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportCoreInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportCoreInfo xsd type.")]
    public partial class DrillReportCoreInfo : Object 
    {

        /// <summary>
        /// Date and time that the core was completed. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Core identification number. 
        /// </summary>
        [XmlElement("coreNumber")]
        public String CoreNumber { get; set; }
        /// <summary>
        /// Measured depth at the top of the cored interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at the bottom of the cored interval. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// True vertical depth at the top of the cored interval. 
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// True vertical depth at the bottom of the cored interval. 
        /// </summary>
        [XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom { get; set; }
        /// <summary>
        /// Length of core recovered. 
        /// </summary>
        [XmlElement("lenRecovered")]
        public LengthMeasure LenRecovered { get; set; }
        /// <summary>
        /// The relative amount of core recovered. 
        /// </summary>
        [XmlElement("recoverPc")]
        public VolumePerVolumeMeasurePercent RecoverPercent { get; set; }
        /// <summary>
        /// Length of core barrel. 
        /// </summary>
        [XmlElement("lenBarrel")]
        public LengthMeasure LenBarrel { get; set; }
        /// <summary>
        /// Core inner barrel type. 
        /// </summary>
        [XmlElement("innerBarrelType")]
        public InnerBarrelType? InnerBarrelType {
            get {
                return innerBarrelTypeField;
            } 
            set { 
                innerBarrelTypeField = value;
                this.InnerBarrelTypeSpecified = true;
            }
        }

        private InnerBarrelType? innerBarrelTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean InnerBarrelTypeSpecified { get; set; }
        /// <summary>
        /// General core description. 
        /// </summary>
        [XmlElement("coreDescription")]
        public String CoreDescription { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportLogInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportLogInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportLogInfo xsd type.")]
    public partial class DrillReportLogInfo : Object 
    {

        /// <summary>
        /// The date and time that the log was completed. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Log run number. For measurement while drilling, this should be the bottom hole assembly number.
        /// </summary>
        [XmlElement("runNumber")]
        public String RunNumber { get; set; }
        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
        [XmlElement("serviceCompany")]
        public String ServiceCompany { get; set; }
        /// <summary>
        /// Measured depth at the top of the logged interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth at the bottom of the logged interval. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// True vertical depth at the top of the logged interval. 
        /// </summary>
        [XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop { get; set; }
        /// <summary>
        /// True vertical depth at the bottom of the logged interval. 
        /// </summary>
        [XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom { get; set; }
        /// <summary>
        /// A description of the logging tool. 
        /// </summary>
        [XmlElement("tool")]
        public String Tool { get; set; }
        /// <summary>
        /// Bottom hole temperature static. . If you set this property, you must also set ETimeStatic.
        /// </summary>
        [XmlElement("tempBHST")]
        public ThermodynamicTemperatureMeasure TempBHST {
            get {
                return tempBHSTField;
            } 
            set { 
                if (tempBHCTFieldSpecified) throw new Exception("Cannot set property TempBHST when property TempBHCT is already set");
                tempBHSTField = value;
                tempBHSTFieldSpecified = true;
            }
        }

        private ThermodynamicTemperatureMeasure tempBHSTField; 
        private bool tempBHSTFieldSpecified = false; 

        /// <summary>
        /// Ellapsed time since circulation stopped. . If you set this property, you must also set TempBHST.
        /// </summary>
        [XmlElement("eTimStatic")]
        public TimeMeasure ETimeStatic {
            get {
                return eTimStaticField;
            } 
            set { 
                if (tempBHCTFieldSpecified) throw new Exception("Cannot set property ETimeStatic when property TempBHCT is already set");
                eTimStaticField = value;
                eTimStaticFieldSpecified = true;
            }
        }

        private TimeMeasure eTimStaticField; 
        private bool eTimStaticFieldSpecified = false; 

        /// <summary>
        /// Bottom hole circulating temperature. 
        /// </summary>
        [XmlElement("tempBHCT")]
        public ThermodynamicTemperatureMeasure TempBHCT {
            get {
                return tempBHCTField;
            } 
            set { 
                if (tempBHSTFieldSpecified) throw new Exception("Cannot set property TempBHCT when property TempBHST is already set");
                if (eTimStaticFieldSpecified) throw new Exception("Cannot set property TempBHCT when property ETimeStatic is already set");
                tempBHCTField = value;
                tempBHCTFieldSpecified = true;
            }
        }

        private ThermodynamicTemperatureMeasure tempBHCTField; 
        private bool tempBHCTFieldSpecified = false; 


		
        [XmlIgnore]
		[Browsable(false)]
        public List<ItemsChoiceType1> ItemsElementName { get; set; }
        /// <summary>
        /// Measured depth to the temperature measurement tool. 
        /// </summary>
        [XmlElement("mdTempTool")]
        public MeasuredDepthCoord MDTempTool { get; set; }
        /// <summary>
        /// True vertical depth to the temperature measurement tool. 
        /// </summary>
        [XmlElement("tvdTempTool")]
        public WellVerticalDepthCoord TvdTempTool { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Trajectory Station Component Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportSurveyStation", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Trajectory Station Component Schema")]
    public partial class DrillReportSurveyStation : Object 
    {

        /// <summary>
        /// The date at which the directional survey took place.
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime { get; set; }
        /// <summary>
        /// Measured depth of measurement from the drill datum. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// Hole inclination, measured from vertical. 
        /// </summary>
        [XmlElement("incl")]
        public PlaneAngleMeasure Incl { get; set; }
        /// <summary>
        /// Hole azimuth. Corrected to wells azimuth reference. 
        /// </summary>
        [XmlElement("azi")]
        public PlaneAngleMeasure Azi { get; set; }
        /// <summary>
        /// Distance along vertical section azimuth plane. 
        /// </summary>
        [XmlElement("vertSect")]
        public LengthMeasure VertSect { get; set; }
        /// <summary>
        /// Dogleg severity. 
        /// </summary>
        [XmlElement("dls")]
        public AnglePerLengthMeasure DoglegSeverity { get; set; }
		/// <summary>
        /// The 2D coordinates of the item. Note that within the context of trajectory, the "original" coordinates are inherently local coordinates as defined above.
        /// </summary>
        [XmlElement("location")]
        public List<Location> Location { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timestampedCommentString xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timestampedCommentString", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the timestampedCommentString xsd type.")]
    public partial class TimestampedCommentString : Object 
    {
        public TimestampedCommentString() {}
        public TimestampedCommentString(String value)
        {
            this.Value = value;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

		
        [XmlAttribute("dTim")]
        public DateTime DateTime { get; set; }
		
        [XmlText]
        public String Value { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportPorePressure xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportPorePressure", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportPorePressure xsd type.")]
    public partial class DrillReportPorePressure : Object 
    {

        /// <summary>
        /// Was the reading measured or estimated
        /// </summary>
        [XmlElement("readingKind")]
        public ReadingKind? ReadingKind { get; set; }
        /// <summary>
        /// The equivalent mud weight value of the pore pressure reading.
        /// </summary>
        [XmlElement("equivalentMudWeight")]
        public DensityMeasure EquivalentMudWeight { get; set; }
        /// <summary>
        /// Date and time at the reading was made. 
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// The measured depth where the readings were recorded.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// The true vertical depth where the readings were recorded.
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportStatusInfo xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportStatusInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("This class represents the cs_drillReportStatusInfo xsd type.")]
    public partial class DrillReportStatusInfo : Object 
    {

        /// <summary>
        /// the date and time that for which the well status is reported.
        /// </summary>
        [XmlElement("dTim")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set { 
                dTimField = value;
                this.DateTimeSpecified = true;
            }
        }

        private DateTime? dTimField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpecified { get; set; }
        /// <summary>
        /// Wellbore measured depth at the end of the report period.
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Wellbore true vertical depth at the end of the report.
        /// </summary>
        [XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd { get; set; }
        /// <summary>
        /// The measured plug back depth.
        /// </summary>
        [XmlElement("mdPlugTop")]
        public MeasuredDepthCoord MDPlugTop { get; set; }
        /// <summary>
        /// Hole nominal inside diameter. 
        /// </summary>
        [XmlElement("diaHole")]
        public LengthMeasure DiaHole { get; set; }
        /// <summary>
        /// The measured depth to the start of the current hole diameter.
        /// </summary>
        [XmlElement("mdDiaHoleStart")]
        public MeasuredDepthCoord MDDiaHoleStart { get; set; }
        /// <summary>
        /// Pilot hole nominal inside diameter at reporting time. 
        /// </summary>
        [XmlElement("diaPilot")]
        public LengthMeasure DiaPilot { get; set; }
        /// <summary>
        /// The planned measured depth of the pilot hole.
        /// </summary>
        [XmlElement("mdDiaPilotPlan")]
        public MeasuredDepthCoord MDDiaPilotPlan { get; set; }
        /// <summary>
        /// The planned true vertical depth of the pilot hole.
        /// </summary>
        [XmlElement("tvdDiaPilotPlan")]
        public WellVerticalDepthCoord TvdDiaPilotPlan { get; set; }
        /// <summary>
        /// Type of wellbore. 
        /// </summary>
        [XmlElement("typeWellbore")]
        public WellboreType? TypeWellbore {
            get {
                return typeWellboreField;
            } 
            set { 
                typeWellboreField = value;
                this.TypeWellboreSpecified = true;
            }
        }

        private WellboreType? typeWellboreField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TypeWellboreSpecified { get; set; }
        /// <summary>
        /// Measured depth to the kickoff point of the wellbore.
        /// </summary>
        [XmlElement("mdKickoff")]
        public MeasuredDepthCoord MDKickoff { get; set; }
        /// <summary>
        /// True vertical depth to the kickoff point of the wellbore.
        /// </summary>
        [XmlElement("tvdKickoff")]
        public MeasuredDepthCoord TvdKickoff { get; set; }
		/// <summary>
        /// The name of the parent wellbore. This is the wellbore from which the current wellbore kickedoff.
        /// </summary>
        [XmlElement("parentWellbore")]
        public List<WellAlias> PluggedAndAbandonedrentWellbore { get; set; }
        /// <summary>
        /// The measured formation strength. This should be the final measurement before the end of the report period.
        /// </summary>
        [XmlElement("strengthForm")]
        public DensityMeasure StrengthForm { get; set; }
        /// <summary>
        /// The measured depth of the formation strength measuement.
        /// </summary>
        [XmlElement("mdStrengthForm")]
        public MeasuredDepthCoord MDStrengthForm { get; set; }
        /// <summary>
        /// The true vertical depth of the formation strength measuement.
        /// </summary>
        [XmlElement("tvdStrengthForm")]
        public WellVerticalDepthCoord TvdStrengthForm { get; set; }
        /// <summary>
        /// Diameter of last casing. 
        /// </summary>
        [XmlElement("diaCsgLast")]
        public LengthMeasure DiaCsgLast { get; set; }
        /// <summary>
        /// Measured depth of last casing. 
        /// </summary>
        [XmlElement("mdCsgLast")]
        public MeasuredDepthCoord MDCsgLast { get; set; }
        /// <summary>
        /// True vertical depth of last casing. 
        /// </summary>
        [XmlElement("tvdCsgLast")]
        public WellVerticalDepthCoord TvdCsgLast { get; set; }
        /// <summary>
        /// The type of pressure test that was run during this reporting period.
        /// </summary>
        [XmlElement("presTestType")]
        public PresTestType? PresTestType {
            get {
                return presTestTypeField;
            } 
            set { 
                presTestTypeField = value;
                this.PresTestTypeSpecified = true;
            }
        }

        private PresTestType? presTestTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PresTestTypeSpecified { get; set; }
        /// <summary>
        /// Measured depth of plan for this day number (report period). 
        /// </summary>
        [XmlElement("mdPlanned")]
        public MeasuredDepthCoord MDPlanned { get; set; }
        /// <summary>
        /// Distance drilled during this reporting period. This should be measured along the centerline of the wellbore.
        /// </summary>
        [XmlElement("distDrill")]
        public LengthMeasure DistDrill { get; set; }
        /// <summary>
        /// Elevation of the rotary kelly bushing. 
        /// </summary>
        [XmlElement("elevKelly")]
        public WellElevationCoord ElevKelly { get; set; }
        /// <summary>
        /// A summary that sumarizes the activities performed and the status of the ongoing activities from the reporting period.
        /// </summary>
        [XmlElement("sum24Hr")]
        public String Sum24Hr { get; set; }
        /// <summary>
        /// A summary that sumarizes the planned activities the next reporting period. 
        /// </summary>
        [XmlElement("forecast24Hr")]
        public String Forecast24Hr { get; set; }
        /// <summary>
        /// Rate of penetration at the end of the reporting period. 
        /// </summary>
        [XmlElement("ropCurrent")]
        public VelocityMeasure RopCurrent { get; set; }
        /// <summary>
        /// A pointer to the rig utilized in this reporting period. 
        /// </summary>
        [XmlElement("rig")]
        public RefNameString Rig { get; set; }
        /// <summary>
        /// Time from start of Operations (commonly in days). 
        /// </summary>
        [XmlElement("eTimStart")]
        public TimeMeasure ETimeStart { get; set; }
        /// <summary>
        /// Time since bit broke ground (commonly in days). 
        /// </summary>
        [XmlElement("eTimSpud")]
        public TimeMeasure ETimeSpud { get; set; }
        /// <summary>
        /// Time rig on location (commonly in days). 
        /// </summary>
        [XmlElement("eTimLoc")]
        public TimeMeasure ETimeLoc { get; set; }
        /// <summary>
        /// Drilling time. 
        /// </summary>
        [XmlElement("eTimDrill")]
        public TimeMeasure ETimeDrill { get; set; }
        /// <summary>
        /// Average Rate of Penetration through Interval. 
        /// </summary>
        [XmlElement("ropAv")]
        public VelocityMeasure RopAverage { get; set; }
        /// <summary>
        /// Name of operator rig supervisor. 
        /// </summary>
        [XmlElement("supervisor")]
        public String Supervisor { get; set; }
        /// <summary>
        /// Nae of Engineer. 
        /// </summary>
        [XmlElement("engineer")]
        public String Engineer { get; set; }
        /// <summary>
        /// Name of operator wellsite geologist. 
        /// </summary>
        [XmlElement("geologist")]
        public String Geologist { get; set; }
        /// <summary>
        /// Time spent rotary drilling for report interval. 
        /// </summary>
        [XmlElement("eTimDrillRot")]
        public TimeMeasure ETimeDrillRot { get; set; }
        /// <summary>
        /// Time spent slide drilling from start of bit run. 
        /// </summary>
        [XmlElement("eTimDrillSlid")]
        public TimeMeasure ETimeDrillSlid { get; set; }
        /// <summary>
        /// Time spent circulating from start of bit run. 
        /// </summary>
        [XmlElement("eTimCirc")]
        public TimeMeasure ETimeCirc { get; set; }
        /// <summary>
        /// Time spent reaming from start of bit run. 
        /// </summary>
        [XmlElement("eTimReam")]
        public TimeMeasure ETimeReam { get; set; }
        /// <summary>
        /// Time spent with no DD work (commonly in hours). 
        /// </summary>
        [XmlElement("eTimHold")]
        public TimeMeasure ETimeHold { get; set; }
        /// <summary>
        /// Time spent steering bottom hole assembly (commonly in hours). 
        /// </summary>
        [XmlElement("eTimSteering")]
        public TimeMeasure ETimeSteering { get; set; }
        /// <summary>
        /// Distance drilled - rotating. 
        /// </summary>
        [XmlElement("distDrillRot")]
        public LengthMeasure DistDrillRot { get; set; }
        /// <summary>
        /// Distance drilled - sliding. 
        /// </summary>
        [XmlElement("distDrillSlid")]
        public LengthMeasure DistDrillSlid { get; set; }
        /// <summary>
        /// Distance reamed. 
        /// </summary>
        [XmlElement("distReam")]
        public LengthMeasure DistReam { get; set; }
        /// <summary>
        /// Distance covered while holding angle with a steerable drilling assembly. 
        /// </summary>
        [XmlElement("distHold")]
        public LengthMeasure DistHold { get; set; }
        /// <summary>
        /// Distance covered while actively steering with a steerable drilling assembly. 
        /// </summary>
        [XmlElement("distSteering")]
        public LengthMeasure DistSteering { get; set; }
        /// <summary>
        /// Total number of personnel on board. 
        /// </summary>
        [XmlElement("numPob")]
        public Int16? NumPob {
            get {
                return numPobField;
            } 
            set { 
                numPobField = value;
                this.NumPobSpecified = true;
            }
        }

        private Int16? numPobField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumPobSpecified { get; set; }
        /// <summary>
        /// Number of contractor personnel on board. 
        /// </summary>
        [XmlElement("numContract")]
        public Int16? NumContract {
            get {
                return numContractField;
            } 
            set { 
                numContractField = value;
                this.NumContractSpecified = true;
            }
        }

        private Int16? numContractField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumContractSpecified { get; set; }
        /// <summary>
        /// Number of Operator personnel on board. 
        /// </summary>
        [XmlElement("numOperator")]
        public Int16? NumOperator {
            get {
                return numOperatorField;
            } 
            set { 
                numOperatorField = value;
                this.NumOperatorSpecified = true;
            }
        }

        private Int16? numOperatorField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumOperatorSpecified { get; set; }
        /// <summary>
        /// Number of service company personnel on board. 
        /// </summary>
        [XmlElement("numService")]
        public Int16? NumService {
            get {
                return numServiceField;
            } 
            set { 
                numServiceField = value;
                this.NumServiceSpecified = true;
            }
        }

        private Int16? numServiceField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumServiceSpecified { get; set; }
        /// <summary>
        /// AFE (authorization for expenditure) number that this cost item applies to. 
        /// </summary>
        [XmlElement("numAFE")]
        public String NumAFE { get; set; }
        /// <summary>
        /// Daily Cost. 
        /// </summary>
        [XmlElement("costDay")]
        public Cost CostDay { get; set; }
        /// <summary>
        /// Daily Mud Cost. 
        /// </summary>
        [XmlElement("costDayMud")]
        public Cost CostDayMud { get; set; }
        /// <summary>
        /// Hole condition description. 
        /// </summary>
        [XmlElement("conditionHole")]
        public String ConditionHole { get; set; }
        /// <summary>
        /// True vertical depth of leak off test point. 
        /// </summary>
        [XmlElement("tvdLot")]
        public WellVerticalDepthCoord TvdLot { get; set; }
        /// <summary>
        /// Leak off test equivalent mud weight. 
        /// </summary>
        [XmlElement("presLotEmw")]
        public DensityMeasure PresLotEmw { get; set; }
        /// <summary>
        /// Kick tolerance pressure. 
        /// </summary>
        [XmlElement("presKickTol")]
        public PressureMeasure PresKickTol { get; set; }
        /// <summary>
        /// Kick tolerance volume. 
        /// </summary>
        [XmlElement("volKickTol")]
        public VolumeMeasure VolKickTol { get; set; }
        /// <summary>
        /// Maximum allowable shut-in casing pressure. 
        /// </summary>
        [XmlElement("maasp")]
        public PressureMeasure Maasp { get; set; }
        /// <summary>
        /// A pointer to the tubular (assembly) used in this report period. This represents a foreign key to tubular. 
        /// </summary>
        [XmlElement("tubular")]
        public RefNameString Tubular { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A common way for handling names of objects. An identifier type must include a Name. It may also include a NamingSystem, which gives meaning to the name. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellAlias", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("A common way for handling names of objects. An identifier type must include a Name. It may also include a NamingSystem, which gives meaning to the name. ")]
    public partial class WellAlias : Object 
    {

        /// <summary>
        /// A human contextual name of a well. This should (hopefully) be unique within the context of the naming system.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The naming system under which the well is defined. Knowledge of the naming system may allow the hame to be parsed for embeded information.
        /// </summary>
        [XmlElement("namingSystem")]
        public WellNamingSystem? NamingSystem { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A common way for handling names of objects. An identifier type must include a Name. It may also include a NamingSystem, which gives meaning to the name. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_alias", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("A common way for handling names of objects. An identifier type must include a Name. It may also include a NamingSystem, which gives meaning to the name. ")]
    public partial class Alias : Object 
    {

        /// <summary>
        /// A human contextual name of an item. This should (hopefully) be unique within the context of the naming system.
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// The naming system under which the item is defined. Knowledge of the naming system may allow the hame to be parsed for embeded information.
        /// </summary>
        [XmlElement("namingSystem")]
        public String NamingSystem { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  General information about a well bore for a drill operations report. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportWellboreInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" General information about a well bore for a drill operations report. ")]
    public partial class DrillReportWellboreInfo : Object 
    {

        /// <summary>
        /// Date and time at which the well was spudded. This is when the well drilling equipment begin to bore into the earth's surface for the purpose of drilling a well. 
        /// </summary>
        [XmlElement("dTimSpud")]
        public DateTime? DateTimeSpud {
            get {
                return dTimSpudField;
            } 
            set { 
                dTimSpudField = value;
                this.DateTimeSpudSpecified = true;
            }
        }

        private DateTime? dTimSpudField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSpudSpecified { get; set; }
        /// <summary>
        /// Date and time at which the well was predrilled. This is when the well drilling equipment begin to bore into the earth's surface for the purpose of drilling a well. 
        /// </summary>
        [XmlElement("dTimPreSpud")]
        public DateTime? DateTimePreSpud {
            get {
                return dTimPreSpudField;
            } 
            set { 
                dTimPreSpudField = value;
                this.DateTimePreSpudSpecified = true;
            }
        }

        private DateTime? dTimPreSpudField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePreSpudSpecified { get; set; }
		/// <summary>
        /// The date when the drilling activity is completed.
        /// </summary>
        [XmlElement("")]
        public DateTime? DateDrillComplete {
            get {
                return dateDrillCompleteField;
            } 
            set { 
                dateDrillCompleteField = value;
                this.DateDrillCompleteSpecified = true;
            }
        }

        private DateTime? dateDrillCompleteField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateDrillCompleteSpecified { get; set; }
        /// <summary>
        /// The name of the drilling Operator company. 
        /// </summary>
        [XmlElement("operator")]
        public String Operator { get; set; }
        /// <summary>
        /// The name of the drilling Contractor company. 
        /// </summary>
        [XmlElement("drillContractor")]
        public String DrillContractor { get; set; }
		/// <summary>
        /// A name of the fixed or movable facility being used to drill the wellbore.
        /// </summary>
        [XmlElement("rigAlias")]
        public List<Alias> RigAlias { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Drilling Report object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_drillReport", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Drilling Report object.")]
    public partial class DrillReport : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the drilling report. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the drilling report. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Date and time of the start of the reporting period. 
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart { get; set; }
        /// <summary>
        /// Date and time end of the reporting period. Report periods are commonly 24 hour periods. 
        /// </summary>
        [XmlElement("dTimEnd")]
        public DateTime? DateTimeEnd { get; set; }
        /// <summary>
        /// The kind of report version. For example, a preliminary version.
        /// </summary>
        [XmlElement("versionKind")]
        public OpsReportVersion? VersionKind {
            get {
                return versionKindField;
            } 
            set { 
                versionKindField = value;
                this.VersionKindSpecified = true;
            }
        }

        private OpsReportVersion? versionKindField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean VersionKindSpecified { get; set; }
        /// <summary>
        /// The date and time of the report creation. A later timestamp indicates a newer version. In order to update values in a report a full updated copy of the original report should be submitted.
        /// </summary>
        [XmlElement("createDate")]
        public DateTime? CreateDate {
            get {
                return createDateField;
            } 
            set { 
                createDateField = value;
                this.CreateDateSpecified = true;
            }
        }

        private DateTime? createDateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CreateDateSpecified { get; set; }
        /// <summary>
        /// An alternative name of the well (in a naming system). The above well name should be included in the list of aliases so that its origin can be known.
        /// </summary>
        [XmlElement("wellAlias")]
        public WellAlias WellAlias { get; set; }
		/// <summary>
        /// An alternative name of the wellbore (in a naming system). The above well name should be included in the list of aliases so that its origin can be known.
        /// </summary>
        [XmlElement("wellboreAlias")]
        public List<WellAlias> WellboreAlias { get; set; }
		/// <summary>
        /// Defines a vertical datum used for measured depths, vertical depths or elevations. This must be specified if one of the aforementioned coordinate values are included in the report. This only applies to this report and is generally a copy of the same information from the well object.
        /// </summary>
        [XmlElement("wellDatum")]
        public List<WellDatum> WellDatum { get; set; }
		/// <summary>
        /// Defines a coordinate reference system used by coordinates within this report. This must be specified if coordinate values are included in the report (i.e., in a survey station location). This only applies to this report and is generally a copy of the same information from the well object.
        /// </summary>
        [XmlElement("wellCRS")]
        public List<WellCRS> WellCRS { get; set; }
        /// <summary>
        /// General information about a wellbore. The well is represented by the original wellbore.
        /// </summary>
        [XmlElement("wellboreInfo")]
        public DrillReportWellboreInfo WellboreInfo { get; set; }
		/// <summary>
        /// General status information.
        /// </summary>
        [XmlElement("statusInfo")]
        public List<DrillReportStatusInfo> StatusInfo { get; set; }
		/// <summary>
        /// Information about a bit.
        /// </summary>
        [XmlElement("bitRecord")]
        public List<BitRecord> BitRecord { get; set; }
		/// <summary>
        /// One fluid record. 
        /// </summary>
        [XmlElement("fluid")]
        public List<Fluid> Fluid { get; set; }
		/// <summary>
        /// Information about the pore pressure.
        /// </summary>
        [XmlElement("porePressure")]
        public List<DrillReportPorePressure> PorePressure { get; set; }
        /// <summary>
        /// A description of what happened from the end of report to an alternative time before the end of the next report. This is intended to allow a preliminary description of what happened from the end of the report (commonly midnight) until the time of submission of a preliminary report (commonly 6:00 in the morning).
        /// </summary>
        [XmlElement("extendedReport")]
        public TimestampedCommentString ExtendedReport { get; set; }
		/// <summary>
        /// A survey station recorded during the report interval. 
        /// </summary>
        [XmlElement("surveyStation")]
        public List<DrillReportSurveyStation> SurveyStation { get; set; }
		/// <summary>
        /// Activity breakdown, multiple for many activities. 
        /// </summary>
        [XmlElement("activity")]
        public List<Activity> Activity { get; set; }
		/// <summary>
        /// General information about a log.
        /// </summary>
        [XmlElement("logInfo")]
        public List<DrillReportLogInfo> LogInfo { get; set; }
		/// <summary>
        /// General information about a core.
        /// </summary>
        [XmlElement("coreInfo")]
        public List<DrillReportCoreInfo> CoreInfo { get; set; }
		/// <summary>
        /// General information about a production well test.
        /// </summary>
        [XmlElement("wellTestInfo")]
        public List<DrillReportWellTestInfo> WellTestInfo { get; set; }
		/// <summary>
        /// General information about a wireline formation test.
        /// </summary>
        [XmlElement("formTestInfo")]
        public List<DrillReportFormTestInfo> FormTestInfo { get; set; }
		/// <summary>
        /// General information about the lithology and shows in an interval.
        /// </summary>
        [XmlElement("lithShowInfo")]
        public List<DrillReportLithShowInfo> LithShowInfo { get; set; }
		/// <summary>
        /// General information about equipment failure.
        /// </summary>
        [XmlElement("equipFailureInfo")]
        public List<DrillReportEquipFailureInfo> EquipFailureInfo { get; set; }
		/// <summary>
        /// General information about a well control incident.
        /// </summary>
        [XmlElement("controlIncidentInfo")]
        public List<DrillReportControlIncidentInfo> ControlIncidentInfo { get; set; }
		/// <summary>
        /// General information about a well control incident.
        /// </summary>
        [XmlElement("stratInfo")]
        public List<DrillReportStratInfo> StratInfo { get; set; }
		/// <summary>
        /// General information about a well control incident.
        /// </summary>
        [XmlElement("perfInfo")]
        public List<DrillReportPerfInfo> PerfInfo { get; set; }
		/// <summary>
        /// General information about a gas reading.
        /// </summary>
        [XmlElement("gasReadingInfo")]
        public List<DrillReportGasReadingInfo> GasReadingInfo { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Conventional Core.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_convCore", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Conventional Core.")]
    public partial class ConvCore : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the conventional core. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the conventional core. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Top depth of core interval. 
        /// </summary>
        [XmlElement("mdCoreTop")]
        public MeasuredDepthCoord MDCoreTop { get; set; }
        /// <summary>
        /// Bottom depth of core interval. 
        /// </summary>
        [XmlElement("mdCoreBottom")]
        public MeasuredDepthCoord MDCoreBottom { get; set; }
        /// <summary>
        /// Date and time when coring commenced (cutting new core). 
        /// </summary>
        [XmlElement("dTimCoreStart")]
        public DateTime? DateTimeCoreStart {
            get {
                return dTimCoreStartField;
            } 
            set { 
                dTimCoreStartField = value;
                this.DateTimeCoreStartSpecified = true;
            }
        }

        private DateTime? dTimCoreStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCoreStartSpecified { get; set; }
        /// <summary>
        /// Date and time when coring complete (end of cutting new core). 
        /// </summary>
        [XmlElement("dTimCoreEnd")]
        public DateTime? DateTimeCoreEnd {
            get {
                return dTimCoreEndField;
            } 
            set { 
                dTimCoreEndField = value;
                this.DateTimeCoreEndSpecified = true;
            }
        }

        private DateTime? dTimCoreEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCoreEndSpecified { get; set; }
        /// <summary>
        /// Manufacturer core reference. 
        /// </summary>
        [XmlElement("coreReference")]
        public String CoreReference { get; set; }
        /// <summary>
        /// Name of coring contractor. 
        /// </summary>
        [XmlElement("coringContractor")]
        public String CoringContractor { get; set; }
        /// <summary>
        /// Name of analysis company. 
        /// </summary>
        [XmlElement("analysisContractor")]
        public String AnalysisContractor { get; set; }
        /// <summary>
        /// Core barrel type. 
        /// </summary>
        [XmlElement("coreBarrel")]
        public String CoreBarrel { get; set; }
        /// <summary>
        /// Inner barrel used? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("innerBarrelUsed")]
        public Boolean? InnerBarrelUsed {
            get {
                return innerBarrelUsedField;
            } 
            set { 
                innerBarrelUsedField = value;
                this.InnerBarrelUsedSpecified = true;
            }
        }

        private Boolean? innerBarrelUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean InnerBarrelUsedSpecified { get; set; }
        /// <summary>
        /// Core inner barrel type. 
        /// </summary>
        [XmlElement("innerBarrelType")]
        public String InnerBarrelType { get; set; }
        /// <summary>
        /// Length of core barrel. 
        /// </summary>
        [XmlElement("lenBarrel")]
        public LengthMeasure LenBarrel { get; set; }
        /// <summary>
        /// Core bit type. 
        /// </summary>
        [XmlElement("coreBitType")]
        public String CoreBitType { get; set; }
        /// <summary>
        /// Core bit outer diameter. 
        /// </summary>
        [XmlElement("diaBit")]
        public LengthMeasure DiaBit { get; set; }
        /// <summary>
        /// Core cut diameter. 
        /// </summary>
        [XmlElement("diaCore")]
        public LengthMeasure DiaCore { get; set; }
        /// <summary>
        /// Cored interval length. 
        /// </summary>
        [XmlElement("lenCored")]
        public LengthMeasure LenCored { get; set; }
        /// <summary>
        /// Length of core recovered. 
        /// </summary>
        [XmlElement("lenRecovered")]
        public LengthMeasure LenRecovered { get; set; }
        /// <summary>
        /// Calculate recovery (commonly in percent). 
        /// </summary>
        [XmlElement("recoverPc")]
        public VolumePerVolumeMeasure RecoverPercent { get; set; }
        /// <summary>
        /// Wellbore inclination over cored interval. 
        /// </summary>
        [XmlElement("inclHole")]
        public PlaneAngleMeasure InclHole { get; set; }
        /// <summary>
        /// True if the core can be re-oriented in space after extraction when a tool-face has been used. Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("coreOrientation")]
        public Boolean? CoreOrientation {
            get {
                return coreOrientationField;
            } 
            set { 
                coreOrientationField = value;
                this.CoreOrientationSpecified = true;
            }
        }

        private Boolean? coreOrientationField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CoreOrientationSpecified { get; set; }
        /// <summary>
        /// Method to catch core - fiberglass barrel, conventional, etc. 
        /// </summary>
        [XmlElement("coreMethod")]
        public String CoreMethod { get; set; }
        /// <summary>
        /// Preservation method description. 
        /// </summary>
        [XmlElement("coreTreatmentMethod")]
        public String CoreTreatmentMethod { get; set; }
        /// <summary>
        /// Mud type in use when cutting core. 
        /// </summary>
        [XmlElement("coreFluidUsed")]
        public String CoreFluidUsed { get; set; }
        /// <summary>
        /// Name of formation penetrated. 
        /// </summary>
        [XmlElement("nameFormation")]
        public String NameFormation { get; set; }
        /// <summary>
        /// Set of Geological intervals, descriptions, gas readings for the cored interval. 
        /// </summary>
        [XmlElement("geologyInterval")]
        public GeologyInterval GeologyInterval { get; set; }
        /// <summary>
        /// General core description. 
        /// </summary>
        [XmlElement("coreDescription")]
        public String CoreDescription { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines detail changes of an object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_changeHistory", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Defines detail changes of an object.")]
    public partial class ChangeHistory : Object 
    {

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("dTimChange")]
        public DateTime? DateTimeChange { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("changeType")]
        public ChangeInfoType? ChangeType { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("objectGrowingState")]
        public Boolean? ObjectGrowingState {
            get {
                return objectGrowingStateField;
            } 
            set { 
                objectGrowingStateField = value;
                this.ObjectGrowingStateSpecified = true;
            }
        }

        private Boolean? objectGrowingStateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ObjectGrowingStateSpecified { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("updatedHeader")]
        public Boolean? UpdatedHeader {
            get {
                return updatedHeaderField;
            } 
            set { 
                updatedHeaderField = value;
                this.UpdatedHeaderSpecified = true;
            }
        }

        private Boolean? updatedHeaderField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean UpdatedHeaderSpecified { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("changeInfo")]
        public String ChangeInfo { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("startIndex")]
        public GenericMeasure StartIndex { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("endIndex")]
        public GenericMeasure EndIndex { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("startDateTimeIndex")]
        public DateTime? StartDateTimeIndex {
            get {
                return startDateTimeIndexField;
            } 
            set { 
                startDateTimeIndexField = value;
                this.StartDateTimeIndexSpecified = true;
            }
        }

        private DateTime? startDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StartDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("endDateTimeIndex")]
        public DateTime? EndDateTimeIndex {
            get {
                return endDateTimeIndexField;
            } 
            set { 
                endDateTimeIndexField = value;
                this.EndDateTimeIndexSpecified = true;
            }
        }

        private DateTime? endDateTimeIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EndDateTimeIndexSpecified { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("mnemonics")]
        public String Minemonics { get; set; }
		/// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML attachment object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_changeLog", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML attachment object.")]
    public partial class ChangeLog : Object 
    {

        /// <summary>
        /// Human recognizable contextual name for a Well. This should match the value of element nameWell in the changed object. If the changed object is well then this value will not be defined. This is required for objects which are a direct or indirect child of a well.
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable contextual name for the Wellbore. This should match the value of element nameWellbore in the changed object. If the changed object is well or wellbore then this value will not be defined. This is required for objects which are a direct or indirect child of a wellbore.
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable contextual name for the object. This should match the value of the name element in the changed object.
        /// </summary>
        [XmlElement("nameObject")]
        public String NameObject { get; set; }
        /// <summary>
        /// The schema name of the (singular) object that changed. For example, "trajectory".
        /// </summary>
        [XmlElement("objectType")]
        public String ObjectType { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("sourceName")]
        public String SourceName { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("lastChangeType")]
        public ChangeInfoType? LastChangeType { get; set; }
        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("lastChangeInfo")]
        public String LastChangeInfo { get; set; }
		/// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
        [XmlElement("changeHistory")]
        public List<ChangeHistory> ChangeHistory { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This should match the value of the uidWell attribute in the changed object. If the changed object is well then this value will not be defined. This is required for objects which are a direct or indirect child of a well.
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This should match the value of the uidWellbore attribute in the changed object. If the changed object is well or wellbore then this value will not be defined. This is required for objects which are a direct or indirect child of a well or wellbore.
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		/// <summary>
        /// Unique identifier for the changed object. This should match the value of the uid attribute in the changed object.
        /// </summary>
        [XmlAttribute("uidObject")]
        public String UidObject { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Cement Test Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementTest", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("WITSML - Cement Test Component Schema ")]
    public partial class CementTest : Object 
    {

        /// <summary>
        /// Test pressure. 
        /// </summary>
        [XmlElement("presTest")]
        public PressureMeasure PresTest { get; set; }
        /// <summary>
        /// Elapsed tome to perform the test. 
        /// </summary>
        [XmlElement("eTimTest")]
        public TimeMeasure ETimeTest { get; set; }
        /// <summary>
        /// Cement found between shoe and collar? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cementShoeCollar")]
        public Boolean? CementShoeCollar {
            get {
                return cementShoeCollarField;
            } 
            set { 
                cementShoeCollarField = value;
                this.CementShoeCollarSpecified = true;
            }
        }

        private Boolean? cementShoeCollarField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CementShoeCollarSpecified { get; set; }
        /// <summary>
        /// Cement evaluation tool run. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cetRun")]
        public Boolean? CetRun {
            get {
                return cetRunField;
            } 
            set { 
                cetRunField = value;
                this.CetRunSpecified = true;
            }
        }

        private Boolean? cetRunField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CetRunSpecified { get; set; }
        /// <summary>
        /// Cement evaluation tool bond quality. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cetBondQual")]
        public Boolean? CetBondQual {
            get {
                return cetBondQualField;
            } 
            set { 
                cetBondQualField = value;
                this.CetBondQualSpecified = true;
            }
        }

        private Boolean? cetBondQualField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CetBondQualSpecified { get; set; }
        /// <summary>
        /// Cement bond log run? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cblRun")]
        public Boolean? CblRun {
            get {
                return cblRunField;
            } 
            set { 
                cblRunField = value;
                this.CblRunSpecified = true;
            }
        }

        private Boolean? cblRunField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CblRunSpecified { get; set; }
        /// <summary>
        /// Cement bond log quality indication. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cblBondQual")]
        public Boolean? CblBondQual {
            get {
                return cblBondQualField;
            } 
            set { 
                cblBondQualField = value;
                this.CblBondQualSpecified = true;
            }
        }

        private Boolean? cblBondQualField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CblBondQualSpecified { get; set; }
        /// <summary>
        /// Cement bond Log under pressure. 
        /// </summary>
        [XmlElement("cblPres")]
        public PressureMeasure CblPres { get; set; }
        /// <summary>
        /// Temperature survey run. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("tempSurvey")]
        public Boolean? TempSurvey {
            get {
                return tempSurveyField;
            } 
            set { 
                tempSurveyField = value;
                this.TempSurveySpecified = true;
            }
        }

        private Boolean? tempSurveyField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TempSurveySpecified { get; set; }
        /// <summary>
        /// Hours before logging run after cement run. 
        /// </summary>
        [XmlElement("eTimCementLog")]
        public TimeMeasure ETimeCementLog { get; set; }
        /// <summary>
        /// PIT/LOT formation breakdown gradient or absolute pressure. 
        /// </summary>
        [XmlElement("formPit")]
        public ForcePerVolumeMeasure FormPit { get; set; }
        /// <summary>
        /// Tool name for PIT. 
        /// </summary>
        [XmlElement("toolCompanyPit")]
        public String ToolCompanyPit { get; set; }
        /// <summary>
        /// Hours between end of cement job-start of PIT. 
        /// </summary>
        [XmlElement("eTimPitStart")]
        public TimeMeasure ETimePitStart { get; set; }
        /// <summary>
        /// Measured depth at top of cement. 
        /// </summary>
        [XmlElement("mdCementTop")]
        public MeasuredDepthCoord MDCementTop { get; set; }
        /// <summary>
        /// Method to determine cement top. 
        /// </summary>
        [XmlElement("topCementMethod")]
        public String TopCementMethod { get; set; }
        /// <summary>
        /// Is the top of cement sufficient? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("tocOK")]
        public Boolean? TocOK {
            get {
                return tocOKField;
            } 
            set { 
                tocOKField = value;
                this.TocOKSpecified = true;
            }
        }

        private Boolean? tocOKField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TocOKSpecified { get; set; }
        /// <summary>
        /// Job rating. 
        /// </summary>
        [XmlElement("jobRating")]
        public String JobRating { get; set; }
        /// <summary>
        /// Remedial cement required. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("remedialCement")]
        public Boolean? RemedialCement {
            get {
                return remedialCementField;
            } 
            set { 
                remedialCementField = value;
                this.RemedialCementSpecified = true;
            }
        }

        private Boolean? remedialCementField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean RemedialCementSpecified { get; set; }
        /// <summary>
        /// Number of remedials. 
        /// </summary>
        [XmlElement("numRemedial")]
        public Int16? NumRemedial {
            get {
                return numRemedialField;
            } 
            set { 
                numRemedialField = value;
                this.NumRemedialSpecified = true;
            }
        }

        private Int16? numRemedialField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumRemedialSpecified { get; set; }
        /// <summary>
        /// Method used to determine if cement job unsuccessful. 
        /// </summary>
        [XmlElement("failureMethod")]
        public String FailureMethod { get; set; }
        /// <summary>
        /// The distance to the top of the liner. 
        /// </summary>
        [XmlElement("linerTop")]
        public LengthMeasure LinerTop { get; set; }
        /// <summary>
        /// Liner overlap length. 
        /// </summary>
        [XmlElement("linerLap")]
        public LengthMeasure LinerLap { get; set; }
        /// <summary>
        /// Hours before liner top test. 
        /// </summary>
        [XmlElement("eTimBeforeTest")]
        public TimeMeasure ETimeBeforeTest { get; set; }
        /// <summary>
        /// Test negative tool for Liner top seal. 
        /// </summary>
        [XmlElement("testNegativeTool")]
        public String TestNegativeTool { get; set; }
        /// <summary>
        /// Equivalent mud weight. Negative Test? 
        /// </summary>
        [XmlElement("testNegativeEmw")]
        public DensityMeasure TestNegativeEmw { get; set; }
        /// <summary>
        /// Test Positive Tool for liner top seal. 
        /// </summary>
        [XmlElement("testPositiveTool")]
        public String TestPositiveTool { get; set; }
        /// <summary>
        /// Equivalent mud weight. Positive Test or absolute pressure . 
        /// </summary>
        [XmlElement("testPositiveEmw")]
        public DensityMeasure TestPositiveEmw { get; set; }
        /// <summary>
        /// Cement found on tool? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cementFoundOnTool")]
        public Boolean? CementFoundOnTool {
            get {
                return cementFoundOnToolField;
            } 
            set { 
                cementFoundOnToolField = value;
                this.CementFoundOnToolSpecified = true;
            }
        }

        private Boolean? cementFoundOnToolField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CementFoundOnToolSpecified { get; set; }
        /// <summary>
        /// Measured depth to diverter tool. 
        /// </summary>
        [XmlElement("mdDVTool")]
        public MeasuredDepthCoord MDDVTool { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cement Additive Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementAdditive", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Cement Additive Component Schema ")]
    public partial class CementAdditive : Object 
    {

        /// <summary>
        /// Additive name. 
        /// </summary>
        [XmlElement("nameAdd")]
        public String NameAdd { get; set; }
        /// <summary>
        /// Additive type or Function (Retarder, Visosifier, Weighting agent). 
        /// </summary>
        [XmlElement("typeAdd")]
        public String TypeAdd { get; set; }
        /// <summary>
        /// Wet or Dry. 
        /// </summary>
        [XmlElement("formAdd")]
        public String FormAdd { get; set; }
        /// <summary>
        /// Additive density. 
        /// </summary>
        [XmlElement("densAdd")]
        public DensityMeasure DensAdd { get; set; }
        /// <summary>
        /// ConcentrationType: %BWOC (%By weight of Cement), %BWOB (%By weight of blend), %BWOW (%By weight of water), %BWOBF (%By weight of base fluid) . If you set this property, you must also set Concentration.
        /// </summary>
        [XmlElement("typeConc")]
        public String TypeConc {
            get {
                return typeConcField;
            } 
            set { 
                if (wtSackFieldSpecified) throw new Exception("Cannot set property TypeConc when property WeightSack is already set");
                if (volSackFieldSpecified) throw new Exception("Cannot set property TypeConc when property VolSack is already set");
                typeConcField = value;
                typeConcFieldSpecified = true;
            }
        }

        private String typeConcField; 
        private bool typeConcFieldSpecified = false; 

        /// <summary>
        /// Concentration Amount: unit type depends of typeConc. . If you set this property, you must also set TypeConc.
        /// </summary>
        [XmlElement("concentration")]
        public MassConcentrationMeasure Concentration {
            get {
                return concentrationField;
            } 
            set { 
                if (wtSackFieldSpecified) throw new Exception("Cannot set property Concentration when property WeightSack is already set");
                if (volSackFieldSpecified) throw new Exception("Cannot set property Concentration when property VolSack is already set");
                concentrationField = value;
                concentrationFieldSpecified = true;
            }
        }

        private MassConcentrationMeasure concentrationField; 
        private bool concentrationFieldSpecified = false; 

        /// <summary>
        /// Concentration in terms of weight per sack.
        /// </summary>
        [XmlElement("wtSack")]
        public MassMeasure WeightSack {
            get {
                return wtSackField;
            } 
            set { 
                if (typeConcFieldSpecified) throw new Exception("Cannot set property WeightSack when property TypeConc is already set");
                if (concentrationFieldSpecified) throw new Exception("Cannot set property WeightSack when property Concentration is already set");
                if (volSackFieldSpecified) throw new Exception("Cannot set property WeightSack when property VolSack is already set");
                wtSackField = value;
                wtSackFieldSpecified = true;
            }
        }

        private MassMeasure wtSackField; 
        private bool wtSackFieldSpecified = false; 

        /// <summary>
        /// Concentration in terms of volume per sack.
        /// </summary>
        [XmlElement("volSack")]
        public VolumeMeasure VolSack {
            get {
                return volSackField;
            } 
            set { 
                if (typeConcFieldSpecified) throw new Exception("Cannot set property VolSack when property TypeConc is already set");
                if (concentrationFieldSpecified) throw new Exception("Cannot set property VolSack when property Concentration is already set");
                if (wtSackFieldSpecified) throw new Exception("Cannot set property VolSack when property WeightSack is already set");
                volSackField = value;
                volSackFieldSpecified = true;
            }
        }

        private VolumeMeasure volSackField; 
        private bool volSackFieldSpecified = false; 


        /// <summary>
        /// Additive Amount. 
        /// </summary>
        [XmlElement("additive")]
        public MassMeasure Additive { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cement Pump Schedule Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementPumpSchedule", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Cement Pump Schedule Component Schema ")]
    public partial class CementPumpSchedule : Object 
    {

        /// <summary>
        /// (Elapsed time period during the fluid is pumped. 
        /// </summary>
        [XmlElement("eTimPump")]
        public TimeMeasure ETimePump { get; set; }
        /// <summary>
        /// Rate fluid is pumped. 0 means it is a pause. 
        /// </summary>
        [XmlElement("ratePump")]
        public VolumeFlowRateMeasure RatePump { get; set; }
        /// <summary>
        /// Volume pumped = eTimPump * ratePump. 
        /// </summary>
        [XmlElement("volPump")]
        public VolumeMeasure VolPump { get; set; }
        /// <summary>
        /// Number of pump strokes for the fluid to be pumped (assumes pump output known). 
        /// </summary>
        [XmlElement("strokePump")]
        public Int16? StrokePump {
            get {
                return strokePumpField;
            } 
            set { 
                strokePumpField = value;
                this.StrokePumpSpecified = true;
            }
        }

        private Int16? strokePumpField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StrokePumpSpecified { get; set; }
        /// <summary>
        /// Back pressure applied during pumping stage. 
        /// </summary>
        [XmlElement("presBack")]
        public PressureMeasure PresBack { get; set; }
        /// <summary>
        /// If shutdown event, the elapsed time duration. 
        /// </summary>
        [XmlElement("eTimShutdown")]
        public TimeMeasure ETimeShutdown { get; set; }
        /// <summary>
        /// Comments and Remarks. 
        /// </summary>
        [XmlElement("comments")]
        public String Comments { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cementing Fluid Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementingFluid", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Cementing Fluid Component Schema ")]
    public partial class CementingFluid : Object 
    {

        /// <summary>
        /// Fluid type: Mud, Wash, Spacer, Slurry. 
        /// </summary>
        [XmlElement("typeFluid")]
        public String TypeFluid { get; set; }
        /// <summary>
        /// Fluid Index: 1: first fluid pumped (=original mud), (last-1)=Tail cement, last= displacement mud 
        /// </summary>
        [XmlElement("fluidIndex")]
        public Int16? FluidIndex {
            get {
                return fluidIndexField;
            } 
            set { 
                fluidIndexField = value;
                this.FluidIndexSpecified = true;
            }
        }

        private Int16? fluidIndexField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FluidIndexSpecified { get; set; }
        /// <summary>
        /// Fluid description. 
        /// </summary>
        [XmlElement("descFluid")]
        public String DescFluid { get; set; }
        /// <summary>
        /// Purpose description. 
        /// </summary>
        [XmlElement("purpose")]
        public String Purpose { get; set; }
        /// <summary>
        /// Slurry class. 
        /// </summary>
        [XmlElement("classSlurryDryBlend")]
        public String ClassSlurryDryBlend { get; set; }
        /// <summary>
        /// Measured depth at top of slurry placement. 
        /// </summary>
        [XmlElement("mdFluidTop")]
        public MeasuredDepthCoord MDFluidTop { get; set; }
        /// <summary>
        /// Measured depth at bottom of slurry placement. 
        /// </summary>
        [XmlElement("mdFluidBottom")]
        public MeasuredDepthCoord MDFluidBottom { get; set; }
        /// <summary>
        /// Water Source Description. 
        /// </summary>
        [XmlElement("sourceWater")]
        public String SourceWater { get; set; }
        /// <summary>
        /// Water volume. 
        /// </summary>
        [XmlElement("volWater")]
        public VolumeMeasure VolWater { get; set; }
        /// <summary>
        /// Volume of cement. 
        /// </summary>
        [XmlElement("volCement")]
        public VolumeMeasure VolCement { get; set; }
        /// <summary>
        /// Mix Water Ratio. 
        /// </summary>
        [XmlElement("ratioMixWater")]
        public SpecificVolumeMeasure RatioMixWater { get; set; }
        /// <summary>
        /// Fluid/Slurry Volume. 
        /// </summary>
        [XmlElement("volFluid")]
        public VolumeMeasure VolFluid { get; set; }
        /// <summary>
        /// Set of (Time / Rate / Back Pressure). 
        /// </summary>
        [XmlElement("cementPumpSchedule")]
        public CementPumpSchedule CementPumpSchedule { get; set; }
        /// <summary>
        /// Excess Percent. 
        /// </summary>
        [XmlElement("excessPc")]
        public VolumePerVolumeMeasure ExcessPercent { get; set; }
        /// <summary>
        /// Slurry Yield. 
        /// </summary>
        [XmlElement("volYield")]
        public SpecificVolumeMeasure VolYield { get; set; }
        /// <summary>
        /// Fluid density. 
        /// </summary>
        [XmlElement("density")]
        public DensityMeasure Density { get; set; }
        /// <summary>
        /// Equals 1 - Porosity. 
        /// </summary>
        [XmlElement("solidVolumeFraction")]
        public VolumePerVolumeMeasure SolidVolumeFraction { get; set; }
        /// <summary>
        /// Volume Pumped. 
        /// </summary>
        [XmlElement("volPumped")]
        public VolumeMeasure VolPumped { get; set; }
        /// <summary>
        /// Other Volume. 
        /// </summary>
        [XmlElement("volOther")]
        public VolumeMeasure VolOther { get; set; }
        /// <summary>
        /// Newtonian/Bingham/Power Law/Herschel Bulkley. 
        /// </summary>
        [XmlElement("fluidRheologicalModel")]
        public String FluidRheologicalModel { get; set; }
        /// <summary>
        /// Viscosity (Newtonian) or Plastic Viscosity if Bingham. 
        /// </summary>
        [XmlElement("vis")]
        public DynamicViscosityMeasure Vis { get; set; }
        /// <summary>
        /// Yield point (Bingham and Herschel Bulkley models). 
        /// </summary>
        [XmlElement("yp")]
        public PressureMeasure YP { get; set; }
        /// <summary>
        /// Power Law index (Power Law and HB). 
        /// </summary>
        [XmlElement("n")]
        public DimensionlessMeasure N { get; set; }
        /// <summary>
        /// Consistency index (Power Law and HB). 
        /// </summary>
        [XmlElement("k")]
        public DimensionlessMeasure K { get; set; }
        /// <summary>
        /// Gel reading after 10 seconds. 
        /// </summary>
        [XmlElement("gel10SecReading")]
        public PlaneAngleMeasure Gel10SecReading { get; set; }
        /// <summary>
        /// Gel strength after 10 seconds. 
        /// </summary>
        [XmlElement("gel10SecStrength")]
        public PressureMeasure Gel10SecStrength { get; set; }
        /// <summary>
        /// Gel reading after 1 minute. 
        /// </summary>
        [XmlElement("gel1MinReading")]
        public PlaneAngleMeasure Gel1MinReading { get; set; }
        /// <summary>
        /// Gel strength after 1 minute. 
        /// </summary>
        [XmlElement("gel1MinStrength")]
        public PressureMeasure Gel1MinStrength { get; set; }
        /// <summary>
        /// Gel reading after 10 minutes. 
        /// </summary>
        [XmlElement("gel10MinReading")]
        public PlaneAngleMeasure Gel10MinReading { get; set; }
        /// <summary>
        /// Gel strength after 10 minutes. 
        /// </summary>
        [XmlElement("gel10MinStrength")]
        public PressureMeasure Gel10MinStrength { get; set; }
        /// <summary>
        /// Type of base fluid: Fresh water, Sea water, Brine, Brackish water. 
        /// </summary>
        [XmlElement("typeBaseFluid")]
        public String TypeBaseFluid { get; set; }
        /// <summary>
        /// Density of base fluid. 
        /// </summary>
        [XmlElement("densBaseFluid")]
        public DensityMeasure DensBaseFluid { get; set; }
        /// <summary>
        /// Name of dry blend. 
        /// </summary>
        [XmlElement("dryBlendName")]
        public String DryBlendName { get; set; }
        /// <summary>
        /// Description of dry blend. 
        /// </summary>
        [XmlElement("dryBlendDescription")]
        public String DryBlendDescription { get; set; }
        /// <summary>
        /// Mass of dry blend: the blend is made of different solid additives: the volume is not constant. 
        /// </summary>
        [XmlElement("massDryBlend")]
        public MassMeasure MassDryBlend { get; set; }
        /// <summary>
        /// Density of Dry blend. 
        /// </summary>
        [XmlElement("densDryBlend")]
        public DensityMeasure DensDryBlend { get; set; }
        /// <summary>
        /// Weight of a sack of dry blend. 
        /// </summary>
        [XmlElement("massSackDryBlend")]
        public MassMeasure MassSackDryBlend { get; set; }
		/// <summary>
        /// Additives can be added in slurry but also in spacers, washes, mud. 
        /// </summary>
        [XmlElement("cementAdditive")]
        public List<CementAdditive> CementAdditive { get; set; }
        /// <summary>
        /// Foam used indicator. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("foamUsed")]
        public Boolean? FoamUsed {
            get {
                return foamUsedField;
            } 
            set { 
                foamUsedField = value;
                this.FoamUsedSpecified = true;
            }
        }

        private Boolean? foamUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FoamUsedSpecified { get; set; }
        /// <summary>
        /// Gas type used for foam job. 
        /// </summary>
        [XmlElement("typeGasFoam")]
        public String TypeGasFoam { get; set; }
        /// <summary>
        /// Volume of gas used for foam job. 
        /// </summary>
        [XmlElement("volGasFoam")]
        public VolumeMeasure VolGasFoam { get; set; }
        /// <summary>
        /// Constant gas ratio method ratio 
        /// </summary>
        [XmlElement("ratioConstGasMethodAv")]
        public VolumePerVolumeMeasure RatioConstGasMethodAverage { get; set; }
        /// <summary>
        /// Constant gas ratio method average density. 
        /// </summary>
        [XmlElement("densConstGasMethod")]
        public DensityMeasure DensConstGasMethod { get; set; }
        /// <summary>
        /// Constant gas ratio method initial method ratio. 
        /// </summary>
        [XmlElement("ratioConstGasMethodStart")]
        public VolumePerVolumeMeasure RatioConstGasMethodStart { get; set; }
        /// <summary>
        /// Constant gas ratio method final method ratio. 
        /// </summary>
        [XmlElement("ratioConstGasMethodEnd")]
        public VolumePerVolumeMeasure RatioConstGasMethodEnd { get; set; }
        /// <summary>
        /// Constant gas ratio method average density. 
        /// </summary>
        [XmlElement("densConstGasFoam")]
        public DensityMeasure DensConstGasFoam { get; set; }
        /// <summary>
        /// Test thickening time. 
        /// </summary>
        [XmlElement("eTimThickening")]
        public TimeMeasure ETimeThickening { get; set; }
        /// <summary>
        /// Test thickening temperature. 
        /// </summary>
        [XmlElement("tempThickening")]
        public ThermodynamicTemperatureMeasure TempThickening { get; set; }
        /// <summary>
        /// Test thickening pressure. 
        /// </summary>
        [XmlElement("presTestThickening")]
        public PressureMeasure PresTestThickening { get; set; }
        /// <summary>
        /// Test thickening consistency/slurry viscosity - Bearden Consistency (Bc) 0 to 100. 
        /// </summary>
        [XmlElement("consTestThickening")]
        public DimensionlessMeasure ConsTestThickening { get; set; }
        /// <summary>
        /// Test free water na: = mL/250ML. 
        /// </summary>
        [XmlElement("pcFreeWater")]
        public VolumePerVolumeMeasure PercentFreeWater { get; set; }
        /// <summary>
        /// Test free water temperature. 
        /// </summary>
        [XmlElement("tempFreeWater")]
        public ThermodynamicTemperatureMeasure TempFreeWater { get; set; }
        /// <summary>
        /// Test fluid loss. 
        /// </summary>
        [XmlElement("volTestFluidLoss")]
        public VolumeMeasure VolTestFluidLoss { get; set; }
        /// <summary>
        /// Test fluid loss temperature. 
        /// </summary>
        [XmlElement("tempFluidLoss")]
        public ThermodynamicTemperatureMeasure TempFluidLoss { get; set; }
        /// <summary>
        /// Test Fluid loss pressure. 
        /// </summary>
        [XmlElement("presTestFluidLoss")]
        public PressureMeasure PresTestFluidLoss { get; set; }
        /// <summary>
        /// Test Fluid loss: dehydrating test period, used to compute the API Fluid Loss. 
        /// </summary>
        [XmlElement("timeFluidLoss")]
        public TimeMeasure TimeFluidLoss { get; set; }
        /// <summary>
        /// API Fluid Loss = 2 * volTestFluidLoss * SQRT(30/timefluidloss). 
        /// </summary>
        [XmlElement("volAPIFluidLoss")]
        public VolumeMeasure VolAPIFluidLoss { get; set; }
        /// <summary>
        /// Compressive strength time 1. 
        /// </summary>
        [XmlElement("eTimComprStren1")]
        public TimeMeasure ETimeComprStren1 { get; set; }
        /// <summary>
        /// Compressive strength time 2. 
        /// </summary>
        [XmlElement("eTimComprStren2")]
        public TimeMeasure ETimeComprStren2 { get; set; }
        /// <summary>
        /// Compressive strength pressure 1. 
        /// </summary>
        [XmlElement("presComprStren1")]
        public PressureMeasure PresComprStren1 { get; set; }
        /// <summary>
        /// Compressive strength pressure 2. 
        /// </summary>
        [XmlElement("presComprStren2")]
        public PressureMeasure PresComprStren2 { get; set; }
        /// <summary>
        /// Compressive strength temperature 1. 
        /// </summary>
        [XmlElement("tempComprStren1")]
        public ThermodynamicTemperatureMeasure TempComprStren1 { get; set; }
        /// <summary>
        /// Compressive strength temperature 2. 
        /// </summary>
        [XmlElement("tempComprStren2")]
        public ThermodynamicTemperatureMeasure TempComprStren2 { get; set; }
        /// <summary>
        /// Slurry density at pressure. 
        /// </summary>
        [XmlElement("densAtPres")]
        public DensityMeasure DensAtPres { get; set; }
        /// <summary>
        /// Volume reserved. 
        /// </summary>
        [XmlElement("volReserved")]
        public VolumeMeasure VolReserved { get; set; }
        /// <summary>
        /// Total Slurry Volume. 
        /// </summary>
        [XmlElement("volTotSlurry")]
        public VolumeMeasure VolTotSlurry { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cement Stage Component Schema 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementStage", Namespace="http://www.witsml.org/schemas/1series")]
    [Description(" WITSML - Cement Stage Component Schema ")]
    public partial class CementStage : Object 
    {

        /// <summary>
        /// Stage number. 
        /// </summary>
        [XmlElement("numStage")]
        public Int16? NumStage { get; set; }
        /// <summary>
        /// Stage type. 
        /// </summary>
        [XmlElement("typeStage")]
        public String TypeStage { get; set; }
        /// <summary>
        /// Date and time when mixing started. 
        /// </summary>
        [XmlElement("dTimMixStart")]
        public DateTime? DateTimeMixStart {
            get {
                return dTimMixStartField;
            } 
            set { 
                dTimMixStartField = value;
                this.DateTimeMixStartSpecified = true;
            }
        }

        private DateTime? dTimMixStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeMixStartSpecified { get; set; }
        /// <summary>
        /// Datetime at start of pumping cement. 
        /// </summary>
        [XmlElement("dTimPumpStart")]
        public DateTime? DateTimePumpStart {
            get {
                return dTimPumpStartField;
            } 
            set { 
                dTimPumpStartField = value;
                this.DateTimePumpStartSpecified = true;
            }
        }

        private DateTime? dTimPumpStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePumpStartSpecified { get; set; }
        /// <summary>
        /// Datetime at end of pumping cement. 
        /// </summary>
        [XmlElement("dTimPumpEnd")]
        public DateTime? DateTimePumpEnd {
            get {
                return dTimPumpEndField;
            } 
            set { 
                dTimPumpEndField = value;
                this.DateTimePumpEndSpecified = true;
            }
        }

        private DateTime? dTimPumpEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePumpEndSpecified { get; set; }
        /// <summary>
        /// Date and time when displacing cement started. 
        /// </summary>
        [XmlElement("dTimDisplaceStart")]
        public DateTime? DateTimeDisplaceStart {
            get {
                return dTimDisplaceStartField;
            } 
            set { 
                dTimDisplaceStartField = value;
                this.DateTimeDisplaceStartSpecified = true;
            }
        }

        private DateTime? dTimDisplaceStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeDisplaceStartSpecified { get; set; }
        /// <summary>
        /// Measured depth at top of interval. 
        /// </summary>
        [XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop { get; set; }
        /// <summary>
        /// Measured depth of base of cement. 
        /// </summary>
        [XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom { get; set; }
        /// <summary>
        /// Excess volume. 
        /// </summary>
        [XmlElement("volExcess")]
        public VolumeMeasure VolExcess { get; set; }
        /// <summary>
        /// Average displacement rate. 
        /// </summary>
        [XmlElement("flowrateDisplaceAv")]
        public VolumeFlowRateMeasure FlowrateDisplaceAverage { get; set; }
        /// <summary>
        /// Maximum displacement rate. 
        /// </summary>
        [XmlElement("flowrateDisplaceMx")]
        public VolumeFlowRateMeasure FlowrateDisplaceMax { get; set; }
        /// <summary>
        /// Final displacement pressure. 
        /// </summary>
        [XmlElement("presDisplace")]
        public PressureMeasure PresDisplace { get; set; }
        /// <summary>
        /// Volume of returns. 
        /// </summary>
        [XmlElement("volReturns")]
        public VolumeMeasure VolReturns { get; set; }
        /// <summary>
        /// Mud circulation elapsed time before the job. 
        /// </summary>
        [XmlElement("eTimMudCirculation")]
        public TimeMeasure ETimeMudCirculation { get; set; }
        /// <summary>
        /// Rate mud circulated during stage. 
        /// </summary>
        [XmlElement("flowrateMudCirc")]
        public VolumeFlowRateMeasure FlowrateMudCirc { get; set; }
        /// <summary>
        /// Mud circulation pressure. 
        /// </summary>
        [XmlElement("presMudCirc")]
        public PressureMeasure PresMudCirc { get; set; }
        /// <summary>
        /// Final displacement pump rate. 
        /// </summary>
        [XmlElement("flowrateEnd")]
        public VolumeFlowRateMeasure FlowrateEnd { get; set; }
        /// <summary>
        /// Displaced Mud, washes and spacers, cements, displacement mud. 
        /// </summary>
        [XmlElement("cementingFluid")]
        public CementingFluid CementingFluid { get; set; }
        /// <summary>
        /// Annular flow at the end of displacement. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("afterFlowAnn")]
        public Boolean? AfterFlowAnn {
            get {
                return afterFlowAnnField;
            } 
            set { 
                afterFlowAnnField = value;
                this.AfterFlowAnnSpecified = true;
            }
        }

        private Boolean? afterFlowAnnField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AfterFlowAnnSpecified { get; set; }
        /// <summary>
        /// Squeeze objective. 
        /// </summary>
        [XmlElement("squeezeObj")]
        public String SqueezeObj { get; set; }
        /// <summary>
        /// Squeeze obtained. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("squeezeObtained")]
        public Boolean? SqueezeObtained {
            get {
                return squeezeObtainedField;
            } 
            set { 
                squeezeObtainedField = value;
                this.SqueezeObtainedSpecified = true;
            }
        }

        private Boolean? squeezeObtainedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean SqueezeObtainedSpecified { get; set; }
        /// <summary>
        /// Measured depth of string (multi-stage cement job). 
        /// </summary>
        [XmlElement("mdString")]
        public MeasuredDepthCoord MDString { get; set; }
        /// <summary>
        /// Measured depth of tool (multi-stage cement job. 
        /// </summary>
        [XmlElement("mdTool")]
        public MeasuredDepthCoord MDTool { get; set; }
        /// <summary>
        /// Measured depth of CoilTubing (multi-stage cement job. 
        /// </summary>
        [XmlElement("mdCoilTbg")]
        public MeasuredDepthCoord MDCoilTbg { get; set; }
        /// <summary>
        /// Total volume inside casing. 
        /// </summary>
        [XmlElement("volCsgIn")]
        public VolumeMeasure VolCsgIn { get; set; }
        /// <summary>
        /// Total volume outside casing for this stage placement. 
        /// </summary>
        [XmlElement("volCsgOut")]
        public VolumeMeasure VolCsgOut { get; set; }
        /// <summary>
        /// Tail pipe used? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("tailPipeUsed")]
        public Boolean? TailPipeUsed {
            get {
                return tailPipeUsedField;
            } 
            set { 
                tailPipeUsedField = value;
                this.TailPipeUsedSpecified = true;
            }
        }

        private Boolean? tailPipeUsedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TailPipeUsedSpecified { get; set; }
        /// <summary>
        /// Tail pipe size (diameter). 
        /// </summary>
        [XmlElement("diaTailPipe")]
        public LengthMeasure DiaTailPipe { get; set; }
        /// <summary>
        /// Tail pipe perforated? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("tailPipePerf")]
        public Boolean? TailPipePerf {
            get {
                return tailPipePerfField;
            } 
            set { 
                tailPipePerfField = value;
                this.TailPipePerfSpecified = true;
            }
        }

        private Boolean? tailPipePerfField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TailPipePerfSpecified { get; set; }
        /// <summary>
        /// Tubing pressure at start of job (not coiled tubing). 
        /// </summary>
        [XmlElement("presTbgStart")]
        public PressureMeasure PresTbgStart { get; set; }
        /// <summary>
        /// Tubing pressure at end of job. 
        /// </summary>
        [XmlElement("presTbgEnd")]
        public PressureMeasure PresTbgEnd { get; set; }
        /// <summary>
        /// Casing pressure at start of job. 
        /// </summary>
        [XmlElement("presCsgStart")]
        public PressureMeasure PresCsgStart { get; set; }
        /// <summary>
        /// Casing pressure at end of job. 
        /// </summary>
        [XmlElement("presCsgEnd")]
        public PressureMeasure PresCsgEnd { get; set; }
        /// <summary>
        /// Constant back pressure applied while pumping the job (can be supersede by a back pressure per pumping stage) 
        /// </summary>
        [XmlElement("presBackPressure")]
        public PressureMeasure PresBackPressure { get; set; }
        /// <summary>
        /// Pressure CTU start. 
        /// </summary>
        [XmlElement("presCoilTbgStart")]
        public PressureMeasure PresCoilTbgStart { get; set; }
        /// <summary>
        /// Pressure CTU end 
        /// </summary>
        [XmlElement("presCoilTbgEnd")]
        public PressureMeasure PresCoilTbgEnd { get; set; }
        /// <summary>
        /// Breakdown pressure. 
        /// </summary>
        [XmlElement("presBreakDown")]
        public PressureMeasure PresBreakDown { get; set; }
        /// <summary>
        /// Breakdown rate. 
        /// </summary>
        [XmlElement("flowrateBreakDown")]
        public VolumeFlowRateMeasure FlowrateBreakDown { get; set; }
        /// <summary>
        /// Squeeze pressure average. 
        /// </summary>
        [XmlElement("presSqueezeAv")]
        public PressureMeasure PresSqueezeAverage { get; set; }
        /// <summary>
        /// Squeeze pressure final. 
        /// </summary>
        [XmlElement("presSqueezeEnd")]
        public PressureMeasure PresSqueezeEnd { get; set; }
        /// <summary>
        /// Squeeze pressure held. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("presSqueezeHeld")]
        public Boolean? PresSqueezeHeld {
            get {
                return presSqueezeHeldField;
            } 
            set { 
                presSqueezeHeldField = value;
                this.PresSqueezeHeldSpecified = true;
            }
        }

        private Boolean? presSqueezeHeldField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PresSqueezeHeldSpecified { get; set; }
        /// <summary>
        /// Squeeze pressure left on pipe. 
        /// </summary>
        [XmlElement("presSqueeze")]
        public PressureMeasure PresSqueeze { get; set; }
        /// <summary>
        /// Time pressure held. 
        /// </summary>
        [XmlElement("eTimPresHeld")]
        public TimeMeasure ETimePresHeld { get; set; }
        /// <summary>
        /// Squeeze job average rate. 
        /// </summary>
        [XmlElement("flowrateSqueezeAv")]
        public VolumeFlowRateMeasure FlowrateSqueezeAverage { get; set; }
        /// <summary>
        /// Squeeze job maximum rate. 
        /// </summary>
        [XmlElement("flowrateSqueezeMx")]
        public VolumeFlowRateMeasure FlowrateSqueezeMax { get; set; }
        /// <summary>
        /// Pump rate at start of job. 
        /// </summary>
        [XmlElement("flowratePumpStart")]
        public VolumeFlowRateMeasure FlowratePumpStart { get; set; }
        /// <summary>
        /// Pump rate at end of job. 
        /// </summary>
        [XmlElement("flowratePumpEnd")]
        public VolumeFlowRateMeasure FlowratePumpEnd { get; set; }
        /// <summary>
        /// Pill below plug. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("pillBelowPlug")]
        public Boolean? PillBelowPlug {
            get {
                return pillBelowPlugField;
            } 
            set { 
                pillBelowPlugField = value;
                this.PillBelowPlugSpecified = true;
            }
        }

        private Boolean? pillBelowPlugField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PillBelowPlugSpecified { get; set; }
        /// <summary>
        /// Plug catcher. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("plugCatcher")]
        public Boolean? PlugCatcher {
            get {
                return plugCatcherField;
            } 
            set { 
                plugCatcherField = value;
                this.PlugCatcherSpecified = true;
            }
        }

        private Boolean? plugCatcherField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PlugCatcherSpecified { get; set; }
        /// <summary>
        /// Circulate out measured depth. 
        /// </summary>
        [XmlElement("mdCircOut")]
        public MeasuredDepthCoord MDCircOut { get; set; }
        /// <summary>
        /// Circulate prior to start of job. 
        /// </summary>
        [XmlElement("volCircPrior")]
        public VolumeMeasure VolCircPrior { get; set; }
        /// <summary>
        /// Type of mud in hole. 
        /// </summary>
        [XmlElement("typeOriginalMud")]
        public String TypeOriginalMud { get; set; }
        /// <summary>
        /// Mud density. 
        /// </summary>
        [XmlElement("wtMud")]
        public DensityMeasure WeightMud { get; set; }
        /// <summary>
        /// Funnel viscosity in seconds (in hole at start of job). 
        /// </summary>
        [XmlElement("visFunnelMud")]
        public TimeMeasure VisFunnelMud { get; set; }
        /// <summary>
        /// Plastic viscosity (in hole at start of job). 
        /// </summary>
        [XmlElement("pvMud")]
        public DynamicViscosityMeasure PVMud { get; set; }
        /// <summary>
        /// Yield point (in hole at start of job). 
        /// </summary>
        [XmlElement("ypMud")]
        public PressureMeasure YPMud { get; set; }
        /// <summary>
        /// Gels-10Sec (in hole at start of job). 
        /// </summary>
        [XmlElement("gel10Sec")]
        public PressureMeasure Gel10Sec { get; set; }
        /// <summary>
        /// Gels-10Min (in hole at start of job). 
        /// </summary>
        [XmlElement("gel10Min")]
        public PressureMeasure Gel10Min { get; set; }
        /// <summary>
        /// Bottom hole circulating temperature. 
        /// </summary>
        [XmlElement("tempBHCT")]
        public ThermodynamicTemperatureMeasure TempBHCT { get; set; }
        /// <summary>
        /// Bottom hole temperature static. 
        /// </summary>
        [XmlElement("tempBHST")]
        public ThermodynamicTemperatureMeasure TempBHST { get; set; }
        /// <summary>
        /// Method to estimate excess volume. 
        /// </summary>
        [XmlElement("volExcessMethod")]
        public String VolExcessMethod { get; set; }
        /// <summary>
        /// Mix method. 
        /// </summary>
        [XmlElement("mixMethod")]
        public String MixMethod { get; set; }
        /// <summary>
        /// Method by which density is measured. 
        /// </summary>
        [XmlElement("densMeasBy")]
        public String DensMeasBy { get; set; }
        /// <summary>
        /// Fluid returns. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("annFlowAfter")]
        public Boolean? AnnFlowAfter {
            get {
                return annFlowAfterField;
            } 
            set { 
                annFlowAfterField = value;
                this.AnnFlowAfterSpecified = true;
            }
        }

        private Boolean? annFlowAfterField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean AnnFlowAfterSpecified { get; set; }
        /// <summary>
        /// Top plug used? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("topPlug")]
        public Boolean? TopPlug {
            get {
                return topPlugField;
            } 
            set { 
                topPlugField = value;
                this.TopPlugSpecified = true;
            }
        }

        private Boolean? topPlugField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean TopPlugSpecified { get; set; }
        /// <summary>
        /// Bottom plug used. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("botPlug")]
        public Boolean? BotPlug {
            get {
                return botPlugField;
            } 
            set { 
                botPlugField = value;
                this.BotPlugSpecified = true;
            }
        }

        private Boolean? botPlugField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BotPlugSpecified { get; set; }
        /// <summary>
        /// Amount of bottom plug used. 
        /// </summary>
        [XmlElement("botPlugNumber")]
        public Int16? BotPlugNumber {
            get {
                return botPlugNumberField;
            } 
            set { 
                botPlugNumberField = value;
                this.BotPlugNumberSpecified = true;
            }
        }

        private Int16? botPlugNumberField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean BotPlugNumberSpecified { get; set; }
        /// <summary>
        /// Plug bumped? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("plugBumped")]
        public Boolean? PlugBumped {
            get {
                return plugBumpedField;
            } 
            set { 
                plugBumpedField = value;
                this.PlugBumpedSpecified = true;
            }
        }

        private Boolean? plugBumpedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean PlugBumpedSpecified { get; set; }
        /// <summary>
        /// Pressure prior to bumping plug / pressure at end of displacement 
        /// </summary>
        [XmlElement("presPriorBump")]
        public PressureMeasure PresPriorBump { get; set; }
        /// <summary>
        /// Pressure plug bumped. 
        /// </summary>
        [XmlElement("presBump")]
        public PressureMeasure PresBump { get; set; }
        /// <summary>
        /// Pressure held to. 
        /// </summary>
        [XmlElement("presHeld")]
        public PressureMeasure PresHeld { get; set; }
        /// <summary>
        /// Float held? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("floatHeld")]
        public Boolean? FloatHeld {
            get {
                return floatHeldField;
            } 
            set { 
                floatHeldField = value;
                this.FloatHeldSpecified = true;
            }
        }

        private Boolean? floatHeldField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean FloatHeldSpecified { get; set; }
        /// <summary>
        /// Total mud lost. 
        /// </summary>
        [XmlElement("volMudLost")]
        public VolumeMeasure VolMudLost { get; set; }
        /// <summary>
        /// Displacement fluid name. 
        /// </summary>
        [XmlElement("fluidDisplace")]
        public String FluidDisplace { get; set; }
        /// <summary>
        /// Density of displacement fluid. 
        /// </summary>
        [XmlElement("densDisplaceFluid")]
        public DensityMeasure DensDisplaceFluid { get; set; }
        /// <summary>
        /// Volume of displacement fluid. 
        /// </summary>
        [XmlElement("volDisplaceFluid")]
        public VolumeMeasure VolDisplaceFluid { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    /// <summary>
    /// The non-contextual content of a WITSML Cement Job.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_cementJob", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML Cement Job.")]
    public partial class CementJob : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the cement job. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the cement job. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// Type of cement job. 
        /// </summary>
        [XmlElement("jobType")]
        public CementJobType? JobType {
            get {
                return jobTypeField;
            } 
            set { 
                jobTypeField = value;
                this.JobTypeSpecified = true;
            }
        }

        private CementJobType? jobTypeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean JobTypeSpecified { get; set; }
        /// <summary>
        /// Job configuration. 
        /// </summary>
        [XmlElement("jobConfig")]
        public String JobConfig { get; set; }
        /// <summary>
        /// Date and time of Cement Job. 
        /// </summary>
        [XmlElement("dTimJob")]
        public DateTime? DateTimeJob {
            get {
                return dTimJobField;
            } 
            set { 
                dTimJobField = value;
                this.DateTimeJobSpecified = true;
            }
        }

        private DateTime? dTimJobField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeJobSpecified { get; set; }
        /// <summary>
        /// Name for the cemented string 
        /// </summary>
        [XmlElement("nameCementedString")]
        public String NameCementedString { get; set; }
        /// <summary>
        /// Wellbore Geometry of annulus. 
        /// </summary>
        [XmlElement("holeConfig")]
        public WellboreGeometry HoleConfig { get; set; }
        /// <summary>
        /// Name for the cement work string 
        /// </summary>
        [XmlElement("nameWorkString")]
        public String NameWorkString { get; set; }
        /// <summary>
        /// Name of cementing contractor. 
        /// </summary>
        [XmlElement("contractor")]
        public String Contractor { get; set; }
        /// <summary>
        /// Cementing engineer. 
        /// </summary>
        [XmlElement("cementEngr")]
        public String CementEngr { get; set; }
        /// <summary>
        /// Offshore job? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("offshoreJob")]
        public Boolean? OffshoreJob {
            get {
                return offshoreJobField;
            } 
            set { 
                offshoreJobField = value;
                this.OffshoreJobSpecified = true;
            }
        }

        private Boolean? offshoreJobField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean OffshoreJobSpecified { get; set; }
        /// <summary>
        /// Water depth if offshore. The distance from mean sea level to water bottom. 
        /// </summary>
        [XmlElement("mdWater")]
        public LengthMeasure MDWater { get; set; }
        /// <summary>
        /// Returns to seabed? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
        [XmlElement("returnsToSeabed")]
        public Boolean? ReturnsToSeabed {
            get {
                return returnsToSeabedField;
            } 
            set { 
                returnsToSeabedField = value;
                this.ReturnsToSeabedSpecified = true;
            }
        }

        private Boolean? returnsToSeabedField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ReturnsToSeabedSpecified { get; set; }
        /// <summary>
        /// Pipe being reciprocated. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("reciprocating")]
        public Boolean? Reciprocating {
            get {
                return reciprocatingField;
            } 
            set { 
                reciprocatingField = value;
                this.ReciprocatingSpecified = true;
            }
        }

        private Boolean? reciprocatingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean ReciprocatingSpecified { get; set; }
        /// <summary>
        /// Duration for waiting on cement to set. 
        /// </summary>
        [XmlElement("woc")]
        public TimeMeasure Woc { get; set; }
        /// <summary>
        /// If Plug, measured depth of top of plug. 
        /// </summary>
        [XmlElement("mdPlugTop")]
        public MeasuredDepthCoord MDPlugTop { get; set; }
        /// <summary>
        /// If Plug, measured depth of bottom of plug. 
        /// </summary>
        [XmlElement("mdPlugBot")]
        public MeasuredDepthCoord MDPlugBot { get; set; }
        /// <summary>
        /// Measured depth at bottom of hole. 
        /// </summary>
        [XmlElement("mdHole")]
        public MeasuredDepthCoord MDHole { get; set; }
        /// <summary>
        /// Measured depth of previous shoe. 
        /// </summary>
        [XmlElement("mdShoe")]
        public MeasuredDepthCoord MDShoe { get; set; }
        /// <summary>
        /// True Vertical Depth of previous shoe. 
        /// </summary>
        [XmlElement("tvdShoe")]
        public WellVerticalDepthCoord TvdShoe { get; set; }
        /// <summary>
        /// Measured depth of cement string shoe. 
        /// </summary>
        [XmlElement("mdStringSet")]
        public MeasuredDepthCoord MDStringSet { get; set; }
        /// <summary>
        /// True vertical depth of cement string shoe. 
        /// </summary>
        [XmlElement("tvdStringSet")]
        public WellVerticalDepthCoord TvdStringSet { get; set; }
		/// <summary>
        /// Set of stages for the job (usually 1 or 2). 
        /// </summary>
        [XmlElement("cementStage")]
        public List<CementStage> CementStage { get; set; }
        /// <summary>
        /// Test results post-job. 
        /// </summary>
        [XmlElement("cementTest")]
        public CementTest CementTest { get; set; }
        /// <summary>
        /// Plug type. 
        /// </summary>
        [XmlElement("typePlug")]
        public String TypePlug { get; set; }
        /// <summary>
        /// Name for the cementing string 
        /// </summary>
        [XmlElement("nameCementString")]
        public String NameCementString { get; set; }
        /// <summary>
        /// Date and time that cement plug was set. 
        /// </summary>
        [XmlElement("dTimPlugSet")]
        public DateTime? DateTimePlugSet {
            get {
                return dTimPlugSetField;
            } 
            set { 
                dTimPlugSetField = value;
                this.DateTimePlugSetSpecified = true;
            }
        }

        private DateTime? dTimPlugSetField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePlugSetSpecified { get; set; }
        /// <summary>
        /// Cement drilled out flag. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("cementDrillOut")]
        public Boolean? CementDrillOut {
            get {
                return cementDrillOutField;
            } 
            set { 
                cementDrillOutField = value;
                this.CementDrillOutSpecified = true;
            }
        }

        private Boolean? cementDrillOutField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CementDrillOutSpecified { get; set; }
        /// <summary>
        /// Date and time that cement was drilled out. 
        /// </summary>
        [XmlElement("dTimCementDrillOut")]
        public DateTime? DateTimeCementDrillOut {
            get {
                return dTimCementDrillOutField;
            } 
            set { 
                dTimCementDrillOutField = value;
                this.DateTimeCementDrillOutSpecified = true;
            }
        }

        private DateTime? dTimCementDrillOutField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeCementDrillOutSpecified { get; set; }
        /// <summary>
        /// Type of squeeze. 
        /// </summary>
        [XmlElement("typeSqueeze")]
        public String TypeSqueeze { get; set; }
        /// <summary>
        /// Measured depth of squeeze. 
        /// </summary>
        [XmlElement("mdSqueeze")]
        public MeasuredDepthCoord MDSqueeze { get; set; }
        /// <summary>
        /// Date and time of squeeze. 
        /// </summary>
        [XmlElement("dTimSqueeze")]
        public DateTime? DateTimeSqueeze {
            get {
                return dTimSqueezeField;
            } 
            set { 
                dTimSqueezeField = value;
                this.DateTimeSqueezeSpecified = true;
            }
        }

        private DateTime? dTimSqueezeField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeSqueezeSpecified { get; set; }
        /// <summary>
        /// Tool Company. 
        /// </summary>
        [XmlElement("toolCompany")]
        public String ToolCompany { get; set; }
        /// <summary>
        /// Cement tool type. 
        /// </summary>
        [XmlElement("typeTool")]
        public String TypeTool { get; set; }
        /// <summary>
        /// Pipe rotation start time. 
        /// </summary>
        [XmlElement("dTimPipeRotStart")]
        public DateTime? DateTimePipeRotStart {
            get {
                return dTimPipeRotStartField;
            } 
            set { 
                dTimPipeRotStartField = value;
                this.DateTimePipeRotStartSpecified = true;
            }
        }

        private DateTime? dTimPipeRotStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePipeRotStartSpecified { get; set; }
        /// <summary>
        /// Pipe rotation end time. 
        /// </summary>
        [XmlElement("dTimPipeRotEnd")]
        public DateTime? DateTimePipeRotEnd {
            get {
                return dTimPipeRotEndField;
            } 
            set { 
                dTimPipeRotEndField = value;
                this.DateTimePipeRotEndSpecified = true;
            }
        }

        private DateTime? dTimPipeRotEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimePipeRotEndSpecified { get; set; }
        /// <summary>
        /// Pipe rotation rate (commonly in rpm). 
        /// </summary>
        [XmlElement("rpmPipe")]
        public AnglePerTimeMeasure RpmPipe { get; set; }
        /// <summary>
        /// Pipe rotation initial torque. 
        /// </summary>
        [XmlElement("tqInitPipeRot")]
        public MomentOfForceMeasure TorqueInitPipeRot { get; set; }
        /// <summary>
        /// Pipe rotation average torque. 
        /// </summary>
        [XmlElement("tqPipeAv")]
        public MomentOfForceMeasure TorquePipeAverage { get; set; }
        /// <summary>
        /// Pipe rotation maximum torque. 
        /// </summary>
        [XmlElement("tqPipeMx")]
        public MomentOfForceMeasure TorquePipeMax { get; set; }
        /// <summary>
        /// Date and time at start of pipe reciprocation. 
        /// </summary>
        [XmlElement("dTimRecipStart")]
        public DateTime? DateTimeRecipStart {
            get {
                return dTimRecipStartField;
            } 
            set { 
                dTimRecipStartField = value;
                this.DateTimeRecipStartSpecified = true;
            }
        }

        private DateTime? dTimRecipStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRecipStartSpecified { get; set; }
        /// <summary>
        /// Date and time at end of pipe reciprocation. 
        /// </summary>
        [XmlElement("dTimRecipEnd")]
        public DateTime? DateTimeRecipEnd {
            get {
                return dTimRecipEndField;
            } 
            set { 
                dTimRecipEndField = value;
                this.DateTimeRecipEndSpecified = true;
            }
        }

        private DateTime? dTimRecipEndField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeRecipEndSpecified { get; set; }
        /// <summary>
        /// String up weight during reciprocation. 
        /// </summary>
        [XmlElement("overPull")]
        public ForceMeasure OverPull { get; set; }
        /// <summary>
        /// String down weight during reciprocation. 
        /// </summary>
        [XmlElement("slackOff")]
        public ForceMeasure SlackOff { get; set; }
        /// <summary>
        /// Pipe reciprocation RPM. 
        /// </summary>
        [XmlElement("rpmPipeRecip")]
        public AnglePerTimeMeasure RpmPipeRecip { get; set; }
        /// <summary>
        /// Pipe reciprocation stroke length. 
        /// </summary>
        [XmlElement("lenPipeRecipStroke")]
        public LengthMeasure LenPipeRecipStroke { get; set; }
        /// <summary>
        /// Coiled Tubing Used (true=CTU used). Values are "true" (or "1") and "false" (or "0").
        /// </summary>
        [XmlElement("coilTubing")]
        public Boolean? CoilTubing {
            get {
                return coilTubingField;
            } 
            set { 
                coilTubingField = value;
                this.CoilTubingSpecified = true;
            }
        }

        private Boolean? coilTubingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean CoilTubingSpecified { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML bottom hole assembly run object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_bhaRun", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML bottom hole assembly run object.")]
    public partial class BhaRun : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the bottom hole assembly. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the run. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// This represents a foreign key to the tubular (assembly) that was utilized in this run.
        /// </summary>
        [XmlElement("tubular")]
        public RefNameString Tubular { get; set; }
        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
        [XmlElement("dTimStart")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set { 
                dTimStartField = value;
                this.DateTimeStartSpecified = true;
            }
        }

        private DateTime? dTimStartField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartSpecified { get; set; }
        /// <summary>
        /// Date and time that activities stopped. 
        /// </summary>
        [XmlElement("dTimStop")]
        public DateTime? DateTimeStop {
            get {
                return dTimStopField;
            } 
            set { 
                dTimStopField = value;
                this.DateTimeStopSpecified = true;
            }
        }

        private DateTime? dTimStopField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStopSpecified { get; set; }
        /// <summary>
        /// Start on bottom - date and time. 
        /// </summary>
        [XmlElement("dTimStartDrilling")]
        public DateTime? DateTimeStartDrilling {
            get {
                return dTimStartDrillingField;
            } 
            set { 
                dTimStartDrillingField = value;
                this.DateTimeStartDrillingSpecified = true;
            }
        }

        private DateTime? dTimStartDrillingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStartDrillingSpecified { get; set; }
        /// <summary>
        /// Start off bottom - date and time. 
        /// </summary>
        [XmlElement("dTimStopDrilling")]
        public DateTime? DateTimeStopDrilling {
            get {
                return dTimStopDrillingField;
            } 
            set { 
                dTimStopDrillingField = value;
                this.DateTimeStopDrillingSpecified = true;
            }
        }

        private DateTime? dTimStopDrillingField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean DateTimeStopDrillingSpecified { get; set; }
        /// <summary>
        /// Planned dogleg severity. 
        /// </summary>
        [XmlElement("planDogleg")]
        public AnglePerLengthMeasure PlanDogleg { get; set; }
        /// <summary>
        /// Actual dogleg severity. 
        /// </summary>
        [XmlElement("actDogleg")]
        public AnglePerLengthMeasure ActDogleg { get; set; }
        /// <summary>
        /// Actual dogleg severity - Maximum. 
        /// </summary>
        [XmlElement("actDoglegMx")]
        public AnglePerLengthMeasure ActDoglegMax { get; set; }
        /// <summary>
        /// Bottom hole assembly status.
        /// </summary>
        [XmlElement("statusBha")]
        public BhaStatus? StatusBha {
            get {
                return statusBhaField;
            } 
            set { 
                statusBhaField = value;
                this.StatusBhaSpecified = true;
            }
        }

        private BhaStatus? statusBhaField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean StatusBhaSpecified { get; set; }
        /// <summary>
        /// Bit run number. 
        /// </summary>
        [XmlElement("numBitRun")]
        public String NumBitRun { get; set; }
        /// <summary>
        /// The BHA (drilling string) run number. 
        /// </summary>
        [XmlElement("numStringRun")]
        public Int16? NumStringRun {
            get {
                return numStringRunField;
            } 
            set { 
                numStringRunField = value;
                this.NumStringRunSpecified = true;
            }
        }

        private Int16? numStringRunField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean NumStringRunSpecified { get; set; }
        /// <summary>
        /// Reason for trip. 
        /// </summary>
        [XmlElement("reasonTrip")]
        public String ReasonTrip { get; set; }
        /// <summary>
        /// Objective of bottom hole assembly. 
        /// </summary>
        [XmlElement("objectiveBha")]
        public String ObjectiveBha { get; set; }
		/// <summary>
        /// Drilling parameters. 
        /// </summary>
        [XmlElement("drillingParams")]
        public List<DrillingParams> DrillingPluggedAndAbandonedrams { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    /// <summary>
    /// The non-contextual content of a WITSML attachment object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_attachment", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("The non-contextual content of a WITSML attachment object.")]
    public partial class Attachment : Object 
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
        [XmlElement("nameWell")]
        public String NameWell { get; set; }
        /// <summary>
        /// Human recognizable context for the wellbore that contains the (sub) object that is represented by the attachment. If no wellbore is specified then the attachment represents the well. If a wellbore is specified but no other object is specified then the attachment represents the wellbore. 
        /// </summary>
        [XmlElement("nameWellbore")]
        public String NameWellbore { get; set; }
        /// <summary>
        /// Human recognizable context for the attachment. 
        /// </summary>
        [XmlElement("name")]
        public String Name { get; set; }
        /// <summary>
        /// A reference to an object that is defined within the context of the specified wellbore.
        /// </summary>
        [XmlElement("objectReference")]
        public RefObjectString ObjectReference { get; set; }
        /// <summary>
        /// A reference to an sub-object that is defined within the context of the object referenced by objectReference. This should only refer to recurring components of a growing object.
        /// </summary>
        [XmlElement("subObjectReference")]
        public RefObjectString SubObjectReference { get; set; }
        /// <summary>
        /// Along hole measured depth represented by the attachment. 
        /// </summary>
        [XmlElement("md")]
        public MeasuredDepthCoord MD { get; set; }
        /// <summary>
        /// Along hole measured depth of the bit. 
        /// </summary>
        [XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit { get; set; }
		/// <summary>
        /// Any extra numeric data. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.
        /// </summary>
        [XmlElement("param")]
        public List<IndexedObject> PluggedAndAbandonedram { get; set; }
        /// <summary>
        /// A file name associated with the attachment.
        /// </summary>
        [XmlElement("fileName")]
        public String FileName { get; set; }
        /// <summary>
        /// A description of attachment
        /// </summary>
        [XmlElement("description")]
        public String Description { get; set; }
        /// <summary>
        /// The file type.
        /// </summary>
        [XmlElement("fileType")]
        public String FileType { get; set; }
		/// <summary>
        /// The actual attachment content.
        /// </summary>
        [XmlElement("")]
        public List<Byte> Content { get; set; }
        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
        [XmlElement("commonData")]
        public CommonData CommonData { get; set; }
        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
        [XmlElement("customData")]
        public CustomData CustomData { get; set; }
		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
        [XmlAttribute("uidWell")]
        public String UidWell { get; set; }
		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
        [XmlAttribute("uidWellbore")]
        public String UidWellbore { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// An event type captures the basic information about an event that has affected the data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentEvent", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("An event type captures the basic information about an event that has affected the data.")]
    public partial class DocumentEvent : Object 
    {

        /// <summary>
        /// The date on which the event took place.
        /// </summary>
        [XmlElement("eventDate")]
        public DateTime? EventDate { get; set; }
        /// <summary>
        /// The kind of event event.
        /// </summary>
        [XmlElement("eventType")]
        public String EventType { get; set; }
        /// <summary>
        /// The party responsible for the event.
        /// </summary>
        [XmlElement("responsibleParty")]
        public String ResponsiblePluggedAndAbandonedrty { get; set; }
        /// <summary>
        /// A free form comment that can further define the event that occurred.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information about the security classification of the document. This is intended as a documentation of the security so that the file will not inadvertently be sent to someone who is not allowed access to the data. This block also carries a date that the security classification expires. For example, a well log is confidential for a period of time, and then becomes open. All security classes are characterized by their classification systems.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentSecurityInfo", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("Information about the security classification of the document. This is intended as a documentation of the security so that the file will not inadvertently be sent to someone who is not allowed access to the data. This block also carries a date that the security classification expires. For example, a well log is confidential for a period of time, and then becomes open. All security classes are characterized by their classification systems.")]
    public partial class DocumentSecurityInfo : Object 
    {

        /// <summary>
        /// The security class in which this document is classified. Examples would be confidential, partner confidential, tight. The meaning of the class is determined by the System in which it is defined.
        /// </summary>
        [XmlElement("class")]
        public String Class { get; set; }
        /// <summary>
        /// The security classification system. This gives context to the meaning of the Class value.
        /// </summary>
        [XmlElement("securitySystem")]
        public String SecuritySystem { get; set; }
        /// <summary>
        /// The date on which this security class is no longer applicable.
        /// </summary>
        [XmlElement("endDate")]
        public DateTime? EndDate {
            get {
                return endDateField;
            } 
            set { 
                endDateField = value;
                this.EndDateSpecified = true;
            }
        }

        private DateTime? endDateField; 

		
        [XmlIgnore]
		[Browsable(false)]
        public Boolean EndDateSpecified { get; set; }
        /// <summary>
        /// A general comment to further define the security class.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
		/// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
        [XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue { get; set; }
		
        [XmlAttribute("uid")]
        public String Uid { get; set; }
    }
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A block of information about the creation of the XML file. This is different than the creation of the data that is included within the file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentFileCreation", Namespace="http://www.witsml.org/schemas/1series")]
    [Description("A block of information about the creation of the XML file. This is different than the creation of the data that is included within the file.")]
    public partial class DocumentFileCreation : Object 
    {

        /// <summary>
        /// The date and time that the file was created.
        /// </summary>
        [XmlElement("fileCreationDate")]
        public DateTime? FileCreationDate { get; set; }
        /// <summary>
        /// If appropriate, the software that created the file. This is a free form string, and may include whatever information is deemed relevant.
        /// </summary>
        [XmlElement("softwareName")]
        public String SoftwareName { get; set; }
        /// <summary>
        /// The person or business associate that created the file.
        /// </summary>
        [XmlElement("fileCreator")]
        public String FileCreator { get; set; }
        /// <summary>
        /// Any comment that would be useful to further explain the creation of this instance document.
        /// </summary>
        [XmlElement("comment")]
        public String Comment { get; set; }
    }
    }

    /// <summary>
    /// This class represents the obj_wellbores xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wellbores", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_wellbores xsd type.")]
    public partial class WellboreList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// Information about a single wellbore. A wellbore is a unique, oriented path from the bottom of a drilled borehole to the surface of the Earth. The path must not overlap or cross itself. 
        /// </summary>
        [XmlElement("wellbore")]
        public List<Wellbore> Wellbore { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Wellbore;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_wells xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wells", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_wells xsd type.")]
    public partial class WellList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// Information about a single well. A well is a unique surface location from which wellbores are drilled into the Earth for the purpose of either (1) finding or producing underground resources; or (2) providing services related to the production of underground resources. 
        /// </summary>
        [XmlElement("well")]
        public List<Well> Well { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Well;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_wbGeometrys xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wbGeometrys", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_wbGeometrys xsd type.")]
    public partial class WellboreGeometryList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single wellbore geometry. 
        /// </summary>
        [XmlElement("wbGeometry")]
        public List<StandAloneWellboreGeometry> WellboreGeometry { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellboreGeometry;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_tubulars xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("tubulars", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_tubulars xsd type.")]
    public partial class TubularList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single tubular (assembly). This represents the "transient" assemblies used in drilling a well as opposed to the "fixed" assemblies (see wbGeometry).
        /// </summary>
        [XmlElement("tubular")]
        public List<Tubular> Tubular { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Tubular;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_trajectorys xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("trajectorys", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_trajectorys xsd type.")]
    public partial class TrajectoryList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single trajectory. 
        /// </summary>
        [XmlElement("trajectory")]
        public List<Trajectory> Trajectory { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Trajectory;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_toolErrorTermSets xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("toolErrorTermSets", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_toolErrorTermSets xsd type.")]
    public partial class ToolErrorTermSetList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single error term set.
        /// </summary>
        [XmlElement("toolErrorTermSet")]
        public List<ToolErrorTermSet> ToolErrorTermSet { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ToolErrorTermSet;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_toolErrorModels xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("toolErrorModels", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_toolErrorModels xsd type.")]
    public partial class ToolErrorModelList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single error Term Source.
        /// </summary>
        [XmlElement("toolErrorModel")]
        public List<ToolErrorModel> ToolErrorModel { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ToolErrorModel;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_targets xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("targets", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_targets xsd type.")]
    public partial class TargetList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single target. 
        /// </summary>
        [XmlElement("target")]
        public List<Target> Target { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Target;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_surveyPrograms xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("surveyPrograms", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_surveyPrograms xsd type.")]
    public partial class SurveyProgramList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single survey program . 
        /// </summary>
        [XmlElement("surveyProgram")]
        public List<SurveyProgram> SurveyProgram { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return SurveyProgram;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_stimJobs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("stimJobs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_stimJobs xsd type.")]
    public partial class StimJobList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single well stimulation job.
        /// </summary>
        [XmlElement("stimJob")]
        public List<StimJob> StimJob { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return StimJob;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_sidewallCores xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("sidewallCores", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_sidewallCores xsd type.")]
    public partial class SidewallCoreList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single sidewall core. 
        /// </summary>
        [XmlElement("sidewallCore")]
        public List<SidewallCore> SidewallCore { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return SidewallCore;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_risks xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("risks", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_risks xsd type.")]
    public partial class RiskList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single risk. 
        /// </summary>
        [XmlElement("risk")]
        public List<Risk> Risk { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Risk;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_rigs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("rigs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_rigs xsd type.")]
    public partial class RigList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single rig. 
        /// </summary>
        [XmlElement("rig")]
        public List<Rig> Rig { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Rig;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_opsReports xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("opsReports", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_opsReports xsd type.")]
    public partial class OpsReportList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single operations report. 
        /// </summary>
        [XmlElement("opsReport")]
        public List<OpsReport> OperatingsReport { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return OperatingsReport;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_objectGroups xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("objectGroups", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_objectGroups xsd type.")]
    public partial class ObjectGroupList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single objectGroup Object
        /// </summary>
        [XmlElement("objectGroup")]
        public List<ObjectGroup> ObjectGroup { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ObjectGroup;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_mudLogs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("mudLogs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_mudLogs xsd type.")]
    public partial class MudLogList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single mud log. 
        /// </summary>
        [XmlElement("mudLog")]
        public List<MudLog> MudLog { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return MudLog;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_messages xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("messages", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_messages xsd type.")]
    public partial class MessageList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single message. 
        /// </summary>
        [XmlElement("message")]
        public List<Message> Message { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Message;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_logs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("logs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_logs xsd type.")]
    public partial class LogList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single log. 
        /// </summary>
        [XmlElement("log")]
        public List<Log> Log { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Log;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_formationMarkers xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("formationMarkers", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_formationMarkers xsd type.")]
    public partial class FormationMarkerList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single formation marker. 
        /// </summary>
        [XmlElement("formationMarker")]
        public List<FormationMarker> FormationMarker { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FormationMarker;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_fluidsReports xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("fluidsReports", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_fluidsReports xsd type.")]
    public partial class FluidsReportList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single fluids report. 
        /// </summary>
        [XmlElement("fluidsReport")]
        public List<FluidsReport> FluidsReport { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FluidsReport;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_drillReports xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("drillReports", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_drillReports xsd type.")]
    public partial class DrillReportList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single drilling report. 
        /// </summary>
        [XmlElement("drillReport")]
        public List<DrillReport> DrillReport { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return DrillReport;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_convCores xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("convCores", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_convCores xsd type.")]
    public partial class ConvCoreList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single conventional core. 
        /// </summary>
        [XmlElement("convCore")]
        public List<ConvCore> ConvCore { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ConvCore;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_changeLogs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("changeLogs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_changeLogs xsd type.")]
    public partial class ChangeLogList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// Defines a singular changeLog object.
        /// </summary>
        [XmlElement("changeLog")]
        public List<ChangeLog> ChangeLog { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ChangeLog;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_cementJobs xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("cementJobs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_cementJobs xsd type.")]
    public partial class CementJobList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single cement job. 
        /// </summary>
        [XmlElement("cementJob")]
        public List<CementJob> CementJob { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return CementJob;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    /// <summary>
    /// This class represents the obj_bhaRuns xsd type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Energistics.Generator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("bhaRuns", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
    [Description("This class represents the obj_bhaRuns xsd type.")]
    public partial class BhaRunList : AbstractObject , IEnergisticsCollection
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
        [XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo { get; set; }
		/// <summary>
        /// A single bottom hole assembly run. This represents the period beginning when the BHA enters the hole until it leaves the hole. 
        /// </summary>
        [XmlElement("bhaRun")]
        public List<BhaRun> BhaRun { get; set; }
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return BhaRun;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
        [XmlAttribute("version")]
        public String Version { get; set; }
    }

    #endregion

    #region Enumerations
    namespace ReferenceData {
        /// <summary>
        /// This class represents the WellStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellStatus xsd enumeration.")]
        public enum WellStatus 
        {
        /// <summary>
        /// The status of a facility in which drilling, completion, and production operations have been permanently terminated.
        /// </summary>
          abandoned,
        /// <summary>
        /// For a well to be active, at least one of its wellbores must be active. For a wellbore to be active, at least one of its completions must be actively producing or injecting fluids.
        /// </summary>
          active,
        
          [XmlEnum("active -- injecting")]
          activeinjecting,
        
          [XmlEnum("active -- producing")]
          activeproducing,
        /// <summary>
        /// The completion has been installed, but the facility is not yet active. This status is appropriate only before the initial producing or injecting activity.
        /// </summary>
          completed,
        /// <summary>
        /// The status of a well or wellbore in which drilling operations have begun, but are not yet completed. The status ends when another status becomes appropriate.
        /// </summary>
          drilling,
        
          [XmlEnum("partially plugged")]
          partiallyplugged,
        /// <summary>
        /// The facility has received regulatory approvel, but drilling has not yet commenced. For a well, it has been spudded. For a subsequent wellbore, the whipstock or similar device has not yet been set.
        /// </summary>
          permitted,
        
          [XmlEnum("plugged and abandoned")]
          pluggedandabandoned,
        /// <summary>
        /// The status of a well or wellbore from conception to either regulatory approval or commencement of drilling.
        /// </summary>
          proposed,
        /// <summary>
        /// The facility has been sold, so it is no longer appropriate to keep a close internal status value. Status values may be added at later times without changing the sold status.
        /// </summary>
          sold,
        /// <summary>
        /// Production or injection has been temporarily suspended in a manner that will allow immediate resumption of activities.
        /// </summary>
          suspended,
        
          [XmlEnum("temporarily abandoned")]
          temporarilyabandoned,
        /// <summary>
        /// The facility operations are suspended while tests are being conducted to determine formation and/or reservoir properties. For example, a drillstem test. This status also includes extended testing.
        /// </summary>
          testing,
        /// <summary>
        /// Information about the status of the well is confidential. This is more explicit than unknown, since it gives the reason that the status value is unknown.
        /// </summary>
          tight,
        
          [XmlEnum("working over")]
          workingover,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellPurpose xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellPurpose xsd enumeration.")]
        public enum WellPurpose 
        {
        /// <summary>
        /// A well drilled into a formation shown to be potentially productive of oil or gas by an earlier well for the purpose of obtaining more information about the reservoir. Also known as a delineation well.
        /// </summary>
          appraisal,
        
          [XmlEnum("appraisal -- confirmation appraisal")]
          appraisalconfirmationappraisal,
        
          [XmlEnum("appraisal -- exploratory appraisal")]
          appraisalexploratoryappraisal,
        /// <summary>
        /// An exploratory well drilled in an unproved area to test for a new field, a new pay, a deeper reservoir, or a shallower reservoir. Also known as a wildcat.
        /// </summary>
          exploration,
        
          [XmlEnum("exploration -- deeper-pool wildcat")]
          explorationdeeperpoolwildcat,
        
          [XmlEnum("exploration -- new-field wildcat")]
          explorationnewfieldwildcat,
        
          [XmlEnum("exploration -- new-pool wildcat")]
          explorationnewpoolwildcat,
        
          [XmlEnum("exploration -- outpost wildcat")]
          explorationoutpostwildcat,
        
          [XmlEnum("exploration -- shallower-pool wildcat")]
          explorationshallowerpoolwildcat,
        /// <summary>
        /// A well drilled in a zone in an area already proved productive.
        /// </summary>
          development,
        
          [XmlEnum("development -- infill development")]
          developmentinfilldevelopment,
        
          [XmlEnum("development -- injector")]
          developmentinjector,
        
          [XmlEnum("development -- producer")]
          developmentproducer,
        
          [XmlEnum("fluid storage")]
          fluidstorage,
        
          [XmlEnum("fluid storage -- gas storage")]
          fluidstoragegasstorage,
        
          [XmlEnum("general srvc")]
          generalsrvc,
        
          [XmlEnum("general srvc -- borehole re-acquisition")]
          generalsrvcboreholereacquisition,
        
          [XmlEnum("general srvc -- observation")]
          generalsrvcobservation,
        
          [XmlEnum("general srvc -- relief")]
          generalsrvcrelief,
        
          [XmlEnum("general srvc -- research")]
          generalsrvcresearch,
        
          [XmlEnum("general srvc -- research -- drill test")]
          generalsrvcresearchdrilltest,
        
          [XmlEnum("general srvc -- research -- strat test")]
          generalsrvcresearchstrattest,
        
          [XmlEnum("general srvc -- waste disposal")]
          generalsrvcwastedisposal,
        /// <summary>
        /// A non-oil and gas E and P well drilled for the purpose of locating and/or extracting a mineral from the subsurface, usually through the injection and/or extraction of mineral-bearing fluids.
        /// </summary>
          mineral,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellboreType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellboreType xsd enumeration.")]
        public enum WellboreType 
        {
        /// <summary>
        /// The original wellbore had to be abandoned before its final usage. This wellbore is being drilled as a different wellbore, but one which has the same target as the one that was abandoned.
        /// </summary>
          bypass,
        /// <summary>
        /// This is the first wellbore that has been drilled, or attempted, in a given well.
        /// </summary>
          initial,
        /// <summary>
        /// The wellbore is being redrilled.
        /// </summary>
          redrill,
        /// <summary>
        /// The wellbore is being reentered after a period of abandonment.
        /// </summary>
          reentry,
        /// <summary>
        /// The wellbore is part of an existing regulatory well. The original borehole did not reach the target depth. This borehole required the well to be respudded (drilled from a different surface position).
        /// </summary>
          respud,
        /// <summary>
        /// The wellbore is a deviation from a given wellbore, that produces a different borehole from the others, and whose bottomhole differs from any previously extisting wellbore bottomholes.
        /// </summary>
          sidetrack,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellboreShape xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellboreShape xsd enumeration.")]
        public enum WellboreShape 
        {
        
          [XmlEnum("build and hold")]
          buildandhold,
        /// <summary>
        /// A wellbore that significantly departs from vertical with respect to the surface location.
        /// </summary>
          deviated,
        
          [XmlEnum("double kickoff")]
          doublekickoff,
        /// <summary>
        /// A wellbore whose path deviates from the vertical by at least 75 degrees.
        /// </summary>
          horizontal,
        
          [XmlEnum("S-shaped")]
          Sshaped,
        /// <summary>
        /// A wellbore that is nearly vertical with respect to the surface location.
        /// </summary>
          vertical,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MeasuredDepthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MeasuredDepthUom xsd enumeration.")]
        public enum MeasuredDepthUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS
        }
        /// <summary>
        /// This class represents the LengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LengthUom xsd enumeration.")]
        public enum LengthUom 
        {
        
          m,
        
          angstrom,
        
          chBnA,
        
          chBnB,
        
          chCla,
        
          chSe,
        
          chUS,
        
          cm,
        
          dm,
        
          fathom,
        
          fm,
        
          ft,
        
          ftBnA,
        
          ftBnB,
        
          [XmlEnum("ftBr(65)")]
          ftBr65,
        
          ftCla,
        
          ftGC,
        
          ftInd,
        
          [XmlEnum("ftInd(37)")]
          ftInd37,
        
          [XmlEnum("ftInd(62)")]
          ftInd62,
        
          [XmlEnum("ftInd(75)")]
          ftInd75,
        
          ftMA,
        
          ftSe,
        
          ftUS,
        
          @in,
        
          [XmlEnum("in/10")]
          in10,
        
          [XmlEnum("in/16")]
          in16,
        
          [XmlEnum("in/32")]
          in32,
        
          [XmlEnum("in/64")]
          in64,
        
          inUS,
        
          km,
        
          lkBnA,
        
          lkBnB,
        
          lkCla,
        
          lkSe,
        
          lkUS,
        
          mGer,
        
          mi,
        
          mil,
        
          miUS,
        
          mm,
        
          Mm,
        
          nautmi,
        
          nm,
        
          pm,
        
          um,
        
          yd,
        
          ydBnA,
        
          ydBnB,
        
          ydCla,
        
          ydIm,
        
          ydInd,
        
          [XmlEnum("ydInd(37)")]
          ydInd37,
        
          [XmlEnum("ydInd(62)")]
          ydInd62,
        
          [XmlEnum("ydInd(75)")]
          ydInd75,
        
          ydSe
        }
        /// <summary>
        /// This class represents the EastOrWest xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the EastOrWest xsd enumeration.")]
        public enum EastOrWest 
        {
        /// <summary>
        /// East of something.
        /// </summary>
          east,
        /// <summary>
        /// West of something.
        /// </summary>
          west,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NorthOrSouth xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the NorthOrSouth xsd enumeration.")]
        public enum NorthOrSouth 
        {
        /// <summary>
        /// North of something.
        /// </summary>
          north,
        /// <summary>
        /// South of something.
        /// </summary>
          south,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellVerticalCoordinateUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellVerticalCoordinateUom xsd enumeration.")]
        public enum WellVerticalCoordinateUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS,
        
          [XmlEnum("ftBr(65)")]
          ftBr65
        }
        /// <summary>
        /// This class represents the PercentUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PercentUom xsd enumeration.")]
        public enum PercentUom 
        {
        
          [XmlEnum("%")]
          Item
        }
        /// <summary>
        /// This class represents the PlaneAngleUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PlaneAngleUom xsd enumeration.")]
        public enum PlaneAngleUom 
        {
        
          rad,
        
          c,
        
          ccgr,
        
          cgr,
        
          dega,
        
          gon,
        
          gr,
        
          Grad,
        
          krad,
        
          mila,
        
          mina,
        
          mrad,
        
          Mrad,
        
          mseca,
        
          seca,
        
          urad
        }
        /// <summary>
        /// This class represents the AziRef xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AziRef xsd enumeration.")]
        public enum AziRef 
        {
        
          [XmlEnum("magnetic north")]
          magneticnorth,
        
          [XmlEnum("grid north")]
          gridnorth,
        
          [XmlEnum("true north")]
          truenorth,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the VolumePerVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumePerVolumeUom xsd enumeration.")]
        public enum VolumePerVolumeUom 
        {
        
          Euc,
        
          [XmlEnum("%")]
          Item,
        
          permil,
        
          ppdk,
        
          ppk,
        
          ppm,
        
          [XmlEnum("bbl/acre.ft")]
          bblacreft,
        
          [XmlEnum("bbl/bbl")]
          bblbbl,
        
          [XmlEnum("bbl/ft3")]
          bblft3,
        
          [XmlEnum("bbl/100bbl")]
          bbl100bbl,
        
          [XmlEnum("bbl/k(ft3)")]
          bblkft3,
        
          [XmlEnum("bbl/M(ft3)")]
          bblMft3,
        
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        
          [XmlEnum("cm3/m3")]
          cm3m3,
        
          [XmlEnum("dm3/m3")]
          dm3m3,
        
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        
          [XmlEnum("galUS/kgalUS")]
          galUSkgalUS,
        
          [XmlEnum("galUK/kgalUK")]
          galUKkgalUK,
        
          [XmlEnum("galUK/ft3")]
          galUKft3,
        
          [XmlEnum("galUK/Mbbl")]
          galUKMbbl,
        
          [XmlEnum("galUS/bbl")]
          galUSbbl,
        
          [XmlEnum("galUS/10bbl")]
          galUS10bbl,
        
          [XmlEnum("galUS/ft3")]
          galUSft3,
        
          [XmlEnum("galUS/Mbbl")]
          galUSMbbl,
        
          [XmlEnum("1000ft3/bbl")]
          Item1000ft3bbl,
        
          [XmlEnum("ksm3/sm3")]
          ksm3sm3,
        
          [XmlEnum("L/10bbl")]
          L10bbl,
        
          [XmlEnum("L/m3")]
          Lm3,
        
          [XmlEnum("m3/ha.m")]
          m3ham,
        
          [XmlEnum("m3/m3")]
          m3m3,
        
          [XmlEnum("M(ft3)/acre.ft")]
          Mft3acreft,
        
          [XmlEnum("mL/galUK")]
          mLgalUK,
        
          [XmlEnum("mL/galUS")]
          mLgalUS,
        
          [XmlEnum("mL/mL")]
          mLmL,
        
          [XmlEnum("MMbbl/acre.ft")]
          MMbblacreft,
        
          [XmlEnum("MMscf60/stb60")]
          MMscf60stb60,
        
          [XmlEnum("Mscf60/stb60")]
          Mscf60stb60,
        
          [XmlEnum("ptUK/Mbbl")]
          ptUKMbbl,
        
          [XmlEnum("ptUS/10bbl")]
          ptUS10bbl,
        
          pu,
        
          [XmlEnum("scm15/stb60")]
          scm15stb60,
        
          [XmlEnum("sm3/ksm3")]
          sm3ksm3,
        
          [XmlEnum("sm3/sm3")]
          sm3sm3,
        
          [XmlEnum("stb60/MMscf60")]
          stb60MMscf60,
        
          [XmlEnum("stb60/MMscm15")]
          stb60MMscm15,
        
          [XmlEnum("stb60/Mscf60")]
          stb60Mscf60,
        
          [XmlEnum("stb60/Mscm15")]
          stb60Mscm15,
        
          [XmlEnum("stb60/scm15")]
          stb60scm15
        }
        /// <summary>
        /// This class represents the VolumePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumePerLengthUom xsd enumeration.")]
        public enum VolumePerLengthUom 
        {
        
          bblPft,
        
          bblPin,
        
          bblPmi,
        
          dm3P100km,
        
          [XmlEnum("dm3Pkm(100)")]
          dm3Pkm100,
        
          dm3Pm,
        
          ft3Pft,
        
          galUKPmi,
        
          galUSPft,
        
          galUSPmi,
        
          in3Pft,
        
          LP100km,
        
          [XmlEnum("LPkm(100)")]
          LPkm100,
        
          LPm,
        
          m3Pkm,
        
          m3Pm
        }
        /// <summary>
        /// This class represents the VolumeFlowRateUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumeFlowRateUom xsd enumeration.")]
        public enum VolumeFlowRateUom 
        {
        
          [XmlEnum("m3/s")]
          m3s,
        
          [XmlEnum("bbl/d")]
          bbld,
        
          [XmlEnum("bbl/hr")]
          bblhr,
        
          [XmlEnum("bbl/min")]
          bblmin,
        
          [XmlEnum("cm3/30min")]
          cm330min,
        
          [XmlEnum("cm3/h")]
          cm3h,
        
          [XmlEnum("cm3/min")]
          cm3min,
        
          [XmlEnum("cm3/s")]
          cm3s,
        
          [XmlEnum("dm3/s")]
          dm3s,
        
          [XmlEnum("ft3/d")]
          ft3d,
        
          [XmlEnum("ft3/h")]
          ft3h,
        
          [XmlEnum("ft3/min")]
          ft3min,
        
          [XmlEnum("ft3/s")]
          ft3s,
        
          [XmlEnum("galUK/d")]
          galUKd,
        
          [XmlEnum("galUK/hr")]
          galUKhr,
        
          [XmlEnum("galUK/min")]
          galUKmin,
        
          [XmlEnum("galUS/d")]
          galUSd,
        
          [XmlEnum("galUS/hr")]
          galUShr,
        
          [XmlEnum("galUS/min")]
          galUSmin,
        
          [XmlEnum("kbbl/d")]
          kbbld,
        
          [XmlEnum("1000ft3/d")]
          Item1000ft3d,
        
          [XmlEnum("1000m3/d")]
          Item1000m3d,
        
          [XmlEnum("1000m3/h")]
          Item1000m3h,
        
          [XmlEnum("L/h")]
          Lh,
        
          [XmlEnum("L/min")]
          Lmin,
        
          [XmlEnum("L/s")]
          Ls,
        
          [XmlEnum("m3/d")]
          m3d,
        
          [XmlEnum("m3/h")]
          m3h,
        
          [XmlEnum("m3/min")]
          m3min,
        
          [XmlEnum("Mbbl/d")]
          Mbbld,
        
          [XmlEnum("M(ft3)/d")]
          Mft3d,
        
          [XmlEnum("M(m3)/d")]
          Mm3d
        }
        /// <summary>
        /// This class represents the VolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumeUom xsd enumeration.")]
        public enum VolumeUom 
        {
        
          m3,
        
          [XmlEnum("acre.ft")]
          acreft,
        
          bbl,
        
          bcf,
        
          cm3,
        
          dm3,
        
          flozUK,
        
          flozUS,
        
          ft3,
        
          galUK,
        
          galUS,
        
          [XmlEnum("ha.m")]
          ham,
        
          hL,
        
          in3,
        
          [XmlEnum("1000ft3")]
          Item1000ft3,
        
          km3,
        
          L,
        
          Mbbl,
        
          Mcf,
        
          [XmlEnum("M(ft3)")]
          Mft3,
        
          mi3,
        
          mL,
        
          [XmlEnum("M(m3)")]
          Mm3,
        
          mm3,
        
          MMbbl,
        
          ptUK,
        
          ptUS,
        
          qtUK,
        
          qtUS,
        
          tcf,
        
          [XmlEnum("um2.m")]
          um2m,
        
          yd3
        }
        /// <summary>
        /// This class represents the VelocityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VelocityUom xsd enumeration.")]
        public enum VelocityUom 
        {
        
          [XmlEnum("m/s")]
          ms,
        
          [XmlEnum("cm/a")]
          cma,
        
          [XmlEnum("cm/s")]
          cms,
        
          [XmlEnum("dm/s")]
          dms,
        
          [XmlEnum("ft/d")]
          ftd,
        
          [XmlEnum("ft/h")]
          fth,
        
          [XmlEnum("ft/min")]
          ftmin,
        
          [XmlEnum("ft/ms")]
          ftms,
        
          [XmlEnum("ft/s")]
          fts,
        
          [XmlEnum("ft/us")]
          ftus,
        
          [XmlEnum("in/a")]
          ina,
        
          [XmlEnum("in/min")]
          inmin,
        
          [XmlEnum("in/s")]
          ins,
        
          [XmlEnum("kft/h")]
          kfth,
        
          [XmlEnum("kft/s")]
          kfts,
        
          [XmlEnum("km/h")]
          kmh,
        
          [XmlEnum("km/s")]
          kms,
        
          knot,
        
          [XmlEnum("m/d")]
          md,
        
          [XmlEnum("m/h")]
          mh,
        
          [XmlEnum("m/min")]
          mmin,
        
          [XmlEnum("m/ms")]
          mms,
        
          [XmlEnum("mi/h")]
          mih,
        
          [XmlEnum("mil/yr")]
          milyr,
        
          [XmlEnum("mm/a")]
          mma,
        
          [XmlEnum("mm/s")]
          mms1,
        
          [XmlEnum("nm/s")]
          nms,
        
          [XmlEnum("um/s")]
          ums
        }
        /// <summary>
        /// This class represents the TimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TimeUom xsd enumeration.")]
        public enum TimeUom 
        {
        
          s,
        
          a,
        
          cs,
        
          d,
        
          Ga,
        
          h,
        
          [XmlEnum("100s")]
          Item100s,
        
          Ma,
        
          min,
        
          ms,
        
          [XmlEnum("ms/2")]
          ms2,
        
          ns,
        
          ps,
        
          us,
        
          wk,
        
          [XmlEnum("100ka")]
          Item100ka
        }
        /// <summary>
        /// This class represents the ThermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ThermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperatureUom 
        {
        
          K,
        
          degC,
        
          degF,
        
          degR
        }
        /// <summary>
        /// This class represents the ThermalVolumetricExpansionUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ThermalVolumetricExpansionUom xsd enumeration.")]
        public enum ThermalVolumetricExpansionUom 
        {
        
          [XmlEnum("1/K")]
          Item1K,
        
          [XmlEnum("ppm/degC")]
          ppmdegC,
        
          [XmlEnum("ppm/degF")]
          ppmdegF,
        
          [XmlEnum("1/degC")]
          Item1degC,
        
          [XmlEnum("1/degF")]
          Item1degF,
        
          [XmlEnum("1/degR")]
          Item1degR
        }
        /// <summary>
        /// This class represents the ThermalConductivityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ThermalConductivityUom xsd enumeration.")]
        public enum ThermalConductivityUom 
        {
        
          [XmlEnum("W/m.K")]
          WmK,
        
          [XmlEnum("Btu/hr.ft.degF")]
          BtuhrftdegF,
        
          [XmlEnum("cal/h.cm.degC")]
          calhcmdegC,
        
          [XmlEnum("kcal/h.m.degC")]
          kcalhmdegC,
        
          [XmlEnum("cal/s.cm.degC")]
          calscmdegC
        }
        /// <summary>
        /// This class represents the StandardVolumePerTimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StandardVolumePerTimeUom xsd enumeration.")]
        public enum StandardVolumePerTimeUom 
        {
        
          [XmlEnum("scf(60F)/d")]
          scf60Fd,
        
          [XmlEnum("scm(15C)/s")]
          scm15Cs,
        
          [XmlEnum("scm(15C)/d")]
          scm15Cd,
        
          [XmlEnum("stb(60F)/d")]
          stb60Fd,
        
          [XmlEnum("ksm3/d")]
          ksm3d,
        
          [XmlEnum("Mscm(15C)/d")]
          Mscm15Cd,
        
          [XmlEnum("MMscm(15C)/d")]
          MMscm15Cd,
        
          [XmlEnum("Mstb(60F)/d")]
          Mstb60Fd,
        
          [XmlEnum("MMstb(60F)/d")]
          MMstb60Fd,
        
          [XmlEnum("Mscf(60F)/d")]
          Mscf60Fd,
        
          [XmlEnum("MMscf(60F)/d")]
          MMscf60Fd
        }
        /// <summary>
        /// This class represents the StandardVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StandardVolumeUom xsd enumeration.")]
        public enum StandardVolumeUom 
        {
        
          [XmlEnum("scm(15C)")]
          scm15C,
        
          [XmlEnum("scm(0C)")]
          scm0C,
        
          Gsm3,
        
          ksm3,
        
          [XmlEnum("MMscf(60F)")]
          MMscf60F,
        
          [XmlEnum("MMscm(15C)")]
          MMscm15C,
        
          [XmlEnum("MMstb(60F)")]
          MMstb60F,
        
          [XmlEnum("Mscf(60F)")]
          Mscf60F,
        
          [XmlEnum("Mstb(60F)")]
          Mstb60F,
        
          [XmlEnum("scf(60F)")]
          scf60F,
        
          [XmlEnum("stb(60F)")]
          stb60F
        }
        /// <summary>
        /// This class represents the SpecificVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SpecificVolumeUom xsd enumeration.")]
        public enum SpecificVolumeUom 
        {
        
          [XmlEnum("m3/kg")]
          m3kg,
        
          [XmlEnum("bbl/tonUK")]
          bbltonUK,
        
          [XmlEnum("bbl/tonUS")]
          bbltonUS,
        
          [XmlEnum("cm3/g")]
          cm3g,
        
          [XmlEnum("dm3/kg")]
          dm3kg,
        
          [XmlEnum("dm3/t")]
          dm3t,
        
          [XmlEnum("ft3/kg")]
          ft3kg,
        
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        
          [XmlEnum("ft3/sack94")]
          ft3sack94,
        
          [XmlEnum("galUS/sack94")]
          galUSsack94,
        
          [XmlEnum("galUK/lbm")]
          galUKlbm,
        
          [XmlEnum("galUS/lbm")]
          galUSlbm,
        
          [XmlEnum("galUS/tonUK")]
          galUStonUK,
        
          [XmlEnum("galUS/tonUS")]
          galUStonUS,
        
          [XmlEnum("L/100kg")]
          L100kg,
        
          [XmlEnum("L/kg")]
          Lkg,
        
          [XmlEnum("L/t")]
          Lt,
        
          [XmlEnum("L/tonUK")]
          LtonUK,
        
          [XmlEnum("m3/g")]
          m3g,
        
          [XmlEnum("m3/t")]
          m3t,
        
          [XmlEnum("m3/tonUK")]
          m3tonUK,
        
          [XmlEnum("m3/tonUS")]
          m3tonUS
        }
        /// <summary>
        /// This class represents the SpecificHeatCapacityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SpecificHeatCapacityUom xsd enumeration.")]
        public enum SpecificHeatCapacityUom 
        {
        
          [XmlEnum("J/kg.K")]
          JkgK,
        
          [XmlEnum("Btu/lbm.degF")]
          BtulbmdegF,
        
          [XmlEnum("Btu/lbm.degR")]
          BtulbmdegR,
        
          [XmlEnum("cal/g.K")]
          calgK,
        
          [XmlEnum("J/g.K")]
          JgK,
        
          [XmlEnum("kcal/kg.degC")]
          kcalkgdegC,
        
          [XmlEnum("kJ/kg.K")]
          kJkgK,
        
          [XmlEnum("kW.h/kg.degC")]
          kWhkgdegC
        }
        /// <summary>
        /// This class represents the RelativePowerUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RelativePowerUom xsd enumeration.")]
        public enum RelativePowerUom 
        {
        
          [XmlEnum("%")]
          Item,
        
          [XmlEnum("Btu/bhp.hr")]
          Btubhphr,
        
          [XmlEnum("W/kW")]
          WkW,
        
          [XmlEnum("W/W")]
          WW
        }
        /// <summary>
        /// This class represents the PressureUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PressureUom xsd enumeration.")]
        public enum PressureUom 
        {
        
          Pa,
        
          at,
        
          atm,
        
          bar,
        
          [XmlEnum("cmH2O(4degC)")]
          cmH2O4degC,
        
          [XmlEnum("dyne/cm2")]
          dynecm2,
        
          GPa,
        
          hbar,
        
          [XmlEnum("inH2O(39.2F)")]
          inH2O392F,
        
          [XmlEnum("inH2O(60F)")]
          inH2O60F,
        
          [XmlEnum("inHg(32F)")]
          inHg32F,
        
          [XmlEnum("inHg(60F)")]
          inHg60F,
        
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        
          [XmlEnum("kN/m2")]
          kNm2,
        
          kPa,
        
          kpsi,
        
          [XmlEnum("lbf/ft2")]
          lbfft2,
        
          [XmlEnum("lbf/100ft2")]
          lbf100ft2,
        
          [XmlEnum("lbf/in2")]
          lbfin2,
        
          mbar,
        
          [XmlEnum("mmHg(0C)")]
          mmHg0C,
        
          mPa,
        
          MPa,
        
          Mpsi,
        
          [XmlEnum("N/m2")]
          Nm2,
        
          [XmlEnum("N/mm2")]
          Nmm2,
        
          [XmlEnum("Pa(g)")]
          Pag,
        
          pPa,
        
          psi,
        
          psia,
        
          psig,
        
          [XmlEnum("tonfUS/ft2")]
          tonfUSft2,
        
          [XmlEnum("tonfUS/in2")]
          tonfUSin2,
        
          torr,
        
          ubar,
        
          [XmlEnum("umHg(0C)")]
          umHg0C,
        
          uPa,
        
          upsi
        }
        /// <summary>
        /// This class represents the PowerUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PowerUom xsd enumeration.")]
        public enum PowerUom 
        {
        
          W,
        
          ch,
        
          CV,
        
          ehp,
        
          GW,
        
          hhp,
        
          hp,
        
          [XmlEnum("kcal/h")]
          kcalh,
        
          kW,
        
          [XmlEnum("MJ/a")]
          MJa,
        
          MW,
        
          mW,
        
          nW,
        
          [XmlEnum("ton of refrig")]
          tonofrefrig,
        
          TW,
        
          uW
        }
        /// <summary>
        /// This class represents the PermeabilityRockUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PermeabilityRockUom xsd enumeration.")]
        public enum PermeabilityRockUom 
        {
        
          D,
        
          mD
        }
        /// <summary>
        /// This class represents the PerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PerLengthUom xsd enumeration.")]
        public enum PerLengthUom 
        {
        
          [XmlEnum("1/m")]
          Item1m,
        
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        
          [XmlEnum("1/cm")]
          Item1cm,
        
          [XmlEnum("1/ft")]
          Item1ft,
        
          [XmlEnum("1/in")]
          Item1in,
        
          [XmlEnum("1/mi")]
          Item1mi,
        
          [XmlEnum("1/mm")]
          Item1mm,
        
          [XmlEnum("1/nm")]
          Item1nm,
        
          [XmlEnum("1/yd")]
          Item1yd
        }
        /// <summary>
        /// This class represents the MomentOfForceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MomentOfForceUom xsd enumeration.")]
        public enum MomentOfForceUom 
        {
        
          J,
        
          [XmlEnum("dN.m")]
          dNm,
        
          [XmlEnum("daN.m")]
          daNm,
        
          [XmlEnum("ft.lbf")]
          ftlbf,
        
          [XmlEnum("kft.lbf")]
          kftlbf,
        
          [XmlEnum("kgf.m")]
          kgfm,
        
          [XmlEnum("kN.m")]
          kNm,
        
          [XmlEnum("lbf.ft")]
          lbfft,
        
          [XmlEnum("lbf.in")]
          lbfin,
        
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        
          [XmlEnum("N.m")]
          Nm,
        
          [XmlEnum("pdl.ft")]
          pdlft,
        
          [XmlEnum("tonfUS.ft")]
          tonfUSft,
        
          [XmlEnum("tonfUS.mi")]
          tonfUSmi
        }
        /// <summary>
        /// This class represents the MassPerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MassPerLengthUom xsd enumeration.")]
        public enum MassPerLengthUom 
        {
        
          [XmlEnum("kg/m")]
          kgm,
        
          [XmlEnum("klbm/in")]
          klbmin,
        
          [XmlEnum("lbm/ft")]
          lbmft,
        
          [XmlEnum("Mg/in")]
          Mgin,
        
          [XmlEnum("kg.m/cm2")]
          kgmcm2
        }
        /// <summary>
        /// This class represents the MassUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MassUom xsd enumeration.")]
        public enum MassUom 
        {
        
          kg,
        
          ag,
        
          ct,
        
          cwtUK,
        
          cwtUS,
        
          g,
        
          grain,
        
          klbm,
        
          lbm,
        
          Mg,
        
          mg,
        
          [XmlEnum("oz(av)")]
          ozav,
        
          [XmlEnum("oz(troy)")]
          oztroy,
        
          ozm,
        
          sack94,
        
          t,
        
          tonUK,
        
          tonUS,
        
          ug
        }
        /// <summary>
        /// This class represents the MassConcentrationUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MassConcentrationUom xsd enumeration.")]
        public enum MassConcentrationUom 
        {
        
          Euc,
        
          [XmlEnum("%")]
          Item,
        
          [XmlEnum("g/kg")]
          gkg,
        
          [XmlEnum("kg/kg")]
          kgkg,
        
          [XmlEnum("kg/sack94")]
          kgsack94,
        
          [XmlEnum("mg/kg")]
          mgkg,
        
          permil,
        
          ppdk,
        
          ppk,
        
          ppm
        }
        /// <summary>
        /// This class represents the MagneticInductionUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MagneticInductionUom xsd enumeration.")]
        public enum MagneticInductionUom 
        {
        
          T,
        
          gauss,
        
          mT,
        
          mgauss,
        
          nT,
        
          uT
        }
        /// <summary>
        /// This class represents the LengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LengthPerLengthUom xsd enumeration.")]
        public enum LengthPerLengthUom 
        {
        
          [XmlEnum("%")]
          Item,
        
          [XmlEnum("ft/100ft")]
          ft100ft,
        
          [XmlEnum("ft/ft")]
          ftft,
        
          [XmlEnum("ft/in")]
          ftin,
        
          [XmlEnum("ft/m")]
          ftm,
        
          [XmlEnum("ft/mi")]
          ftmi,
        
          [XmlEnum("km/cm")]
          kmcm,
        
          [XmlEnum("m/30m")]
          m30m,
        
          [XmlEnum("m/cm")]
          mcm,
        
          [XmlEnum("m/km")]
          mkm,
        
          [XmlEnum("m/m")]
          mm,
        
          [XmlEnum("mi/in")]
          miin
        }
        /// <summary>
        /// This class represents the IlluminanceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the IlluminanceUom xsd enumeration.")]
        public enum IlluminanceUom 
        {
        
          lx,
        
          [XmlEnum("lm/m2")]
          lmm2,
        
          footcandle,
        
          klx
        }
        /// <summary>
        /// This class represents the ForcePerVolumeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ForcePerVolumeUom xsd enumeration.")]
        public enum ForcePerVolumeUom 
        {
        
          [XmlEnum("N/m3")]
          Nm3,
        
          [XmlEnum("atm/100m")]
          atm100m,
        
          [XmlEnum("atm/m")]
          atmm,
        
          [XmlEnum("bar/km")]
          barkm,
        
          [XmlEnum("bar/m")]
          barm,
        
          [XmlEnum("GPa/cm")]
          GPacm,
        
          [XmlEnum("kPa/100m")]
          kPa100m,
        
          [XmlEnum("kPa/m")]
          kPam,
        
          [XmlEnum("lbf/ft3")]
          lbfft3,
        
          [XmlEnum("lbf/galUS")]
          lbfgalUS,
        
          [XmlEnum("MPa/m")]
          MPam,
        
          [XmlEnum("psi/ft")]
          psift,
        
          [XmlEnum("psi/100ft")]
          psi100ft,
        
          [XmlEnum("psi/kft")]
          psikft,
        
          [XmlEnum("psi/m")]
          psim,
        
          [XmlEnum("Pa/m")]
          Pam,
        
          [XmlEnum("atm/ft")]
          atmft
        }
        /// <summary>
        /// This class represents the ForcePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ForcePerLengthUom xsd enumeration.")]
        public enum ForcePerLengthUom 
        {
        
          [XmlEnum("N/30m")]
          N30m,
        
          [XmlEnum("N/m")]
          Nm,
        
          [XmlEnum("dyne/cm")]
          dynecm,
        
          [XmlEnum("kN/m")]
          kNm,
        
          [XmlEnum("kgf/cm")]
          kgfcm,
        
          [XmlEnum("lbf/100ft")]
          lbf100ft,
        
          [XmlEnum("lbf/30m")]
          lbf30m,
        
          [XmlEnum("lbf/ft")]
          lbfft,
        
          [XmlEnum("lbf/in")]
          lbfin,
        
          [XmlEnum("mN/km")]
          mNkm,
        
          [XmlEnum("mN/m")]
          mNm,
        
          [XmlEnum("pdl/cm")]
          pdlcm,
        
          [XmlEnum("tonfUK/ft")]
          tonfUKft,
        
          [XmlEnum("tonfUS/ft")]
          tonfUSft
        }
        /// <summary>
        /// This class represents the ForceUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ForceUom xsd enumeration.")]
        public enum ForceUom 
        {
        
          N,
        
          daN,
        
          dyne,
        
          gf,
        
          kdyne,
        
          kgf,
        
          klbf,
        
          kN,
        
          lbf,
        
          Mgf,
        
          mN,
        
          MN,
        
          ozf,
        
          pdl,
        
          tonfUK,
        
          tonfUS,
        
          uN
        }
        /// <summary>
        /// This class represents the EquivalentPerMassUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the EquivalentPerMassUom xsd enumeration.")]
        public enum EquivalentPerMassUom 
        {
        
          [XmlEnum("eq/kg")]
          eqkg,
        
          [XmlEnum("meq/g")]
          meqg,
        
          [XmlEnum("meq/100g")]
          meq100g
        }
        /// <summary>
        /// This class represents the ElectricPotentialUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ElectricPotentialUom xsd enumeration.")]
        public enum ElectricPotentialUom 
        {
        
          V,
        
          kV,
        
          mV,
        
          MV,
        
          uV
        }
        /// <summary>
        /// This class represents the ElectricCurrentUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ElectricCurrentUom xsd enumeration.")]
        public enum ElectricCurrentUom 
        {
        
          A,
        
          MA,
        
          kA,
        
          mA,
        
          nA,
        
          pA,
        
          uA
        }
        /// <summary>
        /// This class represents the DynamicViscosityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DynamicViscosityUom xsd enumeration.")]
        public enum DynamicViscosityUom 
        {
        
          [XmlEnum("Pa.s")]
          Pas,
        
          cP,
        
          P,
        
          [XmlEnum("psi.s")]
          psis,
        
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        
          [XmlEnum("mPa.s")]
          mPas,
        
          [XmlEnum("N.s/m2")]
          Nsm2
        }
        /// <summary>
        /// This class represents the DimensionlessUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DimensionlessUom xsd enumeration.")]
        public enum DimensionlessUom 
        {
        
          Euc,
        
          [XmlEnum("%")]
          Item,
        
          cEuc,
        
          mEuc,
        
          nEuc,
        
          uEuc
        }
        /// <summary>
        /// This class represents the DensityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DensityUom xsd enumeration.")]
        public enum DensityUom 
        {
        
          [XmlEnum("kg/m3")]
          kgm3,
        
          [XmlEnum("10Mg/m3")]
          Item10Mgm3,
        
          dAPI,
        
          [XmlEnum("g/cm3")]
          gcm3,
        
          [XmlEnum("g/dm3")]
          gdm3,
        
          [XmlEnum("g/galUK")]
          ggalUK,
        
          [XmlEnum("g/galUS")]
          ggalUS,
        
          [XmlEnum("g/L")]
          gL,
        
          [XmlEnum("g/m3")]
          gm3,
        
          [XmlEnum("grain/ft3")]
          grainft3,
        
          [XmlEnum("grain/galUS")]
          graingalUS,
        
          [XmlEnum("grain/100ft3")]
          grain100ft3,
        
          [XmlEnum("kg/dm3")]
          kgdm3,
        
          [XmlEnum("kg/L")]
          kgL,
        
          [XmlEnum("Mg/m3")]
          Mgm3,
        
          [XmlEnum("lbm/10bbl")]
          lbm10bbl,
        
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        
          [XmlEnum("lbm/ft3")]
          lbmft3,
        
          [XmlEnum("lbm/galUK")]
          lbmgalUK,
        
          [XmlEnum("lbm/1000galUK")]
          lbm1000galUK,
        
          [XmlEnum("lbm/galUS")]
          lbmgalUS,
        
          [XmlEnum("lbm/1000galUS")]
          lbm1000galUS,
        
          [XmlEnum("lbm/in3")]
          lbmin3,
        
          [XmlEnum("lbm/Mbbl")]
          lbmMbbl,
        
          [XmlEnum("mg/dm3")]
          mgdm3,
        
          [XmlEnum("mg/galUS")]
          mggalUS,
        
          [XmlEnum("mg/L")]
          mgL,
        
          [XmlEnum("mg/m3")]
          mgm3,
        
          [XmlEnum("ug/cm3")]
          ugcm3
        }
        /// <summary>
        /// This class represents the CompressibilityUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CompressibilityUom xsd enumeration.")]
        public enum CompressibilityUom 
        {
        
          [XmlEnum("1/psi")]
          Item1psi,
        
          [XmlEnum("1/upsi")]
          Item1upsi,
        
          [XmlEnum("1/Pa")]
          Item1Pa,
        
          [XmlEnum("1/bar")]
          Item1bar,
        
          [XmlEnum("1/kPa")]
          Item1kPa,
        
          [XmlEnum("1/pPa")]
          Item1pPa
        }
        /// <summary>
        /// This class represents the AreaPerAreaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AreaPerAreaUom xsd enumeration.")]
        public enum AreaPerAreaUom 
        {
        
          Euc,
        
          [XmlEnum("%")]
          Item,
        
          [XmlEnum("in2/ft2")]
          in2ft2,
        
          [XmlEnum("in2/in2")]
          in2in2,
        
          [XmlEnum("m2/m2")]
          m2m2,
        
          [XmlEnum("mm2/mm2")]
          mm2mm2
        }
        /// <summary>
        /// This class represents the AreaUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AreaUom xsd enumeration.")]
        public enum AreaUom 
        {
        
          m2,
        
          acre,
        
          b,
        
          cm2,
        
          ft2,
        
          ha,
        
          in2,
        
          km2,
        
          mi2,
        
          miUS2,
        
          mm2,
        
          um2,
        
          yd2
        }
        /// <summary>
        /// This class represents the AnglePerTimeUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AnglePerTimeUom xsd enumeration.")]
        public enum AnglePerTimeUom 
        {
        
          [XmlEnum("rad/s")]
          rads,
        
          [XmlEnum("c/s")]
          cs,
        
          [XmlEnum("dega/h")]
          degah,
        
          [XmlEnum("dega/min")]
          degamin,
        
          [XmlEnum("dega/s")]
          degas,
        
          [XmlEnum("rev/s")]
          revs,
        
          rpm
        }
        /// <summary>
        /// This class represents the AnglePerLengthUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AnglePerLengthUom xsd enumeration.")]
        public enum AnglePerLengthUom 
        {
        
          [XmlEnum("rad/m")]
          radm,
        
          [XmlEnum("dega/30ft")]
          dega30ft,
        
          [XmlEnum("dega/ft")]
          degaft,
        
          [XmlEnum("dega/100ft")]
          dega100ft,
        
          [XmlEnum("dega/m")]
          degam,
        
          [XmlEnum("dega/30m")]
          dega30m,
        
          [XmlEnum("rad/ft")]
          radft
        }
        /// <summary>
        /// This class represents the AccelerationLinearUom xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AccelerationLinearUom xsd enumeration.")]
        public enum AccelerationLinearUom 
        {
        
          [XmlEnum("m/s2")]
          ms2,
        
          [XmlEnum("cm/s2")]
          cms2,
        
          [XmlEnum("ft/s2")]
          fts2,
        
          Gal,
        
          mgn,
        
          gn,
        
          mGal
        }
        /// <summary>
        /// This class represents the ItemState xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemState xsd enumeration.")]
        public enum ItemState 
        {
        /// <summary>
        /// Actual data measured or entered at the well site.
        /// </summary>
          actual,
        /// <summary>
        /// Model data used for "what if" calculations.
        /// </summary>
          model,
        /// <summary>
        /// A planned object. That is, one which is expected to be executed in the future.
        /// </summary>
          plan,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PrimitiveType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PrimitiveType xsd enumeration.")]
        public enum PrimitiveType 
        {
        
          @string,
        
          boolean,
        
          @float,
        
          @double,
        
          duration,
        
          dateTime,
        
          time,
        
          date,
        
          gYearMonth,
        
          gYear,
        
          gMonthDay,
        
          gDay,
        
          gMonth,
        
          base64Binary,
        
          anyURI,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemsChoiceType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType xsd enumeration.")]
        public enum ItemsChoiceType 
        {
        
          easting,
        
          latitude,
        
          localX,
        
          localY,
        
          longitude,
        
          northing,
        
          projectedX,
        
          projectedY,
        
          southing,
        
          westing
        }
        /// <summary>
        /// This class represents the PrincipalMeridian xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PrincipalMeridian xsd enumeration.")]
        public enum PrincipalMeridian 
        {
        
          [XmlEnum("1st Principal Meridian")]
          Item1stPrincipalMeridian,
        
          [XmlEnum("2nd Principal Meridian")]
          Item2ndPrincipalMeridian,
        
          [XmlEnum("3rd Principal Meridian")]
          Item3rdPrincipalMeridian,
        
          [XmlEnum("4th Principal Meridian")]
          Item4thPrincipalMeridian,
        
          [XmlEnum("5th Principal Meridian")]
          Item5thPrincipalMeridian,
        
          [XmlEnum("6th Principal Meridian")]
          Item6thPrincipalMeridian,
        
          [XmlEnum("Black Hills Meridian")]
          BlackHillsMeridian,
        
          [XmlEnum("Boise Meridian")]
          BoiseMeridian,
        
          [XmlEnum("Choctaw Meridian")]
          ChoctawMeridian,
        
          [XmlEnum("Chickasaw Meridian")]
          ChickasawMeridian,
        
          [XmlEnum("Cimarron Meridian")]
          CimarronMeridian,
        
          [XmlEnum("Copper River Meridian")]
          CopperRiverMeridian,
        
          [XmlEnum("Fairbanks Meridian")]
          FairbanksMeridian,
        
          [XmlEnum("Gila and Salt River Meridian")]
          GilaandSaltRiverMeridian,
        
          [XmlEnum("Humboldt Meridian")]
          HumboldtMeridian,
        
          [XmlEnum("Huntsville Meridian")]
          HuntsvilleMeridian,
        
          [XmlEnum("Indian Meridian")]
          IndianMeridian,
        
          [XmlEnum("Kateel River Meridian")]
          KateelRiverMeridian,
        
          [XmlEnum("Lousiana Meridian")]
          LousianaMeridian,
        
          [XmlEnum("Michigan Meridian")]
          MichiganMeridian,
        
          [XmlEnum("Mount Diablo Meridian")]
          MountDiabloMeridian,
        
          [XmlEnum("New Mexico Meridian")]
          NewMexicoMeridian,
        
          [XmlEnum("Saint Stephens Meridian")]
          SaintStephensMeridian,
        
          [XmlEnum("Saint Helena Meridian")]
          SaintHelenaMeridian,
        
          [XmlEnum("Salt Lake Meridian")]
          SaltLakeMeridian,
        
          [XmlEnum("San Bernardo Meridian")]
          SanBernardoMeridian,
        
          [XmlEnum("Seward Meridian")]
          SewardMeridian,
        
          [XmlEnum("Tallahassee Meridian")]
          TallahasseeMeridian,
        
          [XmlEnum("Uintah Meridian")]
          UintahMeridian,
        
          [XmlEnum("Umiat Meridian")]
          UmiatMeridian,
        
          [XmlEnum("Ute Meridian")]
          UteMeridian,
        
          [XmlEnum("Washington Meridian")]
          WashingtonMeridian,
        
          [XmlEnum("Williamette Meridian")]
          WilliametteMeridian,
        
          [XmlEnum("Wind River Meridian")]
          WindRiverMeridian,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellFluid xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellFluid xsd enumeration.")]
        public enum WellFluid 
        {
        /// <summary>
        /// This is generally an injected fluid.
        /// </summary>
          air,
        /// <summary>
        /// Liquid hydrocarbons produced with natural gas that are separated from the gas by cooling and various other means. Condensate generally has an API gravity of 50 degrees to 120 degrees and is water white, straw, or bluish in color. It is the liquid recovery from a well classified as a gas well. It is generally dissolved in the gaseous state under reservoir conditions but separates as a liquid either in passing up the hole or at the surface. These hydrocarbons, from associated and nonassociated gas well gas, normally are recovered from lease separators or field facilities by mechanical separation.
        /// </summary>
          condensate,
        /// <summary>
        /// The well facility is classified as a dry well. It has not been, nor will it be used to produce or inject any fluids.
        /// </summary>
          dry,
        /// <summary>
        /// The well is classified as a gas well, producing or injecting a hydrocarbon gas. The gas is generally methane, but may have a mixture of other gases also.
        /// </summary>
          gas,
        
          [XmlEnum("gas-water")]
          gaswater,
        
          [XmlEnum("non HC gas")]
          nonHCgas,
        
          [XmlEnum("non HC gas -- CO2")]
          nonHCgasCO2,
        /// <summary>
        /// The liquid hydrocarbon, generally referred to as crude oil.
        /// </summary>
          oil,
        
          [XmlEnum("oil-gas")]
          oilgas,
        
          [XmlEnum("oil-water")]
          oilwater,
        /// <summary>
        /// The gaseous state of water. This is generally an injected fluid, but it is possible that some hydrothermal wells produce steam.
        /// </summary>
          steam,
        /// <summary>
        /// The well is classified as a water well without distinguishing between brine or fresh water.
        /// </summary>
          water,
        
          [XmlEnum("water -- brine")]
          waterbrine,
        
          [XmlEnum("water -- fresh water")]
          waterfreshwater,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellDirection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellDirection xsd enumeration.")]
        public enum WellDirection 
        {
        
          [XmlEnum("huff-n-puff")]
          huffnpuff,
        /// <summary>
        /// The well facility is injecting fluids into the subsurface.
        /// </summary>
          injector,
        /// <summary>
        /// The well facility is producing fluids from the subsurface.
        /// </summary>
          producer,
        /// <summary>
        /// The flow direction of the fluids is variable, but not on a regular basis as is the case with the huff-n-puff flow.
        /// </summary>
          uncertain,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ElevCodeEnum xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ElevCodeEnum xsd enumeration.")]
        public enum ElevCodeEnum 
        {
        /// <summary>
        /// casing flange: A flange affixed to the top of the casing string used to attach production equipment.
        /// </summary>
          CF,
        /// <summary>
        /// crown valve
        /// </summary>
          CV,
        /// <summary>
        /// derrick floor
        /// </summary>
          DF,
        /// <summary>
        /// ground level
        /// </summary>
          GL,
        /// <summary>
        /// kelly bushing
        /// </summary>
          KB,
        /// <summary>
        /// rotary bushing
        /// </summary>
          RB,
        /// <summary>
        /// rotary table
        /// </summary>
          RT,
        /// <summary>
        /// sea floor
        /// </summary>
          SF,
        /// <summary>
        /// Lowest Astronomical Tide. The lowest tide level over the duration of the National Tidal Datum Epoch (19 years).
        /// </summary>
          LAT,
        /// <summary>
        /// Mean Sea Level - A tidal datum. The arithmetic mean of hourly heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          SL,
        /// <summary>
        /// Mean Higher High Water - A tidal datum. The average of the higher high water height of each tidal day observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHHW,
        /// <summary>
        /// Mean High Water - A tidal datum. The average of all the high water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHW,
        /// <summary>
        /// Mean Lower Low Water - A tidal datum. The average of the lower low water height of each tidal day observed over the National Tidal Datum Epoch (19 years ).
        /// </summary>
          MLLW,
        /// <summary>
        /// Mean Low Water - A tidal datum. The average of all the low water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MLW,
        /// <summary>
        /// Mean Tide Level - A tidal datum. The arithmetic mean of mean high water and mean low water. Same as half-tide level.
        /// </summary>
          MTL,
        /// <summary>
        /// kickoff point
        /// </summary>
          KO,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the GeodeticDatum xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the GeodeticDatum xsd enumeration.")]
        public enum GeodeticDatum 
        {
        /// <summary>
        /// Adindian ellipsoid=CL80 region="Sudan, Ethiopia"
        /// </summary>
          ADND,
        /// <summary>
        /// ARC 1950 ellipsoid=CL80B region="Southern Africa"
        /// </summary>
          ARC50,
        /// <summary>
        /// Australian ellipsoid=GRS67 region="Australia Geodetic"
        /// </summary>
          AUSG,
        /// <summary>
        /// Camp Area Astro ellipsoid=INT24 region=Antarctica 
        /// </summary>
          CAA,
        /// <summary>
        /// Chau Astro ellipsoid=INT24 region=Paraguay 
        /// </summary>
          CHAS,
        /// <summary>
        /// Corrego Alegre ellipsoid=INT24 region=INT24 
        /// </summary>
          CORAL,
        /// <summary>
        /// European 1950 ellipsoid=INT24 region="Europe, Middle East, North Africa"
        /// </summary>
          ED50,
        /// <summary>
        /// European 1987 ellipsoid=INT24 region="Europe, Middle East, North Africa"
        /// </summary>
          ED87,
        /// <summary>
        /// Ireland 1965 ellipsoid=AIRY_MOD region=Ireland 
        /// </summary>
          ERIN65,
        /// <summary>
        /// Geodetic Datum 1949 ellipsoid=INT24 region="New Zealand"
        /// </summary>
          GD49,
        /// <summary>
        /// Ghana ellipsoid=WAR24 region=Ghana 
        /// </summary>
          GHANA,
        /// <summary>
        /// Guam 1963 ellipsoid=CL66 region="Marianas Islands"
        /// </summary>
          GUAM63,
        /// <summary>
        /// Hjorsey 1955 ellipsoid=INT24 region=Iceland 
        /// </summary>
          HJRS55,
        /// <summary>
        /// Hu-Tzu-Shan ellipsoid=INT24 region=Taiwan 
        /// </summary>
          HTS,
        /// <summary>
        /// Campo Inchauspe ellipsoid=INT24 region=Argentina 
        /// </summary>
          INCH,
        /// <summary>
        /// Indian 'Kalimpur' ellipsoid=EVER region=India 
        /// </summary>
          INDIA1,
        /// <summary>
        /// Indian 'Kalimpur' ellipsoid=INT24 region=India 
        /// </summary>
          INDIA2,
        /// <summary>
        /// Indonesia 1974 ellipsoid=GRS67 region=Indonesia 
        /// </summary>
          INDNS74,
        /// <summary>
        /// Liberia 1964 ellipsoid=CL80 region=Liberia 
        /// </summary>
          LIB64,
        /// <summary>
        /// Luzon ellipsoid=CL66 region=Philippines 
        /// </summary>
          LUZON,
        /// <summary>
        /// Merchich ellipsoid=CL80A region=Morocco 
        /// </summary>
          MRCH,
        /// <summary>
        /// North American 'Meades Ranch' ellipsoid=CL66 region="North America"
        /// </summary>
          NAD27,
        /// <summary>
        /// North American Datum of 1983 ellipsoid=GRS80 region="Canada, Cuba, U.S., Caribbean"
        /// </summary>
          NAD83,
        /// <summary>
        /// Nigeria ellipsoid=CL80 region=Nigeria 
        /// </summary>
          NGRA,
        /// <summary>
        /// 
        /// </summary>
          None,
        /// <summary>
        /// Naparima ellipsoid=INT24 region="Trinidad and Tobago"
        /// </summary>
          NPRM,
        /// <summary>
        /// Ordnance Survey of Great Britain 1936 ellipsoid=AIRY region="Great Britain, Northern Ireland"
        /// </summary>
          OSGB36,
        /// <summary>
        /// European 'Pelmert Tower, Potsdam' ellipsoid=INT24 region="Most of Eurasia, Africa"
        /// </summary>
          POTS1,
        /// <summary>
        /// Russian 'Pulkovo' ellipsoid=BESS41 
        /// </summary>
          PULK1,
        /// <summary>
        /// Russian 'Pulkovo' ellipsoid=KRSV 
        /// </summary>
          PULK2,
        /// <summary>
        /// Qornoq ellipsoid=INT24 region=Greenland 
        /// </summary>
          QRNQ,
        /// <summary>
        /// Provisional South American, 1956 ellipsoid=INT24 region="Bolivia, Chile, Colombia, Ecuador, Peru, Venezuela, the Guianas"
        /// </summary>
          SA56,
        /// <summary>
        /// Sierra Leone 1960 ellipsoid=CL80 region="Sierra Leone"
        /// </summary>
          SRL60,
        /// <summary>
        /// Tananarive (Antananarivo) Obsv. 1925T ellipsoid=INT24 region="Malagasy Republic"
        /// </summary>
          TNRV25,
        /// <summary>
        /// Tokyo ellipsoid=BESS41 region=Japan
        /// </summary>
          TOKYO,
        /// <summary>
        /// Datum defined elsewhere
        /// </summary>
          UserDefined,
        /// <summary>
        /// Voirol ellipsoid=CL80 region="Algeria, Tunisia"
        /// </summary>
          VROL,
        /// <summary>
        /// World Geodetic System 1972 ellipsoid=WGS72
        /// </summary>
          WGS72,
        /// <summary>
        /// World Geodetic System 1984 ellipsoid=WGS84 region="Sino-Soviet Bloc, SW Asia, Hydrographic, Aeronautical"
        /// </summary>
          WGS84,
        /// <summary>
        /// Yacare ellipsoid=INT24 region=Uruguay
        /// </summary>
          YACR,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Ellipsoid xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the Ellipsoid xsd enumeration.")]
        public enum Ellipsoid 
        {
        /// <summary>
        /// Australian Old
        /// </summary>
          AGD66,
        /// <summary>
        /// Modified Airy
        /// </summary>
          AIRY_MOD,
        /// <summary>
        /// Airy 1830
        /// </summary>
          AIRY30,
        /// <summary>
        /// Airy 1849
        /// </summary>
          AIRY49,
        /// <summary>
        /// Australian National Same as KAU63 and SA69
        /// </summary>
          AUST_NAT,
        
          [XmlEnum("BESL-DHD")]
          BESLDHD,
        
          [XmlEnum("BESL-NGL")]
          BESLNGL,
        
          [XmlEnum("BESL-RT9")]
          BESLRT9,
        /// <summary>
        /// Bessel 1841
        /// </summary>
          BESS41,
        /// <summary>
        /// Bessel 1841 for Namibia
        /// </summary>
          BESSNAM,
        /// <summary>
        /// BOGOTA (International 1924)
        /// </summary>
          BOGOTA,
        /// <summary>
        /// Clarke 1858
        /// </summary>
          CL58,
        
          [XmlEnum("CL58-1")]
          CL581,
        /// <summary>
        /// Clarke 1866
        /// </summary>
          CL66,
        
          [XmlEnum("CL66-M")]
          CL66M,
        /// <summary>
        /// Clarke 1880
        /// </summary>
          CL80,
        
          [XmlEnum("CL80-A")]
          CL80A,
        
          [XmlEnum("CL80-B")]
          CL80B,
        
          [XmlEnum("CL80-I")]
          CL80I,
        
          [XmlEnum("CL80-J")]
          CL80J,
        
          [XmlEnum("CL80-M")]
          CL80M,
        
          [XmlEnum("CL80-P")]
          CL80P,
        /// <summary>
        /// CAMPO INCH (International 1924)
        /// </summary>
          CMPOINCH,
        /// <summary>
        /// Danish
        /// </summary>
          DAN,
        /// <summary>
        /// DELAMBRE 1810 
        /// </summary>
          DELA,
        /// <summary>
        /// ED50 (International 1924)
        /// </summary>
          ED50,
        /// <summary>
        /// EGYPT07 (Helmert 1906)
        /// </summary>
          EGYPT07,
        /// <summary>
        /// Everest 1830 - Indian
        /// </summary>
          EVER,
        /// <summary>
        /// Everest 1948
        /// </summary>
          EVER48,
        /// <summary>
        /// Everest 1956
        /// </summary>
          EVER56,
        /// <summary>
        /// Everest 1969
        /// </summary>
          EVER69,
        
          [XmlEnum("EVER-BR")]
          EVERBR,
        /// <summary>
        /// Modified Everest
        /// </summary>
          EVERMOD,
        
          [XmlEnum("EVER-P")]
          EVERP,
        
          [XmlEnum("EVER-TM")]
          EVERTM,
        /// <summary>
        /// Everest - Timbali 
        /// </summary>
          EVTM,
        /// <summary>
        /// "Fischer 1960 aka ""Mercury"""
        /// </summary>
          FISC60,
        /// <summary>
        /// Fischer 1960 Modified
        /// </summary>
          FISC60MOD,
        /// <summary>
        /// "Fischer 1968 aka ""Modified Mercury"""
        /// </summary>
          FISC68,
        /// <summary>
        /// "Modified Fischer 1960 aka ""South Asia"""
        /// </summary>
          FISCMOD,
        /// <summary>
        /// GDA94 - Australia
        /// </summary>
          GDA94,
        /// <summary>
        /// Geodetic Reference System 1967
        /// </summary>
          GRS67,
        /// <summary>
        /// Geodetic Reference System 1980
        /// </summary>
          GRS80,
        /// <summary>
        /// Hayford 1909
        /// </summary>
          HAY09,
        /// <summary>
        /// Heiskanen 1929
        /// </summary>
          HEIS,
        /// <summary>
        /// Helmert 1906
        /// </summary>
          HEL06,
        /// <summary>
        /// Helmert 1907 
        /// </summary>
          HEL07,
        /// <summary>
        /// Hough 1956 
        /// </summary>
          HOUG,
        
          [XmlEnum("IAG-75")]
          IAG75,
        /// <summary>
        /// INDIAN75 (Everest 1930)
        /// </summary>
          INDIAN75,
        
          [XmlEnum("INDO-74")]
          INDO74,
        /// <summary>
        /// International 1924
        /// </summary>
          INT24,
        /// <summary>
        /// IUGG 1967
        /// </summary>
          IUGG67,
        /// <summary>
        /// IUGG 1975
        /// </summary>
          IUGG75,
        /// <summary>
        /// Jeffreys 1948
        /// </summary>
          JEFF48,
        /// <summary>
        /// Kaula 1963 Same as AUST_NAT and SA69
        /// </summary>
          KAU63,
        /// <summary>
        /// Krassovsky
        /// </summary>
          KRSV,
        /// <summary>
        /// MERIT83
        /// </summary>
          MERIT83,
        /// <summary>
        /// NAD27 (Clarke 1866)
        /// </summary>
          NAD27,
        /// <summary>
        /// NAHRAN (Clarke 1880)
        /// </summary>
          NAHRAN,
        /// <summary>
        /// New International 1967
        /// </summary>
          NEWINT67,
        
          [XmlEnum("NWL-10D")]
          NWL10D,
        
          [XmlEnum("NWL-9D")]
          NWL9D,
        /// <summary>
        /// OSGB36 (Airy 1830)
        /// </summary>
          OSGB36,
        /// <summary>
        /// OSU86F
        /// </summary>
          OSU86F,
        /// <summary>
        /// OSU91A
        /// </summary>
          OSU91A,
        
          [XmlEnum("PLESSIS-1817")]
          PLESSIS1817,
        /// <summary>
        /// PSAD56 (International 1924)
        /// </summary>
          PSAD56,
        /// <summary>
        /// Pointe Noire 1948
        /// </summary>
          PTNOIRE,
        /// <summary>
        /// South American 1969
        /// </summary>
          SA69,
        /// <summary>
        /// Sphere of radius 6370997
        /// </summary>
          SPHR,
        /// <summary>
        /// Struve 1860
        /// </summary>
          STRU,
        /// <summary>
        /// Walbeck
        /// </summary>
          WALB,
        /// <summary>
        /// War Office 1924
        /// </summary>
          WAR24,
        /// <summary>
        /// World Geodetic System 1960
        /// </summary>
          WGS60,
        /// <summary>
        /// World Geodetic System 1966
        /// </summary>
          WGS66,
        /// <summary>
        /// World Geodetic System 1972
        /// </summary>
          WGS72,
        /// <summary>
        /// World Geodetic System 1984
        /// </summary>
          WGS84,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Projection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the Projection xsd enumeration.")]
        public enum Projection 
        {
        
          [XmlEnum("Albers equal area")]
          Albersequalarea,
        
          [XmlEnum("azimuthal equidistant")]
          azimuthalequidistant,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-CASSINI
        /// </summary>
          Cassini,
        
          [XmlEnum("equidistant conic")]
          equidistantconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-EQUIRECTANGULAR
        /// </summary>
          equirectangular,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-GNOMONIC
        /// </summary>
          gnomonic,
        
          [XmlEnum("Lambert azimuthal")]
          Lambertazimuthal,
        
          [XmlEnum("Lambert conformal conic")]
          Lambertconformalconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-MERCATOR
        /// </summary>
          Mercator,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-MILLER
        /// </summary>
          Miller,
        
          [XmlEnum("oblique Mercator")]
          obliqueMercator,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-ORTHO
        /// </summary>
          orthographic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-PERSPECTIVE
        /// </summary>
          perspective,
        
          [XmlEnum("polar stereographic")]
          polarstereographic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-POLYCONIC
        /// </summary>
          polyconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-SINUSOIDAL
        /// </summary>
          sinusoidal,
        
          [XmlEnum("state plane")]
          stateplane,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-STEREO
        /// </summary>
          stereographic,
        
          [XmlEnum("transverse Mercator")]
          transverseMercator,
        
          [XmlEnum("universal transverse Mercator")]
          universaltransverseMercator,
        
          [XmlEnum("user defined")]
          userdefined,
        
          [XmlEnum("Van der Grinten")]
          VanderGrinten,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ProjectionVariantsObliqueMercator xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ProjectionVariantsObliqueMercator xsd enumeration.")]
        public enum ProjectionVariantsObliqueMercator 
        {
        /// <summary>
        /// 
        /// </summary>
          @default,
        /// <summary>
        /// 
        /// </summary>
          rectified,
        
          [XmlEnum("rectified skew")]
          rectifiedskew,
        
          [XmlEnum("rectified skew center origin")]
          rectifiedskewcenterorigin,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NADTypes xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the NADTypes xsd enumeration.")]
        public enum NADTypeList 
        {
        /// <summary>
        /// 
        /// </summary>
          NAD27,
        /// <summary>
        /// 
        /// </summary>
          NAD83,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Hemispheres xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the Hemispheres xsd enumeration.")]
        public enum HemisphereList 
        {
        /// <summary>
        /// Northern hemisphere.
        /// </summary>
          northern,
        /// <summary>
        /// Southern hemisphere.
        /// </summary>
          southern,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemChoiceType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType xsd enumeration.")]
        public enum ItemChoiceType 
        {
        
          geodeticCRS,
        
          geographic,
        
          localCRS,
        
          mapProjection,
        
          mapProjectionCRS
        }
        /// <summary>
        /// This class represents the HoleCasingType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the HoleCasingType xsd enumeration.")]
        public enum HoleCasingType 
        {
        
          [XmlEnum("blow out preventer")]
          blowoutpreventer,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// 
        /// </summary>
          conductor,
        
          [XmlEnum("curved conductor")]
          curvedconductor,
        /// <summary>
        /// 
        /// </summary>
          liner,
        
          [XmlEnum("open hole")]
          openhole,
        /// <summary>
        /// 
        /// </summary>
          riser,
        /// <summary>
        /// 
        /// </summary>
          tubing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DeflectionMethod xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DeflectionMethod xsd enumeration.")]
        public enum DeflectionMethod 
        {
        
          [XmlEnum("point bit")]
          pointbit,
        
          [XmlEnum("push bit")]
          pushbit
        }
        /// <summary>
        /// This class represents the MeasurementType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MeasurementType xsd enumeration.")]
        public enum MeasurementType 
        {
        /// <summary>
        /// Output from an accelerometer on a logging tool.
        /// </summary>
          acceleration,
        
          [XmlEnum("acoustic caliper")]
          acousticcaliper,
        
          [XmlEnum("acoustic casing collar locator")]
          acousticcasingcollarlocator,
        
          [XmlEnum("acoustic impedance")]
          acousticimpedance,
        
          [XmlEnum("acoustic porosity")]
          acousticporosity,
        
          [XmlEnum("acoustic velocity")]
          acousticvelocity,
        
          [XmlEnum("acoustic wave matrix travel time")]
          acousticwavematrixtraveltime,
        
          [XmlEnum("acoustic wave travel time")]
          acousticwavetraveltime,
        /// <summary>
        /// Any measurement of the maximum departure of a wave from an average value.
        /// </summary>
          amplitude,
        
          [XmlEnum("amplitude of acoustic wave")]
          amplitudeofacousticwave,
        
          [XmlEnum("amplitude of E-M wave")]
          amplitudeofEMwave,
        
          [XmlEnum("amplitude ratio")]
          amplituderatio,
        /// <summary>
        /// A particular extent of space or surface.
        /// </summary>
          area,
        /// <summary>
        /// The amount of reduction in the amplitude of a wave.
        /// </summary>
          attenuation,
        
          [XmlEnum("attenuation of acoustic wave")]
          attenuationofacousticwave,
        
          [XmlEnum("attenuation of E-M wave")]
          attenuationofEMwave,
        /// <summary>
        /// A general classification for measurements which are very specialized and not normally accessed by petrophysicists.
        /// </summary>
          auxiliary,
        
          [XmlEnum("average porosity")]
          averageporosity,
        /// <summary>
        /// In the horizontal plane, it is the clockwise angle of departure from magnetic north (while looking down hole).
        /// </summary>
          azimuth,
        
          [XmlEnum("barite mud correction")]
          baritemudcorrection,
        
          [XmlEnum("bed thickness correction")]
          bedthicknesscorrection,
        
          [XmlEnum("bit size")]
          bitsize,
        /// <summary>
        /// A well log trace which has been edited to reflect sharp bed boundaries. The trace has a square wave appearance.
        /// </summary>
          blocked,
        
          [XmlEnum("borehole environment correction")]
          boreholeenvironmentcorrection,
        
          [XmlEnum("borehole fluid composition correction")]
          boreholefluidcompositioncorrection,
        
          [XmlEnum("borehole fluid correction")]
          boreholefluidcorrection,
        
          [XmlEnum("borehole size correction")]
          boreholesizecorrection,
        
          [XmlEnum("bromide mud correction")]
          bromidemudcorrection,
        
          [XmlEnum("bulk compressibility")]
          bulkcompressibility,
        
          [XmlEnum("bulk density")]
          bulkdensity,
        
          [XmlEnum("bulk volume")]
          bulkvolume,
        
          [XmlEnum("bulk volume gas")]
          bulkvolumegas,
        
          [XmlEnum("bulk volume hydrocarbon")]
          bulkvolumehydrocarbon,
        
          [XmlEnum("bulk volume oil")]
          bulkvolumeoil,
        
          [XmlEnum("bulk volume water")]
          bulkvolumewater,
        
          [XmlEnum("C/O ratio")]
          COratio,
        /// <summary>
        /// A well log used to record hole diameter (open or cased).
        /// </summary>
          caliper,
        
          [XmlEnum("cased hole correction")]
          casedholecorrection,
        
          [XmlEnum("casing collar locator")]
          casingcollarlocator,
        
          [XmlEnum("casing correction")]
          casingcorrection,
        
          [XmlEnum("casing diameter correction")]
          casingdiametercorrection,
        
          [XmlEnum("casing inspection")]
          casinginspection,
        
          [XmlEnum("casing thickness correction")]
          casingthicknesscorrection,
        
          [XmlEnum("casing weight correction")]
          casingweightcorrection,
        
          [XmlEnum("cement correction")]
          cementcorrection,
        
          [XmlEnum("cement density correction")]
          cementdensitycorrection,
        
          [XmlEnum("cement evaluation")]
          cementevaluation,
        
          [XmlEnum("cement thickness correction")]
          cementthicknesscorrection,
        
          [XmlEnum("cement type correction")]
          cementtypecorrection,
        
          [XmlEnum("CH density porosity")]
          CHdensityporosity,
        
          [XmlEnum("CH dolomite density porosity")]
          CHdolomitedensityporosity,
        
          [XmlEnum("CH dolomite neutron porosity")]
          CHdolomiteneutronporosity,
        
          [XmlEnum("CH limestone density porosity")]
          CHlimestonedensityporosity,
        
          [XmlEnum("CH limestone neutron porosity")]
          CHlimestoneneutronporosity,
        
          [XmlEnum("CH neutron porosity")]
          CHneutronporosity,
        
          [XmlEnum("CH sandstone density porosity")]
          CHsandstonedensityporosity,
        
          [XmlEnum("CH sandstone neutron porosity")]
          CHsandstoneneutronporosity,
        
          [XmlEnum("compressional wave dolomite porosity")]
          compressionalwavedolomiteporosity,
        
          [XmlEnum("compressional wave limestone porosity")]
          compressionalwavelimestoneporosity,
        
          [XmlEnum("compressional wave matrix travel time")]
          compressionalwavematrixtraveltime,
        
          [XmlEnum("compressional wave sandstone porosity")]
          compressionalwavesandstoneporosity,
        
          [XmlEnum("compressional wave travel time")]
          compressionalwavetraveltime,
        /// <summary>
        /// The property of a medium (solid or fluid) which allows the medium to conduct a form of energy; e.g., electrical conductivity or thermal conductivity.
        /// </summary>
          conductivity,
        
          [XmlEnum("conductivity from attenuation")]
          conductivityfromattenuation,
        
          [XmlEnum("conductivity from phase shift")]
          conductivityfromphaseshift,
        
          [XmlEnum("connate water conductivity")]
          connatewaterconductivity,
        
          [XmlEnum("connate water resistivity")]
          connatewaterresistivity,
        
          [XmlEnum("conventional core porosity")]
          conventionalcoreporosity,
        
          [XmlEnum("core matrix density")]
          corematrixdensity,
        
          [XmlEnum("core permeability")]
          corepermeability,
        
          [XmlEnum("core porosity")]
          coreporosity,
        /// <summary>
        /// A trace which has had corrections applied; e.g. environmental corrections.
        /// </summary>
          corrected,
        
          [XmlEnum("count rate")]
          countrate,
        
          [XmlEnum("count rate ratio")]
          countrateratio,
        
          [XmlEnum("cross plot porosity")]
          crossplotporosity,
        
          [XmlEnum("decay time")]
          decaytime,
        
          [XmlEnum("deep conductivity")]
          deepconductivity,
        
          [XmlEnum("deep induction conductivity")]
          deepinductionconductivity,
        
          [XmlEnum("deep induction resistivity")]
          deepinductionresistivity,
        
          [XmlEnum("deep laterolog conductivity")]
          deeplaterologconductivity,
        
          [XmlEnum("deep laterolog resistivity")]
          deeplaterologresistivity,
        
          [XmlEnum("deep resistivity")]
          deepresistivity,
        /// <summary>
        /// Mass per unit Volume - well logging units are usually gm/cc.
        /// </summary>
          density,
        
          [XmlEnum("density porosity")]
          densityporosity,
        /// <summary>
        /// The distance to a point in a wellbore.
        /// </summary>
          depth,
        
          [XmlEnum("depth adjusted")]
          depthadjusted,
        
          [XmlEnum("depth derived from velocity")]
          depthderivedfromvelocity,
        /// <summary>
        /// Departure of a borehole from vertical. Also, the angle measured between the tool axis and vertical.
        /// </summary>
          deviation,
        /// <summary>
        /// Relative permittivity.
        /// </summary>
          dielectric,
        
          [XmlEnum("diffusion correction")]
          diffusioncorrection,
        /// <summary>
        /// The angle that a structural surface, e.g. a bedding or fault plane, makes with the horizontal, measured perpendicular to the strike of the structure.
        /// </summary>
          dip,
        /// <summary>
        /// Any of a number of measurements produced by a tool designed to measure formation dip and borehole characteristics through direct and indirect measurements.
        /// </summary>
          dipmeter,
        
          [XmlEnum("dipmeter conductivity")]
          dipmeterconductivity,
        
          [XmlEnum("dipmeter resistivity")]
          dipmeterresistivity,
        
          [XmlEnum("dolomite acoustic porosity")]
          dolomiteacousticporosity,
        
          [XmlEnum("dolomite density porosity")]
          dolomitedensityporosity,
        
          [XmlEnum("dolomite neutron porosity")]
          dolomiteneutronporosity,
        /// <summary>
        /// A well log trace which has been corrected or adjusted through an editing process.
        /// </summary>
          edited,
        
          [XmlEnum("effective porosity")]
          effectiveporosity,
        
          [XmlEnum("electric current")]
          electriccurrent,
        
          [XmlEnum("electric potential")]
          electricpotential,
        
          [XmlEnum("electromagnetic wave matrix travel time")]
          electromagneticwavematrixtraveltime,
        
          [XmlEnum("electromagnetic wave travel time")]
          electromagneticwavetraveltime,
        /// <summary>
        /// The elemental composition, generally in weight percent, of a formation as calculated from information obtained from a geochemical logging pass; e.g., weight percent of Al, Si, Ca, Fe, etc.
        /// </summary>
          element,
        
          [XmlEnum("elemental ratio")]
          elementalratio,
        /// <summary>
        /// A well log trace which has been filtered to improve its value; e.g. inverse filtering for better resolution.
        /// </summary>
          enhanced,
        /// <summary>
        /// A well log trace which has had a filter applied to it.
        /// </summary>
          filtered,
        /// <summary>
        /// A logging tool to measure the rate and/or direction of fluid flow in a wellbore.
        /// </summary>
          flowmeter,
        
          [XmlEnum("fluid density")]
          fluiddensity,
        
          [XmlEnum("fluid velocity")]
          fluidvelocity,
        
          [XmlEnum("fluid viscosity")]
          fluidviscosity,
        
          [XmlEnum("flushed zone conductivity")]
          flushedzoneconductivity,
        
          [XmlEnum("flushed zone resistivity")]
          flushedzoneresistivity,
        
          [XmlEnum("flushed zone saturation")]
          flushedzonesaturation,
        /// <summary>
        /// Energy exerted or brought to bear.
        /// </summary>
          force,
        
          [XmlEnum("formation density correction")]
          formationdensitycorrection,
        
          [XmlEnum("formation properties correction")]
          formationpropertiescorrection,
        
          [XmlEnum("formation salinity correction")]
          formationsalinitycorrection,
        
          [XmlEnum("formation saturation correction")]
          formationsaturationcorrection,
        
          [XmlEnum("formation volume factor correction")]
          formationvolumefactorcorrection,
        
          [XmlEnum("formation water density correction")]
          formationwaterdensitycorrection,
        
          [XmlEnum("formation water saturation correction")]
          formationwatersaturationcorrection,
        
          [XmlEnum("free fluid index")]
          freefluidindex,
        
          [XmlEnum("friction effect correction")]
          frictioneffectcorrection,
        
          [XmlEnum("gamma ray")]
          gammaray,
        
          [XmlEnum("gamma ray minus uranium")]
          gammarayminusuranium,
        
          [XmlEnum("gas saturation")]
          gassaturation,
        /// <summary>
        /// The measurement of the average density of fluids in a wellbore.
        /// </summary>
          gradiomanometer,
        
          [XmlEnum("high frequency conductivity")]
          highfrequencyconductivity,
        
          [XmlEnum("high frequency electromagnetic")]
          highfrequencyelectromagnetic,
        
          [XmlEnum("high frequency electromagnetic porosity")]
          highfrequencyelectromagneticporosity,
        
          [XmlEnum("high frequency E-M phase shift")]
          highfrequencyEMphaseshift,
        
          [XmlEnum("high frequency resistivity")]
          highfrequencyresistivity,
        
          [XmlEnum("hydrocarbon correction")]
          hydrocarboncorrection,
        
          [XmlEnum("hydrocarbon density correction")]
          hydrocarbondensitycorrection,
        
          [XmlEnum("hydrocarbon gravity correction")]
          hydrocarbongravitycorrection,
        
          [XmlEnum("hydrocarbon saturation")]
          hydrocarbonsaturation,
        
          [XmlEnum("hydrocarbon viscosity correction")]
          hydrocarbonviscositycorrection,
        /// <summary>
        /// The likeness of an object produced by an electrical device.
        /// </summary>
          image,
        
          [XmlEnum("interpretation variable")]
          interpretationvariable,
        
          [XmlEnum("iron mud correction")]
          ironmudcorrection,
        /// <summary>
        /// A well log trace which has had two or more runs spliced together to make a single trace.
        /// </summary>
          joined,
        
          [XmlEnum("KCl mud correction")]
          KClmudcorrection,
        /// <summary>
        /// A measured distance or dimension.
        /// </summary>
          length,
        
          [XmlEnum("limestone acoustic porosity")]
          limestoneacousticporosity,
        
          [XmlEnum("limestone density porosity")]
          limestonedensityporosity,
        
          [XmlEnum("limestone neutron porosity")]
          limestoneneutronporosity,
        
          [XmlEnum("lithology correction")]
          lithologycorrection,
        
          [XmlEnum("log derived permeability")]
          logderivedpermeability,
        
          [XmlEnum("log matrix density")]
          logmatrixdensity,
        
          [XmlEnum("magnetic casing collar locator")]
          magneticcasingcollarlocator,
        
          [XmlEnum("matrix density")]
          matrixdensity,
        
          [XmlEnum("matrix travel time")]
          matrixtraveltime,
        
          [XmlEnum("measured depth")]
          measureddepth,
        
          [XmlEnum("mechanical caliper")]
          mechanicalcaliper,
        
          [XmlEnum("mechanical casing collar locator")]
          mechanicalcasingcollarlocator,
        
          [XmlEnum("medium conductivity")]
          mediumconductivity,
        
          [XmlEnum("medium induction conductivity")]
          mediuminductionconductivity,
        
          [XmlEnum("medium induction resistivity")]
          mediuminductionresistivity,
        
          [XmlEnum("medium laterolog conductivity")]
          mediumlaterologconductivity,
        
          [XmlEnum("medium laterolog resistivity")]
          mediumlaterologresistivity,
        
          [XmlEnum("medium resistivity")]
          mediumresistivity,
        
          [XmlEnum("micro conductivity")]
          microconductivity,
        
          [XmlEnum("micro inverse conductivity")]
          microinverseconductivity,
        
          [XmlEnum("micro inverse resistivity")]
          microinverseresistivity,
        
          [XmlEnum("micro laterolog conductivity")]
          microlaterologconductivity,
        
          [XmlEnum("micro laterolog resistivity")]
          microlaterologresistivity,
        
          [XmlEnum("micro normal conductivity")]
          micronormalconductivity,
        
          [XmlEnum("micro normal resistivity")]
          micronormalresistivity,
        
          [XmlEnum("micro resistivity")]
          microresistivity,
        
          [XmlEnum("micro spherically focused conductivity")]
          microsphericallyfocusedconductivity,
        
          [XmlEnum("micro spherically focused resistivity")]
          microsphericallyfocusedresistivity,
        /// <summary>
        /// The mineral composition, generally in weight percent, of a formation as calculated from elemental information obtained from a geochemical logging pass; e.g., weight percent of dolomite, calcite, illite, quartzite, etc.
        /// </summary>
          mineral,
        
          [XmlEnum("mud cake conductivity")]
          mudcakeconductivity,
        
          [XmlEnum("mud cake correction")]
          mudcakecorrection,
        
          [XmlEnum("mud cake density correction")]
          mudcakedensitycorrection,
        
          [XmlEnum("mud cake resistivity")]
          mudcakeresistivity,
        
          [XmlEnum("mud cake resistivity correction")]
          mudcakeresistivitycorrection,
        
          [XmlEnum("mud cake thickness correction")]
          mudcakethicknesscorrection,
        
          [XmlEnum("mud composition correction")]
          mudcompositioncorrection,
        
          [XmlEnum("mud conductivity")]
          mudconductivity,
        
          [XmlEnum("mud filtrate conductivity")]
          mudfiltrateconductivity,
        
          [XmlEnum("mud filtrate correction")]
          mudfiltratecorrection,
        
          [XmlEnum("mud filtrate density correction")]
          mudfiltratedensitycorrection,
        
          [XmlEnum("mud filtrate resistivity")]
          mudfiltrateresistivity,
        
          [XmlEnum("mud filtrate resistivity correction")]
          mudfiltrateresistivitycorrection,
        
          [XmlEnum("mud filtrate salinity correction")]
          mudfiltratesalinitycorrection,
        
          [XmlEnum("mud resistivity")]
          mudresistivity,
        
          [XmlEnum("mud salinity correction")]
          mudsalinitycorrection,
        
          [XmlEnum("mud viscosity correction")]
          mudviscositycorrection,
        
          [XmlEnum("mud weight correction")]
          mudweightcorrection,
        
          [XmlEnum("neutron die away time")]
          neutrondieawaytime,
        
          [XmlEnum("neutron porosity")]
          neutronporosity,
        
          [XmlEnum("nuclear caliper")]
          nuclearcaliper,
        
          [XmlEnum("nuclear magnetic decay time")]
          nuclearmagneticdecaytime,
        
          [XmlEnum("nuclear magnetism log permeability")]
          nuclearmagnetismlogpermeability,
        
          [XmlEnum("nuclear magnetism porosity")]
          nuclearmagnetismporosity,
        
          [XmlEnum("OH density porosity")]
          OHdensityporosity,
        
          [XmlEnum("OH dolomite density porosity")]
          OHdolomitedensityporosity,
        
          [XmlEnum("OH dolomite neutron porosity")]
          OHdolomiteneutronporosity,
        
          [XmlEnum("OH limestone density porosity")]
          OHlimestonedensityporosity,
        
          [XmlEnum("OH limestone neutron porosity")]
          OHlimestoneneutronporosity,
        
          [XmlEnum("OH neutron porosity")]
          OHneutronporosity,
        
          [XmlEnum("OH sandstone density porosity")]
          OHsandstonedensityporosity,
        
          [XmlEnum("OH sandstone neutron porosity")]
          OHsandstoneneutronporosity,
        
          [XmlEnum("oil based mud correction")]
          oilbasedmudcorrection,
        
          [XmlEnum("oil saturation")]
          oilsaturation,
        /// <summary>
        /// The procedure for introducing holes through casing into a formation so that formation fluids can enter into the casing.
        /// </summary>
          perforating,
        /// <summary>
        /// The permeability of the surrounding formation.
        /// </summary>
          permeability,
        
          [XmlEnum("phase shift")]
          phaseshift,
        
          [XmlEnum("photoelectric absorption")]
          photoelectricabsorption,
        
          [XmlEnum("photoelectric absorption correction")]
          photoelectricabsorptioncorrection,
        
          [XmlEnum("physical measurement correction")]
          physicalmeasurementcorrection,
        
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// The total pore volume occupied by fluid in a rock. Includes isolated nonconnecting pores and volume occupied by absorbed, immobile fluid.
        /// </summary>
          porosity,
        
          [XmlEnum("porosity correction")]
          porositycorrection,
        /// <summary>
        /// The measurement of gamma radiation emitted by potassium.
        /// </summary>
          potassium,
        /// <summary>
        /// The force or thrust exerted upon a surface divided by the area of the surface.
        /// </summary>
          pressure,
        
          [XmlEnum("pressure correction")]
          pressurecorrection,
        /// <summary>
        /// A well log trace which has been processed in some way; e.g., depth adjusted or environmentally corrected.
        /// </summary>
          processed,
        
          [XmlEnum("pulsed neutron porosity")]
          pulsedneutronporosity,
        /// <summary>
        /// Degree of excellence.
        /// </summary>
          quality,
        /// <summary>
        /// A relationship between two values usually expressed as a fraction.
        /// </summary>
          ratio,
        /// <summary>
        /// A well log trace which has not had any processing. In other words, a trace which has not been depth adjusted or environmentally corrected.
        /// </summary>
          raw,
        
          [XmlEnum("relative bearing")]
          relativebearing,
        /// <summary>
        /// The property measuring the resistance to flow of an electrical current.
        /// </summary>
          resistivity,
        
          [XmlEnum("resistivity factor correction")]
          resistivityfactorcorrection,
        
          [XmlEnum("resistivity from attenuation")]
          resistivityfromattenuation,
        
          [XmlEnum("resistivity from phase shift")]
          resistivityfromphaseshift,
        
          [XmlEnum("resistivity phase shift")]
          resistivityphaseshift,
        
          [XmlEnum("resistivity ratio")]
          resistivityratio,
        /// <summary>
        /// The concentration of ions in solution.
        /// </summary>
          salinity,
        /// <summary>
        /// To take a sample of or from something.
        /// </summary>
          sampling,
        
          [XmlEnum("sandstone acoustic porosity")]
          sandstoneacousticporosity,
        
          [XmlEnum("sandstone density porosity")]
          sandstonedensityporosity,
        
          [XmlEnum("sandstone neutron porosity")]
          sandstoneneutronporosity,
        /// <summary>
        /// The fraction or percentage of the pore volume of a rock.
        /// </summary>
          saturation,
        
          [XmlEnum("shale volume")]
          shalevolume,
        
          [XmlEnum("shallow conductivity")]
          shallowconductivity,
        
          [XmlEnum("shallow induction conductivity")]
          shallowinductionconductivity,
        
          [XmlEnum("shallow induction resistivity")]
          shallowinductionresistivity,
        
          [XmlEnum("shallow laterolog conductivity")]
          shallowlaterologconductivity,
        
          [XmlEnum("shallow laterolog resistivity")]
          shallowlaterologresistivity,
        
          [XmlEnum("shallow resistivity")]
          shallowresistivity,
        
          [XmlEnum("shear wave dolomite porosity")]
          shearwavedolomiteporosity,
        
          [XmlEnum("shear wave limestone porosity")]
          shearwavelimestoneporosity,
        
          [XmlEnum("shear wave matrix travel time")]
          shearwavematrixtraveltime,
        
          [XmlEnum("shear wave sandstone porosity")]
          shearwavesandstoneporosity,
        
          [XmlEnum("shear wave travel time")]
          shearwavetraveltime,
        /// <summary>
        /// A well log trace which has had its original values shifted by some factor; e.g., added or multiplied by a constant.
        /// </summary>
          shifted,
        
          [XmlEnum("sidewall core porosity")]
          sidewallcoreporosity,
        /// <summary>
        /// The macroscopic capture cross section, i.e. the effective cross-sectional area per unit volume for the capture of neutrons.
        /// </summary>
          sigma,
        
          [XmlEnum("sigma formation")]
          sigmaformation,
        
          [XmlEnum("sigma gas")]
          sigmagas,
        
          [XmlEnum("sigma hydrocarbon")]
          sigmahydrocarbon,
        
          [XmlEnum("sigma matrix")]
          sigmamatrix,
        
          [XmlEnum("sigma oil")]
          sigmaoil,
        
          [XmlEnum("sigma water")]
          sigmawater,
        
          [XmlEnum("slippage velocity correction")]
          slippagevelocitycorrection,
        /// <summary>
        /// A well log trace which has been filtered to smooth, or average the trace.
        /// </summary>
          smoothed,
        
          [XmlEnum("spectral gamma ray")]
          spectralgammaray,
        
          [XmlEnum("spherically focused conductivity")]
          sphericallyfocusedconductivity,
        
          [XmlEnum("spherically focused resistivity")]
          sphericallyfocusedresistivity,
        
          [XmlEnum("spontaneous potential")]
          spontaneouspotential,
        
          [XmlEnum("spreading loss correction")]
          spreadinglosscorrection,
        
          [XmlEnum("synthetic well log trace")]
          syntheticwelllogtrace,
        /// <summary>
        /// A temperature measurement.
        /// </summary>
          temperature,
        
          [XmlEnum("temperature correction")]
          temperaturecorrection,
        /// <summary>
        /// The tension on the wireline cable while logging.
        /// </summary>
          tension,
        
          [XmlEnum("Th/K ratio")]
          ThKratio,
        /// <summary>
        /// The measurement of gamma radiation emitted by thorium.
        /// </summary>
          thorium,
        /// <summary>
        /// A measured or measurable period.
        /// </summary>
          time,
        
          [XmlEnum("tool diameter correction")]
          tooldiametercorrection,
        
          [XmlEnum("tool eccentricity correction")]
          tooleccentricitycorrection,
        
          [XmlEnum("total gamma ray")]
          totalgammaray,
        
          [XmlEnum("total porosity")]
          totalporosity,
        
          [XmlEnum("tracer survey")]
          tracersurvey,
        
          [XmlEnum("travel time")]
          traveltime,
        
          [XmlEnum("true conductivity")]
          trueconductivity,
        
          [XmlEnum("true resistivity")]
          trueresistivity,
        
          [XmlEnum("true vertical depth")]
          trueverticaldepth,
        
          [XmlEnum("tube wave dolomite porosity")]
          tubewavedolomiteporosity,
        
          [XmlEnum("tube wave limestone porosity")]
          tubewavelimestoneporosity,
        
          [XmlEnum("tube wave matrix travel time")]
          tubewavematrixtraveltime,
        
          [XmlEnum("tube wave sandstone porosity")]
          tubewavesandstoneporosity,
        
          [XmlEnum("tube wave travel time")]
          tubewavetraveltime,
        /// <summary>
        /// The measurement of gamma radiation emitted by uranium.
        /// </summary>
          uranium,
        /// <summary>
        /// directional speed
        /// </summary>
          velocity,
        /// <summary>
        /// cubic capacity
        /// </summary>
          volume,
        
          [XmlEnum("water based fluid correction")]
          waterbasedfluidcorrection,
        
          [XmlEnum("water holdup correction")]
          waterholdupcorrection,
        
          [XmlEnum("water saturated conductivity")]
          watersaturatedconductivity,
        
          [XmlEnum("water saturated resistivity")]
          watersaturatedresistivity,
        
          [XmlEnum("water saturation")]
          watersaturation,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the HoleOpenerType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the HoleOpenerType xsd enumeration.")]
        public enum HoleOpenerType 
        {
        
          [XmlEnum("under-reamer")]
          underreamer,
        
          [XmlEnum("fixed blade")]
          fixedblade,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BladeShapeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BladeShapeType xsd enumeration.")]
        public enum BladeShapeType 
        {
        /// <summary>
        /// 
        /// </summary>
          dynamic,
        /// <summary>
        /// 
        /// </summary>
          melon,
        /// <summary>
        /// 
        /// </summary>
          spiral,
        /// <summary>
        /// 
        /// </summary>
          straight,
        /// <summary>
        /// 
        /// </summary>
          variable,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BladeType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BladeType xsd enumeration.")]
        public enum BladeType 
        {
        
          [XmlEnum("clamp-on")]
          clampon,
        /// <summary>
        /// 
        /// </summary>
          integral,
        /// <summary>
        /// 
        /// </summary>
          sleeve,
        /// <summary>
        /// 
        /// </summary>
          welded,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BearingType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BearingType xsd enumeration.")]
        public enum BearingType 
        {
        
          [XmlEnum("oil seal")]
          oilseal,
        
          [XmlEnum("mud lube")]
          mudlube,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the JarType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the JarType xsd enumeration.")]
        public enum JarType 
        {
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// 
        /// </summary>
          hydraulic,
        
          [XmlEnum("hydro mechanical")]
          hydromechanical,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the JarAction xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the JarAction xsd enumeration.")]
        public enum JarAction 
        {
        /// <summary>
        /// 
        /// </summary>
          up,
        /// <summary>
        /// 
        /// </summary>
          down,
        /// <summary>
        /// 
        /// </summary>
          both,
        /// <summary>
        /// 
        /// </summary>
          vibrating,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ConnectionPosition xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ConnectionPosition xsd enumeration.")]
        public enum ConnectionPosition 
        {
        /// <summary>
        /// The connection is the same at both ends of the component
        /// </summary>
          both,
        /// <summary>
        /// This connection is only at the bottom of the component
        /// </summary>
          bottom,
        /// <summary>
        /// This connection is only at the top of the component
        /// </summary>
          top,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NozzleType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the NozzleType xsd enumeration.")]
        public enum NozzleType 
        {
        /// <summary>
        /// 
        /// </summary>
          extended,
        /// <summary>
        /// 
        /// </summary>
          normal,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TubularComponent xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TubularComponent xsd enumeration.")]
        public enum TubularComponentType 
        {
        
          [XmlEnum("non-magnetic stabilizer")]
          nonmagneticstabilizer,
        
          [XmlEnum("non-magnetic collar")]
          nonmagneticcollar,
        /// <summary>
        /// Drill string component with blades that help keep the drill string away from the sides of the hole.
        /// </summary>
          stabilizer,
        
          [XmlEnum("adjustable kickoff")]
          adjustablekickoff,
        /// <summary>
        /// A downhole tool used in conjunction with a jar that stores energy for rapid release when the jar is fired. Depending on the operating mode, the energy in tension or compression is stored by means of a mechanical spring or compressible fluid such as nitrogen gas.
        /// </summary>
          accelerator,
        
          [XmlEnum("rotary steering tool")]
          rotarysteeringtool,
        
          [XmlEnum("sub-bar catcher")]
          subbarcatcher,
        
          [XmlEnum("sub-bent")]
          subbent,
        
          [XmlEnum("bit core diamond")]
          bitcorediamond,
        
          [XmlEnum("bit core PDC")]
          bitcorePDC,
        
          [XmlEnum("bit diamond fixed cut")]
          bitdiamondfixedcut,
        
          [XmlEnum("bit insert roller cone")]
          bitinsertrollercone,
        
          [XmlEnum("bit mill tooth roller cone")]
          bitmilltoothrollercone,
        
          [XmlEnum("bit PDC fixed cutter")]
          bitPDCfixedcutter,
        
          [XmlEnum("sub-bit")]
          subbit,
        
          [XmlEnum("bridge plug")]
          bridgeplug,
        /// <summary>
        /// A blank end component substituting for a bit, when re entering an already existing hole to guide the BHA, to avoid inadvertent sidetracks, such as when run below a hole opener in an existing hole.
        /// </summary>
          bullnose,
        
          [XmlEnum("bull plug")]
          bullplug,
        
          [XmlEnum("sub-bumper")]
          subbumper,
        /// <summary>
        /// Tubing used to line the wellbore and protect against pressure differences between the wellbore fluids and the formation.
        /// </summary>
          casing,
        
          [XmlEnum("casing cutter")]
          casingcutter,
        
          [XmlEnum("hanger casing subsea")]
          hangercasingsubsea,
        
          [XmlEnum("hanger casing surface")]
          hangercasingsurface,
        
          [XmlEnum("casing head")]
          casinghead,
        
          [XmlEnum("catch assembly")]
          catchassembly,
        
          [XmlEnum("sub-catcher")]
          subcatcher,
        
          [XmlEnum("sub-circulation")]
          subcirculation,
        
          [XmlEnum("coiled tubing in hole")]
          coiledtubinginhole,
        
          [XmlEnum("coiled tubing on coil")]
          coiledtubingoncoil,
        
          [XmlEnum("drill pipe compressive")]
          drillpipecompressive,
        
          [XmlEnum("sub-cone")]
          subcone,
        
          [XmlEnum("core barrel")]
          corebarrel,
        
          [XmlEnum("core orientation barrel")]
          coreorientationbarrel,
        
          [XmlEnum("sub-crossover")]
          subcrossover,
        
          [XmlEnum("casing crossover")]
          casingcrossover,
        
          [XmlEnum("sub-dart")]
          subdart,
        
          [XmlEnum("die collar")]
          diecollar,
        
          [XmlEnum("die collar LH")]
          diecollarLH,
        
          [XmlEnum("directional guidance system")]
          directionalguidancesystem,
        
          [XmlEnum("drill collar")]
          drillcollar,
        
          [XmlEnum("drill pipe")]
          drillpipe,
        
          [XmlEnum("drill pipe LH")]
          drillpipeLH,
        
          [XmlEnum("drill stem test BHA")]
          drillstemtestBHA,
        
          [XmlEnum("drive pipe")]
          drivepipe,
        
          [XmlEnum("dual catch assembly")]
          dualcatchassembly,
        
          [XmlEnum("extension bowl overshot")]
          extensionbowlovershot,
        
          [XmlEnum("extension sub-overshot")]
          extensionsubovershot,
        
          [XmlEnum("float collar")]
          floatcollar,
        
          [XmlEnum("float shoe")]
          floatshoe,
        
          [XmlEnum("sub-float")]
          subfloat,
        
          [XmlEnum("flow head")]
          flowhead,
        
          [XmlEnum("guide shoe")]
          guideshoe,
        
          [XmlEnum("MWD hang off sub")]
          MWDhangoffsub,
        
          [XmlEnum("heavy weight drill pipe")]
          heavyweightdrillpipe,
        
          [XmlEnum("heavy weight drill pipe LH")]
          heavyweightdrillpipeLH,
        
          [XmlEnum("riser high pressure")]
          riserhighpressure,
        
          [XmlEnum("bit hole opener")]
          bitholeopener,
        
          [XmlEnum("casing inflatable packer")]
          casinginflatablepacker,
        
          [XmlEnum("motor instrumented")]
          motorinstrumented,
        /// <summary>
        /// Hydraulic or spring-loaded component used to free stuck pipe.
        /// </summary>
          jar,
        
          [XmlEnum("sub-jetting")]
          subjetting,
        
          [XmlEnum("junk basket")]
          junkbasket,
        
          [XmlEnum("junk basket reverse circulation")]
          junkbasketreversecirculation,
        
          [XmlEnum("sub-junk")]
          subjunk,
        /// <summary>
        /// Hexagonal or square pipe used to rotate the drill string from the rig floor.
        /// </summary>
          kelly,
        
          [XmlEnum("keyseat wiper tool")]
          keyseatwipertool,
        
          [XmlEnum("landing float collar")]
          landingfloatcollar,
        
          [XmlEnum("lead impression block")]
          leadimpressionblock,
        /// <summary>
        /// Casing or tubing that is hung from the inside of existing casing rather than from the sea bed or surface.
        /// </summary>
          liner,
        
          [XmlEnum("hanger liner")]
          hangerliner,
        /// <summary>
        /// Magnet used to retrieve magnetic debris from the hole.
        /// </summary>
          magnet,
        
          [XmlEnum("riser marine")]
          risermarine,
        
          [XmlEnum("mill dress")]
          milldress,
        
          [XmlEnum("mill flat bottom")]
          millflatbottom,
        
          [XmlEnum("mill hollow")]
          millhollow,
        
          [XmlEnum("mill polish")]
          millpolish,
        
          [XmlEnum("mill section")]
          millsection,
        
          [XmlEnum("mill taper")]
          milltaper,
        
          [XmlEnum("mill washover")]
          millwashover,
        
          [XmlEnum("mill packer picker assembly")]
          millpackerpickerassembly,
        
          [XmlEnum("millout extension")]
          milloutextension,
        
          [XmlEnum("multilateral hanger running tool")]
          multilateralhangerrunningtool,
        
          [XmlEnum("hanger mud line")]
          hangermudline,
        /// <summary>
        /// Downhole tool, usually powered by fluid flow, that rotates the drill bit.
        /// </summary>
          motor,
        
          [XmlEnum("mule shoe")]
          muleshoe,
        
          [XmlEnum("logging while drilling tool")]
          loggingwhiledrillingtool,
        
          [XmlEnum("stabilizer near bit roller reamer")]
          stabilizernearbitrollerreamer,
        
          [XmlEnum("stabilizer near bit")]
          stabilizernearbit,
        
          [XmlEnum("stabilizer non-rotating")]
          stabilizernonrotating,
        
          [XmlEnum("sub-orienting")]
          suborienting,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// Tool used for retrieving pipe that has been lost in the hole.
        /// </summary>
          overshot,
        
          [XmlEnum("overshot LH")]
          overshotLH,
        
          [XmlEnum("oversize lip guide overshot")]
          oversizelipguideovershot,
        /// <summary>
        /// Component that can be inflated so that it seals off a section of the wellbore, typically for formation testing.
        /// </summary>
          packer,
        
          [XmlEnum("polished bore receptacle")]
          polishedborereceptacle,
        
          [XmlEnum("mill pilot")]
          millpilot,
        
          [XmlEnum("pipe cutter")]
          pipecutter,
        
          [XmlEnum("ported stinger")]
          portedstinger,
        
          [XmlEnum("sub-ported")]
          subported,
        
          [XmlEnum("prepacked screens")]
          prepackedscreens,
        
          [XmlEnum("sub-pressure relief")]
          subpressurerelief,
        
          [XmlEnum("riser production")]
          riserproduction,
        
          [XmlEnum("MWD pulser")]
          MWDpulser,
        
          [XmlEnum("sub-pump out")]
          subpumpout,
        
          [XmlEnum("sub-restrictor")]
          subrestrictor,
        
          [XmlEnum("packer retrieve TT squeeze")]
          packerretrieveTTsqueeze,
        
          [XmlEnum("reversing tool")]
          reversingtool,
        
          [XmlEnum("stabilizer string roller reamer")]
          stabilizerstringrollerreamer,
        
          [XmlEnum("packer RTTS")]
          packerRTTS,
        
          [XmlEnum("running tool")]
          runningtool,
        
          [XmlEnum("safety joint")]
          safetyjoint,
        
          [XmlEnum("safety joint LH")]
          safetyjointLH,
        
          [XmlEnum("sub-saver")]
          subsaver,
        
          [XmlEnum("scab liner bit guide")]
          scablinerbitguide,
        /// <summary>
        /// 
        /// </summary>
          scraper,
        /// <summary>
        /// A device for cleaning mud and mud filter cake off of the wellbore wall when cementing casing in the hole to ensure good contact and bonding between the cement and the wellbore wall.
        /// </summary>
          scratchers,
        
          [XmlEnum("casing shoe screw-in")]
          casingshoescrewin,
        
          [XmlEnum("sub-shock")]
          subshock,
        
          [XmlEnum("drill collar short")]
          drillcollarshort,
        
          [XmlEnum("sub-side entry")]
          subsideentry,
        
          [XmlEnum("slotted liner")]
          slottedliner,
        /// <summary>
        /// Fishing tool that attaches to the inside of the stuck pipe by threads or grapples.
        /// </summary>
          spear,
        
          [XmlEnum("stage cement collar")]
          stagecementcollar,
        
          [XmlEnum("motor steerable")]
          motorsteerable,
        
          [XmlEnum("packer storm valve RTTS")]
          packerstormvalveRTTS,
        
          [XmlEnum("stabilizer string")]
          stabilizerstring,
        
          [XmlEnum("surface pipe")]
          surfacepipe,
        
          [XmlEnum("taper tap")]
          tapertap,
        
          [XmlEnum("taper tap LH")]
          tapertapLH,
        
          [XmlEnum("tubing-conveyed perforating gun")]
          tubingconveyedperforatinggun,
        /// <summary>
        /// Drilling tool used to maintain weight on bit.
        /// </summary>
          thruster,
        
          [XmlEnum("tieback polished bore receptacle")]
          tiebackpolishedborereceptacle,
        
          [XmlEnum("tieback stinger")]
          tiebackstinger,
        /// <summary>
        /// Small diameter pipe that is run inside casing or tubing as part of the well completion.
        /// </summary>
          tubing,
        
          [XmlEnum("hanger tubing")]
          hangertubing,
        /// <summary>
        /// Downhole device used for directional drilling, powered by mud circulation that rotates the drill bit while the drill string remains non-rotating
        /// </summary>
          turbine,
        
          [XmlEnum("bit under reamer")]
          bitunderreamer,
        
          [XmlEnum("stabilizer variable blade")]
          stabilizervariableblade,
        
          [XmlEnum("washover pipe")]
          washoverpipe,
        
          [XmlEnum("mill watermelon")]
          millwatermelon,
        /// <summary>
        /// Wedge shaped tool used to drill off in a different direction.
        /// </summary>
          whipstock,
        
          [XmlEnum("whipstock anchor")]
          whipstockanchor,
        
          [XmlEnum("stabilizer turbo back")]
          stabilizerturboback,
        
          [XmlEnum("stabilizer inline")]
          stabilizerinline,
        
          [XmlEnum("stabilizer steerable")]
          stabilizersteerable,
        
          [XmlEnum("sub-stop")]
          substop,
        
          [XmlEnum("sub-filter")]
          subfilter,
        
          [XmlEnum("mill casing cutting")]
          millcasingcutting,
        /// <summary>
        /// Tool used to enlarge the hole.
        /// </summary>
          reamer,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BoxPinConfig xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BoxPinConfig xsd enumeration.")]
        public enum BoxPinConfig 
        {
        
          [XmlEnum("bottom box, top box")]
          bottomboxtopbox,
        
          [XmlEnum("bottom box, top pin")]
          bottomboxtoppin,
        
          [XmlEnum("bottom pin top box")]
          bottompintopbox,
        
          [XmlEnum("bottom pin")]
          bottompin,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MaterialType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MaterialType xsd enumeration.")]
        public enum MaterialType 
        {
        /// <summary>
        /// 
        /// </summary>
          aluminum,
        
          [XmlEnum("beryllium copper")]
          berylliumcopper,
        
          [XmlEnum("chrome alloy")]
          chromealloy,
        /// <summary>
        /// 
        /// </summary>
          composite,
        /// <summary>
        /// 
        /// </summary>
          other,
        
          [XmlEnum("non-magnetic steel")]
          nonmagneticsteel,
        /// <summary>
        /// 
        /// </summary>
          plastic,
        /// <summary>
        /// 
        /// </summary>
          steel,
        
          [XmlEnum("steel alloy")]
          steelalloy,
        /// <summary>
        /// 
        /// </summary>
          titanium,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BitType xsd enumeration.")]
        public enum BitType 
        {
        /// <summary>
        /// Diamond bit
        /// </summary>
          diamond,
        
          [XmlEnum("diamond core")]
          diamondcore,
        
          [XmlEnum("insert roller cone")]
          insertrollercone,
        /// <summary>
        /// polycrystalline diamond compact fixed cutter bit
        /// </summary>
          PDC,
        
          [XmlEnum("PDC core")]
          PDCcore,
        
          [XmlEnum("roller cone")]
          rollercone,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitDullCode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BitDullCode xsd enumeration.")]
        public enum BitDullCode 
        {
        /// <summary>
        /// Broken Cone
        /// </summary>
          BC,
        /// <summary>
        /// Broken teeth/cutters
        /// </summary>
          BT,
        /// <summary>
        /// Balled Up
        /// </summary>
          BU,
        /// <summary>
        /// Cracked Cone
        /// </summary>
          CC,
        /// <summary>
        /// Cone Dragged
        /// </summary>
          CD,
        /// <summary>
        /// Cone Interference
        /// </summary>
          CI,
        /// <summary>
        /// Cored
        /// </summary>
          CR,
        /// <summary>
        /// Chipped Teeth
        /// </summary>
          CT,
        /// <summary>
        /// Erosion
        /// </summary>
          ER,
        /// <summary>
        /// Flat Crested Wear
        /// </summary>
          FC,
        /// <summary>
        /// Heat Checking
        /// </summary>
          HC,
        /// <summary>
        /// Junk Damage
        /// </summary>
          JD,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LC,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LN,
        /// <summary>
        /// Lost Teeth/Cutters
        /// </summary>
          LT,
        /// <summary>
        /// No Dull/No Other Wear
        /// </summary>
          NO,
        /// <summary>
        /// Off-Center Wear
        /// </summary>
          OC,
        /// <summary>
        /// Pinched Bit
        /// </summary>
          PB,
        /// <summary>
        /// Plugged Nozzle
        /// </summary>
          PN,
        /// <summary>
        /// Rounded Gauge
        /// </summary>
          RG,
        /// <summary>
        /// Ring Out
        /// </summary>
          RO,
        /// <summary>
        /// Shirttail Damage
        /// </summary>
          SD,
        /// <summary>
        /// Self-Sharpening Wear
        /// </summary>
          SS,
        /// <summary>
        /// Tracking
        /// </summary>
          TR,
        /// <summary>
        /// WashOut on Bit
        /// </summary>
          WO,
        /// <summary>
        /// Worn Teeth/Cutters
        /// </summary>
          WT,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitReasonPulled xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BitReasonPulled xsd enumeration.")]
        public enum BitReasonPulled 
        {
        /// <summary>
        /// Change Bottom Hole Assembly
        /// </summary>
          BHA,
        /// <summary>
        /// Condition Mud
        /// </summary>
          CM,
        /// <summary>
        /// Core Point
        /// </summary>
          CP,
        /// <summary>
        /// Downhole Motor Failure
        /// </summary>
          DMF,
        /// <summary>
        /// Drill Plug
        /// </summary>
          DP,
        /// <summary>
        /// Drill Stem Test
        /// </summary>
          DST,
        /// <summary>
        /// Downhole Tool Failure
        /// </summary>
          DTF,
        /// <summary>
        /// Formation Change
        /// </summary>
          FM,
        /// <summary>
        /// Hole Problems
        /// </summary>
          HP,
        /// <summary>
        /// Hours on Bit
        /// </summary>
          HR,
        /// <summary>
        /// Run Logs
        /// </summary>
          LOG,
        /// <summary>
        /// Pump Pressure
        /// </summary>
          PP,
        /// <summary>
        /// Penetration Rate
        /// </summary>
          PR,
        /// <summary>
        /// Rig Repairs
        /// </summary>
          RIG,
        /// <summary>
        /// Total Depth/Casing Depth
        /// </summary>
          TD,
        /// <summary>
        /// Torque
        /// </summary>
          TQ,
        /// <summary>
        /// Twist Off
        /// </summary>
          TW,
        /// <summary>
        /// Weather Conditions
        /// </summary>
          WC,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TubularAssembly xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TubularAssembly xsd enumeration.")]
        public enum TubularAssembly 
        {
        /// <summary>
        /// 
        /// </summary>
          drilling,
        
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// 
        /// </summary>
          fishing,
        
          [XmlEnum("condition mud")]
          conditionmud,
        
          [XmlEnum("tubing conveyed logging")]
          tubingconveyedlogging,
        /// <summary>
        /// 
        /// </summary>
          cementing,
        /// <summary>
        /// 
        /// </summary>
          casing,
        
          [XmlEnum("clean out")]
          cleanout,
        
          [XmlEnum("completion or testing")]
          completionortesting,
        /// <summary>
        /// 
        /// </summary>
          coring,
        
          [XmlEnum("hole opening or underreaming")]
          holeopeningorunderreaming,
        
          [XmlEnum("milling or dressing or cutting")]
          millingordressingorcutting,
        
          [XmlEnum("wiper or check or reaming")]
          wiperorcheckorreaming,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TrajStationType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TrajStationType xsd enumeration.")]
        public enum TrajStationType 
        {
        
          [XmlEnum("azimuth on plane")]
          azimuthonplane,
        
          [XmlEnum("buildrate to delta-MD")]
          buildratetodeltaMD,
        
          [XmlEnum("buildrate to INCL")]
          buildratetoINCL,
        
          [XmlEnum("buildrate to MD")]
          buildratetoMD,
        
          [XmlEnum("buildrate and turnrate to AZI")]
          buildrateandturnratetoAZI,
        
          [XmlEnum("buildrate and turnrate to delta-MD")]
          buildrateandturnratetodeltaMD,
        
          [XmlEnum("buildrate and turnrate to INCL")]
          buildrateandturnratetoINCL,
        
          [XmlEnum("buildrate and turnrate to INCL and AZI")]
          buildrateandturnratetoINCLandAZI,
        
          [XmlEnum("buildrate and turnrate to MD")]
          buildrateandturnratetoMD,
        
          [XmlEnum("buildrate and turnrate to TVD")]
          buildrateandturnratetoTVD,
        
          [XmlEnum("buildrate TVD")]
          buildrateTVD,
        
          [XmlEnum("casing MD")]
          casingMD,
        
          [XmlEnum("casing TVD")]
          casingTVD,
        /// <summary>
        /// Section follows a given dogleg severity 
        /// </summary>
          DLS,
        
          [XmlEnum("DLS to AZI and MD")]
          DLStoAZIandMD,
        
          [XmlEnum("DLS to AZI-TVD")]
          DLStoAZITVD,
        
          [XmlEnum("DLS to INCL")]
          DLStoINCL,
        
          [XmlEnum("DLS to INCL and AZI")]
          DLStoINCLandAZI,
        
          [XmlEnum("DLS to INCL and MD")]
          DLStoINCLandMD,
        
          [XmlEnum("DLS to INCL and TVD")]
          DLStoINCLandTVD,
        
          [XmlEnum("DLS to NS, EW and TVD")]
          DLStoNSEWandTVD,
        
          [XmlEnum("DLS and toolface to AZI")]
          DLSandtoolfacetoAZI,
        
          [XmlEnum("DLS and toolface to delta-MD")]
          DLSandtoolfacetodeltaMD,
        
          [XmlEnum("DLS and toolface to INCL")]
          DLSandtoolfacetoINCL,
        
          [XmlEnum("DLS and toolface to INCL-AZI")]
          DLSandtoolfacetoINCLAZI,
        
          [XmlEnum("DLS and toolface to MD")]
          DLSandtoolfacetoMD,
        
          [XmlEnum("DLS and toolface to TVD")]
          DLSandtoolfacetoTVD,
        
          [XmlEnum("formation MD")]
          formationMD,
        
          [XmlEnum("formation TVD")]
          formationTVD,
        
          [XmlEnum("gyro inertial")]
          gyroinertial,
        
          [XmlEnum("gyro MWD")]
          gyroMWD,
        
          [XmlEnum("gyro north seeking")]
          gyronorthseeking,
        
          [XmlEnum("hold to delta-MD")]
          holdtodeltaMD,
        
          [XmlEnum("hold to MD")]
          holdtoMD,
        
          [XmlEnum("hold to TVD")]
          holdtoTVD,
        
          [XmlEnum("INCL, AZI and TVD")]
          INCLAZIandTVD,
        
          [XmlEnum("magnetic multi-shot")]
          magneticmultishot,
        
          [XmlEnum("magnetic MWD")]
          magneticMWD,
        
          [XmlEnum("magnetic single shot")]
          magneticsingleshot,
        
          [XmlEnum("marker MD")]
          markerMD,
        
          [XmlEnum("marker TVD")]
          markerTVD,
        
          [XmlEnum("NS, EW and TVD")]
          NSEWandTVD,
        
          [XmlEnum("target center")]
          targetcenter,
        
          [XmlEnum("target offset")]
          targetoffset,
        
          [XmlEnum("tie in point")]
          tieinpoint,
        
          [XmlEnum("turnrate to AZI")]
          turnratetoAZI,
        
          [XmlEnum("turnrate to delta-MD")]
          turnratetodeltaMD,
        
          [XmlEnum("turnrate to MD")]
          turnratetoMD,
        
          [XmlEnum("turnrate to TVD")]
          turnratetoTVD,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TrajStationStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TrajStationStatus xsd enumeration.")]
        public enum TrajStationStatus 
        {
        
          [XmlEnum("constant tool face")]
          constanttoolface,
        
          [XmlEnum("minimum curvature")]
          minimumcurvature,
        
          tangential,
        
          [XmlEnum("balanced tangential")]
          balancedtangential,
        
          [XmlEnum("average angle")]
          averageangle,
        
          [XmlEnum("radius of curvature")]
          radiusofcurvature,
        
          inertial,
        
          custom,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown,
        /// <summary>
        /// Has not been validated at this point, does not influence position computation for stations below.
        /// </summary>
          open,
        /// <summary>
        /// The quality is not ok, does not influence position computation for stations below.
        /// </summary>
          rejected,
        /// <summary>
        /// Has been validated and is used for position computation, used for position computation for stations below.
        /// </summary>
          position,
        
          [XmlEnum("unknown")]
          unknown1
        }
        /// <summary>
        /// This class represents the ItemChoiceType2 xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType2 xsd enumeration.")]
        public enum ItemChoiceType2 
        {
        
          azi,
        
          depth,
        
          inc,
        
          tvd
        }
        /// <summary>
        /// This class represents the ErrorTermSource xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ErrorTermSource xsd enumeration.")]
        public enum ErrorTermSource 
        {
        /// <summary>
        /// Errors arising from sensors in the survey tool 
        /// </summary>
          sensor,
        
          [XmlEnum("azimuth reference")]
          azimuthreference,
        /// <summary>
        /// Errors arising from external magnetic field influences
        /// </summary>
          magnetic,
        /// <summary>
        /// Errors arising from the attitude of tool relative to borehole
        /// </summary>
          alignment,
        /// <summary>
        /// 
        /// </summary>
          misalignment,
        /// <summary>
        /// Errors arising from the measurement of depth 
        /// </summary>
          depth,
        /// <summary>
        /// Errors arising from the measurement of depth 
        /// </summary>
          reference,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the SurveyToolOperatingMode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SurveyToolOperatingMode xsd enumeration.")]
        public enum SurveyToolOperatingMode 
        {
        /// <summary>
        /// Tool is operating in a stationary mode 
        /// </summary>
          stationary,
        
          [XmlEnum("continuous XY")]
          continuousXY,
        
          [XmlEnum("continuous Z")]
          continuousZ,
        
          [XmlEnum("continuous XYZ")]
          continuousXYZ,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the AuthorizationStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AuthorizationStatus xsd enumeration.")]
        public enum AuthorizationStatus 
        {
        /// <summary>
        /// Not yet approved.
        /// </summary>
          draft,
        /// <summary>
        /// Approved for use.
        /// </summary>
          authorized,
        /// <summary>
        /// Obsolete; there is a newer version available.
        /// </summary>
          superceded,
        /// <summary>
        /// No longer approved in this or any other version.
        /// </summary>
          withdrawn,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ErrorPropagationMode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ErrorPropagationMode xsd enumeration.")]
        public enum ErrorPropagationMode 
        {
        /// <summary>
        /// Bias
        /// </summary>
          B,
        /// <summary>
        /// Random
        /// </summary>
          R,
        /// <summary>
        /// Systematic
        /// </summary>
          S,
        /// <summary>
        /// Well
        /// </summary>
          W,
        /// <summary>
        /// Global
        /// </summary>
          G,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ErrorModelMisalignmentMode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ErrorModelMisalignmentMode xsd enumeration.")]
        public enum ErrorModelMisalignmentMode 
        {
        
          [XmlEnum("1")]
          Item1,
        
          [XmlEnum("2")]
          Item2,
        
          [XmlEnum("3")]
          Item3,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TargetSectionScope xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TargetSectionScope xsd enumeration.")]
        public enum TargetSectionScope 
        {
        /// <summary>
        /// continuous curve
        /// </summary>
          arc,
        /// <summary>
        /// straight line
        /// </summary>
          line,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TargetScope xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TargetScope xsd enumeration.")]
        public enum TargetScope 
        {
        
          [XmlEnum("3D volume")]
          Item3Dvolume,
        /// <summary>
        /// 
        /// </summary>
          ellipsoid,
        /// <summary>
        /// Elliptical targets. Includes circle (semi-major = semi-minor axis). Any sections present are ignored.
        /// </summary>
          elliptical,
        /// <summary>
        /// Boundary Conditions. Use sections to describe, length and width ignore.
        /// </summary>
          hardLine,
        /// <summary>
        /// Includes half circle and polygon. Use sections to describe, length and width ignored. 
        /// </summary>
          irregular,
        
          [XmlEnum("lease line")]
          leaseline,
        /// <summary>
        /// Line target
        /// </summary>
          line,
        /// <summary>
        /// Plane target. Used for horizontal wells. Any sections present are ignored.
        /// </summary>
          plane,
        /// <summary>
        /// Point Target. Any sections present are ignored.
        /// </summary>
          point,
        /// <summary>
        /// Rectangular Targets. Includes square (length = width). Any sections present are ignored.
        /// </summary>
          rectangular,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TargetCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TargetCategory xsd enumeration.")]
        public enum TargetCategory 
        {
        /// <summary>
        /// 
        /// </summary>
          geological,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimProppantType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimProppantType xsd enumeration.")]
        public enum StimProppantType 
        {
        /// <summary>
        /// Sand is a naturally occurring sand grains composed of finely divided rock and mineral particles.
        /// </summary>
          sand,
        
          [XmlEnum("manmade proppant")]
          manmadeproppant,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimAdditiveType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimAdditiveType xsd enumeration.")]
        public enum StimAdditiveType 
        {
        /// <summary>
        /// Substances used to wear away a surface by friction.
        /// </summary>
          abrasive,
        /// <summary>
        /// An accelerator additive.
        /// </summary>
          accelerator,
        
          [XmlEnum("acid inhibitor/retarder")]
          acidinhibitorretarder,
        
          [XmlEnum("acid material")]
          acidmaterial,
        
          [XmlEnum("acid soluble additive")]
          acidsolubleadditive,
        
          [XmlEnum("acid source")]
          acidsource,
        /// <summary>
        /// An activator additive.
        /// </summary>
          activator,
        
          [XmlEnum("additive material")]
          additivematerial,
        /// <summary>
        /// An alcohol additive.
        /// </summary>
          alcohol,
        
          [XmlEnum("anti-Sludge")]
          antiSludge,
        
          [XmlEnum("anti-sulfide cracker")]
          antisulfidecracker,
        
          [XmlEnum("aromatic solvent")]
          aromaticsolvent,
        /// <summary>
        /// A biocide additive, is a chemical substance capable of killing living organisms and to protect them against biological infestation and growth.
        /// </summary>
          biocide,
        
          [XmlEnum("borehole stabilizer")]
          boreholestabilizer,
        /// <summary>
        /// A breaker additive, Chemicals used to reduce the viscosity of fracturing fluids.
        /// </summary>
          breaker,
        
          [XmlEnum("bridging agent")]
          bridgingagent,
        /// <summary>
        /// A buffer additive, A buffer solution is an aqueous solution consisting of a mixture of a weak acid and its conjugate base or a weak base and its conjugate acid. It has the property that the pH of the solution changes very little when a small amount of acid or base is added to it. Buffer solutions are used as a means of keeping pH at a nearly constant value in a wide variety of chemical applications.
        /// </summary>
          buffer,
        
          [XmlEnum("calcium remover")]
          calciumremover,
        
          [XmlEnum("carrying agent")]
          carryingagent,
        /// <summary>
        /// A material used in a process to activate a chemical reaction.
        /// </summary>
          catalyst,
        /// <summary>
        /// Clay is a naturally occurring material composed primarily of fine-grained minerals, which show plasticity through a variable range of water content.
        /// </summary>
          clay,
        
          [XmlEnum("clay control")]
          claycontrol,
        
          [XmlEnum("conductivity enhancer")]
          conductivityenhancer,
        
          [XmlEnum("conformance control")]
          conformancecontrol,
        
          [XmlEnum("conformance caterial")]
          conformancecaterial,
        
          [XmlEnum("corrosion inhibitor")]
          corrosioninhibitor,
        
          [XmlEnum("crosslink enhancer")]
          crosslinkenhancer,
        /// <summary>
        /// A crosslinker additive, The crosslinker reacts with the multiple-strand polymer to couple the molecules, creating a fluid of high, but closely controlled, viscosity.
        /// </summary>
          crosslinker,
        
          [XmlEnum("curing agent")]
          curingagent,
        /// <summary>
        /// A defoaming agent.
        /// </summary>
          defoamer,
        /// <summary>
        /// A demulsifier additive.
        /// </summary>
          demulsifier,
        /// <summary>
        /// A material used to dilute the base product.
        /// </summary>
          diluent,
        /// <summary>
        /// A dispersant agent.
        /// </summary>
          dispersant,
        /// <summary>
        /// A diverter agent.
        /// </summary>
          diverter,
        
          [XmlEnum("elastomeric additive")]
          elastomericadditive,
        /// <summary>
        /// An emulsifier agent.
        /// </summary>
          emulsifier,
        
          [XmlEnum("epoxy resin")]
          epoxyresin,
        
          [XmlEnum("expoxy resin agent")]
          expoxyresinagent,
        /// <summary>
        /// An expander agent.
        /// </summary>
          expander,
        
          [XmlEnum("filtration control")]
          filtrationcontrol,
        /// <summary>
        /// An anti-suspension agent. Used to "knock" solids out of suspension.
        /// </summary>
          flocculant,
        
          [XmlEnum("fluid loss control")]
          fluidlosscontrol,
        
          [XmlEnum("flush/spacer additive")]
          flushspaceradditive,
        /// <summary>
        /// A foamer additive.
        /// </summary>
          foamer,
        
          [XmlEnum("formation sealer")]
          formationsealer,
        
          [XmlEnum("free water control")]
          freewatercontrol,
        
          [XmlEnum("friction reducer")]
          frictionreducer,
        /// <summary>
        /// Any general purpose gas.
        /// </summary>
          gas,
        
          [XmlEnum("gas migration control")]
          gasmigrationcontrol,
        
          [XmlEnum("gel stabilizer")]
          gelstabilizer,
        
          [XmlEnum("gelling agent")]
          gellingagent,
        
          [XmlEnum("H2S scavenger")]
          H2Sscavenger,
        /// <summary>
        /// An additive that intensifies the activity of another.
        /// </summary>
          intensifier,
        
          [XmlEnum("iron control")]
          ironcontrol,
        
          [XmlEnum("lost circulation additive")]
          lostcirculationadditive,
        
          [XmlEnum("low fluid loss control")]
          lowfluidlosscontrol,
        /// <summary>
        /// A lubricant additive.
        /// </summary>
          lubricant,
        
          [XmlEnum("misc additive")]
          miscadditive,
        
          [XmlEnum("mixing fluid")]
          mixingfluid,
        
          [XmlEnum("mud removal additive")]
          mudremovaladditive,
        
          [XmlEnum("mud thinner")]
          mudthinner,
        
          [XmlEnum("mutual solvent")]
          mutualsolvent,
        /// <summary>
        /// An oxidizing agent, (also called an oxidant, oxidizer or oxidiser) can be defined as either: a chemical compound that readily transfers oxygen atoms, or a substance that gains electrons in a redox chemical reaction.
        /// </summary>
          oxydizer,
        
          [XmlEnum("oxygen scavenger")]
          oxygenscavenger,
        
          [XmlEnum("parafin control")]
          parafincontrol,
        
          [XmlEnum("penetrating agent")]
          penetratingagent,
        /// <summary>
        /// A polymer is a large molecule (macromolecule) composed of repeating structural units connected by covalent chemical bonds. A material used in cement and mud slurries as a friction reducer, gelling agent, viscosifier, suspending agent, or fluid loss control agent.
        /// </summary>
          polymer,
        
          [XmlEnum("proppant stabilizer")]
          proppantstabilizer,
        
          [XmlEnum("radioactive tracer")]
          radioactivetracer,
        
          [XmlEnum("raw acid")]
          rawacid,
        
          [XmlEnum("relative perm modifier")]
          relativepermmodifier,
        /// <summary>
        /// A retarder additive.
        /// </summary>
          retarder,
        /// <summary>
        /// A salt additive.
        /// </summary>
          salt,
        /// <summary>
        /// Naturally occurring granular material composed of finely divided rock and mineral particles.
        /// </summary>
          sand,
        
          [XmlEnum("sand control material")]
          sandcontrolmaterial,
        
          [XmlEnum("scale control additive")]
          scalecontroladditive,
        /// <summary>
        /// A special additive, substance added to prevent unwanted change in state of another substance.
        /// </summary>
          stabilizer,
        
          [XmlEnum("strength retrogression")]
          strengthretrogression,
        
          [XmlEnum("sulfide scavenger")]
          sulfidescavenger,
        /// <summary>
        /// A surfactant agent.
        /// </summary>
          surfactant,
        
          [XmlEnum("suspension agent")]
          suspensionagent,
        /// <summary>
        /// A tackiness agent; a substance which is added in order to increase the stickiness of a compound.
        /// </summary>
          tactifier,
        /// <summary>
        /// A viscosifier additive.
        /// </summary>
          viscosifier,
        
          [XmlEnum("water additive")]
          wateradditive,
        
          [XmlEnum("water management material")]
          watermanagementmaterial,
        
          [XmlEnum("pH control")]
          pHcontrol,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimStageType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimStageType xsd enumeration.")]
        public enum StimStageType 
        {
        /// <summary>
        /// A stage in which the fluid type is an acid.
        /// </summary>
          acid,
        
          [XmlEnum("acid spearhead")]
          acidspearhead,
        
          [XmlEnum("acid ball out")]
          acidballout,
        
          [XmlEnum("acid breakdown")]
          acidbreakdown,
        
          [XmlEnum("ball out")]
          ballout,
        /// <summary>
        /// The case in which a rock matrix of an exposed formation fractures and allows fluid to be injected.
        /// </summary>
          breakdown,
        
          [XmlEnum("chemical wash")]
          chemicalwash,
        /// <summary>
        /// To pump fluid through the whole active fluid system.
        /// </summary>
          circulate,
        /// <summary>
        /// A stage that displaces the existing fluid in the wellbore.
        /// </summary>
          displacement,
        /// <summary>
        /// A stage used in stimulation treatments to ensure uniform injection over the area to be treated.
        /// </summary>
          diverter,
        
          [XmlEnum("fluid efficiency test")]
          fluidefficiencytest,
        /// <summary>
        /// A stage in which fluids are allowed to flow from the well following a treatment in preparation for a later treatment or for returning the well to production.
        /// </summary>
          flowback,
        /// <summary>
        /// A stage in which a specially prepared fluid is used to displace preceeding treatments away from the wellbore.
        /// </summary>
          flush,
        
          [XmlEnum("foamed acid")]
          foamedacid,
        /// <summary>
        /// A stage in which a specially prepared fluid is pumped through a jet.
        /// </summary>
          hydrajet,
        
          [XmlEnum("load well")]
          loadwell,
        
          [XmlEnum("load annulus")]
          loadannulus,
        /// <summary>
        /// A stage in which a specially prepared fluid is used to displace preceeding treatments away from the wellbore in excess of the normal flush volume.
        /// </summary>
          overflush,
        /// <summary>
        /// A stage which uses a specially prepared fluid generally preceeding a fracture stimulation treatment to propagate the initiated fracture.
        /// </summary>
          pad,
        
          [XmlEnum("pump-in")]
          pumpin,
        
          [XmlEnum("pre-Job")]
          preJob,
        
          [XmlEnum("pre-flush")]
          preflush,
        
          [XmlEnum("pre-pad")]
          prepad,
        
          [XmlEnum("shut-in")]
          shutin,
        
          [XmlEnum("shut-in for FET analysis")]
          shutinforFETanalysis,
        
          [XmlEnum("proppant laden fluid")]
          proppantladenfluid,
        /// <summary>
        /// A stage in which a mixture of suspended solids and liquids is pumped. A proppant laden fluid is also a slurry, but a slurry is not necessarily a proppant laden fluid.
        /// </summary>
          slurry,
        
          [XmlEnum("sand slug")]
          sandslug,
        /// <summary>
        /// A stage that provides a fluid cusion or separator between two dissimilar fluids.
        /// </summary>
          spacer,
        
          [XmlEnum("spot acid")]
          spotacid,
        
          [XmlEnum("step rate test")]
          stepratetest,
        /// <summary>
        /// A stage used to identify fluid injection to the wellbore.
        /// </summary>
          treatment,
        /// <summary>
        /// A stage of a known type not already listed here.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimStageFlowPathType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimStageFlowPathType xsd enumeration.")]
        public enum StimStageFlowPathType 
        {
        /// <summary>
        /// Fluid is conducted through the annulus, (volume between casing and tubing).
        /// </summary>
          annulus,
        /// <summary>
        /// Fluid is conducted through the casing, (no tubing present).
        /// </summary>
          casing,
        
          [XmlEnum("drill pipe")]
          drillpipe,
        
          [XmlEnum("open hole")]
          openhole,
        /// <summary>
        /// Fluid is conducted through the tubing.
        /// </summary>
          tubing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PIDXCommodityCode xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PIDXCommodityCode xsd enumeration.")]
        public enum PIDXCommodityCode 
        {
        
          [XmlEnum("71131001")]
          Item71131001,
        
          [XmlEnum("71131002")]
          Item71131002,
        
          [XmlEnum("71131003")]
          Item71131003,
        
          [XmlEnum("71131004")]
          Item71131004,
        
          [XmlEnum("71131005")]
          Item71131005,
        
          [XmlEnum("71131006")]
          Item71131006,
        
          [XmlEnum("71131007")]
          Item71131007,
        
          [XmlEnum("71131008")]
          Item71131008,
        
          [XmlEnum("71131009")]
          Item71131009,
        
          [XmlEnum("71131010")]
          Item71131010,
        
          [XmlEnum("71131011")]
          Item71131011,
        
          [XmlEnum("71131012")]
          Item71131012,
        
          [XmlEnum("71131013")]
          Item71131013,
        
          [XmlEnum("71131014")]
          Item71131014,
        
          [XmlEnum("71131015")]
          Item71131015,
        
          [XmlEnum("71131016")]
          Item71131016,
        
          [XmlEnum("71131018")]
          Item71131018,
        
          [XmlEnum("71131019")]
          Item71131019
        }
        /// <summary>
        /// This class represents the ShowRating xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowRating xsd enumeration.")]
        public enum ShowRating 
        {
        /// <summary>
        /// 
        /// </summary>
          none,
        
          [XmlEnum("very poor")]
          verypoor,
        /// <summary>
        /// 
        /// </summary>
          poor,
        /// <summary>
        /// 
        /// </summary>
          fair,
        /// <summary>
        /// 
        /// </summary>
          good,
        
          [XmlEnum("very good")]
          verygood,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowFluorescence xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowFluorescence xsd enumeration.")]
        public enum ShowFluorescence 
        {
        /// <summary>
        /// 
        /// </summary>
          faint,
        /// <summary>
        /// 
        /// </summary>
          bright,
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowSpeed xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowSpeed xsd enumeration.")]
        public enum ShowSpeed 
        {
        /// <summary>
        /// 
        /// </summary>
          slow,
        
          [XmlEnum("moderately fast")]
          moderatelyfast,
        /// <summary>
        /// 
        /// </summary>
          fast,
        /// <summary>
        /// 
        /// </summary>
          instantaneous,
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowLevel xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowLevel xsd enumeration.")]
        public enum ShowLevel 
        {
        /// <summary>
        /// 
        /// </summary>
          blooming,
        /// <summary>
        /// 
        /// </summary>
          streaming,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RiskType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskType xsd enumeration.")]
        public enum RiskType 
        {
        /// <summary>
        /// 
        /// </summary>
          risk,
        /// <summary>
        /// 
        /// </summary>
          @event,
        
          [XmlEnum("near miss")]
          nearmiss,
        
          [XmlEnum("best practice")]
          bestpractice,
        
          [XmlEnum("lessons learned")]
          lessonslearned,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RiskCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskCategory xsd enumeration.")]
        public enum RiskCategory 
        {
        /// <summary>
        /// 
        /// </summary>
          hydraulics,
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        
          [XmlEnum("time related")]
          timerelated,
        
          [XmlEnum("wellbore stability")]
          wellborestability,
        
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// 
        /// </summary>
          bit,
        
          [XmlEnum("equipment failure")]
          equipmentfailure,
        /// <summary>
        /// 
        /// </summary>
          completion,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RiskSubCategory xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskSubCategory xsd enumeration.")]
        public enum RiskSubCategory 
        {
        
          [XmlEnum("gas kick")]
          gaskick,
        
          [XmlEnum("shallow water influx")]
          shallowwaterinflux,
        
          [XmlEnum("other influx or kicks")]
          otherinfluxorkicks,
        
          [XmlEnum("loss circulation")]
          losscirculation,
        
          [XmlEnum("poor hole cleaning")]
          poorholecleaning,
        
          [XmlEnum("good hole cleaning at high ROP")]
          goodholecleaningathighROP,
        
          [XmlEnum("high mud weight")]
          highmudweight,
        
          [XmlEnum("special additives needed")]
          specialadditivesneeded,
        
          [XmlEnum("gumbo problems")]
          gumboproblems,
        
          [XmlEnum("high ECD - rheology related")]
          highECDrheologyrelated,
        
          [XmlEnum("excessive circulation")]
          excessivecirculation,
        
          [XmlEnum("performing a kill")]
          performingakill,
        
          [XmlEnum("mud weight change")]
          mudweightchange,
        
          [XmlEnum("excessive pipe cement scaling")]
          excessivepipecementscaling,
        
          [XmlEnum("pit gain or loss")]
          pitgainorloss,
        
          [XmlEnum("mud stability problems")]
          mudstabilityproblems,
        
          [XmlEnum("shallow gas flow")]
          shallowgasflow,
        
          [XmlEnum("twist off")]
          twistoff,
        
          [XmlEnum("stuck pipe")]
          stuckpipe,
        
          [XmlEnum("wireline stuck in hole")]
          wirelinestuckinhole,
        
          [XmlEnum("stick and slip")]
          stickandslip,
        
          [XmlEnum("vibration - axial")]
          vibrationaxial,
        
          [XmlEnum("vibration - torsional")]
          vibrationtorsional,
        
          [XmlEnum("vibration - transverse")]
          vibrationtransverse,
        
          [XmlEnum("vibration unknown or rough drilling")]
          vibrationunknownorroughdrilling,
        
          [XmlEnum("uneven wear of BHA")]
          unevenwearofBHA,
        
          [XmlEnum("uneven wear of drillstring")]
          unevenwearofdrillstring,
        
          [XmlEnum("excessive torque")]
          excessivetorque,
        
          [XmlEnum("excessive drag")]
          excessivedrag,
        
          [XmlEnum("reaming greater than 2 hours")]
          reaminggreaterthan2hours,
        /// <summary>
        /// 
        /// </summary>
          washouts,
        
          [XmlEnum("tight hole or overPull")]
          tightholeoroverPull,
        
          [XmlEnum("failed inspections or fatigue wear")]
          failedinspectionsorfatiguewear,
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        
          [XmlEnum("drilling greater than 1000 feet/day")]
          drillinggreaterthan1000feetday,
        
          [XmlEnum("drilling greater than 2000 feet/day")]
          drillinggreaterthan2000feetday,
        
          [XmlEnum("drilling less than 20 feet/day")]
          drillinglessthan20feetday,
        
          [XmlEnum("trips greater than 24 hours")]
          tripsgreaterthan24hours,
        
          [XmlEnum("excessive time for BHA makeup")]
          excessivetimeforBHAmakeup,
        
          [XmlEnum("waiting on decisions")]
          waitingondecisions,
        
          [XmlEnum("waiting on weather")]
          waitingonweather,
        
          [XmlEnum("waiting on tools")]
          waitingontools,
        
          [XmlEnum("sloughing or packoffs")]
          sloughingorpackoffs,
        /// <summary>
        /// 
        /// </summary>
          ballooning,
        
          [XmlEnum("fracture problems")]
          fractureproblems,
        
          [XmlEnum("unstable zones")]
          unstablezones,
        
          [XmlEnum("formation integrity test")]
          formationintegritytest,
        
          [XmlEnum("leak-off test")]
          leakofftest,
        /// <summary>
        /// 
        /// </summary>
          tectonics,
        
          [XmlEnum("pore pressure")]
          porepressure,
        /// <summary>
        /// 
        /// </summary>
          breakouts,
        
          [XmlEnum("bed parallel")]
          bedparallel,
        
          [XmlEnum("wellbore stability")]
          wellborestability,
        
          [XmlEnum("excessive doglegs")]
          excessivedoglegs,
        /// <summary>
        /// 
        /// </summary>
          sidetrack,
        
          [XmlEnum("BHA change for directional")]
          BHAchangefordirectional,
        
          [XmlEnum("wrong total flow area")]
          wrongtotalflowarea,
        
          [XmlEnum("well collision - actual")]
          wellcollisionactual,
        
          [XmlEnum("well collision - technical")]
          wellcollisiontechnical,
        /// <summary>
        /// 
        /// </summary>
          geosteering,
        
          [XmlEnum("abnormal tendency changes")]
          abnormaltendencychanges,
        /// <summary>
        /// 
        /// </summary>
          resurveying,
        
          [XmlEnum("in-field referencing (IFR) actions")]
          infieldreferencingIFRactions,
        
          [XmlEnum("bit or BHA performance")]
          bitorBHAperformance,
        
          [XmlEnum("drilling optimization")]
          drillingoptimization,
        
          [XmlEnum("bit balling")]
          bitballing,
        
          [XmlEnum("lost cones or broken cutters")]
          lostconesorbrokencutters,
        
          [XmlEnum("excessive bit wear or gauge")]
          excessivebitwearorgauge,
        
          [XmlEnum("low rate of bit penetration")]
          lowrateofbitpenetration,
        
          [XmlEnum("high rate of bit penetration")]
          highrateofbitpenetration,
        
          [XmlEnum("downhole tool")]
          downholetool,
        
          [XmlEnum("surface system")]
          surfacesystem,
        
          [XmlEnum("motor or rotary steerable system failure")]
          motororrotarysteerablesystemfailure,
        
          [XmlEnum("topdrive failure")]
          topdrivefailure,
        
          [XmlEnum("hoisting equipment failure")]
          hoistingequipmentfailure,
        
          [XmlEnum("circulating equipment failure")]
          circulatingequipmentfailure,
        
          [XmlEnum("electrical system failure")]
          electricalsystemfailure,
        
          [XmlEnum("blow out preventer events")]
          blowoutpreventerevents,
        
          [XmlEnum("surface instrumentation problems")]
          surfaceinstrumentationproblems,
        
          [XmlEnum("rig communications")]
          rigcommunications,
        
          [XmlEnum("completion equipment failure")]
          completionequipmentfailure,
        
          [XmlEnum("miscellaneous rig equipment")]
          miscellaneousrigequipment,
        
          [XmlEnum("tool or equipment failure")]
          toolorequipmentfailure,
        
          [XmlEnum("squeeze jobs")]
          squeezejobs,
        
          [XmlEnum("casing surge losses")]
          casingsurgelosses,
        
          [XmlEnum("stuck casing or completion")]
          stuckcasingorcompletion,
        
          [XmlEnum("shoe failures")]
          shoefailures,
        
          [XmlEnum("early cement setup")]
          earlycementsetup,
        
          [XmlEnum("casing collapse")]
          casingcollapse,
        /// <summary>
        /// 
        /// </summary>
          milling,
        
          [XmlEnum("excessive casing wear or cuttings")]
          excessivecasingwearorcuttings,
        
          [XmlEnum("excessive formation damage or skin")]
          excessiveformationdamageorskin,
        
          [XmlEnum("casing rotation or reciprocation rqd")]
          casingrotationorreciprocationrqd,
        /// <summary>
        /// 
        /// </summary>
          broaching,
        
          [XmlEnum("completion or casing")]
          completionorcasing,
        /// <summary>
        /// 
        /// </summary>
          stratigraphy,
        /// <summary>
        /// 
        /// </summary>
          fishing,
        
          [XmlEnum("junk in hole")]
          junkinhole,
        
          [XmlEnum("delay due to political unrest")]
          delayduetopoliticalunrest,
        
          [XmlEnum("rig move")]
          rigmove,
        
          [XmlEnum("gas hydrates")]
          gashydrates,
        
          [XmlEnum("pending analysis")]
          pendinganalysis,
        
          [XmlEnum("riser disconnect")]
          riserdisconnect,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// 
        /// </summary>
          personnel,
        /// <summary>
        /// 
        /// </summary>
          environmental,
        /// <summary>
        /// 
        /// </summary>
          automotive,
        /// <summary>
        /// 
        /// </summary>
          asset,
        /// <summary>
        /// 
        /// </summary>
          information,
        /// <summary>
        /// 
        /// </summary>
          time,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE
        }
        /// <summary>
        /// This class represents the RiskAffectedPersonnel xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskAffectedPersonnel xsd enumeration.")]
        public enum RiskAffectedPersonnel 
        {
        /// <summary>
        /// 
        /// </summary>
          cementer,
        
          [XmlEnum("company man")]
          companyman,
        /// <summary>
        /// 
        /// </summary>
          contractor,
        
          [XmlEnum("directional driller")]
          directionaldriller,
        /// <summary>
        /// 
        /// </summary>
          driller,
        
          [XmlEnum("drilling engineer")]
          drillingengineer,
        
          [XmlEnum("drilling superintendent")]
          drillingsuperintendent,
        
          [XmlEnum("drilling team")]
          drillingteam,
        
          [XmlEnum("facility engineer")]
          facilityengineer,
        
          [XmlEnum("field service manager")]
          fieldservicemanager,
        /// <summary>
        /// 
        /// </summary>
          foreman,
        
          [XmlEnum("general service supervisor")]
          generalservicesupervisor,
        /// <summary>
        /// 
        /// </summary>
          geologist,
        /// <summary>
        /// 
        /// </summary>
          member,
        
          [XmlEnum("mud engineer")]
          mudengineer,
        
          [XmlEnum("mud logger")]
          mudlogger,
        
          [XmlEnum("MWD or LWD engineer")]
          MWDorLWDengineer,
        
          [XmlEnum("perform engineer")]
          performengineer,
        /// <summary>
        /// 
        /// </summary>
          petrophysicist,
        
          [XmlEnum("production engineer")]
          productionengineer,
        
          [XmlEnum("remotely operated vehicle engineer")]
          remotelyoperatedvehicleengineer,
        
          [XmlEnum("safety manger")]
          safetymanger,
        
          [XmlEnum("sales engineer")]
          salesengineer,
        
          [XmlEnum("service supervisor")]
          servicesupervisor,
        
          [XmlEnum("technical support")]
          technicalsupport,
        
          [XmlEnum("tool pusher")]
          toolpusher,
        
          [XmlEnum("wireline engineer")]
          wirelineengineer
        }
        /// <summary>
        /// This class represents the SurfEquipType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SurfEquipType xsd enumeration.")]
        public enum SurfEquipType 
        {
        /// <summary>
        /// 
        /// </summary>
          IADC,
        /// <summary>
        /// 
        /// </summary>
          custom,
        
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PumpType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PumpType xsd enumeration.")]
        public enum PumpType 
        {
        /// <summary>
        /// Centrifugal mud pump
        /// </summary>
          centrifugal,
        /// <summary>
        /// Duplex mud mump, 2 cylinders
        /// </summary>
          duplex,
        /// <summary>
        /// Triplex mud pump, three cylinders
        /// </summary>
          triplex,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PitType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PitType xsd enumeration.")]
        public enum PitType 
        {
        /// <summary>
        /// 
        /// </summary>
          bulk,
        /// <summary>
        /// 
        /// </summary>
          chemical,
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// 
        /// </summary>
          mix,
        
          [XmlEnum("mud cleaning")]
          mudcleaning,
        
          [XmlEnum("sand trap")]
          sandtrap,
        /// <summary>
        /// That pit in the active pit system located immediately downstream of the shale shakers, whose primary purpose is to allow the settling and disposal of the larger drilled cuttings not removed by the shale shakers. It is occasionally also called a settling tank.
        /// </summary>
          slug,
        /// <summary>
        /// 
        /// </summary>
          storage,
        
          [XmlEnum("surge tank")]
          surgetank,
        
          [XmlEnum("trip tank")]
          triptank,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BopType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BopType xsd enumeration.")]
        public enum BopType 
        {
        
          [XmlEnum("annular preventer")]
          annularpreventer,
        
          [XmlEnum("shear ram")]
          shearram,
        
          [XmlEnum("blind ram")]
          blindram,
        
          [XmlEnum("pipe ram")]
          piperam,
        
          [XmlEnum("drilling spool")]
          drillingspool,
        
          [XmlEnum("flexible joint")]
          flexiblejoint,
        /// <summary>
        /// 
        /// </summary>
          connector,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RigType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RigType xsd enumeration.")]
        public enum RigType 
        {
        /// <summary>
        /// Barge rig
        /// </summary>
          barge,
        
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// Floating rig
        /// </summary>
          floater,
        /// <summary>
        /// Jackup rig
        /// </summary>
          jackup,
        /// <summary>
        /// Land rig
        /// </summary>
          land,
        /// <summary>
        /// Fixed platform
        /// </summary>
          platform,
        
          [XmlEnum("semi-submersible")]
          semisubmersible,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DerrickType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DerrickType xsd enumeration.")]
        public enum DerrickType 
        {
        /// <summary>
        /// 2 stand capacity derrick
        /// </summary>
          @double,
        /// <summary>
        /// 4 stand capacity derrick
        /// </summary>
          quadruple,
        /// <summary>
        /// Slant derrick
        /// </summary>
          slant,
        /// <summary>
        /// 3 stand capacity derrick
        /// </summary>
          triple,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DrawWorksType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DrawWorksType xsd enumeration.")]
        public enum DrawWorksType 
        {
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        
          [XmlEnum("standard electric")]
          standardelectric,
        
          [XmlEnum("diesel electric")]
          dieselelectric,
        
          [XmlEnum("ram rig")]
          ramrig,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DriveType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DriveType xsd enumeration.")]
        public enum DriveType 
        {
        
          [XmlEnum("coiled tubing")]
          coiledtubing,
        
          [XmlEnum("rotary kelly drive")]
          rotarykellydrive,
        
          [XmlEnum("top drive")]
          topdrive,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the SupportCraft xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SupportCraft xsd enumeration.")]
        public enum SupportCraftType 
        {
        /// <summary>
        /// 
        /// </summary>
          barge,
        
          [XmlEnum("standby boat")]
          standbyboat,
        /// <summary>
        /// 
        /// </summary>
          helicopter,
        
          [XmlEnum("supply boat")]
          supplyboat,
        /// <summary>
        /// 
        /// </summary>
          truck,
        
          [XmlEnum("crew vehicle")]
          crewvehicle,
        
          [XmlEnum("tug boat")]
          tugboat,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PumpOpType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PumpOpType xsd enumeration.")]
        public enum PumpOpType 
        {
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// 
        /// </summary>
          reaming,
        /// <summary>
        /// 
        /// </summary>
          circulating,
        
          [XmlEnum("slow pump")]
          slowpump,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ScrType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ScrType xsd enumeration.")]
        public enum ScrType 
        {
        
          [XmlEnum("string annulus")]
          stringannulus,
        
          [XmlEnum("string kill line")]
          stringkillline,
        
          [XmlEnum("string choke line")]
          stringchokeline,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ActivityClassType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ActivityClassType xsd enumeration.")]
        public enum ActivityClassType 
        {
        /// <summary>
        /// 
        /// </summary>
          planned,
        /// <summary>
        /// 
        /// </summary>
          unplanned,
        /// <summary>
        /// 
        /// </summary>
          downtime,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StateDetailActivity xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StateDetailActivity xsd enumeration.")]
        public enum StateDetailActivity 
        {
        /// <summary>
        /// Personnel injury in connection with drilling and/or drilling related operations.
        /// </summary>
          injury,
        
          [XmlEnum("operation failed")]
          operationfailed,
        /// <summary>
        /// Formation fluid invading the well bore.
        /// </summary>
          kick,
        
          [XmlEnum("circulation loss")]
          circulationloss,
        
          [XmlEnum("mud loss")]
          mudloss,
        
          [XmlEnum("stuck equipment")]
          stuckequipment,
        
          [XmlEnum("equipment failure")]
          equipmentfailure,
        
          [XmlEnum("equipment hang")]
          equipmenthang,
        /// <summary>
        /// Operation achieved objective.
        /// </summary>
          success,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MudClass xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MudClass xsd enumeration.")]
        public enum MudClass 
        {
        
          [XmlEnum("water based")]
          waterbased,
        
          [XmlEnum("oil based")]
          oilbased,
        /// <summary>
        /// A drilling fluid in which neither water nor oil is the continous phase.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogIndexType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogIndexType xsd enumeration.")]
        public enum LogIndexType 
        {
        
          [XmlEnum("date time")]
          datetime,
        
          [XmlEnum("elapsed time")]
          elapsedtime,
        /// <summary>
        /// Log is indexed on length (not a depth).
        /// </summary>
          length,
        
          [XmlEnum("measured depth")]
          measureddepth,
        
          [XmlEnum("vertical depth")]
          verticaldepth,
        /// <summary>
        /// Any other index type for a log.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MudLogParameterType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MudLogParameterType xsd enumeration.")]
        public enum MudLogParameterType 
        {
        
          [XmlEnum("bit parameters")]
          bitparameters,
        
          [XmlEnum("bit type comment")]
          bittypecomment,
        
          [XmlEnum("casing point comment")]
          casingpointcomment,
        
          [XmlEnum("chromatograph comment")]
          chromatographcomment,
        
          [XmlEnum("circulation system comment")]
          circulationsystemcomment,
        
          [XmlEnum("core interval comment")]
          coreintervalcomment,
        
          [XmlEnum("cuttings gas")]
          cuttingsgas,
        
          [XmlEnum("direct fracture pressure")]
          directfracturepressure,
        
          [XmlEnum("direct pore pressure measurements")]
          directporepressuremeasurements,
        
          [XmlEnum("drilling data comment")]
          drillingdatacomment,
        
          [XmlEnum("fracture PG estimate most likely")]
          fracturePGestimatemostlikely,
        
          [XmlEnum("gas peaks comment")]
          gaspeakscomment,
        
          [XmlEnum("gas ratio comment")]
          gasratiocomment,
        
          [XmlEnum("general engineering comment")]
          generalengineeringcomment,
        
          [XmlEnum("kicks and flows")]
          kicksandflows,
        
          [XmlEnum("lithlog comment")]
          lithlogcomment,
        
          [XmlEnum("lost returns")]
          lostreturns,
        
          [XmlEnum("LWD comment")]
          LWDcomment,
        
          [XmlEnum("marker or formation top comment")]
          markerorformationtopcomment,
        
          [XmlEnum("midnight depth date")]
          midnightdepthdate,
        
          [XmlEnum("mud check comment")]
          mudcheckcomment,
        
          [XmlEnum("mud data comment")]
          muddatacomment,
        
          [XmlEnum("mudlog comment")]
          mudlogcomment,
        
          [XmlEnum("overburden gradient")]
          overburdengradient,
        
          [XmlEnum("overpull on connection")]
          overpullonconnection,
        
          [XmlEnum("overpull on trip")]
          overpullontrip,
        
          [XmlEnum("pore PG estimate most likely")]
          porePGestimatemostlikely,
        
          [XmlEnum("pore pressure estimate while drilling")]
          porepressureestimatewhiledrilling,
        
          [XmlEnum("pressure data comment")]
          pressuredatacomment,
        
          [XmlEnum("shale density comment")]
          shaledensitycomment,
        
          [XmlEnum("short trip comment")]
          shorttripcomment,
        
          [XmlEnum("show report comment")]
          showreportcomment,
        
          [XmlEnum("sidewall core comment")]
          sidewallcorecomment,
        
          [XmlEnum("sliding Interval")]
          slidingInterval,
        
          [XmlEnum("steam still results comment")]
          steamstillresultscomment,
        
          [XmlEnum("survey comment")]
          surveycomment,
        
          [XmlEnum("temperature data comment")]
          temperaturedatacomment,
        
          [XmlEnum("temperature trend comment")]
          temperaturetrendcomment,
        
          [XmlEnum("wireline log comment")]
          wirelinelogcomment,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LithologySource xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LithologySource xsd enumeration.")]
        public enum LithologySource 
        {
        /// <summary>
        /// The lithology has one overall interpretation based on several sources such as logs and cuttings or cores.
        /// </summary>
          interpreted,
        /// <summary>
        /// The lithology as based on a visual inspection of the core. A percentage is commonly assigned to each portion of the lithology.
        /// </summary>
          core,
        /// <summary>
        /// The lithology as based on a visual inspection of the cuttings. A percentage is commonly assigned to each portion of the lithology.
        /// </summary>
          cuttings,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the GasPeakType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the GasPeakType xsd enumeration.")]
        public enum GasPeakType 
        {
        
          [XmlEnum("circulating background gas")]
          circulatingbackgroundgas,
        
          [XmlEnum("connection gas")]
          connectiongas,
        
          [XmlEnum("drilling background gas")]
          drillingbackgroundgas,
        
          [XmlEnum("drilling gas peak")]
          drillinggaspeak,
        
          [XmlEnum("flow check gas")]
          flowcheckgas,
        
          [XmlEnum("no readings")]
          noreadings,
        /// <summary>
        /// 
        /// </summary>
          other,
        
          [XmlEnum("shut down gas")]
          shutdowngas,
        
          [XmlEnum("trip gas")]
          tripgas,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LithostratigraphyUnit xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LithostratigraphyUnit xsd enumeration.")]
        public enum LithostratigraphyUnit 
        {
        /// <summary>
        ///  A succession of two or more contiguous or associated formations with significant and diagnostic lithologic properties in common. Formations need not be aggregated into groups unless doing so provides a useful means of simplifying stratigraphic classification in certain regions or certain intervals. Thickness of a stratigraphic succession is not a valid reason for defining a unit as a group rather than a formation. The component formations of a group need not be everywhere the same. 
        /// </summary>
          group,
        /// <summary>
        ///  The primary formal unit of lithostratigraphic classification. Formations are the only formal lithostratigraphic units into which the stratigraphic column everywhere should be divided completely on the basis of lithology. The contrast in lithology between formations required to justify their establishment varies with the complexity of the geology of a region and the detail needed for geologic mapping and to work out its geologic history. No formation is considered justifiable and useful that cannot be delineated at the scale of geologic mapping practiced in the region. The thickness of formations may range from less than a meter to several thousand meters. 
        /// </summary>
          formation,
        /// <summary>
        ///  The formal lithostratigraphic unit next in rank below a formation. It possesses lithologic properties distinguishing it from adjacent parts of the formation. No fixed standard is required for the extent and thickness of a member. A formation need not be divided into members unless a useful purpose is thus served. Some formations may be completely divided into members; others may have only certain parts designated as members. A member may extend from one formation to another. 
        /// </summary>
          member,
        /// <summary>
        ///  The smallest formal unit in the hierarchy of sedimentary lithostratigraphic units, e.g. a single stratum lithologically distinguishable from other layers above and below. Customarily only distinctive beds (key beds, marker beds) particularly useful for stratigraphic purposes are given proper names and considered formal lithostratigraphic units. 
        /// </summary>
          bed
        }
        /// <summary>
        /// This class represents the ChronostratigraphyUnit xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ChronostratigraphyUnit xsd enumeration.")]
        public enum ChronostratigraphyUnit 
        {
        /// <summary>
        ///  Era is the geochronologic equivalent of an erathem. The names of erathems were chosen to reflect major changes of the development of life on the Earth: Paleozoic (old life), Mesozoic (intermediate life), and Cenozoic (recent life). 
        /// </summary>
          era,
        /// <summary>
        ///  Period is the geochronologic equivalent of a System. A system is a unit of major rank in the conventional chronostratigraphic hierarchy, above a series and below an erathem. The names of currently recognized systems are of diverse origin inherited from early classifications: some indicate chronologic position (Tertiary, Quaternary), others have lithologic connotation (Carboniferous, Cretaceous), others are tribal (Ordovician, Silurian) and still others are geographic (Devonian, Permian). 
        /// </summary>
          period,
        /// <summary>
        ///  Epoch is the geochronologic equivalent of a Series. The names of the currently recognized series are derived from their position within a system: lower, middle, upper. 
        /// </summary>
          epoch,
        /// <summary>
        ///  The stage has been called the basic working unit of chronostratigraphy because it is suited in scope and rank to the practical needs and purposes of intraregional chronostratigraphic classification. A stage is normally the lowest ranking unit in the chronostratigraphic hierarchy that can be recognized on a global scale. 
        /// </summary>
          stage
        }
        /// <summary>
        /// This class represents the MessageType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MessageType xsd enumeration.")]
        public enum MessageType 
        {
        /// <summary>
        /// An alarm condition when something has exceeded specified limits
        /// </summary>
          alarm,
        /// <summary>
        /// Information about a specific event
        /// </summary>
          @event,
        /// <summary>
        /// General information message
        /// </summary>
          informational,
        /// <summary>
        /// A cautionary message
        /// </summary>
          warning,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MessageSeverity xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MessageSeverity xsd enumeration.")]
        public enum MessageSeverity 
        {
        /// <summary>
        /// 
        /// </summary>
          catastrophic,
        /// <summary>
        /// 
        /// </summary>
          major,
        /// <summary>
        /// 
        /// </summary>
          minor,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MessageProbability xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MessageProbability xsd enumeration.")]
        public enum MessageProbability 
        {
        /// <summary>
        /// 
        /// </summary>
          low,
        /// <summary>
        /// 
        /// </summary>
          medium,
        /// <summary>
        /// 
        /// </summary>
          high,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemChoiceType1 xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType1 xsd enumeration.")]
        public enum ItemChoiceType1 
        {
        
          doubleValues,
        
          stringValues
        }
        /// <summary>
        /// This class represents the LogTraceState xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogTraceState xsd enumeration.")]
        public enum LogTraceState 
        {
        
          [XmlEnum("depth adjusted")]
          depthadjusted,
        /// <summary>
        /// 
        /// </summary>
          edited,
        /// <summary>
        /// 
        /// </summary>
          joined,
        /// <summary>
        /// 
        /// </summary>
          processed,
        /// <summary>
        /// 
        /// </summary>
          raw,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogTraceOrigin xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogTraceOrigin xsd enumeration.")]
        public enum LogTraceOrigin 
        {
        /// <summary>
        /// The data were read from a realtime sensor stream.
        /// </summary>
          realtime,
        /// <summary>
        /// The data are synthetic.
        /// </summary>
          modeled,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogDataType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogDataType xsd enumeration.")]
        public enum LogDataType 
        {
        /// <summary>
        /// Integer data value (nominally a one byte value). The value must conform to format of the xsd:dateTime data type (minInclusive=-128 and maxInclusive=127).
        /// </summary>
          @byte,
        
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// Double precision floating point value (nominally an 8 byte value). The value must conform to format of the xsd:double data type.
        /// </summary>
          @double,
        /// <summary>
        /// Single precision floating point value (nominally an 4 byte value). The value must conform to format of the xsd:float data type.
        /// </summary>
          @float,
        /// <summary>
        /// Integer data value (nominally an 4 byte value). The value must conform to format of the xsd:int data type.
        /// </summary>
          @int,
        /// <summary>
        /// Long integer data value (nominally an 8 byte value). The value must conform to format of the xsd:long data type.
        /// </summary>
          @long,
        /// <summary>
        /// Integer data value (nominally an 2 byte value). The value must conform to format of the xsd:short data type (minInclusive=-32768 and maxInclusive=32767).
        /// </summary>
          @short,
        /// <summary>
        /// Character string data. The value must conform to format of the xsd:string data type. The maximum length of a value is server dependent.
        /// </summary>
          @string,
        /// <summary>
        /// Character string data with a maximum length of 40 characters. The value must conform to format of the xsd:string data type.
        /// </summary>
          string40,
        /// <summary>
        /// Character string data with a maximum length of 16 characters. The value must conform to format of the xsd:string data type.
        /// </summary>
          string16,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogIndexDirection xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogIndexDirection xsd enumeration.")]
        public enum LogIndexDirection 
        {
        /// <summary>
        /// Log items are in order of decreasing index values (e.g. wireline log logging while pulling out of hole)
        /// </summary>
          decreasing,
        /// <summary>
        /// Log items are in order of increasing index values (e.g. increasing depths or times)
        /// </summary>
          increasing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellControlIncidentType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellControlIncidentType xsd enumeration.")]
        public enum WellControlIncidentType 
        {
        
          [XmlEnum("magnetic MWD")]
          magneticMWD,
        
          [XmlEnum("gyroscopic  MWD")]
          gyroscopicMWD,
        
          [XmlEnum("gyroscopic north seeking")]
          gyroscopicnorthseeking,
        
          [XmlEnum("gyroscopic inertial")]
          gyroscopicinertial,
        
          [XmlEnum("magnetic single-shot")]
          magneticsingleshot,
        
          [XmlEnum("magnetic multiple-shot")]
          magneticmultipleshot,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown,
        
          [XmlEnum("shallow gas kick")]
          shallowgaskick,
        
          [XmlEnum("water kick")]
          waterkick,
        
          [XmlEnum("oil kick")]
          oilkick,
        
          [XmlEnum("gas kick")]
          gaskick,
        
          [XmlEnum("unknown")]
          unknown1
        }
        /// <summary>
        /// This class represents the WellKillingProcedureType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellKillingProcedureType xsd enumeration.")]
        public enum WellKillingProcedureType 
        {
        
          [XmlEnum("drillers method")]
          drillersmethod,
        
          [XmlEnum("wait and weight")]
          waitandweight,
        /// <summary>
        /// A well killing procedure that is prescribing pumping of kill weight fluid down the tubing and forcing the wellbore fluids back into the formation through the perforations.
        /// </summary>
          bullheading,
        
          [XmlEnum("lubricate and bleed")]
          lubricateandbleed,
        
          [XmlEnum("forward circulation")]
          forwardcirculation,
        
          [XmlEnum("reverse circulation")]
          reversecirculation,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellTestType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellTestType xsd enumeration.")]
        public enum WellTestType 
        {
        
          [XmlEnum("drill stem test")]
          drillstemtest,
        
          [XmlEnum("production test")]
          productiontest,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the InnerBarrelType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the InnerBarrelType xsd enumeration.")]
        public enum InnerBarrelType 
        {
        /// <summary>
        /// A pipe that is located inside a core barrel to hold the core sample.
        /// </summary>
          undifferented,
        /// <summary>
        /// An inner core barrel made of aluminium.
        /// </summary>
          aluminum,
        /// <summary>
        /// An inner core barrel that that seals off the core sample using gel as the sealing material.
        /// </summary>
          gel,
        /// <summary>
        /// An inner core barrel made of glass fiber reinforced plastic.
        /// </summary>
          fiberglass,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemsChoiceType1 xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType1 xsd enumeration.")]
        public enum ItemsChoiceType1 
        {
        
          eTimStatic,
        
          tempBHCT,
        
          tempBHST
        }
        /// <summary>
        /// This class represents the ReadingKind xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ReadingKind xsd enumeration.")]
        public enum ReadingKind 
        {
        /// <summary>
        /// The reading was measured.
        /// </summary>
          measured,
        /// <summary>
        /// The reading was estimated.
        /// </summary>
          estimated,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellNamingSystem xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellNamingSystem xsd enumeration.")]
        public enum WellNamingSystem 
        {
        /// <summary>
        /// United Kingdom Department of Trade and Industry
        /// </summary>
          DTI,
        /// <summary>
        /// American Petroleum Institute well number (10,12 or 14 digits).
        /// </summary>
          API,
        
          [XmlEnum("NPD code")]
          NPDcode,
        
          [XmlEnum("NPD number")]
          NPDnumber,
        
          [XmlEnum("local field")]
          localfield,
        /// <summary>
        /// A name assigned to a prospect - a well that has not yet been drilled.
        /// </summary>
          prospect,
        /// <summary>
        /// The naming system is not known.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PresTestType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PresTestType xsd enumeration.")]
        public enum PresTestType 
        {
        
          [XmlEnum("leak off test")]
          leakofftest,
        
          [XmlEnum("formation integrity test")]
          formationintegritytest,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the OpsReportVersion xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the OpsReportVersion xsd enumeration.")]
        public enum OpsReportVersion 
        {
        /// <summary>
        /// A preliminary report that has not yet been approved by the drilling operator. This report is normally issued at the beginning of the work day (e.g., 6:00 am) before 
        /// </summary>
          preliminary,
        /// <summary>
        /// A normal daily staus report that has been approved by the drilling operator.
        /// </summary>
          normal,
        /// <summary>
        /// A report that represents the final definitive status for the well. This report is normally issued some period of time (e.g., 6 months) after the completion of drilling.
        /// </summary>
          final,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ChangeInfoType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ChangeInfoType xsd enumeration.")]
        public enum ChangeInfoType 
        {
        /// <summary>
        /// An object was added.
        /// </summary>
          add,
        /// <summary>
        /// An object was modified.
        /// </summary>
          update,
        /// <summary>
        /// An object was deleted.
        /// </summary>
          delete
        }
        /// <summary>
        /// This class represents the CementJobType xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CementJobType xsd enumeration.")]
        public enum CementJobType 
        {
        /// <summary>
        /// 
        /// </summary>
          primary,
        /// <summary>
        /// 
        /// </summary>
          plug,
        /// <summary>
        /// 
        /// </summary>
          squeeze,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BhaStatus xsd enumeration.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BhaStatus xsd enumeration.")]
        public enum BhaStatus 
        {
        /// <summary>
        /// 
        /// </summary>
          final,
        /// <summary>
        /// 
        /// </summary>
          progress,
        /// <summary>
        /// 
        /// </summary>
          plan,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
    }
    #endregion
}